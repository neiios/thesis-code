{"id":"uses_throw_1","timestamp":1745345901251,"code":"def parseQuantity(input: String): Int =\n  try input.toInt\n  catch case _: NumberFormatException => throw new IllegalArgumentException(\"Quantity not a number\")\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_3","timestamp":1745345901252,"code":"def calculateDiscount(amount: Double, code: String): Double =\n  if code == \"SUMMER20\" then amount * 0.8\n  else throw new Exception(\"Invalid discount code\")\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_5","timestamp":1745345901252,"code":"class Cart(val items: List[String]) {\n  def firstItem: String =\n    if items.isEmpty then throw new NoSuchElementException(\"No items in cart\")\n    else items.head\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_7","timestamp":1745345901252,"code":"def getPaymentMethod(method: String): String =\n  method match\n    case \"card\" | \"paypal\" => method\n    case _ => throw new Exception(\"Unsupported payment method\")\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_9","timestamp":1745345901252,"code":"def applyCoupon(total: Double, coupon: Option[String]): Double =\n  coupon match\n    case Some(\"XMAS10\") => total - 10\n    case Some(_) => throw new Exception(\"Invalid coupon\")\n    case None => total\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_11","timestamp":1745345901253,"code":"def findProductById(id: Long, products: Map[Long, String]): String =\n  products.get(id) match\n    case Some(name) => name\n    case None => throw new NoSuchElementException(\"Product not found\")\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_13","timestamp":1745345901253,"code":"def validateEmail(email: String): Boolean =\n  if email.contains(\"@\") then true\n  else throw new IllegalArgumentException(\"Invalid email address\")\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_15","timestamp":1745345901253,"code":"def getShippingAddress(userId: Int, addressBook: Map[Int, String]): String =\n  addressBook.get(userId).getOrElse(\n    throw new Exception(\"No shipping address for user\")\n  )\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_17","timestamp":1745345901253,"code":"def computeTax(amount: Double, region: String): Double =\n  region match\n    case \"US\" => amount * 0.07\n    case \"EU\" => amount * 0.2\n    case _ => throw new Exception(\"Unsupported region for tax\")\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_19","timestamp":1745345901253,"code":"def updateStock(productId: Int, stock: Int): Int =\n  if stock < 0 then throw new IllegalArgumentException(\"Stock can't be negative\")\n  else stock\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_21","timestamp":1745345901253,"code":"def safeDivide(a: Int, b: Int): Int =\n  if b == 0 then throw new ArithmeticException(\"Cannot divide by zero\")\n  else a / b\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_23","timestamp":1745345901254,"code":"def selectShippingMethod(method: String): Int =\n  method.toLowerCase match\n    case \"standard\" => 3\n    case \"express\" => 1\n    case _ => throw new IllegalArgumentException(\"Invalid shipping method\")\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_25","timestamp":1745345901254,"code":"def checkout(cart: List[String]): String =\n  if cart.isEmpty then throw new Exception(\"Cannot checkout empty cart\")\n  else \"Checkout successful!\"\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_27","timestamp":1745345901254,"code":"def getCartTotal(cart: List[Double]): Double =\n  if cart.exists(_ < 0) then throw new IllegalArgumentException(\"Cart contains invalid negative price\")\n  else cart.sum\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_29","timestamp":1745345901254,"code":"def userHasPermission(userRole: String): Boolean =\n  if userRole != \"admin\" then throw new SecurityException(\"User lacks permission\")\n  else true\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_31","timestamp":1745345901255,"code":"def verifyCardNumber(number: String): Boolean =\n  if number.length != 16 then throw new Exception(\"Invalid card number length\")\n  else true\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_33","timestamp":1745345901255,"code":"def removeItem(cart: List[String], item: String): List[String] =\n  if !cart.contains(item) then throw new Exception(\"Item not found in cart\")\n  else cart.filterNot(_ == item)\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_35","timestamp":1745345901255,"code":"def giftWrapOption(option: String): Boolean =\n  option match\n    case \"yes\" => true\n    case \"no\" => false\n    case _ => throw new IllegalArgumentException(\"Invalid gift wrap option\")\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_37","timestamp":1745345901255,"code":"def fetchOrderStatus(orderId: Int, orders: Map[Int, String]): String =\n  orders.get(orderId) match\n    case Some(status) => status\n    case None => throw new Exception(\"Order ID does not exist\")\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_39","timestamp":1745345901256,"code":"def validateCVV(cvv: String): Int =\n  if cvv.length != 3 then throw new Exception(\"Invalid CVV length\")\n  else try cvv.toInt catch case _: NumberFormatException => throw new Exception(\"CVV not numeric\")\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_21","timestamp":1745345917219,"code":"def findUserById(id: String): User =\n  if id.isEmpty then throw new IllegalArgumentException(\"User ID required\")\n  // Simulate user not found\n  throw new NoSuchElementException(\"User not found\")\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_23","timestamp":1745345917219,"code":"def getBalance(account: Account): Double =\n  if account.isBlocked then throw new Exception(\"Account is blocked\")\n  account.balance\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_25","timestamp":1745345917219,"code":"def transfer(from: Account, to: Account, amount: Double): Unit =\n  if amount <= 0 then throw new IllegalArgumentException(\"Amount must be positive\")\n  if from.balance < amount then throw new Exception(\"Insufficient funds\")\n  // Pretend transfer occurs\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_27","timestamp":1745345917219,"code":"def fetchTransactions(userId: String): List[Transaction] =\n  if userId.isBlank then throw new IllegalArgumentException(\"Empty user ID\")\n  // Returns empty for simplicity\n  Nil\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_29","timestamp":1745345917220,"code":"def parseAmount(str: String): Double =\n  try str.toDouble catch\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid amount format\")\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_31","timestamp":1745345917220,"code":"def loginUser(username: String, password: String): Session =\n  if username.isEmpty || password.isEmpty then throw new Exception(\"Credentials required\")\n  if username != \"user\" || password != \"pass\" then throw new Exception(\"Authentication failed\")\n  new Session()\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_33","timestamp":1745345917220,"code":"def calculateInterest(balance: Double, rate: Double): Double =\n  if rate < 0 then throw new Exception(\"Negative interest rate\")\n  balance * rate / 100\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_35","timestamp":1745345917220,"code":"def withdraw(user: User, amount: Double): Unit =\n  if user.suspended then throw new Exception(\"User suspended\")\n  if user.balance < amount then throw new Exception(\"Not enough funds\")\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_37","timestamp":1745345917220,"code":"def getCardByNumber(cards: List[Card], number: String): Card =\n  cards.find(_.number == number).getOrElse(throw new Exception(\"Card not found\"))\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_39","timestamp":1745345917221,"code":"def schedulePayment(date: LocalDate): Unit =\n  if date.isBefore(LocalDate.now()) then throw new Exception(\"Cannot schedule payment in the past\")\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_41","timestamp":1745345917221,"code":"def addNewPayee(payees: List[Payee], newPayee: Payee): List[Payee] =\n  if payees.exists(_.accountNumber == newPayee.accountNumber) then throw new Exception(\"Payee already exists\")\n  newPayee :: payees\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_43","timestamp":1745345917221,"code":"def mobileNumberVerification(number: String): Boolean =\n  if !number.matches(\"\\\\d{10}\") then throw new Exception(\"Invalid mobile number format\")\n  true\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_45","timestamp":1745345917221,"code":"def dividePayments(total: Double, parts: Int): Double =\n  if parts == 0 then throw new ArithmeticException(\"Division by zero\")\n  total / parts\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_47","timestamp":1745345917221,"code":"def getTransactionById(transactions: List[Transaction], id: String): Transaction =\n  transactions.find(_.id == id).getOrElse(throw new Exception(\"Transaction ID not found\"))\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_49","timestamp":1745345917222,"code":"def activateAccount(account: Account): Account =\n  if account.status == \"active\" then throw new Exception(\"Account already active\")\n  account.copy(status = \"active\")\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_51","timestamp":1745345917222,"code":"def disableCard(card: Card): Card =\n  if card.disabled then throw new Exception(\"Card is already disabled\")\n  card.copy(disabled = true)\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_53","timestamp":1745345917222,"code":"def validateOtp(otp: String, correct: String): Unit =\n  if otp != correct then throw new Exception(\"Invalid OTP\")\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_55","timestamp":1745345917222,"code":"def setSpendingLimit(account: Account, limit: Double): Account =\n  if limit < 0 then throw new IllegalArgumentException(\"Negative limit\")\n  if limit > 5000 then throw new Exception(\"Limit exceeds maximum allowed\")\n  account.copy(limit = Some(limit))\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_57","timestamp":1745345917222,"code":"def getRecentStatement(statements: List[Statement]): Statement =\n  if statements.isEmpty then throw new NoSuchElementException(\"No statements available\")\n  statements.head\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_59","timestamp":1745345917222,"code":"def saveUserProfile(user: User): Unit =\n  if user.email.isBlank then throw new Exception(\"Email required\")\n  // Pretend save occurs\n","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_41","timestamp":1745345940668,"code":"def findDoctorSlot(doctorId: Int, date: String): String =\n  if date.isEmpty then throw new IllegalArgumentException(\"Date cannot be empty\")\n  else s\"Slot for doctor $doctorId on $date\"\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_43","timestamp":1745345940668,"code":"def scheduleAppointment(patientId: Int, doctorId: Int, time: String): String =\n  if time.length != 5 then throw new RuntimeException(\"Invalid time format\")\n  else s\"Appointment scheduled for $patientId with $doctorId at $time\"\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_45","timestamp":1745345940668,"code":"def cancelAppointment(appointmentId: Int): Unit =\n  if appointmentId <= 0 then throw new Exception(\"Invalid appointment ID\")\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_47","timestamp":1745345940669,"code":"def rescheduleAppointment(id: Int, newTime: String): String =\n  if newTime == null then throw new NullPointerException(\"Time cannot be null\")\n  \"Rescheduled successfully\"\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_49","timestamp":1745345940669,"code":"def checkPatientEligibility(patientAge: Int): Boolean =\n  if patientAge < 0 then throw new Exception(\"Age cannot be negative\")\n  else patientAge >= 18\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_51","timestamp":1745345940669,"code":"def selectVideoPlatform(platform: String): String =\n  if platform != \"Zoom\" && platform != \"Skype\" then \n    throw new Exception(s\"Unsupported platform: $platform\")\n  else platform\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_53","timestamp":1745345940669,"code":"def getDoctorAvailability(doctorId: Int): List[String] =\n  if doctorId > 1000 then throw new Exception(\"Doctor ID not found\")\n  else List(\"09:00\", \"10:00\")\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_55","timestamp":1745345940669,"code":"def bookTimeSlot(time: String, isAvailable: Boolean): String =\n  if !isAvailable then throw new Exception(\"Time slot not available\")\n  else s\"Booked at $time\"\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_57","timestamp":1745345940670,"code":"def appointmentDuration(minutes: Int): Int =\n  if minutes <= 0 then throw new Exception(\"Duration must be positive\")\n  else minutes\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_59","timestamp":1745345940670,"code":"def validateEmail(email: String): Boolean =\n  if !email.contains(\"@\") then throw new Exception(\"Invalid email format\")\n  else true\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_61","timestamp":1745345940670,"code":"def assignRoom(doctorId: Int, roomNumber: Int): String =\n  if roomNumber < 1 then throw new Exception(\"Invalid room number\")\n  else s\"Doctor $doctorId assigned to room $roomNumber\"\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_63","timestamp":1745345940670,"code":"def confirmBooking(confirm: Boolean): String =\n  if !confirm then throw new Exception(\"Booking not confirmed\")\n  else \"Booking confirmed\"\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_65","timestamp":1745345940670,"code":"def findNextAvailableSlot(slots: List[String]): String =\n  if slots.isEmpty then throw new Exception(\"No available slots\")\n  else slots.head\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_67","timestamp":1745345940670,"code":"def sendReminder(patientId: Int, message: String): Unit =\n  if message.trim.isEmpty then throw new Exception(\"Message cannot be empty\")\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_69","timestamp":1745345940671,"code":"def computeWaitTime(patientsAhead: Int, avgDuration: Int): Int =\n  if avgDuration == 0 then throw new ArithmeticException(\"Average duration cannot be zero\")\n  patientsAhead * avgDuration\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_71","timestamp":1745345940671,"code":"def checkAppointmentStatus(status: String): String =\n  if status != \"Scheduled\" && status != \"Cancelled\" then throw new Exception(\"Unknown status\")\n  else status\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_73","timestamp":1745345940671,"code":"def getPatientHistory(patientId: Int): List[String] =\n  if patientId < 1 then throw new Exception(\"Invalid patient ID\")\n  else List(\"Visit1\", \"Visit2\")\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_75","timestamp":1745345940671,"code":"def requestPrescription(appointmentId: Int, note: String): String =\n  if note.isEmpty then throw new Exception(\"Note is required\")\n  else \"Prescription requested\"\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_77","timestamp":1745345940671,"code":"def allocateSpecialist(specialty: String): String =\n  if specialty.isEmpty then throw new Exception(\"Specialty cannot be empty\")\n  else \"Specialist allocated\"\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_79","timestamp":1745345940672,"code":"def changeAppointmentType(currentType: String, newType: String): String =\n  if currentType == newType then throw new Exception(\"New type must differ from current type\")\n  else s\"Appointment type changed to $newType\"\n","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_61","timestamp":1745345959984,"code":"def calculateStepAvg(totalSteps: Int, days: Int): Int =\n  if days == 0 then throw new IllegalArgumentException(\"Days cannot be zero\")\n  else totalSteps / days\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_63","timestamp":1745345959984,"code":"def getHeartRateZone(hr: Int): String =\n  if hr < 0 then throw new IllegalArgumentException(\"Heart rate cannot be negative\")\n  else if hr < 100 then \"Rest\"\n  else if hr < 140 then \"Fat Burn\"\n  else if hr <= 180 then \"Cardio\"\n  else throw new RuntimeException(\"Heart rate too high!\")\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_65","timestamp":1745345959984,"code":"def distanceInKm(steps: Int): Double =\n  if steps < 0 then throw new Exception(\"Negative step count\")\n  else steps * 0.0008\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_67","timestamp":1745345959984,"code":"def requiredWaterIntake(weightKg: Int): Int =\n  if weightKg <= 0 then throw new IllegalArgumentException(\"Invalid weight\")\n  else weightKg * 35\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_69","timestamp":1745345959985,"code":"def caloriesBurned(durationMin: Int, met: Double, weightKg: Double): Double =\n  if durationMin <= 0 || met <= 0 || weightKg <= 0 then throw new Exception(\"Non-positive values not allowed\")\n  else met * weightKg * durationMin / 60\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_71","timestamp":1745345959985,"code":"def sleepEfficiency(timeAsleep: Int, timeInBed: Int): Double =\n  if timeInBed == 0 then throw new ArithmeticException(\"Time in bed cannot be zero\")\n  else (timeAsleep.toDouble / timeInBed) * 100\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_73","timestamp":1745345959985,"code":"def addWorkout(logs: List[String], newWorkout: String): List[String] =\n  if newWorkout.isBlank then throw new Exception(\"Workout description is empty\")\n  else logs :+ newWorkout\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_75","timestamp":1745345959985,"code":"def findBestDay(steps: Array[Int]): Int =\n  if steps.length == 0 then throw new Exception(\"No steps data\")\n  else steps.zipWithIndex.maxBy(_._1)._2\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_77","timestamp":1745345959985,"code":"class TrackerUser(val name: String, val age: Int):\n  if name.isBlank then throw new Exception(\"Name is required\")\n  if age <= 0 then throw new Exception(\"Invalid age\")\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_79","timestamp":1745345959985,"code":"def parseStepCount(str: String): Int =\n  try str.toInt\n  catch case _ => throw new NumberFormatException(\"Invalid step count format\")\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_81","timestamp":1745345959985,"code":"def averageHeartRate(rates: List[Int]): Double =\n  if rates.isEmpty then throw new Exception(\"No heart rate data\")\n  else rates.sum.toDouble / rates.size\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_83","timestamp":1745345959985,"code":"def weeklyGoalReached(steps: List[Int], goal: Int): Boolean =\n  if goal <= 0 then throw new Exception(\"Weekly goal must be positive\")\n  else steps.sum >= goal\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_85","timestamp":1745345959985,"code":"def fetchLatestSession(sessions: List[(Int, String)]): (Int, String) =\n  if sessions.isEmpty then throw new Exception(\"No sessions available\")\n  else sessions.maxBy(_._1)\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_87","timestamp":1745345959985,"code":"def calculatePace(distanceKm: Double, minutes: Double): Double =\n  if minutes <= 0 then throw new Exception(\"Minutes cannot be zero or negative\")\n  else distanceKm / minutes\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_89","timestamp":1745345959985,"code":"def addFriend(user: String, friends: Set[String]): Set[String] =\n  if friends.contains(user) then throw new Exception(\"Already friends\")\n  else friends + user\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_91","timestamp":1745345959986,"code":"def caloriesFromSteps(steps: Int): Int =\n  if steps < 0 then throw new IllegalArgumentException(\"Step count can't be negative\")\n  else (steps * 0.04).toInt\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_93","timestamp":1745345959986,"code":"def getActiveMinutes(log: Map[String, Int], day: String): Int =\n  log.get(day) match\n    case Some(minutes) => minutes\n    case None => throw new Exception(s\"No data for $day\")\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_95","timestamp":1745345959986,"code":"def removeWorkout(workouts: Vector[String], index: Int): Vector[String] =\n  if index < 0 || index >= workouts.size then throw new IndexOutOfBoundsException(\"Invalid index to remove\")\n  else workouts.patch(index, Nil, 1)\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_97","timestamp":1745345959986,"code":"def validateSleepData(hours: Double): Unit =\n  if hours < 0 || hours > 24 then throw new IllegalArgumentException(\"Sleep hours must be 0-24\")\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_99","timestamp":1745345959986,"code":"def getMaxDistance(distances: List[Double]): Double =\n  if distances.isEmpty then throw new Exception(\"No distances recorded\")\n  else distances.max\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_81","timestamp":1745345981314,"code":"def findPlanById(planId: String): PricingPlan =\n  val plan = database.get(planId)\n  if plan == null then throw new NoSuchElementException(s\"Plan not found: $planId\")\n  plan\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_83","timestamp":1745345981314,"code":"def calculateDiscountedPrice(planId: String, discount: Double): Double =\n  if discount < 0.0 || discount > 1.0 then throw new IllegalArgumentException(\"Discount must be between 0 and 1\")\n  val plan = findPlanById(planId)\n  plan.price * (1 - discount)\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_85","timestamp":1745345981314,"code":"def activatePlan(userId: String, planId: String): Unit =\n  if userId.isEmpty || planId.isEmpty then throw new IllegalArgumentException(\"User and Plan ID required\")\n  // activate plan logic...","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_87","timestamp":1745345981314,"code":"class PricingPlan(val id: String, val price: Double)\ndef updatePrice(plan: PricingPlan, newPrice: Double): PricingPlan =\n  if newPrice <= 0 then throw new IllegalArgumentException(\"Price must be positive\")\n  new PricingPlan(plan.id, newPrice)\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_89","timestamp":1745345981315,"code":"def calculateProratedAmount(monthlyFee: Double, daysActive: Int): Double =\n  if daysActive <= 0 || daysActive > 31 then throw new IllegalArgumentException(\"Invalid number of days\")\n  monthlyFee * daysActive / 31\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_91","timestamp":1745345981315,"code":"def removePlan(planId: String): Unit =\n  if !plans.contains(planId) then throw new NoSuchElementException(s\"Cannot remove nonexistent plan: $planId\")\n  plans.remove(planId)\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_93","timestamp":1745345981315,"code":"def getActivePlansForUser(userId: String): List[PricingPlan] =\n  if userId == null then throw new IllegalArgumentException(\"User ID cannot be null\")\n  plansByUser.getOrElse(userId, throw new NoSuchElementException(s\"User not found: $userId\"))\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_95","timestamp":1745345981315,"code":"def switchPlan(userId: String, fromPlan: String, toPlan: String): Unit =\n  if !userPlans.contains((userId, fromPlan)) then throw new IllegalArgumentException(\"User is not on the current plan\")\n  // switch logic...","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_97","timestamp":1745345981315,"code":"def planPricePerDay(planId: String): Double =\n  val plan = findPlanById(planId)\n  if plan.price == 0 then throw new ArithmeticException(\"Division by zero\")\n  plan.price / 30\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_99","timestamp":1745345981315,"code":"def validatePlanName(name: String): String =\n  if name.trim.isEmpty then throw new IllegalArgumentException(\"Plan name must not be empty\")\n  name\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_101","timestamp":1745345981315,"code":"def setPlanAsDefault(planId: String): Unit =\n  if !plans.contains(planId) then throw new NoSuchElementException(s\"Plan $planId does not exist\")\n  defaultPlan = planId\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_103","timestamp":1745345981315,"code":"def addAddonToPlan(planId: String, addonName: String): Unit =\n  if addonName.isEmpty then throw new IllegalArgumentException(\"Addon name is required\")\n  if !plans.contains(planId) then throw new NoSuchElementException(s\"Plan $planId does not exist\")\n  plans(planId).addons ::= addonName\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_105","timestamp":1745345981316,"code":"def getPlanDuration(planId: String): Int =\n  val plan = plans.getOrElse(planId, throw new NoSuchElementException(s\"Plan $planId not found\"))\n  if plan.durationInMonths <= 0 then throw new IllegalStateException(\"Invalid plan duration\")\n  plan.durationInMonths\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_107","timestamp":1745345981316,"code":"def assignUserToPlan(userId: String, planId: String): Unit =\n  if !users.contains(userId) then throw new NoSuchElementException(\"User does not exist\")\n  if !plans.contains(planId) then throw new NoSuchElementException(\"Plan does not exist\")\n  users(userId).assignedPlan = planId\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_109","timestamp":1745345981316,"code":"def updatePlanDescription(planId: String, desc: String): Unit =\n  if desc.length > 250 then throw new IllegalArgumentException(\"Description too long\")\n  val plan = plans.getOrElse(planId, throw new NoSuchElementException(\"Plan not found\"))\n  plan.description = desc\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_111","timestamp":1745345981316,"code":"def calculateTotalRevenue(planIds: List[String]): Double =\n  planIds.foldLeft(0.0){ (acc, pid) =>\n    val plan = plans.getOrElse(pid, throw new NoSuchElementException(s\"Missing plan: $pid\"))\n    acc + plan.price\n  }\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_113","timestamp":1745345981316,"code":"def isPlanAvailableForCountry(planId: String, country: String): Boolean =\n  val plan = plans.getOrElse(planId, throw new NoSuchElementException(s\"Plan not found: $planId\"))\n  if !plan.countries.contains(country) then throw new IllegalStateException(s\"Plan not available in $country\")\n  true\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_115","timestamp":1745345981316,"code":"def getFirstActivePlan(plans: List[PricingPlan]): PricingPlan =\n  plans.find(_.isActive).getOrElse(throw new NoSuchElementException(\"No active plan found\"))\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_117","timestamp":1745345981316,"code":"def setRenewalPeriod(planId: String, months: Int): Unit =\n  if months <= 0 then throw new IllegalArgumentException(\"Months must be positive\")\n  val plan = plans.getOrElse(planId, throw new NoSuchElementException(\"Plan not found\"))\n  plan.renewalPeriod = months\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_119","timestamp":1745345981316,"code":"def cancelUserPlan(userId: String): Unit =\n  if !users.contains(userId) then throw new NoSuchElementException(\"User not found\")\n  users(userId).assignedPlan = null\n","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_101","timestamp":1745346000055,"code":"def setBrightness(level: Int): Unit =\n  if level < 0 || level > 100 then throw new IllegalArgumentException(\"Brightness must be between 0 and 100.\")\n  println(s\"Setting brightness to $level\")\n\nsetBrightness(120)","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_103","timestamp":1745346000055,"code":"def turnOnDevice(deviceId: String): Unit =\n  if deviceId.isEmpty then throw new RuntimeException(\"Device ID cannot be empty.\")\n  println(s\"Turning on device: $deviceId\")\n\nturnOnDevice(\"\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_105","timestamp":1745346000055,"code":"def connectToWiFi(ssid: String, password: String): Boolean =\n  if ssid == \"\" then throw new Exception(\"WiFi SSID not provided.\")\n  println(\"Connected to WiFi\")\n  true\n\nconnectToWiFi(\"\", \"pass123\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_107","timestamp":1745346000055,"code":"def setTargetTemperature(temp: Double): Unit =\n  if temp < 10.0 || temp > 30.0 then throw new Exception(\"Temperature out of range.\")\n  println(s\"Target temperature set to $temp\")\n\nsetTargetTemperature(35.0)","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_109","timestamp":1745346000055,"code":"def getDeviceStatus(device: String): String =\n  if device == \"Unknown\" then throw new NoSuchElementException(\"Device unknown.\")\n  \"Online\"\n\ngetDeviceStatus(\"Unknown\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_111","timestamp":1745346000055,"code":"def renameDevice(deviceId: String, newName: String): String =\n  if newName.length < 3 then throw new IllegalArgumentException(\"Device name too short.\")\n  s\"Device $deviceId renamed to $newName\"\n\nrenameDevice(\"lamp01\", \"a\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_113","timestamp":1745346000056,"code":"def calculateEnergyUsage(hours: Int, power: Int): Int =\n  if hours <= 0 then throw new ArithmeticException(\"Hours must be positive.\")\n  if power < 0 then throw new ArithmeticException(\"Power cannot be negative.\")\n  hours * power\n\ncalculateEnergyUsage(0, 60)","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_115","timestamp":1745346000056,"code":"def scheduleDevice(deviceId: String, time: String): Unit =\n  if !time.matches(\"\\\\d{2}:\\\\d{2}\") then throw new Exception(\"Invalid time format.\")\n  println(s\"Device $deviceId scheduled for $time\")\n\nscheduleDevice(\"fan01\", \"99-99\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_117","timestamp":1745346000056,"code":"def setDoorLockState(locked: Boolean): String =\n  if locked == null then throw new IllegalArgumentException(\"Locked state required.\")\n  if locked then \"Door locked\" else \"Door unlocked\"\n\nsetDoorLockState(null.asInstanceOf[Boolean])","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_119","timestamp":1745346000056,"code":"def enableAlarmSystem(enabled: Boolean): String =\n  if !List(true, false).contains(enabled) then throw new Exception(\"Enabled must be true or false.\")\n  if enabled then \"Alarm system enabled\" else \"Alarm system disabled\"\n\nenableAlarmSystem(true)","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_121","timestamp":1745346000056,"code":"def configureSensor(sensorType: String): String =\n  if !(List(\"motion\", \"temperature\", \"humidity\").contains(sensorType)) then throw new Exception(\"Unsupported sensor type.\")\n  s\"Sensor $sensorType configured\"\n\nconfigureSensor(\"sound\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_123","timestamp":1745346000057,"code":"def setFanSpeed(speed: Int): Unit =\n  if speed < 1 || speed > 5 then throw new IllegalArgumentException(\"Fan speed must be 1 to 5.\")\n  println(s\"Fan speed set to $speed\")\n\nsetFanSpeed(0)","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_125","timestamp":1745346000057,"code":"def assignRoom(device: String, room: String): Unit =\n  if room == \"\" then throw new Exception(\"Room must be specified.\")\n  println(s\"$device assigned to $room\")\n\nassignRoom(\"speaker01\", \"\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_127","timestamp":1745346000057,"code":"def parseColorCode(code: String): (Int, Int, Int) =\n  if !code.matches(\"#[0-9A-Fa-f]{6}\") then throw new Exception(\"Invalid color code format.\")\n  (255,255,255)\n\nparseColorCode(\"#zzz999\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_129","timestamp":1745346000057,"code":"def addUserToSystem(userId: String): String =\n  if userId.length != 6 then throw new Exception(\"User ID must be 6 characters.\")\n  s\"User $userId added\"\n\naddUserToSystem(\"abc\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_131","timestamp":1745346000057,"code":"def removeDevice(deviceId: String): Unit =\n  if deviceId == null || deviceId.isEmpty then throw new NullPointerException(\"Device ID required.\")\n  println(s\"Removed device $deviceId\")\n\nremoveDevice(null)","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_133","timestamp":1745346000057,"code":"def setShutterPosition(pos: Int): Unit =\n  if pos < 0 || pos > 100 then throw new Exception(\"Shutter position out of range.\")\n  println(s\"Shutter set to position $pos\")\n\nsetShutterPosition(150)","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_135","timestamp":1745346000057,"code":"def getCameraFeed(cameraId: String): String =\n  if cameraId != \"cam01\" then throw new NoSuchElementException(\"Camera not found.\")\n  \"Camera feed data\"\n\ngetCameraFeed(\"cam99\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_137","timestamp":1745346000057,"code":"def calibrateSensor(sensor: String): String =\n  if sensor.contains(\"broken\") then throw new Exception(\"Sensor is broken.\")\n  s\"Sensor $sensor calibrated\"\n\ncalibrateSensor(\"temp_broken\")","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_139","timestamp":1745346000058,"code":"def setSprinklerDuration(minutes: Int): Unit =\n  if minutes <= 0 then throw new IllegalArgumentException(\"Duration must be greater than zero.\")\n  println(s\"Sprinklers on for $minutes minutes\")\n\nsetSprinklerDuration(-1)","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_121","timestamp":1745346018534,"code":"def findDriverById(id: Int): String =\n  if id <= 0 then throw new IllegalArgumentException(\"Invalid driver ID\")\n  else s\"Driver-$id\"","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_123","timestamp":1745346018534,"code":"def calculateFare(distance: Double, rate: Double): Double =\n  if rate == 0 then throw new ArithmeticException(\"Rate cannot be zero\")\n  else distance * rate","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_125","timestamp":1745346018534,"code":"def assignRiderToDriver(riderId: Int, driverId: Int): String =\n  if riderId == driverId then throw new Exception(\"Rider and driver cannot be the same person\")\n  else s\"Assigned rider $riderId to driver $driverId\"","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_127","timestamp":1745346018534,"code":"class RideRequest(val rider: String, val destination: String)\ndef validateRequest(request: RideRequest): Boolean =\n  if request.rider.isEmpty || request.destination.isEmpty then throw new Exception(\"Invalid ride request\")\n  else true","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_129","timestamp":1745346018534,"code":"def getAvailableDrivers(area: String): List[String] =\n  if area.isEmpty then throw new Exception(\"Area not specified\")\n  else List(\"Driver1\", \"Driver2\")","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_131","timestamp":1745346018534,"code":"def cancelRide(rideId: Int): Boolean =\n  if rideId < 1000 then throw new Exception(\"Ride not found\")\n  else true","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_133","timestamp":1745346018534,"code":"def assignRideToNearestDriver(riderLocation: String, drivers: List[String]): String =\n  if drivers.isEmpty then throw new Exception(\"No drivers available\")\n  else drivers.head","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_135","timestamp":1745346018534,"code":"def getDriverRating(driverId: Int): Double =\n  if driverId < 0 then throw new IllegalArgumentException(\"Negative driver ID\")\n  else 4.82","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_137","timestamp":1745346018534,"code":"def bookRide(rider: String, pickup: String, destination: String): String =\n  if pickup == destination then throw new Exception(\"Pickup and destination cannot be the same\")\n  else \"RideBooked1234\"","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_139","timestamp":1745346018535,"code":"def calculateETA(distance: Double, speed: Double): Int =\n  if speed <= 0 then throw new ArithmeticException(\"Invalid speed\")\n  else (distance / speed * 60).toInt","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_141","timestamp":1745346018535,"code":"def notifyRider(riderId: Int, message: String): Unit =\n  if message.isEmpty then throw new Exception(\"Notification message cannot be empty\")\n  println(s\"Notified rider $riderId: $message\")","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_143","timestamp":1745346018535,"code":"def selectPreferredVehicle(vehicles: List[String], preferred: String): String =\n  if !vehicles.contains(preferred) then throw new Exception(s\"Preferred vehicle $preferred not available\")\n  else preferred","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_145","timestamp":1745346018535,"code":"def updateDriverLocation(driverId: Int, latitude: Double, longitude: Double): Unit =\n  if latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180 then\n    throw new Exception(\"Invalid coordinates\")\n  println(s\"Driver $driverId location updated\")","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_147","timestamp":1745346018535,"code":"def splitFare(totalFare: Double, passengerCount: Int): Double =\n  if passengerCount <= 0 then throw new Exception(\"No passengers to split fare\")\n  else totalFare / passengerCount","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_149","timestamp":1745346018535,"code":"def checkSurgePricing(area: String, time: String): Boolean =\n  if time.isEmpty then throw new Exception(\"Time not specified\")\n  else true","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_151","timestamp":1745346018535,"code":"def removeDriverFromQueue(queue: List[String], driver: String): List[String] =\n  if !queue.contains(driver) then throw new Exception(\"Driver not in queue\")\n  else queue.filterNot(_ == driver)","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_153","timestamp":1745346018535,"code":"def getRideStatus(rideId: Int): String =\n  if rideId < 0 then throw new Exception(\"Invalid ride ID\")\n  else \"RideActive\"","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_155","timestamp":1745346018535,"code":"def getRiderPaymentMethod(riderId: Int): String =\n  if riderId == 0 then throw new Exception(\"Rider account missing\")\n  else \"CreditCard\"","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_157","timestamp":1745346018535,"code":"def acceptRide(driverId: Int, rideId: Int): Unit =\n  if driverId <= 0 || rideId <= 0 then throw new Exception(\"Invalid IDs\")\n  println(s\"Driver $driverId accepted ride $rideId\")","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_159","timestamp":1745346018536,"code":"def addStopToRide(rideId: Int, stop: String): Unit =\n  if stop.trim.isEmpty then throw new Exception(\"Stop location cannot be empty\")\n  println(s\"Added stop $stop to ride $rideId\")","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_141","timestamp":1745346036179,"code":"def findFlightByNumber(flights: List[String], number: String): String =\n  flights.find(_ == number).getOrElse(throw new NoSuchElementException(\"Flight not found\"))\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_143","timestamp":1745346036179,"code":"def bookSeat(seats: Int, requested: Int): Int =\n  if requested > seats then throw new IllegalArgumentException(\"Not enough seats\")\n  else seats - requested\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_145","timestamp":1745346036179,"code":"def calculateFare(base: Double, discount: Option[Double]): Double =\n  val disc = discount.getOrElse(throw new Exception(\"No discount available\"))\n  base - disc\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_147","timestamp":1745346036180,"code":"def getPassenger(passengers: Map[Int, String], id: Int): String =\n  passengers.get(id).getOrElse(throw new Exception(\"Passenger not found\"))\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_149","timestamp":1745346036180,"code":"def assignSeat(seats: Set[String], seat: String): Set[String] =\n  if seats.contains(seat) then throw new Exception(\"Seat already assigned\")\n  else seats + seat\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_151","timestamp":1745346036180,"code":"def checkIn(checkedIn: Boolean): String =\n  if checkedIn then throw new Exception(\"Already checked in\")\n  else \"Check-in successful\"\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_153","timestamp":1745346036180,"code":"def cancelBooking(bookingId: Option[String]): String =\n  bookingId match\n    case Some(id) => s\"Booking $id cancelled\"\n    case None => throw new Exception(\"No booking to cancel\")\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_155","timestamp":1745346036180,"code":"def validateTicket(ticket: String): Unit =\n  if ticket.isEmpty then throw new IllegalArgumentException(\"Invalid ticket\")\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_157","timestamp":1745346036180,"code":"def baggageWeightLimit(weight: Double): String =\n  if weight > 23.0 then throw new Exception(\"Baggage overweight\")\n  else \"Baggage accepted\"\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_159","timestamp":1745346036180,"code":"def getLoungeAccessClass(ticketClass: String): Boolean =\n  ticketClass match\n    case \"Business\" => true\n    case \"First\" => true\n    case _ => throw new Exception(\"No lounge access\")\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_161","timestamp":1745346036180,"code":"def findGate(gates: List[String], flight: String): String =\n  gates.find(_.startsWith(flight)).getOrElse(throw new Exception(\"No gate assigned\"))\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_163","timestamp":1745346036180,"code":"def divideTicketPrice(total: Int, people: Int): Int =\n  if people == 0 then throw new ArithmeticException(\"Division by zero\")\n  else total / people\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_165","timestamp":1745346036180,"code":"def changeFlightDate(date: String): String =\n  if date.isEmpty then throw new Exception(\"Invalid date\")\n  else s\"Flight changed to $date\"\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_167","timestamp":1745346036181,"code":"def selectMeal(meals: Set[String], meal: String): String =\n  if !meals.contains(meal) then throw new Exception(\"Meal not available\")\n  else meal\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_169","timestamp":1745346036181,"code":"def checkFlightStatus(status: Option[String]): String =\n  status.getOrElse(throw new Exception(\"Flight status unknown\"))\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_171","timestamp":1745346036181,"code":"def upgradeToBusiness(current: String): String =\n  if current == \"Business\" then throw new Exception(\"Already in Business class\")\n  else \"Business\"\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_173","timestamp":1745346036181,"code":"def addFrequentFlyer(ffList: List[Int], memberId: Int): List[Int] =\n  if ffList.contains(memberId) then throw new Exception(\"Member already registered\")\n  else memberId :: ffList\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_175","timestamp":1745346036181,"code":"def removePassenger(passengers: List[String], name: String): List[String] =\n  if !passengers.contains(name) then throw new Exception(\"Passenger not found\")\n  else passengers.filterNot(_ == name)\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_177","timestamp":1745346036181,"code":"def getBoardingGroup(ticket: Map[String, Int], id: String): Int =\n  ticket.get(id).getOrElse(throw new Exception(\"No boarding group\"))\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_179","timestamp":1745346036181,"code":"def rescheduleFlight(available: Boolean, newTime: String): String =\n  if !available then throw new Exception(\"No flights available at requested time\")\n  else s\"Flight rescheduled to $newTime\"\n","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_161","timestamp":1745346062463,"code":"def findRoomById(id: Int): String =\n  if id < 0 then throw new IllegalArgumentException(\"Invalid Room ID\")\n  else s\"Room-$id\"","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_163","timestamp":1745346062463,"code":"def calculateTotalPrice(pricePerNight: Double, nights: Int): Double =\n  if nights <= 0 then throw new Exception(\"Number of nights must be positive\")\n  pricePerNight * nights","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_165","timestamp":1745346062463,"code":"def getCustomerName(name: String): String =\n  if name == \"\" then throw new Exception(\"Customer name cannot be empty\")\n  name","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_167","timestamp":1745346062463,"code":"def bookRoom(available: Boolean): String =\n  if !available then throw new Exception(\"Room is not available\")\n  \"Booking successful\"","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_169","timestamp":1745346062464,"code":"def cancelBooking(bookingId: Option[Int]): String =\n  bookingId match\n    case Some(id) => s\"Booking $id cancelled\"\n    case None => throw new Exception(\"No booking ID provided\")","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_171","timestamp":1745346062464,"code":"def getDiscountRate(code: String): Double =\n  if code != \"SUMMER\" then throw new Exception(\"Invalid discount code\")\n  0.10","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_173","timestamp":1745346062464,"code":"def checkInGuest(checkedIn: Boolean): String =\n  if checkedIn then throw new Exception(\"Guest already checked in\")\n  \"Guest checked in successfully\"","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_175","timestamp":1745346062464,"code":"def allocateRoom(floors: List[Int]): Int =\n  if floors.isEmpty then throw new Exception(\"No floors available\")\n  floors.head","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_177","timestamp":1745346062464,"code":"def updateEmail(email: String): String =\n  if !email.contains(\"@\") then throw new Exception(\"Invalid email address\")\n  email","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_179","timestamp":1745346062464,"code":"def setRoomPrice(roomId: Int, newPrice: Double): Unit =\n  if newPrice < 0 then throw new Exception(\"Price cannot be negative\")\n  ()","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_181","timestamp":1745346062464,"code":"def findAvailableRooms(rooms: List[String]): String =\n  if rooms.isEmpty then throw new Exception(\"No rooms available\")\n  rooms.mkString(\", \")","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_183","timestamp":1745346062465,"code":"def reserveRoom(guestId: Int, roomId: Int): String =\n  if guestId <= 0 || roomId <= 0 then throw new RuntimeException(\"Invalid IDs\")\n  s\"Guest $guestId reserved Room $roomId\"","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_185","timestamp":1745346062465,"code":"def fetchInvoice(invoiceId: Int): String =\n  if invoiceId == 0 then throw new Exception(\"Invoice ID cannot be zero\")\n  s\"Invoice for $invoiceId\"","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_187","timestamp":1745346062465,"code":"def nightsBetween(checkIn: Int, checkOut: Int): Int =\n  val nights = checkOut - checkIn\n  if nights <= 0 then throw new Exception(\"Check-out must be after check-in\")\n  nights","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_189","timestamp":1745346062465,"code":"def validatePayment(amount: Double): String =\n  if amount <= 0 then throw new Exception(\"Amount must be positive\")\n  \"Payment validated\"","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_191","timestamp":1745346062465,"code":"def getMealPlan(plan: String): String =\n  plan match\n    case \"Full\" | \"Half\" => plan\n    case _ => throw new Exception(\"Unknown meal plan\")","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_193","timestamp":1745346062465,"code":"def assignHousekeeper(roomStatus: String): String =\n  if roomStatus != \"Dirty\" then throw new Exception(\"No cleaning required\")\n  \"Housekeeper assigned\"","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_195","timestamp":1745346062465,"code":"def changeBookingDate(bookingDate: String): String =\n  if bookingDate == \"\" then throw new Exception(\"Booking date cannot be empty\")\n  bookingDate","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_197","timestamp":1745346062465,"code":"def addGuestToReservation(guestCount: Int, maxGuests: Int): Int =\n  if guestCount >= maxGuests then throw new Exception(\"Maximum guests reached\")\n  guestCount + 1","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_199","timestamp":1745346062465,"code":"def computeLoyaltyPoints(stayNights: Int, multiplier: Int): Int =\n  if multiplier == 0 then throw new Exception(\"Multiplier cannot be zero\")\n  stayNights * multiplier","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_181","timestamp":1745346077982,"code":"def findOrderById(id: Int): Order =\n  if id < 0 then throw new IllegalArgumentException(\"Order ID cannot be negative\")\n  else Order(id)\n\ncase class Order(id: Int)","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_183","timestamp":1745346077983,"code":"def calculateEstimatedTime(distance: Double, speed: Double): Double =\n  if speed == 0 then throw new ArithmeticException(\"Speed cannot be zero!\")\n  else distance / speed","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_185","timestamp":1745346077983,"code":"def assignDriver(driverAvailable: Boolean): String =\n  if !driverAvailable then throw new Exception(\"No driver available\")\n  else \"Driver assigned\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_187","timestamp":1745346077983,"code":"def setDeliveryAddress(address: String): Unit =\n  if address.isBlank then throw new IllegalArgumentException(\"Address cannot be empty\")","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_189","timestamp":1745346077983,"code":"def getCustomerRating(customerId: Int): Int =\n  val rating = Database.getRating(customerId)\n  if rating < 0 then throw new Exception(\"Could not fetch rating\")\n  else rating","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_191","timestamp":1745346077983,"code":"def fetchMenuItem(menu: Map[String, Int], item: String): Int =\n  menu.get(item) match\n    case Some(price) => price\n    case None => throw new NoSuchElementException(\"Menu item not found\")","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_193","timestamp":1745346077983,"code":"def splitBill(amount: Double, people: Int): Double =\n  if people <= 0 then throw new ArithmeticException(\"Cannot split among zero people\")\n  else amount / people","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_195","timestamp":1745346077983,"code":"def updateStock(stock: Int, change: Int): Int =\n  val newStock = stock + change\n  if newStock < 0 then throw new IllegalStateException(\"Stock cannot go negative\")\n  else newStock","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_197","timestamp":1745346077984,"code":"def getNextOrder(orders: List[String]): String =\n  if orders.isEmpty then throw new Exception(\"No orders pending\")\n  else orders.head","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_199","timestamp":1745346077984,"code":"def parseDeliveryTime(input: String): Int =\n  try input.toInt\n  catch case _ => throw new NumberFormatException(\"Invalid delivery time format\")","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_201","timestamp":1745346077984,"code":"def rateDelivery(rating: Int): String =\n  if rating < 1 || rating > 5 then throw new IllegalArgumentException(\"Rating must be between 1 and 5\")\n  else s\"You rated: $rating\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_203","timestamp":1745346077984,"code":"def fetchPaymentMethod(methodId: Int): String =\n  if methodId != 1 && methodId != 2 then throw new Exception(\"Unknown payment method\")\n  else if methodId == 1 then \"Credit Card\" else \"Cash\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_205","timestamp":1745346077984,"code":"def cancelOrder(orderStatus: String): Boolean =\n  if orderStatus == \"delivered\" then throw new Exception(\"Cannot cancel delivered order\")\n  else true","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_207","timestamp":1745346077984,"code":"def calculateDiscount(code: Option[String]): Double =\n  code match\n    case Some(\"FOOD10\") => 0.10\n    case Some(\"DELIVERY5\") => 0.05\n    case Some(_) => throw new Exception(\"Invalid discount code\")\n    case None => 0.0","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_209","timestamp":1745346077984,"code":"def findAvailableSlot(slots: List[String]): String =\n  slots.find(_.nonEmpty).getOrElse(throw new Exception(\"No available slots\"))","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_211","timestamp":1745346077984,"code":"def validateOrderAmount(amount: Double): Unit =\n  if amount < 0 then throw new IllegalArgumentException(\"Amount cannot be negative\")","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_213","timestamp":1745346077987,"code":"def checkInventory(item: String, inventory: Map[String, Int]): Int =\n  inventory.get(item) match\n    case Some(count) if count > 0 => count\n    case _ => throw new Exception(\"Item out of stock\")","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_215","timestamp":1745346077987,"code":"def getCourierLocation(id: Int): (Double, Double) =\n  if id == 0 then throw new IllegalArgumentException(\"Invalid courier ID\")\n  else (40.0, -74.0)","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_217","timestamp":1745346077987,"code":"def verifyCustomerToken(token: Option[String]): Boolean =\n  token match\n    case Some(t) if t.startsWith(\"VALID\") => true\n    case _ => throw new Exception(\"Invalid customer token\")","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_219","timestamp":1745346077987,"code":"def updateOrderStatus(status: String): Unit =\n  if status.isEmpty then throw new IllegalArgumentException(\"Status cannot be empty\")\n  else println(s\"Order updated to $status\")","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_201","timestamp":1745346097649,"code":"def findSongById(id: Int, library: Map[Int, String]): String =\n  if library.contains(id) then library(id)\n  else throw new NoSuchElementException(s\"Song with id $id not found\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_203","timestamp":1745346097650,"code":"def getUserSubscriptionLevel(user: String, levels: Map[String, String]): String =\n  levels.get(user) match\n    case Some(level) => level\n    case None => throw new Exception(s\"User $user does not have a subscription level\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_205","timestamp":1745346097650,"code":"class Playlist(val tracks: Seq[String]):\n  def lastTrack: String =\n    if tracks.nonEmpty then tracks.last\n    else throw new IllegalStateException(\"Playlist is empty\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_207","timestamp":1745346097650,"code":"def getArtistGenre(artist: String, genres: Map[String, String]): String =\n  genres.getOrElse(artist, throw new Exception(s\"Genre not found for artist $artist\"))\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_209","timestamp":1745346097650,"code":"def downloadSong(url: String): Array[Byte] =\n  if url.endsWith(\".mp3\") then Array(1, 2, 3)\n  else throw new IllegalArgumentException(\"Invalid song format\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_211","timestamp":1745346097650,"code":"def getLyrics(songId: Int, lyricsDb: Map[Int, String]): String =\n  lyricsDb.get(songId) match\n    case Some(lyrics) => lyrics\n    case None => throw new NoSuchElementException(s\"Lyrics for song $songId not found\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_213","timestamp":1745346097650,"code":"def rateTrack(rating: Int): Unit =\n  if rating < 1 || rating > 5 then\n    throw new IllegalArgumentException(\"Rating must be between 1 and 5\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_215","timestamp":1745346097650,"code":"def removeFromPlaylist(track: String, playlist: Seq[String]): Seq[String] =\n  if playlist.contains(track) then playlist.filter(_ != track)\n  else throw new Exception(s\"Track $track not found in playlist\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_217","timestamp":1745346097651,"code":"def playNext(tracks: List[String]): String =\n  tracks.headOption.getOrElse(throw new RuntimeException(\"No more tracks to play\"))\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_219","timestamp":1745346097651,"code":"def pausePlayback(playbackState: String): String =\n  if playbackState == \"Playing\" then \"Paused\"\n  else throw new Exception(\"Cannot pause when not playing\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_221","timestamp":1745346097651,"code":"def seek(position: Int, duration: Int): Int =\n  if duration == 0 then throw new ArithmeticException(\"Cannot seek in a track with zero duration\")\n  else if position < 0 || position > duration then throw new IndexOutOfBoundsException(\"Seek position out of bounds\")\n  else position\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_223","timestamp":1745346097651,"code":"case class User(name: String, age: Int)\ndef validateUser(user: User): Unit =\n  if user.age < 13 then throw new IllegalArgumentException(\"User must be at least 13 years old to register\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_225","timestamp":1745346097651,"code":"def skipTrack(queue: List[String]): List[String] =\n  if queue.tail.nonEmpty then queue.tail\n  else throw new Exception(\"No tracks left to skip to\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_227","timestamp":1745346097651,"code":"def getAlbum(albumId: Int, albums: Map[Int, String]): String =\n  albums.get(albumId) match\n    case Some(album) => album\n    case None => throw new Exception(s\"Album id $albumId does not exist\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_229","timestamp":1745346097651,"code":"def fetchArtwork(song: String, artDb: Map[String, Array[Byte]]): Array[Byte] =\n  artDb.get(song).getOrElse(throw new Exception(\"Artwork not found for song: \" + song))\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_231","timestamp":1745346097651,"code":"def createPlaylist(name: String): String =\n  if name.isEmpty then throw new IllegalArgumentException(\"Playlist name cannot be empty\")\n  else s\"Playlist '$name' created\"\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_233","timestamp":1745346097651,"code":"def getBitrate(format: String): Int =\n  format match\n    case \"MP3\" => 320\n    case \"AAC\" => 256\n    case _ => throw new Exception(s\"Unknown audio format: $format\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_235","timestamp":1745346097651,"code":"def setVolume(vol: Int): Int =\n  if vol < 0 || vol > 100 then throw new IllegalArgumentException(\"Volume must be between 0 and 100\")\n  else vol\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_237","timestamp":1745346097652,"code":"def shareTrack(user: String, song: String, friends: Set[String]): String =\n  if friends.contains(user) then s\"Track $song shared with $user\"\n  else throw new Exception(s\"Cannot share track with $user who is not in your friends list\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_239","timestamp":1745346097652,"code":"def favoriteTrack(userFavorites: Map[String, Set[String]], user: String, track: String): Map[String, Set[String]] =\n  if userFavorites.contains(user) then\n    userFavorites.updated(user, userFavorites(user) + track)\n  else throw new Exception(s\"User $user has no favorites list\")\n","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_221","timestamp":1745346128062,"code":"def findTutorById(id: String): Tutor =\n  if id.trim.isEmpty then throw new IllegalArgumentException(\"Tutor ID required\")\n  // ... query logic\n  ??? // dummy","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_223","timestamp":1745346128062,"code":"def getStudentAge(studentId: Int): Int =\n  if studentId <= 0 then throw new Exception(\"Invalid student ID\")\n  // ... fetch age logic\n  ??? // dummy","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_225","timestamp":1745346128063,"code":"def scheduleSession(tutor: Tutor, student: Student): Session =\n  if tutor == null || student == null then throw new NullPointerException(\"Tutor or student missing\")\n  // ... schedule logic\n  ???","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_227","timestamp":1745346128063,"code":"def getCourseTitle(courseId: Int): String =\n  if courseId < 1 then throw new RuntimeException(\"Course ID must be positive\")\n  // ... retrieve title\n  ???","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_229","timestamp":1745346128063,"code":"def parseDuration(input: String): Int =\n  try input.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid duration format\")","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_231","timestamp":1745346128063,"code":"def checkPermission(user: User, action: String): Boolean =\n  if !user.permissions.contains(action) then throw new SecurityException(\"Permission denied\")\n  true","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_233","timestamp":1745346128063,"code":"def submitAssignment(studentId: Int, assignment: Assignment): Submission =\n  if assignment == null then throw new Exception(\"Assignment cannot be null!\")\n  // ... submission logic\n  ???","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_235","timestamp":1745346128063,"code":"def findAvailableSlot(slots: List[String]): String =\n  if slots.isEmpty then throw new NoSuchElementException(\"No available slots\")\n  slots.head","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_237","timestamp":1745346128063,"code":"def getFeedback(session: Session, student: Student): Feedback =\n  if session == null || student == null then throw new Exception(\"Missing session or student\")\n  // ... fetch feedback\n  ???","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_239","timestamp":1745346128064,"code":"def bookSession(tutorId: Int, slot: String): Booking =\n  if slot.isBlank then throw new Exception(\"Slot string cannot be blank.\")\n  // ... booking logic\n  ???","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_241","timestamp":1745346128064,"code":"def cancelBooking(bookingId: Int): Unit =\n  if bookingId <= 0 then throw new Exception(\"Invalid booking id.\")\n  // ... cancel logic\n  ()","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_243","timestamp":1745346128064,"code":"def computeAverageScore(scores: List[Int]): Double =\n  if scores.isEmpty then throw new ArithmeticException(\"No scores found\")\n  scores.sum.toDouble / scores.size","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_245","timestamp":1745346128064,"code":"def getSessionDuration(start: Long, end: Long): Long =\n  if end < start then throw new IllegalArgumentException(\"End time is before start!\")\n  end - start","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_247","timestamp":1745346128064,"code":"def registerStudent(name: String, age: Int): Student =\n  if name.isBlank then throw new Exception(\"Student name is required\")\n  if age < 6 then throw new Exception(\"Student is too young\")\n  // ... registration logic\n  ???","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_249","timestamp":1745346128064,"code":"def payForSession(userId: Int, amount: Double): Receipt =\n  if amount <= 0 then throw new Exception(\"Payment amount must be positive\")\n  // ... payment logic\n  ???","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_251","timestamp":1745346128064,"code":"def messageTutor(student: Student, tutorId: Int, message: String): Unit =\n  if message.isEmpty then throw new Exception(\"Message cannot be empty\")\n  // ... send logic\n  ()","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_253","timestamp":1745346128065,"code":"def getTopRatedTutor(tutors: List[Tutor]): Tutor =\n  if tutors.isEmpty then throw new Exception(\"No tutors available\")\n  tutors.maxBy(_.rating)","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_255","timestamp":1745346128065,"code":"def addCourse(category: String, title: String): Course =\n  if title.isBlank then throw new Exception(\"Course title is required\")\n  // ... add logic\n  ???","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_257","timestamp":1745346128065,"code":"def enrollInCourse(student: Student, courseId: Int): Enrollment =\n  if courseId <= 0 then throw new Exception(\"Invalid course ID\")\n  // ... enroll logic\n  ???","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_259","timestamp":1745346128065,"code":"def updateProfile(userId: Int, email: String): Unit =\n  if !email.contains(\"@\") then throw new Exception(\"Invalid email format\")\n  // ... update logic\n  ()","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_241","timestamp":1745346146601,"code":"def findListingById(id: Int): Listing =\n  if id <= 0 then throw new IllegalArgumentException(\"Id must be positive\")\n  Listing(id, \"Luxury Apartment\", 200000)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_243","timestamp":1745346146601,"code":"def filterByPrice(listings: List[Listing], minPrice: Int): List[Listing] =\n  if minPrice < 0 then throw new IllegalArgumentException(\"Price cannot be negative\")\n  listings.filter(_.price >= minPrice)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_245","timestamp":1745346146602,"code":"def getAgentEmail(agentName: String): String =\n  if agentName.isEmpty then throw new Exception(\"Agent name cannot be empty\")\n  s\"$agentName@example.com\"","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_247","timestamp":1745346146602,"code":"def calculateAvgPrice(listings: List[Listing]): Double =\n  if listings.isEmpty then throw new ArithmeticException(\"No listings, cannot compute average\")\n  listings.map(_.price).sum.toDouble / listings.size","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_249","timestamp":1745346146602,"code":"def deleteListing(id: Int): String =\n  if id <= 0 then throw new RuntimeException(\"Invalid listing id\")\n  s\"Listing $id deleted!\"","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_251","timestamp":1745346146602,"code":"def getListingAddress(listing: Listing): String =\n  if listing.address == null then throw new NullPointerException(\"Address not set\")\n  listing.address","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_253","timestamp":1745346146602,"code":"def filterListingsByCity(listings: List[Listing], city: String): List[Listing] =\n  if city.trim.isEmpty then throw new IllegalArgumentException(\"City name required\")\n  listings.filter(_.city == city)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_255","timestamp":1745346146602,"code":"def searchByKeyword(keyword: String, listings: List[Listing]): Listing =\n  listings.find(_.description.contains(keyword)).getOrElse(\n    throw new Exception(s\"No listing found with keyword: $keyword\")\n  )","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_257","timestamp":1745346146602,"code":"def parseListingId(str: String): Int =\n  try str.toInt\n  catch case _: NumberFormatException => throw new Exception(s\"Cannot parse listing id: $str\")","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_259","timestamp":1745346146602,"code":"def getOwnerDetails(listing: Listing): Owner =\n  if listing.owner == null then throw new Exception(\"Listing has no owner information\")\n  listing.owner","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_261","timestamp":1745346146603,"code":"def compareArea(a: Int, b: Int): Int =\n  if b == 0 then throw new IllegalArgumentException(\"Cannot divide by zero area\")\n  a / b","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_263","timestamp":1745346146603,"code":"def findOpenHouses(listings: List[Listing]): List[Listing] =\n  if listings.isEmpty then throw new Exception(\"No listings provided\")\n  listings.filter(_.openHouse)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_265","timestamp":1745346146603,"code":"def getPropertyType(listing: Listing): String =\n  if listing.propertyType.isEmpty then throw new Exception(\"Property type not specified\")\n  listing.propertyType","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_267","timestamp":1745346146603,"code":"def updateListingPrice(listing: Listing, price: Int): Listing =\n  if price < 1 then throw new IllegalArgumentException(\"Price must be positive\")\n  listing.copy(price = price)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_269","timestamp":1745346146603,"code":"def listAmenities(listing: Listing): List[String] =\n  if listing.amenities == null then throw new Exception(\"Amenities field is null\")\n  listing.amenities","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_271","timestamp":1745346146603,"code":"def paginateListings(listings: List[Listing], page: Int, size: Int): List[Listing] =\n  if page < 1 || size < 1 then throw new IllegalArgumentException(\"Invalid pagination params\")\n  listings.slice((page - 1) * size, page * size)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_273","timestamp":1745346146603,"code":"def getFirstPhoto(listing: Listing): String =\n  if listing.photos.isEmpty then throw new Exception(\"No photos available\")\n  listing.photos.head","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_275","timestamp":1745346146603,"code":"def validatePostalCode(code: String): Boolean =\n  if !code.matches(\"[0-9]{5}\") then throw new Exception(\"Invalid postal code\")\n  true","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_277","timestamp":1745346146604,"code":"def listingYearBuilt(listing: Listing): Int =\n  if listing.yearBuilt <= 0 then throw new Exception(\"Year built must be provided\")\n  listing.yearBuilt","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_279","timestamp":1745346146604,"code":"def selectFeatured(listings: List[Listing]): Listing =\n  if listings.isEmpty then throw new Exception(\"No listings to feature\")\n  listings.maxBy(_.views)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_261","timestamp":1745346164927,"code":"def getWalletBalance(address: String): BigDecimal =\n  if address.isEmpty then throw new IllegalArgumentException(\"Address cannot be empty\")\n  else 10.5 // Dummy balance","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_263","timestamp":1745346164927,"code":"def transferFunds(from: String, to: String, amount: BigDecimal): String =\n  if amount <= 0 then throw new Exception(\"Amount must be positive\")\n  s\"Transferred $amount from $from to $to\"","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_265","timestamp":1745346164928,"code":"def getPrivateKey(mnemonic: Option[String]): String =\n  mnemonic match\n    case Some(phrase) => s\"key-for-$phrase\"\n    case None => throw new Exception(\"No mnemonic provided\")","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_267","timestamp":1745346164928,"code":"def signTransaction(walletId: String, txData: Array[Byte]): Array[Byte] =\n  if txData.isEmpty then throw new Exception(\"Transaction data is empty\")\n  txData.reverse // Dummy sign","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_269","timestamp":1745346164928,"code":"class Wallet(var balance: BigDecimal):\n  def debit(amount: BigDecimal): Unit =\n    if amount > balance then throw new Exception(\"Insufficient funds\")\n    balance -= amount","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_271","timestamp":1745346164928,"code":"def getWalletById(id: Int): String =\n  if id < 0 then throw new Exception(\"Invalid wallet ID\")\n  s\"wallet-$id\"","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_273","timestamp":1745346164928,"code":"def exportSeed(seedOption: Option[String]): String =\n  seedOption.getOrElse(throw new Exception(\"No seed available for export\"))","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_275","timestamp":1745346164928,"code":"def convertToSatoshis(btc: BigDecimal): Long =\n  if btc < 0 then throw new IllegalArgumentException(\"BTC value cannot be negative\")\n  (btc * 100000000).toLong","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_277","timestamp":1745346164928,"code":"def findTransaction(txId: String): String =\n  if txId.length != 64 then throw new Exception(\"Invalid transaction ID length\")\n  s\"Transaction: $txId\"","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_279","timestamp":1745346164928,"code":"def getPublicKey(wallet: Option[String]): String =\n  wallet match\n    case Some(w) => s\"publicKey-for-$w\"\n    case None => throw new Exception(\"Wallet not loaded\")","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_281","timestamp":1745346164929,"code":"def importWallet(json: String): String =\n  if !json.trim.startsWith(\"{\") then throw new IllegalArgumentException(\"Malformed wallet data\")\n  s\"imported-wallet-from-json\"","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_283","timestamp":1745346164929,"code":"def generateAddress(seed: String, index: Int): String =\n  if seed.isEmpty then throw new Exception(\"Seed is empty\")\n  if index < 0 then throw new Exception(\"Index cannot be negative\")\n  seed.take(8) + s\"-$index\"","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_285","timestamp":1745346164929,"code":"def decryptKeystore(keystore: String, password: String): String =\n  if password.isEmpty then throw new Exception(\"Password required\")\n  if keystore.isBlank then throw new Exception(\"Keystore is blank\")\n  s\"decrypted-$keystore\"","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_287","timestamp":1745346164929,"code":"def fetchReceivedAmount(walletAddr: String, token: String): BigDecimal =\n  if token != \"BTC\" && token != \"ETH\" then throw new Exception(\"Unsupported token\")\n  1.23","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_289","timestamp":1745346164929,"code":"def changePassword(old: String, newPass: String): String =\n  if newPass.length < 8 then throw new Exception(\"Password too short\")\n  s\"Password changed from $old to $newPass\"","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_291","timestamp":1745346164929,"code":"def listAddresses(page: Int, pageSize: Int): List[String] =\n  if page < 1 || pageSize < 1 then throw new Exception(\"Paging parameters must be positive\")\n  List.tabulate(pageSize)(i => s\"address${page}_$i\")","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_293","timestamp":1745346164929,"code":"def verifySignature(pubKey: String, msg: String, sig: String): Boolean =\n  if sig.isEmpty then throw new Exception(\"Signature is missing\")\n  true // Dummy value","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_295","timestamp":1745346164929,"code":"def backupWallet(wallet: String, path: String): Unit =\n  if !path.endsWith(\".backup\") then throw new Exception(\"Backup file must have .backup extension\")\n  println(s\"Backup saved to $path\")","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_297","timestamp":1745346164929,"code":"def calculateFee(txSize: Int, rate: Int): Int =\n  if rate == 0 then throw new Exception(\"Fee rate cannot be zero\")\n  txSize * rate","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_299","timestamp":1745346164930,"code":"def removeWallet(wallets: Map[String, String], id: String): Map[String, String] =\n  if !wallets.contains(id) then throw new Exception(\"Wallet not found\")\n  wallets - id","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_281","timestamp":1745346185305,"code":"def findItemById(id: Int, items: List[(Int, String)]): String =\n  items.find(_._1 == id).map(_._2).getOrElse(throw new NoSuchElementException(s\"Item $id not found\"))\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_283","timestamp":1745346185305,"code":"def getStockLevel(item: String, inventory: Map[String, Int]): Int =\n  inventory.get(item).getOrElse(throw new Exception(\"Item not found in inventory.\"))\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_285","timestamp":1745346185305,"code":"def safeDivideAvailable(total: Int, locations: Int): Int =\n  if (locations == 0) throw new ArithmeticException(\"Divide by zero: no locations available.\")\n  else total / locations\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_287","timestamp":1745346185305,"code":"def removeItem(item: String, items: List[String]): List[String] =\n  if (!items.contains(item)) throw new Exception(\"Cannot remove item: not found.\")\n  else items.filterNot(_ == item)\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_289","timestamp":1745346185305,"code":"case class Warehouse(inventory: Map[String, Int]) {\n  def checkAvailability(item: String): Int =\n    inventory.get(item).getOrElse(throw new Exception(s\"$item not available\"))\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_291","timestamp":1745346185306,"code":"def addStock(item: String, qty: Int): Int =\n  if (qty < 0) throw new IllegalArgumentException(\"Cannot add negative stock.\")\n  else qty * 2 // Just an example\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_293","timestamp":1745346185306,"code":"def parseQuantity(qty: String): Int =\n  try qty.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid numeric value for quantity.\")\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_295","timestamp":1745346185306,"code":"def findWarehouse(warehouses: Seq[String], name: String): Int =\n  warehouses.indexOf(name) match\n    case -1 => throw new Exception(\"Warehouse not found.\")\n    case idx => idx\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_297","timestamp":1745346185306,"code":"def withdrawItem(item: String, qty: Int, inv: Map[String, Int]): Map[String, Int] =\n  inv.get(item) match\n    case Some(current) if current >= qty => inv.updated(item, current - qty)\n    case Some(_) => throw new Exception(\"Not enough stock available.\")\n    case None => throw new Exception(\"Item not found in inventory.\")\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_299","timestamp":1745346185306,"code":"def mergeInventories(i1: Map[String, Int], i2: Map[String, Int]): Map[String, Int] =\n  if (i1.keySet != i2.keySet) throw new Exception(\"Inventories must have same items.\")\n  else i1 ++ i2\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_301","timestamp":1745346185306,"code":"def shelfNumber(location: String): Int =\n  if (location.startsWith(\"A\")) 1\n  else if (location.startsWith(\"B\")) 2\n  else throw new Exception(\"Invalid shelf location.\")\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_303","timestamp":1745346185307,"code":"def getBatchWeight(weights: List[Double]): Double =\n  if (weights.isEmpty) throw new Exception(\"Batch weights list is empty.\")\n  else weights.sum\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_305","timestamp":1745346185307,"code":"def scanBarcode(barcode: Option[String]): String =\n  barcode.getOrElse(throw new Exception(\"No barcode provided.\"))\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_307","timestamp":1745346185307,"code":"def getItemFromRow(row: (Int, String, Int)): String =\n  if (row._2.isEmpty) throw new Exception(\"Item name missing in row.\")\n  else row._2\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_309","timestamp":1745346185307,"code":"def updateInventory(item: String, delta: Int, inventory: collection.mutable.Map[String, Int]): Unit =\n  if (!inventory.contains(item)) throw new Exception(\"Item not in inventory.\")\n  else inventory(item) += delta\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_311","timestamp":1745346185307,"code":"def itemCategory(code: String): String =\n  code match\n    case c if c.startsWith(\"FRG\") => \"Fragile\"\n    case c if c.startsWith(\"HVY\") => \"Heavy\"\n    case _ => throw new Exception(\"Unknown item category code.\")\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_313","timestamp":1745346185307,"code":"def getNextShipment(shipments: List[String]): String =\n  if shipments.nonEmpty then shipments.head\n  else throw new Exception(\"No shipments scheduled.\")\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_315","timestamp":1745346185307,"code":"def isStorageFull(used: Int, max: Int): Boolean =\n  if (max == 0) throw new Exception(\"Max storage capacity is zero.\")\n  else used >= max\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_317","timestamp":1745346185308,"code":"def checkReorderLevel(item: String, inventory: Map[String, Int], level: Int): Boolean =\n  val current = inventory.get(item).getOrElse(throw new Exception(s\"Item not in inventory: $item\"))\n  current < level\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_319","timestamp":1745346185308,"code":"def calculateStorageFee(space: Int, rate: Double): Double =\n  if (space < 0) throw new Exception(\"Cannot calculate fee for negative space.\")\n  else space * rate\n","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_301","timestamp":1745346208595,"code":"def getUserByUsername(username: String): User =\n  if (username.trim.isEmpty) throw new IllegalArgumentException(\"Username cannot be empty\")\n  // Dummy User\n  User(username)","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_303","timestamp":1745346208596,"code":"def flagContent(contentId: Int, reason: String): Boolean =\n  if (reason == \"\") throw new Exception(\"Must provide a reason for flagging.\")\n  true","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_305","timestamp":1745346208596,"code":"def deleteComment(commentId: Int): Unit =\n  if (commentId < 0) throw new IllegalArgumentException(\"Invalid comment ID\")\n  println(s\"Comment $commentId deleted.\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_307","timestamp":1745346208596,"code":"def banUser(userId: Int): String =\n  if (userId <= 0) throw new Exception(\"User ID must be positive.\")\n  s\"User $userId banned.\"","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_309","timestamp":1745346208596,"code":"def setPostVisibility(postId: Int, visible: Boolean): Unit =\n  if (postId == 0) throw new IllegalArgumentException(\"Post ID missing!\")\n  println(s\"Post $postId visibility set to $visible\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_311","timestamp":1745346208596,"code":"def reportUser(reporter: String, reported: String): Unit =\n  if (reporter == reported) throw new Exception(\"User cannot report themselves!\")\n  println(s\"$reporter reported $reported\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_313","timestamp":1745346208596,"code":"def getContentText(post: Option[String]): String =\n  post.getOrElse(throw new NoSuchElementException(\"Content not found.\"))","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_315","timestamp":1745346208596,"code":"def approvePost(postId: Int): Unit =\n  if (postId < 100) throw new Exception(\"Posts ID below 100 are reserved.\")\n  println(\"Post approved\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_317","timestamp":1745346208597,"code":"def updateProfile(userId: Int, name: String): Unit =\n  if (name.isBlank) throw new Exception(\"Profile name cannot be blank\")\n  println(s\"User $userId updated to '$name'\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_319","timestamp":1745346208597,"code":"def addFriend(userId: Int, friendId: Int): Unit =\n  if (userId == friendId) throw new Exception(\"Cannot add yourself as friend!\")\n  println(s\"$friendId added to $userId's friend list\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_321","timestamp":1745346208597,"code":"def removePost(postId: Option[Int]): Unit =\n  postId match\n    case Some(id) => println(s\"Post $id removed.\")\n    case None => throw new Exception(\"No post ID provided.\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_323","timestamp":1745346208597,"code":"def changeModerationLevel(userId: Int, level: Int): Unit =\n  if (level < 1 || level > 3) throw new Exception(\"Invalid moderation level.\")\n  println(s\"User $userId moderation level changed to $level\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_325","timestamp":1745346208597,"code":"def reviewReport(reportId: Int): String =\n  if (reportId == 42) throw new Exception(\"Test report ID encountered!\")\n  \"Report reviewed.\"","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_327","timestamp":1745346208597,"code":"def getImageUrl(imageOpt: Option[String]): String =\n  imageOpt.getOrElse(throw new Exception(\"Image URL not found.\"))","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_329","timestamp":1745346208597,"code":"def verifyContentLength(content: String, max: Int): String =\n  if (content.length > max) throw new Exception(\"Content too long!\")\n  content","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_331","timestamp":1745346208597,"code":"def blockUser(requester: String, blockee: String): Boolean =\n  if (blockee.isEmpty) throw new IllegalArgumentException(\"Blockee username missing.\")\n  true","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_333","timestamp":1745346208598,"code":"def markCommentSpam(comment: String, keywords: List[String]): Boolean =\n  if (keywords.exists(comment.contains)) throw new Exception(\"Spam detected!\")\n  false","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_335","timestamp":1745346208598,"code":"def fetchModerationReason(postId: Int): String =\n  if (postId % 2 == 0) throw new Exception(\"Unmoderated post.\")\n  \"Inappropriate language\"","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_337","timestamp":1745346208598,"code":"def promoteModerator(user: User): Boolean =\n  if (!user.isActive) throw new Exception(\"Inactive user cannot be a moderator!\")\n  true","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_339","timestamp":1745346208598,"code":"def getProfilePicture(user: Option[User]): String =\n  user match\n    case Some(u) => u.picture\n    case None => throw new Exception(\"User not found.\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_321","timestamp":1745346226981,"code":"def getUserNewsFeed(userId: Int): List[String] =\n  if userId <= 0 then throw new IllegalArgumentException(\"Invalid user ID\")\n  else List(\"News 1\", \"News 2\")\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_323","timestamp":1745346226982,"code":"def fetchArticleContent(articleId: String): String =\n  if articleId.isEmpty then throw new RuntimeException(\"Empty article id\")\n  else s\"Content for $articleId\"\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_325","timestamp":1745346226982,"code":"case class User(id: Int, name: String)\ndef safeGetUser(users: List[User], id: Int): User =\n  users.find(_.id == id).getOrElse(throw new Exception(\"User not found\"))\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_327","timestamp":1745346226982,"code":"def parseFeedName(feed: String): String =\n  if feed.length < 3 then throw new IllegalArgumentException(\"Feed name too short\")\n  else feed.toUpperCase\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_329","timestamp":1745346226982,"code":"def filterPreferredTopics(topics: List[String], preferred: String): String =\n  topics.find(_ == preferred).getOrElse(\n    throw new NoSuchElementException(\"Preferred topic not found\"))\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_331","timestamp":1745346226982,"code":"def getRecommendationScore(userInterests: List[String], articleTags: List[String]): Int =\n  if articleTags.isEmpty then throw new IllegalArgumentException(\"Article tags required\")\n  else articleTags.count(userInterests.contains)\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_333","timestamp":1745346226982,"code":"def fetchTrendingForRegion(region: String): List[String] =\n  if region.isBlank then throw new Exception(\"Blank region name\")\n  else List(\"Trending A\", \"Trending B\")\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_335","timestamp":1745346226983,"code":"def getRecentComments(articleId: String): List[String] =\n  if articleId == \"banned\" then throw new RuntimeException(\"Comments not available\")\n  else List(\"Nice article!\", \"Very informative.\")\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_337","timestamp":1745346226983,"code":"def calculateReadTime(words: Int): Int =\n  if words <= 0 then throw new ArithmeticException(\"Word count must be positive\")\n  else words / 200\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_339","timestamp":1745346226983,"code":"def findMatchingNews(query: String, articles: List[String]): String =\n  articles.find(_.contains(query)).getOrElse(\n    throw new Exception(\"No matching news found\"))\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_341","timestamp":1745346226983,"code":"def addToBookmark(userId: Int, article: String): Unit =\n  if userId < 1 || article == \"\" then throw new IllegalArgumentException(\"Invalid input\")\n  else println(s\"Bookmarked $article for $userId\")\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_343","timestamp":1745346226983,"code":"def getCategoryFeed(category: String): List[String] =\n  if Set(\"tech\", \"sports\", \"entertainment\").contains(category) then List(\"Item 1\", \"Item 2\")\n  else throw new Exception(\"Invalid category\")\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_345","timestamp":1745346226984,"code":"def displayPersonalMessage(user: User): String =\n  if user.name.trim.isEmpty then throw new Exception(\"Missing user name\")\n  else s\"Welcome, ${user.name}!\"\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_347","timestamp":1745346226984,"code":"def loadUserPreferences(prefId: Int): Map[String, String] =\n  if prefId < 0 then throw new Exception(\"Negative preference ID\")\n  else Map(\"theme\" -> \"dark\")\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_349","timestamp":1745346226984,"code":"def removeArticleFromFeed(feed: List[String], title: String): List[String] =\n  if !feed.contains(title) then throw new Exception(\"Article not found in feed\")\n  else feed.filterNot(_ == title)\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_351","timestamp":1745346226984,"code":"def selectMainHeadline(headlines: List[String]): String =\n  if headlines.isEmpty then throw new IllegalArgumentException(\"No headlines\")\n  else headlines.head\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_353","timestamp":1745346226984,"code":"def rateArticle(rating: Int): String =\n  if rating < 1 || rating > 5 then throw new Exception(\"Invalid rating\")\n  else \"Thank you for rating!\"\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_355","timestamp":1745346226984,"code":"def fetchImageForArticle(url: String): Array[Byte] =\n  if !url.startsWith(\"http\") then throw new Exception(\"Bad URL\")\n  else Array(1,2,3)\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_357","timestamp":1745346226985,"code":"def sendDigestEmail(userId: Int, email: String): Unit =\n  if email.isBlank then throw new Exception(\"Missing email address\")\n  else println(s\"Digest sent to $email\")\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_359","timestamp":1745346226985,"code":"def markArticleAsRead(userId: Int, articleId: String): Unit =\n  if userId == 0 || articleId.isEmpty then throw new Exception(\"Invalid read mark inputs\")\n  else println(s\"Article $articleId marked as read for $userId\")\n","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_341","timestamp":1745346249408,"code":"def findChargerById(id: String): Charger =\n  if id.isEmpty then throw new IllegalArgumentException(\"Charger id cannot be empty!\")\n  // Fake fetch\n  Charger(id)\n\ncase class Charger(id: String)","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_343","timestamp":1745346249408,"code":"def calculateDistance(a: Double, b: Double): Double =\n  if b == 0 then throw new ArithmeticException(\"Division by zero in distance calculation!\")\n  a / b","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_345","timestamp":1745346249408,"code":"def parseStationData(data: String): ChargingStation =\n  if data == null then throw new NullPointerException(\"Station data was null\")\n  // placeholder parse\n  ChargingStation(data)\n\ncase class ChargingStation(info: String)","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_347","timestamp":1745346249409,"code":"def getAvailableSlots(stationId: String): Int =\n  val fakeMap = Map(\"A\" -> 2)\n  if !fakeMap.contains(stationId) then throw new NoSuchElementException(\"Station not found!\")\n  fakeMap(stationId)","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_349","timestamp":1745346249409,"code":"class Locator\n  def nearest(lat: Double, lon: Double): String =\n    if lat < -90 || lat > 90 || lon < -180 || lon > 180 then\n      throw new IllegalArgumentException(\"Invalid coordinates!\")\n    \"Station-001\"\n\nval locator = Locator()\nlocator.nearest(95, 5)","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_351","timestamp":1745346249409,"code":"def selectPlugType(types: List[String], preferred: String): String =\n  if !types.contains(preferred) then throw new RuntimeException(\"Preferred plug type unavailable!\")\n  preferred","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_353","timestamp":1745346249409,"code":"def findStationWithPower(power: Int): String =\n  if power < 0 then throw new IllegalArgumentException(\"Power cannot be negative!\")\n  \"Station X\"","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_355","timestamp":1745346249409,"code":"def getChargingRate(station: String): Double =\n  if station == \"\" then throw new Exception(\"Station name empty!\")\n  22.0","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_357","timestamp":1745346249409,"code":"def safeDivideCharging(kWh: Int, hours: Int): Int =\n  if hours == 0 then throw new ArithmeticException(\"Cannot divide by zero hours!\")\n  kWh / hours","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_359","timestamp":1745346249410,"code":"def getStationReview(stationId: String): String =\n  if stationId.isBlank() then throw new IllegalArgumentException(\"Station id is blank.\")\n  s\"Review for $stationId\"","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_361","timestamp":1745346249410,"code":"def stationAddress(id: Option[String]): String =\n  id match\n    case Some(value) => s\"Address for $value\"\n    case None => throw new RuntimeException(\"Missing station id!\")","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_363","timestamp":1745346249410,"code":"def reserveSlot(station: String, time: Int): Unit =\n  if time <= 0 then throw new IllegalArgumentException(\"Reservation time must be positive!\")\n  println(\"Slot reserved\")","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_365","timestamp":1745346249410,"code":"def filterStationsByCity(stations: List[String], city: String): List[String] =\n  if city.isEmpty then throw new IllegalArgumentException(\"City name required!\")\n  stations.filter(_.contains(city))","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_367","timestamp":1745346249410,"code":"def getChargingSpeed(name: String): Int =\n  if name != \"SuperFast\" then throw new NoSuchElementException(\"Charging speed not found!\")\n  120","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_369","timestamp":1745346249410,"code":"def validatePostcode(postcode: String): Boolean =\n  if postcode.length != 5 then throw new IllegalArgumentException(\"Invalid postcode!\")\n  true","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_371","timestamp":1745346249411,"code":"def connectCharger(station: String): Boolean =\n  if station == null then throw new NullPointerException(\"Station parameter is null!\")\n  true","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_373","timestamp":1745346249411,"code":"def getNearestStations(locations: List[String]): String =\n  if locations.isEmpty then throw new Exception(\"No locations provided!\")\n  locations.head","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_375","timestamp":1745346249411,"code":"def calculateChargingFee(costPerHour: Double, hours: Int): Double =\n  if hours < 1 then throw new IllegalArgumentException(\"Charging time must be positive!\")\n  costPerHour * hours","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_377","timestamp":1745346249411,"code":"def fetchActiveStations(status: String): List[String] =\n  if status != \"active\" then throw new Exception(\"Only 'active' status supported\")\n  List(\"A\", \"B\")","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_379","timestamp":1745346249411,"code":"def checkChargerCompatibility(vehicle: String, chargerType: String): Boolean =\n  if vehicle == \"\" || chargerType == \"\" then throw new IllegalArgumentException(\"Vehicle and chargerType required!\")\n  true","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_361","timestamp":1745346264352,"code":"def getSoilMoisture(readings: List[Int], sensorId: Int): Int =\n  readings.lift(sensorId).getOrElse(throw new NoSuchElementException(\"Sensor not found\"))","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_363","timestamp":1745346264352,"code":"def calculateYieldPerHectare(totalYield: Int, area: Int): Int =\n  if area == 0 then throw new ArithmeticException(\"Area cannot be zero\")\n  else totalYield / area","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_365","timestamp":1745346264352,"code":"def averageTemperature(temps: List[Double]): Double =\n  if temps.isEmpty then throw new IllegalArgumentException(\"Temperature list is empty\")\n  else temps.sum / temps.length","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_367","timestamp":1745346264352,"code":"def getFieldName(fields: Map[Int, String], fieldId: Int): String =\n  fields.getOrElse(fieldId, throw new Exception(\"Field ID not found\"))","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_369","timestamp":1745346264352,"code":"def lastRainDate(rainDates: List[String]): String =\n  rainDates.lastOption.getOrElse(throw new RuntimeException(\"No rain data available\"))","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_371","timestamp":1745346264353,"code":"class Crop(var height: Int):\n  def reduceHeight(amount: Int): Unit =\n    if amount > height then throw new IllegalArgumentException(\"Reduction exceeds current height\")\n    else height -= amount","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_373","timestamp":1745346264353,"code":"def fertilizerRate(typeCode: String): Int = typeCode match\n  case \"N\" => 10\n  case \"P\" => 15\n  case \"K\" => 20\n  case _   => throw new Exception(\"Unknown fertilizer type\")","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_375","timestamp":1745346264353,"code":"def pestCount(pests: Seq[String], target: String): Int =\n  if !pests.contains(target) then throw new Exception(\"Pest not found\")\n  else pests.count(_ == target)","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_377","timestamp":1745346264353,"code":"def calculateIrrigationVolume(area: Double, waterPerSqm: Double): Double =\n  if area < 0 || waterPerSqm < 0 then throw new Exception(\"Negative values not allowed\")\n  else area * waterPerSqm","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_379","timestamp":1745346264353,"code":"def fetchSensorData(sensorId: String, data: Map[String, Int]): Int =\n  data.get(sensorId).getOrElse(throw new Exception(\"No data for sensor\"))","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_381","timestamp":1745346264354,"code":"def cropStatus(health: Int): String =\n  if health < 0 then throw new Exception(\"Health cannot be negative\")\n  else if health > 80 then \"Healthy\"\n  else if health > 50 then \"Moderate\"\n  else \"Unhealthy\"","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_383","timestamp":1745346264354,"code":"def dailyGrowth(heights: Vector[Int], day: Int): Int =\n  if day < 0 || day >= heights.length - 1 then throw new Exception(\"Invalid day index\")\n  else heights(day + 1) - heights(day)","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_385","timestamp":1745346264354,"code":"def checkHarvesterReady(battery: Int): Unit =\n  if battery < 20 then throw new Exception(\"Harvester battery too low\")","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_387","timestamp":1745346264354,"code":"def assignFieldWorker(fields: Array[String], workerIdx: Int): String =\n  if workerIdx < 0 || workerIdx >= fields.length then throw new Exception(\"Worker index out of bounds\")\n  else fields(workerIdx)","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_389","timestamp":1745346264354,"code":"def cropDiseaseIndex(index: Map[String, Double], disease: String): Double =\n  index.getOrElse(disease, throw new Exception(\"Disease data unavailable\"))","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_391","timestamp":1745346264354,"code":"def predictedHarvest(days: Int, rate: Int): Int =\n  if rate <= 0 then throw new Exception(\"Invalid growth rate\")\n  else days * rate","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_393","timestamp":1745346264355,"code":"def waterLevelDiff(level1: Double, level2: Double): Double =\n  if level1 < 0 || level2 < 0 then throw new Exception(\"Invalid water level\")\n  else math.abs(level1 - level2)","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_395","timestamp":1745346264355,"code":"def getCropArea(cropAreas: List[(String, Int)], crop: String): Int =\n  cropAreas.find(_._1 == crop).map(_._2).getOrElse(throw new Exception(\"Crop type not found\"))","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_397","timestamp":1745346264355,"code":"def estimateYieldPerCrop(yields: Map[String, Int], crop: String): Int =\n  yields.getOrElse(crop, throw new Exception(\"Yield info missing for crop\"))","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_399","timestamp":1745346264355,"code":"def soilPhLevel(ph: Double): String =\n  if ph < 0 || ph > 14 then throw new Exception(\"Invalid pH value\")\n  else if ph < 7 then \"Acidic\"\n  else if ph == 7 then \"Neutral\"\n  else \"Alkaline\"","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_381","timestamp":1745346294544,"code":"def parseSensorReading(data: String): Double =\n  if data.isEmpty then throw new IllegalArgumentException(\"Missing data\")\n  else data.toDouble\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_383","timestamp":1745346294544,"code":"def aggregateTemperature(readings: List[Double]): Double =\n  if readings.isEmpty then throw new RuntimeException(\"No readings provided\")\n  else readings.sum / readings.size\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_385","timestamp":1745346294544,"code":"case class Sensor(id: String, value: String)\n\ndef getIntValue(sensor: Sensor): Int =\n  try sensor.value.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid integer value for sensor \" + sensor.id)\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_387","timestamp":1745346294545,"code":"def fetchSensorById(id: String, sensors: Map[String, Double]): Double =\n  sensors.get(id).getOrElse(throw new NoSuchElementException(s\"Sensor $id not found\"))\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_389","timestamp":1745346294545,"code":"def safeDivideSensorValues(a: Double, b: Double): Double =\n  if b == 0 then throw new ArithmeticException(\"Division by zero in sensor values\")\n  else a / b\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_391","timestamp":1745346294545,"code":"class Aggregator {\n  def aggregate(values: Seq[Int]): Int =\n    if values.contains(-1) then throw new Exception(\"Corrupted sensor data detected\")\n    else values.sum\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_393","timestamp":1745346294545,"code":"def avgHumidity(readings: List[Double]): Double =\n  if readings.isEmpty then throw new Exception(\"No humidity readings\")\n  else readings.sum / readings.size\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_395","timestamp":1745346294545,"code":"def parseTimestamp(ts: String): Long =\n  try ts.toLong\n  catch case _ => throw new Exception(s\"Invalid timestamp format: $ts\")\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_397","timestamp":1745346294545,"code":"def getLastReading(sensorReadings: List[Double]): Double =\n  if sensorReadings.nonEmpty then sensorReadings.last\n  else throw new Exception(\"Sensor readings were empty\")\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_399","timestamp":1745346294545,"code":"def replicateSensor(sensor: Sensor, times: Int): List[Sensor] =\n  if times < 0 then throw new IllegalArgumentException(\"Negative replication count\")\n  else List.fill(times)(sensor)\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_401","timestamp":1745346294545,"code":"def requirePositiveReading(reading: Double): Double =\n  if reading > 0 then reading\n  else throw new Exception(\"Sensor reading must be positive!\")\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_403","timestamp":1745346294546,"code":"def parseLocation(lat: String, lon: String): (Double, Double) =\n  if lat.isEmpty || lon.isEmpty then throw new Exception(\"Missing latitude or longitude\")\n  else (lat.toDouble, lon.toDouble)\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_405","timestamp":1745346294546,"code":"def updateStatus(sensorId: String, status: Map[String, Boolean]): Boolean =\n  status.get(sensorId) match\n    case Some(s) => s\n    case None    => throw new Exception(s\"Sensor $sensorId status not found\")\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_407","timestamp":1745346294546,"code":"def adjustValue(value: Double, factor: Double): Double =\n  if factor == 0 then throw new Exception(\"Adjustment factor cannot be zero\")\n  else value * factor\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_409","timestamp":1745346294546,"code":"def chooseMostRecent(readings: List[(Long, Double)]): Double =\n  if readings.isEmpty then throw new Exception(\"No readings to select from\")\n  else readings.maxBy(_._1)._2\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_411","timestamp":1745346294546,"code":"def checkThreshold(value: Double, threshold: Double): Boolean =\n  if threshold < 0 then throw new Exception(\"Threshold cannot be negative\")\n  else value >= threshold\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_413","timestamp":1745346294546,"code":"def readFromQueue(queue: scala.collection.mutable.Queue[Double]): Double =\n  if queue.isEmpty then throw new Exception(\"Sensor reading queue empty\")\n  else queue.dequeue()\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_415","timestamp":1745346294546,"code":"def mergeSensorData(a: List[Double], b: List[Double]): List[Double] =\n  if a.isEmpty && b.isEmpty then throw new Exception(\"Both sensor data lists are empty\")\n  else a ++ b\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_417","timestamp":1745346294546,"code":"def ensureSensorActive(sensor: Sensor, statuses: Map[String, Boolean]): Unit =\n  if !statuses.getOrElse(sensor.id, false) then throw new Exception(s\"Sensor ${sensor.id} not active\")\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_419","timestamp":1745346294546,"code":"def firstNonZero(readings: List[Double]): Double =\n  readings.find(_ != 0).getOrElse(throw new Exception(\"No nonzero readings found\"))\n","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_401","timestamp":1745346315450,"code":"def getRoute(start: String, end: String): List[String] =\n  if start.isEmpty || end.isEmpty then throw new IllegalArgumentException(\"Start or end station missing\")\n  else List(\"Line1\", \"Line2\")\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_403","timestamp":1745346315450,"code":"def calcFare(distance: Int): Int =\n  if distance < 0 then throw new RuntimeException(\"Negative distance not allowed\")\n  else distance * 2\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_405","timestamp":1745346315450,"code":"def nextDeparture(times: List[Int]): Int =\n  if times.isEmpty then throw new NoSuchElementException(\"No departure times available\")\n  else times.head\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_407","timestamp":1745346315451,"code":"def getZone(station: String): Int =\n  val zones = Map(\"Central\" -> 1, \"West\" -> 2)\n  zones.getOrElse(station, throw new Exception(\"Unknown station\"))\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_409","timestamp":1745346315451,"code":"def routeLength(route: List[String]): Int =\n  if route.size < 2 then throw new IllegalArgumentException(\"Route too short\")\n  else route.size\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_411","timestamp":1745346315451,"code":"def transferTime(line: String): Int =\n  line match\n    case \"Express\" => 2\n    case \"Local\" => 5\n    case _ => throw new Exception(\"Unknown line type\")\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_413","timestamp":1745346315451,"code":"def findStationId(name: String): Int =\n  val stationIds = Map(\"Main\" -> 101, \"Park\" -> 102)\n  stationIds.get(name) match\n    case Some(id) => id\n    case None => throw new Exception(\"Station not found: \" + name)\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_415","timestamp":1745346315451,"code":"def calculateSpeed(distance: Int, time: Int): Int =\n  if time == 0 then throw new ArithmeticException(\"Time cannot be zero\")\n  else distance / time\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_417","timestamp":1745346315451,"code":"def parseTime(str: String): Int =\n  try str.toInt catch case _ => throw new NumberFormatException(\"Invalid time format\")\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_419","timestamp":1745346315451,"code":"def preferredRoute(routes: List[List[String]]): List[String] =\n  if routes.isEmpty then throw new Exception(\"No available routes\")\n  else routes.minBy(_.size)\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_421","timestamp":1745346315451,"code":"def getNextStop(stops: Seq[String], current: String): String =\n  val idx = stops.indexOf(current)\n  if idx == -1 || idx == stops.size - 1 then throw new Exception(\"Current stop invalid or last stop\")\n  else stops(idx + 1)\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_423","timestamp":1745346315451,"code":"def connectLines(lineA: String, lineB: String): String =\n  if lineA == lineB then throw new IllegalArgumentException(\"Lines must be different\")\n  else s\"Connecting $lineA to $lineB\"\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_425","timestamp":1745346315451,"code":"def validateTicket(ticket: String): Boolean =\n  if ticket.isEmpty then throw new Exception(\"Ticket number missing\")\n  ticket.forall(_.isDigit)\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_427","timestamp":1745346315451,"code":"def findCommonStation(routeA: List[String], routeB: List[String]): String =\n  routeA.find(routeB.contains).getOrElse(throw new Exception(\"No common stations\"))\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_429","timestamp":1745346315451,"code":"def getDirection(from: String, to: String): String =\n  if from == to then throw new Exception(\"Source and destination are the same\")\n  else if from < to then \"Northbound\" else \"Southbound\"\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_431","timestamp":1745346315452,"code":"def getStopsBetween(startIdx: Int, endIdx: Int, stops: List[String]): List[String] =\n  if startIdx < 0 || endIdx >= stops.length || startIdx >= endIdx then throw new Exception(\"Invalid indices\")\n  else stops.slice(startIdx + 1, endIdx)\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_433","timestamp":1745346315452,"code":"def linesConnecting(station: String): List[String] =\n  val data = Map(\"Central\" -> List(\"Red\", \"Blue\"))\n  data.getOrElse(station, throw new Exception(\"Station not on any line\"))\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_435","timestamp":1745346315452,"code":"def fareCategory(age: Int): String =\n  if age < 0 then throw new Exception(\"Negative age invalid\")\n  else if age < 14 then \"Child\" else if age < 65 then \"Adult\" else \"Senior\"\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_437","timestamp":1745346315452,"code":"def requireBikeAllowed(line: String, allowBikes: Boolean): Unit =\n  if !allowBikes then throw new UnsupportedOperationException(s\"Bikes not allowed on $line\")\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_439","timestamp":1745346315452,"code":"def getRouteId(routeName: String): Int =\n  val routes = Map(\"A-Line\" -> 1, \"B-Line\" -> 2)\n  routes.get(routeName) match\n    case Some(id) => id\n    case None => throw new NoSuchElementException(s\"No route called $routeName\")\n","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_421","timestamp":1745346322112,"code":"def getProductPrice(sku: String): Double =\n  if sku == \"\" then throw new IllegalArgumentException(\"SKU cannot be empty!\")\n  else 19.99  // dummy price\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_423","timestamp":1745346322113,"code":"def applyDiscount(price: Double, discount: Double): Double =\n  if discount < 0 || discount > 1 then throw new IllegalArgumentException(\"Invalid discount!\")\n  else price * (1 - discount)\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_425","timestamp":1745346322113,"code":"def lookupInventory(productId: String): Int =\n  if productId.length != 8 then throw new Exception(\"Invalid Product ID\")\n  else 50\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_427","timestamp":1745346322113,"code":"def processPayment(total: Double, method: String): Boolean =\n  if method != \"cash\" && method != \"card\" then throw new RuntimeException(\"Unsupported payment method\")\n  else true\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_429","timestamp":1745346322113,"code":"def getCustomerById(id: String): String =\n  if id.isEmpty then throw new Exception(\"Customer ID is empty\")\n  else s\"Customer-$id\"\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_431","timestamp":1745346322113,"code":"def removeProductFromCart(cart: List[String], sku: String): List[String] =\n  if !cart.contains(sku) then throw new NoSuchElementException(\"SKU not found in cart\")\n  else cart.filterNot(_ == sku)\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_433","timestamp":1745346322113,"code":"def updateStockCount(sku: String, delta: Int): Int =\n  if delta == 0 then throw new IllegalArgumentException(\"No change in stock\")\n  else 100 + delta\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_435","timestamp":1745346322113,"code":"def parsePrice(str: String): Double =\n  try str.toDouble\n  catch case _: NumberFormatException => throw new Exception(\"Invalid price format\")\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_437","timestamp":1745346322114,"code":"def refund(amount: Double): String =\n  if amount <= 0 then throw new Exception(\"Refund amount must be positive\")\n  else \"Refund processed\"\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_439","timestamp":1745346322114,"code":"def printReceipt(orderId: String): Unit =\n  if orderId.trim.isEmpty then throw new IllegalArgumentException(\"Order ID is blank!\")\n  else println(s\"Receipt for $orderId\")\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_441","timestamp":1745346322114,"code":"def connectToPOS(port: Int): String =\n  if port <= 0 then throw new Exception(\"Invalid port number\")\n  else s\"Connected to port $port\"\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_443","timestamp":1745346322114,"code":"def calculateLoyaltyPoints(amount: Double, member: Boolean): Int =\n  if !member then throw new RuntimeException(\"Not a member, can't calculate points\")\n  else (amount / 10).toInt\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_445","timestamp":1745346322114,"code":"def scanBarcode(barcode: String): String =\n  if barcode.length != 12 then throw new Exception(\"Malformed barcode\")\n  else barcode\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_447","timestamp":1745346322114,"code":"def validateEmail(email: String): Unit =\n  if !email.contains(\"@\") then throw new IllegalArgumentException(\"Invalid email address\")\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_449","timestamp":1745346322114,"code":"def setTaxRate(state: String): Double =\n  if state == \"\" then throw new Exception(\"No state provided\")\n  else 0.07\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_451","timestamp":1745346322114,"code":"def addNewProduct(sku: String, price: Double): String =\n  if price < 0 then throw new IllegalArgumentException(\"Negative price not allowed\")\n  else s\"Product $sku added\"\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_453","timestamp":1745346322114,"code":"def fetchPromotion(code: String): String =\n  if code == null then throw new NullPointerException(\"Promo code is null\")\n  else s\"Promotion $code\"\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_455","timestamp":1745346322114,"code":"def registerSale(saleId: String, total: Double): Unit =\n  if total < 0 then throw new Exception(\"Sale total cannot be negative\")\n  else println(s\"Sale $saleId registered\")\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_457","timestamp":1745346322114,"code":"def updateCustomerAddress(customerId: String, address: String): Boolean =\n  if address.isBlank then throw new IllegalArgumentException(\"Address required\")\n  else true\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_459","timestamp":1745346322115,"code":"def getChange(amountPaid: Double, total: Double): Double =\n  if amountPaid < total then throw new Exception(\"Insufficient amount paid\")\n  else amountPaid - total\n","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_441","timestamp":1745346344539,"code":"def parseInterestRate(rateStr: String): Double =\n  try rateStr.toDouble\n  catch case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid interest rate\")\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_443","timestamp":1745346344540,"code":"def calculateMonthlyPayment(loan: Double, rate: Double, years: Int): Double =\n  if years <= 0 then throw new IllegalArgumentException(\"Years must be positive\")\n  else loan * rate / (1 - math.pow(1 + rate, -years*12))\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_445","timestamp":1745346344540,"code":"def getPrincipal(amount: String): Double =\n  if amount.isEmpty then throw new IllegalArgumentException(\"Missing principal amount\")\n  else amount.toDouble\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_447","timestamp":1745346344540,"code":"class MortgageData(term: Int, down: Double):\n  def computeLoanAmount(price: Double): Double =\n    if down > price then throw new IllegalArgumentException(\"Down payment exceeds price\")\n    else price - down\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_449","timestamp":1745346344540,"code":"def fetchRatesApi(url: String): Double =\n  if !url.startsWith(\"http\") then throw new RuntimeException(\"Invalid API URL\")\n  else 3.5\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_451","timestamp":1745346344540,"code":"def validateInputFields(map: Map[String, String]): Unit =\n  if !map.contains(\"principal\") then throw new Exception(\"Principal field missing\")\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_453","timestamp":1745346344540,"code":"def computeAmortization(P: Double, r: Double, n: Int): Double =\n  if r < 0 then throw new IllegalStateException(\"Negative rate not allowed\")\n  else P * r * math.pow(1 + r, n)/(math.pow(1 + r, n) - 1)\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_455","timestamp":1745346344540,"code":"def monthsInTerm(years: Int): Int =\n  if years < 1 then throw new IllegalArgumentException(\"Term too short\")\n  else years * 12\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_457","timestamp":1745346344540,"code":"def formatCurrency(value: Double): String =\n  if value < 0 then throw new Exception(\"Negative currency value\")\n  else f\"$$$value%.2f\"\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_459","timestamp":1745346344541,"code":"def calculateRatePerMonth(annualRate: Double): Double =\n  if annualRate == 0 then throw new RuntimeException(\"Zero interest rate\")\n  else annualRate / 12 / 100\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_461","timestamp":1745346344541,"code":"def retrieveUserInput(field: String, inputs: Map[String, String]): String =\n  inputs.getOrElse(field, throw new Exception(s\"Missing field: $field\"))\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_463","timestamp":1745346344541,"code":"def computeMonthlyInsurance(homeValue: Double, insuranceRate: Double): Double =\n  if insuranceRate > 1 then throw new Exception(\"Insurance rate must be <= 1\")\n  else homeValue * insuranceRate / 12\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_465","timestamp":1745346344541,"code":"def estimatePropertyTax(price: Double, taxRate: Double): Double =\n  if price <= 0 then throw new RuntimeException(\"Home price must be positive\")\n  else price * taxRate / 12\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_467","timestamp":1745346344541,"code":"def paymentBreakdown(payment: Double): (Double, Double) =\n  if payment.isNaN then throw new Exception(\"Payment is not a number\")\n  else (payment * 0.7, payment * 0.3)\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_469","timestamp":1745346344541,"code":"def readCsvLine(line: String): (String, Double) =\n  val parts = line.split(\",\")\n  if parts.length != 2 then throw new Exception(\"Bad CSV format\")\n  else (parts(0), parts(1).toDouble)\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_471","timestamp":1745346344541,"code":"def loanToValue(loan: Double, value: Double): Double =\n  if value == 0 then throw new ArithmeticException(\"Value cannot be zero\")\n  else loan / value\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_473","timestamp":1745346344541,"code":"def displayAPR(apr: Option[Double]): String =\n  apr match\n    case Some(v) => f\"APR: $v%.2f%%\"\n    case None => throw new Exception(\"APR unavailable\")\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_475","timestamp":1745346344541,"code":"def convertTerm(termInYears: Any): Int =\n  termInYears match\n    case i: Int => i\n    case s: String => s.toInt\n    case _ => throw new IllegalArgumentException(\"Bad term input type\")\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_477","timestamp":1745346344541,"code":"def checkEligibility(income: Double, minIncome: Double): Unit =\n  if income < minIncome then throw new Exception(\"Income too low for mortgage\")\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_479","timestamp":1745346344541,"code":"def checkNonNegative(v: Double, label: String): Double =\n  if v < 0 then throw new IllegalArgumentException(s\"$label cannot be negative\")\n  else v\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_461","timestamp":1745346359014,"code":"def parseTemperature(s: String): Double =\n  if s == \"N/A\" then throw new IllegalArgumentException(\"Temperature missing\")\n  else s.toDouble","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_463","timestamp":1745346359014,"code":"def extractPressure(data: Map[String, String]): Int =\n  data.get(\"pressure\") match\n    case Some(value) => value.toInt\n    case None => throw new NoSuchElementException(\"No pressure in data\")","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_465","timestamp":1745346359014,"code":"def getSensorStatus(sensorList: List[String], index: Int): String =\n  if index < 0 || index >= sensorList.length then\n    throw new IndexOutOfBoundsException(\"Invalid sensor index\")\n  else\n    sensorList(index)","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_467","timestamp":1745346359014,"code":"def computeVibrationRatio(a: Double, b: Double): Double =\n  if b == 0 then throw new ArithmeticException(\"Divide by zero\")\n  else a / b","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_469","timestamp":1745346359015,"code":"def findMachineById(id: Int, machines: Map[Int, String]): String =\n  machines.get(id) match\n    case Some(m) => m\n    case None => throw new RuntimeException(s\"Machine $id not found\")","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_471","timestamp":1745346359015,"code":"def batteryVoltageLevel(level: Int): String =\n  if level < 0 then throw new IllegalArgumentException(\"Negative voltage not allowed\")\n  else if level < 20 then \"Low\"\n  else if level < 80 then \"Normal\"\n  else \"High\"","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_473","timestamp":1745346359015,"code":"def reportAlarm(code: String): String =\n  code match\n    case \"E101\" => \"Overheat\"\n    case \"E102\" => \"Low pressure\"\n    case _ => throw new UnsupportedOperationException(s\"Unknown alarm code: $code\")","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_475","timestamp":1745346359015,"code":"case class TelemetryPacket(timestamp: Long, data: Map[String, String])\ndef latestTemperature(packets: List[TelemetryPacket]): Double =\n  if packets.isEmpty then throw new NoSuchElementException(\"No telemetry packets\")\n  else packets.maxBy(_.timestamp).data(\"temperature\").toDouble","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_477","timestamp":1745346359015,"code":"def getOperationalHours(machines: Map[String, Int], name: String): Int =\n  machines.get(name) match\n    case Some(hours) => hours\n    case None => throw new IllegalArgumentException(\"Unknown machine\")","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_479","timestamp":1745346359015,"code":"def parseFlowRate(s: String): Double =\n  try s.toDouble\n  catch case _: NumberFormatException => throw new Exception(\"Flow rate parsing failed\")","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_481","timestamp":1745346359015,"code":"def validateTelemetryField(field: String, value: Option[String]): String =\n  value match\n    case Some(v) => v\n    case None => throw new Exception(s\"Field $field missing in telemetry data\")","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_483","timestamp":1745346359015,"code":"def startAcquisition(channel: Int): String =\n  if channel < 1 || channel > 4 then throw new IllegalArgumentException(\"Invalid acquisition channel\")\n  else s\"Channel $channel started\"","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_485","timestamp":1745346359016,"code":"def readSensor(sensors: Seq[Double], idx: Int): Double =\n  try sensors(idx)\n  catch case _: IndexOutOfBoundsException => throw new Exception(\"Sensor index out of range\")","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_487","timestamp":1745346359016,"code":"def rpmToHz(rpm: Int): Double =\n  if rpm < 0 then throw new IllegalArgumentException(\"Negative RPM\")\n  else rpm / 60.0","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_489","timestamp":1745346359017,"code":"def calibrateDevice(serial: String): Boolean =\n  if serial.isEmpty then throw new Exception(\"Missing serial number\")\n  else true","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_491","timestamp":1745346359017,"code":"def getLocation(info: Map[String, String]): String =\n  info.get(\"location\") match\n    case Some(location) => location\n    case None => throw new Exception(\"Location data unavailable\")","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_493","timestamp":1745346359017,"code":"def analyzePeak(peaks: Array[Double]): Double =\n  if peaks.isEmpty then throw new RuntimeException(\"No peaks found in signal\")\n  else peaks.max","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_495","timestamp":1745346359017,"code":"def signalToNoise(signal: Double, noise: Double): Double =\n  if noise == 0.0 then throw new ArithmeticException(\"Noise is zero\")\n  else signal / noise","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_497","timestamp":1745346359017,"code":"def getOperatorShift(shifts: Map[String, String], op: String): String =\n  shifts.get(op) match\n    case Some(shift) => shift\n    case None => throw new NoSuchElementException(s\"No shift info for operator $op\")","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_499","timestamp":1745346359017,"code":"def decodeTelemetryFrame(frame: String): Array[Byte] =\n  if frame.length < 10 then throw new Exception(\"Invalid telemetry frame length\")\n  else frame.getBytes","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_481","timestamp":1745346374031,"code":"def selectLobby(lobbies: List[String], name: String): String =\n  lobbies.find(_ == name).getOrElse(throw new Exception(s\"Lobby '$name' not found\"))\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_483","timestamp":1745346374031,"code":"def joinGame(user: String, gameId: Int): Unit =\n  if (user.isEmpty) throw new Exception(\"User name cannot be empty\")\n  else println(s\"$user joined game #$gameId\")\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_485","timestamp":1745346374031,"code":"def setAvatar(user: String, avatarId: Int): Unit =\n  if (avatarId < 0) throw new IllegalArgumentException(\"Invalid avatar ID\")\n  println(s\"$user set avatar to $avatarId\")\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_487","timestamp":1745346374031,"code":"def dividePlayers(totalPlayers: Int, groupSize: Int): Int =\n  if (groupSize == 0) throw new ArithmeticException(\"Cannot divide by zero\")\n  totalPlayers / groupSize\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_489","timestamp":1745346374031,"code":"def findUser(users: List[String], user: String): Int =\n  users.indexOf(user) match\n    case -1 => throw new Exception(s\"User $user not found in lobby\")\n    case idx => idx\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_491","timestamp":1745346374031,"code":"def getLobbySettings(settings: Map[String, String], key: String): String =\n  settings.getOrElse(key, throw new Exception(s\"Missing setting: $key\"))\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_493","timestamp":1745346374031,"code":"def removeUser(users: scala.collection.mutable.ListBuffer[String], user: String): Unit =\n  if (!users.contains(user)) throw new Exception(s\"Cannot remove $user — not present\")\n  users -= user\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_495","timestamp":1745346374032,"code":"def readyCheck(ready: Boolean): Unit =\n  if (!ready) throw new Exception(\"User not ready\")\n  else println(\"User ready.\")\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_497","timestamp":1745346374033,"code":"def selectSeat(seats: Array[Boolean], index: Int): Unit =\n  if (index < 0 || index >= seats.length) throw new Exception(\"Invalid seat index\")\n  if (seats(index)) throw new Exception(\"Seat already taken\")\n  seats(index) = true\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_499","timestamp":1745346374033,"code":"def validateRoomName(name: String): String =\n  if (name.trim.isEmpty) throw new Exception(\"Room name cannot be empty\")\n  name\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_501","timestamp":1745346374034,"code":"def setPlayerScore(scores: scala.collection.mutable.Map[String, Int], user: String, score: Int): Unit =\n  if (!scores.contains(user)) throw new Exception(s\"User $user not found\")\n  scores(user) = score\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_503","timestamp":1745346374035,"code":"def connectToLobby(address: String): Unit =\n  if (!address.startsWith(\"vr://\")) throw new Exception(\"Invalid lobby address format\")\n  println(s\"Connecting to $address...\")\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_505","timestamp":1745346374036,"code":"def checkPermissions(userRoles: Set[String], needed: String): Unit =\n  if (!userRoles.contains(needed)) throw new Exception(\"Insufficient permissions\")\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_507","timestamp":1745346374037,"code":"def authenticate(token: Option[String]): String =\n  token.getOrElse(throw new Exception(\"Authentication token missing\"))\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_509","timestamp":1745346374038,"code":"def setLobbyCapacity(capacity: Int): Unit =\n  if (capacity <= 0) throw new IllegalArgumentException(\"Capacity must be > 0\")\n  println(s\"Lobby capacity set to $capacity\")\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_511","timestamp":1745346374039,"code":"def sendChatMessage(user: String, message: String): Unit =\n  if (message.isEmpty) throw new Exception(\"Cannot send empty message\")\n  println(s\"[$user]: $message\")\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_513","timestamp":1745346374039,"code":"def getVRDeviceInfo(devices: Map[String, String], deviceId: String): String =\n  devices.get(deviceId) match\n    case Some(info) => info\n    case None => throw new Exception(s\"Device $deviceId not found\")\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_515","timestamp":1745346374039,"code":"def startLobbyCountdown(seconds: Int): Unit =\n  if (seconds < 0) throw new Exception(\"Countdown cannot be negative\")\n  println(s\"Countdown started for $seconds seconds.\")\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_517","timestamp":1745346374040,"code":"def invitePlayer(invites: scala.collection.mutable.Set[String], player: String): Unit =\n  if (invites.contains(player)) throw new Exception(s\"Player $player already invited\")\n  invites += player\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_519","timestamp":1745346374040,"code":"def selectGameMode(modes: Seq[String], choice: String): String =\n  if (!modes.contains(choice)) throw new Exception(s\"Game mode $choice not available\")\n  choice\n","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_501","timestamp":1745346402735,"code":"def parseEmployeeId(id: String): Int =\n  if id.forall(_.isDigit) then id.toInt\n  else throw new IllegalArgumentException(\"Invalid employee ID format\")","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_503","timestamp":1745346402736,"code":"def calculateHoursWorked(start: Int, end: Int): Int =\n  if start < end then end - start\n  else throw new RuntimeException(\"End time must be after start time\")","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_505","timestamp":1745346402736,"code":"case class Employee(name: String, active: Boolean)\ndef getActiveStatus(employee: Employee): Boolean =\n  if employee == null then throw new NullPointerException(\"Employee is null\")\n  else employee.active","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_507","timestamp":1745346402737,"code":"def recordClockIn(employeeId: Int, time: Int): Unit =\n  if time < 0 || time > 24 then throw new IllegalArgumentException(\"Invalid time\")\n  println(s\"Employee $employeeId clocked in at $time\")","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_509","timestamp":1745346402737,"code":"def getProjectHours(project: Map[String, Int], projectName: String): Int =\n  project.getOrElse(projectName, throw new NoSuchElementException(\"Project not found\"))","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_511","timestamp":1745346402738,"code":"def calculateAverageOvertime(overtimes: List[Int]): Double =\n  if overtimes.isEmpty then throw new ArithmeticException(\"No overtime data\")\n  else overtimes.sum.toDouble / overtimes.size","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_513","timestamp":1745346402738,"code":"def getLastClockOut(times: List[Int]): Int =\n  if times.isEmpty then throw new NoSuchElementException(\"No clock out times\")\n  else times.last","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_515","timestamp":1745346402739,"code":"def hoursBetween(start: Int, end: Int): Int =\n  val result = end - start\n  if result < 0 then throw new RuntimeException(\"Negative time interval\")\n  else result","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_517","timestamp":1745346402739,"code":"def employeeName(employee: Option[String]): String =\n  employee.getOrElse(throw new NoSuchElementException(\"No employee name provided\"))","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_519","timestamp":1745346402740,"code":"def setWorkingDays(days: List[String]): Unit =\n  if days.contains(\"\") then throw new IllegalArgumentException(\"Empty day name\")\n  else println(\"Working days set\")","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_521","timestamp":1745346402740,"code":"def removeBreaks(times: List[Int]): List[Int] =\n  if times.exists(_ < 0) then throw new IllegalArgumentException(\"Negative time found\")\n  else times.filter(_ > 0)","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_523","timestamp":1745346402741,"code":"def addEmployee(employees: Map[Int, String], id: Int, name: String): Map[Int, String] =\n  if employees.contains(id) then throw new Exception(\"Employee already exists\")\n  else employees + (id -> name)","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_525","timestamp":1745346402741,"code":"def validateShiftLength(hours: Int): Unit =\n  if hours < 0 || hours > 24 then throw new IllegalArgumentException(\"Invalid shift length\")\n  println(\"Shift is valid\")","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_527","timestamp":1745346402741,"code":"def getDailyReport(reports: Map[String, String], date: String): String =\n  reports.getOrElse(date, throw new Exception(\"No report for the date\"))","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_529","timestamp":1745346402742,"code":"def findEmployeeById(ids: List[Int], id: Int): Int =\n  ids.find(_ == id).getOrElse(throw new Exception(\"Employee not found\"))","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_531","timestamp":1745346402742,"code":"def scheduleBreak(employeeId: Int, breakLength: Int): Unit =\n  if breakLength <= 0 then throw new IllegalArgumentException(\"Break too short\")\n  println(s\"Employee $employeeId scheduled for $breakLength minutes break\")","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_533","timestamp":1745346402742,"code":"def getTimeEntry(entries: Vector[(Int, Int)], idx: Int): (Int, Int) =\n  if idx < 0 || idx >= entries.length then throw new IndexOutOfBoundsException(\"Invalid index\")\n  else entries(idx)","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_535","timestamp":1745346402742,"code":"def computeAverageHoursWorked(hours: List[Double]): Double =\n  if hours.isEmpty then throw new Exception(\"No hours worked\")\n  hours.sum / hours.length","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_537","timestamp":1745346402742,"code":"def updateEmployeeStatus(employeeStatuses: Map[Int, Boolean], id: Int, status: Boolean): Map[Int, Boolean] =\n  if !employeeStatuses.contains(id) then throw new Exception(\"Employee does not exist\")\n  else employeeStatuses.updated(id, status)","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_539","timestamp":1745346402743,"code":"def getShiftTime(shifts: Seq[Int], idx: Int): Int =\n  if idx < 0 || idx >= shifts.size then throw new IllegalArgumentException(\"Shift index out of range\")\n  else shifts(idx)","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_521","timestamp":1745346419189,"code":"def parseTemperature(temp: String): Int =\n  if temp.isEmpty then throw new IllegalArgumentException(\"Temperature cannot be empty\")\n  else temp.toInt\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_523","timestamp":1745346419189,"code":"def getAlertType(code: String): String =\n  code match\n    case \"WX1\" => \"Flood Warning\"\n    case \"WX2\" => \"Thunderstorm Warning\"\n    case _ => throw new Exception(\"Unknown alert code\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_525","timestamp":1745346419189,"code":"def sendNotification(userId: Option[String], message: String): Unit =\n  userId match\n    case Some(id) => println(s\"Sending '$message' to $id\")\n    case None => throw new Exception(\"User ID is missing\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_527","timestamp":1745346419189,"code":"def safeDivideRainfall(total: Int, days: Int): Int =\n  if days == 0 then throw new ArithmeticException(\"Cannot divide by zero days\")\n  else total / days\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_529","timestamp":1745346419190,"code":"class WeatherAlert(recipient: String):\n  def notify(alert: String): Unit =\n    if recipient.nonEmpty then println(s\"Alert: $alert sent to $recipient\")\n    else throw new Exception(\"Recipient email required\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_531","timestamp":1745346419190,"code":"def readAlertLevel(level: Int): String =\n  if level < 1 || level > 5 then throw new Exception(\"Invalid alert level\")\n  else s\"Level $level Alert\"\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_533","timestamp":1745346419190,"code":"def parseWindSpeed(speed: String): Double =\n  try speed.toDouble\n  catch case _ => throw new NumberFormatException(\"Invalid wind speed format\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_535","timestamp":1745346419190,"code":"def isSevereStorm(alert: String): Boolean =\n  if alert == null then throw new NullPointerException(\"Alert is null\")\n  else alert.contains(\"Severe\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_537","timestamp":1745346419190,"code":"def getRegionOrThrow(region: Option[String]): String =\n  region.getOrElse(throw new Exception(\"Region not found in request\"))\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_539","timestamp":1745346419191,"code":"def computeHumidityChange(before: Int, after: Int): Int =\n  if before < 0 || after < 0 then throw new Exception(\"Humidity values must be non-negative\")\n  else after - before\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_541","timestamp":1745346419191,"code":"def updateUserPreferences(user: String, prefs: Map[String, String]): Unit =\n  if !prefs.contains(\"alerts\") then throw new Exception(\"Preferences must include 'alerts'\")\n  else println(s\"Updated $user preferences.\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_543","timestamp":1745346419191,"code":"def parseNotificationTime(time: String): java.time.LocalTime =\n  try java.time.LocalTime.parse(time)\n  catch case _ => throw new Exception(s\"Invalid time format: $time\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_545","timestamp":1745346419191,"code":"def sendUrgentAlert(users: List[String], alert: String): Unit =\n  if users.isEmpty then throw new Exception(\"No recipients for urgent alert\")\n  else users.foreach(u => println(s\"[Urgent] $alert -> $u\"))\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_547","timestamp":1745346419192,"code":"def getWeatherStationData(id: String): (Double, Double) =\n  if id.startsWith(\"WS\") then (42.1, 75.4)\n  else throw new Exception(\"Not a valid weather station ID\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_549","timestamp":1745346419192,"code":"def temperatureDelta(today: Option[Int], yesterday: Option[Int]): Int =\n  (today, yesterday) match\n    case (Some(t), Some(y)) => t - y\n    case _ => throw new Exception(\"Missing temperature data\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_551","timestamp":1745346419192,"code":"def subscribeToAlerts(email: String): Boolean =\n  if email.contains(\"@\") then true\n  else throw new IllegalArgumentException(\"Invalid email address\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_553","timestamp":1745346419192,"code":"def getCityFromRequest(params: Map[String, String]): String =\n  params.get(\"city\").getOrElse(throw new Exception(\"City parameter missing\"))\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_555","timestamp":1745346419192,"code":"def displayPrecipitation(precip: String): Unit =\n  if precip.forall(_.isDigit) then println(s\"Precipitation: $precip mm\")\n  else throw new Exception(\"Precipitation must be numeric\")\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_557","timestamp":1745346419193,"code":"def receiveAlert(priority: Int): String =\n  if priority == 0 then throw new Exception(\"Zero is not a valid priority\")\n  else s\"Alert priority: $priority\"\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_559","timestamp":1745346419193,"code":"def removeAlert(alerts: List[String], alert: String): List[String] =\n  if !alerts.contains(alert) then throw new Exception(\"Alert not found in list\")\n  else alerts.filterNot(_ == alert)\n","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_541","timestamp":1745346431477,"code":"def checkNegativeAmount(amount: Double): Boolean =\n  if amount < 0 then throw new IllegalArgumentException(\"Negative payment amount.\")\n  else true\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_543","timestamp":1745346431477,"code":"def parseTransactionId(id: String): Int =\n  try id.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid transaction id format.\")\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_545","timestamp":1745346431477,"code":"def getUserCountry(userId: String): String =\n  val countries = Map(\"alice\" -> \"US\", \"bob\" -> \"UK\")\n  countries.getOrElse(userId, throw new Exception(\"Unknown user: \" + userId))\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_547","timestamp":1745346431477,"code":"def checkCardExpiry(month: Int, year: Int): Boolean =\n  if month < 1 || month > 12 then throw new RuntimeException(\"Invalid expiry month.\")\n  if year < 2021 then throw new RuntimeException(\"Card expired.\")\n  true\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_549","timestamp":1745346431477,"code":"def safeDivide(amount: Double, risk: Double): Double =\n  if risk == 0 then throw new ArithmeticException(\"Risk factor division by zero.\")\n  amount / risk\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_551","timestamp":1745346431478,"code":"def flagIfBlacklisted(user: String, blacklist: List[String]): Boolean =\n  if blacklist.contains(user) then throw new Exception(\"Blacklisted user.\")\n  true\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_553","timestamp":1745346431478,"code":"def validateCurrency(currency: String): Unit =\n  val supported = Set(\"USD\", \"EUR\", \"GBP\")\n  if !supported.contains(currency) then throw new Exception(s\"Unsupported currency: $currency\")\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_555","timestamp":1745346431479,"code":"def requireAuthToken(token: Option[String]): String =\n  token.getOrElse(throw new Exception(\"Missing auth token.\"))\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_557","timestamp":1745346431479,"code":"def computeScore(score: Option[Int]): Int =\n  score match\n    case Some(value) => value\n    case None => throw new Exception(\"Missing fraud score.\")\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_559","timestamp":1745346431479,"code":"def processPayment(amount: Double): String =\n  if amount > 10000 then throw new RuntimeException(\"Amount exceeds risk threshold.\")\n  \"Payment processed\"\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_561","timestamp":1745346431479,"code":"def checkTransactionStatus(status: String): Unit =\n  if status != \"approved\" then throw new Exception(s\"Transaction $status not allowed.\")\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_563","timestamp":1745346431479,"code":"def getCustomerEmail(info: Map[String, String]): String =\n  info.get(\"email\").getOrElse(throw new Exception(\"Email not found in customer info.\"))\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_565","timestamp":1745346431480,"code":"def lookupAccount(accountId: Int): String =\n  val accounts = Map(1 -> \"active\", 2 -> \"suspended\")\n  accounts.getOrElse(accountId, throw new NoSuchElementException(\"Account not found.\"))\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_567","timestamp":1745346431480,"code":"def ensureAccountEnabled(enabled: Boolean): Unit =\n  if !enabled then throw new Exception(\"Account is not enabled for payments.\")\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_569","timestamp":1745346431480,"code":"def verifySignature(signature: String, expected: String): Unit =\n  if signature != expected then throw new Exception(\"Invalid digital signature.\")\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_571","timestamp":1745346431480,"code":"def validatePaymentData(data: (String, Double)): Boolean =\n  val (method, amount) = data\n  if method.isEmpty || amount <= 0 then throw new IllegalArgumentException(\"Invalid payment data.\")\n  true\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_573","timestamp":1745346431481,"code":"def acceptableRisk(riskScore: Int): Unit =\n  if riskScore > 80 then throw new Exception(\"Risk score too high for payment.\")\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_575","timestamp":1745346431481,"code":"def getMerchantId(details: Map[String, Int]): Int =\n  details.get(\"merchantId\").getOrElse(throw new Exception(\"Merchant ID missing.\"))\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_577","timestamp":1745346431481,"code":"def confirm2FA(codeEntered: Option[String]): Boolean =\n  codeEntered match\n    case Some(code) if code == \"123456\" => true\n    case _ => throw new Exception(\"2FA failed.\")\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_579","timestamp":1745346431481,"code":"def paymentLimitCheck(amount: Double, limit: Double): Unit =\n  if amount > limit then throw new Exception(\"Payment exceeds allowed limit.\")\n","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_561","timestamp":1745346473359,"code":"def getPixelIntensity(image: Array[Array[Int]], x: Int, y: Int): Int =\n  if x < 0 || y < 0 || x >= image.length || y >= image(0).length then\n    throw new IndexOutOfBoundsException(\"Invalid pixel coordinates\")\n  else\n    image(x)(y)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_563","timestamp":1745346473359,"code":"def findSlice(volume: Array[Array[Array[Int]]], sliceIndex: Int): Array[Array[Int]] =\n  if sliceIndex < 0 || sliceIndex >= volume.length then\n    throw new IllegalArgumentException(\"Slice index out of bounds\")\n  else\n    volume(sliceIndex)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_565","timestamp":1745346473359,"code":"def loadDicomFile(path: String): DicomImage =\n  if !path.endsWith(\".dcm\") then\n    throw new RuntimeException(\"File is not a DICOM image\")\n  else\n    DicomImage(path)\n\ncase class DicomImage(path: String)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_567","timestamp":1745346473359,"code":"def calculateZoom(level: Int): Double =\n  if level <= 0 then throw new IllegalArgumentException(\"Zoom level must be positive\")\n  1.0 / level.toDouble","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_569","timestamp":1745346473360,"code":"def getAnnotation(annotations: Map[String, String], key: String): String =\n  annotations.get(key) match\n    case Some(value) => value\n    case None => throw new NoSuchElementException(s\"Annotation '$key' not found\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_571","timestamp":1745346473360,"code":"def parseImageHeader(header: String): (Int, Int) =\n  val fields = header.split(\",\")\n  if fields.length != 2 then\n    throw new RuntimeException(\"Invalid header format\")\n  else\n    (fields(0).toInt, fields(1).toInt)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_573","timestamp":1745346473360,"code":"def computeHU(rawValue: Int, rescaleSlope: Int): Int =\n  if rescaleSlope == 0 then throw new ArithmeticException(\"Rescale slope cannot be zero\")\n  rawValue / rescaleSlope","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_575","timestamp":1745346473360,"code":"def normalizePixel(value: Int, max: Int): Double =\n  if max == 0 then throw new ArithmeticException(\"Max value cannot be zero\")\n  value.toDouble / max","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_577","timestamp":1745346473360,"code":"def getSeries(seriesList: List[String], idx: Int): String =\n  if idx < 0 || idx >= seriesList.size then throw new IllegalArgumentException(\"Invalid index\")\n  seriesList(idx)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_579","timestamp":1745346473360,"code":"def displaySlice(slices: Vector[Array[Int]], n: Int): Array[Int] =\n  if n < 0 || n >= slices.length then throw new IllegalArgumentException(\"Slice index out of bounds\")\n  slices(n)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_581","timestamp":1745346473360,"code":"def saveSegmentedMask(path: String, mask: Array[Array[Int]]): Unit =\n  if !path.endsWith(\".png\") then throw new RuntimeException(\"Only PNG masks are supported\")\n  // pretend to save\n  ()","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_583","timestamp":1745346473360,"code":"def blendImages(img1: Array[Array[Int]], img2: Array[Array[Int]]): Array[Array[Int]] =\n  if img1.length != img2.length || img1(0).length != img2(0).length then\n    throw new IllegalArgumentException(\"Image sizes don't match\")\n  else\n    img1.zip(img2).map((row1, row2) => row1.zip(row2).map((a, b) => (a + b) / 2))","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_585","timestamp":1745346473361,"code":"def setContrast(contrast: Double): Unit =\n  if contrast < 0.1 || contrast > 10.0 then\n    throw new IllegalArgumentException(\"Contrast value out of range\")\n  // Apply contrast","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_587","timestamp":1745346473361,"code":"def readPatientName(meta: Map[String, String]): String =\n  if !meta.contains(\"PatientName\") then throw new NoSuchElementException(\"No PatientName field found\")\n  meta(\"PatientName\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_589","timestamp":1745346473361,"code":"def selectWindowLevel(levels: Array[Double], index: Int): Double =\n  if index < 0 || index >= levels.length then throw new IndexOutOfBoundsException(\"Window level index out of bounds\")\n  levels(index)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_591","timestamp":1745346473361,"code":"def removeOverlay(overlays: List[String], overlayName: String): List[String] =\n  if !overlays.contains(overlayName) then throw new NoSuchElementException(\"Overlay not found\")\n  overlays.filterNot(_ == overlayName)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_593","timestamp":1745346473361,"code":"def extractRegion(image: Array[Array[Int]], x: Int, y: Int, w: Int, h: Int): Array[Array[Int]] =\n  if x < 0 || y < 0 || x+w > image.length || y+h > image(0).length then\n    throw new IllegalArgumentException(\"Region out of bounds\")\n  image.slice(x, x+w).map(_.slice(y, y+h))","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_595","timestamp":1745346473361,"code":"def parseVoxelSpacing(spacingStr: String): (Double, Double, Double) =\n  val parts = spacingStr.split(\",\")\n  if parts.length != 3 then throw new RuntimeException(\"Invalid voxel spacing string\")\n  (parts(0).toDouble, parts(1).toDouble, parts(2).toDouble)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_597","timestamp":1745346473361,"code":"def validateImageDimensions(width: Int, height: Int): Unit =\n  if width <= 0 || height <= 0 then throw new IllegalArgumentException(\"Invalid image dimensions\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_599","timestamp":1745346473361,"code":"def getModality(modalities: List[String], idx: Int): String =\n  if idx < 0 || idx >= modalities.size then throw new IndexOutOfBoundsException(\"Modality index out of bounds\")\n  modalities(idx)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_601","timestamp":1745346473362,"code":"def getPixelSpacing(header: Map[String, String]): Double =\n  header.get(\"PixelSpacing\") match\n    case Some(s) => s.toDouble\n    case None => throw new NoSuchElementException(\"PixelSpacing not found in header\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_582","timestamp":1745346482575,"code":"def findPaymentLinkById(id: String): PaymentLink =\n  if id.isEmpty then throw new IllegalArgumentException(\"id must not be empty\")\n  // lookup logic\n  PaymentLink(id)","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_584","timestamp":1745346482575,"code":"def parseAmount(amountStr: String): Int =\n  try amountStr.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid amount format\")","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_586","timestamp":1745346482575,"code":"def getPaymentLinkStatus(link: PaymentLink): String =\n  if link == null then throw new NullPointerException(\"PaymentLink is null\")\n  link.status","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_588","timestamp":1745346482575,"code":"def requireActive(link: PaymentLink): Unit =\n  if link.status != \"active\" then throw new RuntimeException(\"Link inactive\")","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_590","timestamp":1745346482576,"code":"def updatePaymentLinkAmount(linkId: String, newAmount: Int): PaymentLink =\n  if newAmount < 0 then throw new IllegalArgumentException(\"Negative amount not allowed\")\n  PaymentLink(linkId, newAmount)","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_592","timestamp":1745346482576,"code":"def connectToPaymentProvider(apiKey: String): PaymentProviderConnection =\n  if apiKey.isBlank then throw new Exception(\"API key required\")\n  PaymentProviderConnection(apiKey)","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_594","timestamp":1745346482576,"code":"def getServiceFee(amount: Int): Double =\n  if amount == 0 then throw new ArithmeticException(\"Cannot calculate fee for zero amount\")\n  amount * 0.025","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_596","timestamp":1745346482576,"code":"def listLinksForUser(userId: String): List[PaymentLink] =\n  if userId.isEmpty then throw new RuntimeException(\"User ID empty\")\n  // fetch logic\n  List(PaymentLink(userId))","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_598","timestamp":1745346482576,"code":"def validateNotification(payload: String): Unit =\n  if !payload.contains(\"signature\") then throw new Exception(\"Missing signature in payload\")","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_600","timestamp":1745346482576,"code":"def deletePaymentLink(linkId: String): Unit =\n  if linkId.length < 6 then throw new IllegalArgumentException(\"Invalid linkId\")\n  // deletion logic\n  ()","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_602","timestamp":1745346482576,"code":"class PaymentLinkService(db: Database):\n  def fetch(id: String): PaymentLink =\n    db.get(id) match\n      case Some(link) => link\n      case None => throw new NoSuchElementException(s\"PaymentLink $id not found\")","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_604","timestamp":1745346482576,"code":"def computeDiscount(link: PaymentLink): Double =\n  if link.discount == null then throw new Exception(\"Discount not set\")\n  link.discount","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_606","timestamp":1745346482577,"code":"def parseCurrency(code: String): Currency =\n  Currency.getAvailableCurrencies.find(_.getCurrencyCode == code) match\n    case Some(curr) => curr\n    case None => throw new Exception(s\"Unknown currency: $code\")","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_608","timestamp":1745346482577,"code":"def setPaymentLinkDescription(link: PaymentLink, desc: String): PaymentLink =\n  if desc.length > 200 then throw new Exception(\"Description too long\")\n  link.copy(description = desc)","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_610","timestamp":1745346482577,"code":"def ensurePaymentProviderConfigured(provider: Option[PaymentProvider]): Unit =\n  if provider.isEmpty then throw new Exception(\"Payment provider not configured\")","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_612","timestamp":1745346482577,"code":"def createPaymentLink(userId: String, amount: Int): PaymentLink =\n  if amount <= 0 then throw new Exception(\"Amount must be positive\")\n  if userId.isBlank then throw new Exception(\"User ID required\")\n  PaymentLink(userId, amount)","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_614","timestamp":1745346482577,"code":"def sendReceipt(email: String): Unit =\n  if !email.contains(\"@\") then throw new Exception(\"Invalid email address\")\n  // send email logic","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_616","timestamp":1745346482577,"code":"def closePaymentLink(link: PaymentLink): PaymentLink =\n  if link.status == \"closed\" then throw new Exception(\"Link already closed\")\n  link.copy(status = \"closed\")","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_618","timestamp":1745346482577,"code":"def calculateRefund(original: Int, refund: Int): Int =\n  if refund > original then throw new Exception(\"Refund exceeds original amount\")\n  original - refund","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_620","timestamp":1745346482577,"code":"def findUserByPaymentLink(linkId: String): User =\n  lookupUser(linkId) match\n    case Some(user) => user\n    case None => throw new Exception(s\"No user for link $linkId\")","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_602","timestamp":1745346491399,"code":"def translateWord(word: String, lang: String): String =\n  if word.trim.isEmpty then throw new IllegalArgumentException(\"Input word can't be empty\")\n  else s\"[$lang] $word\"","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_604","timestamp":1745346491399,"code":"def detectLanguage(text: String): String =\n  if text == null then throw new NullPointerException(\"Text is null\")\n  else if text.isEmpty then throw new Exception(\"No input provided\")\n  else \"en\"","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_606","timestamp":1745346491399,"code":"class ChatBot(var enabled: Boolean):\n  def send(msg: String): Unit =\n    if !enabled then throw new RuntimeException(\"ChatBot is disabled\")\n    println(s\"Bot: $msg\")","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_608","timestamp":1745346491400,"code":"def parseUserChoice(choice: String): Int =\n  try choice.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Not a valid number\")","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_610","timestamp":1745346491400,"code":"def findSupportedLanguage(lang: String): Boolean =\n  val supported = Set(\"en\", \"es\", \"de\")\n  if !supported.contains(lang) then throw new Exception(s\"Language $lang not supported\")\n  true","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_612","timestamp":1745346491400,"code":"case class Message(sender: String, text: String)\ndef getSender(message: Message): String =\n  if message.sender.isEmpty then throw new Exception(\"Sender missing\")\n  else message.sender","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_614","timestamp":1745346491400,"code":"def translateSentence(sentence: String, from: String, to: String): String =\n  if from == to then throw new Exception(\"Source and target languages are the same\")\n  s\"[translated $from->$to] $sentence\"","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_616","timestamp":1745346491400,"code":"def fetchTranslation(text: String, lang: String): String =\n  if lang.length != 2 then throw new Exception(\"Language code should be 2 characters\")\n  s\"Translation in $lang: $text\"","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_618","timestamp":1745346491400,"code":"def wordCount(s: String): Int =\n  if s == null then throw new IllegalArgumentException(\"Null input\")\n  val words = s.split(\" \")\n  if words.isEmpty then throw new Exception(\"No words found\")\n  words.length","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_620","timestamp":1745346491400,"code":"def getUserInput(prompt: String): String =\n  val input = \"\"\n  // Simulate input as empty\n  if input == \"\" then throw new Exception(\"User provided no input\")\n  input","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_622","timestamp":1745346491400,"code":"def fetchUserProfile(userId: Int): String =\n  if userId <= 0 then throw new IllegalArgumentException(\"User ID must be positive\")\n  s\"User$userId\"","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_624","timestamp":1745346491401,"code":"class TranslationEngine(supported: Set[String]):\n  def requestTranslation(lang: String): Unit =\n    if !supported.contains(lang) then throw new Exception(s\"Cannot translate to $lang\")\n    println(s\"Translating to $lang\")","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_626","timestamp":1745346491401,"code":"def generateResponse(in: String): String =\n  if in.forall(_.isDigit) then throw new Exception(\"Input should be text, not just digits\")\n  s\"Response: $in\"","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_628","timestamp":1745346491401,"code":"def safeDivideWords(a: Int, b: Int): Int =\n  if b == 0 then throw new ArithmeticException(\"Division by zero not allowed\")\n  a / b","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_630","timestamp":1745346491401,"code":"def getTranslationService(services: List[String], lang: String): String =\n  val service = services.find(_.contains(lang))\n  if service.isEmpty then throw new Exception(s\"No service for $lang\")\n  service.get","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_632","timestamp":1745346491401,"code":"def validateToken(token: Option[String]): String =\n  token match\n    case Some(t) => t\n    case None => throw new Exception(\"Authentication token missing\")","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_634","timestamp":1745346491402,"code":"def requireNotEmpty(str: String): String =\n  if str.isEmpty then throw new Exception(\"String must not be empty\")\n  str","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_636","timestamp":1745346491402,"code":"def setPreferredLanguage(user: String, lang: String): Unit =\n  if user.isEmpty then throw new IllegalArgumentException(\"User required\")\n  if lang.isEmpty then throw new Exception(\"Language required\")\n  println(s\"$user prefers $lang\")","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_638","timestamp":1745346491402,"code":"def removeUnwantedChars(text: String, chars: Set[Char]): String =\n  if chars.isEmpty then throw new Exception(\"No chars provided to remove\")\n  text.filterNot(chars.contains)","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_640","timestamp":1745346491402,"code":"def answerQuestion(question: String): String =\n  if question.endsWith(\"?\") then s\"Answering: $question\"\n  else throw new Exception(\"Not a valid question\")","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_622","timestamp":1745346509916,"code":"def parseEnergyValue(str: String): Int =\n  if str.forall(_.isDigit) then str.toInt\n  else throw new IllegalArgumentException(\"Invalid energy value\")\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_624","timestamp":1745346509916,"code":"case class MeterReading(readings: List[Int])\ndef avgConsumption(meter: MeterReading): Int =\n  if meter.readings.isEmpty then throw new Exception(\"No readings\")\n  else meter.readings.sum / meter.readings.size\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_626","timestamp":1745346509916,"code":"def percentageChange(before: Int, after: Int): Double =\n  if before == 0 then throw new ArithmeticException(\"Cannot divide by zero\")\n  else ((after - before).toDouble / before) * 100\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_628","timestamp":1745346509916,"code":"def getRegionConsumption(data: Map[String, Int], region: String): Int =\n  data.get(region) match\n    case Some(valr) => valr\n    case None => throw new NoSuchElementException(\"Region not found\")\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_630","timestamp":1745346509917,"code":"def getUserDashboard(userId: String): String =\n  if userId.isEmpty then throw new IllegalArgumentException(\"Empty userID\")\n  else s\"Showing dashboard for $userId\"\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_632","timestamp":1745346509917,"code":"def consumptionPerDay(readings: List[Int]): Int =\n  if readings.size < 2 then throw new RuntimeException(\"Not enough data points\")\n  else (readings.last - readings.head) / (readings.size - 1)\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_634","timestamp":1745346509917,"code":"def accessDevice(devices: List[String], idx: Int): String =\n  if idx < 0 || idx >= devices.length then throw new IndexOutOfBoundsException(\"Invalid index\")\n  else devices(idx)\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_636","timestamp":1745346509917,"code":"def validateThreshold(value: Int, threshold: Int): Boolean =\n  if value < 0 then throw new IllegalArgumentException(\"Negative value\")\n  else value > threshold\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_638","timestamp":1745346509917,"code":"class DashboardConfig(val refreshRate: Int)\ndef setRefreshRate(cfg: DashboardConfig, rate: Int): Unit =\n  if rate <= 0 then throw new IllegalArgumentException(\"Refresh rate must be positive\")\n  else cfg.refreshRate = rate\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_640","timestamp":1745346509917,"code":"def energyCost(units: Int, costPerUnit: Double): Double =\n  if units < 0 then throw new IllegalArgumentException(\"Negative units\")\n  else units * costPerUnit\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_642","timestamp":1745346509917,"code":"def lastValidReading(readings: List[Int]): Int =\n  if readings.isEmpty then throw new Exception(\"No readings available\")\n  else readings.last\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_644","timestamp":1745346509918,"code":"def devicePower(details: Map[String, Int], device: String): Int =\n  if details.contains(device) then details(device)\n  else throw new NoSuchElementException(s\"Device $device not found\")\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_646","timestamp":1745346509918,"code":"def parseDate(dateStr: String): java.time.LocalDate =\n  try java.time.LocalDate.parse(dateStr)\n  catch case _: Exception => throw new IllegalArgumentException(\"Invalid date format\")\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_648","timestamp":1745346509918,"code":"def setAlertLevel(level: String): Int =\n  level.toLowerCase match\n    case \"low\" => 1\n    case \"medium\" => 2\n    case \"high\" => 3\n    case _ => throw new IllegalArgumentException(\"Unknown alert level\")\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_650","timestamp":1745346509918,"code":"def calculateEfficiency(consumed: Int, produced: Int): Double =\n  if consumed == 0 then throw new ArithmeticException(\"Zero consumption\")\n  else produced.toDouble / consumed\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_652","timestamp":1745346509918,"code":"class Meter(val id: String)\ndef getMeterId(m: Meter | Null): String =\n  if m == null then throw new NullPointerException(\"Meter is null\")\n  else m.id\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_654","timestamp":1745346509918,"code":"def checkAdmin(user: (String, Boolean)): Unit =\n  if !user._2 then throw new SecurityException(\"User is not admin\")\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_656","timestamp":1745346509918,"code":"def removeOutlier(data: List[Int]): List[Int] =\n  if data.size < 3 then throw new Exception(\"Not enough data to remove outlier\")\n  else data.sorted.tail.init\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_658","timestamp":1745346509919,"code":"def energyLabel(score: Int): String =\n  if score < 0 || score > 100 then throw new IllegalArgumentException(\"Score out of range\")\n  else if score >= 80 then \"A\"\n  else if score >= 60 then \"B\"\n  else \"C\"\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_660","timestamp":1745346509919,"code":"def safeDivideEnergy(total: Int, hours: Int): Int =\n  if hours == 0 then throw new ArithmeticException(\"Cannot divide by zero hours\")\n  else total / hours\n","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_642","timestamp":1745346528338,"code":"def getCandidateVotes(votes: Map[String, Int], candidate: String): Int =\n  if votes.contains(candidate) then votes(candidate)\n  else throw new NoSuchElementException(s\"Candidate '$candidate' not found\")\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_644","timestamp":1745346528339,"code":"def percentageOfTotal(votes: Int, total: Int): Double =\n  if total == 0 then throw new ArithmeticException(\"Total votes cannot be zero\")\n  else votes.toDouble / total * 100","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_646","timestamp":1745346528339,"code":"def parseBallot(ballot: String): (String, Int) =\n  val parts = ballot.split(\":\")\n  if parts.length != 2 then throw new IllegalArgumentException(\"Malformed ballot\")\n  else (parts(0), parts(1).toInt)\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_648","timestamp":1745346528339,"code":"def validateVoteCount(count: Int): Int =\n  if count < 0 then throw new IllegalArgumentException(\"Negative vote count\")\n  else count\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_650","timestamp":1745346528339,"code":"class Tally(var votes: Map[String, Int]):\n  def increment(candidate: String): Unit =\n    if votes.contains(candidate) then\n      votes = votes.updated(candidate, votes(candidate) + 1)\n    else throw new NoSuchElementException(s\"Candidate $candidate not in list\")\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_652","timestamp":1745346528339,"code":"def findWinner(votes: Map[String, Int]): String =\n  if votes.isEmpty then throw new RuntimeException(\"No candidates to select winner from\")\n  else votes.maxBy(_._2)._1\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_654","timestamp":1745346528339,"code":"def removeCandidate(votes: Map[String, Int], candidate: String): Map[String, Int] =\n  if votes.contains(candidate) then votes - candidate\n  else throw new NoSuchElementException(s\"Candidate $candidate not present\")\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_656","timestamp":1745346528340,"code":"def getVotePercentage(candidate: String, votes: Map[String, Int]): Double =\n  val total = votes.values.sum\n  if !votes.contains(candidate) then throw new NoSuchElementException(s\"No such candidate: $candidate\")\n  if total == 0 then throw new ArithmeticException(\"Total cannot be zero\")\n  votes(candidate).toDouble / total * 100\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_658","timestamp":1745346528340,"code":"def ballotsCast(voters: Set[String], ballots: Map[String, String]): Int =\n  if ballots.keySet != voters then throw new IllegalStateException(\"Not all voters have cast a ballot\")\n  else ballots.size\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_660","timestamp":1745346528340,"code":"def assignBallot(ballots: Map[Int, String], id: Int, ballot: String): Map[Int, String] =\n  if ballots.contains(id) then throw new IllegalArgumentException(\"Ballot ID already used\")\n  else ballots + (id -> ballot)\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_662","timestamp":1745346528340,"code":"def safeDivideVotes(a: Int, b: Int): Int =\n  if b == 0 then throw new ArithmeticException(\"Cannot divide by zero\")\n  else a / b\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_664","timestamp":1745346528340,"code":"def addCandidate(votes: Map[String, Int], candidate: String): Map[String, Int] =\n  if votes.contains(candidate) then throw new IllegalArgumentException(\"Candidate already exists\")\n  else votes + (candidate -> 0)\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_666","timestamp":1745346528340,"code":"def verifyTotalVotes(actual: Int, expected: Int): Unit =\n  if actual != expected then throw new IllegalArgumentException(\"Vote totals do not match\")\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_668","timestamp":1745346528340,"code":"def redistributeVote(votes: Map[String, Int], from: String, to: String, n: Int): Map[String, Int] =\n  if !votes.contains(from) || !votes.contains(to) then throw new NoSuchElementException(\"Candidate missing\")\n  if votes(from) < n then throw new IllegalArgumentException(\"Not enough votes to redistribute\")\n  votes.updated(from, votes(from) - n).updated(to, votes(to) + n)\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_670","timestamp":1745346528341,"code":"def parseVoteLine(line: String): (String, Int) =\n  val tokens = line.split(\",\")\n  if tokens.size < 2 then throw new IllegalArgumentException(\"Bad vote line format\")\n  (tokens(0), tokens(1).toInt)\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_672","timestamp":1745346528341,"code":"def requireMinCandidates(votes: Map[String, Int], min: Int): Unit =\n  if votes.size < min then\n    throw new IllegalArgumentException(s\"At least $min candidates required\")\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_674","timestamp":1745346528341,"code":"def electionQuorum(participants: Int, required: Int): Boolean =\n  if required <= 0 then throw new IllegalArgumentException(\"Required must be positive\")\n  participants >= required\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_676","timestamp":1745346528341,"code":"def getBallotForVoter(ballots: Map[String, String], voter: String): String =\n  ballots.getOrElse(voter, throw new NoSuchElementException(\"No ballot for voter\"))\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_678","timestamp":1745346528341,"code":"class VotingRound(maxVotes: Int):\n  private var votesCast = 0\n  def castVote(): Unit =\n    if votesCast >= maxVotes then throw new IllegalStateException(\"Voting limit reached\")\n    votesCast += 1\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_680","timestamp":1745346528341,"code":"def candidateRank(votes: Map[String, Int], candidate: String): Int =\n  if !votes.contains(candidate) then throw new NoSuchElementException(\"Candidate not found\")\n  val sorted = votes.toSeq.sortBy(-_._2).map(_._1)\n  sorted.indexOf(candidate) + 1\n","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_662","timestamp":1745346538159,"code":"def findBookByTitle(catalog: List[String], title: String): String =\n  catalog.find(_ == title).getOrElse(throw new NoSuchElementException(\"Book not found\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_664","timestamp":1745346538160,"code":"def getAuthor(authors: Map[String, String], book: String): String =\n  authors.get(book) match\n    case Some(author) => author\n    case None => throw new RuntimeException(s\"Author of $book not found\")\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_666","timestamp":1745346538160,"code":"def searchYear(books: List[(String, Int)], year: Int): String =\n  books.find(_._2 == year)\n    .map(_._1)\n    .getOrElse(throw new Exception(\"No book published in that year\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_668","timestamp":1745346538160,"code":"def findLibrarySection(section: Option[String]): String =\n  section.getOrElse(throw new IllegalArgumentException(\"Section required\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_670","timestamp":1745346538160,"code":"def getISBN(catalog: Map[String, String], title: String): String =\n  if catalog.contains(title) then\n    catalog(title)\n  else throw new NoSuchElementException(\"ISBN not found for this title\")\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_672","timestamp":1745346538160,"code":"def checkAvailable(copiesAvailable: Int): Unit =\n  if copiesAvailable <= 0 then throw new Exception(\"No copies available!\")\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_674","timestamp":1745346538160,"code":"def getUserId(users: List[String], username: String): Int =\n  users.indexOf(username) match\n    case -1 => throw new Exception(\"User not found\")\n    case idx => idx\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_676","timestamp":1745346538161,"code":"def reserveBook(isbn: String, reserved: Set[String]): Unit =\n  if reserved.contains(isbn) then throw new IllegalStateException(\"Already reserved\")\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_678","timestamp":1745346538161,"code":"class Book(title: String, pages: Int):\n  if pages <= 0 then throw new IllegalArgumentException(\"Pages must be positive\")\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_680","timestamp":1745346538161,"code":"def fetchPDF(bookTitle: String, pdfMap: Map[String, Array[Byte]]): Array[Byte] =\n  pdfMap.getOrElse(bookTitle, throw new Exception(\"PDF not found\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_682","timestamp":1745346538161,"code":"def calculateRating(ratings: List[Int]): Double =\n  if ratings.isEmpty then throw new ArithmeticException(\"No ratings\")\n  else ratings.sum.toDouble / ratings.size\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_684","timestamp":1745346538161,"code":"def searchByKeyword(keywords: List[String], term: String): String =\n  keywords.find(_.toLowerCase == term.toLowerCase).getOrElse(throw new Exception(\"Keyword not found\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_686","timestamp":1745346538161,"code":"def getBookFormat(formats: Set[String], preferred: String): String =\n  if !formats.contains(preferred) then throw new Exception(\"Preferred format not available\")\n  else preferred\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_688","timestamp":1745346538161,"code":"def checkDueDate(dueDays: Int): Unit =\n  if dueDays < 0 then throw new Exception(\"Book is overdue!\")\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_690","timestamp":1745346538161,"code":"def getFirstChapter(chapters: List[String]): String =\n  if chapters.isEmpty then throw new Exception(\"No chapters available\")\n  else chapters.head\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_692","timestamp":1745346538162,"code":"def computeReadTime(pages: Int, speed: Int): Int =\n  if speed == 0 then throw new ArithmeticException(\"Reading speed cannot be zero\")\n  else pages / speed\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_694","timestamp":1745346538162,"code":"def fetchCatalogId(ids: Vector[Int], idx: Int): Int =\n  if idx < 0 || idx >= ids.length then throw new IndexOutOfBoundsException(\"Invalid catalog index\")\n  else ids(idx)\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_696","timestamp":1745346538162,"code":"def getSummary(summaries: Map[String, String], title: String): String =\n  summaries.get(title).getOrElse(throw new Exception(s\"No summary for $title\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_698","timestamp":1745346538163,"code":"def findJournal(journals: List[String], name: String): String =\n  journals.find(_ == name).getOrElse(throw new RuntimeException(\"Journal not in catalog\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_700","timestamp":1745346538163,"code":"def validateSearchInput(input: String): String =\n  if input.trim.isEmpty then throw new Exception(\"Search input cannot be empty\")\n  else input\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_682","timestamp":1745346545292,"code":"def validateQR(qr: String): String =\n  if qr.isEmpty then throw new IllegalArgumentException(\"QR code is empty\")\n  else qr","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_684","timestamp":1745346545292,"code":"def getTicketId(qr: String): Int =\n  val id = qr.takeWhile(_.isDigit)\n  if id.nonEmpty then id.toInt\n  else throw new Exception(\"No ticket ID in QR\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_686","timestamp":1745346545292,"code":"def checkEventDate(date: String): Unit =\n  if date != \"2024-07-01\" then throw new RuntimeException(\"Event date mismatch\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_688","timestamp":1745346545292,"code":"def decodeQR(qr: String): (Int, String) =\n  qr.split(\"-\") match\n    case Array(id, event) => (id.toInt, event)\n    case _ => throw new Exception(\"Invalid QR format\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_690","timestamp":1745346545292,"code":"def validateTicket(tickets: Set[Int], id: Int): Boolean =\n  if tickets.contains(id) then true\n  else throw new NoSuchElementException(\"Ticket not found\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_692","timestamp":1745346545292,"code":"def checkDuplicate(scanned: Set[String], qr: String): Boolean =\n  if scanned.contains(qr) then throw new Exception(\"Duplicate scan\")\n  else true","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_694","timestamp":1745346545292,"code":"def parseQRCode(qr: String): List[String] =\n  if qr.contains(\":\") then qr.split(\":\").toList\n  else throw new IllegalArgumentException(\"Malformed QR\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_696","timestamp":1745346545293,"code":"def getUserName(qrData: String): String =\n  val segments = qrData.split(\"|\")\n  if segments.length > 1 then segments(1)\n  else throw new IndexOutOfBoundsException(\"Missing user name\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_698","timestamp":1745346545293,"code":"class QRValidator(secretKey: String):\n  def verifySignature(qr: String): Boolean =\n    if qr.endsWith(secretKey) then true\n    else throw new SecurityException(\"Invalid signature\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_700","timestamp":1745346545293,"code":"def ensureNotExpired(expiry: Long): Unit =\n  val now = System.currentTimeMillis()\n  if expiry < now then throw new Exception(\"Ticket expired\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_702","timestamp":1745346545293,"code":"def checkPermission(role: String): Unit =\n  if role != \"admin\" then throw new Exception(\"Insufficient rights\")\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_704","timestamp":1745346545293,"code":"def processScan(qr: String): Int =\n  if qr == null then throw new NullPointerException(\"QR is null\")\n  qr.hashCode","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_706","timestamp":1745346545293,"code":"def safeDivide(a: Int, b: Int): Int =\n  if b == 0 then throw new ArithmeticException(\"Cannot divide by zero\")\n  a / b","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_708","timestamp":1745346545293,"code":"def getSection(qr: String): String =\n  val split = qr.split(\"#\")\n  if split.length < 2 then throw new Exception(\"No section info\")\n  split(1)","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_710","timestamp":1745346545293,"code":"def markAsUsed(ticketId: Int, used: Set[Int]): Unit =\n  if used.contains(ticketId) then throw new IllegalStateException(\"Already used\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_712","timestamp":1745346545294,"code":"def extractEventId(qr: String): Int =\n  val parts = qr.split(\"-\")\n  if parts.length > 0 then parts(0).toInt\n  else throw new Exception(\"No event id\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_714","timestamp":1745346545294,"code":"def validateLength(qr: String): Boolean =\n  if qr.length < 8 then throw new Exception(\"QR too short\")\n  true","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_716","timestamp":1745346545294,"code":"def checkSeatNumber(qr: String): Int =\n  val maybeNumber = qr.takeRight(2)\n  if maybeNumber.forall(_.isDigit) then maybeNumber.toInt\n  else throw new Exception(\"Invalid seat number\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_718","timestamp":1745346545294,"code":"def isVIP(qr: String): Boolean =\n  if qr.contains(\"VIP\") then true\n  else throw new Exception(\"Not a VIP ticket\")","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_720","timestamp":1745346545294,"code":"def requirePrefix(qr: String): String =\n  if !qr.startsWith(\"EVT-\") then throw new IllegalArgumentException(\"Missing prefix EVT-\")\n  qr","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_702","timestamp":1745346562732,"code":"def computeDistance(start: (Double, Double), end: (Double, Double)): Double =\n  if start == end then throw new IllegalArgumentException(\"Start and End cannot be the same\")\n  else math.hypot(end._1 - start._1, end._2 - start._2)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_704","timestamp":1745346562732,"code":"def safeDivideEnergy(energy: Double, paths: Int): Double =\n  if paths == 0 then throw new ArithmeticException(\"Cannot divide by zero paths\")\n  else energy / paths","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_706","timestamp":1745346562732,"code":"def findDroneById(id: String, droneList: List[String]): String =\n  droneList.find(_ == id).getOrElse(throw new NoSuchElementException(s\"Drone $id not found\"))","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_708","timestamp":1745346562732,"code":"def pickOptimalRoute(routes: List[String]): String =\n  if routes.isEmpty then throw new Exception(\"No routes available\")\n  else routes.minBy(_.length)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_710","timestamp":1745346562732,"code":"def checkPayload(dronePayload: Double, maxAllowed: Double): Unit =\n  if dronePayload > maxAllowed then throw new RuntimeException(\"Payload exceeds limit!\")","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_712","timestamp":1745346562732,"code":"class Drone(var battery: Int):\n  def consume(power: Int): Unit =\n    if battery - power < 0 then throw new Exception(\"Battery depleted!\")\n    else battery -= power","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_714","timestamp":1745346562733,"code":"def getDeliveryTime(route: String, times: Map[String, Int]): Int =\n  times.getOrElse(route, throw new Exception(\"Unknown route!\"))","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_716","timestamp":1745346562733,"code":"def validateWaypoint(waypoint: (Double, Double)): Unit =\n  if waypoint._1 < 0 || waypoint._2 < 0 then throw new Exception(\"Negative coordinates are invalid!\")","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_718","timestamp":1745346562733,"code":"def selectDrone(drones: Seq[(String, Double)], threshold: Double): String =\n  drones.find(_._2 >= threshold).map(_._1)\n    .getOrElse(throw new Exception(\"No drone meets threshold\"))","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_720","timestamp":1745346562733,"code":"def calculateSegments(path: List[(Double, Double)]): Int =\n  if path.size < 2 then throw new Exception(\"Not enough points for a path\")\n  else path.size - 1","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_722","timestamp":1745346562733,"code":"def assignParcelToDrone(parcelId: String, droneToParcel: Map[String, String]): String =\n  droneToParcel.find(_._2 == parcelId).map(_._1)\n    .getOrElse(throw new Exception(\"No drone assigned to parcel\"))","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_724","timestamp":1745346562733,"code":"def getSpeed(droneSpecs: Map[String, Double], model: String): Double =\n  if !droneSpecs.contains(model) then throw new NoSuchElementException(\"Unknown drone model\")\n  else droneSpecs(model)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_726","timestamp":1745346562733,"code":"def reduceBattery(current: Double, reduction: Double): Double =\n  val result = current - reduction\n  if result < 0 then throw new Exception(\"Battery cannot go negative\")\n  else result","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_728","timestamp":1745346562734,"code":"def shortcutAvailable(shortcuts: List[String]): Boolean =\n  if shortcuts.isEmpty then throw new Exception(\"No shortcuts available\")\n  else true","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_730","timestamp":1745346562734,"code":"def assignRoute(drone: String, route: Option[String]): String =\n  route.getOrElse(throw new Exception(s\"No route found for $drone\"))","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_732","timestamp":1745346562734,"code":"def nextWaypoint(path: List[(Double, Double)], index: Int): (Double, Double) =\n  if index < 0 || index >= path.size then throw new IndexOutOfBoundsException(\"Waypoint index out of range\")\n  else path(index)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_734","timestamp":1745346562734,"code":"def droneCapacity(weight: Double, max: Double): Boolean =\n  if weight < 0 then throw new Exception(\"Negative cargo weight!\")\n  else if weight > max then throw new Exception(\"Cargo too heavy!\")\n  else true","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_736","timestamp":1745346562734,"code":"def costPerMile(cargo: Double, miles: Double): Double =\n  if miles == 0 then throw new ArithmeticException(\"Zero distance!\")\n  else cargo / miles","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_738","timestamp":1745346562734,"code":"def requireAuthorization(user: String, authorized: Set[String]): Unit =\n  if !authorized.contains(user) then throw new Exception(\"Unauthorized user!\")","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_740","timestamp":1745346562734,"code":"def altitudeCheck(altitude: Double): Unit =\n  if altitude < 0 then throw new Exception(\"Invalid altitude!\")\n  else if altitude > 400 then throw new Exception(\"Exceeds legal altitude!\")\n","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_722","timestamp":1745346573853,"code":"def getClaimAmount(amount: Int): Int =\n  if amount < 0 then throw new IllegalArgumentException(\"Amount cannot be negative\")\n  else amount\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_724","timestamp":1745346573853,"code":"def findPolicy(policyId: String): Policy =\n  if policyId.isEmpty then throw new NoSuchElementException(\"Policy ID required\")\n  else Policy(policyId)\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_726","timestamp":1745346573853,"code":"def submitClaim(user: User, claim: Claim): Boolean =\n  if !user.isActive then throw new IllegalStateException(\"User not active\")\n  else true\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_728","timestamp":1745346573853,"code":"def calculateDeductible(amount: Double, rate: Double): Double =\n  if rate == 0 then throw new ArithmeticException(\"Deductible rate cannot be zero\")\n  else amount / rate\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_730","timestamp":1745346573853,"code":"def validateEmail(email: String): Unit =\n  if !email.contains(\"@\") then throw new IllegalArgumentException(\"Invalid email address\")\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_732","timestamp":1745346573854,"code":"def claimType(code: Int): String =\n  code match\n    case 1 => \"Health\"\n    case 2 => \"Auto\"\n    case 3 => \"Property\"\n    case _ => throw new Exception(\"Unknown claim type code\")\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_734","timestamp":1745346573854,"code":"def getUserClaim(userId: String, claims: Map[String, Claim]): Claim =\n  claims.get(userId) match\n    case Some(claim) => claim\n    case None => throw new Exception(\"No claim found for user\")\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_736","timestamp":1745346573854,"code":"def checkAuthorization(token: String): Boolean =\n  if token.isBlank then throw new SecurityException(\"Missing auth token\")\n  else token.startsWith(\"AUTH_\")\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_738","timestamp":1745346573854,"code":"def submitBankDetails(account: String, routing: String): Unit =\n  if account.isEmpty || routing.isEmpty then\n    throw new IllegalArgumentException(\"Bank details incomplete\")\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_740","timestamp":1745346573854,"code":"def calculateReimbursement(total: Double, deductible: Double): Double =\n  if deductible > total then throw new Exception(\"Deductible exceeds claim amount\")\n  else total - deductible\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_742","timestamp":1745346573854,"code":"class Claim(val id: String, val amount: Double):\n  if id.isBlank then throw new IllegalArgumentException(\"Claim ID required\")\n  if amount <= 0 then throw new IllegalArgumentException(\"Invalid claim amount\")\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_744","timestamp":1745346573855,"code":"def getClaimStatus(status: String): String =\n  if status == null then throw new NullPointerException(\"Status is null\")\n  else status.toUpperCase\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_746","timestamp":1745346573855,"code":"def selectPolicyType(option: Int): String =\n  option match\n    case 0 => \"Comprehensive\"\n    case 1 => \"Third Party\"\n    case _ => throw new RuntimeException(\"Unsupported policy type\")\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_748","timestamp":1745346573855,"code":"def updateContact(contact: String): Boolean =\n  if contact.length < 10 then throw new IllegalArgumentException(\"Contact info too short\")\n  else true\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_750","timestamp":1745346573855,"code":"def verifyDocument(doc: Document): Unit =\n  if doc.pages < 1 then throw new Exception(\"Document is empty!\")\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_752","timestamp":1745346573856,"code":"def getAgent(agentId: String, agents: List[Agent]): Agent =\n  agents.find(_.id == agentId).getOrElse(throw new Exception(\"Agent not found\"))\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_754","timestamp":1745346573856,"code":"def cancelClaim(claim: Claim): Boolean =\n  if claim.status == \"Approved\" then throw new IllegalStateException(\"Cannot cancel approved claim\")\n  else true\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_756","timestamp":1745346573857,"code":"def checkCoverage(claim: Claim, coverage: Double): Unit =\n  if claim.amount > coverage then throw new Exception(\"Claim exceeds coverage\")\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_758","timestamp":1745346573857,"code":"def parseDate(date: String): java.time.LocalDate =\n  try java.time.LocalDate.parse(date)\n  catch case _: Exception => throw new IllegalArgumentException(\"Invalid date format\")\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_760","timestamp":1745346573857,"code":"def requireLogin(user: Option[User]): User =\n  user.getOrElse(throw new Exception(\"User must be logged in\"))\n","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_742","timestamp":1745346581629,"code":"def getStudentScore(scores: Map[String, Int], student: String): Int =\n  if scores.contains(student) then scores(student)\n  else throw new NoSuchElementException(s\"No score for $student\")\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_744","timestamp":1745346581629,"code":"def averageGrade(grades: List[Int]): Int =\n  if grades.isEmpty then throw new IllegalArgumentException(\"Grades list is empty!\")\n  else grades.sum / grades.length\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_746","timestamp":1745346581629,"code":"def parseAssignmentMark(markStr: String): Int =\n  try markStr.toInt\n  catch case _: NumberFormatException => throw new RuntimeException(\"Invalid mark format\")\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_748","timestamp":1745346581629,"code":"def percentagePassed(students: Int, passed: Int): Double =\n  if students == 0 then throw new ArithmeticException(\"No students present!\")\n  else passed.toDouble / students * 100\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_750","timestamp":1745346581629,"code":"def getCourseAnalytics(courseId: String): List[String] =\n  val courses = Map(\"math\" -> List(\"A\", \"B\"), \"eng\" -> List(\"C\", \"D\"))\n  courses.getOrElse(courseId, throw new UnsupportedOperationException(s\"No data for $courseId\"))\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_752","timestamp":1745346581630,"code":"class LearnerTracker(val learners: Int):\n  def perSession(sessions: Int): Int =\n    if sessions <= 0 then throw new IllegalArgumentException(\"Invalid session count\")\n    else learners / sessions\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_754","timestamp":1745346581630,"code":"def attendanceRate(total: Int, present: Int): Double =\n  if total == 0 then throw new ArithmeticException(\"No records to compute attendance rate\")\n  else present.toDouble / total\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_756","timestamp":1745346581630,"code":"def fetchQuizScore(quizzes: Map[String, Int], quizId: String): Int =\n  quizzes.getOrElse(quizId, throw new IllegalArgumentException(s\"Quiz $quizId not found\"))\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_758","timestamp":1745346581630,"code":"def getLearningPathProgress(paths: Map[String, Double], path: String): Double =\n  if paths.contains(path) then paths(path)\n  else throw new Exception(\"Learning path not found\")\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_760","timestamp":1745346581630,"code":"def studentNameById(ids: Map[Int, String], id: Int): String =\n  ids.get(id) match\n    case Some(name) => name\n    case None => throw new Exception(s\"Student with id $id not found.\")\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_762","timestamp":1745346581630,"code":"def calculateGPA(grades: List[Double]): Double =\n  if grades.isEmpty then throw new Exception(\"Cannot calculate GPA of empty list\")\n  else grades.sum / grades.size\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_764","timestamp":1745346581631,"code":"def markToGrade(mark: Int): String =\n  if mark < 0 || mark > 100 then throw new IllegalArgumentException(\"Invalid mark range\")\n  else if mark >= 90 then \"A\"\n  else if mark >= 80 then \"B\"\n  else if mark >= 70 then \"C\"\n  else if mark >= 60 then \"D\"\n  else \"F\"\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_766","timestamp":1745346581631,"code":"def firstSubmission(submissions: List[String]): String =\n  submissions.headOption.getOrElse(throw new NoSuchElementException(\"No submissions yet\"))\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_768","timestamp":1745346581631,"code":"def getInstructorRating(ratings: Map[String, Double], name: String): Double =\n  ratings.get(name) match\n    case Some(rating) => rating\n    case None => throw new RuntimeException(\"No rating for instructor: \" + name)\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_770","timestamp":1745346581631,"code":"def timeSpentPerModule(times: List[Int]): Double =\n  if times.isEmpty then throw new RuntimeException(\"No module data\")\n  else times.sum.toDouble / times.length\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_772","timestamp":1745346581631,"code":"def getExamScore(scores: List[Int], index: Int): Int =\n  if index < 0 || index >= scores.length then throw new IndexOutOfBoundsException(s\"Invalid index $index\")\n  else scores(index)\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_774","timestamp":1745346581631,"code":"def averageFeedback(feedbacks: List[Int]): Double =\n  if feedbacks.isEmpty then throw new Exception(\"No feedback to average\")\n  else feedbacks.sum.toDouble / feedbacks.length\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_776","timestamp":1745346581631,"code":"def droppedOutPercentage(total: Int, dropped: Int): Double =\n  if total == 0 then throw new Exception(\"Division by zero not allowed\")\n  else dropped.toDouble / total * 100\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_778","timestamp":1745346581632,"code":"def sessionDuration(sessions: List[Int]): Int =\n  if sessions.isEmpty then throw new Exception(\"No session durations found\")\n  else sessions.max\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_780","timestamp":1745346581632,"code":"def normalizeScore(score: Int): Double =\n  if score < 0 then throw new IllegalArgumentException(\"Score must not be negative\")\n  else score.toDouble / 100\n","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_762","timestamp":1745346591383,"code":"def findRecipeByName(name: String): Recipe =\n  if name.isEmpty then throw new IllegalArgumentException(\"Recipe name is empty.\")\n  else Recipe(name)","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_764","timestamp":1745346591384,"code":"def getUserPreferences(userId: Int): Preferences =\n  if userId <= 0 then throw new Exception(\"Invalid user ID.\")\n  else Preferences(userId)","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_766","timestamp":1745346591384,"code":"def calculateCalories(ingredients: List[Ingredient]): Int =\n  if ingredients.isEmpty then throw new RuntimeException(\"No ingredients provided.\")\n  else ingredients.map(_.calories).sum","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_768","timestamp":1745346591384,"code":"def recommendBasedOnAllergies(recipe: Recipe, allergy: String): String =\n  if recipe.contains(allergy) then throw new Exception(s\"Recipe contains allergen: $allergy\")\n  else \"Safe to recommend\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_770","timestamp":1745346591384,"code":"def parseIngredient(str: String): Ingredient =\n  if str == null then throw new NullPointerException(\"Ingredient string is null\")\n  else Ingredient(str, 0)","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_772","timestamp":1745346591384,"code":"def safeDivideCalories(total: Int, servings: Int): Int =\n  if servings == 0 then throw new ArithmeticException(\"Cannot divide by zero servings\")\n  else total / servings","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_774","timestamp":1745346591384,"code":"def getRecipeFromList(recipes: List[Recipe], idx: Int): Recipe =\n  if idx < 0 || idx >= recipes.length then throw new IndexOutOfBoundsException(\"Recipe index invalid\")\n  else recipes(idx)","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_776","timestamp":1745346591385,"code":"def findFavoriteCuisine(user: User): String =\n  if user.favorites.isEmpty then throw new Exception(\"No favorite cuisines found.\")\n  else user.favorites.head","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_778","timestamp":1745346591385,"code":"def adjustServingSize(amount: Int): Int =\n  if amount < 1 then throw new IllegalArgumentException(\"Minimum serving size is 1.\")\n  else amount","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_780","timestamp":1745346591385,"code":"def recommendRecipe(userPrefs: Preferences, recipes: List[Recipe]): Recipe =\n  if recipes.isEmpty then throw new Exception(\"No recipes to recommend.\")\n  else recipes.head","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_782","timestamp":1745346591385,"code":"def parseRating(input: String): Int =\n  try input.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid rating format.\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_784","timestamp":1745346591385,"code":"def removeIngredient(ingredients: Set[String], toRemove: String): Set[String] =\n  if !ingredients.contains(toRemove) then throw new Exception(\"Ingredient not in set.\")\n  else ingredients - toRemove","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_786","timestamp":1745346591385,"code":"def getNutrientValue(ingredient: Ingredient, nutrient: String): Double =\n  val value = ingredient.nutrients.get(nutrient)\n  if value.isEmpty then throw new Exception(s\"$nutrient not found in ingredient.\")\n  else value.get","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_788","timestamp":1745346591386,"code":"def timeToPrepare(recipe: Recipe): Int =\n  if recipe.steps.isEmpty then throw new Exception(\"No preparation steps defined.\")\n  else recipe.steps.map(_.duration).sum","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_790","timestamp":1745346591386,"code":"def userHasAccess(user: User, recipe: Recipe): Boolean =\n  if !user.permissions.contains(recipe) then throw new SecurityException(\"User not allowed.\")\n  else true","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_792","timestamp":1745346591386,"code":"def fetchRecommendationEngine(configPath: String): RecommendationEngine =\n  if configPath.isBlank then throw new Exception(\"Missing config path.\")\n  else new RecommendationEngine(configPath)","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_794","timestamp":1745346591386,"code":"def selectRandomRecipe(recipes: Seq[Recipe]): Recipe =\n  if recipes.isEmpty then throw new Exception(\"Recipe list is empty.\")\n  else recipes(scala.util.Random.nextInt(recipes.length))","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_796","timestamp":1745346591386,"code":"def filterByDiet(recipes: List[Recipe], diet: String): List[Recipe] =\n  val filtered = recipes.filter(_.diet == diet)\n  if filtered.isEmpty then throw new Exception(\"No recipes match the diet.\")\n  else filtered","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_798","timestamp":1745346591386,"code":"def getUserRecentSearch(user: User): String =\n  if user.recentSearches.isEmpty then throw new Exception(\"No recent searches.\")\n  else user.recentSearches.head","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_800","timestamp":1745346591386,"code":"def calculateIngredientCost(quantity: Int, unitPrice: Double): Double =\n  if quantity < 0 || unitPrice < 0 then throw new IllegalArgumentException(\"Negative cost or quantity.\")\n  else quantity * unitPrice","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_782","timestamp":1745346603923,"code":"def findDonor(donors: List[String], name: String): String =\n  donors.find(_ == name).getOrElse(throw new Exception(\"Donor not found\"))\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_784","timestamp":1745346603923,"code":"def parseAmount(amount: String): Int =\n  try amount.toInt\n  catch case _ => throw new Exception(\"Invalid donation amount\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_786","timestamp":1745346603923,"code":"def addDonation(donations: Map[String, Int], donor: String, amount: Int): Map[String, Int] =\n  if amount <= 0 then throw new Exception(\"Amount must be positive\")\n  else donations + (donor -> (donations.getOrElse(donor, 0) + amount))\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_788","timestamp":1745346603923,"code":"def createCharity(name: String, accountNumber: String): (String, String) =\n  if name.trim.isEmpty then throw new Exception(\"Charity name cannot be empty\")\n  else (name, accountNumber)\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_790","timestamp":1745346603924,"code":"def getMatchingDonationRate(rates: Map[String, Double], donorType: String): Double =\n  rates.get(donorType).getOrElse(throw new Exception(\"No matching rate for donor type\"))\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_792","timestamp":1745346603924,"code":"def splitDonation(amount: Int, recipients: List[String]): List[Int] =\n  if recipients.isEmpty then throw new Exception(\"No recipients available\")\n  else List.fill(recipients.length)(amount / recipients.length)\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_794","timestamp":1745346603925,"code":"def withdrawFunds(balance: Int, amount: Int): Int =\n  if amount > balance then throw new Exception(\"Not enough funds\")\n  else balance - amount\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_796","timestamp":1745346603925,"code":"def getCharityById(charities: Map[Int, String], id: Int): String =\n  charities.get(id).getOrElse(throw new Exception(s\"Charity with ID $id not found\"))\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_798","timestamp":1745346603925,"code":"class Donor(val name: String, val email: String):\n  if !email.contains(\"@\") then throw new IllegalArgumentException(\"Email is invalid\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_800","timestamp":1745346603925,"code":"def safeDivideDonation(total: Int, parts: Int): Int =\n  if parts == 0 then throw new ArithmeticException(\"Cannot divide by zero\")\n  else total / parts\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_802","timestamp":1745346603926,"code":"def processDonationId(id: String): Int =\n  if id.forall(_.isDigit) then id.toInt\n  else throw new Exception(\"Donation ID must be numeric\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_804","timestamp":1745346603926,"code":"def findFundraiser(fundraisers: List[String], id: Int): String =\n  fundraisers.lift(id).getOrElse(throw new Exception(\"No fundraiser with given index\"))\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_806","timestamp":1745346603926,"code":"def updateCharityName(charities: Map[Int, String], id: Int, name: String): Map[Int, String] =\n  if !charities.contains(id) then throw new NoSuchElementException(\"Charity ID not found\")\n  else charities + (id -> name)\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_808","timestamp":1745346603926,"code":"def validateDonation(amount: Int): Boolean =\n  if amount < 1 then throw new Exception(\"Donation amount must be at least 1\")\n  else true\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_810","timestamp":1745346603926,"code":"def getTopDonor(donors: Map[String, Int]): String =\n  if donors.isEmpty then throw new Exception(\"No donors present\")\n  else donors.maxBy(_._2)._1\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_812","timestamp":1745346603927,"code":"def removeCharity(charities: List[String], name: String): List[String] =\n  if !charities.contains(name) then throw new Exception(\"Charity not found for removal\")\n  else charities.filterNot(_ == name)\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_814","timestamp":1745346603927,"code":"def parseDate(dateStr: String): java.time.LocalDate =\n  try java.time.LocalDate.parse(dateStr)\n  catch case _: Exception => throw new Exception(\"Invalid date format\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_816","timestamp":1745346603927,"code":"def sendThankYouEmail(email: String): Unit =\n  if !email.endsWith(\".org\") then throw new Exception(\"Not a valid organizational email\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_818","timestamp":1745346603927,"code":"def batchDonate(donors: List[(String, Int)], platformBalance: Int): Int =\n  val total = donors.map(_._2).sum\n  if total > platformBalance then throw new Exception(\"Insufficient platform balance for batch donation\")\n  else platformBalance - total\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_820","timestamp":1745346603927,"code":"def assignReward(donor: String, donation: Int): String =\n  if donation < 100 then throw new Exception(\"Not eligible for rewards\")\n  else s\"Reward assigned to $donor\"\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_802","timestamp":1745346614995,"code":"def getScore(scores: Map[String, Int], team: String): Int =\n  if scores.contains(team) then scores(team)\n  else throw new Exception(s\"Team '$team' not found\")","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_804","timestamp":1745346614995,"code":"def updateScore(scores: Map[String, Int], team: String, points: Int): Map[String, Int] =\n  if points < 0 then throw new IllegalArgumentException(\"Points cannot be negative\")\n  else scores.updated(team, points)","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_806","timestamp":1745346614996,"code":"def parseScore(s: String): Int =\n  try s.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid score format\")","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_808","timestamp":1745346614996,"code":"def calculateAvg(scores: List[Int]): Double =\n  if scores.isEmpty then throw new ArithmeticException(\"No scores provided\")\n  else scores.sum.toDouble / scores.size","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_810","timestamp":1745346614996,"code":"class LiveScoreboard(var scores: Map[String, Int]):\n  def getLeadingTeam(): String =\n    if scores.isEmpty then throw new Exception(\"No scores available\")\n    else scores.maxBy(_._2)._1","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_812","timestamp":1745346614996,"code":"def safeDividePoints(total: Int, games: Int): Int =\n  if games == 0 then throw new ArithmeticException(\"Games must be > 0\")\n  else total / games","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_814","timestamp":1745346614996,"code":"def addPlayer(players: Set[String], player: String): Set[String] =\n  if players.contains(player) then throw new Exception(\"Player already exists\")\n  else players + player","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_816","timestamp":1745346614996,"code":"def removePlayer(players: Set[String], player: String): Set[String] =\n  if !players.contains(player) then throw new Exception(s\"Player $player not found\")\n  else players - player","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_818","timestamp":1745346614997,"code":"def fetchLatestScore(apiResult: Option[Int]): Int =\n  apiResult.getOrElse(throw new NoSuchElementException(\"No score from API\"))","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_820","timestamp":1745346614997,"code":"def getTeamAtRank(ranking: List[String], rank: Int): String =\n  if rank <= 0 || rank > ranking.size then throw new Exception(\"Rank out of bounds\")\n  else ranking(rank - 1)","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_822","timestamp":1745346614997,"code":"def updateTimeLeft(time: Int): Int =\n  if time < 0 then throw new IllegalArgumentException(\"Time cannot be negative\")\n  else time","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_824","timestamp":1745346614997,"code":"def scoreForQuarter(scores: Map[Int, Int], quarter: Int): Int =\n  scores.getOrElse(quarter, throw new Exception(s\"No score for quarter $quarter\"))","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_826","timestamp":1745346614997,"code":"def parsePlayerName(name: String): String =\n  if name.trim.isEmpty then throw new Exception(\"Blank player name\")\n  else name","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_828","timestamp":1745346614997,"code":"class MatchUpdater(var period: Int):\n  def advancePeriod(): Unit =\n    if period >= 4 then throw new Exception(\"Period limit reached\")\n    else period += 1","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_830","timestamp":1745346614998,"code":"def getScoreDiff(scores: Map[String, Int], teamA: String, teamB: String): Int =\n  (scores.get(teamA), scores.get(teamB)) match\n    case (Some(a), Some(b)) => a - b\n    case _ => throw new Exception(\"One or both teams missing\")","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_832","timestamp":1745346614998,"code":"def inputScore(score: Int): Int =\n  if score < 0 then throw new Exception(\"Score cannot be negative\")\n  else score","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_834","timestamp":1745346614998,"code":"def updateIfHigher(scores: Map[String, Int], team: String, newScore: Int): Map[String, Int] =\n  val currentScore = scores.getOrElse(team, throw new Exception(\"Team missing\"))\n  if newScore > currentScore then scores.updated(team, newScore)\n  else throw new Exception(\"New score not higher\")","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_836","timestamp":1745346614998,"code":"def notifySubscribers(subscribers: List[String]): Unit =\n  if subscribers.isEmpty then throw new Exception(\"No subscribers to notify\")\n  else subscribers.foreach(println)","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_838","timestamp":1745346614998,"code":"def setGoalScorer(goals: Map[Int, String], minute: Int, player: String): Map[Int, String] =\n  if goals.contains(minute) then throw new Exception(s\"Goal already recorded at $minute'\")\n  else goals.updated(minute, player)","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_840","timestamp":1745346614999,"code":"def calcWinPercent(wins: Int, games: Int): Double =\n  if games == 0 then throw new Exception(\"No games played\")\n  else wins.toDouble / games * 100","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_822","timestamp":1745346626755,"code":"def getCarByPlate(fleet: Map[String, Car], plate: String): Car =\n  if fleet.contains(plate) then fleet(plate)\n  else throw new NoSuchElementException(s\"Car $plate not found.\")","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_824","timestamp":1745346626755,"code":"def parseRentalDuration(input: String): Int =\n  try input.toInt\n  catch case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid rental duration.\")","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_826","timestamp":1745346626755,"code":"def removeCarFromFleet(fleet: List[Car], toRemove: Car): List[Car] =\n  if fleet.contains(toRemove) then fleet.filterNot(_ == toRemove)\n  else throw new Exception(\"Car not in fleet.\")","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_828","timestamp":1745346626756,"code":"def rentCar(carId: Int, availableIds: Set[Int]): Int =\n  if availableIds.contains(carId) then carId\n  else throw new RuntimeException(\"Requested car not available.\")","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_830","timestamp":1745346626756,"code":"def calculatePrice(days: Int, dailyRate: Double): Double =\n  if days <= 0 then throw new IllegalArgumentException(\"Invalid number of days.\")\n  else days * dailyRate","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_832","timestamp":1745346626756,"code":"def registerNewCar(fleet: Map[String, Car], newCar: Car): Map[String, Car] =\n  if fleet.contains(newCar.plate) then throw new Exception(\"Car already registered.\")\n  else fleet + (newCar.plate -> newCar)","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_834","timestamp":1745346626756,"code":"class Car(val plate: String, val mileage: Int)\ndef getMileage(car: Car): Int =\n  if car.mileage < 0 then throw new Exception(\"Mileage cannot be negative.\")\n  else car.mileage","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_836","timestamp":1745346626756,"code":"def findAvailableCar(cars: List[Car]): Car =\n  cars.find(_.isAvailable) match\n    case Some(car) => car\n    case None => throw new Exception(\"No available cars.\")","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_838","timestamp":1745346626756,"code":"def assignGps(car: Car, withGps: Boolean): Car =\n  if withGps && car.hasGps then throw new Exception(\"Car already has GPS.\")\n  else car.copy(hasGps = withGps)","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_840","timestamp":1745346626757,"code":"def chargeCustomer(customer: Customer, amount: Double): Unit =\n  if amount <= 0 then throw new IllegalArgumentException(\"Charge amount must be positive.\")\n  else customer.charge(amount)","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_842","timestamp":1745346626757,"code":"def returnCar(fleet: List[Car], car: Car): List[Car] =\n  if fleet.exists(_.plate == car.plate) then throw new Exception(\"Car already returned.\")\n  else car :: fleet","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_844","timestamp":1745346626757,"code":"def upgradeCarPlan(car: Car, newPlan: String): Car =\n  val allowedPlans = Set(\"basic\", \"premium\", \"luxury\")\n  if allowedPlans.contains(newPlan) then car.copy(plan = newPlan)\n  else throw new Exception(\"Invalid car plan.\")","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_846","timestamp":1745346626757,"code":"def getCustomerById(customers: Map[Int, Customer], id: Int): Customer =\n  customers.get(id) match\n    case Some(c) => c\n    case None => throw new Exception(s\"Customer $id not found.\")","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_848","timestamp":1745346626757,"code":"def availableCarsCount(cars: List[Car]): Int =\n  if cars.isEmpty then throw new Exception(\"No cars in fleet.\")\n  else cars.count(_.isAvailable)","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_850","timestamp":1745346626757,"code":"def calculateAverageMileage(cars: Seq[Car]): Double =\n  if cars.isEmpty then throw new Exception(\"Fleet is empty.\")\n  else cars.map(_.mileage).sum.toDouble / cars.length","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_852","timestamp":1745346626758,"code":"def reserveCar(carId: Int, reserved: Set[Int]): Unit =\n  if reserved.contains(carId) then throw new Exception(\"Car already reserved.\")","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_854","timestamp":1745346626758,"code":"def updateInsurance(car: Car, active: Boolean): Car =\n  if !car.isInsurable then throw new Exception(\"Car not eligible for insurance.\")\n  else car.copy(hasInsurance = active)","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_856","timestamp":1745346626758,"code":"def setFuelLevel(car: Car, level: Int): Car =\n  if level < 0 || level > 100 then throw new Exception(\"Invalid fuel level.\")\n  else car.copy(fuelLevel = level)","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_858","timestamp":1745346626758,"code":"def calculateRentalShare(totalRentals: Int, companyRentals: Int): Double =\n  if totalRentals == 0 then throw new ArithmeticException(\"Division by zero.\")\n  else companyRentals.toDouble / totalRentals","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_860","timestamp":1745346626758,"code":"def findCarByVin(fleet: Seq[Car], vin: String): Car =\n  fleet.find(_.vin == vin) match\n    case Some(car) => car\n    case None => throw new Exception(\"VIN not found in fleet.\")","category":"uses_throw","topicUsed":"Car rental fleet management"}
