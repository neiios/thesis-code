{"id":"idiomatic_1","timestamp":1745347479624,"code":"case class Product(id: String, name: String, price: BigDecimal)\n\nval cart: List[Product] = List(Product(\"p1\", \"Widget\", 19.99), Product(\"p2\", \"Gadget\", 29.99))\nval total: BigDecimal = cart.map(_.price).sum\nprintln(s\"Total price: $$total\")\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_3","timestamp":1745347479624,"code":"case class Address(street: String, city: String, zip: Option[String])\n\nval address = Address(\"123 Main St\", \"Springfield\", None)\nval postalCode = address.zip.getOrElse(\"No ZIP provided\")\nprintln(s\"ZIP: $postalCode\")\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_5","timestamp":1745347479624,"code":"import scala.util.Try\n\ndef parseDiscount(code: String): Try[Int] = Try(code.toInt)\n\nparseDiscount(\"10\") match\n  case scala.util.Success(value)   => println(s\"Discount: $$value% off\")\n  case scala.util.Failure(reason)  => println(s\"Invalid discount code: $reason\")\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_7","timestamp":1745347479624,"code":"case class CartItem(productId: String, quantity: Int)\ndef updateQuantity(item: CartItem, newQty: Option[Int]): CartItem =\n  item.copy(quantity = newQty.getOrElse(item.quantity))\n\nval item = CartItem(\"sku123\", 2)\nval updated = updateQuantity(item, Some(5))\nprintln(updated)\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_9","timestamp":1745347479624,"code":"case class User(email: String, phone: Option[String])\nval user = User(\"alice@example.com\", None)\nval phoneDisplay = user.phone.fold(\"(not provided)\")(identity)\nprintln(s\"Phone: $phoneDisplay\")\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_11","timestamp":1745347479624,"code":"import scala.util.{Try, Success, Failure}\ndef applyCoupon(code: String): Either[String, BigDecimal] =\n  if code == \"SAVE10\" then Right(BigDecimal(10))\n  else Left(\"Invalid coupon code\")\n\napplyCoupon(\"SAVE10\") match\n  case Right(amount) => println(s\"Coupon applied: $$amount off\")\n  case Left(error)   => println(error)\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_13","timestamp":1745347479624,"code":"case class PaymentResult(success: Boolean, message: String)\ndef processPayment(amount: BigDecimal): Option[PaymentResult] =\n  if amount > 0 then Some(PaymentResult(true, \"Payment successful\"))\n  else None\n\nprintln(processPayment(100))\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_15","timestamp":1745347479624,"code":"case class ShippingOption(method: String, cost: BigDecimal)\ndef selectFastest(options: List[ShippingOption]): Option[ShippingOption] =\n  options.sortBy(_.cost).headOption\n\nval candidates = List(ShippingOption(\"Standard\", 5.0), ShippingOption(\"Express\", 15.0))\nprintln(selectFastest(candidates))\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_17","timestamp":1745347479624,"code":"case class Order(id: String, items: List[CartItem], note: Option[String])\nval notes: Option[String] = Some(\"Leave at front door.\")\nval order = Order(\"ORD123\", List(CartItem(\"p1\", 2)), notes)\nprintln(order)\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_19","timestamp":1745347479624,"code":"case class Payment(cardNumber: Option[String], paypalEmail: Option[String])\ndef getPaymentMethod(payment: Payment): String = payment match\n  case Payment(Some(_), _) => \"Credit Card\"\n  case Payment(_, Some(_)) => \"PayPal\"\n  case _ => \"Unknown\"\n\nprintln(getPaymentMethod(Payment(Some(\"4111...\"), None)))\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_21","timestamp":1745347479624,"code":"import scala.util.Try\ncase class CheckoutSession(cart: List[CartItem])\ndef loadSession(id: String): Try[CheckoutSession] =\n  if id.nonEmpty then Try(CheckoutSession(List())) else Try(throw new Exception(\"Session not found\"))\n\nloadSession(\"abc\") match\n  case scala.util.Success(s) => println(\"Session loaded\")\n  case scala.util.Failure(e) => println(e.getMessage)\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_23","timestamp":1745347479624,"code":"case class Customer(id: String, email: String, address: Option[Address])\ndef getShippingCity(c: Customer): String = c.address.map(_.city).getOrElse(\"City unknown\")\n\nval c1 = Customer(\"cus1\", \"me@ex.com\", Some(Address(\"A\", \"Paris\", None)))\nprintln(getShippingCity(c1))\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_25","timestamp":1745347479624,"code":"def calculateTax(amount: BigDecimal, maybeRate: Option[BigDecimal]): BigDecimal =\n  maybeRate.map(amount * _).getOrElse(0)\n\nprintln(calculateTax(100, Some(0.15))) // 15.0\nprintln(calculateTax(100, None))        // 0\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_27","timestamp":1745347479624,"code":"case class GiftCard(code: String, usable: Boolean)\ndef redeem(card: GiftCard): Either[String, String] =\n  if card.usable then Right(\"Gift card redeemed!\") else Left(\"Gift card not valid.\")\n\nprintln(redeem(GiftCard(\"GC12\", false)))\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_29","timestamp":1745347479624,"code":"case class CheckoutError(message: String)\ndef validateCart(cart: List[CartItem]): Either[CheckoutError, List[CartItem]] =\n  if cart.nonEmpty then Right(cart) else Left(CheckoutError(\"Cart is empty\"))\n\nprintln(validateCart(Nil))\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_31","timestamp":1745347479624,"code":"case class Invoice(total: BigDecimal, paid: Boolean)\nval maybeInvoice: Option[Invoice] = Some(Invoice(300, false))\nmaybeInvoice.foreach(inv => println(s\"Invoice total: $${inv.total}\"))\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_33","timestamp":1745347479624,"code":"import scala.util.Try\ndef parsePrice(price: String): Try[BigDecimal] = Try(BigDecimal(price))\nval p = parsePrice(\"12.50\").getOrElse(BigDecimal(0.0))\nprintln(s\"Parsed price: $$p\")\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_35","timestamp":1745347479624,"code":"case class ShippingInfo(name: String, instructions: Option[String])\nval info = ShippingInfo(\"Bob\", None)\nval userNote = info.instructions.getOrElse(\"No special instructions.\")\nprintln(userNote)\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_37","timestamp":1745347479624,"code":"case class Promotion(code: String, discount: Option[BigDecimal])\ndef calculateFinal(total: BigDecimal, promo: Promotion): BigDecimal =\n  promo.discount.map(d => total - d).getOrElse(total)\n\nval promo = Promotion(\"SPRING50\", Some(50))\nprintln(calculateFinal(300, promo))\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_39","timestamp":1745347479624,"code":"case class OrderConfirmation(orderId: String, confirmationEmail: String)\ndef sendOrderConfirmation(email: Option[String], orderId: String): Either[String, OrderConfirmation] =\n  email match\n    case Some(mail) => Right(OrderConfirmation(orderId, mail))\n    case None       => Left(\"No email provided\")\n\nprintln(sendOrderConfirmation(Some(\"cust@shop.com\"), \"O123\"))\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_21","timestamp":1745347494398,"code":"case class User(id: Int, username: String, email: Option[String])\n\nval user = User(1, \"alice\", None)\nval email = user.email.getOrElse(\"No email on file.\")\nprintln(email)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_23","timestamp":1745347494398,"code":"case class Account(id: String, balance: BigDecimal)\n\ndef findAccount(accounts: List[Account], id: String): Option[Account] =\n  accounts.find(_.id == id)\n\nval accOpt = findAccount(List(Account(\"a123\", 999.5)), \"b456\")\nprintln(accOpt)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_25","timestamp":1745347494398,"code":"import scala.util.Try\n\ndef parseAmount(str: String): Try[BigDecimal] = Try(BigDecimal(str))\n\nval result = parseAmount(\"10.50\").getOrElse(BigDecimal(0))\nprintln(result)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_27","timestamp":1745347494398,"code":"case class Transaction(id: Int, amount: BigDecimal, description: Option[String])\n\nval tx = Transaction(1001, 11.25, None)\nval desc = tx.description.getOrElse(\"No description available\")\nprintln(desc)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_29","timestamp":1745347494398,"code":"def getNickname(user: User): String = user.email match\n  case Some(email) => email.takeWhile(_ != '@')\n  case None => \"unnamed\"\n\nprintln(getNickname(User(3, \"john\", Some(\"john@bank.com\"))))\nprintln(getNickname(User(4, \"bob\", None)))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_31","timestamp":1745347494398,"code":"import scala.util.Try\n\ndef safeDivide(amount: BigDecimal, divisor: BigDecimal): Either[String, BigDecimal] =\n  if divisor == 0 then Left(\"Division by zero\")\n  else Right(amount / divisor)\n\nprintln(safeDivide(100, 0))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_33","timestamp":1745347494398,"code":"case class Card(number: String, expiry: String, cvv: String)\n\ndef maskCardNumber(card: Card): String =\n  \"**** **** **** \" + card.number.takeRight(4)\n\nval card = Card(\"1234567812345678\", \"08/28\", \"321\")\nprintln(maskCardNumber(card))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_35","timestamp":1745347494398,"code":"case class Recipient(name: String, iban: String)\n\ndef validateIban(iban: String): Option[String] =\n  if iban.length == 22 then Some(iban) else None\n\nval recipient = Recipient(\"Maria\", \"DE89370400440532013000\")\nprintln(validateIban(recipient.iban))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_37","timestamp":1745347494398,"code":"case class LoginAttempt(username: String, device: String)\n\nval attempt = Option(LoginAttempt(\"user82\", \"mobile\"))\nattempt.foreach(at => println(s\"Attempt by ${at.username} from ${at.device}\"))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_39","timestamp":1745347494398,"code":"def findUserByEmail(email: String, users: List[User]): Option[User] =\n  users.find(_.email.contains(email))\n\nval users = List(User(1, \"sam\", None), User(2, \"tina\", Some(\"tina@mail.com\")))\nprintln(findUserByEmail(\"tina@mail.com\", users))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_41","timestamp":1745347494398,"code":"import scala.util.Try\n\ndef parseDateOrNone(s: String): Option[java.time.LocalDate] =\n  Try(java.time.LocalDate.parse(s)).toOption\n\nprintln(parseDateOrNone(\"2023-12-31\"))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_43","timestamp":1745347494398,"code":"case class Balance(currency: String, amount: BigDecimal)\ncase class AccountOverview(accounts: List[Balance])\n\ndef totalBalance(overview: AccountOverview): BigDecimal =\n  overview.accounts.filter(_.currency == \"USD\").map(_.amount).sum\n\nval overview = AccountOverview(List(Balance(\"USD\", 50), Balance(\"EUR\", 20)))\nprintln(totalBalance(overview))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_45","timestamp":1745347494398,"code":"def processOptionalPin(pin: Option[String]): String = pin match\n  case Some(value) if value.length == 4 => \"PIN valid\"\n  case _ => \"PIN missing or invalid length\"\n\nprintln(processOptionalPin(Some(\"1234\")))\nprintln(processOptionalPin(None))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_47","timestamp":1745347494398,"code":"import scala.util.Try\n\ndef parseTransactionId(s: String): Either[String, Int] =\n  Try(s.toInt).toEither.left.map(_ => \"Invalid transaction id\")\n\nprintln(parseTransactionId(\"100A\"))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_49","timestamp":1745347494398,"code":"case class Statement(lineItems: List[Transaction])\n\ndef findLargeTransactions(stmt: Statement): List[Transaction] =\n  stmt.lineItems.filter(_.amount > 1000)\n\nval t1 = Transaction(1, 1500, Some(\"Salary\"))\nval t2 = Transaction(2, 12, None)\nval stmt = Statement(List(t1, t2))\nprintln(findLargeTransactions(stmt))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_51","timestamp":1745347494398,"code":"case class Settings(notificationsEnabled: Boolean, darkMode: Boolean)\ndef maybeUpdateSettings(opt: Option[Settings]): Settings =\n  opt.getOrElse(Settings(false, false))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_53","timestamp":1745347494398,"code":"def safeTransfer(from: Account, to: Account, amount: BigDecimal): Either[String, (Account, Account)] =\n  if from.balance < amount then Left(\"Insufficient funds\")\n  else Right((from.copy(balance = from.balance - amount), to.copy(balance = to.balance + amount)))\n\nval from = Account(\"A\", 20)\nval to = Account(\"B\", 100)\nprintln(safeTransfer(from, to, 30))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_55","timestamp":1745347494398,"code":"case class Session(userId: Int, token: Option[String])\n\ndef isActive(session: Session): Boolean = session.token.nonEmpty\n\nval session = Session(1, Some(\"secrettoken\"))\nprintln(isActive(session))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_57","timestamp":1745347494398,"code":"case class MobileDevice(id: String, os: String, trustScore: Option[Double])\n\ndef trustLabel(dev: MobileDevice): String =\n  dev.trustScore.fold(\"unrated\") {\n    case score if score > 0.8 => \"trusted\"\n    case _ => \"low trust\"\n  }\n\nprintln(trustLabel(MobileDevice(\"D1\", \"Android\", Some(0.85))))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_59","timestamp":1745347494398,"code":"case class Address(city: String, postalCode: Option[String])\n\ndef showPostal(address: Address): String =\n  address.postalCode.getOrElse(\"unknown\")\n\nprintln(showPostal(Address(\"Berlin\", None)))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_41","timestamp":1745347503203,"code":"case class Patient(id: Int, name: String, email: Option[String])","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_43","timestamp":1745347503203,"code":"case class Doctor(id: Int, name: String, specialty: Option[String])","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_45","timestamp":1745347503203,"code":"case class Appointment(patientId: Int, doctorId: Int, time: java.time.LocalDateTime, notes: Option[String])","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_47","timestamp":1745347503203,"code":"def findPatientById(id: Int, patients: List[Patient]): Option[Patient] =\n  patients.find(_.id == id)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_49","timestamp":1745347503203,"code":"def parseDate(dateStr: String): Either[String, java.time.LocalDateTime] =\n  scala.util.Try(java.time.LocalDateTime.parse(dateStr)).toEither.left.map(_ => s\"Invalid date: $dateStr\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_51","timestamp":1745347503203,"code":"def getAppointmentNotes(appt: Appointment): String =\n  appt.notes.getOrElse(\"No notes provided.\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_53","timestamp":1745347503203,"code":"def patientEmailSummary(patient: Patient): String =\n  patient.email.map(email => s\"Contact: $email\").getOrElse(\"No email available.\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_55","timestamp":1745347503203,"code":"def rescheduleAppointment(\n    appt: Appointment,\n    newTime: java.time.LocalDateTime\n): Appointment =\n  appt.copy(time = newTime)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_57","timestamp":1745347503203,"code":"def addAppointment(appointments: List[Appointment], appt: Appointment): List[Appointment] =\n  appt :: appointments","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_59","timestamp":1745347503203,"code":"def findDoctorBySpecialty(specialty: String, doctors: List[Doctor]): Option[Doctor] =\n  doctors.find(_.specialty.contains(specialty))","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_61","timestamp":1745347503203,"code":"def validateAppointmentTime(\n    appt: Appointment\n): Either[String, Appointment] =\n  if appt.time.isAfter(java.time.LocalDateTime.now) then Right(appt)\n  else Left(\"Appointment time must be in the future\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_63","timestamp":1745347503203,"code":"def cancelAppointment(\n    appointments: List[Appointment],\n    apptId: (Int, Int, java.time.LocalDateTime)\n): List[Appointment] =\n  appointments.filterNot(a =>\n    (a.patientId, a.doctorId, a.time) == apptId\n  )","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_65","timestamp":1745347503203,"code":"def scheduleAppointment(\n    patient: Patient,\n    doctor: Doctor,\n    time: java.time.LocalDateTime\n): Either[String, Appointment] =\n  if time.isAfter(java.time.LocalDateTime.now) then\n    Right(Appointment(patient.id, doctor.id, time, None))\n  else\n    Left(s\"Cannot schedule appointment in the past: $time\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_67","timestamp":1745347503203,"code":"def safeGetEmail(patient: Option[Patient]): Option[String] =\n  patient.flatMap(_.email)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_69","timestamp":1745347503203,"code":"case class TimeSlot(start: java.time.LocalDateTime, end: java.time.LocalDateTime)\n\ndef isSlotAvailable(appointments: List[Appointment], slot: TimeSlot): Boolean =\n  !appointments.exists(a =>\n    (a.time.isAfter(slot.start) || a.time.isEqual(slot.start)) &&\n    a.time.isBefore(slot.end)\n  )","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_71","timestamp":1745347503203,"code":"def earliestAppointment(appointments: List[Appointment]): Option[Appointment] =\n  appointments.sortBy(_.time).headOption","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_73","timestamp":1745347503203,"code":"def updateAppointmentNotes(\n    appt: Appointment,\n    newNotes: Option[String]\n): Appointment =\n  appt.copy(notes = newNotes)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_75","timestamp":1745347503203,"code":"def patientNameOrDefault(optPatient: Option[Patient]): String =\n  optPatient.map(_.name).getOrElse(\"Unknown Patient\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_77","timestamp":1745347503203,"code":"def listAppointmentsByPatient(\n    patientId: Int,\n    appointments: List[Appointment]\n): List[Appointment] =\n  appointments.filter(_.patientId == patientId)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_79","timestamp":1745347503203,"code":"case class AppointmentRequest(\n    patientId: Int,\n    doctorId: Int,\n    requestedTime: java.time.LocalDateTime\n)\n\ndef toAppointment(req: AppointmentRequest): Either[String, Appointment] =\n  if req.requestedTime.isAfter(java.time.LocalDateTime.now) then\n    Right(Appointment(req.patientId, req.doctorId, req.requestedTime, None))\n  else\n    Left(\"Requested appointment time is in the past.\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_61","timestamp":1745347517081,"code":"case class StepRecord(userId: String, date: String, steps: Int)\n\nval step = StepRecord(\"user42\", \"2024-06-01\", 10500)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_63","timestamp":1745347517081,"code":"case class HeartRateReading(rate: Int, timestamp: Long)\n\ndef averageRate(readings: List[HeartRateReading]): Option[Double] =\n  if readings.isEmpty then None else Some(readings.map(_.rate).sum.toDouble / readings.size)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_65","timestamp":1745347517081,"code":"def parseSteps(input: String): Either[String, Int] =\n  scala.util.Try(input.toInt).toEither.left.map(_ => s\"Failed to parse steps: $input\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_67","timestamp":1745347517081,"code":"case class CalorieRecord(userId: String, calories: Option[Double])\n\nval rec1 = CalorieRecord(\"u1\", Some(220.0))\nval rec2 = CalorieRecord(\"u2\", None)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_69","timestamp":1745347517081,"code":"def caloriesForUser(records: List[CalorieRecord], userId: String): Option[Double] =\n  records.find(_.userId == userId).flatMap(_.calories)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_71","timestamp":1745347517081,"code":"case class SleepLog(hours: Double, quality: Option[String])\n\nval log = SleepLog(7.0, Some(\"good\"))\nval unknownQuality = SleepLog(6.0, None)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_73","timestamp":1745347517082,"code":"def safeDivide(a: Int, b: Int): Either[String, Double] =\n  if b == 0 then Left(\"Division by zero error\") else Right(a.toDouble / b)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_75","timestamp":1745347517082,"code":"case class DistanceRecord(userId: String, date: String, distanceKm: Double)\n\ndef maxDistance(records: List[DistanceRecord]): Option[DistanceRecord] =\n  records.sortBy(-_.distanceKm).headOption","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_77","timestamp":1745347517082,"code":"def parseHeartRate(str: String): Try[Int] =\n  scala.util.Try(str.toInt)\n\nparseHeartRate(\"88\").toOption","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_79","timestamp":1745347517082,"code":"case class Workout(typeName: String, durationMin: Int)\n\nval cycling = Workout(\"Cycling\", 45)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_81","timestamp":1745347517082,"code":"def bmi(weightKg: Double, heightM: Option[Double]): Option[Double] =\n  heightM.map(h => weightKg / (h * h))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_83","timestamp":1745347517082,"code":"case class GpsPoint(lat: Double, lon: Double)\ndef parseGps(input: String): Either[String, GpsPoint] =\n  input.split(\",\").toList match\n    case latStr :: lonStr :: Nil =>\n      for\n        lat <- scala.util.Try(latStr.toDouble).toEither.left.map(_ => \"Invalid lat\")\n        lon <- scala.util.Try(lonStr.toDouble).toEither.left.map(_ => \"Invalid lon\")\n      yield GpsPoint(lat, lon)\n    case _ => Left(\"Bad GPS input format\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_85","timestamp":1745347517082,"code":"case class Activity(userId: String, start: Long, end: Option[Long])\n\ndef isComplete(act: Activity): Boolean =\n  act.end.isDefined","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_87","timestamp":1745347517082,"code":"def safeAvg(xs: List[Int]): Option[Double] =\n  if xs.isEmpty then None else Some(xs.sum.toDouble / xs.length)\n\nsafeAvg(List())","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_89","timestamp":1745347517082,"code":"case class HydrationRecord(amountLiters: Option[Double], timestamp: Long)\n\nval hydration = HydrationRecord(Some(0.75), 1719048960L)\nval noEntry = HydrationRecord(None, 1719049000L)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_91","timestamp":1745347517082,"code":"def parseDuration(duration: String): Either[String, Int] =\n  scala.util.Try(duration.toInt).toEither.left.map(_ => s\"Cannot parse duration: $duration\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_93","timestamp":1745347517082,"code":"case class UserProfile(id: String, nickname: Option[String])\n\ndef getDisplayName(profile: UserProfile): String =\n  profile.nickname.getOrElse(\"Anonymous\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_95","timestamp":1745347517082,"code":"case class Pace(distanceKm: Double, durationMin: Int)\n\ndef calcPace(p: Pace): Either[String, Double] =\n  if p.durationMin <= 0 then Left(\"Duration must be positive\")\n  else Right(p.distanceKm / p.durationMin * 60)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_97","timestamp":1745347517082,"code":"case class ElevationRecord(start: Double, end: Double)\ndef elevationGain(rec: ElevationRecord): Double =\n  (rec.end - rec.start).max(0)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_99","timestamp":1745347517082,"code":"case class MoodEntry(mood: Option[String], timestamp: Long)\n\nval mood = MoodEntry(None, System.currentTimeMillis())\nmood.mood match\n  case Some(m) => println(s\"Mood: $m\")\n  case None    => println(\"No mood entry\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_81","timestamp":1745347527209,"code":"// 1. Simple case class for a PricingPlan\ndef case class PricingPlan(id: String, name: String, price: BigDecimal)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_83","timestamp":1745347527209,"code":"// 2. Using Option for possibly missing plan description\ndef case class PricingPlan(id: String, name: String, price: BigDecimal, description: Option[String])","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_85","timestamp":1745347527209,"code":"// 3. Pattern matching on Option to return plan description or fallback\ndef getDescription(plan: PricingPlan): String =\n  plan.description match\n    case Some(desc) => desc\n    case None       => \"No description provided.\"\n","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_87","timestamp":1745347527209,"code":"// 4. Creating a plan with description using Some\nval planWithDesc = PricingPlan(\"p1\", \"Pro\", 12.99, Some(\"Professional tier.\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_89","timestamp":1745347527209,"code":"// 5. Creating a plan without description using None\nval planNoDesc = PricingPlan(\"p2\", \"Basic\", 5.50, None)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_91","timestamp":1745347527209,"code":"// 6. Mapping over Option to transform description\ndef shortDescription(plan: PricingPlan): Option[String] =\n  plan.description.map(_.take(10))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_93","timestamp":1745347527209,"code":"// 7. Parsing price safely with Try\nimport scala.util.{Try, Success, Failure}\ndef parsePricingPlan(id: String, name: String, priceStr: String): Try[PricingPlan] =\n  Try(priceStr.toBigDecimal).map(p => PricingPlan(id, name, p, None))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_95","timestamp":1745347527209,"code":"// 8. Simple error handling with Either for pricing logic\ndef validatePrice(price: BigDecimal): Either[String, BigDecimal] =\n  if price >= 0 then Right(price) else Left(\"Price cannot be negative.\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_97","timestamp":1745347527209,"code":"// 9. Composing Option and Either: Option for plan data, Either for validation\nval maybePlan: Option[PricingPlan] = Some(PricingPlan(\"p3\", \"Free\", 0, None))\nval result: Either[String, String] =\n  maybePlan.toRight(\"Plan not found\").map(plan => s\"Plan: ${plan.name}\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_99","timestamp":1745347527209,"code":"// 10. Using getOrElse for Option fallback\nval planTitle = planNoDesc.description.getOrElse(\"Standard Plan\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_101","timestamp":1745347527209,"code":"// 11. Function returning Option if plan found by ID, else None\ndef findPlanById(plans: List[PricingPlan], id: String): Option[PricingPlan] =\n  plans.find(_.id == id)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_103","timestamp":1745347527209,"code":"// 12. Function using Either for error reporting on lookup\ndef getPlanNameById(plans: List[PricingPlan], id: String): Either[String, String] =\n  plans.find(_.id == id).toRight(s\"Plan $id not found.\").map(_.name)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_105","timestamp":1745347527210,"code":"// 13. Chaining Options for nested values\ncase class PlanMetadata(tags: Option[List[String]])\ndef firstTag(meta: PlanMetadata): String =\n  meta.tags.flatMap(_.headOption).getOrElse(\"No tag\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_107","timestamp":1745347527210,"code":"// 14. Case class with Option for feature flags\ncase class PricingPlanFeature(name: String, enabled: Option[Boolean])","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_109","timestamp":1745347527210,"code":"// 15. Creating plan with optional feature\ncase class PlanWithFeature(name: String, feature: Option[PricingPlanFeature])","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_111","timestamp":1745347527210,"code":"// 16. Using Try for recoverable I/O error (simulated)\ndef loadPricingPlans(): Try[List[PricingPlan]] =\n  Try(throw new Exception(\"Simulated DB failure\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_113","timestamp":1745347527210,"code":"// 17. Using map on Option to perform action only when value is present\nval maybeFeature: Option[PricingPlanFeature] = Some(PricingPlanFeature(\"chat-support\", Some(true)))\nmaybeFeature.map(f => println(s\"Feature: ${f.name}, Enabled: ${f.enabled}\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_115","timestamp":1745347527210,"code":"// 18. Using Either for create operation with error message\ndef createPricingPlan(name: String, price: BigDecimal): Either[String, PricingPlan] =\n  if name.nonEmpty then Right(PricingPlan(java.util.UUID.randomUUID().toString, name, price, None))\n  else Left(\"Plan name required.\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_117","timestamp":1745347527210,"code":"// 19. Case class for plan tier with Option for upgrade eligibility\ncase class PlanTier(level: String, upgradeEligibility: Option[String])","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_119","timestamp":1745347527210,"code":"// 20. For-comprehension with Option to combine two optional fields\ncase class Plan(id: String, discount: Option[Double])\ncase class UserPlan(plan: Option[Plan])\ndef getDiscount(userPlan: UserPlan): Option[Double] =\n  for plan <- userPlan.plan; d <- plan.discount yield d","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_101","timestamp":1745347541054,"code":"case class Device(id: String, name: String)\n\nval livingRoomLamp = Device(\"dev-1\", \"LivingRoomLamp\")\nval kitchenLight = Device(\"dev-2\", \"KitchenLight\")\n\nval allDevices = List(livingRoomLamp, kitchenLight)","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_103","timestamp":1745347541054,"code":"case class TemperatureSensor(id: String, location: String, lastValue: Option[Double])\n\ndef getCurrentTemperature(sensor: TemperatureSensor): Option[Double] =\n  sensor.lastValue\n\nval sensor = TemperatureSensor(\"ts-1\", \"Living Room\", Some(22.8))\nval temp: Option[Double] = getCurrentTemperature(sensor)","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_105","timestamp":1745347541054,"code":"case class SmartLock(id: String, isLocked: Boolean)\n\nval maybeLock: Option[SmartLock] = None\nval locked = maybeLock.map(_.isLocked).getOrElse(false)","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_107","timestamp":1745347541054,"code":"import scala.util.{Try, Success, Failure}\n\ndef parseDeviceId(str: String): Try[Int] = Try(str.toInt)\n\nparseDeviceId(\"dev42\") match\n  case Success(id) => println(s\"Parsed device id: $id\")\n  case Failure(e) => println(s\"Invalid device id: ${e.getMessage}\")","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_109","timestamp":1745347541054,"code":"case class Light(id: String, brightness: Int)\n\ndef setBrightness(light: Light, level: Int): Either[String, Light] =\n  if level >= 0 && level <= 100 then Right(light.copy(brightness = level))\n  else Left(\"Brightness level must be 0-100\")","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_111","timestamp":1745347541054,"code":"case class Scene(name: String, devices: List[Device])\n\nval scene = Scene(\"Evening Relax\", List(livingRoomLamp, kitchenLight))","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_113","timestamp":1745347541054,"code":"case class MotionEvent(sensorId: String, detectedAt: Long)\n\nval lastEvent: Option[MotionEvent] = None\nval isMotion = lastEvent.isDefined","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_115","timestamp":1745347541054,"code":"case class Thermostat(id: String, setPoint: Double)\n\ndef increaseTemperature(t: Thermostat, inc: Double): Thermostat =\n  t.copy(setPoint = t.setPoint + inc)\n\nval oldThermostat = Thermostat(\"t1\", 21.5)\nval newThermostat = increaseTemperature(oldThermostat, 1.0)","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_117","timestamp":1745347541054,"code":"case class SmartPlug(id: String, isOn: Boolean)\ndef togglePlug(plug: SmartPlug): SmartPlug = plug.copy(isOn = !plug.isOn)\nval plug = SmartPlug(\"plugA\", true)\nval toggled = togglePlug(plug)","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_119","timestamp":1745347541054,"code":"import scala.util.Try\n\ndef safeParseDouble(str: String): Option[Double] = Try(str.toDouble).toOption\nval humidity = safeParseDouble(\"45.2\")","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_121","timestamp":1745347541054,"code":"case class Camera(id: String, isRecording: Boolean)\ndef startRecording(camera: Camera): Option[Camera] =\n  Option.when(!camera.isRecording)(camera.copy(isRecording = true))\n\nval cam = Camera(\"c4\", isRecording = false)\nval maybeCam = startRecording(cam)","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_123","timestamp":1745347541054,"code":"case class Fan(id: String, speed: Int)\nval fan: Option[Fan] = Some(Fan(\"fan42\", 2))\nval fanSpeed = fan.map(_.speed).getOrElse(0)","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_125","timestamp":1745347541054,"code":"case class WifiDevice(\n  mac: String,\n  ip: Option[String],\n)\n\nval deviceWithIp = WifiDevice(\"AA:BB:CC:DD:EE:FF\", Some(\"192.168.0.5\"))\nval ipString = deviceWithIp.ip.getOrElse(\"No IP assigned\")","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_127","timestamp":1745347541054,"code":"case class DoorSensor(id: String, open: Boolean)\ndef displayDoorStatus(sensor: DoorSensor): String =\n  if sensor.open then \"Open\" else \"Closed\"\n\nval frontDoor = DoorSensor(\"front\", true)\nval status = displayDoorStatus(frontDoor)","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_129","timestamp":1745347541054,"code":"case class BatteryDevice(id: String, level: Option[Int])\ndef batteryStatus(dev: BatteryDevice): String =\n  dev.level match\n    case Some(value) if value < 20 => \"Low Battery\"\n    case Some(value) => s\"$value% Left\"\n    case None => \"Unknown\"\n\nval smokeAlarm = BatteryDevice(\"smoke1\", Some(15))","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_131","timestamp":1745347541054,"code":"def findDeviceByName(devices: List[Device], name: String): Option[Device] =\n  devices.find(_.name == name)\n\nval result = findDeviceByName(allDevices, \"KitchenLight\")","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_133","timestamp":1745347541054,"code":"import scala.util.Try\n\ndef parseSetPoint(str: String): Either[String, Double] =\n  Try(str.toDouble).toEither.left.map(_ => \"Invalid set point\")\n\nval setPoint = parseSetPoint(\"20.0\")","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_135","timestamp":1745347541054,"code":"case class Group(id: String, members: List[String])\n\ndef groupSize(g: Group): Int = g.members.size\n\nval lightingGroup = Group(\"light-group-1\", List(\"dev-1\", \"dev-2\"))","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_137","timestamp":1745347541054,"code":"case class Schedule(time: String, deviceId: String, action: String)\ndef nextSchedule(schedules: List[Schedule]): Option[Schedule] =\n  schedules.headOption\n\nval schedules = List(Schedule(\"08:00\", \"dev-1\", \"on\"))\nval upcoming = nextSchedule(schedules)","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_139","timestamp":1745347541054,"code":"case class SensorReading(deviceId: String, value: Either[String, Double])\ndef safeReading(sensor: SensorReading): Double =\n  sensor.value.getOrElse(0.0)\n\nval reading = SensorReading(\"sensor01\", Right(26.2))","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_121","timestamp":1745347555632,"code":"case class Location(lat: Double, lon: Double)\ncase class Rider(id: String, name: String, pickup: Location)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_123","timestamp":1745347555632,"code":"case class Driver(id: String, location: Location, available: Boolean)\ndef isDriverAvailable(driver: Driver): Boolean = driver.available","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_125","timestamp":1745347555632,"code":"def findClosestDriver(drivers: List[Driver], pickup: Location): Option[Driver] =\n  drivers.filter(_.available)\n    .sortBy(driver => distance(driver.location, pickup))\n    .headOption\n\ndef distance(a: Location, b: Location): Double =\n  math.hypot(a.lat - b.lat, a.lon - b.lon)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_127","timestamp":1745347555632,"code":"def parseLocation(input: String): Either[String, Location] =\n  input.split(\",\") match\n    case Array(lat, lon) =>\n      try Right(Location(lat.toDouble, lon.toDouble))\n      catch case _: NumberFormatException => Left(\"Invalid coordinates\")\n    case _ => Left(\"Input should be 'lat,lon'\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_129","timestamp":1745347555633,"code":"def assignDriver(rider: Rider, drivers: List[Driver]): Option[(Driver, Rider)] =\n  findClosestDriver(drivers, rider.pickup).map(driver => (driver, rider))","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_131","timestamp":1745347555633,"code":"case class RideRequest(rider: Rider, destination: Location)\ncase class RideAssignment(driver: Driver, request: RideRequest)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_133","timestamp":1745347555633,"code":"def getRiderById(riders: Map[String, Rider], id: String): Option[Rider] =\n  riders.get(id)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_135","timestamp":1745347555633,"code":"import scala.util.Try\ndef safeDriverStatus(status: String): Option[Boolean] =\n  status match\n    case \"available\" => Some(true)\n    case \"busy\" => Some(false)\n    case _ => None","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_137","timestamp":1745347555633,"code":"case class DispatchError(msg: String)\ndef dispatchRide(driverOpt: Option[Driver], request: RideRequest): Either[DispatchError, RideAssignment] =\n  driverOpt match\n    case Some(driver) if driver.available => Right(RideAssignment(driver, request))\n    case Some(_) => Left(DispatchError(\"Driver not available\"))\n    case None => Left(DispatchError(\"No suitable driver found\"))","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_139","timestamp":1745347555633,"code":"def cancelRide(rides: Map[String, RideAssignment], rideId: String): Option[Map[String, RideAssignment]] =\n  rides.get(rideId).map(_ => rides - rideId)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_141","timestamp":1745347555633,"code":"import scala.util.Try\ndef readFareEstimate(distanceKm: String): Try[Double] =\n  Try(distanceKm.toDouble * 1.5)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_143","timestamp":1745347555633,"code":"case class Vehicle(id: String, kind: String, seats: Int)\ndef suitableVehicles(vehicles: List[Vehicle], minSeats: Int): List[Vehicle] =\n  vehicles.filter(_.seats >= minSeats)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_145","timestamp":1745347555633,"code":"// Compose Option usage\ndef getPickupLocation(requestOpt: Option[RideRequest]): Option[Location] =\n  requestOpt.map(_.rider.pickup)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_147","timestamp":1745347555633,"code":"case class DispatchLog(message: String, time: Long)\ndef logAssignment(assignment: Either[DispatchError, RideAssignment]): DispatchLog =\n  assignment match\n    case Right(a) => DispatchLog(s\"Assigned driver ${a.driver.id}\", System.currentTimeMillis())\n    case Left(err) => DispatchLog(s\"Dispatch failed: ${err.msg}\", System.currentTimeMillis())","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_149","timestamp":1745347555633,"code":"def incrementCompletedRides(rides: Map[String, Int], driverId: String): Map[String, Int] =\n  rides.updatedWith(driverId) {\n    case Some(count) => Some(count + 1)\n    case None => Some(1)\n  }","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_151","timestamp":1745347555633,"code":"import scala.util.Try\ndef safeParseInt(str: String): Option[Int] =\n  Try(str.toInt).toOption","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_153","timestamp":1745347555633,"code":"def driverResponseTime(response: Option[Long]): Long =\n  response.getOrElse(30000L) // 30 seconds default","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_155","timestamp":1745347555633,"code":"case class Dispatcher(id: String, onDuty: Boolean)\ndef availableDispatchers(dispatchers: List[Dispatcher]): List[Dispatcher] =\n  dispatchers.filter(_.onDuty)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_157","timestamp":1745347555633,"code":"def notifyDriver(driverOpt: Option[Driver], message: String): Unit =\n  driverOpt.foreach(driver => println(s\"Notifying ${driver.id}: $message\"))","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_159","timestamp":1745347555633,"code":"case class WaitEstimate(seconds: Int)\ndef calculateWait(assignment: Option[RideAssignment]): Option[WaitEstimate] =\n  assignment.map(_ => WaitEstimate(180)) // fixed estimate for example","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_141","timestamp":1745347572225,"code":"case class Passenger(id: String, name: String, passportNumber: Option[String])\n\nval p1 = Passenger(\"001\", \"Alice Smith\", Some(\"P123456\"))\nval p2 = Passenger(\"002\", \"Bob Brown\", None)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_143","timestamp":1745347572225,"code":"def findFlightByNumber(flights: List[Flight], flightNum: String): Option[Flight] =\n  flights.find(_.flightNumber == flightNum)\n\ncase class Flight(flightNumber: String, origin: String, destination: String)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_145","timestamp":1745347572225,"code":"def parseSeatNumber(input: String): Option[Int] =\n  input.toIntOption.filter(_ > 0)\n\nval seatOpt = parseSeatNumber(\"12A\") // None since it's not a valid int\nval seatValid = parseSeatNumber(\"16\") // Some(16)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_147","timestamp":1745347572225,"code":"case class Ticket(id: String, passenger: Passenger, seat: Option[Int])\n\ndef assignSeat(ticket: Ticket, seat: Int): Ticket =\n  ticket.copy(seat = Some(seat))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_149","timestamp":1745347572225,"code":"import scala.util.Try\n\ndef parseFare(input: String): Try[Double] =\n  Try(input.toDouble)\n\nval good = parseFare(\"350.0\")    // Success(350.0)\nval bad = parseFare(\"notANum\")    // Failure(java.lang.NumberFormatException)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_151","timestamp":1745347572225,"code":"def printPassengerSeat(ticket: Ticket): String =\n  ticket.seat match\n    case Some(seat) => s\"Seat: $seat\"\n    case None => \"Seat not assigned\"\n\nval str = printPassengerSeat(Ticket(\"T01\", p1, None))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_153","timestamp":1745347572225,"code":"case class Booking(id: String, confirmed: Boolean)\nval maybeBooking: Option[Booking] = Some(Booking(\"B01\", confirmed = true))\n\nval bookingStatus = maybeBooking.map(_.confirmed).getOrElse(false)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_155","timestamp":1745347572226,"code":"import scala.util.Try\n\ndef calculateTotalPrice(tickets: List[Ticket], pricePerTicket: String): Try[Double] =\n  Try(pricePerTicket.toDouble * tickets.length)\n\nval result = calculateTotalPrice(List(Ticket(\"T01\", p1, None)), \"200.50\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_157","timestamp":1745347572226,"code":"case class FlightSchedule(flight: Flight, departureTime: Option[String], arrivalTime: Option[String])\n\ndef showSchedule(fs: FlightSchedule): String =\n  s\"Departs at ${fs.departureTime.getOrElse(\"TBD\")} and arrives at ${fs.arrivalTime.getOrElse(\"TBD\")}\"","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_159","timestamp":1745347572226,"code":"def safeGetBooking(bookingId: String, bookings: Map[String, Booking]): Either[String, Booking] =\n  bookings.get(bookingId).toRight(s\"Booking with id $bookingId not found\")\n\nval bookings = Map(\"B01\" -> Booking(\"B01\", true))\nval res = safeGetBooking(\"B02\", bookings)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_161","timestamp":1745347572226,"code":"def upgradePassenger(passenger: Passenger, currentClass: Option[String]): Option[String] =\n  currentClass match\n    case Some(\"Economy\") => Some(\"Business\")\n    case Some(\"Business\") => Some(\"First\")\n    case _ => None","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_163","timestamp":1745347572226,"code":"case class Fare(base: Double, taxes: Double, discounts: Option[Double])\ndef totalFare(fare: Fare): Double =\n  fare.base + fare.taxes - fare.discounts.getOrElse(0.0)\n\nval f = Fare(500.0, 80.0, Some(20.0))\nval total = totalFare(f)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_165","timestamp":1745347572226,"code":"import scala.util.Try\ncase class BoardingPass(ticketId: String, gate: String)\ndef generateBoardingPass(ticketId: String, gate: String): Try[BoardingPass] =\n  if gate.nonEmpty then Try(BoardingPass(ticketId, gate))\n  else scala.util.Failure(new Exception(\"Gate is missing\"))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_167","timestamp":1745347572226,"code":"case class FrequentFlyer(memberId: String, miles: Int)\ndef tryAddMiles(ff: Option[FrequentFlyer], milesToAdd: Int): Option[FrequentFlyer] =\n  ff.map(f => f.copy(miles = f.miles + milesToAdd))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_169","timestamp":1745347572226,"code":"def getCheckedBags(bags: Option[Int]): Int =\n  bags.getOrElse(0)\n\nval bags1 = getCheckedBags(Some(2)) // 2\nval bags2 = getCheckedBags(None)    // 0","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_171","timestamp":1745347572226,"code":"case class FlightRoute(origin: String, destination: String)\nval maybeRoute: Option[FlightRoute] = None\n\ndef showRoute(route: Option[FlightRoute]): String =\n  route.map(r => s\"${r.origin} -> ${r.destination}\").getOrElse(\"Route unknown\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_173","timestamp":1745347572226,"code":"import scala.util.Try\n\ndef tryParseBookingDate(str: String): Either[String, java.time.LocalDate] =\n  Try(java.time.LocalDate.parse(str)).toEither.left.map(_ => s\"Invalid date: $str\")\n\nval date = tryParseBookingDate(\"2023-05-01\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_175","timestamp":1745347572226,"code":"case class CheckIn(passenger: Passenger, checkedIn: Boolean)\ndef checkIn(passenger: Passenger, isAlreadyCheckedIn: Boolean): Either[String, CheckIn] =\n  if !isAlreadyCheckedIn then Right(CheckIn(passenger, true))\n  else Left(s\"Passenger ${passenger.name} already checked in\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_177","timestamp":1745347572226,"code":"def getMealPreference(passengerName: String, mealPrefs: Map[String, String]): Option[String] =\n  mealPrefs.get(passengerName)\n\nval pref = getMealPreference(\"Alice Smith\", Map(\"Alice Smith\" -> \"Vegetarian\"))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_179","timestamp":1745347572226,"code":"case class FlightCrew(pilot: String, coPilot: Option[String], attendants: List[String])\nval crew = FlightCrew(\"Captain Jane\", None, List(\"Attendant Mike\", \"Attendant Sara\"))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_161","timestamp":1745347587579,"code":"case class Guest(name: String, email: String, phone: Option[String])\n\nval guest1 = Guest(\"Alice Smith\", \"alice@example.com\", Some(\"123-456-7890\"))\nval guest2 = Guest(\"Bob Jones\", \"bob@example.com\", None)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_163","timestamp":1745347587579,"code":"case class Room(number: Int, roomType: String, isBooked: Boolean)\n\nval rooms = List(\n  Room(101, \"Single\", false),\n  Room(102, \"Double\", true),\n  Room(103, \"Suite\", false)\n)\nval availableRooms = rooms.filter(!_.isBooked)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_165","timestamp":1745347587579,"code":"def findGuestByEmail(email: String, guests: List[Guest]): Option[Guest] =\n  guests.find(_.email == email)\n\nval maybeGuest = findGuestByEmail(\"alice@example.com\", List(guest1, guest2))\nval guestName = maybeGuest.map(_.name).getOrElse(\"Unknown Guest\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_167","timestamp":1745347587579,"code":"import scala.util.Try\n\ndef parseRoomNumber(input: String): Try[Int] =\n  Try(input.toInt)\n\nval result = parseRoomNumber(\"105\")\nresult.foreach(n => println(s\"Room number is $n\"))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_169","timestamp":1745347587579,"code":"case class Reservation(guest: Guest, room: Room, nights: Int)\n\ndef totalCost(res: Reservation, pricePerNight: Double): Double =\n  res.nights * pricePerNight","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_171","timestamp":1745347587579,"code":"import scala.util.{Try, Success, Failure}\n\ndef parseGuest(data: String): Either[String, Guest] = {\n  data.split(',') match\n    case Array(name, email) => Right(Guest(name.trim, email.trim, None))\n    case _ => Left(\"Invalid data format for Guest\")\n}\n\nval guestOrError = parseGuest(\"Charlie, charlie@example.com\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_173","timestamp":1745347587579,"code":"def getPhone(guest: Guest): String =\n  guest.phone.getOrElse(\"No phone number provided\")\n\nval phone = getPhone(guest2)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_175","timestamp":1745347587579,"code":"def bookRoom(room: Room): Either[String, Room] =\n  if room.isBooked then Left(\"Room already booked.\")\n  else Right(room.copy(isBooked = true))\n\nval bookingResult = bookRoom(rooms.head)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_177","timestamp":1745347587579,"code":"def findRoom(number: Int, rooms: List[Room]): Option[Room] =\n  rooms.find(_.number == number)\n\nfindRoom(102, rooms) match\n  case Some(room) => println(s\"Room ${room.number} is found.\")\n  case None => println(\"Room not found.\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_179","timestamp":1745347587579,"code":"case class Payment(amount: Double, currency: String, payer: Guest)\n\nval payment = Payment(399.0, \"USD\", guest1)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_181","timestamp":1745347587579,"code":"import scala.util.Try\n\ndef parseReservationNights(input: String): Option[Int] =\n  Try(input.toInt).toOption\n\nval nightsOpt = parseReservationNights(\"3\") // Some(3)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_183","timestamp":1745347587580,"code":"case class Hotel(name: String, address: String, rooms: List[Room])\n\nval hotel = Hotel(\"Scala Lodge\", \"42 Functional Blvd\", rooms)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_185","timestamp":1745347587580,"code":"def getGuestPhoneOpt(guest: Option[Guest]): Option[String] =\n  guest.flatMap(_.phone)\n\nval somePhone = getGuestPhoneOpt(maybeGuest)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_187","timestamp":1745347587580,"code":"def safeTotalCost(nights: Option[Int], pricePerNight: Double): Option[Double] =\n  nights.map(_ * pricePerNight)\n\nval cost = safeTotalCost(Some(4), 120.0) // Some(480.0)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_189","timestamp":1745347587580,"code":"def cancelReservation(resOpt: Option[Reservation]): Either[String, Reservation] =\n  resOpt.toRight(\"Reservation not found, cannot cancel.\")\n\nval cancelResult = cancelReservation(None)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_191","timestamp":1745347587580,"code":"def upgradeRoom(room: Room): Room =\n  val upgradedType = room.roomType match\n    case \"Single\" => \"Double\"\n    case \"Double\" => \"Suite\"\n    case other => other\n  room.copy(roomType = upgradedType)\n\nval upgraded = upgradeRoom(Room(201, \"Single\", false))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_193","timestamp":1745347587580,"code":"import scala.util.Try\n\ndef parsePrice(input: String): Either[String, Double] =\n  Try(input.toDouble).toEither.left.map(_ => s\"Invalid price: $input\")\n\nval price = parsePrice(\"199.99\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_195","timestamp":1745347587580,"code":"case class Address(street: String, city: String, country: String)\n\ncase class HotelWithAddress(name: String, address: Address)\n\nval address = Address(\"123 Scala St\", \"FP City\", \"Scalaland\")\nval hotelWithAddress = HotelWithAddress(\"Pure Hotel\", address)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_197","timestamp":1745347587580,"code":"def assignRoomToGuest(roomOpt: Option[Room], guest: Guest): Either[String, Reservation] =\n  roomOpt match\n    case Some(room) if !room.isBooked => Right(Reservation(guest, room.copy(isBooked=true), 2))\n    case Some(_) => Left(\"Room is already booked.\")\n    case None => Left(\"Room not found.\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_199","timestamp":1745347587580,"code":"// Composing Option and Either\n\ndef findAvailableRoom(rooms: List[Room]): Option[Room] =\n  rooms.find(!_.isBooked)\n\ndef reserveAvailable(roomOpt: Option[Room], guest: Guest): Either[String, Reservation] =\n  for room <- roomOpt.toRight(\"No rooms available\")\n  yield Reservation(guest, room.copy(isBooked=true), 1)\n\nval availRoom = findAvailableRoom(rooms)\nval reservation = reserveAvailable(availRoom, guest1)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_181","timestamp":1745347605194,"code":"// 1. Simple case class for a Delivery Address\ncase class Address(street: String, city: String, postalCode: String)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_183","timestamp":1745347605194,"code":"// 2. Option usage for possible missing customer instructions\ndef getSpecialInstructions(orderId: Int): Option[String] =\n  if orderId % 2 == 0 then Some(\"Leave at the door\") else None","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_185","timestamp":1745347605194,"code":"// 3. Pattern matching for missing delivery driver\nval assignedDriver: Option[String] = None\nval status = assignedDriver match\n  case Some(name) => s\"Driver assigned: $name\"\n  case None       => \"No driver assigned yet\"","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_187","timestamp":1745347605194,"code":"// 4. Case class for Food Item\ncase class FoodItem(name: String, vegetarian: Boolean, price: Double)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_189","timestamp":1745347605194,"code":"// 5. Try for parsing delivery estimate\nimport scala.util.Try\ndef parseDeliveryEstimate(s: String): Try[Int] = Try(s.toInt)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_191","timestamp":1745347605194,"code":"// 6. Option and map to update address\ndef updateAddress(addr: Option[Address], city: String): Option[Address] =\n  addr.map(a => a.copy(city = city))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_193","timestamp":1745347605194,"code":"// 7. Either for validating payment\nsealed trait PaymentError; case object CardDeclined extends PaymentError\n\ndef validatePayment(amount: Double): Either[PaymentError, String] =\n  if amount > 0 then Right(\"Payment successful\") else Left(CardDeclined)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_195","timestamp":1745347605194,"code":"// 8. Case class for Delivery with optional time window\ncase class Delivery(orderId: Int, address: Address, timeWindow: Option[(String, String)])","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_197","timestamp":1745347605194,"code":"// 9. Recoverable error with Try for GPS coordinate parsing\nimport scala.util.Try\ncase class Coordinate(lat: Double, lon: Double)\ndef parseCoordinate(input: String): Try[Coordinate] =\n  Try {\n    val parts = input.split(\",\")\n    Coordinate(parts(0).toDouble, parts(1).toDouble)\n  }","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_199","timestamp":1745347605194,"code":"// 10. Option fallback with getOrElse\nval maybeContactNumber: Option[String] = None\nval contact = maybeContactNumber.getOrElse(\"Unknown contact number\") // fallback","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_201","timestamp":1745347605194,"code":"// 11. Pattern matching on Option for delivery notes\nval notes: Option[String] = Some(\"Ring bell once\")\nnotes match\n  case Some(n) => println(s\"Notes: $n\")\n  case None    => println(\"No notes provided\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_203","timestamp":1745347605195,"code":"// 12. Simple immutable data structure for a restaurant\ncase class Restaurant(name: String, address: Address, rating: Double)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_205","timestamp":1745347605195,"code":"// 13. Combining Option and Either for updating delivery status\ndef updateStatus(orderId: Int, newStatus: Option[String]): Either[String, String] =\n  newStatus match\n    case Some(status) => Right(s\"Order $orderId status updated to $status\")\n    case None         => Left \"No status update provided\"","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_207","timestamp":1745347605195,"code":"// 14. List food items and sum prices using map/Option\nval items = List(FoodItem(\"Pizza\", false, 12.99), FoodItem(\"Salad\", true, 7.99))\nval total = items.map(_.price).sum","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_209","timestamp":1745347605195,"code":"// 15. Optional delivery tip\nval tip: Option[Double] = Some(3.0)\nval formattedTip = tip.map(t => f\"Tip: $$${t}%.2f\").getOrElse(\"No tip included\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_211","timestamp":1745347605195,"code":"// 16. Try for parsing customer input and handling failure\ndef parseOrderId(input: String): Either[String, Int] =\n  scala.util.Try(input.toInt).toEither.left.map(_ => s\"Invalid order ID: $input\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_213","timestamp":1745347605195,"code":"// 17. Option and flatten for extracting optional delivery time\ncase class Order(id: Int, deliveryTime: Option[String])\nval o = Order(17, Some(\"19:45\"))\no.deliveryTime match\n  case Some(time) => println(s\"Expected delivery: $time\")\n  case None       => println(\"No estimated delivery time yet\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_215","timestamp":1745347605195,"code":"// 18. Either for estimated distance calculation\nimport scala.util.Try\ndef estimateDistance(start: Coordinate, end: Coordinate): Either[String, Double] =\n  if start != end then Right(Math.abs(start.lat - end.lat) + Math.abs(start.lon - end.lon))\n  else Left(\"Origin and destination are identical\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_217","timestamp":1745347605195,"code":"// 19. case class and Option in menu lookup\ndef findMenuItem(menu: List[FoodItem], name: String): Option[FoodItem] =\n  menu.find(_.name == name)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_219","timestamp":1745347605195,"code":"// 20. Chained Option: get delivery driver phone number\ncase class Driver(name: String, phone: Option[String])\ndef getPhone(driver: Option[Driver]): String =\n  driver.flatMap(_.phone).getOrElse(\"No phone on file\")\n","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_201","timestamp":1745347633400,"code":"case class Song(id: String, title: String, artist: String)\ndef findSong(songs: List[Song], title: String): Option[Song] =\n  songs.find(_.title == title)\n\nval songLibrary = List(\n  Song(\"1\", \"Sunset\", \"DJ Aura\"),\n  Song(\"2\", \"Starlight\", \"Nova\")\n)\nval maybeSong = findSong(songLibrary, \"Sunset\")\nprintln(maybeSong.getOrElse(\"Song not found\"))\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_203","timestamp":1745347633400,"code":"import scala.util.Try\n\ndef parseDuration(str: String): Try[Int] =\n  Try(str.toInt)\n\nval durations = List(\"200\", \"abc\", \"350\")\nval results = durations.map(parseDuration)\nresults.foreach(println)\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_205","timestamp":1745347633401,"code":"case class Playlist(name: String, songs: List[String])\n\ndef findPlaylist(playlists: List[Playlist], name: String): Option[Playlist] =\n  playlists.find(_.name == name)\n\nval p = Playlist(\"Chill\", List(\"Sunset\", \"Moonlight\"))\nfindPlaylist(List(p), \"Focus\") match\n  case Some(pl) => println(s\"Found playlist: ${pl.name}\")\n  case None     => println(\"Playlist not found\")\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_207","timestamp":1745347633401,"code":"case class User(id: String, username: String, premium: Boolean)\ndef isPremium(userOpt: Option[User]): Boolean =\n  userOpt.map(_.premium).getOrElse(false)\n\nval user1 = Some(User(\"u1\", \"meloplayer\", true))\nprintln(isPremium(user1)) // true\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_209","timestamp":1745347633401,"code":"import scala.util.Try\n\ndef getBitrate(str: String): Either[String, Int] =\n  Try(str.toInt).toEither.left.map(_ => s\"Invalid bitrate: $str\")\n\nprintln(getBitrate(\"320\"))   // Right(320)\nprintln(getBitrate(\"fast\"))  // Left(Invalid bitrate: fast)\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_211","timestamp":1745347633401,"code":"case class Album(title: String, year: Int, songs: Option[List[Song]])\nval emptyAlbum = Album(\"Quiet\", 2023, None)\nval hasSongs = Album(\"Loud\", 2024, Some(List(Song(\"3\", \"Bassline\", \"Yuna\"))))\nval numberOfSongs = hasSongs.songs.map(_.size).getOrElse(0)\nprintln(numberOfSongs) // 1\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_213","timestamp":1745347633401,"code":"case class StreamQuality(bitrate: Int, format: String)\ndef supportedFormat(fmt: String): Option[StreamQuality] =\n  if fmt == \"mp3\" then Some(StreamQuality(320, \"mp3\"))\n  else None\n\nprintln(supportedFormat(\"aac\").getOrElse(StreamQuality(128, \"aac\")))\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_215","timestamp":1745347633401,"code":"import scala.util.Try\n\ndef safeVolumeChange(current: Int, change: String): Try[Int] =\n  Try(current + change.toInt)\n\nprintln(safeVolumeChange(50, \"+10\")) // Failure, format issue\nprintln(safeVolumeChange(50, \"10\"))  // Success\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_217","timestamp":1745347633401,"code":"case class Device(id: String, name: String, online: Boolean)\nval devices = List(Device(\"d1\", \"Phone\", true), Device(\"d2\", \"Tablet\", false))\ndef findOnlineDevice(devices: List[Device]): Option[Device] =\n  devices.find(_.online)\nprintln(findOnlineDevice(devices).map(_.name).getOrElse(\"No device online\"))\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_219","timestamp":1745347633401,"code":"case class Artist(name: String, genre: Option[String])\nval ar = Artist(\"Chronos\", None)\nval genreInfo = ar.genre.getOrElse(\"Unknown genre\")\nprintln(s\"Genre: $genreInfo\")\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_221","timestamp":1745347633402,"code":"import scala.util.{Try, Success, Failure}\n\ndef loadPlaylistFromFile(filePath: String): Try[List[String]] = Try {\n  // Mock: pretend we read song names from file\n  if filePath.endsWith(\".m3u\") then List(\"song1\", \"song2\") else throw new Exception(\"unsupported format\")\n}\n\nloadPlaylistFromFile(\"main.m3u\") match\n  case Success(songs) => println(s\"Loaded: $songs\")\n  case Failure(e)     => println(s\"Error: ${e.getMessage}\")\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_223","timestamp":1745347633402,"code":"def getAlbumYear(album: Option[Album]): Int =\n  album.map(_.year).getOrElse(0)\n\nprintln(getAlbumYear(None))                    // 0\nprintln(getAlbumYear(Some(Album(\"Zen\", 2020, None)))) // 2020\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_225","timestamp":1745347633402,"code":"def startStreaming(song: Option[Song]): Either[String, String] =\n  song match\n    case Some(s) => Right(s\"Streaming ${s.title}\")\n    case None    => Left(\"Song not found\")\n\nprintln(startStreaming(None))\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_227","timestamp":1745347633402,"code":"case class ListeningHistory(userId: String, songs: List[Song])\ndef recentSong(history: ListeningHistory): Option[Song] =\n  history.songs.lastOption\n\nval lh = ListeningHistory(\"u1\", List())\nprintln(recentSong(lh).map(_.title).getOrElse(\"No songs played yet\"))\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_229","timestamp":1745347633402,"code":"case class SearchResult(song: Option[Song], error: Option[String])\ndef performSearch(query: String): SearchResult =\n  if query.trim.isEmpty then SearchResult(None, Some(\"Empty query\"))\n  else if query == \"Sunset\" then SearchResult(Some(Song(\"1\", \"Sunset\", \"Aura\")), None)\n  else SearchResult(None, Some(\"Song not found\"))\n\nval res = performSearch(\"\")\nprintln(res.error.getOrElse(\"Found: \" + res.song.map(_.title).getOrElse(\"<none>\")))\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_231","timestamp":1745347633402,"code":"case class UserPreferences(volume: Int, theme: Option[String])\nval pref = UserPreferences(80, None)\nval themeUsed = pref.theme.getOrElse(\"dark\")\nprintln(s\"Theme: $themeUsed\")\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_233","timestamp":1745347633402,"code":"import scala.util.Try\n\ndef parsePlaybackPosition(str: String): Option[Int] =\n  Try(str.toInt).toOption\n\nprintln(parsePlaybackPosition(\"60\"))\nprintln(parsePlaybackPosition(\"oops\"))\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_235","timestamp":1745347633402,"code":"case class StreamError(code: Int, message: String)\ndef tryConnect(server: String): Either[StreamError, String] =\n  if server == \"main\" then Right(\"Connected\")\n  else Left(StreamError(404, \"Server not found\"))\n\nprintln(tryConnect(\"backup\"))\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_237","timestamp":1745347633402,"code":"case class Queue(tracks: List[Song])\ndef nextUp(q: Queue): Option[Song] =\n  q.tracks.headOption\n\nval q = Queue(Nil)\nprintln(nextUp(q).map(_.title).getOrElse(\"Queue is empty\"))\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_239","timestamp":1745347633402,"code":"case class Subscription(level: String, expires: Option[String])\nval sub = Subscription(\"premium\", Some(\"2024-12-31\"))\nval expiryMsg = sub.expires.map(e => s\"Expires on $e\").getOrElse(\"No expiry date\")\nprintln(expiryMsg)\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_241","timestamp":1745347633402,"code":"import scala.util.Try\n\ndef safeFilter(query: String): Option[String] =\n  Option(query).filter(_.nonEmpty)\n\nprintln(safeFilter(\"rock\"))      // Some(\"rock\")\nprintln(safeFilter(\"\").isEmpty) // true\n","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_222","timestamp":1745347647175,"code":"// 1. Simple case class for a Tutor\ncase class Tutor(id: Int, name: String, subjects: List[String])","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_224","timestamp":1745347647175,"code":"// 2. Finding a student by email with Option\nval students = List(\"alice@example.com\", \"bob@example.com\")\ndef findStudent(email: String): Option[String] =\n  students.find(_ == email)\n\nfindStudent(\"alice@example.com\").getOrElse(\"Not found\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_226","timestamp":1745347647175,"code":"// 3. Composing Option with .map: getting profile image URL\ncase class Student(name: String, profileImageUrl: Option[String])\ndef profileImage(student: Student): String =\n  student.profileImageUrl.map(url => s\"/img/$url\").getOrElse(\"/img/default.png\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_228","timestamp":1745347647175,"code":"// 4. Using pattern matching with Option for a session description\ncase class Session(description: Option[String])\ndef printSession(s: Session) = s.description match\n  case Some(desc) => println(s\"Session: $desc\")\n  case None => println(\"No description available.\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_230","timestamp":1745347647175,"code":"// 5. Try for parsing duration from input\nimport scala.util.{Try, Success, Failure}\ndef parseDuration(input: String): Try[Int] = Try(input.toInt)\nparseDuration(\"60\") match\n  case Success(minutes) => println(s\"Duration: $minutes min\")\n  case Failure(_)      => println(\"Invalid duration format\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_232","timestamp":1745347647175,"code":"// 6. Either for booking result\ncase class Booking(studentId: Int, sessionId: Int)\ndef bookSession(studentId: Int, sessionId: Int): Either[String, Booking] =\n  if studentId > 0 && sessionId > 0 then Right(Booking(studentId, sessionId))\n  else Left(\"Invalid IDs\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_234","timestamp":1745347647175,"code":"// 7. Option composition: Fetching an available timeslot\nval availableSlots: Map[String, String] = Map(\n  \"tutor1\" -> \"10:00-11:00\",\n  \"tutor2\" -> \"12:00-13:00\"\n)\ndef slotForTutor(tutor: String): Option[String] = availableSlots.get(tutor)","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_236","timestamp":1745347647175,"code":"// 8. Chained Option operations: Get subject from session\ncase class Subject(name: String)\ncase class SessionInfo(subject: Option[Subject])\ndef subjectName(session: SessionInfo): String =\n  session.subject.map(_.name).getOrElse(\"Unknown subject\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_238","timestamp":1745347647175,"code":"// 9. Using pattern matching with Either\nval paymentResult: Either[String, Double] = Right(29.99)\npaymentResult match\n  case Right(amount) => println(f\"Paid $$${amount}%.2f successfully!\")\n  case Left(err)     => println(s\"Payment failed: $err\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_240","timestamp":1745347647175,"code":"// 10. Defining a SessionRequest case class\ncase class SessionRequest(studentEmail: String, tutorId: Int, topic: String)","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_242","timestamp":1745347647176,"code":"// 11. Use of Option for optional rating in a review\ncase class Review(text: String, rating: Option[Int])\ndef describeReview(review: Review) = review.rating match\n  case Some(r) => println(s\"Review: ${review.text} (Rating: $r)\")\n  case None    => println(s\"Review: ${review.text} (No rating)\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_244","timestamp":1745347647176,"code":"// 12. Try to handle recoverable CSV parsing error for student data\nimport scala.util.Try\ndef parseStudentCsv(csv: String): Try[Student] = Try {\n  val cols = csv.split(\",\")\n  Student(cols(0), if cols(1).isEmpty then None else Some(cols(1)))\n}","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_246","timestamp":1745347647176,"code":"// 13. A simple immutable data aggregate for chat messages\ncase class ChatMessage(senderId: Int, message: String, timestamp: Long)","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_248","timestamp":1745347647176,"code":"// 14. Option for last login timestamp\ncase class User(name: String, lastLogin: Option[Long])\ndef printLastLogin(user: User) = user.lastLogin match\n  case Some(ts) => println(s\"Last login: $ts\")\n  case None     => println(\"Never logged in\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_250","timestamp":1745347647176,"code":"// 15. Combining Option and map to uppercase a tutor's display name if present\ncase class TutorProfile(displayName: Option[String])\ndef displayNameUpper(profile: TutorProfile): String =\n  profile.displayName.map(_.toUpperCase).getOrElse(\"ANONYMOUS\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_252","timestamp":1745347647176,"code":"// 16. Using Either for uploading teaching materials\ncase class Material(filename: String)\ndef uploadMaterial(name: String): Either[String, Material] =\n  if name.endsWith(\".pdf\") then Right(Material(name))\n  else Left(\"Only PDF files accepted\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_254","timestamp":1745347647176,"code":"// 17. Try for network call simulation fetching lesson plan\nimport scala.util.Try\ndef fetchLessonPlan(sessionId: Int): Try[String] = Try {\n  if sessionId > 0 then s\"Lesson plan for $sessionId\" else throw new Exception(\"Session not found\")\n}","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_256","timestamp":1745347647176,"code":"// 18. Option with flatMap chaining: Looking up a scheduled session for a user\nval userSessions: Map[Int, Int] = Map(1 -> 101)\nval sessionDetails: Map[Int, String] = Map(101 -> \"Math Lesson\")\ndef getUserSessionDetails(userId: Int): Option[String] =\n  userSessions.get(userId).flatMap(sessionDetails.get)","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_258","timestamp":1745347647176,"code":"// 19. case class and Option for representing an assignment with optional submission\ndefault val noSubmission = None\ncase class Assignment(title: String, submission: Option[String])","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_260","timestamp":1745347647176,"code":"// 20. Safe division using Either in grading calculations\ndef calculateGrade(score: Int, max: Int): Either[String, Double] =\n  if max == 0 then Left(\"Max score can't be zero\")\n  else Right(score.toDouble / max * 100)","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_242","timestamp":1745347660218,"code":"case class Address(city: String, street: String, zipCode: Option[String])\nval a = Address(\"San Francisco\", \"Market St\", None)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_244","timestamp":1745347660218,"code":"case class Listing(id: String, price: Option[Int], bedrooms: Int)\nval l1 = Listing(\"A1\", Some(1000000), 2)\nval priceOrDefault = l1.price.getOrElse(0)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_246","timestamp":1745347660218,"code":"def parsePrice(price: String): Either[String, Int] =\n  try Right(price.toInt)\n  catch case _: NumberFormatException => Left(\"Invalid price format\")\n\nval result = parsePrice(\"notanumber\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_248","timestamp":1745347660218,"code":"case class Agent(name: String, email: Option[String])\nval agentInfo = Agent(\"Alice\", Some(\"alice@email.com\"))\nval email: String = agentInfo.email.getOrElse(\"No email provided\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_250","timestamp":1745347660218,"code":"case class Listing(id: String, description: Option[String])\ndef descriptionPreview(listing: Listing): String =\n  listing.description.map(_.take(50)).getOrElse(\"No description\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_252","timestamp":1745347660219,"code":"case class Location(lat: Double, lon: Double)\ndef parseLocation(latStr: String, lonStr: String): Try[Location] =\n  import scala.util.Try\n  for\n    lat <- Try(latStr.toDouble)\n    lon <- Try(lonStr.toDouble)\n  yield Location(lat, lon)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_254","timestamp":1745347660219,"code":"case class PropertyType(name: String)\ndef filterByType(listings: Seq[Listing], propertyType: Option[String]): Seq[Listing] =\n  propertyType match\n    case Some(t) => listings.filter(_.description.exists(_.contains(t)))\n    case None    => listings","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_256","timestamp":1745347660219,"code":"case class Photo(url: String, caption: Option[String])\nval photo = Photo(\"img.jpg\", None)\nphoto.caption.foreach(c => println(s\"Photo caption: $c\"))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_258","timestamp":1745347660219,"code":"case class SearchCriteria(city: Option[String], minPrice: Option[Int], maxPrice: Option[Int])\n\nval c = SearchCriteria(None, Some(500000), None)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_260","timestamp":1745347660219,"code":"case class Listing(id: String, squareFeet: Option[Int])\nval l = Listing(\"B2\", None)\nl.squareFeet match\n  case Some(sf) => println(s\"Size: $sf sqft\")\n  case None     => println(\"Square feet unknown\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_262","timestamp":1745347660219,"code":"import scala.util.Try\ncase class Listing(id: String, price: Int)\ndef safeDividePrice(l: Listing, divisor: Int): Try[Int] =\n  Try(l.price / divisor)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_264","timestamp":1745347660219,"code":"case class Listing(id: String, price: Option[Int])\ndef discountPrice(l: Listing, discount: Int): Option[Int] =\n  l.price.map(_ - discount)\n\ndiscountPrice(Listing(\"C3\", None), 10000)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_266","timestamp":1745347660219,"code":"case class Amenity(name: String)\ncase class Listing(id: String, amenities: Option[List[Amenity]])\nval l = Listing(\"X5\", Some(List(Amenity(\"Pool\"), Amenity(\"Gym\"))))\nl.amenities.getOrElse(List.empty).foreach(a => println(a.name))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_268","timestamp":1745347660219,"code":"case class City(name: String)\ndef findCity(nameOpt: Option[String]): Either[String, City] =\n  nameOpt match\n    case Some(name) => Right(City(name))\n    case None       => Left(\"No city provided\")\n\nfindCity(Some(\"Miami\"))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_270","timestamp":1745347660219,"code":"case class Listing(id: String, hasGarage: Boolean)\ndef filterWithGarage(listings: Seq[Listing]): Seq[Listing] =\n  listings.filter(_.hasGarage)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_272","timestamp":1745347660219,"code":"case class Listing(id: String, agent: Option[Agent])\ndef agentName(l: Listing): Option[String] =\n  l.agent.flatMap(_.email)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_274","timestamp":1745347660219,"code":"def safeMaxPrice(prices: Seq[Int]): Option[Int] =\n  if prices.isEmpty then None else Some(prices.max)\nsafeMaxPrice(Seq.empty)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_276","timestamp":1745347660219,"code":"case class Listing(id: String, description: Option[String])\ndef printDescriptionSummary(l: Listing): Unit =\n  l.description.foreach(d => println(d.take(30)))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_278","timestamp":1745347660219,"code":"case class Address(city: String, postalCode: Option[String])\ndef formatAddress(a: Address): String =\n  s\"${a.city}, ${a.postalCode.getOrElse(\"No postal code\")}\"","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_280","timestamp":1745347660219,"code":"case class Listing(id: String, price: Option[Int])\ndef isAffordable(l: Listing, budget: Int): Boolean =\n  l.price.exists(_ <= budget)\n\nisAffordable(Listing(\"G7\", Some(700000)), 800000)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_262","timestamp":1745347669917,"code":"case class Wallet(address: String, balance: BigDecimal)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_264","timestamp":1745347669917,"code":"def findWalletByAddress(address: String, wallets: List[Wallet]): Option[Wallet] =\n  wallets.find(_.address == address)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_266","timestamp":1745347669918,"code":"def getBalance(wallet: Option[Wallet]): BigDecimal =\n  wallet.map(_.balance).getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_268","timestamp":1745347669918,"code":"case class Transaction(from: String, to: String, amount: BigDecimal)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_270","timestamp":1745347669918,"code":"def sendFunds(wallet: Wallet, to: String, amount: BigDecimal): Either[String, Transaction] =\n  if amount > wallet.balance then Left(\"Insufficient funds\")\n  else Right(Transaction(wallet.address, to, amount))","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_272","timestamp":1745347669918,"code":"def parseAmount(s: String): Either[String, BigDecimal] =\n  try Right(BigDecimal(s))\n  catch case _: NumberFormatException => Left(\"Invalid amount format\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_274","timestamp":1745347669918,"code":"case class WalletInfo(owner: String, address: String, created: Long)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_276","timestamp":1745347669918,"code":"def getPrimaryWallet(owner: String, wallets: List[WalletInfo]): Option[WalletInfo] =\n  wallets.filter(_.owner == owner).headOption","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_278","timestamp":1745347669918,"code":"import scala.util.Try\n\ndef decodeWalletAddress(s: String): Try[String] =\n  Try(java.util.Base64.getDecoder.decode(s).map(_.toChar).mkString)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_280","timestamp":1745347669918,"code":"def showWallet(wallet: Option[Wallet]): String =\n  wallet.map(w => s\"Address: ${w.address}, Balance: ${w.balance}\").getOrElse(\"No wallet found\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_282","timestamp":1745347669918,"code":"case class EncryptedPrivateKey(address: String, encrypted: String)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_284","timestamp":1745347669918,"code":"def decryptPrivateKey(enc: EncryptedPrivateKey, passphrase: String): Either[String, String] =\n  if passphrase == \"secret\" then Right(\"decryptedKey123\")\n  else Left(\"Invalid passphrase\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_286","timestamp":1745347669918,"code":"def safeWithdraw(wallet: Wallet, amount: BigDecimal): Option[Wallet] =\n  if amount <= wallet.balance then Some(wallet.copy(balance = wallet.balance - amount))\n  else None","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_288","timestamp":1745347669918,"code":"case class WalletLabel(address: String, label: Option[String])","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_290","timestamp":1745347669918,"code":"def getWalletLabel(label: Option[String]): String =\n  label.getOrElse(\"Unlabeled wallet\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_292","timestamp":1745347669919,"code":"import scala.util.Try\n\ndef loadWalletFromFile(path: String): Try[Wallet] =\n  Try(Wallet(\"addr123\", BigDecimal(1.234))) // placeholder for file I/O","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_294","timestamp":1745347669919,"code":"case class SeedPhrase(words: List[String])","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_296","timestamp":1745347669919,"code":"def validateSeedPhrase(seed: SeedPhrase): Either[String, Unit] =\n  if seed.words.length == 12 then Right(()) else Left(\"Seed phrase must contain 12 words\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_298","timestamp":1745347669919,"code":"def searchWalletsByLabel(wallets: List[WalletLabel], label: String): Option[WalletLabel] =\n  wallets.find(_.label.contains(label))","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_300","timestamp":1745347669919,"code":"case class WalletSyncStatus(address: String, synced: Boolean)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_302","timestamp":1745347669919,"code":"def updateSyncStatus(wallet: WalletSyncStatus, synced: Boolean): WalletSyncStatus =\n  wallet.copy(synced = synced)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_283","timestamp":1745347679595,"code":"case class Product(id: String, name: String, category: String)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_285","timestamp":1745347679595,"code":"case class InventoryItem(product: Product, quantity: Int)\nval maybeItem: Option[InventoryItem] = None // no inventory record","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_287","timestamp":1745347679595,"code":"def findProductById(id: String, catalog: List[Product]): Option[Product] =\n  catalog.find(_.id == id)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_289","timestamp":1745347679595,"code":"val item: Option[InventoryItem] = Some(InventoryItem(Product(\"A123\", \"Chair\", \"Furniture\"), 20))\nval quantity: Int = item.map(_.quantity).getOrElse(0)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_291","timestamp":1745347679596,"code":"def restock(item: InventoryItem, amount: Int): InventoryItem =\n  item.copy(quantity = item.quantity + amount)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_293","timestamp":1745347679596,"code":"case class Order(productId: String, qty: Int)\ndef validateOrder(item: Option[InventoryItem], order: Order): Either[String, InventoryItem] =\n  item match\n    case Some(inv) if inv.quantity >= order.qty => Right(inv)\n    case Some(_) => Left(\"Insufficient stock\")\n    case None => Left(\"Item not found in inventory\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_295","timestamp":1745347679596,"code":"import scala.util.Try\ndef parseQuantity(str: String): Try[Int] =\n  Try(str.toInt)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_297","timestamp":1745347679596,"code":"// Check if the warehouse has at least one item from a category\ndef hasCategory(category: String, inventory: List[InventoryItem]): Boolean =\n  inventory.exists(_.product.category == category)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_299","timestamp":1745347679596,"code":"case class WarehouseInventory(items: Map[String, InventoryItem])\nval emptyInventory = WarehouseInventory(Map.empty)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_301","timestamp":1745347679596,"code":"def getItemQuantity(id: String, inventory: WarehouseInventory): Option[Int] =\n  inventory.items.get(id).map(_.quantity)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_303","timestamp":1745347679596,"code":"def safeGetProductName(id: String, inventory: WarehouseInventory): String =\n  inventory.items.get(id)\n    .map(_.product.name)\n    .getOrElse(\"Unknown Product\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_305","timestamp":1745347679596,"code":"case class StockMovement(product: Product, delta: Int, reason: String)\ndef updateStock(item: InventoryItem, movement: StockMovement): InventoryItem =\n  item.copy(quantity = item.quantity + movement.delta)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_307","timestamp":1745347679596,"code":"def removeStock(id: String, amount: Int, inventory: WarehouseInventory): Either[String, WarehouseInventory] =\n  inventory.items.get(id) match\n    case Some(item) if item.quantity >= amount =>\n      Right(WarehouseInventory(inventory.items.updated(id, item.copy(quantity = item.quantity - amount))))\n    case Some(_) => Left(\"Not enough stock to remove\")\n    case None => Left(\"Item not found\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_309","timestamp":1745347679596,"code":"def parseItemLine(line: String): Either[String, InventoryItem] =\n  line.split(\",\").toList match\n    case id :: name :: cat :: qty :: Nil =>\n      scala.util.Try(qty.toInt).toOption match\n        case Some(q) => Right(InventoryItem(Product(id, name, cat), q))\n        case None => Left(\"Invalid quantity\")\n    case _ => Left(\"Invalid line format\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_311","timestamp":1745347679596,"code":"def listLowStock(inventory: WarehouseInventory, threshold: Int): List[InventoryItem] =\n  inventory.items.values.filter(_.quantity < threshold).toList","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_313","timestamp":1745347679596,"code":"def addOrUpdateItem(item: InventoryItem, inventory: WarehouseInventory): WarehouseInventory =\n  WarehouseInventory(inventory.items.updated(item.product.id, item))","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_315","timestamp":1745347679597,"code":"val maybeInventory: Option[WarehouseInventory] = None\nval allProducts: List[Product] = maybeInventory\n  .map(_.items.values.map(_.product).toList)\n  .getOrElse(List.empty)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_317","timestamp":1745347679597,"code":"case class Location(name: String)\ncase class LocatedItem(item: InventoryItem, location: Location)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_319","timestamp":1745347679597,"code":"def itemLocation(id: String, locatedItems: List[LocatedItem]): Option[Location] =\n  locatedItems.find(_.item.product.id == id).map(_.location)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_321","timestamp":1745347679597,"code":"def tryAddStock(id: String, addQty: Int, inventory: WarehouseInventory): Either[String, WarehouseInventory] =\n  inventory.items.get(id) match\n    case Some(item) => Right(WarehouseInventory(inventory.items.updated(id, item.copy(quantity = item.quantity + addQty))))\n    case None => Left(\"Cannot add stock to non-existent item!\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_303","timestamp":1745347691724,"code":"case class User(id: Int, name: String, isModerator: Boolean)\nval user = User(42, \"alice\", false)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_305","timestamp":1745347691724,"code":"case class Post(id: Int, content: String, isFlagged: Boolean)\nval flaggedPost: Option[Post] = Some(Post(10, \"Spam Link\", true))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_307","timestamp":1745347691725,"code":"def findUserById(id: Int): Option[User] =\n  if id == 1 then Some(User(1, \"moderator\", true)) else None\n\nval user: Option[User] = findUserById(2)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_309","timestamp":1745347691725,"code":"def extractHashtag(content: String): Option[String] =\n  val regex = \"#\\\\w+\".r\n  regex.findFirstIn(content)\n\nextractHashtag(\"Check this out #Scala3!\") // Some(\"#Scala3\")","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_311","timestamp":1745347691725,"code":"import scala.util.Try\n\ndef parsePostId(input: String): Try[Int] = Try(input.toInt)\n\nval idResult = parsePostId(\"abc\") // Failure(java.lang.NumberFormatException)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_313","timestamp":1745347691725,"code":"case class ReportEntry(postId: Int, userId: Int, reason: String)\n\ndef validateReport(entry: ReportEntry): Either[String, ReportEntry] =\n  if entry.reason.isBlank then Left(\"Reason must not be blank.\") else Right(entry)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_315","timestamp":1745347691725,"code":"val content: Option[String] = Some(\"Hello world!\")\nval length: Int = content.map(_.length).getOrElse(0)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_317","timestamp":1745347691725,"code":"case class ModerationDecision(postId: Int, approved: Boolean, comments: Option[String])\nval decision = ModerationDecision(11, false, Some(\"Contains hate speech\"))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_319","timestamp":1745347691725,"code":"def getUserRole(user: Option[User]): String = user match\n  case Some(u) if u.isModerator => \"Moderator\"\n  case Some(_)                 => \"Regular user\"\n  case None                    => \"Unknown user\"","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_321","timestamp":1745347691725,"code":"case class ActionLogEntry(action: String, byUser: String, timestamp: Long)\nval entry = ActionLogEntry(\"DELETE\", \"moderator42\", System.currentTimeMillis())","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_323","timestamp":1745347691725,"code":"def safeUppercase(content: Option[String]): Option[String] = content.map(_.toUpperCase)\nsafeUppercase(None) // None","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_325","timestamp":1745347691725,"code":"import scala.util.Try\n\ndef loadUserProfile(userId: Int): Try[User] =\n  if userId == 0 then scala.util.Failure(Exception(\"User not found\"))\n  else scala.util.Success(User(userId, \"user\" + userId, false))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_327","timestamp":1745347691725,"code":"def filterFlagged(posts: List[Post]): List[Post] = posts.filter(_.isFlagged)\nval posts = List(Post(1, \"Hello\", false), Post(2, \"Spam!\", true))\nval flagged = filterFlagged(posts)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_329","timestamp":1745347691725,"code":"def deleteUserPost(post: Option[Post]): Either[String, String] = post match\n  case Some(p) if p.isFlagged => Right(s\"Deleted post ${p.id}\")\n  case Some(_)                => Left(\"Post not flagged\")\n  case None                   => Left(\"Post not found\")","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_331","timestamp":1745347691725,"code":"case class ContentViolation(postId: Int, violationType: String)\nval violations = List(\n  ContentViolation(6, \"Spam\"),\n  ContentViolation(9, \"Hate Speech\")\n)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_333","timestamp":1745347691725,"code":"def automaticModeration(post: Post): Option[String] =\n  if post.content.contains(\"bannedword\") then Some(\"Offensive language detected\") else None","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_335","timestamp":1745347691726,"code":"def reviewPost(post: Post): Either[String, Post] =\n  if post.content.length < 5 then Left(\"Content too short\") else Right(post)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_337","timestamp":1745347691726,"code":"case class Appeal(postId: Int, userId: Int, reason: String)\nval appeal = Some(Appeal(22, 7, \"My post did not violate any rules.\"))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_339","timestamp":1745347691726,"code":"def getPostSummary(post: Option[Post]): String =\n  post.map(p => s\"Post #${p.id}: ${p.content.take(20)}\").getOrElse(\"No post data\")","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_341","timestamp":1745347691726,"code":"import scala.util.Try\n\ncase class UserProfile(id: Int, displayName: String, bio: Option[String])\ndef createUserProfile(id: String, name: String, bio: Option[String]): Try[UserProfile] = Try {\n  UserProfile(id.toInt, name, bio)\n}","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_323","timestamp":1745347716175,"code":"case class Article(id: Int, title: String, content: String, tags: List[String])\n\ndef findArticle(articles: List[Article], id: Int): Option[Article] =\n  articles.find(_.id == id)\n\nval articles = List(Article(1, \"Scala 3 News\", \"Details...\", List(\"scala\", \"news\")))\nval maybeArticle = findArticle(articles, 2)\nprintln(maybeArticle.getOrElse(\"Article not found\"))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_325","timestamp":1745347716175,"code":"case class UserProfile(username: String, interests: List[String])\n\ndef recommendTag(user: UserProfile): Option[String] =\n  user.interests.headOption\n\nval user = UserProfile(\"alice\", Nil)\nprintln(recommendTag(user).getOrElse(\"No interests specified\"))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_327","timestamp":1745347716175,"code":"import scala.util.Try\n\ndef parseFeedJson(json: String): Try[List[String]] =\n  Try(json.stripPrefix(\"[\").stripSuffix(\"]\").split(\",\").toList)\n\nprintln(parseFeedJson(\"[news,scala,ai]\").getOrElse(List(\"Parsing failed\")))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_329","timestamp":1745347716175,"code":"case class NewsFeed(user: String, articles: List[String])\n\nval maybeFeed: Option[NewsFeed] = None\n\nmaybeFeed match\n  case Some(feed) => println(s\"Found feed for ${feed.user}\")\n  case None      => println(\"No feed available\")\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_331","timestamp":1745347716175,"code":"def getFirstArticle(articles: List[String]): Option[String] =\n  articles.headOption\n\nval first = getFirstArticle(List())\nprintln(first.fold(\"No news today\")(title => s\"First: $title\"))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_333","timestamp":1745347716175,"code":"import scala.util.Try\n\ndef getUserFeed(username: String): Either[String, List[String]] =\n  if username.nonEmpty then Right(List(\"News1\", \"News2\"))\n  else Left(\"No username provided\")\n\nval result = getUserFeed(\"\")\nprintln(result.fold(err => s\"Error: $err\", feed => feed.mkString(\", \")))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_335","timestamp":1745347716176,"code":"case class Comment(user: String, message: String)\n\ndef latestComment(comments: List[Comment]): Option[Comment] =\n  comments.lastOption\n\nval noneFound = latestComment(Nil)\nprintln(noneFound.map(_.message).getOrElse(\"No comments yet.\"))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_337","timestamp":1745347716176,"code":"case class Subscription(user: String, startDate: Option[String])\n\ndef printStartDate(sub: Subscription): Unit =\n  println(sub.startDate.getOrElse(\"Start date unknown\"))\n\nval sub = Subscription(\"bob\", None)\nprintStartDate(sub)\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_339","timestamp":1745347716176,"code":"case class FeedItem(articleId: Int, meta: Option[String])\n\nval feedItem = FeedItem(42, Some(\"Breaking News\"))\nval label = feedItem.meta.map(_.toUpperCase).getOrElse(\"No meta info\")\nprintln(label)\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_341","timestamp":1745347716176,"code":"def normalizeTag(tag: Option[String]): String =\n  tag match\n    case Some(t) => t.trim.toLowerCase\n    case None    => \"untagged\"\n\nprintln(normalizeTag(Some(\" SCALA \")))\nprintln(normalizeTag(None))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_343","timestamp":1745347716176,"code":"import scala.util.Try\n\ndef safeDivide(a: Int, b: Int): Try[Int] = Try(a / b)\n\nval division = safeDivide(10, 0)\nprintf(\"Division result: %s\\n\", division.fold(_ => \"Error\", _.toString))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_345","timestamp":1745347716177,"code":"case class NewsPreferences(language: String = \"en\", region: Option[String])\n\nval prefs = NewsPreferences(region = None)\nprintln(prefs.region.getOrElse(\"Region not set\"))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_347","timestamp":1745347716177,"code":"case class FeedFilter(includeTags: List[String], excludeTags: Option[List[String]])\n\nval filter = FeedFilter(List(\"scala\"), None)\nprintln(filter.excludeTags.getOrElse(List(\"No tags to exclude\")))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_349","timestamp":1745347716177,"code":"def mostPopularTag(tags: List[String]): Option[String] =\n  tags.groupBy(identity).mapValues(_.size).maxByOption(_._2).map(_._1)\n\nprintln(mostPopularTag(List(\"tech\", \"news\", \"tech\")).getOrElse(\"No tags\"))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_351","timestamp":1745347716177,"code":"case class User(id: Int, name: String)\n\ndef findUser(users: List[User], id: Int): Option[User] =\n  users.find(_.id == id)\n\nval userOpt = findUser(List(User(1, \"Sam\")), 2)\nprintln(userOpt.getOrElse(\"Unknown user\"))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_353","timestamp":1745347716177,"code":"import scala.util.Try\n\ndef getFeedLength(feed: Option[List[String]]): Try[Int] = Try(feed.map(_.length).getOrElse(0))\n\nprintln(getFeedLength(Some(List(\"A\", \"B\"))).getOrElse(-1))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_355","timestamp":1745347716177,"code":"def mergeFeeds(f1: Option[List[String]], f2: Option[List[String]]): List[String] =\n  f1.getOrElse(Nil) ++ f2.getOrElse(Nil)\n\nprintln(mergeFeeds(Some(List(\"x\")), None))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_357","timestamp":1745347716177,"code":"case class Article(title: String, author: Option[String])\n\nval a = Article(\"Scala 3 Released\", None)\nval authorName = a.author.fold(\"Unknown\")(_.toUpperCase)\nprintln(s\"Author: $authorName\")\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_359","timestamp":1745347716177,"code":"case class PersonalizedFeed(userId: Int, items: List[String])\n\ndef latest(feed: PersonalizedFeed): Option[String] = feed.items.headOption\n\nprintln(latest(PersonalizedFeed(10, Nil)).getOrElse(\"No news available\"))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_361","timestamp":1745347716177,"code":"import scala.util.Try\n\ndef renderFeedItem(raw: String): Either[String, String] =\n  Try(raw.toInt).map(id => s\"Feed item #$id\").toEither.left.map(_ => \"Invalid id\")\n\nprintln(renderFeedItem(\"42\"))\nprintln(renderFeedItem(\"oops\"))\n","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_343","timestamp":1745347734524,"code":"case class ChargingStation(id: String, name: String, latitude: Double, longitude: Double)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_345","timestamp":1745347734524,"code":"def findNearestStation(userLat: Double, userLong: Double, stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.sortBy(station => math.hypot(station.latitude - userLat, station.longitude - userLong)).headOption","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_347","timestamp":1745347734524,"code":"val maybeStation: Option[ChargingStation] = None\n\nmaybeStation match\n  case Some(station) => println(s\"Found: ${station.name}\")\n  case None => println(\"No station found\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_349","timestamp":1745347734524,"code":"def parseStationRating(input: String): Either[String, Double] =\n  scala.util.Try(input.toDouble).toEither.left.map(_ => s\"Invalid rating: $input\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_351","timestamp":1745347734524,"code":"case class ChargerInfo(powerKW: Double, connectorType: String)\nval charger: ChargerInfo = ChargerInfo(50.0, \"CCS\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_353","timestamp":1745347734524,"code":"val stations: List[ChargingStation] = List()\nstations.headOption.map(_.name).getOrElse(\"No stations available\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_355","timestamp":1745347734525,"code":"def getStationById(id: String, stations: Map[String, ChargingStation]): Option[ChargingStation] =\n  stations.get(id)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_357","timestamp":1745347734525,"code":"def safeReadStationName(station: Option[ChargingStation]): String =\n  station.map(_.name).getOrElse(\"Unknown Station\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_359","timestamp":1745347734525,"code":"import scala.util.{Try, Success, Failure}\ndef parseLatitude(lat: String): Try[Double] = Try(lat.toDouble)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_361","timestamp":1745347734525,"code":"def parseCoordinates(lat: String, long: String): Either[String, (Double, Double)] =\n  (scala.util.Try(lat.toDouble).toEither, scala.util.Try(long.toDouble).toEither) match\n    case (Right(latVal), Right(longVal)) => Right((latVal, longVal))\n    case (Left(_), _) => Left(s\"Invalid latitude: $lat\")\n    case (_, Left(_)) => Left(s\"Invalid longitude: $long\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_363","timestamp":1745347734525,"code":"case class SearchFilter(minPowerKW: Option[Double], connectorType: Option[String])","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_365","timestamp":1745347734525,"code":"def findStationsByConnector(stations: List[ChargingStation], connector: Option[String]): List[ChargingStation] =\n  connector match\n    case Some(conn) => stations.filter(_.name.contains(conn))\n    case None => stations","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_367","timestamp":1745347734525,"code":"def updateStationName(station: ChargingStation, newName: Option[String]): ChargingStation =\n  newName.map(name => station.copy(name = name)).getOrElse(station)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_369","timestamp":1745347734525,"code":"def getChargerInfo(station: ChargingStation): Option[ChargerInfo] = None // stub","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_371","timestamp":1745347734525,"code":"val possiblePower: Option[Double] = Some(22.0)\nval powerText: String = possiblePower.map(p => s\"$p kW\").getOrElse(\"Unknown Power\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_373","timestamp":1745347734525,"code":"def getStationCoordinates(station: ChargingStation): (Double, Double) =\n  (station.latitude, station.longitude)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_375","timestamp":1745347734525,"code":"def requireMinPower(stations: List[ChargingStation], minKW: Double, powerOf: ChargingStation => Double): List[ChargingStation] =\n  stations.filter(st => powerOf(st) >= minKW)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_377","timestamp":1745347734526,"code":"def safeDividePriceByPower(price: Double, powerKW: Option[Double]): Either[String, Double] =\n  powerKW match\n    case None => Left(\"Power missing\")\n    case Some(power) if power == 0 => Left(\"Power cannot be zero\")\n    case Some(power) => Right(price / power)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_379","timestamp":1745347734526,"code":"case class ChargingSession(stationId: String, startedAt: Long, endedAt: Option[Long])","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_381","timestamp":1745347734526,"code":"val sessionOpt: Option[ChargingSession] = Some(ChargingSession(\"A123\", 1688030700, None))\nval sessionEndTime: String = sessionOpt.flatMap(_.endedAt).map(_.toString).getOrElse(\"Ongoing\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_363","timestamp":1745347749066,"code":"case class SensorReading(sensorId: String, value: Option[Double])\n\nval reading = SensorReading(\"temp1\", Some(18.5))\nprintln(reading.value.getOrElse(\"No reading available\"))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_365","timestamp":1745347749066,"code":"case class WeatherData(temp: Option[Double], humidity: Option[Double])\n\ndef comfortIndex(data: WeatherData): Option[Double] =\n  for temp <- data.temp; hum <- data.humidity yield temp * 0.7 + hum * 0.3\n\nval wd = WeatherData(Some(21.0), Some(60.0))\nprintln(comfortIndex(wd).getOrElse(\"Insufficient data\"))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_367","timestamp":1745347749066,"code":"case class CropStatus(crop: String, health: String)\n\ndef parseCropStatus(data: String): Either[String, CropStatus] =\n  data.split(',') match\n    case Array(c, h) => Right(CropStatus(c, h))\n    case _ => Left(\"Malformed input data.\")\n\nprintln(parseCropStatus(\"Wheat,Healthy\"))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_369","timestamp":1745347749067,"code":"import scala.util.Try\n\ndef parseMoistureLevel(input: String): Try[Double] =\n  Try(input.toDouble)\n\nval reading = parseMoistureLevel(\"13.4\").getOrElse(0.0)\nprintln(s\"Moisture Level: $reading\")","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_371","timestamp":1745347749067,"code":"case class Field(id: String, cropType: Option[String])\n\nval f = Field(\"A12\", None)\nf.cropType match\n  case Some(crop) => println(s\"Field has $crop planted.\")\n  case None      => println(\"No crop planted.\")","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_373","timestamp":1745347749067,"code":"case class SensorData(fieldId: String, rainfall: Option[Double], temp: Option[Double])\n\nval data = SensorData(\"Fld001\", Some(14.0), None)\ndata.temp.orElse(Some(20.0)) // Default temperature if missing","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_375","timestamp":1745347749067,"code":"case class PestInfestation(field: String, severity: Option[Int])\n\nval infestation = PestInfestation(\"Field42\", None)\nval message = infestation.severity match\n  case Some(sev) => s\"Severity: $sev\"\n  case None      => \"Severity unknown.\"\nprintln(message)","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_377","timestamp":1745347749067,"code":"import scala.util.Try\n\ndef readYield(fileLine: String): Try[Double] =\n  Try(fileLine.toDouble)\n\nreadYield(\"abc\") match\n  case scala.util.Success(y) => println(s\"Yield: $y\")\n  case scala.util.Failure(_) => println(\"Invalid yield data\")","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_379","timestamp":1745347749067,"code":"case class Crop(name: String, expectedHarvest: Option[Int])\n\ndef harvestStatus(crop: Crop): String =\n  crop.expectedHarvest.map(h => s\"Expected $h kg\").getOrElse(\"Harvest unknown\")\n\nprintln(harvestStatus(Crop(\"Corn\", None)))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_381","timestamp":1745347749067,"code":"case class IrrigationStatus(day: String, watered: Option[Boolean])\n\ndef reportStatus(status: IrrigationStatus): Unit =\n  println(s\"${status.day}: \" + status.watered.fold(\"Not recorded\")(if _ then \"Watered\" else \"Not watered\"))\n\nreportStatus(IrrigationStatus(\"Monday\", Some(false)))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_383","timestamp":1745347749067,"code":"case class GrowthMeasurement(field: String, heightCm: Option[Double])\n\ndef avgGrowth(fields: List[GrowthMeasurement]): Double =\n  val heights = fields.flatMap(_.heightCm)\n  if heights.isEmpty then 0.0 else heights.sum / heights.length\n\nprintln(avgGrowth(List(GrowthMeasurement(\"A\", Some(25.3)), GrowthMeasurement(\"B\", None))))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_385","timestamp":1745347749067,"code":"case class SoilTest(field: String, nitrogen: Option[Double])\n\nval test = SoilTest(\"Alpha\", None)\nprintln(test.nitrogen.getOrElse(0.0)) // Replace missing data with zero","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_387","timestamp":1745347749067,"code":"def findField(fields: List[String], id: String): Option[String] =\n  fields.find(_ == id)\n\nfindField(List(\"A1\", \"B2\"), \"B2\") match\n  case Some(fid) => println(s\"Found field: $fid\")\n  case None      => println(\"Field not found\")","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_389","timestamp":1745347749067,"code":"case class Forecast(temperature: Option[Double])\n\ndef needsProtection(forecast: Forecast): Boolean =\n  forecast.temperature.exists(_ < 5.0)\n\nprintln(needsProtection(Forecast(Some(2.4))))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_391","timestamp":1745347749067,"code":"case class DiseaseAlert(crop: String, alert: Option[String])\n\nval alert = DiseaseAlert(\"Potato\", Some(\"Blight Detected\"))\nalert.alert.foreach(msg => println(s\"Alert: $msg\"))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_393","timestamp":1745347749068,"code":"import scala.util.Try\n\ndef parseRainfall(data: String): Either[String, Double] =\n  Try(data.toDouble).toOption match\n    case Some(value) => Right(value)\n    case None        => Left(\"Unable to parse rainfall.\")\n\nprintln(parseRainfall(\"10.2\"))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_395","timestamp":1745347749068,"code":"case class DroneImage(id: String, ndviScore: Option[Double])\n\ndef healthy(ndvi: Option[Double]): Boolean =\n  ndvi.exists(_ > 0.5)\n\nval img = DroneImage(\"image123\", Some(0.45))\nprintln(healthy(img.ndviScore))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_397","timestamp":1745347749068,"code":"case class FertilizerApplication(field: String, appliedKg: Option[Double])\n\ndef needsMoreFertilizer(app: FertilizerApplication): Boolean =\n  app.appliedKg.forall(_ < 50)\n\nprintln(needsMoreFertilizer(FertilizerApplication(\"Beta\", None)))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_399","timestamp":1745347749068,"code":"case class FieldError(message: String)\n\ndef safeDivide(a: Double, b: Double): Either[FieldError, Double] =\n  if b == 0 then Left(FieldError(\"Division by zero\")) else Right(a / b)\n\nprintln(safeDivide(30.0, 0))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_401","timestamp":1745347749068,"code":"case class FieldNote(field: String, comment: Option[String])\n\ndef printNote(note: FieldNote): Unit =\n  note.comment.foreach(text => println(s\"Note for ${note.field}: $text\"))\n\nprintNote(FieldNote(\"Gamma\", Some(\"Check irrigation valves.\")))","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_383","timestamp":1745347763247,"code":"case class SensorReading(id: String, value: Double, timestamp: Long)\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_385","timestamp":1745347763247,"code":"def parseReading(input: String): Option[SensorReading] =\n  input.split(',') match {\n    case Array(id, value, ts) =>\n      scala.util.Try(SensorReading(id, value.toDouble, ts.toLong)).toOption\n    case _ => None\n  }\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_387","timestamp":1745347763247,"code":"val maybeSensor: Option[SensorReading] = parseReading(\"temp01,19.2,1683112334\")\nval value: Double = maybeSensor.map(_.value).getOrElse(0.0)\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_389","timestamp":1745347763247,"code":"case class SensorMetadata(id: String, location: Option[String])\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_391","timestamp":1745347763248,"code":"val readings: List[Option[SensorReading]] = List(Some(SensorReading(\"s1\", 10.0, 123)), None)\nval presentReadings = readings.flatten\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_393","timestamp":1745347763248,"code":"def safeAverage(values: List[Double]): Option[Double] =\n  if values.isEmpty then None else Some(values.sum / values.size)\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_395","timestamp":1745347763248,"code":"import scala.util.Try\n\ndef safeParseDouble(s: String): Either[String, Double] =\n  Try(s.toDouble).toEither.left.map(_ => s\"Could not parse '$s' as Double\")\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_397","timestamp":1745347763248,"code":"def getLocation(meta: SensorMetadata): String =\n  meta.location.getOrElse(\"Unknown\")\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_399","timestamp":1745347763248,"code":"case class AggregatedData(sensorId: String, avg: Double, count: Int)\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_401","timestamp":1745347763248,"code":"def aggregateReadings(readings: List[SensorReading]): Option[AggregatedData] =\n  if readings.isEmpty then None\n  else \n    val avg = readings.map(_.value).sum / readings.length\n    Some(AggregatedData(readings.head.id, avg, readings.length))\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_403","timestamp":1745347763248,"code":"val input: List[String] = List(\"s1,18.1,1683112334\", \"broken\", \"s1,19.0,1683112335\")\nval validReadings: List[SensorReading] = input.flatMap(parseReading)\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_405","timestamp":1745347763248,"code":"import scala.util.Try\n\ndef safeGetReadingValue(opt: Option[SensorReading]): Either[String, Double] =\n  opt match {\n    case Some(reading) => Right(reading.value)\n    case None => Left(\"No sensor reading available\")\n  }\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_407","timestamp":1745347763248,"code":"case class SensorBatch(readings: List[SensorReading], batchTime: Long)\n\nval emptyBatch = SensorBatch(Nil, System.currentTimeMillis)\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_409","timestamp":1745347763248,"code":"def incrementIfAboveThreshold(reading: Option[SensorReading], threshold: Double): Option[Double] =\n  reading.filter(_.value > threshold).map(_.value + 1)\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_411","timestamp":1745347763248,"code":"def findHighest(readings: Seq[SensorReading]): Option[SensorReading] =\n  readings.reduceOption((a, b) => if a.value > b.value then a else b)\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_413","timestamp":1745347763248,"code":"import scala.util.Try\n\ndef parseBatch(input: String): Try[SensorBatch] =\n  Try {\n    val lines = input.split(\"\\n\").toList\n    val readings = lines.flatMap(parseReading)\n    SensorBatch(readings, System.currentTimeMillis)\n  }\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_415","timestamp":1745347763249,"code":"val maybeMeta = Some(SensorMetadata(\"abc\", None))\nval desc = maybeMeta.map(m => s\"Sensor ${m.id} at ${m.location.getOrElse(\"N/A\")}\").getOrElse(\"Unknown sensor\")\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_417","timestamp":1745347763249,"code":"def safeDivide(a: Double, b: Double): Option[Double] = if b != 0 then Some(a / b) else None\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_419","timestamp":1745347763249,"code":"case class TemperatureReading(id: String, celsius: Double)\ndef fahrenheit(opt: Option[TemperatureReading]): Option[Double] =\n  opt.map(r => r.celsius * 9/5 + 32)\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_421","timestamp":1745347763249,"code":"import scala.util.{Try, Success, Failure}\n\ndef tryParseTimestamp(ts: String): Try[Long] = Try(ts.toLong)\n","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_403","timestamp":1745347779682,"code":"// Example 1: Defining a simple immutable data structure for a Bus Stop\ncase class BusStop(id: Int, name: String, location: (Double, Double))\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_405","timestamp":1745347779682,"code":"// Example 2: Using Option to represent the next arrival time which might be unknown\ndef nextArrival(stop: BusStop): Option[Int] =\n  if stop.id == 100 then Some(5) // 5 minutes to arrival\n  else None\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_407","timestamp":1745347779682,"code":"// Example 3: Mapping over Option to transform values\ndef minutesToSeconds(optMinutes: Option[Int]): Option[Int] =\n  optMinutes.map(_ * 60)\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_409","timestamp":1745347779682,"code":"// Example 4: Using Option with getOrElse to provide a default message\ndef arrivalMessage(arrival: Option[Int]): String =\n  arrival.map(min => s\"Bus arrives in $min min\").getOrElse(\"No scheduled arrival.\")\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_411","timestamp":1745347779683,"code":"// Example 5: Defining a simple immutable data structure for a transit Route\ncase class Route(id: String, stops: List[BusStop], isExpress: Boolean)\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_413","timestamp":1745347779683,"code":"// Example 6: Parsing a stop ID safely using Try\nimport scala.util.{Try, Success, Failure}\ndef parseStopId(idStr: String): Try[Int] = Try(idStr.toInt)\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_415","timestamp":1745347779683,"code":"// Example 7: Using Either for recoverable route lookup errors\ndef findRoute(name: String, allRoutes: List[Route]): Either[String, Route] =\n  allRoutes.find(_.id == name).toRight(s\"Route $name not found.\")\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_417","timestamp":1745347779683,"code":"// Example 8: Pattern matching Option to handle route planning alternatives\ndef getFirstStop(route: Route): Option[BusStop] = route.stops.headOption\n\ndef describeFirstStop(route: Route): String =\n  getFirstStop(route) match\n    case Some(stop) => s\"First stop: ${stop.name}\"\n    case None       => \"Route has no stops\"\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_419","timestamp":1745347779683,"code":"// Example 9: Defining a TripPlan data structure\ncase class TripPlan(origin: BusStop, destination: BusStop, route: Route, departures: List[Int])\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_421","timestamp":1745347779683,"code":"// Example 10: Using Option.map to find the next departure after a given time\ndef nextDeparture(departures: List[Int], currentTime: Int): Option[Int] =\n  departures.find(_ > currentTime)\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_423","timestamp":1745347779683,"code":"// Example 11: Option chaining and fallback\ndef getExpressRoute(routes: List[Route]): Route =\n  routes.find(_.isExpress)\n    .orElse(routes.headOption)\n    .getOrElse(throw new Exception(\"No routes available.\"))\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_425","timestamp":1745347779683,"code":"// Example 12: Simple fare calculation with Either for validation\ndef calculateFare(distance: Int): Either[String, Double] =\n  if distance >= 0 then Right(distance * 0.15)\n  else Left(\"Distance cannot be negative.\")\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_427","timestamp":1745347779683,"code":"// Example 13: Chaining Option with map and flatMap for stop lookups\ndef getStopNames(route: Route): List[String] = route.stops.map(_.name)\ndef getStopByName(route: Route, name: String): Option[BusStop] =\n  route.stops.find(_.name == name)\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_429","timestamp":1745347779683,"code":"// Example 14: Using for-comprehension with Option to combine lookups\ndef findTransferStop(route1: Route, route2: Route): Option[BusStop] =\n  for stop1 <- route1.stops.find(s1 => route2.stops.exists(_.id == s1.id))\n  yield stop1\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_431","timestamp":1745347779683,"code":"// Example 15: Use of pattern matching on Try for error handling\nval tryStop = parseStopId(\"abc\")\ntryStop match\n  case Success(id) => println(s\"Parsed stop ID: $id\")\n  case Failure(ex) => println(s\"Failed to parse stop ID: ${ex.getMessage}\")\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_433","timestamp":1745347779683,"code":"// Example 16: Defining a simple data structure for service disruptions\ncase class Disruption(routeId: String, description: String, affectedStops: List[Int])\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_435","timestamp":1745347779684,"code":"// Example 17: Using Option.exists to check for a stop on a route\ndef isStopOnRoute(stopId: Int, route: Route): Boolean =\n  route.stops.exists(_.id == stopId)\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_437","timestamp":1745347779684,"code":"// Example 18: Using Either for representing successful/failed trip planning\ncase class PlannedTrip(route: Route, stops: List[BusStop])\ndef planTrip(routes: List[Route], from: String, to: String): Either[String, PlannedTrip] =\n  for\n    route <- routes.find(r => r.stops.exists(_.name == from) && r.stops.exists(_.name == to)).toRight(\"No route covers both stops.\")\n    stops = route.stops.dropWhile(_.name != from).takeWhile(_.name != to) :+ route.stops.find(_.name == to).get\n  yield PlannedTrip(route, stops)\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_439","timestamp":1745347779684,"code":"// Example 19: Use Option.flatten when mapping to a nested Option\ndef getRouteById(routes: List[Route], id: String): Option[Route] =\n  routes.find(_.id == id)\n\ndef getFirstStopNameOfRoute(routes: List[Route], id: String): Option[String] =\n  getRouteById(routes, id).flatMap(_.stops.headOption).map(_.name)\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_441","timestamp":1745347779684,"code":"// Example 20: Safe parsing with Try-to-Option conversion and fallback\ndef parseDepartureTime(timeStr: String): Option[Int] =\n  scala.util.Try(timeStr.toInt).toOption\n\ndef getNextDeparture(times: List[String], current: Int): Option[Int] =\n  times.flatMap(parseDepartureTime).find(_ > current)\n","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_423","timestamp":1745347796303,"code":"// 1. Product as a simple data structure\ncase class Product(id: String, name: String, price: BigDecimal)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_425","timestamp":1745347796303,"code":"// 2. Using Option for lookup of product by barcode\ndef findProductByBarcode(barcode: String, \n                         productIndex: Map[String, Product]): Option[Product] =\n  productIndex.get(barcode)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_427","timestamp":1745347796303,"code":"// 3. Pattern matching on Option to display product price\ndef displayPrice(maybeProduct: Option[Product]): String =\n  maybeProduct match\n    case Some(product) => f\"${product.price}%.2f USD\"\n    case None => \"Product not found.\"","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_429","timestamp":1745347796303,"code":"// 4. Transaction with Option for optional discount\ncase class Transaction(item: Product, quantity: Int, discount: Option[BigDecimal])","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_431","timestamp":1745347796304,"code":"// 5. Calculating total line price with Option discount\ndef lineTotal(transaction: Transaction): BigDecimal =\n  val base = transaction.item.price * transaction.quantity\n  transaction.discount.map(discount => base - discount).getOrElse(base)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_433","timestamp":1745347796304,"code":"// 6. Reading price input safely using Try\nimport scala.util.Try\ndef parsePrice(input: String): Try[BigDecimal] =\n  Try(BigDecimal(input))","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_435","timestamp":1745347796304,"code":"// 7. Either for safe parsing of quantity\ndef parseQuantity(input: String): Either[String, Int] =\n  try Right(input.toInt)\n  catch case _: NumberFormatException => Left(\"Invalid quantity format\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_437","timestamp":1745347796304,"code":"// 8. Customer with optional loyaltyCard\ncase class Customer(id: String, name: String, loyaltyCard: Option[String])","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_439","timestamp":1745347796304,"code":"// 9. Option.fold to greet a Customer about their loyalty status\ndef greetCustomer(customer: Customer): String =\n  customer.loyaltyCard.fold(s\"Hello ${customer.name}!\") { card =>\n    s\"Welcome back, ${customer.name}! Your loyalty card: $card.\"\n  }","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_441","timestamp":1745347796304,"code":"// 10. Sequence of Option to filter only scanned items\ndef scannedProducts(barcodes: Seq[String], inventory: Map[String, Product]) =\n  barcodes.flatMap(inventory.get)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_443","timestamp":1745347796304,"code":"// 11. InventoryItem with Option for possible expiration date\nimport java.time.LocalDate\ncase class InventoryItem(product: Product, expiration: Option[LocalDate])","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_445","timestamp":1745347796304,"code":"// 12. Option.forall for checking valid (non-expired) item\ndef isValidForSale(item: InventoryItem, today: LocalDate): Boolean =\n  item.expiration.forall(_.isAfter(today))","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_447","timestamp":1745347796304,"code":"// 13. Using .collect to parse barcodes with recoverable errors\nval inputs = List(\"123\", \"xyz\", \"456\")\nval parsed = inputs.collect {\n  case s if s.forall(_.isDigit) => s.toInt\n}","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_449","timestamp":1745347796304,"code":"// 14. Either for safe discount calculation\ndef calculateDiscount(price: BigDecimal, percent: Int): Either[String, BigDecimal] =\n  if percent < 0 || percent > 100 then Left(\"Invalid discount percentage\")\n  else Right(price * (percent / 100.0))","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_451","timestamp":1745347796304,"code":"// 15. Small receipt item with implicit .copy for update\ncase class ReceiptItem(product: Product, qty: Int)\nval original = ReceiptItem(Product(\"1\", \"Apple\", 0.99), 2)\nval withExtra = original.copy(qty = original.qty + 1)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_453","timestamp":1745347796305,"code":"// 16. Parsing payment method from string with Option\nenum PaymentMethod:\n  case Cash, Card, MobileApp\n\ndef parsePayment(input: String): Option[PaymentMethod] =\n  input.toLowerCase match\n    case \"cash\" => Some(PaymentMethod.Cash)\n    case \"card\" => Some(PaymentMethod.Card)\n    case \"mobileapp\" => Some(PaymentMethod.MobileApp)\n    case _ => None","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_455","timestamp":1745347796305,"code":"// 17. basketTotal with Option for empty basket\ndef basketTotal(items: Seq[ReceiptItem]): Option[BigDecimal] =\n  if items.isEmpty then None\n  else Some(items.map(i => i.product.price * i.qty).sum)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_457","timestamp":1745347796305,"code":"// 18. Use Try for safe API call simulation\nimport scala.util.{Try, Success, Failure}\ndef fetchRemotePrice(barcode: String): Try[BigDecimal] =\n  if barcode == \"INVALID\" then Failure(Exception(\"API error\"))\n  else Success(BigDecimal(19.99))","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_459","timestamp":1745347796305,"code":"// 19. Updating inventory count with Option\ndef decrementStock(barcode: String, current: Map[String, Int]): Map[String, Int] =\n  current.get(barcode).map { count =>\n    current.updated(barcode, count - 1)\n  }.getOrElse(current)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_461","timestamp":1745347796305,"code":"// 20. Handling Either return type in checkout\n\ndef checkout(items: Seq[ReceiptItem], takePayment: BigDecimal => Either[String, String]): String =\n  val total = items.map(i => i.product.price * i.qty).sum\n  takePayment(total) match\n    case Right(receiptId) => s\"Payment accepted. Receipt: $receiptId\"\n    case Left(error)      => s\"Payment error: $error\"","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_443","timestamp":1745347809685,"code":"case class LoanApplication(amount: Double, termYears: Int, creditScore: Option[Int])\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_445","timestamp":1745347809685,"code":"val inputDownPayment: Option[Double] = None // User hasn't provided a down payment\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_447","timestamp":1745347809685,"code":"def parseInterestRate(str: String): Option[Double] = str.toDoubleOption.filter(_ > 0)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_449","timestamp":1745347809685,"code":"import scala.util.Try\n\ndef safeMonthlyPayment(p: Double, r: Double, n: Int): Try[Double] = Try {\n  require(n > 0)\n  val monthlyRate = r / 12 / 100\n  p * monthlyRate / (1 - math.pow(1 + monthlyRate, -n))\n}\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_451","timestamp":1745347809686,"code":"def getOptionalCoBorrowers(names: List[String]): Option[List[String]] =\n  Option.when(names.nonEmpty)(names)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_453","timestamp":1745347809686,"code":"case class MortgageDetails(\n  principal: Double,\n  termYears: Int,\n  interestRate: Double,\n  downPayment: Option[Double]\n)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_455","timestamp":1745347809686,"code":"val maybePropertyValue: Option[Double] = Some(500_000)\nval insurance: Double = maybePropertyValue.map(_ * 0.001).getOrElse(0)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_457","timestamp":1745347809686,"code":"// Try converting user input to a Double, else return a default\nimport scala.util.Try\nval maybeAmount = Try(\"400000\".toDouble).toOption.getOrElse(0.0)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_459","timestamp":1745347809686,"code":"case class Applicant(name: String, income: Option[Double])\ndef isEligible(applicant: Applicant): Boolean =\n  applicant.income.exists(_ > 40_000)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_461","timestamp":1745347809686,"code":"case class MortgageApplication(\n  applicant: String,\n  propertyValue: Double,\n  loanToValue: Option[Double]\n)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_463","timestamp":1745347809686,"code":"def eligibilityCheck(creditScore: Option[Int]): Either[String, Boolean] =\n  creditScore match {\n    case Some(score) if score >= 620 => Right(true)\n    case Some(_) => Left(\"Credit score too low\")\n    case None => Left(\"Credit score unavailable\")\n  }\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_465","timestamp":1745347809686,"code":"import scala.util.Try\n\ndef safeParseTerm(term: String): Either[String, Int] =\n  Try(term.toInt).toEither.left.map(_ => s\"Invalid term: $term\")\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_467","timestamp":1745347809686,"code":"def monthlyInsurance(optionValue: Option[Double]): Option[Double] =\n  optionValue.filter(_ > 300_000).map(_ => 50.0)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_469","timestamp":1745347809686,"code":"val optionalHomeOwnerAssocFee: Option[Double] = None\nval hoaFee = optionalHomeOwnerAssocFee.getOrElse(0.0)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_471","timestamp":1745347809687,"code":"case class CalculationResult(\n  monthlyPayment: Double,\n  error: Option[String] = None\n)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_473","timestamp":1745347809687,"code":"case class PropertyInfo(address: String, value: Option[Double], yearBuilt: Option[Int])\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_475","timestamp":1745347809687,"code":"def downPaymentRatio(propertyValue: Double, downPayment: Option[Double]): Double =\n  downPayment.fold(0.0)(_ / propertyValue)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_477","timestamp":1745347809687,"code":"case class AmortizationSchedule(\n  month: Int,\n  balance: Double,\n  interestPaid: Double,\n  principalPaid: Double\n)\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_479","timestamp":1745347809687,"code":"def safeMaxBorrow(income: Option[Double], debts: Option[Double]): Option[Double] =\n  for\n    i <- income if i > 0\n    d <- debts if d >= 0\n  yield i * 0.35 - d\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_481","timestamp":1745347809687,"code":"import scala.util.Try\n\ndef estimateTaxes(value: String): Either[String, Double] =\n  Try(value.toDouble * 0.012).toEither.left.map(_ => \"Not a valid property value\")\n","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_463","timestamp":1745347822587,"code":"case class SensorReading(machineId: String, timestamp: Long, temperature: Option[Double], vibration: Option[Double])\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_465","timestamp":1745347822587,"code":"def parseTemperature(raw: String): Either[String, Double] =\n  scala.util.Try(raw.toDouble).toEither.left.map(_ => s\"Invalid temperature: $raw\")\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_467","timestamp":1745347822587,"code":"def retrieveVibration(sensorId: String): Option[Double] =\n  // Simulate missing vibration data for certain sensors\n  if sensorId.startsWith(\"A\") then Some(0.12) else None\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_469","timestamp":1745347822587,"code":"def calculateAverage(readings: List[Double]): Option[Double] =\n  if readings.isEmpty then None\n  else Some(readings.sum / readings.length)\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_471","timestamp":1745347822588,"code":"import scala.util.Try\n\ndef readTelemetryValue(raw: String): Try[Double] = Try(raw.toDouble)\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_473","timestamp":1745347822588,"code":"case class MachineStatus(id: String, active: Boolean, lastSeen: Option[Long])\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_475","timestamp":1745347822588,"code":"def showReading(sensor: SensorReading): String =\n  sensor.temperature match\n    case Some(t) => s\"Temp: $t\"\n    case None    => \"Temp data missing\"\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_477","timestamp":1745347822588,"code":"def safeDivide(n: Double, d: Double): Option[Double] =\n  if d != 0 then Some(n/d) else None\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_479","timestamp":1745347822588,"code":"case class TelemetryEvent(id: String, value: Either[String, Double])\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_481","timestamp":1745347822588,"code":"def fetchSensorData(id: String): Either[String, SensorReading] =\n  if id.nonEmpty then Right(SensorReading(id, System.currentTimeMillis, Some(65.1), None))\n  else Left(\"Missing machine id\")\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_483","timestamp":1745347822588,"code":"def updateStatus(status: MachineStatus): MachineStatus =\n  status.copy(lastSeen = Some(System.currentTimeMillis))\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_485","timestamp":1745347822588,"code":"def validateTemperature(t: Option[Double]): Either[String, Double] =\n  t match\n    case Some(value) if value > -50 && value < 200 => Right(value)\n    case Some(_)  => Left(\"Temperature out of range\")\n    case None     => Left(\"Temperature missing\")\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_487","timestamp":1745347822588,"code":"case class PressureSample(machineId: String, bar: Option[Double])\n\ndef safePressureDiff(p1: PressureSample, p2: PressureSample): Option[Double] =\n  for\n    v1 <- p1.bar\n    v2 <- p2.bar\n  yield v2 - v1\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_489","timestamp":1745347822588,"code":"case class MachineMeta(id: String, name: String, installDate: Option[Long])\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_491","timestamp":1745347822588,"code":"case class Alert(code: Int, message: String)\n\ndef generateAlert(temp: Option[Double]): Option[Alert] =\n  temp.filter(_ > 120.0).map(t => Alert(1, s\"High temp: $t\"))\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_493","timestamp":1745347822589,"code":"def parseVibration(data: String): Try[Double] = scala.util.Try(data.toDouble)\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_495","timestamp":1745347822589,"code":"case class TelemetryError(msg: String)\n\ndef readSpeed(maybeValue: Option[String]): Either[TelemetryError, Double] =\n  maybeValue match\n    case Some(str) =>\n      scala.util.Try(str.toDouble).toEither.left.map(_ => TelemetryError(\"Invalid speed\"))\n    case None => Left(TelemetryError(\"Missing speed data\"))\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_497","timestamp":1745347822589,"code":"case class BatteryLevel(machineId: String, level: Option[Double])\n\nval critical: BatteryLevel => Boolean = _.level.exists(_ < 10.0)\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_499","timestamp":1745347822589,"code":"def parseEvent(event: String): Either[String, (String, Double)] =\n  event.split(\":\") match\n    case Array(id, valueStr) =>\n      scala.util.Try(valueStr.toDouble).toEither.left.map(_ => \"Bad value\").map(id -> _)\n    case _ => Left(\"Malformed event string\")\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_501","timestamp":1745347822589,"code":"case class Recording(id: String, ts: Long, vibration: Option[Double], rpm: Option[Int])\ndef rpmRatio(r1: Recording, r2: Recording): Option[Double] =\n  for\n    rpm1 <- r1.rpm.map(_.toDouble)\n    rpm2 <- r2.rpm.map(_.toDouble)\n    if rpm1 != 0\n  yield rpm2 / rpm1\n","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_483","timestamp":1745347837128,"code":"case class Player(id: Int, name: String, avatar: Option[String])\n\nval player1 = Player(1, \"Anna\", Some(\"wizard.png\"))\nval player2 = Player(2, \"Ben\", None)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_485","timestamp":1745347837128,"code":"def findLobby(lobbies: List[Lobby], code: String): Option[Lobby] =\n  lobbies.find(_.code == code)\n\ncase class Lobby(code: String, host: Player)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_487","timestamp":1745347837128,"code":"val maybeAvatar: Option[String] = Some(\"dragon.png\")\n\nval avatarToShow = maybeAvatar.getOrElse(\"default.png\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_489","timestamp":1745347837128,"code":"case class LobbySettings(maxPlayers: Int, enableChat: Boolean)\n\nval defaultSettings = LobbySettings(8, true)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_491","timestamp":1745347837129,"code":"import scala.util.Try\n\ndef parsePlayerId(s: String): Try[Int] =\n  Try(s.toInt)\n\nval result = parsePlayerId(\"12345\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_493","timestamp":1745347837129,"code":"def getPlayerName(player: Option[Player]): String =\n  player.map(_.name).getOrElse(\"Guest\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_495","timestamp":1745347837129,"code":"case class VRDevice(id: String, firmwareVersion: Option[String])\n\nval deviceInfo = VRDevice(\"Q2-xx\", None)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_497","timestamp":1745347837129,"code":"def getLobbyHost(lobby: Lobby): Option[Player] =\n  Option(lobby.host)\n\n// Assumes Lobby has non-null host (for demo), in practice host would be Option[Player]","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_499","timestamp":1745347837129,"code":"import scala.util.{Try, Success, Failure}\n\ndef connectToLobby(addr: String): Either[String, Lobby] =\n  Try(Lobby(addr, Player(0, \"Host\", None))) match\n    case Success(lobby) => Right(lobby)\n    case Failure(_)     => Left(\"Failed to connect.\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_501","timestamp":1745347837129,"code":"case class LobbyInfo(code: String, players: List[Player], isPrivate: Boolean)\n\nval publicLobby = LobbyInfo(\"ABC123\", Nil, false)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_503","timestamp":1745347837129,"code":"def findPlayerByName(players: List[Player], name: String): Option[Player] =\n  players.find(_.name == name)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_505","timestamp":1745347837129,"code":"case class VRRoom(name: String, capacity: Int, password: Option[String])\n\nval openRoom = VRRoom(\"Space Arena\", 10, None)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_507","timestamp":1745347837129,"code":"case class LobbyInvite(sender: Player, code: String)\ndef acceptInvite(invite: Option[LobbyInvite]): Either[String, String] =\n  invite match\n    case Some(inv) => Right(s\"Joined lobby with code: ${inv.code}\")\n    case None      => Left(\"No invite found.\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_509","timestamp":1745347837129,"code":"def safeGetRoomPassword(room: VRRoom): String =\n  room.password.getOrElse(\"No Password\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_511","timestamp":1745347837130,"code":"case class VoiceChat(sessionId: String, participants: List[Player])\n\ndef addParticipant(vc: VoiceChat, player: Player): VoiceChat =\n  vc.copy(participants = vc.participants :+ player)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_513","timestamp":1745347837130,"code":"def getFirmwareOrUnknown(device: VRDevice): String =\n  device.firmwareVersion.getOrElse(\"unknown\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_515","timestamp":1745347837130,"code":"import scala.util.Try\n\ndef parseMaxPlayers(config: Map[String, String]): Try[Int] =\n  Try(config(\"maxPlayers\").toInt)\n\nval parsed = parseMaxPlayers(Map(\"maxPlayers\" -> \"8\"))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_517","timestamp":1745347837130,"code":"case class LobbyEvent(eventType: String, player: Option[Player])\n\nval joinEvent = LobbyEvent(\"join\", Some(player1))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_519","timestamp":1745347837130,"code":"def removePlayer(lobby: LobbyInfo, playerId: Int): LobbyInfo =\n  lobby.copy(players = lobby.players.filterNot(_.id == playerId))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_521","timestamp":1745347837130,"code":"def maybeGetAvatar(player: Player): String =\n  player.avatar match\n    case Some(avatarUrl) => avatarUrl\n    case None            => \"default.png\"","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_503","timestamp":1745347857285,"code":"case class Employee(id: Int, name: String, hourlyRate: Double)\n\nval john = Employee(1, \"John Doe\", 20.5)\nprintln(john)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_505","timestamp":1745347857285,"code":"case class ClockIn(employeeId: Int, time: java.time.LocalDateTime)\n\ndef getLastClockIn(employeeId: Int, logs: List[ClockIn]): Option[ClockIn] =\n  logs.filter(_.employeeId == employeeId).sortBy(_.time).lastOption\n\nval logs = List(ClockIn(1, java.time.LocalDateTime.now.minusHours(2)))\nprintln(getLastClockIn(1, logs))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_507","timestamp":1745347857285,"code":"case class TimeEntry(employeeId: Int, start: java.time.LocalDateTime, end: Option[java.time.LocalDateTime])\n\ndef duration(entry: TimeEntry): Option[Long] =\n  entry.end.map(endTime => java.time.Duration.between(entry.start, endTime).toMinutes)\n\nval entry = TimeEntry(2, java.time.LocalDateTime.now.minusHours(6), None)\nprintln(duration(entry))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_509","timestamp":1745347857286,"code":"import scala.util.Try\n\ndef parseHoursWorked(input: String): Try[Double] =\n  Try(input.trim.toDouble)\n\nprintln(parseHoursWorked(\" 8.5 \")) // Success(8.5)\nprintln(parseHoursWorked(\"oops\"))  // Failure","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_511","timestamp":1745347857286,"code":"case class Shift(employeeId: Int, date: java.time.LocalDate, hoursWorked: Double)\n\nval shift = Shift(4, java.time.LocalDate.of(2024,6,1), 7.5)\nprintln(shift)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_513","timestamp":1745347857286,"code":"def findEmployeeById(id: Int, employees: List[Employee]): Option[Employee] =\n  employees.find(_.id == id)\n\nval emps = List(Employee(3,\"Alice\",18), Employee(4,\"Bob\",22))\nprintln(findEmployeeById(4, emps).map(_.name))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_515","timestamp":1745347857286,"code":"import scala.util.Try\n\ndef parseTime(str: String): Either[String, java.time.LocalTime] =\n  Try(java.time.LocalTime.parse(str)).toEither.left.map(_ => s\"Invalid time format: $str\")\n\nprintln(parseTime(\"08:30\"))  // Right(08:30)\nprintln(parseTime(\"hello\"))  // Left(Invalid time format: hello)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_517","timestamp":1745347857286,"code":"case class OvertimeRecord(employeeId: Int, week: Int, overtimeHours: Option[Double])\n\ndef overtimeToString(ot: OvertimeRecord): String = ot.overtimeHours match\n  case Some(hours) => s\"Overtime: $hours hours\"\n  case None => \"No overtime\"\n\nprintln(overtimeToString(OvertimeRecord(10,23,Some(5.5))))\nprintln(overtimeToString(OvertimeRecord(11,23,None)))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_519","timestamp":1745347857286,"code":"def calculateDailyPay(entry: TimeEntry, rate: Double): Option[Double] =\n  duration(entry).map(_ / 60.0 * rate)\n\nval pay = calculateDailyPay(TimeEntry(7, java.time.LocalDateTime.now.minusHours(8), Some(java.time.LocalDateTime.now)), 25.0)\nprintln(pay)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_521","timestamp":1745347857286,"code":"def safeSumHours(entries: List[Double]): Either[String, Double] =\n  if entries.exists(_ < 0) then Left(\"Negative value found\")\n  else Right(entries.sum)\n\nprintln(safeSumHours(List(8.0,7.5,6))) // Right(21.5)\nprintln(safeSumHours(List(8.0,-7.5,6))) // Left(\"Negative value found\")","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_523","timestamp":1745347857286,"code":"case class ProjectAssignment(employeeId: Int, project: String, hoursSpent: Option[Double])\n\nval pa = ProjectAssignment(8, \"TrackerRefactor\", None)\nprintln(pa)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_525","timestamp":1745347857287,"code":"def parseEntry(line: String): Either[String, TimeEntry] =\n  line.split(\",\") match\n    case Array(id, start, end) =>\n      for\n        eid <- Try(id.toInt).toEither.left.map(_ => \"Invalid ID\")\n        st <- Try(java.time.LocalDateTime.parse(start)).toEither.left.map(_ => \"Invalid start\")\n        et <- if end.trim.nonEmpty then Try(Some(java.time.LocalDateTime.parse(end))).toEither.left.map(_ => \"Invalid end\") else Right(None)\n      yield TimeEntry(eid, st, et)\n    case _ => Left(\"Invalid line format\")\n\nprintln(parseEntry(\"1,2024-06-01T09:00,2024-06-01T17:00\"))\nprintln(parseEntry(\"oops\"))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_527","timestamp":1745347857287,"code":"def getTotalHours(times: List[TimeEntry]): Double =\n  times.flatMap(duration).map(_ / 60.0).sum\n\nval times = List(\n  TimeEntry(1, java.time.LocalDateTime.now.minusHours(8), Some(java.time.LocalDateTime.now)),\n  TimeEntry(1, java.time.LocalDateTime.now.minusDays(1).minusHours(7), Some(java.time.LocalDateTime.now.minusDays(1)))\n)\nprintln(getTotalHours(times))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_529","timestamp":1745347857287,"code":"case class Absence(employeeId: Int, date: java.time.LocalDate, reason: Option[String])\n\nval abs = Absence(9, java.time.LocalDate.now, Some(\"Sick leave\"))\nprintln(abs)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_531","timestamp":1745347857287,"code":"def findOpenEntry(employeeId: Int, entries: List[TimeEntry]): Option[TimeEntry] =\n  entries.find(e => e.employeeId == employeeId && e.end.isEmpty)\n\nval allEntries = List(\n  TimeEntry(2, java.time.LocalDateTime.now.minusHours(5), None)\n)\nprintln(findOpenEntry(2, allEntries))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_533","timestamp":1745347857287,"code":"case class CorrectionRequest(employeeId: Int, date: java.time.LocalDate, comments: Option[String], approved: Boolean)\n\ndef approvalText(req: CorrectionRequest) =\n  s\"Approval: ${if req.approved then \"Yes\" else \"No\"} - ${req.comments.getOrElse(\"No comment\") }\"\n\nval req = CorrectionRequest(13, java.time.LocalDate.now, None, false)\nprintln(approvalText(req))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_535","timestamp":1745347857287,"code":"case class WorkedInterval(from: java.time.LocalTime, to: java.time.LocalTime)\ndef intervalMinutes(vi: WorkedInterval): Long =\n  java.time.Duration.between(vi.from, vi.to).toMinutes\n\nval vi = WorkedInterval(java.time.LocalTime.of(9,30), java.time.LocalTime.of(17,0))\nprintln(intervalMinutes(vi))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_537","timestamp":1745347857287,"code":"def getOvertime(hours: Double): Either[String, Double] =\n  if hours < 0 then Left(\"Negative hours!\")\n  else if hours > 8 then Right(hours - 8)\n  else Right(0.0)\n\nprintln(getOvertime(10)) // Right(2.0)\nprintln(getOvertime(-2)) // Left(\"Negative hours!\")","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_539","timestamp":1745347857287,"code":"def maybeGetSupervisor(employee: Employee, supervisors: Map[Int, Employee]): Option[Employee] =\n  supervisors.get(employee.id)\n\nval supervisors = Map(1 -> Employee(1,\"John\",28))\nprintln(maybeGetSupervisor(Employee(1,\"John\",28), supervisors))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_541","timestamp":1745347857288,"code":"import scala.util.Try\n\ndef safeLocalDate(str: String): Option[java.time.LocalDate] =\n  Try(java.time.LocalDate.parse(str)).toOption\n\nval dateOpt = safeLocalDate(\"2024-06-12\")\nprintln(dateOpt)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_523","timestamp":1745347875017,"code":"case class User(id: Int, name: String, email: Option[String])\n\nval user = User(1, \"Alice\", Some(\"alice@example.com\"))\nval emailToSend = user.email.getOrElse(\"no-reply@weatheralerts.com\")\nprintln(s\"Sending weather alert to $emailToSend\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_525","timestamp":1745347875017,"code":"case class Location(city: String, latitude: Double, longitude: Double)\n\ndef getLocation(city: String): Option[Location] =\n  if city.nonEmpty then Some(Location(city, 40.71, -74.00)) else None\n\ngetLocation(\"\") match\n  case Some(loc) => println(s\"Location found: $loc\")\n  case None => println(\"City not found\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_527","timestamp":1745347875018,"code":"import scala.util.Try\n\ndef parseTemperature(tempStr: String): Try[Double] =\n  Try(tempStr.toDouble)\n\nparseTemperature(\"21.5\").map(_ + 1)\nparseTemperature(\"oops!\").recover { case _ => 0.0 }","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_529","timestamp":1745347875018,"code":"case class WeatherAlert(level: String, description: String)\n\nval alert = WeatherAlert(\"Severe\", \"Thunderstorm incoming\")\nprintln(s\"Alert: ${alert.level} -- ${alert.description}\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_531","timestamp":1745347875018,"code":"case class Notification(userId: Int, message: String, sent: Boolean)\n\nval pending = Notification(42, \"Flood warning\", false)\nval sent = pending.copy(sent = true)\nprintln(sent)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_533","timestamp":1745347875018,"code":"def getUserEmail(userId: Int): Option[String] =\n  if userId == 1 then Some(\"bob@alerts.com\") else None\n\ndef sendAlert(email: String): Unit = println(s\"Alert sent to $email\")\n\ngetUserEmail(2).foreach(sendAlert)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_535","timestamp":1745347875018,"code":"import scala.util.{Try, Success, Failure}\n\ndef fetchWeatherData(apiKey: String): Try[String] =\n  if apiKey.nonEmpty then Success(\"data-json\") else Failure(new Exception(\"Missing API key\"))\n\nfetchWeatherData(\"\") match\n  case Success(data) => println(s\"Data: $data\")\n  case Failure(ex) => println(s\"Failure: ${ex.getMessage}\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_537","timestamp":1745347875018,"code":"case class AlertConfig(notifyBySMS: Boolean, notifyByEmail: Boolean)\n\nval config = AlertConfig(notifyBySMS = false, notifyByEmail = true)\nif config.notifyByEmail then println(\"Send email notification\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_539","timestamp":1745347875018,"code":"case class Recipient(name: String, email: Option[String], phone: Option[String])\n\nval recipient = Recipient(\"Dana\", None, Some(\"+123456\"))\nval msg = recipient.phone.map(ph => s\"Text sent to $ph\").getOrElse(\"Can't send SMS\")\nprintln(msg)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_541","timestamp":1745347875018,"code":"def safeDivideAlerts(totalAlerts: Int, days: Int): Either[String, Double] =\n  if days == 0 then Left(\"Days must be > 0\") else Right(totalAlerts.toDouble / days)\n\nsafeDivideAlerts(42, 0) match\n  case Right(avg) => println(s\"Avg/day: $avg\")\n  case Left(err)  => println(s\"Error: $err\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_543","timestamp":1745347875018,"code":"case class AlertType(name: String)\n\ndef alertSeverity(alert: AlertType): Option[String] =\n  alert.name match\n    case \"Warning\" => Some(\"High\")\n    case \"Info\" => Some(\"Low\")\n    case _ => None\n\nalertSeverity(AlertType(\"Info\")).foreach(println)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_545","timestamp":1745347875019,"code":"import scala.util.Try\n\ncase class Weather(data: String)\n\ndef parseWeather(json: String): Try[Weather] =\n  Try(if json.trim.nonEmpty then Weather(json) else throw new Exception(\"Empty\"))\n\nparseWeather(\"\").recover { case _ => Weather(\"unknown\") }","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_547","timestamp":1745347875019,"code":"case class GeoPoint(lat: Double, lon: Double)\n\nval maybePoint: Option[GeoPoint] = Some(GeoPoint(51.5, -0.08))\nval lat = maybePoint.map(_.lat).getOrElse(0.0)\nprintln(s\"Latitude: $lat\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_549","timestamp":1745347875019,"code":"def trySendSMS(phone: Option[String], msg: String): Either[String, String] =\n  phone match\n    case Some(p) if p.nonEmpty => Right(s\"SMS sent to $p: $msg\")\n    case _ => Left(\"No valid phone number\")\n\ntrySendSMS(None, \"Storm alert!\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_551","timestamp":1745347875019,"code":"case class AlertLog(alertId: Int, timestamp: Long, success: Boolean)\n\nval logs = List(\n  AlertLog(1, 1680532819000L, true),\n  AlertLog(2, 1680532820000L, false)\n)\nlogs.filter(_.success).foreach(log => println(s\"Alert ${log.alertId} delivered\"))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_553","timestamp":1745347875019,"code":"import scala.util.Try\n\ndef parseWindSpeed(str: String): Option[Int] =\n  Try(str.toInt).toOption\n\nparseWindSpeed(\"20\").foreach(ws => println(s\"Wind speed: $ws km/h\"))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_555","timestamp":1745347875019,"code":"case class WeatherEvent(eventType: String, severity: Int)\n\ndef isCritical(event: WeatherEvent): Boolean =\n  event match\n    case WeatherEvent(_, sev) if sev > 7 => true\n    case _ => false\n\nprintln(isCritical(WeatherEvent(\"Hail\", 8)))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_557","timestamp":1745347875019,"code":"case class UserPrefs(email: Option[String], sms: Option[String], push: Option[String])\n\ndef preferredContact(up: UserPrefs): Option[String] = up.push.orElse(up.sms).orElse(up.email)\n\nval prefs = UserPrefs(None, Some(\"23456\"), None)\nprintln(preferredContact(prefs))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_559","timestamp":1745347875019,"code":"import scala.util.Try\n\ndef parseAlertLevel(level: String): Either[String, Int] =\n  Try(level.toInt).toEither.left.map(_ => s\"Invalid alert level: $level\")\n\nparseAlertLevel(\"XX\") match\n  case Right(n) => println(s\"Parsed: $n\")\n  case Left(msg) => println(s\"Error: $msg\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_561","timestamp":1745347875019,"code":"case class NotificationResult(alertId: Int, status: Either[String, String])\n\nval result = NotificationResult(1002, Right(\"Delivered\"))\nresult.status match\n  case Right(msg) => println(s\"Success: $msg\")\n  case Left(err)  => println(s\"Fail: $err\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_543","timestamp":1745347892859,"code":"// 1. Data structure for a payment attempt using case class\ncase class PaymentAttempt(userId: String, amount: BigDecimal, currency: String, ip: Option[String])","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_545","timestamp":1745347892859,"code":"// 2. Using Option to safely extract an email from payment metadata\nval metadata: Map[String, String] = Map(\"email\" -> \"user@example.com\")\nval maybeEmail: Option[String] = metadata.get(\"email\")","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_547","timestamp":1745347892860,"code":"// 3. Pattern matching to handle missing IP address\ndef extractIp(attempt: PaymentAttempt): String = attempt.ip match {\n  case Some(ip) => ip\n  case None => \"unknown-ip\"\n}","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_549","timestamp":1745347892860,"code":"// 4. Using Either to parse a transaction string (recoverable error)\ndef parseTransaction(raw: String): Either[String, PaymentAttempt] =\n  raw.split(\",\").toList match\n    case userId :: amt :: curr :: ipOpt :: Nil =>\n      Either.catchOnly[NumberFormatException](BigDecimal(amt)).toEither match\n        case Right(amount) => Right(PaymentAttempt(userId, amount, curr, Option(ipOpt).filter(_.nonEmpty)))\n        case Left(_) => Left(\"Invalid amount format.\")\n    case _ => Left(\"Malformed transaction string.\")","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_551","timestamp":1745347892860,"code":"// 5. Using Try to handle possible failure in risk assessment calculation\nimport scala.util.Try\ndef calculateRiskScore(payment: PaymentAttempt): Try[Int] = Try {\n  // Dummy calculation that could throw\n  (100 * payment.amount).toInt\n}","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_553","timestamp":1745347892860,"code":"// 6. Chaining Option with map to transform payment userId\nval payment: PaymentAttempt = PaymentAttempt(\"user1\", 120, \"USD\", None)\nval maskedUserId: Option[String] = Option(payment.userId).map(_.takeRight(4))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_555","timestamp":1745347892860,"code":"// 7. Using getOrElse to provide a default fraud score when missing\ndef getFraudScore(paymentId: String, scores: Map[String, Double]): Double =\n  scores.get(paymentId).getOrElse(0.0)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_557","timestamp":1745347892860,"code":"// 8. Simple case class for a fraud alert\ncase class FraudAlert(paymentId: String, reason: String, timestamp: Long)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_559","timestamp":1745347892861,"code":"// 9. Using Option.fold to handle optional reason in alert creation\ndef createFraudAlert(paymentId: String, reasonOpt: Option[String]): FraudAlert =\n  FraudAlert(paymentId, reasonOpt.fold(\"unknown reason\")(identity), System.currentTimeMillis())","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_561","timestamp":1745347892861,"code":"// 10. Using Either for rule engine result\ndef applyFraudRule(payment: PaymentAttempt): Either[String, Boolean] =\n  if payment.amount > 10000 then Right(true)\n  else if payment.amount < 0 then Left(\"Invalid amount\")\n  else Right(false)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_563","timestamp":1745347892861,"code":"// 11. Safely extracting deviceId from optional metadata\nval userMetadata: Map[String, String] = Map()\nval deviceId: String = userMetadata.get(\"deviceId\").getOrElse(\"no-device\")","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_565","timestamp":1745347892861,"code":"// 12. Chaining Optionals to check if IP appears in blacklist\nval ipBlacklist: Set[String] = Set(\"1.2.3.4\", \"4.3.2.1\")\ndef checkIpBlacklist(attempt: PaymentAttempt): Boolean =\n  attempt.ip.flatMap(ip => Option.when(ipBlacklist.contains(ip))(true)).getOrElse(false)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_567","timestamp":1745347892861,"code":"// 13. Using Try + Option together for safe parsing\nimport scala.util.Try\ndef safeAmount(str: String): Option[BigDecimal] = Try(BigDecimal(str)).toOption","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_569","timestamp":1745347892861,"code":"// 14. Case class for risk model features\ncase class RiskFeatures(cardCountry: Option[String], isProxyIp: Boolean, deviceAgeDays: Option[Int])","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_571","timestamp":1745347892861,"code":"// 15. Composing several Options to make a fraud decision\ndef isHighRisk(features: RiskFeatures): Boolean =\n  features.cardCountry.contains(\"RU\") || features.isProxyIp || features.deviceAgeDays.exists(_ < 7)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_573","timestamp":1745347892861,"code":"// 16. Using .collect on Option to apply partial function\nval geoOpt: Option[String] = Some(\"UA\")\nval riskyGeo: Option[String] = geoOpt.collect { case \"UA\" | \"RU\" => \"high-risk-region\" }","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_575","timestamp":1745347892862,"code":"// 17. Using Either for validation of payment data\ndef validatePayment(payment: PaymentAttempt): Either[List[String], PaymentAttempt] =\n  val errors = List(\n    Option.when(payment.amount <= 0)(\"Amount must be positive\"),\n    Option.when(payment.currency.isBlank)(\"Currency required\")\n  ).flatten\n  if errors.isEmpty then Right(payment) else Left(errors)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_577","timestamp":1745347892862,"code":"// 18. Using Option.orElse to try another source for customer ID\ndef findCustomerId(data: Map[String, String], backup: Map[String, String]): Option[String] =\n  data.get(\"customerId\").orElse(backup.get(\"customerId\"))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_579","timestamp":1745347892862,"code":"// 19. Implementing a PaymentEvent sealed trait for ADT modeling\nsealed trait PaymentEvent\ncase class PaymentReceived(id: String, amount: BigDecimal) extends PaymentEvent\ncase class PaymentBlocked(id: String, reason: String) extends PaymentEvent","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_581","timestamp":1745347892862,"code":"// 20. Simple function using Option.flatMap for chained lookups\ndef getFraudReason(paymentId: String, reasonsDb: Map[String, Option[String]]): Option[String] =\n  reasonsDb.get(paymentId).flatMap(identity)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_563","timestamp":1745347907579,"code":"// 1. Defining an immutable Patient data structure\ncase class Patient(id: String, name: String, age: Int)","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_565","timestamp":1745347907579,"code":"// 2. Representing a possibly missing DICOM tag (metadata field)\ndef getDicomTagValue(tags: Map[String, String], key: String): Option[String] =\n  tags.get(key)","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_567","timestamp":1745347907579,"code":"// 3. Mapping over Option to parse a study date\ndef parseStudyDate(optDate: Option[String]): Option[java.time.LocalDate] =\n  optDate.map(java.time.LocalDate.parse)","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_569","timestamp":1745347907580,"code":"// 4. Using Either to handle recoverable image loading failures\nimport scala.util.Try\n\ndef loadImage(path: String): Either[String, Array[Byte]] =\n  Try(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(path)))\n    .toEither\n    .left.map(_.getMessage)","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_571","timestamp":1745347907580,"code":"// 5. Pattern matching on Option for image window/level\nval window: Option[Int] = Some(80)\nwindow match\n  case Some(w) => println(s\"Window level set to $w\")\n  case None    => println(\"No window level provided.\")","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_573","timestamp":1745347907580,"code":"// 6. Combining Option values to build a Study\ncase class Study(id: String, description: String)\nval optId: Option[String] = Some(\"S12345\")\nval optDesc: Option[String] = None\nval optStudy: Option[Study] =\n  for id <- optId; desc <- optDesc yield Study(id, desc)","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_575","timestamp":1745347907580,"code":"// 7. Handling Maybe Missing Series Description\ndef printSeriesDescription(series: Map[String, String]): Unit =\n  series.get(\"SeriesDescription\") match\n    case Some(desc) => println(s\"Description: $desc\")\n    case None => println(\"Description unavailable.\")","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_577","timestamp":1745347907580,"code":"// 8. Using Try to parse image dimensions from a string\ndef parseDimensions(dimLine: String): Either[String, (Int, Int)] =\n  Try {\n    val parts = dimLine.split(\"x\").map(_.trim.toInt)\n    (parts(0), parts(1))\n  }.toEither.left.map(_ => s\"Failed to parse ($dimLine)\")","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_579","timestamp":1745347907580,"code":"// 9. Defining a simple case class for an Image Slice\ncase class ImageSlice(index: Int, data: Array[Byte], location: Option[Double])","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_581","timestamp":1745347907580,"code":"// 10. Safe access to image pixel data\nval maybeData: Option[Array[Byte]] = None\nval length: Int = maybeData.map(_.length).getOrElse(0)","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_583","timestamp":1745347907580,"code":"// 11. Wrapping file operations in Try\ndef loadPatientList(filepath: String): Either[String, List[String]] =\n  import scala.util.Using\n  import scala.io.Source\n  Using(Source.fromFile(filepath)) { src => src.getLines().toList }\n    .toEither.left.map(_.getMessage)","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_585","timestamp":1745347907581,"code":"// 12. Defining ROI with Option for optional label\ncase class ROI(mask: Array[Array[Int]], label: Option[String])","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_587","timestamp":1745347907581,"code":"// 13. Chaining Optionally present zoom and pan settings\ndef computeViewport(zoom: Option[Double], pan: Option[(Int, Int)]): String =\n  (zoom, pan) match\n    case (Some(z), Some((x, y))) => s\"Zoom: $z, Pan: ($x, $y)\"\n    case (Some(z), None)         => s\"Zoom: $z, No pan applied\"\n    case _                      => \"Default viewport used\"","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_589","timestamp":1745347907581,"code":"// 14. Handling recoverable parsing error for modality\ndef getModality(mod: String): Either[String, String] =\n  val allowed = Set(\"CT\",\"MR\",\"XRAY\")\n  if allowed.contains(mod) then Right(mod) else Left(s\"Invalid modality: $mod\")","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_591","timestamp":1745347907581,"code":"// 15. Defining a case class with default argument for optional field\ncase class Series(id: String, description: Option[String] = None)","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_593","timestamp":1745347907581,"code":"// 16. Composing Option and Try for parsing slice location\ndef readSliceLocation(raw: Option[String]): Option[Double] =\n  raw.flatMap { s =>\n    scala.util.Try(s.toDouble).toOption\n  }","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_595","timestamp":1745347907581,"code":"// 17. Transforming error with custom message in Either\ndef openImage(file: String): Either[String, Array[Byte]] =\n  scala.util.Try(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(file))).toEither.left.map(_ => s\"Cannot open $file\")","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_597","timestamp":1745347907582,"code":"// 18. Using Option.fold to handle missing patient comments\nval patientComment: Option[String] = None\nval displayComment = patientComment.fold(\"No comments.\")(identity)","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_599","timestamp":1745347907582,"code":"// 19. Optionally creating a ViewerSettings object\ncase class ViewerSettings(window: Option[Int], level: Option[Int])\ndef adjustSettings(w: Option[Int], l: Option[Int]): ViewerSettings =\n  ViewerSettings(w, l)","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_601","timestamp":1745347907582,"code":"// 20. Pattern match on Either for image load result\ndef showImage(path: String): Unit =\n  loadImage(path) match\n    case Right(data) => println(s\"Loaded image with ${data.length} bytes.\")\n    case Left(err)   => println(s\"Error: $err\")","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_583","timestamp":1745347918065,"code":"// 1. Case class to represent a payment link\ncase class PaymentLink(id: String, amount: BigDecimal, currency: String, status: String)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_585","timestamp":1745347918065,"code":"// 2. Using Option to handle missing payment link\nval maybeLink: Option[PaymentLink] = getPaymentLinkById(\"abc123\")\nmaybeLink match {\n  case Some(link) => println(s\"Found link: $link\")\n  case None => println(\"Payment link not found\")\n}","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_587","timestamp":1745347918065,"code":"// 3. Using getOrElse with Option\nval defaultLink = PaymentLink(\"0\", 0, \"USD\", \"inactive\")\nval activeLink = maybeLink.getOrElse(defaultLink)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_589","timestamp":1745347918066,"code":"// 4. Function that returns Either for recoverable error\nimport scala.util.Try\n\ndef parseAmount(input: String): Either[String, BigDecimal] =\n  Try(BigDecimal(input)).toEither.left.map(_ => s\"Invalid amount: $input\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_591","timestamp":1745347918066,"code":"// 5. Composing Option with map\nval currencyCode: Option[String] = maybeLink.map(_.currency)\nval code = currencyCode.getOrElse(\"UNKNOWN\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_593","timestamp":1745347918066,"code":"// 6. Using Option chaining to access nested fields\ncase class Owner(name: String, email: String)\ncase class PaymentLink(id: String, owner: Option[Owner])\n\ndef getOwnerEmail(link: PaymentLink): Option[String] =\n  link.owner.map(_.email)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_595","timestamp":1745347918066,"code":"// 7. Returning Option in service fetch\nclass PaymentLinkService:\n  def findLinkById(id: String): Option[PaymentLink] = ???","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_597","timestamp":1745347918066,"code":"// 8. Combining Option and Either\nval maybeAmount = maybeLink.flatMap(link => parseAmount(link.amount.toString).toOption)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_599","timestamp":1745347918066,"code":"// 9. Pattern matching on Either\nval result: Either[String, PaymentLink] = Right(PaymentLink(\"id1\", 5, \"USD\", \"active\"))\nresult match {\n  case Right(link) => println(s\"Success: $link\")\n  case Left(error) => println(s\"Error: $error\")\n}","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_601","timestamp":1745347918066,"code":"// 10. Default value with Option.orElse\nval backupLink: Option[PaymentLink] = None\nval firstAvailable = maybeLink.orElse(backupLink)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_603","timestamp":1745347918066,"code":"// 11. Try for interaction with external API\nimport scala.util.Try\n\ndef callExternalPaymentApi(link: PaymentLink): Try[String] =\n  Try {\n    // pretend API call\n    \"ok\"\n  }","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_605","timestamp":1745347918067,"code":"// 12. Using fold with Option\ndef getLinkStatus(link: Option[PaymentLink]): String =\n  link.fold(\"unknown\")(_.status)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_607","timestamp":1745347918067,"code":"// 13. Either with for-comprehension\nval maybeId: Option[String] = Some(\"xyz\")\ndef fetchAndCheck(id: String): Either[String, PaymentLink] =\n  Right(PaymentLink(id, 10, \"USD\", \"pending\"))\n\nval checked: Either[String, PaymentLink] = for\n  id <- maybeId.toRight(\"Missing id\")\n  link <- fetchAndCheck(id)\nyield link","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_609","timestamp":1745347918067,"code":"// 14. Simple immutable data structure\nenum PaymentStatus:\n  case Active, Inactive, Expired, Paid\n\ncase class WixPaymentLink(id: String, amount: BigDecimal, status: PaymentStatus)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_611","timestamp":1745347918067,"code":"// 15. Option.foreach for side effects\nmaybeLink.foreach(link => println(s\"Processing payment link ${link.id}\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_613","timestamp":1745347918067,"code":"// 16. Try to Option conversion\ndef fetchStatusSafe(id: String): Try[String] = Try {\n  if id.nonEmpty then \"active\"\n  else throw new Exception(\"Empty id\")\n}\nval statusOpt: Option[String] = fetchStatusSafe(\"xyz\").toOption","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_615","timestamp":1745347918067,"code":"// 17. Creating a PaymentLink only if all values present\nval maybeId: Option[String] = Some(\"pl123\")\nval maybeAmount: Option[BigDecimal] = Some(100)\nval maybeCurrency: Option[String] = Some(\"USD\")\nval paymentLinkOpt =\n  for\n    id <- maybeId\n    amount <- maybeAmount\n    currency <- maybeCurrency\n  yield PaymentLink(id, amount, currency, \"active\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_617","timestamp":1745347918067,"code":"// 18. Using collect for partial Option transform\nval linkOpt: Option[PaymentLink] = Some(PaymentLink(\"x\", 10, \"USD\", \"pending\"))\nval onlyActive: Option[PaymentLink] = linkOpt.collect {\n  case link if link.status == \"active\" => link\n}","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_619","timestamp":1745347918067,"code":"// 19. Defining a repository with Option result\ntrait PaymentLinkRepository:\n  def findByOwner(ownerEmail: String): Option[PaymentLink]","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_621","timestamp":1745347918067,"code":"// 20. Handling a list of Option[PaymentLink]\nval links: List[Option[PaymentLink]] = List(Some(PaymentLink(\"a\", 5, \"USD\", \"active\")), None)\nval actives = links.flatten.filter(_.status == \"active\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_603","timestamp":1745347930359,"code":"// 1. Option for user-supplied translation text\nval maybeSourceText: Option[String] = Option(request.get(\"sourceText\"))\nval textToTranslate = maybeSourceText.getOrElse(\"[no text provided]\")\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_605","timestamp":1745347930359,"code":"// 2. Case class for a chat message\ncase class ChatMessage(user: String, text: String, language: String)\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_607","timestamp":1745347930359,"code":"// 3. Option with map for language detection\nval maybeLang = Option(api.detectLanguage(text))\nval detectedLang = maybeLang.map(_.toUpperCase).getOrElse(\"UNKNOWN\")\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_609","timestamp":1745347930359,"code":"// 4. Try for translation API call\nimport scala.util.{Try, Success, Failure}\nval translationResult: Try[String] = Try(api.translate(\"hello\", \"es\"))\ntranslationResult match {\n  case Success(translated) => println(s\"Translated: $translated\")\n  case Failure(err) => println(s\"Error: ${err.getMessage}\")\n}\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_611","timestamp":1745347930359,"code":"// 5. Case class with Option field\ncase class TranslationResult(original: String, translated: String, detectedLanguage: Option[String])\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_613","timestamp":1745347930360,"code":"// 6. Using Either for error handling\ndef parseUserInput(input: String): Either[String, (String, String)] = {\n  input.split(\"::\") match {\n    case Array(text, lang) => Right((text, lang))\n    case _ => Left(\"Input format invalid. Use '<text>::<lang>'\")\n  }\n}\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_615","timestamp":1745347930360,"code":"// 7. Composing Options for target language selection\nval userLang: Option[String] = user.profile.preferredLang\nval fallbackLang = \"en\"\nval targetLang = userLang.getOrElse(fallbackLang)\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_617","timestamp":1745347930360,"code":"// 8. Case class for supported language\nenum Language:\n  case English, Spanish, French, Unknown\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_619","timestamp":1745347930360,"code":"// 9. Option with foreach for logging\nmaybeSourceText.foreach(text => logger.info(s\"Received text: $text\"))\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_621","timestamp":1745347930360,"code":"// 10. Try with map for chaining translation steps\nval translated: Try[String] = Try(api.translate(text, targetLang))\n  .map(_.capitalize)\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_623","timestamp":1745347930360,"code":"// 11. Pattern matching on Option for translation\nmaybeLang match {\n  case Some(lang) => println(s\"Language detected: $lang\")\n  case None => println(\"Could not detect language.\")\n}\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_625","timestamp":1745347930360,"code":"// 12. Case class for bot user info\ncase class User(id: Int, name: String, nativeLang: Language, profile: UserProfile)\ncase class UserProfile(preferredLang: Option[String])\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_627","timestamp":1745347930361,"code":"// 13. Defining a sealed trait for bot errors\nsealed trait BotError\ncase object ApiUnavailable extends BotError\ncase object UnsupportedLanguage extends BotError\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_629","timestamp":1745347930361,"code":"// 14. Either for API error return\ndef safeTranslate(text: String, to: String): Either[BotError, String] = {\n  if (!supportedLanguages.contains(to)) Left(UnsupportedLanguage)\n  else Try(api.translate(text, to)).toEither.left.map(_ => ApiUnavailable)\n}\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_631","timestamp":1745347930361,"code":"// 15. Option and map with custom response\nval greeting: Option[String] = chatService.findGreeting(lang)\ngreeting.map(_.toUpperCase).foreach(bot.sendMessage)\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_633","timestamp":1745347930361,"code":"// 16. Combining Options for multi-step logic\nval maybeUser = Option(findUserById(42))\nval maybeUserLang = maybeUser.flatMap(_.profile.preferredLang)\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_635","timestamp":1745347930361,"code":"// 17. Try recover for fallback translation\nval tr: Try[String] = Try(api.translate(text, \"fr\"))\nval fallbackTr = tr.recover { case _ => \"[Translation unavailable]\" }\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_637","timestamp":1745347930361,"code":"// 18. Pattern matching on Either for user feedback\nsafeTranslate(\"hello\", \"es\") match {\n  case Right(result) => println(result)\n  case Left(UnsupportedLanguage) => println(\"Language not supported.\")\n  case Left(ApiUnavailable) => println(\"Translation service not available.\")\n}\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_639","timestamp":1745347930362,"code":"// 19. Case class for logging history\ncase class TranslationLog(user: String, source: String, target: String, status: Either[BotError, String])\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_641","timestamp":1745347930362,"code":"// 20. Option and fold for custom response\nval responseText = maybeSourceText.fold(\"Please provide text to translate.\")(text => s\"You wrote: $text\")\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_623","timestamp":1745347942906,"code":"// Snippet 1: Simple immutable data class for measurement\ncase class EnergyReading(deviceId: String, kWh: Double)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_625","timestamp":1745347942906,"code":"// Snippet 2: Handling possible missing data using Option\ndef lastReading(readings: List[EnergyReading]): Option[EnergyReading] =\n  readings.lastOption","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_627","timestamp":1745347942907,"code":"// Snippet 3: Parsing a number using Try (recoverable error)\nimport scala.util.Try\n\ndef parseKWh(input: String): Try[Double] = Try(input.toDouble)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_629","timestamp":1745347942907,"code":"// Snippet 4: Using Either for error reporting\ndef parseDeviceId(id: String): Either[String, String] =\n  if id.nonEmpty then Right(id) else Left(\"Device ID is empty\")","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_631","timestamp":1745347942907,"code":"// Snippet 5: Combining Option and map for computations\ndef incrementKWh(opt: Option[EnergyReading]): Option[EnergyReading] =\n  opt.map(r => r.copy(kWh = r.kWh + 1))","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_633","timestamp":1745347942907,"code":"// Snippet 6: Chaining Options and folding\ndef readingDescription(reading: Option[EnergyReading]): String =\n  reading.map(r => s\"Device ${r.deviceId}: ${r.kWh} kWh\").getOrElse(\"No reading available\")","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_635","timestamp":1745347942907,"code":"// Snippet 7: Aggregated case class with Option field\ncase class RoomEnergy(room: String, averageKWh: Option[Double])","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_637","timestamp":1745347942907,"code":"// Snippet 8: Safe division with Either\ndef safeAvg(total: Double, count: Int): Either[String, Double] =\n  if count == 0 then Left(\"Cannot divide by zero\") else Right(total / count)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_639","timestamp":1745347942907,"code":"// Snippet 9: Pattern matching on Option\ndef deviceName(opt: Option[String]): String =\n  opt match\n    case Some(name) => name\n    case None       => \"Unknown device\"","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_641","timestamp":1745347942907,"code":"// Snippet 10: Nested case classes for dashboard data\ncase class DeviceInfo(id: String, name: String)\ncase class ConsumptionEntry(time: Long, reading: Double)\ncase class DeviceConsumption(device: DeviceInfo, entries: List[ConsumptionEntry])","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_643","timestamp":1745347942908,"code":"// Snippet 11: Using Option with flatMap to chain lookups\ndef findAndRead(deviceId: String, db: Map[String, Double]): Option[Double] =\n  db.get(deviceId).flatMap(value => if value > 0 then Some(value) else None)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_645","timestamp":1745347942908,"code":"// Snippet 12: Using traverse pattern for Option and List\ndef sumPresent(readings: List[Option[Double]]): Double =\n  readings.flatten.sum","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_647","timestamp":1745347942908,"code":"// Snippet 13: Parsing readings from strings with combine Try and Option\nimport scala.util.Try\n\ndef parseReading(device: String, value: String): Option[EnergyReading] =\n  Try(value.toDouble).toOption.map(EnergyReading(device, _))","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_649","timestamp":1745347942908,"code":"// Snippet 14: Using Option with getOrElse for default\ndef kWhOrZero(reading: Option[EnergyReading]): Double =\n  reading.map(_.kWh).getOrElse(0.0)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_651","timestamp":1745347942908,"code":"// Snippet 15: Recover from failed parsing with Try def\nimport scala.util.{Try, Success, Failure}\n\ndef handleParse(input: String): Double =\n  Try(input.toDouble) match\n    case Success(value) => value\n    case Failure(_)     => 0.0","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_653","timestamp":1745347942909,"code":"// Snippet 16: Case class for user-configurable thresholds\ncase class EnergyThreshold(deviceId: String, maxAllowed: Double)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_655","timestamp":1745347942909,"code":"// Snippet 17: Option, map, filter for alerts\ndef checkForAlert(reading: Option[EnergyReading], threshold: EnergyThreshold): Option[String] =\n  reading\n    .filter(_.deviceId == threshold.deviceId)\n    .filter(_.kWh > threshold.maxAllowed)\n    .map(r => s\"Alert: ${r.deviceId} exceeded threshold!\")","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_657","timestamp":1745347942909,"code":"// Snippet 18: Safely loading optional configuration\ndef getOptionalSetting(config: Map[String, String], key: String): Option[String] =\n  config.get(key)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_659","timestamp":1745347942909,"code":"// Snippet 19: Use Either for validating input data\ndef validateKWh(kWh: Double): Either[String, Double] =\n  if kWh >= 0 then Right(kWh) else Left(\"Energy value must be non-negative\")","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_661","timestamp":1745347942909,"code":"// Snippet 20: Encapsulate optional sensor details\ncase class SensorInfo(id: String, location: Option[String], lastActive: Option[Long])","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_643","timestamp":1745347964821,"code":"case class Vote(candidateId: String, timestamp: Long)\n\nval maybeVote: Option[Vote] = Some(Vote(\"alice\", 1689000000L))\nval voteCandidate: String = maybeVote.map(_.candidateId).getOrElse(\"unknown\")\nprintln(s\"Candidate: $voteCandidate\")","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_645","timestamp":1745347964822,"code":"case class Ballot(voterId: String, selections: List[String])\n\ndef firstSelection(ballot: Ballot): Option[String] =\n  ballot.selections.headOption\n\nval ballot = Ballot(\"v123\", List())\nprintln(firstSelection(ballot).getOrElse(\"No selection\"))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_647","timestamp":1745347964822,"code":"case class CountResult(candidateId: String, count: Int)\n\ndef safeDivideVotes(total: Int, districts: Int): Either[String, Int] =\n  if districts == 0 then Left(\"Division by zero\") else Right(total / districts)\n\nprintln(safeDivideVotes(200, 0))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_649","timestamp":1745347964822,"code":"case class InvalidBallot(reason: String)\ncase class ValidBallot(selection: String)\n\ndef validateBallot(selection: Option[String]): Either[InvalidBallot, ValidBallot] =\n  selection match\n    case Some(s) if s.nonEmpty => Right(ValidBallot(s))\n    case _ => Left(InvalidBallot(\"No selection made\"))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_651","timestamp":1745347964822,"code":"import scala.util.Try\n\ndef parseVoteCount(s: String): Try[Int] =\n  Try(s.toInt)\n\nval tryCount = parseVoteCount(\"52a\")\nprintf(\"Parse status: %s\\n\", tryCount) ","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_653","timestamp":1745347964822,"code":"case class Candidate(id: String, name: String)\nval candidates = List(Candidate(\"c1\", \"Alice\"), Candidate(\"c2\", \"Bob\"))\nval maybeAlice = candidates.find(_.name == \"Alice\")\nprintln(maybeAlice.getOrElse(Candidate(\"none\", \"No Candidate\")))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_655","timestamp":1745347964823,"code":"case class Tally(result: Map[String, Int])\ndef getWinner(tally: Tally): Option[String] =\n  tally.result.maxByOption(_._2).map(_._1)\n\nval result = Tally(Map(\"alice\" -> 15, \"bob\" -> 12))\nprintln(getWinner(result).getOrElse(\"No winner\"))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_657","timestamp":1745347964823,"code":"case class Election(name: String, ballots: List[Ballot])\ndef totalVotes(election: Election): Int =\n  election.ballots.flatMap(_.selections).size\n\nval emptyElection = Election(\"City Council\", List())\nprintln(totalVotes(emptyElection))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_659","timestamp":1745347964823,"code":"case class BallotBox(ballots: List[Ballot])\ndef findBallotByVoter(ballotBox: BallotBox, voterId: String): Option[Ballot] =\n  ballotBox.ballots.find(_.voterId == voterId)\n\nval box = BallotBox(List(Ballot(\"v1\", List(\"bob\")), Ballot(\"v2\", List(\"alice\"))))\nprintf(\"Found: %s\\n\", findBallotByVoter(box, \"v3\"))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_661","timestamp":1745347964823,"code":"import scala.util.Try\n\ndef readTotal(file: String): Try[Int] = Try {\n  scala.io.Source.fromFile(file).getLines().next().toInt\n}\n// Use: readTotal(\"tally.txt\").getOrElse(0)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_663","timestamp":1745347964823,"code":"case class Error(message: String)\ndef getVotes(candidate: String, voteMap: Map[String, Int]): Either[Error, Int] =\n  voteMap.get(candidate).toRight(Error(s\"Candidate $candidate not found\"))\n\nval votes = Map(\"alice\" -> 10)\nprintf(\"Votes: %s\\n\", getVotes(\"bob\", votes))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_665","timestamp":1745347964823,"code":"case class RaceResult(status: Option[String])\nval result = RaceResult(None)\nval prettyStatus = result.status.getOrElse(\"In Progress\")\nprintln(prettyStatus)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_667","timestamp":1745347964824,"code":"case class ElectionMetadata(title: String, date: Option[String])\n\ndef showDate(meta: ElectionMetadata): String =\n  meta.date.fold(\"Date not set\")(d => s\"Election on $d\")\n\nprintln(showDate(ElectionMetadata(\"Local\", Some(\"2023-10-01\"))))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_669","timestamp":1745347964824,"code":"case class Voter(id: String, registered: Boolean)\ndef isEligible(voter: Voter): Option[String] =\n  if voter.registered then Some(voter.id) else None\n\nval voter = Voter(\"v42\", false)\nprintf(\"Eligible: %s\\n\", isEligible(voter))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_671","timestamp":1745347964824,"code":"case class ElectronicVote(voterId: String, encryptedSelection: String)\ndef decryptVote(vote: ElectronicVote): Either[String, String] =\n  if vote.encryptedSelection.nonEmpty then Right(\"DecryptedSelection\")\n  else Left(\"Corrupt vote\")\n\nval ev = ElectronicVote(\"v77\", \"\")\nprintln(decryptVote(ev))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_673","timestamp":1745347964824,"code":"case class TallyResult(success: Boolean, details: Option[String])\ndef displayResult(res: TallyResult): String =\n  res.details.getOrElse(if res.success then \"All ok\" else \"Failure, no details\")\n\nprintln(displayResult(TallyResult(false, None)))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_675","timestamp":1745347964824,"code":"import scala.util.Try\n\ndef calculateTurnout(totalVoters: String, totalBallots: String): Try[Double] = Try {\n  val voters = totalVoters.toInt\n  val ballots = totalBallots.toInt\n  ballots.toDouble / voters\n}\n// Example: calculateTurnout(\"1000\", \"950\"))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_677","timestamp":1745347964824,"code":"case class Precinct(id: String, ballots: Int)\n\ndef precinctWithMostBallots(precincts: List[Precinct]): Option[Precinct] =\n  precincts.sortBy(-_.ballots).headOption\n\nval precincts = List(Precinct(\"P1\", 12), Precinct(\"P2\", 17))\nprintf(\"Top: %s\\n\", precinctWithMostBallots(precincts))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_679","timestamp":1745347964824,"code":"case class BallotAudit(ballotId: String, errors: List[String])\ndef reportAudit(audit: BallotAudit): String =\n  audit.errors.headOption.getOrElse(\"No errors found\")\n\nprintln(reportAudit(BallotAudit(\"B22\", List())))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_681","timestamp":1745347964825,"code":"import scala.util.{Try, Success, Failure}\n\ncase class TallyFile(name: String)\ndef loadResults(file: TallyFile): Try[List[(String, Int)]] = Try {\n  scala.io.Source.fromFile(file.name).getLines().toList.map { line =>\n    val spl = line.split(\",\")\n    (spl(0), spl(1).toInt)\n  }\n}\n// Usage:\nloadResults(TallyFile(\"missing.csv\")) match\n  case Success(results) => println(results)\n  case Failure(_)      => println(\"Error loading results\")","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_683","timestamp":1745347964825,"code":"case class CountingState(currentBatch: Option[Int])\ndef nextBatch(state: CountingState): CountingState =\n  CountingState(state.currentBatch.map(_ + 1))\n\nprintln(nextBatch(CountingState(Some(2))))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_664","timestamp":1745347977717,"code":"case class Book(title: String, author: String, isbn: String)\n\nval books: List[Book] = List(\n  Book(\"Scala for Beginners\", \"Jane Doe\", \"1234\"),\n  Book(\"Advanced Scala\", \"John Smith\", \"5678\")\n)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_666","timestamp":1745347977717,"code":"def findBookByIsbn(isbn: String, books: List[Book]): Option[Book] =\n  books.find(_.isbn == isbn)\n\nval maybeBook: Option[Book] = findBookByIsbn(\"1234\", books)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_668","timestamp":1745347977718,"code":"val maybeAuthor = maybeBook.map(_.author)\n\nprintln(maybeAuthor.getOrElse(\"Author not found\"))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_670","timestamp":1745347977718,"code":"def searchByTitle(title: String, books: List[Book]): List[Book] =\n  books.filter(_.title.toLowerCase.contains(title.toLowerCase))\n\nval searchResults = searchByTitle(\"scala\", books)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_672","timestamp":1745347977718,"code":"def getBookTitle(bookOpt: Option[Book]): String =\n  bookOpt match\n    case Some(book) => s\"Title: ${book.title}\"\n    case None       => \"Book not found\"\n\nprintln(getBookTitle(maybeBook))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_674","timestamp":1745347977718,"code":"import scala.util.{Try, Success, Failure}\n\ndef parseYear(yearStr: String): Try[Int] = Try(yearStr.toInt)\n\nparseYear(\"2021\") match\n  case Success(year) => println(s\"Parsed year: $year\")\n  case Failure(_)    => println(\"Invalid year string\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_676","timestamp":1745347977718,"code":"case class CatalogEntry(\n  book: Book,\n  availableCopies: Int,\n  classification: Option[String]\n)\n\nval entry = CatalogEntry(books.head, 2, Some(\"005.133\"))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_678","timestamp":1745347977718,"code":"def getClassification(entry: CatalogEntry): String =\n  entry.classification.getOrElse(\"Unclassified\")\n\nprintln(getClassification(entry))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_680","timestamp":1745347977718,"code":"def safeAuthorUpper(bookOpt: Option[Book]): Option[String] =\n  bookOpt.map(_.author.toUpperCase)\n\nval authorCaps = safeAuthorUpper(maybeBook)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_682","timestamp":1745347977719,"code":"case class SearchCriteria(title: Option[String], author: Option[String], year: Option[Int])\n\ndef matchesCriteria(book: Book, criteria: SearchCriteria): Boolean =\n  criteria.title.forall(book.title.contains) &&\n  criteria.author.forall(book.author.contains)\n\nval criteria = SearchCriteria(Some(\"Scala\"), None, None)\nprintln(matchesCriteria(books.head, criteria))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_684","timestamp":1745347977719,"code":"import scala.util.Try\n\ndef loadCatalog(filename: String): Try[List[Book]] =\n  Try(List(Book(\"Test\", \"Author\", \"0000\"))) // placeholder for actual file I/O\n\nloadCatalog(\"catalog.csv\") match\n  case Success(bs) => println(s\"Loaded ${bs.size} books.\")\n  case Failure(ex) => println(\"Failed to load catalog.\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_686","timestamp":1745347977719,"code":"def checkOutBook(isbn: String, entries: List[CatalogEntry]): Either[String, CatalogEntry] =\n  entries.find(e => e.book.isbn == isbn) match\n    case Some(e) if e.availableCopies > 0 => Right(e.copy(availableCopies = e.availableCopies - 1))\n    case Some(_) => Left(\"No available copies.\")\n    case None => Left(\"Book not found.\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_688","timestamp":1745347977719,"code":"case class User(id: Int, name: String, loans: List[String])\n\ndef currentLoans(user: User): List[String] =\n  user.loans\n\nval user = User(1, \"Alex\", List(\"1234\", \"5678\"))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_690","timestamp":1745347977719,"code":"def maybeReturnDate(isbn: String, user: User): Option[String] =\n  if user.loans.contains(isbn) then Some(\"2024-06-01\") else None\n\nprintln(maybeReturnDate(\"1234\", user))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_692","timestamp":1745347977719,"code":"case class QueryResult(results: List[Book], total: Int)\n\ndef emptyResult: QueryResult = QueryResult(Nil, 0)\n\nval noBooks = emptyResult.copy(results = List(books.head), total = 1)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_694","timestamp":1745347977719,"code":"def parseIsbn(isbn: String): Either[String, String] =\n  if isbn.matches(\"\\\\d{4}\") then Right(isbn)\n  else Left(\"Invalid ISBN format.\")\n\nprintln(parseIsbn(\"1234\"))\nprintln(parseIsbn(\"abcd\"))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_696","timestamp":1745347977719,"code":"def authorBookCount(author: String, books: List[Book]): Int =\n  books.count(_.author == author)\n\nprintln(authorBookCount(\"Jane Doe\", books))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_698","timestamp":1745347977720,"code":"val optionalSubtitle: Option[String] = Some(\"A Comprehensive Guide\")\nval fullTitle = optionalSubtitle.map(sub => s\"${books.head.title}: $sub\").getOrElse(books.head.title)\nprintln(fullTitle)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_700","timestamp":1745347977720,"code":"def getAvailableCount(isbn: String, entries: List[CatalogEntry]): Option[Int] =\n  entries.find(_.book.isbn == isbn).map(_.availableCopies)\n\nval availability = getAvailableCount(\"1234\", List(entry))\nprintln(availability.getOrElse(0))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_702","timestamp":1745347977720,"code":"case class SearchError(reason: String)\n\ndef searchWithValidation(title: String): Either[SearchError, Book] =\n  books.find(_.title.equalsIgnoreCase(title)) match\n    case Some(book) => Right(book)\n    case None       => Left(SearchError(\"Book not found\"))\n\nprintln(searchWithValidation(\"Scala for Beginners\"))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_684","timestamp":1745347988269,"code":"case class Ticket(id: String, eventId: String, userId: String)","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_686","timestamp":1745347988269,"code":"def findTicketByQR(qr: String): Option[Ticket] =\n  if qr.nonEmpty then Some(Ticket(qr, \"event1\", \"user42\")) else None","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_688","timestamp":1745347988269,"code":"def parseEventId(qrData: String): Option[String] =\n  qrData.split(':').lift(1)","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_690","timestamp":1745347988269,"code":"def validateTicket(ticket: Ticket, validEvents: Set[String]): Boolean =\n  validEvents.contains(ticket.eventId)","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_692","timestamp":1745347988270,"code":"import scala.util.Try\n\ndef parseTicket(qr: String): Try[Ticket] = Try {\n  val parts = qr.split(':')\n  Ticket(parts(0), parts(1), parts(2))\n}","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_694","timestamp":1745347988270,"code":"case class QRScanResult(ticket: Option[Ticket], error: Option[String])","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_696","timestamp":1745347988270,"code":"def getUserName(userId: String): Option[String] =\n  Map(\"user42\" -> \"Alice\").get(userId)","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_698","timestamp":1745347988270,"code":"def checkIn(qr: String, validEvents: Set[String]): Either[String, String] =\n  findTicketByQR(qr) match\n    case Some(ticket) if validateTicket(ticket, validEvents) =>\n      Right(s\"Welcome, ${ticket.userId}!\")\n    case Some(_) =>\n      Left(\"Invalid event.\")\n    case None =>\n      Left(\"Ticket not found.\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_700","timestamp":1745347988270,"code":"case class Event(eventId: String, name: String, startTime: Long)","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_702","timestamp":1745347988270,"code":"def formatTicket(ticket: Ticket): String =\n  s\"${ticket.id}:${ticket.eventId}:${ticket.userId}\"","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_704","timestamp":1745347988271,"code":"import scala.util.Try\n\ndef extractUserFromQR(qr: String): Option[String] =\n  Try(qr.split(':')(2)).toOption","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_706","timestamp":1745347988271,"code":"def upperCaseIfPresent(s: Option[String]): Option[String] =\n  s.map(_.toUpperCase)","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_708","timestamp":1745347988271,"code":"def safeFirst[A](seq: Seq[A]): Option[A] =\n  seq.headOption","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_710","timestamp":1745347988271,"code":"def safeParseLong(s: String): Option[Long] =\n  scala.util.Try(s.toLong).toOption","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_712","timestamp":1745347988271,"code":"case class ValidationError(message: String)\n\ndef validateQR(qr: String): Either[ValidationError, Ticket] =\n  for qrCode <- Option(qr).filter(_.nonEmpty).toRight(ValidationError(\"QR code is empty\"))\n      ticket <- parseTicket(qrCode).toOption.toRight(ValidationError(\"Invalid QR format\"))\n  yield ticket","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_714","timestamp":1745347988272,"code":"def decodeTicket(qr: String): Either[String, Ticket] =\n  parseTicket(qr).toEither.left.map(_ => \"Malformed QR code\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_716","timestamp":1745347988272,"code":"case class QRValidator(validEvents: Set[String]):\n  def validate(qr: String): Either[String, Ticket] =\n    for\n      ticket <- decodeTicket(qr)\n      _ <- Either.cond(validEvents.contains(ticket.eventId), (), \"Event mismatch\")\n    yield ticket","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_718","timestamp":1745347988272,"code":"def combineEventNameAndUser(ticket: Ticket): Option[String] =\n  for\n    eventName <- Option(\"ScalaConf\")  // Suppose fetched from database\n    userName <- getUserName(ticket.userId)\n  yield s\"$eventName - $userName\"","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_720","timestamp":1745347988272,"code":"def timeUntilEvent(ticket: Ticket, events: Map[String, Event]): Option[Long] =\n  events.get(ticket.eventId).map(_.startTime - System.currentTimeMillis())","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_722","timestamp":1745347988272,"code":"def maskUserId(ticket: Ticket): Ticket =\n  ticket.copy(userId = ticket.userId.take(2) + \"***\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_704","timestamp":1745348003221,"code":"case class Waypoint(lat: Double, lon: Double)\n\nval w1 = Waypoint(52.5, 13.4)\nval w2 = Waypoint(52.6, 13.5)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_706","timestamp":1745348003221,"code":"case class Drone(id: String, batteryLevel: Double)\n\ndef isBatterySufficient(drone: Drone, required: Double): Boolean =\n  drone.batteryLevel >= required\n\nval drone1 = Drone(\"DR-101\", 80.0)\nval result = isBatterySufficient(drone1, 75.0)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_708","timestamp":1745348003221,"code":"def findWaypointByName(name: String, waypoints: Map[String, Waypoint]): Option[Waypoint] =\n  waypoints.get(name)\n\nval waypoints = Map(\"Depot\" -> Waypoint(52.5, 13.4), \"Drop1\" -> Waypoint(52.6, 13.5))\nval maybeDrop = findWaypointByName(\"Drop2\", waypoints)\n// maybeDrop: Option[Waypoint] = None","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_710","timestamp":1745348003222,"code":"import scala.util.Try\n\ndef parseCoordinate(s: String): Try[Double] =\n  Try(s.toDouble)\n\nval coord = parseCoordinate(\"52.51\").getOrElse(0.0)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_712","timestamp":1745348003222,"code":"def nextWaypoint(current: Waypoint, route: List[Waypoint]): Option[Waypoint] =\n  route.dropWhile(_ != current).drop(1).headOption\n\nval wp1 = Waypoint(1.0, 2.0)\nval wp2 = Waypoint(3.0, 4.0)\nval route = List(wp1, wp2)\nval next = nextWaypoint(wp1, route)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_714","timestamp":1745348003222,"code":"case class Path(waypoints: List[Waypoint], totalDistance: Double)\n\nval path1 = Path(List(Waypoint(1, 2), Waypoint(3, 4)), 5.4)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_716","timestamp":1745348003222,"code":"def loadRouteFromFile(filename: String): Either[String, List[Waypoint]] =\n  if filename.endsWith(\".csv\") then Right(List(Waypoint(1,2))) else Left(\"Unsupported file type\")\n\nval result = loadRouteFromFile(\"route.json\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_718","timestamp":1745348003222,"code":"case class Delivery(jobId: String, destination: Waypoint)\n\nval delivery1 = Delivery(\"J102\", Waypoint(52.5, 13.4))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_720","timestamp":1745348003222,"code":"def getDelivery(droneId: String, assignments: Map[String, Delivery]): Option[Delivery] =\n  assignments.get(droneId)\n\nval assignments = Map(\"DR-1\" -> Delivery(\"J102\", Waypoint(2,3)))\nval optDelivery = getDelivery(\"DR-2\", assignments)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_722","timestamp":1745348003222,"code":"import scala.util.Try\n\ndef calculateETA(distance: Double, speed: Double): Try[Double] =\n  Try(distance / speed)\n\nval eta = calculateETA(0, 0).recover(_ => Double.PositiveInfinity)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_724","timestamp":1745348003222,"code":"def getNextStop(path: Path): Option[Waypoint] =\n  path.waypoints.headOption\n\nval path = Path(List.empty, 0)\nval stop = getNextStop(path)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_726","timestamp":1745348003223,"code":"case class OptimizationResult(path: Option[Path], error: Option[String])\n\nval successResult = OptimizationResult(Some(Path(List(Waypoint(1,2)), 3.5)), None)\nval failResult = OptimizationResult(None, Some(\"No valid path found\"))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_728","timestamp":1745348003223,"code":"def batteryAfterPath(drone: Drone, path: Path): Option[Double] =\n  val used = path.totalDistance * 2.0\n  val left = drone.batteryLevel - used\n  if left >= 0 then Some(left) else None\n\nval batteryLeft = batteryAfterPath(drone1, Path(List(w1, w2), 40.0))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_730","timestamp":1745348003223,"code":"def safeParseDelivery(s: String): Either[String, Delivery] =\n  val parts = s.split(\",\")\n  if parts.size == 3 then\n    Either.cond(parts(2).toDoubleOption.isDefined, Delivery(parts(0), Waypoint(parts(1).toDouble, parts(2).toDouble)), \"Bad coords\")\n  else Left(\"Input format error\")\n\nval parsed = safeParseDelivery(\"J210,52.5,13.4\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_732","timestamp":1745348003223,"code":"val optBattery: Option[Double] =\n  Some(40.0)\n\nval statusMsg = optBattery.map(b => s\"Battery left: $b\").getOrElse(\"Battery data missing\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_734","timestamp":1745348003223,"code":"def assignWaypointToDrone(drone: Drone, waypoint: Option[Waypoint]): Either[String, (Drone, Waypoint)] =\n  waypoint match\n    case Some(wp) => Right((drone, wp))\n    case None     => Left(\"Waypoint not found\")\n\nval assignment = assignWaypointToDrone(drone1, None)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_736","timestamp":1745348003223,"code":"def shortestPath(paths: List[Path]): Option[Path] =\n  paths.sortBy(_.totalDistance).headOption\n\nval paths = List(Path(List(w1,w2), 10), Path(List(w2,w1), 7))\nval shortest = shortestPath(paths)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_738","timestamp":1745348003223,"code":"def pickupDropTimes(waypoints: List[Waypoint]): (Option[Waypoint], Option[Waypoint]) =\n  (waypoints.headOption, waypoints.lastOption)\n\nval times = pickupDropTimes(List.empty)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_740","timestamp":1745348003224,"code":"import scala.util.{Try, Success, Failure}\n\ndef updateBattery(battery: Double, usage: Double): Try[Double] =\n  Try {\n    require(usage >= 0)\n    val remaining = battery - usage\n    require(remaining >= 0)\n    remaining\n  }\n\nval updated = updateBattery(100.0, 50.0) match\n  case Success(value) => s\"New battery: $value\"\n  case Failure(_)     => \"Battery depleted or invalid usage\"","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_742","timestamp":1745348003224,"code":"case class OptimizationConfig(maxRange: Double, avoidRestricted: Boolean = true)\nval config = OptimizationConfig(15.0)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_724","timestamp":1745348023792,"code":"case class Claim(id: String, amount: Double, description: Option[String])\n\nval claim = Claim(\"CLM001\", 500.0, None)\nval desc = claim.description.getOrElse(\"No description provided.\")\nprintln(desc)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_726","timestamp":1745348023792,"code":"def parseAmount(amountStr: String): Either[String, Double] =\n  scala.util.Try(amountStr.toDouble).toEither.left.map(_ => s\"Invalid amount: $amountStr\")\n\nparseAmount(\"456\") match\n  case Right(amount) => println(s\"Parsed amount: $amount\")\n  case Left(error) => println(error)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_728","timestamp":1745348023793,"code":"case class Policyholder(name: String, email: Option[String])\n\nval holder = Policyholder(\"Jane Doe\", Some(\"jane@example.com\"))\nval email = holder.email.fold(\"[No Email Registered]\")(identity)\nprintln(s\"Contact: $email\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_730","timestamp":1745348023793,"code":"def submitClaim(claim: Claim): Either[String, String] =\n  if (claim.amount > 0) then Right(s\"Claim ${claim.id} submitted.\")\n  else Left(\"Claim amount must be positive.\")\n\nval response = submitClaim(Claim(\"CLM002\", -50, None))\nprintln(response)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_732","timestamp":1745348023793,"code":"case class Address(city: String, zip: Option[String])\n\ndef printZip(addr: Address): Unit =\n  addr.zip match\n    case Some(zip) => println(s\"ZIP: $zip\")\n    case None => println(\"ZIP not provided.\")\n\nval addr = Address(\"London\", None)\nprintZip(addr)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_734","timestamp":1745348023793,"code":"case class Damage(photoUrl: Option[String], description: String)\ndef displayPhoto(damage: Damage): String =\n  damage.photoUrl.fold(\"No photo attached.\")(url => s\"Photo: $url\")\n\nval d = Damage(None, \"broken glass\")\nprintln(displayPhoto(d))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_736","timestamp":1745348023793,"code":"import scala.util.Try\n\ndef parseDate(date: String): Try[java.time.LocalDate] =\n  Try(java.time.LocalDate.parse(date))\n\nprintln(parseDate(\"2023-11-12\").getOrElse(java.time.LocalDate.MIN))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_738","timestamp":1745348023793,"code":"case class ClaimSubmission(claim: Claim, submittedAt: Option[java.time.Instant])\n\ndef timeOfSubmission(c: ClaimSubmission): String =\n  c.submittedAt.map(_.toString).getOrElse(\"Not yet submitted.\")\n\nval submission = ClaimSubmission(Claim(\"CLM003\", 800, None), None)\nprintln(timeOfSubmission(submission))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_740","timestamp":1745348023793,"code":"case class Attachment(filename: String, contentType: Option[String])\n\nval att = Attachment(\"invoice.pdf\", Some(\"application/pdf\"))\nval msg = att.contentType match\n  case Some(ct) => s\"Attached file type: $ct\"\n  case None => \"Unknown file type.\"\n\nprintln(msg)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_742","timestamp":1745348023794,"code":"def safeToUpper(strOpt: Option[String]): Option[String] =\n  strOpt.map(_.toUpperCase)\n\nprintln(safeToUpper(Some(\"fire damage\")))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_744","timestamp":1745348023794,"code":"case class Adjuster(name: String, phone: Option[String])\n\nval adj = Adjuster(\"Sam Smith\", None)\nval phoneMsg = adj.phone.getOrElse(\"No phone number provided.\")\nprintln(phoneMsg)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_746","timestamp":1745348023794,"code":"def validatePolicyId(policyId: String): Either[String, String] =\n  if policyId.nonEmpty && policyId.forall(_.isLetterOrDigit) then Right(policyId)\n  else Left(\"Invalid policy ID.\")\n\nprintln(validatePolicyId(\"PX-101\"))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_748","timestamp":1745348023794,"code":"case class Claimant(fullName: String, idNumber: Option[String])\n\ndef anonymize(claimant: Claimant): Claimant =\n  claimant.copy(idNumber = None)\n\nval anon = anonymize(Claimant(\"Aidan Luke\", Some(\"8942201\")))\nprintln(anon)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_750","timestamp":1745348023794,"code":"def optionalNote(note: Option[String]): String =\n  note.fold(\"No note added.\")(n => s\"Note: $n\")\n\nprintln(optionalNote(Some(\"Contacted customer on 1st June.\")))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_752","timestamp":1745348023794,"code":"import scala.util.Try\n\ndef calculatePayout(amount: Double, deductible: Double): Try[Double] =\n  Try {\n    require(amount > deductible, \"Amount must be greater than deductible.\")\n    amount - deductible\n  }\n\nprintln(calculatePayout(300, 100).fold(_ => 0.0, identity))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_754","timestamp":1745348023795,"code":"case class ClaimDetails(claim: Claim, claimant: Policyholder)\n\ndef summary(details: ClaimDetails): String =\n  s\"Claim by ${details.claimant.name} for amount ${details.claim.amount}\"\n\nval det = ClaimDetails(\n  Claim(\"CLM009\", 1450, Some(\"Water damage\")),\n  Policyholder(\"Eve\", None)\n)\nprintln(summary(det))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_756","timestamp":1745348023795,"code":"def loadDocument(docId: String): Option[String] =\n  if docId == \"DOC123\" then Some(\"Document content here.\") else None\n\nloadDocument(\"DOC123\").foreach(content => println(s\"Loaded: $content\"))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_758","timestamp":1745348023795,"code":"case class Incident(date: Option[java.time.LocalDate], details: String)\n\nval inc = Incident(None, \"Hail damage to roof\")\nprintln(inc.date.map(_.toString).getOrElse(\"Date not specified\"))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_760","timestamp":1745348023795,"code":"def maybeAddComment(comment: Option[String], claim: Claim): Claim =\n  claim.copy(description = comment)\n\nval claimWithComment = maybeAddComment(Some(\"Reviewed by manager.\"), Claim(\"CLM701\", 200, None))\nprintln(claimWithComment)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_762","timestamp":1745348023795,"code":"import scala.util.Try\n\ndef parseClaimId(claimId: String): Try[Int] =\n  Try(claimId.drop(3).toInt)\n\nprintln(parseClaimId(\"CLM105\").fold(_ => -1, identity))","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_744","timestamp":1745348041014,"code":"case class Student(id: String, name: String, email: Option[String])\n\nval anna = Student(\"s101\", \"Anna Smith\", Some(\"anna@example.com\"))\nval chris = Student(\"s102\", \"Chris Young\", None)\n\nchris.email.getOrElse(\"No email available\") // returns \"No email available\"","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_746","timestamp":1745348041015,"code":"case class Course(id: String, title: String)\n\ndef findCourse(courses: List[Course], courseId: String): Option[Course] =\n  courses.find(_.id == courseId)\n\nval courses = List(Course(\"c1\", \"Math\"), Course(\"c2\", \"History\"))\nfindCourse(courses, \"c3\") match\n  case Some(course) => println(s\"Found: ${course.title}\")\n  case None => println(\"Course not found\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_748","timestamp":1745348041015,"code":"import scala.util.Try\n\ndef parseScore(input: String): Try[Double] =\n  Try(input.toDouble)\n\nparseScore(\"85.7\").getOrElse(0.0)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_750","timestamp":1745348041015,"code":"case class Assessment(studentId: String, score: Option[Double])\n\ndef gradeStudent(assessment: Assessment): String =\n  assessment.score match\n    case Some(score) if score >= 60 => \"Pass\"\n    case Some(_) => \"Fail\"\n    case None => \"No Score\"\n\nval assess = Assessment(\"S01\", Some(92))\ngradeStudent(assess)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_752","timestamp":1745348041016,"code":"case class Event(studentId: String, date: String, activity: String)\n\ndef recentEvents(events: List[Event], afterDate: String): List[Event] =\n  events.filter(_.date > afterDate)\n// Use Option to get the first event after a date\n\ndef firstRecentEvent(events: List[Event], afterDate: String): Option[Event] =\n  events.find(_.date > afterDate)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_754","timestamp":1745348041016,"code":"def safeAverage(scores: List[Double]): Option[Double] =\n  if scores.isEmpty then None else Some(scores.sum / scores.size)\n\nsafeAverage(List(80, 90, 70)).getOrElse(0.0)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_756","timestamp":1745348041016,"code":"import scala.util.{Try, Success, Failure}\n\ndef parseAttendance(str: String): Either[String, Int] =\n  Try(str.toInt) match\n    case Success(v) => Right(v)\n    case Failure(_) => Left(\"Invalid number format\")\n\nparseAttendance(\"abc\") match\n  case Right(n) => println(n)\n  case Left(e) => println(e)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_758","timestamp":1745348041016,"code":"case class Module(id: String, completed: Boolean)\n\nval modules = List(Module(\"M1\", true), Module(\"M2\", false))\n\n// Use Option to find incomplete module\nval firstIncomplete = modules.find(!_.completed)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_760","timestamp":1745348041016,"code":"case class QuizResult(studentId: String, score: Option[Int])\n\nval results = List(\n  QuizResult(\"S01\", Some(85)),\n  QuizResult(\"S02\", None)\n)\n\nval validScores = results.flatMap(_.score)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_762","timestamp":1745348041016,"code":"def emailDomain(emailOpt: Option[String]): Option[String] =\n  emailOpt.map(_.split(\"@\").last)\n\nemailDomain(Some(\"john@university.edu\")) // Some(\"university.edu\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_764","timestamp":1745348041017,"code":"// Combining Option and Either in simple analytics calculation\ndef computeCompletionRate(completed: Option[Int], total: Option[Int]): Either[String, Double] =\n  (completed, total) match\n    case (Some(c), Some(t)) if t > 0 => Right(c.toDouble / t)\n    case (Some(_), Some(0)) => Left(\"Total cannot be zero\")\n    case _ => Left(\"Missing data\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_766","timestamp":1745348041017,"code":"case class Feedback(studentId: String, rating: Option[Int])\n\ndef overallSatisfaction(feedbacks: List[Feedback]): Option[Double] =\n  val ratings = feedbacks.flatMap(_.rating)\n  if ratings.isEmpty then None else Some(ratings.sum.toDouble / ratings.size)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_768","timestamp":1745348041017,"code":"case class Teacher(id: String, name: String, office: Option[String])\n\ndef printOffice(teacher: Teacher): Unit =\n  teacher.office match\n    case Some(loc) => println(s\"Office: $loc\")\n    case None => println(\"No office assigned\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_770","timestamp":1745348041017,"code":"import scala.util.Try\n\ncase class Enrollment(studentId: String, courseId: String, year: Int)\n\ndef parseEnrollment(row: String): Try[Enrollment] =\n  Try {\n    val parts = row.split(\",\")\n    Enrollment(parts(0), parts(1), parts(2).toInt)\n  }","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_772","timestamp":1745348041017,"code":"case class LearningPath(studentId: String, modules: List[String])\n\n// Use Option to find if a given module has been completed\ndef hasCompletedModule(path: LearningPath, module: String): Boolean =\n  path.modules.contains(module)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_774","timestamp":1745348041018,"code":"def lookupScore(scores: Map[String, Double], studentId: String): Option[Double] =\n  scores.get(studentId)\n\nlookupScore(Map(\"s1\" -> 78.0), \"s2\").getOrElse(0.0)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_776","timestamp":1745348041018,"code":"def safeDivide(numerator: Double, denominator: Double): Option[Double] =\n  if denominator == 0 then None else Some(numerator / denominator)\n\nsafeDivide(90, 0) // None","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_778","timestamp":1745348041018,"code":"case class ActivityLog(studentId: String, timestamp: Long, activity: String)\n\ndef lastActivity(logs: List[ActivityLog], studentId: String): Option[ActivityLog] =\n  logs.filter(_.studentId == studentId).sortBy(-_.timestamp).headOption","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_780","timestamp":1745348041018,"code":"case class Assignment(title: String, dueDate: Option[String])\n\nval homework = Assignment(\"Essay 1\", Some(\"2024-04-01\"))\nhomework.dueDate.getOrElse(\"No due date\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_782","timestamp":1745348041018,"code":"// Using Either for recoverable error in grade parsing\ndef parseGrade(str: String): Either[String, Double] =\n  scala.util.Try(str.toDouble).toEither.left.map(_ => \"Invalid grade format\")\n\nparseGrade(\"97.5\") // Right(97.5)\nparseGrade(\"A+\") // Left(\"Invalid grade format\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_764","timestamp":1745348054991,"code":"case class Ingredient(name: String, calories: Int)\n\nval sugar = Ingredient(\"Sugar\", 50)","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_766","timestamp":1745348054991,"code":"case class UserPreferences(\n  likedIngredients: Set[String],\n  dislikedIngredients: Set[String]\n)\n\nval userPrefs = UserPreferences(Set(\"Tomato\", \"Basil\"), Set(\"Onion\"))","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_768","timestamp":1745348054991,"code":"def findRecipeByName(name: String): Option[Recipe] = {\n  // Imagine recipes is a List[Recipe]\n  recipes.find(_.name == name)\n}","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_770","timestamp":1745348054992,"code":"case class Recipe(name: String, ingredients: List[Ingredient], isVegetarian: Boolean)\n\nval caprese = Recipe(\"Caprese Salad\", List(Ingredient(\"Tomato\", 20), Ingredient(\"Mozzarella\", 80)), true)","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_772","timestamp":1745348054992,"code":"def ingredientCalories(ingredient: Ingredient): Option[Int] = {\n  if (ingredient.calories > 0) Some(ingredient.calories) else None\n}\n\nval calOpt = ingredientCalories(Ingredient(\"Lettuce\", 0)).getOrElse(5)","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_774","timestamp":1745348054992,"code":"def recommendRecipe(user: UserPreferences, recipes: List[Recipe]): Option[Recipe] =\n  recipes.find(recipe => user.likedIngredients.exists(recipe.ingredients.map(_.name).contains))","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_776","timestamp":1745348054992,"code":"import scala.util.Try\n\ndef parseCalories(s: String): Try[Int] = Try(s.toInt)","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_778","timestamp":1745348054992,"code":"def safeGetPreference(pref: UserPreferences, key: String): Option[Set[String]] = key match {\n  case \"liked\" => Some(pref.likedIngredients)\n  case \"disliked\" => Some(pref.dislikedIngredients)\n  case _ => None\n}","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_780","timestamp":1745348054992,"code":"def getMainIngredient(recipe: Recipe): Option[Ingredient] = recipe.ingredients.headOption\n\ndef printMainIngredient(recipe: Recipe): Unit =\n  getMainIngredient(recipe).foreach(i => println(i.name))","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_782","timestamp":1745348054993,"code":"def recommendVegetarian(recipes: List[Recipe]): List[Recipe] =\n  recipes.filter(_.isVegetarian)","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_784","timestamp":1745348054993,"code":"import scala.util.{Try, Success, Failure}\n\ndef loadUserData(file: String): Try[UserPreferences] = {\n  // Mocking a failure possibility\n  if file.endsWith(\".json\") then Success(UserPreferences(Set(), Set()))\n  else Failure(new Exception(\"Unsupported file format\"))\n}","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_786","timestamp":1745348054993,"code":"def findLowCalRecipe(recipes: List[Recipe], maxCalories: Int): Option[Recipe] =\n  recipes.find(_.ingredients.map(_.calories).sum <= maxCalories)","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_788","timestamp":1745348054993,"code":"case class Recommendation(recipe: Recipe, reason: Option[String])\n\nval recommendation = Recommendation(caprese, Some(\"Based on your preference for Basil.\"))","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_790","timestamp":1745348054993,"code":"def safeFirstLiked(user: UserPreferences): Option[String] =\n  user.likedIngredients.headOption\n\nval first = safeFirstLiked(userPrefs).getOrElse(\"No Likes\")","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_792","timestamp":1745348054993,"code":"def allergenFree(recipe: Recipe, forbidden: Set[String]): Boolean =\n  !recipe.ingredients.exists(ing => forbidden.contains(ing.name))","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_794","timestamp":1745348054994,"code":"def getUserFavoriteIngredient(prefs: UserPreferences): Option[String] =\n  prefs.likedIngredients.headOption","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_796","timestamp":1745348054994,"code":"val unknownRecipe: Option[Recipe] = None\nval display = unknownRecipe.map(_.name).getOrElse(\"Recipe not found.\")","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_798","timestamp":1745348054994,"code":"def tryRecipeSelection(idx: Int, recipes: List[Recipe]): Either[String, Recipe] =\n  recipes.lift(idx).toRight(\"Recipe index out of bounds\")","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_800","timestamp":1745348054994,"code":"def matchPreference(recipe: Recipe, user: UserPreferences): Option[String] =\n  recipe.ingredients.find(ing => user.likedIngredients.contains(ing.name)).map(_.name)","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_802","timestamp":1745348054994,"code":"case class MealPlan(recipes: List[Recipe])\ndef addRecipe(plan: MealPlan, recipe: Recipe): MealPlan =\n  plan.copy(recipes = recipe :: plan.recipes)","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_784","timestamp":1745348077128,"code":"case class Donor(name: String, email: Option[String])\n\ndef findDonorEmail(donor: Donor): String =\n  donor.email.getOrElse(\"No email provided\")\n\nval alice = Donor(\"Alice\", Some(\"alice@example.com\"))\nval bob = Donor(\"Bob\", None)\nprintln(findDonorEmail(alice)) // prints \"alice@example.com\"\nprintln(findDonorEmail(bob))  // prints \"No email provided\"","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_786","timestamp":1745348077128,"code":"import scala.util.Try\n\ndef parseDonationAmount(input: String): Try[Double] =\n  Try(input.toDouble)\n\nval parsed = parseDonationAmount(\"50.5\")\nprintln(parsed)\nval failed = parseDonationAmount(\"oops\")\nprintln(failed) // Will show Failure(java.lang.NumberFormatException)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_788","timestamp":1745348077128,"code":"case class Donation(donor: String, amount: Double)\n\nval maybeDonation: Option[Donation] = None\n\nval summary = maybeDonation match\n  case Some(d) => s\"Donation of ${d.amount} from ${d.donor}\"\n  case None    => \"No donation recorded\"\n\nprintln(summary)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_790","timestamp":1745348077128,"code":"case class Charity(id: Int, name: String, address: Option[String])\n\ndef displayCharityInfo(charity: Charity): String =\n  s\"Charity: ${charity.name}. Location: ${charity.address.getOrElse(\"Address unknown\")}\"","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_792","timestamp":1745348077128,"code":"def validateDonorName(name: String): Either[String, String] =\n  if name.nonEmpty then Right(name)\n  else Left(\"Name cannot be empty\")\n\nprintln(validateDonorName(\"Julia\"))\nprintln(validateDonorName(\"\"))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_794","timestamp":1745348077129,"code":"case class Campaign(title: String, target: Double, totalDonated: Double)\n\ndef remainingAmount(c: Campaign): Double =\n  (c.target - c.totalDonated).max(0)\n\nval camp = Campaign(\"Books for Schools\", 1000.0, 625.5)\nprintln(remainingAmount(camp)) // 374.5","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_796","timestamp":1745348077129,"code":"import scala.util.Try\ncase class Donor(name: String, phone: Option[String])\n\ndef normalizedPhone(donor: Donor): Option[String] =\n  donor.phone.flatMap(num => Try(num.replaceAll(\"[ -]\", \"\")).toOption)\n\nprintln(normalizedPhone(Donor(\"Kim\", Some(\"555-123 456\"))))\nprintln(normalizedPhone(Donor(\"Jun\", None)))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_798","timestamp":1745348077129,"code":"case class Donation(donor: String, amount: Double)\n\ndef isLargeDonation(d: Donation): Boolean =\n  Option.unapply(d).exists(_._2 >= 1000.0)\n\nprintln(isLargeDonation(Donation(\"Alex\", 1500.0))) // true\nprintln(isLargeDonation(Donation(\"Sam\", 40.0)))    // false","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_800","timestamp":1745348077129,"code":"case class Fundraiser(id: Int, organizer: String, description: Option[String])\n\ndef describeFundraiser(f: Fundraiser): String = f.description match\n  case Some(desc) => s\"${f.organizer}'s fundraiser: $desc\"\n  case None => s\"${f.organizer} is organizing a fundraiser.\"\n\nprintln(describeFundraiser(Fundraiser(1, \"Tina\", Some(\"Marathon for health.\"))))\nprintln(describeFundraiser(Fundraiser(2, \"John\", None)))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_802","timestamp":1745348077129,"code":"def safeDivideDonation(total: Double, n: Int): Either[String, Double] =\n  if n == 0 then Left(\"Cannot divide by zero\")\n  else Right(total / n)\n\nprintln(safeDivideDonation(100, 10)) // Right(10.0)\nprintln(safeDivideDonation(50, 0))   // Left(\"Cannot divide by zero\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_804","timestamp":1745348077129,"code":"case class GiftAidClaim(donor: String, eligible: Boolean)\n\ndef canClaimGiftAid(claim: GiftAidClaim): Option[String] =\n  if claim.eligible then Some(s\"Gift Aid can be claimed for ${claim.donor}\")\n  else None\n\nprintln(canClaimGiftAid(GiftAidClaim(\"Ella\", true)))\nprintln(canClaimGiftAid(GiftAidClaim(\"Bill\", false)))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_806","timestamp":1745348077129,"code":"import scala.util.Try\n\ndef safeDoubleParseAmount(amount: String): Option[Double] =\n  Try(amount.toDouble).toOption\n\nprintln(safeDoubleParseAmount(\"23.45\")) // Some(23.45)\nprintln(safeDoubleParseAmount(\"ten\"))   // None","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_808","timestamp":1745348077130,"code":"case class PaymentMethod(kind: String, details: Option[String])\n\nval payment = PaymentMethod(\"CreditCard\", Some(\"****1234\"))\nval unknown = PaymentMethod(\"Cash\", None)\n\ndef paymentInfo(pm: PaymentMethod): String =\n  pm.details.map(d => s\"via ${pm.kind}: $d\").getOrElse(\"Payment method unknown.\")\n\nprintln(paymentInfo(payment))\nprintln(paymentInfo(unknown))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_810","timestamp":1745348077130,"code":"case class Charity(name: String)\ndef findCharity(name: String): Option[Charity] =\n  if name == \"Global Fund\" then Some(Charity(name)) else None\n\nfindCharity(\"Global Fund\") match\n  case Some(charity) => println(s\"Found charity: ${charity.name}\")\n  case None          => println(\"Charity not found\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_812","timestamp":1745348077130,"code":"def processDonation(amount: String): Either[String, Double] =\n  scala.util.Try(amount.toDouble).toEither.left.map(_ => \"Invalid amount\")\n\nprintln(processDonation(\"25.8\")) // Right(25.8)\nprintln(processDonation(\"NaN\"))   // Left(\"Invalid amount\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_814","timestamp":1745348077131,"code":"case class Donor(id: Int, name: String)\nval donorMap: Map[Int, Donor] = Map(1 -> Donor(1, \"Mina\"), 2 -> Donor(2, \"Hugo\"))\n\ndef getDonorNameById(id: Int): String =\n  donorMap.get(id).map(_.name).getOrElse(\"Unknown donor\")\n\nprintln(getDonorNameById(2)) // Hugo\nprintln(getDonorNameById(3)) // Unknown donor","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_816","timestamp":1745348077131,"code":"case class DonationReceipt(donor: String, amount: Double, ref: Option[String])\n\ndef receiptSummary(r: DonationReceipt) =\n  s\"${r.donor} donated £${r.amount} (${r.ref.getOrElse(\"No reference\")})\"\n\nprintln(receiptSummary(DonationReceipt(\"Ana\", 75, Some(\"TX112\"))))\nprintln(receiptSummary(DonationReceipt(\"Zoe\", 15, None)))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_818","timestamp":1745348077131,"code":"import scala.util.Try\n\ndef readDonationAmount(str: String): Option[Double] =\n  Try(str.trim.toDouble).toOption\n\nprintln(readDonationAmount(\" 25.00 \"))\nprintln(readDonationAmount(\"abc\"))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_820","timestamp":1745348077131,"code":"case class CharityEvent(name: String, location: Option[String], sponsor: Option[String])\n\ndef eventWelcome(event: CharityEvent): String =\n  val sponsorText = event.sponsor.fold(\"\")(s => s\" Sponsored by $s.\")\n  s\"Welcome to ${event.name} at ${event.location.getOrElse(\"TBD\")}.\" + sponsorText\n\nprintln(eventWelcome(CharityEvent(\"Gala\", Some(\"Town Hall\"), Some(\"ACME Corp\"))))\nprintln(eventWelcome(CharityEvent(\"Fun Run\", None, None)))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_822","timestamp":1745348077132,"code":"case class Volunteer(name: String, contact: Option[String])\ndef getPrimaryContact(v: Volunteer): String =\n  v.contact match\n    case Some(info) => info\n    case None       => \"No contact info provided.\"\n\nprintln(getPrimaryContact(Volunteer(\"Leah\", Some(\"leah@mail.com\"))))\nprintln(getPrimaryContact(Volunteer(\"Paul\", None)))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_824","timestamp":1745348077132,"code":"case class Donor(name: String)\nval bannedDonors = Set(\"Fake Donor\", \"Scam Person\")\ndef canAcceptDonation(donor: Donor): Either[String, String] =\n  if bannedDonors.contains(donor.name) then Left(\"Donor is banned\")\n  else Right(\"Donation accepted\")\n\nprintln(canAcceptDonation(Donor(\"Mario\")))\nprintln(canAcceptDonation(Donor(\"Scam Person\")))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_805","timestamp":1745348093532,"code":"case class Team(name: String)\ncase class Score(home: Int, away: Int)\ncase class LiveMatch(homeTeam: Team, awayTeam: Team, currentScore: Option[Score])","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_807","timestamp":1745348093533,"code":"def parseScore(s: String): Either[String, Score] =\n  s.split(\"-\") match\n    case Array(home, away) =>\n      for\n        h <- home.toIntOption.toRight(\"Invalid home score\")\n        a <- away.toIntOption.toRight(\"Invalid away score\")\n      yield Score(h, a)\n    case _ => Left(\"Wrong format\")\n\nval scoreFromFeed = parseScore(\"2-1\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_809","timestamp":1745348093533,"code":"case class Event(timeMinute: Int, eventType: String, scorer: Option[String])\nval lastGoal = Event(54, \"Goal\", Some(\"Smith\"))\nlastGoal.scorer.foreach(player => println(s\"Goal by $player\"))","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_811","timestamp":1745348093533,"code":"val maybeLiveMatch: Option[LiveMatch] = None\nval display = maybeLiveMatch.map(_.currentScore).flatten\nprintln(display.getOrElse(Score(0,0)))","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_813","timestamp":1745348093534,"code":"def safeIncrement(score: Option[Score], isHome: Boolean): Option[Score] =\n  score.map {\n    case Score(h, a) if isHome => Score(h+1, a)\n    case Score(h, a) => Score(h, a+1)\n  }\n\nval updated = safeIncrement(Some(Score(1,1)), isHome = true)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_815","timestamp":1745348093534,"code":"case class UpdateMessage(matchId: String, msg: String)\ndef buildMessage(m: LiveMatch): UpdateMessage =\n  val score = m.currentScore.map(s => s\"${s.home}-${s.away}\").getOrElse(\"N/A\")\n  UpdateMessage(s\"${m.homeTeam.name} vs ${m.awayTeam.name}\", s\"Live score: $score\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_817","timestamp":1745348093534,"code":"import scala.util.Try\ncase class FeedResponse(status: String, data: Option[Score])\ndef parseFeedResponse(json: String): Try[FeedResponse] = Try {\n  // Dummy parser for example only\n  FeedResponse(\"ok\", Some(Score(2,2)))\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_819","timestamp":1745348093535,"code":"def updateScore(matchId: String, getScore: String => Option[Score]): Either[String, Score] =\n  getScore(matchId).toRight(s\"Score not found for $matchId\")\n\nval currentScore = updateScore(\"M01\", _ => Some(Score(3,4)))","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_821","timestamp":1745348093535,"code":"case class Player(name: String, team: String)\ndef findPlayer(players: List[Player], name: String): Option[Player] =\n  players.find(_.name == name)\n\nval scorer = findPlayer(List(Player(\"Smith\",\"Blue\")), \"Smith\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_823","timestamp":1745348093535,"code":"case class MatchStats(possession: Int, shotsOnTarget: Int)\nval maybeStats: Option[MatchStats] = None\nval shots = maybeStats.map(_.shotsOnTarget).getOrElse(0)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_825","timestamp":1745348093536,"code":"def safeDivide(a: Int, b: Int): Either[String, Int] =\n  if b == 0 then Left(\"Division by zero\") else Right(a / b)\n\nval avgScore = safeDivide(10,2).getOrElse(0)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_827","timestamp":1745348093536,"code":"case class MatchUpdate(event: Option[Event], score: Score)\nval goalUpdate = MatchUpdate(Some(Event(57, \"Goal\", None)), Score(1,0))\nval eventText = goalUpdate.event match\n  case Some(ev) => ev.eventType\n  case None => \"No event\"","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_829","timestamp":1745348093536,"code":"def parseIntSafe(s: String): Option[Int] = s.toIntOption\nval minuteOpt = parseIntSafe(\"89\")\nprintln(minuteOpt.getOrElse(0))","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_831","timestamp":1745348093537,"code":"import scala.util.{Try, Success, Failure}\ndef fetchLiveScore(api: String): Try[Score] = Try(Score(2,1))\nfetchLiveScore(\"url\") match\n  case Success(s) => println(s\"Score: $s\")\n  case Failure(ex) => println(\"Could not fetch score\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_833","timestamp":1745348093537,"code":"case class MatchFeed(\n  matchId: String,\n  updateTimeUtc: Option[String],\n  score: Option[Score]\n)\nval liveFeed = MatchFeed(\"M10\", None, None)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_835","timestamp":1745348093537,"code":"case class ScoreUpdate(minute: Int, score: Option[Score])\nval update = ScoreUpdate(77, Some(Score(2,2)))\nval desc = update.score.fold(\"No update yet\")(s => s\"${s.home} - ${s.away}\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_837","timestamp":1745348093537,"code":"case class Penalty(kicker: String, scored: Option[Boolean])\nval penalties = List(\n  Penalty(\"John\", Some(true)),\n  Penalty(\"Tom\", None)\n)\nval totalScored = penalties.flatMap(_.scored).count(_ == true)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_839","timestamp":1745348093538,"code":"def safeGetStat(stats: Map[String, Int], key: String): Int =\n  stats.get(key).getOrElse(0)\nval shots = safeGetStat(Map(\"shots\" -> 8), \"shots\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_841","timestamp":1745348093538,"code":"case class Commentary(minute: Int, text: String)\ndef addComment(cms: List[Commentary], text: String, min: Int): List[Commentary] =\n  Commentary(min, text) :: cms\nval updatedComments = addComment(Nil, \"First goal!\", 12)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_843","timestamp":1745348093538,"code":"case class TeamStats(team: String, goals: Int, fouls: Int)\nval maybeStats: Option[TeamStats] = Some(TeamStats(\"Red\", 3, 2))\nval foulStatus = maybeStats.filter(_.fouls > 1).map(_.team)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_845","timestamp":1745348093539,"code":"def getLiveScore(id: String): Option[Score] =\n  if id == \"unknown\" then None else Some(Score(2,1))\nval msg = getLiveScore(\"unknown\").fold(\"No score\")(s => s\"Score: ${s.home}-${s.away}\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_826","timestamp":1745348109510,"code":"case class Car(plate: String, make: String, year: Int)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_828","timestamp":1745348109510,"code":"case class Booking(id: String, carPlate: String, customer: String, days: Int)\n\ndef findBooking(bookings: List[Booking], bookingId: String): Option[Booking] =\n  bookings.find(_.id == bookingId)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_830","timestamp":1745348109510,"code":"case class Customer(id: String, name: String, email: Option[String])\n\ndef contactEmail(customer: Customer): String =\n  customer.email.getOrElse(\"No email on file\")","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_832","timestamp":1745348109511,"code":"def parsePlate(str: String): Either[String, String] =\n  if str.matches(\"[A-Z0-9]{7}\") then Right(str)\n  else Left(s\"Invalid plate: $str\")","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_834","timestamp":1745348109511,"code":"import scala.util.Try\n\ndef calculateTotalCost(days: Int, dailyRate: Double): Try[Double] =\n  Try(days * dailyRate)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_836","timestamp":1745348109511,"code":"case class Fleet(cars: List[Car])\n\ndef findCarByPlate(fleet: Fleet, plate: String): Option[Car] =\n  fleet.cars.find(_.plate == plate)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_838","timestamp":1745348109511,"code":"case class Location(city: String, code: String)\ncase class Rental(car: Car, location: Location, days: Int)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_840","timestamp":1745348109511,"code":"def safeMileageIncrement(current: Int, add: Int): Either[String, Int] =\n  if add >= 0 then Right(current + add)\n  else Left(\"Mileage increment cannot be negative\")","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_842","timestamp":1745348109511,"code":"case class MaintenanceRecord(carPlate: String, details: String, date: String)\n\ndef recentMaintenance(records: List[MaintenanceRecord], carPlate: String): Option[MaintenanceRecord] =\n  records.filter(_.carPlate == carPlate).sortBy(_.date).lastOption","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_844","timestamp":1745348109512,"code":"def safeAssignCar(cars: List[Car], plate: String): Either[String, Car] =\n  cars.find(_.plate == plate).toRight(s\"Car with plate $plate not found.\")","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_846","timestamp":1745348109512,"code":"case class RentalStatus(carPlate: String, status: String)\n\ndef isAvailable(status: RentalStatus): Boolean =\n  status match\n    case RentalStatus(_, \"Available\") => true\n    case _ => false","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_848","timestamp":1745348109512,"code":"case class Payment(amount: Double, method: Option[String])\n\ndef describePayment(payment: Payment): String =\n  payment.method.map(m => s\"Paid by $m\").getOrElse(\"Payment method unknown\")","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_850","timestamp":1745348109512,"code":"import scala.util.Try\n\ndef parseDays(str: String): Try[Int] =\n  Try(str.toInt)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_852","timestamp":1745348109512,"code":"case class DriverLicense(number: String, verified: Boolean)\n\ndef canRent(license: Option[DriverLicense]): Boolean =\n  license.exists(_.verified)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_854","timestamp":1745348109512,"code":"def updateFleet(fleet: Fleet, car: Car): Fleet =\n  val updatedCars = fleet.cars.filterNot(_.plate == car.plate) :+ car\n  fleet.copy(cars = updatedCars)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_856","timestamp":1745348109513,"code":"def safeGetFirstCar(fleet: Fleet): Option[Car] =\n  fleet.cars.headOption","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_858","timestamp":1745348109513,"code":"def extendBooking(booking: Booking, extraDays: Int): Either[String, Booking] =\n  if extraDays > 0 then Right(booking.copy(days = booking.days + extraDays))\n  else Left(\"Cannot extend booking by 0 or negative days\")","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_860","timestamp":1745348109513,"code":"case class Insurance(policyId: String, valid: Boolean)\n\ndef insuranceStatus(insurance: Option[Insurance]): String =\n  insurance match\n    case Some(Insurance(_, true)) => \"Insured\"\n    case Some(_) => \"Not valid\"\n    case None => \"No insurance\"","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_862","timestamp":1745348109513,"code":"def applyDiscount(cost: Double, promo: Option[Double]): Double =\n  promo.map(discount => cost * (1 - discount)).getOrElse(cost)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_864","timestamp":1745348109513,"code":"import scala.util.Try\n\ndef safeDouble(str: String): Either[String, Double] =\n  Try(str.toDouble).toEither.left.map(_ => s\"Invalid double: $str\")","category":"idiomatic","topicUsed":"Car rental fleet management"}
