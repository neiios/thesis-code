{"id":"uses_throw_1","timestamp":1745436413996,"code":"case class Item(price: Double)\ndef calculateTotal(items: List[Item]): Double =\n  if (items.isEmpty) throw new IllegalArgumentException(\"No items in cart\")\n  else items.map(_.price).sum\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_2","timestamp":1745436413997,"code":"def applyDiscount(total: Double, discount: Double): Double = {\n  if (discount < 0) throw new RuntimeException(\"Discount can't be negative\")\n  total - discount\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_3","timestamp":1745436413997,"code":"def validateCoupon(code: String): String = {\n  if (code.trim.isEmpty) throw new Exception(\"Invalid coupon code\")\n  code.toUpperCase\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_4","timestamp":1745436413997,"code":"def parseQuantity(qty: String): Int = {\n  try {\n    qty.toInt\n  } catch {\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Not a valid quantity\")\n  }\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_5","timestamp":1745436413997,"code":"def findUserByEmail(email: String): String = {\n  if (email == \"test@nomail.com\")\n    \"user\"\n  else throw new Exception(\"User not found\")\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_6","timestamp":1745436413997,"code":"def calculateShipping(weight: Double): Double = {\n  if (weight < 0) throw new Exception(\"Invalid weight\")\n  5.0 + weight * 0.2\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_7","timestamp":1745436413997,"code":"def selectPaymentMethod(option: Int): String = {\n  if (option == 1) \"CreditCard\"\n  else if (option == 2) \"PayPal\"\n  else throw new RuntimeException(\"Invalid payment method\")\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_8","timestamp":1745436413997,"code":"def getItemStock(itemId: Int): Int = {\n  val stock = Map(1 -> 10, 2 -> 0)\n  stock.getOrElse(itemId, throw new Exception(\"Item not found\"))\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_9","timestamp":1745436413997,"code":"def chargeCard(amount: Double): String = {\n  if (amount <= 0) throw new Exception(\"Invalid amount\")\n  s\"Charged $$amount successfully\"\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_10","timestamp":1745436413997,"code":"def getUserAddress(userId: Long): String = {\n  if (userId == 999L) throw new NoSuchElementException(\"No address for user\")\n  \"123 Main Street\"\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_11","timestamp":1745436413997,"code":"def removeFromCart(cart: List[Int], item: Int): List[Int] = {\n  if (!cart.contains(item)) throw new Exception(\"Item not in cart\")\n  cart.filterNot(_ == item)\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_12","timestamp":1745436413997,"code":"def setShippingMethod(method: String): String = {\n  method match {\n    case \"Express\" | \"Standard\" => method\n    case _ => throw new Exception(\"Shipping method not supported\")\n  }\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_13","timestamp":1745436413997,"code":"def parsePrice(price: String): Double = {\n  try {\n    price.toDouble\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Could not parse price\")\n  }\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_14","timestamp":1745436413997,"code":"def getCartSubtotal(cart: List[Double]): Double = {\n  if (cart.exists(_ < 0)) throw new Exception(\"Negative price in cart\")\n  cart.sum\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_15","timestamp":1745436413998,"code":"def cancelOrder(orderId: Int): String = {\n  if (orderId < 0) throw new Exception(\"Order ID invalid\")\n  \"Order canceled\"\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_16","timestamp":1745436413998,"code":"def loginUser(username: String, password: String): String = {\n  if (password != \"secret\") throw new Exception(\"Password incorrect\")\n  username\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_17","timestamp":1745436413998,"code":"def getLoyaltyPoints(userId: Int): Int = {\n  if (userId == 0) throw new Exception(\"User ID missing\")\n  100\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_18","timestamp":1745436413998,"code":"def splitPayment(payment: Double, numParts: Int): Double = {\n  if (numParts == 0) throw new ArithmeticException(\"Cannot split into zero parts\")\n  payment / numParts\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_19","timestamp":1745436413998,"code":"def verifyAddress(addr: String): String = {\n  if (addr.isEmpty) throw new Exception(\"Empty address\")\n  addr\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_20","timestamp":1745436413998,"code":"def confirmOrder(subtotal: Double, shipping: Double): Double = {\n  if (subtotal < 0 || shipping < 0) throw new Exception(\"Negative amount\")\n  subtotal + shipping\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_21","timestamp":1745436426662,"code":"def parseBalance(input: String): Double = {\n  if (input.isEmpty) throw new IllegalArgumentException(\"Empty input\")\n  input.toDouble\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_22","timestamp":1745436426662,"code":"def getUserAccount(name: String): String = {\n  if (name == null || name.trim.isEmpty) throw new Exception(\"Username required\")\n  s\"Account for $name\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_23","timestamp":1745436426662,"code":"def withdrawFunds(amount: Double, balance: Double): Double = {\n  if (amount > balance) throw new RuntimeException(\"Insufficient funds\")\n  balance - amount\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_24","timestamp":1745436426662,"code":"def getPinCode(pin: String): Int = {\n  if (pin.length != 4) throw new IllegalArgumentException(\"PIN must be 4 digits\")\n  pin.toInt\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_25","timestamp":1745436426662,"code":"def transferFunds(from: String, to: String, amount: Double): String = {\n  if (amount <= 0) throw new IllegalArgumentException(\"Invalid transfer amount\")\n  s\"Transferred $$amount from $$from to $$to\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_26","timestamp":1745436426662,"code":"def checkLoginStatus(isLoggedIn: Boolean): String = {\n  if (!isLoggedIn) throw new Exception(\"User not logged in\")\n  \"User logged in\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_27","timestamp":1745436426662,"code":"def getTransactionById(id: Int): String = {\n  if (id < 0) throw new Exception(\"Invalid transaction ID\")\n  s\"Transaction $$id details\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_28","timestamp":1745436426662,"code":"def calculateLoan(amount: Double, months: Int): Double = {\n  if (months == 0) throw new ArithmeticException(\"Months can't be zero\")\n  amount / months\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_29","timestamp":1745436426662,"code":"def validateMobileNumber(number: String): Boolean = {\n  if (number.length != 10) throw new Exception(\"Invalid mobile number\")\n  true\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_30","timestamp":1745436426662,"code":"def fetchStatement(userId: Int, month: Int): List[String] = {\n  if (month < 1 || month > 12) throw new Exception(\"Invalid month\")\n  List(s\"Statement for $$month: ...\")\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_31","timestamp":1745436426662,"code":"def setNewPassword(pass: String): Boolean = {\n  if (pass.length < 6) throw new Exception(\"Password too short\")\n  true\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_32","timestamp":1745436426662,"code":"def findBranchCode(branch: String): Int = {\n  if (branch == \"\") throw new Exception(\"No branch specified\")\n  1234\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_33","timestamp":1745436426662,"code":"def depositCheck(amount: Double): String = {\n  if (amount < 1) throw new Exception(\"Check amount too low\")\n  \"Check deposited\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_34","timestamp":1745436426662,"code":"def billPayment(account: String, billId: String, amount: Double): String = {\n  if (account.isEmpty) throw new Exception(\"Account required\")\n  s\"Bill $$billId paid from $account\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_35","timestamp":1745436426662,"code":"def updateEmail(userId: Int, email: String): Boolean = {\n  if (!email.contains(\"@\")) throw new Exception(\"Invalid email address\")\n  true\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_36","timestamp":1745436426662,"code":"def schedulePayment(days: Int): String = {\n  if (days < 0) throw new Exception(\"Cannot schedule in the past\")\n  s\"Payment scheduled in $$days days\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_37","timestamp":1745436426662,"code":"def checkAppVersion(version: Int): String = {\n  if (version < 5) throw new Exception(\"App version too old\")\n  \"App version supported\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_38","timestamp":1745436426662,"code":"def lockAccount(isSuspicious: Boolean): String = {\n  if (!isSuspicious) throw new Exception(\"No suspicious activity detected\")\n  \"Account locked\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_39","timestamp":1745436426662,"code":"def findATM(location: String): String = {\n  if (location.isEmpty) throw new Exception(\"Location is empty\")\n  s\"ATM found at $location\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_40","timestamp":1745436426662,"code":"def setNotificationPreference(userId: Int, enabled: Boolean): String = {\n  if (userId <= 0) throw new Exception(\"Invalid user ID\")\n  if (enabled) \"Notifications enabled\" else \"Notifications disabled\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_41","timestamp":1745436444478,"code":"def getDoctorSchedule(doctorId: Int): List[String] = {\n  if (doctorId <= 0) throw new IllegalArgumentException(\"Invalid doctorId\")\n  List(\"09:00\", \"10:00\", \"11:00\")\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_42","timestamp":1745436444479,"code":"def bookAppointment(patientId: Int, doctorId: Int): String = {\n  if (patientId <= 0 || doctorId <= 0) throw new Exception(\"IDs must be positive\")\n  \"Appointment confirmed\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_43","timestamp":1745436444479,"code":"def findPatient(name: String): Int = {\n  if (name.isEmpty) throw new RuntimeException(\"Empty name\")\n  101\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_44","timestamp":1745436444479,"code":"def calculateSlotIndex(time: String): Int = {\n  if (time != \"09:00\" && time != \"10:00\") throw new NoSuchElementException(\"No slot at given time\")\n  if (time == \"09:00\") 0 else 1\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_45","timestamp":1745436444479,"code":"def cancelAppointment(appointmentId: Int): Boolean = {\n  if (appointmentId < 1000) throw new Exception(\"Not found\")\n  true\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_46","timestamp":1745436444479,"code":"def assignNurse(appointmentId: Int): String = {\n  if (appointmentId % 2 == 0) throw new Exception(\"Nurse unavailable\")\n  \"Nurse assigned\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_47","timestamp":1745436444479,"code":"def checkAvailability(doctorId: Int, slot: String): Boolean = {\n  if (slot == \"13:00\") throw new Exception(\"Doctor unavailable at this time\")\n  true\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_48","timestamp":1745436444479,"code":"def validateToken(token: String): Unit = {\n  if (token.length < 20) throw new IllegalArgumentException(\"Bad token\")\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_49","timestamp":1745436444479,"code":"def getPastAppointments(patientId: Int): List[String] = {\n  if (patientId < 1) throw new Exception(\"Invalid patient\")\n  List(\"Apt1\", \"Apt2\")\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_50","timestamp":1745436444479,"code":"def scheduleVideoCall(doctorId: Int, patientId: Int): String = {\n  if (doctorId == patientId) throw new Exception(\"Doctor and patient must differ\")\n  \"Video call scheduled\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_51","timestamp":1745436444479,"code":"def parseAppointmentDate(dateStr: String): Long = {\n  if (!dateStr.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) throw new Exception(\"Invalid format\")\n  1683769200000L\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_52","timestamp":1745436444479,"code":"def notifyPatient(patientId: Int): String = {\n  if (patientId == 999) throw new RuntimeException(\"Blacklisted patient\")\n  \"Patient notified\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_53","timestamp":1745436444479,"code":"def selectSpecialist(category: String): String = {\n  if (category != \"Cardiology\" && category != \"Dermatology\") throw new IllegalArgumentException(\"Unknown category\")\n  s\"Assigned $category specialist\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_54","timestamp":1745436444479,"code":"def updateAppointmentStatus(appointmentId: Int, status: String): String = {\n  if (!Set(\"Confirmed\", \"Cancelled\").contains(status)) throw new Exception(\"Bad status\")\n  s\"Status updated to $status\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_55","timestamp":1745436444479,"code":"def getAvailableSlots(day: String): List[String] = {\n  if (day == \"Sunday\") throw new Exception(\"Closed on Sunday\")\n  List(\"09:00\", \"10:30\", \"12:00\")\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_56","timestamp":1745436444479,"code":"def requestReschedule(appointmentId: Int, newTime: String): String = {\n  if (newTime == \"00:00\") throw new Exception(\"Time unavailable\")\n  \"Reschedule requested\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_57","timestamp":1745436444479,"code":"def checkPatientEligibility(age: Int): Boolean = {\n  if (age < 0) throw new IllegalArgumentException(\"Negative age\")\n  age >= 18\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_58","timestamp":1745436444479,"code":"def confirmInsurance(patientId: Int, insuranceId: String): String = {\n  if (insuranceId.length != 10) throw new Exception(\"Insurance ID invalid\")\n  \"Insurance confirmed\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_59","timestamp":1745436444479,"code":"def fetchDoctorRating(doctorId: Int): Double = {\n  if (doctorId > 10000) throw new Exception(\"Doctor not found\")\n  4.7\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_60","timestamp":1745436444479,"code":"def getAppointmentDetails(appointmentId: Int): String = {\n  if (appointmentId == 0) throw new Exception(\"Invalid appointmentId\")\n  s\"Appointment details for $appointmentId\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_61","timestamp":1745436457790,"code":"def getStepGoalAchieved(steps: Int, goal: Int): Boolean =\n  if (goal == 0) throw new IllegalArgumentException(\"Goal cannot be zero\")\n  else steps >= goal\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_62","timestamp":1745436457790,"code":"def averageHeartRate(readings: List[Int]): Int =\n  if (readings.isEmpty) throw new RuntimeException(\"No heart rate readings\")\n  else readings.sum / readings.length\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_63","timestamp":1745436457790,"code":"def caloriesBurned(weight: Double, distance: Double): Double =\n  if (weight <= 0 || distance < 0) throw new IllegalArgumentException(\"Invalid input\")\n  else weight * distance * 0.5\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_64","timestamp":1745436457790,"code":"class User(val age: Int) {\n  def maxHeartRate: Int =\n    if (age <= 0) throw new IllegalArgumentException(\"Invalid age\")\n    else 220 - age\n}","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_65","timestamp":1745436457790,"code":"def getActiveMinutes(minutes: Option[Int]): Int =\n  minutes.getOrElse(throw new NoSuchElementException(\"No active minutes data\"))\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_66","timestamp":1745436457790,"code":"def weeklyDistance(distances: Seq[Double]): Double =\n  if (distances.exists(_ < 0)) throw new IllegalArgumentException(\"Negative distance\")\n  else distances.sum\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_67","timestamp":1745436457790,"code":"def getLastWorkout(workouts: List[String]): String =\n  if (workouts.isEmpty) throw new RuntimeException(\"No workouts found\")\n  else workouts.last\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_68","timestamp":1745436457790,"code":"def safeDivideCalories(totalCalories: Int, days: Int): Int =\n  if (days == 0) throw new ArithmeticException(\"Days cannot be zero\")\n  else totalCalories / days\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_69","timestamp":1745436457790,"code":"def getSleepQuality(score: Int): String =\n  if (score < 0 || score > 100) throw new IllegalArgumentException(\"Invalid score\")\n  else if (score > 80) \"Good\" else \"Bad\"\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_70","timestamp":1745436457790,"code":"def averagePace(distance: Double, time: Double): Double =\n  if (time <= 0) throw new IllegalArgumentException(\"Time must be positive\")\n  else distance / time\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_71","timestamp":1745436457791,"code":"def getWorkoutByIndex(workouts: Vector[String], idx: Int): String =\n  if (idx < 0 || idx >= workouts.size) throw new IndexOutOfBoundsException(\"Invalid index\")\n  else workouts(idx)\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_72","timestamp":1745436457791,"code":"def bmi(weight: Double, height: Double): Double =\n  if (height == 0) throw new ArithmeticException(\"Height cannot be zero\")\n  else weight / (height * height)\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_73","timestamp":1745436457791,"code":"def getCaloriesForDay(day: String, caloriesData: Map[String, Int]): Int =\n  caloriesData.get(day) match {\n    case Some(cal) => cal\n    case None => throw new NoSuchElementException(\"No data for day\")\n  }\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_74","timestamp":1745436457791,"code":"def restingHeartRate(rates: Seq[Int]): Int =\n  if (rates.isEmpty) throw new RuntimeException(\"No rates\")\n  else rates.min\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_75","timestamp":1745436457791,"code":"def workoutName(name: String): String =\n  if (name.trim.isEmpty) throw new IllegalArgumentException(\"Name cannot be empty\")\n  else name.trim\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_76","timestamp":1745436457791,"code":"def tallestClimb(climbs: List[Double]): Double =\n  if (climbs.isEmpty) throw new RuntimeException(\"No climb data\")\n  else climbs.max\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_77","timestamp":1745436457791,"code":"def averageSpeed(speeds: Vector[Double]): Double =\n  if (speeds.isEmpty) throw new RuntimeException(\"No speed data\")\n  else speeds.sum / speeds.size\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_78","timestamp":1745436457791,"code":"def hydrationLevel(waterIntake: List[Double]): Double =\n  if (waterIntake.exists(_ < 0)) throw new IllegalArgumentException(\"Negative intake\")\n  else waterIntake.sum\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_79","timestamp":1745436457791,"code":"def intensityLevel(level: Int): String =\n  if (level < 1 || level > 5) throw new IllegalArgumentException(\"Invalid intensity level\")\n  else Seq(\"Very low\", \"Low\", \"Moderate\", \"High\", \"Very high\")(level - 1)\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_80","timestamp":1745436457791,"code":"def getGoalProgress(progress: Double): Double =\n  if (progress < 0.0 || progress > 1.0) throw new IllegalArgumentException(\"Invalid progress value\")\n  else progress\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_81","timestamp":1745436473048,"code":"object PricingService1 {\n  def getPlanPrice(planId: String): Double = {\n    if (planId.isEmpty) throw new IllegalArgumentException(\"Plan ID is empty\")\n    19.99\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_82","timestamp":1745436473048,"code":"object PricingService2 {\n  def findPlanById(id: String): String = {\n    val plan = if (id == \"basic\") \"Basic Plan\" else null\n    if (plan == null) throw new NoSuchElementException(\"Plan not found\")\n    plan\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_83","timestamp":1745436473048,"code":"object PricingService3 {\n  def updatePlanName(id: String, newName: String): Unit = {\n    if (newName.trim.isEmpty) throw new IllegalArgumentException(\"Name cannot be empty\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_84","timestamp":1745436473048,"code":"object PricingService4 {\n  def applyDiscount(price: Double, percentage: Double): Double = {\n    if (percentage < 0) throw new IllegalArgumentException(\"Negative discount\")\n    price * (1 - percentage/100)\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_85","timestamp":1745436473048,"code":"object PricingService5 {\n  def deletePlan(id: String): Unit = {\n    if (id != \"pro\" && id != \"basic\") throw new RuntimeException(\"Invalid plan ID\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_86","timestamp":1745436473048,"code":"object PricingService6 {\n  def dividePrices(p1: Double, p2: Double): Double = {\n    if (p2 == 0) throw new ArithmeticException(\"Division by zero\")\n    p1 / p2\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_87","timestamp":1745436473048,"code":"object PricingService7 {\n  def getPlanFeatures(planId: String): List[String] = {\n    if (planId == \"unknown\") throw new Exception(\"Unknown plan\")\n    List(\"feature1\", \"feature2\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_88","timestamp":1745436473048,"code":"object PricingService8 {\n  def requireOwnerAccess(userRole: String): Unit = {\n    if (userRole != \"owner\") throw new SecurityException(\"Access denied\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_89","timestamp":1745436473048,"code":"object PricingService9 {\n  def renewSubscription(planId: String, months: Int): Double = {\n    if (months <= 0) throw new IllegalArgumentException(\"Invalid period\")\n    9.99 * months\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_90","timestamp":1745436473048,"code":"object PricingService10 {\n  def changePlanPrice(planId: String, price: Double): Unit = {\n    if (price < 0) throw new IllegalArgumentException(\"Negative price\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_91","timestamp":1745436473049,"code":"object PricingService11 {\n  def findCheapestPlan(prices: Seq[Double]): Double = {\n    if (prices.isEmpty) throw new IllegalStateException(\"No plans available\")\n    prices.min\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_92","timestamp":1745436473049,"code":"object PricingService12 {\n  def parsePlanTier(tier: String): Int = {\n    try tier.toInt\n    catch { case _: NumberFormatException => throw new RuntimeException(\"Invalid tier format\") }\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_93","timestamp":1745436473049,"code":"object PricingService13 {\n  def cancelPlan(id: String): Boolean = {\n    if (id == null) throw new NullPointerException(\"Plan ID was null\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_94","timestamp":1745436473049,"code":"object PricingService14 {\n  def getAnnualCost(planId: String): Double = {\n    if (planId == \"free\") throw new UnsupportedOperationException(\"Free plan has no annual cost\")\n    99.99\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_95","timestamp":1745436473049,"code":"object PricingService15 {\n  def validatePlanName(name: String): String = {\n    if (name.exists(_.isDigit)) throw new IllegalArgumentException(\"Digits not allowed in plan name\")\n    name\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_96","timestamp":1745436473049,"code":"object PricingService16 {\n  def enableFeature(planId: String, feature: String): Unit = {\n    if (feature.isEmpty) throw new IllegalArgumentException(\"Feature must not be empty\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_97","timestamp":1745436473049,"code":"object PricingService17 {\n  def getPriceDifference(id1: String, id2: String): Double = {\n    if (id1 == id2) throw new IllegalArgumentException(\"Same plan IDs\")\n    10.0\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_98","timestamp":1745436473049,"code":"object PricingService18 {\n  def isPlanAvailable(id: String): Boolean = {\n    if (id == \"retired\") throw new Exception(\"Plan is retired\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_99","timestamp":1745436473049,"code":"object PricingService19 {\n  def createPlan(name: String, price: Double): String = {\n    if (name == \"\") throw new IllegalArgumentException(\"Name required\")\n    \"planId-123\"\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_100","timestamp":1745436473049,"code":"object PricingService20 {\n  def migrateUserToPlan(userId: String, planId: String): Unit = {\n    if (userId == null || planId == null) throw new IllegalArgumentException(\"IDs must not be null\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_101","timestamp":1745436485671,"code":"object DevicePower {\n  def toggleDevice(name: String): Boolean = {\n    if (name.isEmpty) throw new IllegalArgumentException(\"Device name is empty!\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_102","timestamp":1745436485671,"code":"object ThermostatControl {\n  def setTemperature(temp: Int): Unit = {\n    if (temp < 10 || temp > 35) throw new RuntimeException(\"Temperature out of range\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_103","timestamp":1745436485671,"code":"object Lighting {\n  def setBrightness(level: Int): String = {\n    if (level < 0 || level > 100) throw new IllegalStateException(\"Brightness level invalid\")\n    \"Brightness set\"\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_104","timestamp":1745436485671,"code":"object SecuritySystem {\n  def armSystem(code: String): Boolean = {\n    if (code != \"1234\") throw new Exception(\"Incorrect code\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_105","timestamp":1745436485671,"code":"object SmartDoorLock {\n  def unlock(authorized: Boolean): String = {\n    if (!authorized) throw new UnsupportedOperationException(\"Access denied\")\n    \"Door unlocked\"\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_106","timestamp":1745436485671,"code":"object HumiditySensor {\n  def setThreshold(thresh: Int): Unit = {\n    if (thresh < 20 || thresh > 80) throw new IllegalArgumentException(\"Invalid humidity threshold\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_107","timestamp":1745436485671,"code":"object Speaker {\n  def playSong(song: Option[String]): Unit = {\n    if (song.isEmpty) throw new NoSuchElementException(\"No song selected\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_108","timestamp":1745436485671,"code":"object Camera {\n  def takeSnapshot(active: Boolean): String = {\n    if (!active) throw new RuntimeException(\"Camera inactive\")\n    \"Snapshot taken\"\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_109","timestamp":1745436485671,"code":"object MotionSensor {\n  def detectMotion(area: String): Boolean = {\n    if (area == \"\") throw new Exception(\"Area undefined\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_110","timestamp":1745436485671,"code":"object DeviceManager {\n  def addDevice(name: String, id: Int): Unit = {\n    if (name == null || id < 0) throw new IllegalArgumentException(\"Invalid device info\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_111","timestamp":1745436485671,"code":"object WindowBlinds {\n  def adjustAngle(angle: Int): Unit = {\n    if (angle < 0 || angle > 90) throw new IllegalArgumentException(\"Angle out of range\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_112","timestamp":1745436485671,"code":"object LightingGroup {\n  def groupOn(devices: List[String]): Int = {\n    if (devices.isEmpty) throw new Exception(\"No devices in group\")\n    devices.size\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_113","timestamp":1745436485671,"code":"object AirPurifier {\n  def setFanSpeed(speed: Int): Option[String] = {\n    if (speed < 1 || speed > 5) throw new RuntimeException(\"Speed must be 1-5\")\n    Some(\"Fan speed set\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_114","timestamp":1745436485671,"code":"object Timer {\n  def startTimer(seconds: Int): Unit = {\n    if (seconds <= 0) throw new ArithmeticException(\"Timer must be positive\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_115","timestamp":1745436485671,"code":"object SmartPlug {\n  def scheduleShutdown(hours: Int): Boolean = {\n    if (hours > 24) throw new IllegalArgumentException(\"Shutdown exceeds max time\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_116","timestamp":1745436485671,"code":"object WaterLeakSensor {\n  def alertIfWet(isWet: Boolean): String = {\n    if (!isWet) throw new Exception(\"No leak detected\")\n    \"Leak alert\"\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_117","timestamp":1745436485671,"code":"object DeviceRenamer {\n  def renameDevice(current: String, newName: String): String = {\n    if (newName.isEmpty) throw new Exception(\"New name empty\")\n    newName\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_118","timestamp":1745436485671,"code":"object BatteryMonitor {\n  def checkBattery(level: Int): String = {\n    if (level < 0 || level > 100) throw new RuntimeException(\"Battery level invalid\")\n    \"Battery healthy\"\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_119","timestamp":1745436485672,"code":"object NotificationSender {\n  def sendNotification(message: String): Boolean = {\n    if (message.trim.isEmpty) throw new Exception(\"Message empty\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_120","timestamp":1745436485672,"code":"object Heater {\n  def setPower(power: Int): Int = {\n    if (power == 0) throw new IllegalArgumentException(\"Power cannot be zero\")\n    1000 / power\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_121","timestamp":1745436503853,"code":"def findDriver(drivers: List[String], name: String): String = {\n  drivers.find(_ == name).getOrElse(throw new NoSuchElementException(\"Driver not found\"))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_122","timestamp":1745436503853,"code":"def calculateFare(distance: Double, rate: Double): Double = {\n  if (rate == 0) throw new ArithmeticException(\"Rate cannot be zero\")\n  distance * rate\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_123","timestamp":1745436503853,"code":"case class RideRequest(riderId: String, location: String)\ndef acceptRide(request: RideRequest): Boolean = {\n  if (request.location.isEmpty) throw new IllegalArgumentException(\"Invalid location\")\n  true\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_124","timestamp":1745436503853,"code":"def assignVehicle(vehicles: List[String]): String = {\n  vehicles.headOption.getOrElse(throw new Exception(\"No vehicles available\"))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_125","timestamp":1745436503853,"code":"def pickUpRider(status: String): Unit = {\n  if (status != \"waiting\") throw new Exception(\"Rider not waiting\")\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_126","timestamp":1745436503853,"code":"def getSurgeMultiplier(surge: Option[Double]): Double = {\n  surge.getOrElse(throw new Exception(\"Surge data missing\"))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_127","timestamp":1745436503853,"code":"def dispatchDriver(driver: String, isAvailable: Boolean): String = {\n  if (!isAvailable) throw new Exception(\"Driver unavailable\")\n  driver\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_128","timestamp":1745436503853,"code":"def matchRiderToDriver(riders: List[String], drivers: List[String]): (String, String) = {\n  (riders.headOption, drivers.headOption) match {\n    case (Some(r), Some(d)) => (r, d)\n    case _ => throw new Exception(\"No match possible\")\n  }\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_129","timestamp":1745436503853,"code":"def cancelRide(rideId: String, canCancel: Boolean): Unit = {\n  if (!canCancel) throw new IllegalStateException(\"Ride cannot be cancelled at this stage\")\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_130","timestamp":1745436503853,"code":"def getNextRequest(queue: List[RideRequest]): RideRequest = {\n  if (queue.isEmpty) throw new Exception(\"Request queue empty\")\n  queue.head\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_131","timestamp":1745436503853,"code":"def validateLocation(lat: Double, lng: Double): Unit = {\n  if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {\n    throw new IllegalArgumentException(\"Invalid coordinates\")\n  }\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_132","timestamp":1745436503853,"code":"def estimateArrivalTime(traffic: Option[Int]): Int = {\n  traffic match {\n    case Some(minutes) => minutes\n    case None => throw new Exception(\"Traffic data missing\")\n  }\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_133","timestamp":1745436503853,"code":"def choosePaymentMethod(method: String): String = {\n  if (method != \"cash\" && method != \"card\") throw new Exception(\"Unsupported payment method\")\n  method\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_134","timestamp":1745436503853,"code":"def getDiscount(code: String): Double = {\n  code match {\n    case \"\" => throw new Exception(\"No discount code provided\")\n    case c => 5.0\n  }\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_135","timestamp":1745436503853,"code":"def confirmDriverAccepted(accepted: Boolean): Unit = {\n  if (!accepted) throw new Exception(\"Driver did not accept the ride\")\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_136","timestamp":1745436503853,"code":"def updateDriverLocation(driverId: String, location: (Double, Double)): Unit = {\n  if (driverId.isEmpty) throw new IllegalArgumentException(\"Missing driver ID\")\n  if (location == (0.0, 0.0)) throw new Exception(\"Driver location not updated\")\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_137","timestamp":1745436503853,"code":"def removeFromQueue(queue: List[RideRequest], request: RideRequest): List[RideRequest] = {\n  if (!queue.contains(request)) throw new Exception(\"Request not in queue\")\n  queue.filterNot(_ == request)\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_138","timestamp":1745436503853,"code":"def getActiveRides(rides: Map[String, String], userId: String): String = {\n  rides.get(userId).getOrElse(throw new Exception(\"No active rides for user\"))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_139","timestamp":1745436503853,"code":"def calculateDistance(start: (Double, Double), end: (Double, Double)): Double = {\n  if (start == end) throw new Exception(\"Start and end points are the same\")\n  Math.sqrt(Math.pow(end._1 - start._1, 2) + Math.pow(end._2 - start._2, 2))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_140","timestamp":1745436503853,"code":"def getDriverRating(ratings: Map[String, Double], driver: String): Double = {\n  ratings.get(driver).getOrElse(throw new Exception(\"Rating not found for driver\"))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_141","timestamp":1745436522642,"code":"def findFlightByNumber(flights: List[String], number: String): String =\n  flights.find(_ == number).getOrElse(throw new NoSuchElementException(\"Flight not found\"))","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_142","timestamp":1745436522642,"code":"def getSeatPrice(seatClass: String): Int =\n  seatClass match {\n    case \"Economy\" => 500\n    case \"Business\" => 1200\n    case _ => throw new IllegalArgumentException(\"Unknown seat class\")\n  }","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_143","timestamp":1745436522642,"code":"def parsePassengerAge(input: String): Int =\n  try input.toInt\n  catch {\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid age format\")\n  }","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_144","timestamp":1745436522642,"code":"def reserveSeat(seats: Set[String], seat: String): Set[String] =\n  if (seats.contains(seat)) throw new RuntimeException(\"Seat already reserved\")\n  else seats + seat","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_145","timestamp":1745436522642,"code":"def assignGate(gates: List[String]): String =\n  if (gates.isEmpty) throw new RuntimeException(\"No gates available\")\n  else gates.head","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_146","timestamp":1745436522642,"code":"def validateTicket(ticketId: String): Unit =\n  if (ticketId.length != 8) throw new IllegalArgumentException(\"Invalid ticket ID\")","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_147","timestamp":1745436522642,"code":"def checkBaggageWeight(weight: Double): Unit =\n  if (weight > 23.0) throw new RuntimeException(\"Baggage overweight\")","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_148","timestamp":1745436522642,"code":"def cancelBooking(bookings: Map[String, String], bookingId: String): Map[String, String] =\n  if (!bookings.contains(bookingId)) throw new NoSuchElementException(\"Booking not found\")\n  else bookings - bookingId","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_149","timestamp":1745436522642,"code":"def findAvailableFlights(dest: String, flights: List[(String, Boolean)]): List[(String, Boolean)] =\n  val available = flights.filter(f => f._1 == dest && f._2)\n  if (available.isEmpty) throw new Exception(\"No available flights to destination\")\n  else available","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_150","timestamp":1745436522642,"code":"def getFrequentFlyerPoints(id: Int, db: Map[Int, Int]): Int =\n  db.getOrElse(id, throw new Exception(\"Frequent flyer not found\"))","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_151","timestamp":1745436522642,"code":"def issueBoardingPass(passengerId: String, boardingPasses: Set[String]): String =\n  if (boardingPasses.contains(passengerId)) throw new Exception(\"Boarding pass already issued\")\n  else passengerId","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_152","timestamp":1745436522642,"code":"def changeFlightDate(current: String, newDate: String): String =\n  if (newDate <= current) throw new IllegalArgumentException(\"Invalid new date\")\n  else newDate","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_153","timestamp":1745436522642,"code":"def upgradeSeat(passenger: String, eligible: Boolean): String =\n  if (!eligible) throw new Exception(\"Passenger not eligible for upgrade\")\n  else \"Seat upgraded\"","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_154","timestamp":1745436522642,"code":"def calculateFare(passengers: Int, pricePerPerson: Int): Int =\n  if (passengers <= 0) throw new IllegalArgumentException(\"Invalid passenger count\")\n  else passengers * pricePerPerson","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_155","timestamp":1745436522642,"code":"def getBoardingZone(seatNumber: Int): String =\n  seatNumber match {\n    case n if n >= 1 && n <= 30 => \"Zone A\"\n    case n if n > 30 && n <= 60 => \"Zone B\"\n    case _ => throw new Exception(\"Invalid seat number for boarding zone\")\n  }","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_156","timestamp":1745436522642,"code":"def checkFlightStatus(status: String): String =\n  if (status != \"On Time\" && status != \"Delayed\" && status != \"Cancelled\")\n    throw new IllegalArgumentException(\"Unknown flight status\")\n  else status","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_157","timestamp":1745436522642,"code":"def transferMiles(from: Int, to: Int, miles: Int, balances: Map[Int, Int]): Map[Int, Int] =\n  if (miles <= 0) throw new Exception(\"Miles to transfer must be positive\")\n  val fromBalance = balances.getOrElse(from, throw new Exception(\"Sender not found\"))\n  val toBalance = balances.getOrElse(to, throw new Exception(\"Receiver not found\"))\n  if (fromBalance < miles) throw new Exception(\"Not enough miles to transfer\")\n  balances.updated(from, fromBalance - miles).updated(to, toBalance + miles)","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_158","timestamp":1745436522642,"code":"def addMealPreference(ticketId: String, preference: String, availableMeals: Set[String]): String =\n  if (!availableMeals.contains(preference)) throw new Exception(\"Meal not available\")\n  else preference","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_159","timestamp":1745436522642,"code":"def fetchBookingByEmail(bookings: Map[String, String], email: String): String =\n  bookings.getOrElse(email, throw new Exception(\"Booking not found for this email\"))","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_160","timestamp":1745436522642,"code":"def addLuggage(luggages: Int, maxAllowed: Int): Int =\n  if (luggages > maxAllowed) throw new Exception(\"Too many luggages\")\n  else luggages","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_161","timestamp":1745436533977,"code":"object ReservationExample1 {\n  def findRoomById(id: Int): String = {\n    if (id <= 0) throw new IllegalArgumentException(\"Room ID must be positive\")\n    s\"Room-$id\"\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_162","timestamp":1745436533977,"code":"object ReservationExample2 {\n  def checkInDate(date: String): String = {\n    if (date.isEmpty) throw new RuntimeException(\"No check-in date provided\")\n    date\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_163","timestamp":1745436533977,"code":"object ReservationExample3 {\n  def getGuestName(name: String): String = {\n    if (name == null) throw new NullPointerException(\"Guest name cannot be null\")\n    name\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_164","timestamp":1745436533977,"code":"object ReservationExample4 {\n  def reserveRooms(count: Int): Int = {\n    if (count <= 0) throw new IllegalArgumentException(\"Invalid number of rooms\")\n    count\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_165","timestamp":1745436533977,"code":"object ReservationExample5 {\n  def roomPrice(nights: Int, pricePerNight: Double): Double = {\n    if (nights == 0) throw new ArithmeticException(\"Number of nights cannot be zero\")\n    nights * pricePerNight\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_166","timestamp":1745436533977,"code":"object ReservationExample6 {\n  def assignRoomType(t: String): String = {\n    if (t != \"Suite\" && t != \"Standard\") throw new Exception(\"Invalid room type\")\n    t\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_167","timestamp":1745436533977,"code":"object ReservationExample7 {\n  def bookRoom(roomId: Int): String = {\n    if (roomId == 13) throw new RuntimeException(\"Room 13 is unavailable\")\n    s\"Room $roomId booked\"\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_168","timestamp":1745436533977,"code":"object ReservationExample8 {\n  def calculateTotal(amount: Double, guests: Int): Double = {\n    if (guests <= 0) throw new IllegalArgumentException(\"Guests must be positive\")\n    amount * guests\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_169","timestamp":1745436533977,"code":"object ReservationExample9 {\n  def findGuestByEmail(email: String): String = {\n    if (!email.contains(\"@\")) throw new Exception(\"Invalid email\")\n    email\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_170","timestamp":1745436533977,"code":"object ReservationExample10 {\n  def cancelBooking(bookingId: Int): String = {\n    if (bookingId < 100) throw new Exception(\"Booking ID too low\")\n    \"Cancelled\"\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_171","timestamp":1745436533977,"code":"object ReservationExample11 {\n  def selectHotel(city: String): String = {\n    if (city.trim.isEmpty) throw new Exception(\"City cannot be empty\")\n    city.capitalize + \" Hotel\"\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_172","timestamp":1745436533977,"code":"object ReservationExample12 {\n  def guestAge(age: Int): String = {\n    if (age < 18) throw new Exception(\"Guest too young\")\n    \"Adult\"\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_173","timestamp":1745436533977,"code":"object ReservationExample13 {\n  def validateCreditCard(number: String): String = {\n    if (number.length != 16) throw new Exception(\"Credit card number invalid\")\n    number\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_174","timestamp":1745436533977,"code":"object ReservationExample14 {\n  def checkRoomAvailability(rooms: Map[Int, Boolean], roomId: Int): Boolean = {\n    if (!rooms.contains(roomId)) throw new Exception(\"Room does not exist\")\n    rooms(roomId)\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_175","timestamp":1745436533977,"code":"object ReservationExample15 {\n  def getBreakfastOption(option: String): String = {\n    if (option != \"Continental\" && option != \"Buffet\") throw new Exception(\"Unknown breakfast option\")\n    option\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_176","timestamp":1745436533977,"code":"object ReservationExample16 {\n  def splitBill(total: Double, people: Int): Double = {\n    if (people == 0) throw new ArithmeticException(\"Cannot divide by zero\")\n    total / people\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_177","timestamp":1745436533977,"code":"object ReservationExample17 {\n  def daysBetween(checkIn: Int, checkOut: Int): Int = {\n    if (checkOut <= checkIn) throw new Exception(\"Check-out must be after check-in\")\n    checkOut - checkIn\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_178","timestamp":1745436533977,"code":"object ReservationExample18 {\n  def addServices(price: Double, service: String): Double = {\n    if (service != \"Laundry\" && service != \"Room Service\") throw new Exception(\"Invalid service\")\n    price + 20\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_179","timestamp":1745436533977,"code":"object ReservationExample19 {\n  def storeLuggage(items: Int): Boolean = {\n    if (items < 0) throw new Exception(\"Negative luggage not allowed\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_180","timestamp":1745436533977,"code":"object ReservationExample20 {\n  def roomCapacity(rooms: List[Int]): Int = {\n    if (rooms.isEmpty) throw new Exception(\"No rooms provided\")\n    rooms.sum\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_181","timestamp":1745436543090,"code":"def findOrderById(id: Int): String = if (id < 0) throw new IllegalArgumentException(\"Order ID must be positive\") else s\"Order-$id\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_182","timestamp":1745436543090,"code":"def calculateDeliveryTime(distance: Int, speed: Int): Int = if (speed == 0) throw new ArithmeticException(\"Speed cannot be zero\") else distance / speed","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_183","timestamp":1745436543090,"code":"def parseCustomerAddress(address: String): String = if (address.isEmpty) throw new RuntimeException(\"Address missing!\") else address","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_184","timestamp":1745436543090,"code":"def pickupCourier(name: String): String = if (name.contains(\"@\")) throw new Exception(\"Invalid courier name\") else s\"Courier $name assigned\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_185","timestamp":1745436543090,"code":"def getFoodItem(menu: Map[String, Int], item: String): Int = if (!menu.contains(item)) throw new NoSuchElementException(\"Item not found\") else menu(item)","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_186","timestamp":1745436543090,"code":"def assignVehicle(vehicles: List[String]): String = if (vehicles.isEmpty) throw new Exception(\"No vehicles available\") else vehicles.head","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_187","timestamp":1745436543090,"code":"def estimateTip(bill: Double, percentage: Int): Double = if (percentage < 0) throw new Exception(\"Negative tip not allowed\") else bill * percentage / 100","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_188","timestamp":1745436543090,"code":"def trackOrderStatus(status: String): String =\n  if (Set(\"pending\", \"on the way\", \"delivered\").contains(status)) status\n  else throw new Exception(\"Invalid order status\")","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_189","timestamp":1745436543090,"code":"def getUserPhone(user: (String, Option[String])): String = user._2.getOrElse(throw new Exception(\"No phone number\"))","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_190","timestamp":1745436543090,"code":"def validatePayment(amount: Double): String = if (amount <= 0) throw new Exception(\"Invalid payment amount\") else \"Payment processed\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_191","timestamp":1745436543090,"code":"def foodWeightPerPackage(weights: List[Int], packages: Int): Int = if (packages == 0) throw new Exception(\"Cannot divide by zero\") else weights.sum / packages","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_192","timestamp":1745436543090,"code":"def selectDeliveryWindow(hours: List[Int]): Int = if (hours.isEmpty) throw new Exception(\"No delivery slots available\") else hours.min","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_193","timestamp":1745436543090,"code":"def getRestaurantByCode(restaurants: Map[String, String], code: String): String = restaurants.get(code).getOrElse(throw new Exception(\"Restaurant not found\"))","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_194","timestamp":1745436543090,"code":"def customerRating(ratings: List[Int]): Double = if (ratings.isEmpty) throw new IllegalArgumentException(\"No ratings provided\") else ratings.sum.toDouble / ratings.size","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_195","timestamp":1745436543090,"code":"def parseDeliveryInstructions(instr: String): List[String] = if (instr.trim.isEmpty) throw new Exception(\"Empty instructions\") else instr.split(\",\").toList","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_196","timestamp":1745436543090,"code":"def startShift(driverId: Int, isActive: Boolean): String = if (!isActive) throw new Exception(\"Driver inactive\") else s\"Shift started for $driverId\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_197","timestamp":1745436543090,"code":"def checkFoodTemperature(temp: Int): String = if (temp < 0) throw new Exception(\"Temperature sensor fault\") else s\"Temperature: $temp\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_198","timestamp":1745436543090,"code":"def allocateOrderSlot(slots: Int): String = if (slots <= 0) throw new Exception(\"No slots available\") else s\"Allocated slot $slots\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_199","timestamp":1745436543090,"code":"def courierEarnings(orders: List[Double]): Double = if (orders.exists(_ < 0)) throw new Exception(\"Negative earnings\") else orders.sum","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_200","timestamp":1745436543090,"code":"def getDiscount(code: Option[String]): Int = code match { case Some(c) if c == \"SAVE10\" => 10; case None => throw new Exception(\"No discount code\"); case _ => throw new Exception(\"Invalid code\") }","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_201","timestamp":1745436552594,"code":"def getTrackDuration(trackId: String): Int = {\n  if (trackId.isEmpty) throw new IllegalArgumentException(\"Track ID is empty\")\n  215\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_202","timestamp":1745436552595,"code":"def downloadSong(songUrl: String): Array[Byte] = {\n  if (!songUrl.startsWith(\"http\")) throw new RuntimeException(\"Invalid URL format\")\n  Array.emptyByteArray\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_203","timestamp":1745436552595,"code":"def playPlaylist(playlist: List[String]): Unit = {\n  if (playlist.isEmpty) throw new Exception(\"Playlist is empty\")\n  println(\"Playing playlist\")\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_204","timestamp":1745436552595,"code":"def setVolume(level: Int): Unit = {\n  if (level < 0 || level > 100) throw new IllegalArgumentException(\"Volume out of range\")\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_205","timestamp":1745436552595,"code":"def createArtistProfile(name: String): String = {\n  if (name.trim.isEmpty) throw new Exception(\"Artist name is required\")\n  s\"Profile created for $name\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_206","timestamp":1745436552595,"code":"def rateSong(songId: String, rating: Int): String = {\n  if (rating < 1 || rating > 5) throw new Exception(\"Invalid rating\")\n  s\"Rated $songId as $rating\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_207","timestamp":1745436552595,"code":"def connectToStreamingServer(server: String): Boolean = {\n  if (server == \"\") throw new IllegalArgumentException(\"Empty server address\")\n  true\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_208","timestamp":1745436552595,"code":"def addToFavorites(userId: Int, songId: String): Unit = {\n  if (userId < 0) throw new Exception(\"Invalid user id\")\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_209","timestamp":1745436552595,"code":"def removeTrackFromQueue(queue: List[String], track: String): List[String] = {\n  if (!queue.contains(track)) throw new Exception(\"Track not found in queue\")\n  queue.filterNot(_ == track)\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_210","timestamp":1745436552595,"code":"def skipTrack(currentIndex: Int, playlist: List[String]): String = {\n  if (currentIndex >= playlist.length - 1) throw new Exception(\"No more tracks to skip\")\n  playlist(currentIndex + 1)\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_211","timestamp":1745436552595,"code":"def fetchAlbum(albumId: String): String = {\n  if (albumId.isEmpty) throw new Exception(\"Empty album id\")\n  \"Album data\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_212","timestamp":1745436552595,"code":"def shareSong(songId: String, target: String): Boolean = {\n  if (target == null) throw new Exception(\"No share target provided\")\n  true\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_213","timestamp":1745436552595,"code":"def getUserSubscriptionPlan(userId: Int): String = {\n  if (userId == 0) throw new RuntimeException(\"User not signed in\")\n  \"Premium\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_214","timestamp":1745436552595,"code":"def queueNextSong(queue: List[String]): String = {\n  if (queue.isEmpty) throw new Exception(\"Empty song queue\")\n  queue.head\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_215","timestamp":1745436552595,"code":"def setEqualizer(bass: Int): Unit = {\n  if (bass < -10 || bass > 10) throw new IllegalArgumentException(\"Bass level out of range\")\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_216","timestamp":1745436552595,"code":"def streamSong(songId: String, bitrate: Int): String = {\n  if (bitrate <= 0) throw new Exception(\"Invalid bitrate\")\n  s\"Streaming $songId at $bitrate kbps\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_217","timestamp":1745436552595,"code":"def pausePlayback(): String = {\n  val currentlyPlaying = false\n  if (!currentlyPlaying) throw new Exception(\"Nothing is playing\")\n  \"Paused\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_218","timestamp":1745436552595,"code":"def removeFavorite(userId: String, songId: String): Unit = {\n  if (userId.trim.isEmpty) throw new Exception(\"No user specified\")\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_219","timestamp":1745436552595,"code":"def getLyrics(trackId: String): String = {\n  if (trackId == \"unknown\") throw new Exception(\"Lyrics not found\")\n  \"la la la\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_220","timestamp":1745436552595,"code":"def purchaseTrack(trackId: String, credits: Int): String = {\n  if (credits <= 0) throw new Exception(\"Insufficient credits\")\n  s\"Purchased $trackId\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_221","timestamp":1745436568383,"code":"def findTutorBySubject(subject: String): Tutor = {\n  val tutor = tutors.find(_.subject == subject)\n  if (tutor.isDefined) tutor.get\n  else throw new NoSuchElementException(s\"No tutor found for subject $subject\")\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_222","timestamp":1745436568383,"code":"def getStudentById(id: Int): Student = {\n  students.get(id) match {\n    case Some(student) => student\n    case None => throw new IllegalArgumentException(s\"Student with id $id not found\")\n  }\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_223","timestamp":1745436568383,"code":"def bookSession(studentId: Int, tutorId: Int): Session = {\n  if (!students.contains(studentId))\n    throw new RuntimeException(\"Student does not exist\")\n  if (!tutors.exists(_.id == tutorId))\n    throw new RuntimeException(\"Tutor does not exist\")\n  Session(studentId, tutorId)\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_224","timestamp":1745436568383,"code":"def validateTimeSlot(time: String): Unit = {\n  if (!time.matches(\"[0-2][0-9]:[0-5][0-9]\"))\n    throw new IllegalArgumentException(\"Invalid time format\")\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_225","timestamp":1745436568383,"code":"def login(email: String, password: String): User = {\n  users.find(u => u.email == email && u.password == password)\n    .getOrElse(throw new Exception(\"Invalid credentials\"))\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_226","timestamp":1745436568383,"code":"def assignGrade(sessionId: Int, grade: Int): Unit = {\n  if (grade < 0 || grade > 100)\n    throw new IllegalArgumentException(\"Grade must be between 0 and 100\")\n  if (!sessions.contains(sessionId))\n    throw new Exception(\"Session not found\")\n  // ...\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_227","timestamp":1745436568383,"code":"def getSessionFeedback(sessionId: Int): String = {\n  feedbackMap.get(sessionId) match {\n    case Some(feedback) => feedback\n    case None => throw new NoSuchElementException(\"No feedback for this session\")\n  }\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_228","timestamp":1745436568383,"code":"def cancelBooking(bookingId: Int): Boolean = {\n  if (!bookings.contains(bookingId))\n    throw new Exception(\"Booking does not exist\")\n  bookings -= bookingId\n  true\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_229","timestamp":1745436568383,"code":"def rateTutor(tutorId: Int, rating: Int): Unit = {\n  if (rating < 1 || rating > 5)\n    throw new IllegalArgumentException(\"Rating out of range\")\n  if (!tutors.exists(_.id == tutorId))\n    throw new Exception(\"Tutor not found\")\n  // ...\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_230","timestamp":1745436568383,"code":"def fetchMessages(chatId: Int): Seq[Message] = {\n  chats.get(chatId) match {\n    case Some(chat) => chat.messages\n    case None => throw new Exception(\"Chat not found\")\n  }\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_231","timestamp":1745436568383,"code":"def removeStudent(id: Int): Unit = {\n  if (!students.contains(id))\n    throw new Exception(\"Cannot remove non-existent student\")\n  students -= id\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_232","timestamp":1745436568383,"code":"def calculateDiscount(code: String): Double = {\n  discountCodes.get(code).getOrElse(throw new IllegalArgumentException(s\"Discount code $code invalid\"))\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_233","timestamp":1745436568383,"code":"def validateEmail(email: String): Unit = {\n  if (!email.contains(\"@\"))\n    throw new IllegalArgumentException(\"Invalid email address\")\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_234","timestamp":1745436568383,"code":"def getAvailableSlots(tutorId: Int): Seq[String] = {\n  val tutor = tutors.find(_.id == tutorId)\n  if (tutor.isEmpty)\n    throw new Exception(\"Tutor does not exist\")\n  tutor.get.availableSlots\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_235","timestamp":1745436568383,"code":"def enrollCourse(studentId: Int, courseId: Int): Unit = {\n  if (!courses.exists(_.id == courseId))\n    throw new NoSuchElementException(\"Course not found\")\n  if (!students.contains(studentId))\n    throw new Exception(\"Student not found\")\n  // ...\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_236","timestamp":1745436568383,"code":"def deleteAccount(userId: Int): Boolean = {\n  if (!users.exists(_.id == userId))\n    throw new Exception(\"User does not exist\")\n  users = users.filterNot(_.id == userId)\n  true\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_237","timestamp":1745436568383,"code":"def getCourseMaterial(courseId: Int, fileName: String): Array[Byte] = {\n  val course = courses.find(_.id == courseId)\n  course.flatMap(_.materials.get(fileName)).getOrElse(throw new Exception(\"Material not found\"))\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_238","timestamp":1745436568383,"code":"def payForSession(sessionId: Int, amount: Double): Receipt = {\n  if (amount <= 0)\n    throw new IllegalArgumentException(\"Amount must be positive\")\n  val session = sessions.get(sessionId)\n  if (session.isEmpty)\n    throw new Exception(\"Session not found\")\n  Receipt(sessionId, amount)\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_239","timestamp":1745436568383,"code":"def setTutorAvailability(tutorId: Int, slots: Seq[String]): Unit = {\n  val tutor = tutors.find(_.id == tutorId)\n  if (tutor.isEmpty)\n    throw new Exception(\"Tutor missing\")\n  tutor.get.availableSlots = slots\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_240","timestamp":1745436568383,"code":"def joinSession(userId: Int, sessionId: Int): Session = {\n  if (!users.exists(_.id == userId))\n    throw new Exception(\"User not found\")\n  val session = sessions.get(sessionId)\n  if (session.isEmpty)\n    throw new Exception(\"Session missing\")\n  session.get\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_241","timestamp":1745436584655,"code":"def getListingById(id: String): Listing =\n  if (id.isEmpty) throw new IllegalArgumentException(\"ID cannot be empty\")\n  else Listing(id, \"Nice Apartment\", 300000)\n\ncase class Listing(id: String, name: String, price: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_242","timestamp":1745436584656,"code":"def searchListingsByCity(city: String): Seq[Listing] =\n  if (city == null) throw new NullPointerException(\"City cannot be null\")\n  else Seq(Listing(\"1\", city, 400000))\n\ncase class Listing(id: String, city: String, price: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_243","timestamp":1745436584656,"code":"def parsePrice(priceStr: String): Int =\n  try priceStr.toInt\n  catch {\n    case _: NumberFormatException => throw new RuntimeException(\"Invalid price format\")\n  }","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_244","timestamp":1745436584656,"code":"def filterByBedrooms(bedrooms: Option[Int], listings: Seq[Listing]): Seq[Listing] =\n  bedrooms match {\n    case Some(b) if b <= 0 => throw new IllegalArgumentException(\"Bedrooms must be positive\")\n    case Some(b) => listings.filter(_.bedrooms == b)\n    case None => listings\n  }\n\ncase class Listing(id: String, bedrooms: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_245","timestamp":1745436584656,"code":"def divideAreaByRooms(area: Int, rooms: Int): Int =\n  if (rooms == 0) throw new ArithmeticException(\"Rooms cannot be zero\")\n  else area / rooms","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_246","timestamp":1745436584656,"code":"class ListingSearch(val listings: Seq[Listing]) {\n  def findById(id: String): Listing =\n    listings.find(_.id == id).getOrElse(throw new NoSuchElementException(\"No listing found\"))\n}\n\ncase class Listing(id: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_247","timestamp":1745436584656,"code":"def selectListing(listings: Seq[Listing], index: Int): Listing =\n  if (index < 0 || index >= listings.length) throw new IndexOutOfBoundsException(\"Invalid index\")\n  else listings(index)\n\ncase class Listing(id: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_248","timestamp":1745436584656,"code":"def getAgent(contact: String): Agent =\n  if (contact.trim.isEmpty) throw new IllegalArgumentException(\"Contact missing\")\n  else Agent(contact)\n\ncase class Agent(contact: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_249","timestamp":1745436584656,"code":"def fetchZipListings(zip: String): Seq[Listing] =\n  if (!zip.matches(\"[0-9]{5}\")) throw new IllegalArgumentException(\"Invalid ZIP code\")\n  else Seq(Listing(zip, 250000))\n\ncase class Listing(zip: String, price: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_250","timestamp":1745436584656,"code":"def calcPricePerSqft(price: Int, sqft: Int): Double =\n  if (sqft == 0) throw new ArithmeticException(\"Area cannot be zero\")\n  else price.toDouble / sqft","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_251","timestamp":1745436584656,"code":"def updateListingPrice(id: String, newPrice: Int): Listing =\n  if (newPrice < 0) throw new IllegalArgumentException(\"Negative price\")\n  else Listing(id, newPrice)\n\ncase class Listing(id: String, price: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_252","timestamp":1745436584656,"code":"def getFirstListing(listings: Seq[Listing]): Listing =\n  if (listings.isEmpty) throw new NoSuchElementException(\"No listings available\")\n  else listings.head\n\ncase class Listing(address: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_253","timestamp":1745436584656,"code":"def parseBedrooms(bedStr: String): Int =\n  if (bedStr == null) throw new NullPointerException(\"Null string\")\n  try bedStr.toInt\n  catch {\n    case _: Exception => throw new RuntimeException(\"Cannot parse bedrooms\")\n  }","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_254","timestamp":1745436584656,"code":"def minPriceFilter(listings: Seq[Listing], minPrice: Int): Seq[Listing] =\n  if (minPrice < 0) throw new IllegalArgumentException(\"Negative price not allowed\")\n  else listings.filter(_.price >= minPrice)\n\ncase class Listing(id: String, price: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_255","timestamp":1745436584656,"code":"def getListingYearBuilt(yearStr: String): Int =\n  try yearStr.toInt\n  catch {\n    case _: Exception => throw new Exception(\"Invalid year built\")\n  }","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_256","timestamp":1745436584656,"code":"def removeListing(listings: Seq[Listing], id: String): Seq[Listing] =\n  if (id.isEmpty) throw new IllegalArgumentException(\"Empty ID\")\n  else listings.filterNot(_.id == id)\n\ncase class Listing(id: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_257","timestamp":1745436584656,"code":"def getLastListing(listings: Seq[Listing]): Listing =\n  if (listings.isEmpty) throw new NoSuchElementException(\"Listings list is empty\")\n  else listings.last\n\ncase class Listing(id: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_258","timestamp":1745436584656,"code":"def searchNeighborhood(listings: Seq[Listing], hood: String): Listing =\n  val l = listings.find(_.neighborhood == hood)\n  if (l.isEmpty) throw new Exception(\"Neighborhood not found\")\n  else l.get\n\ncase class Listing(id: String, neighborhood: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_259","timestamp":1745436584656,"code":"def filterByType(listings: Seq[Listing], listingType: String): Seq[Listing] =\n  if (listingType == null) throw new NullPointerException(\"Listing type is null\")\n  else listings.filter(_.listingType == listingType)\n\ncase class Listing(id: String, listingType: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_260","timestamp":1745436584656,"code":"def calculateMortgage(amount: Double, years: Int): Double =\n  if (years <= 0) throw new IllegalArgumentException(\"Years must be positive\")\n  else amount / years","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_261","timestamp":1745436600026,"code":"def getBalance(wallet: Map[String, BigDecimal], currency: String): BigDecimal =\n  if (wallet.contains(currency)) wallet(currency)\n  else throw new NoSuchElementException(s\"Currency $currency not found.\")\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_262","timestamp":1745436600026,"code":"def withdraw(wallet: Map[String, BigDecimal], currency: String, amount: BigDecimal): Map[String, BigDecimal] = {\n  if (amount <= 0) throw new IllegalArgumentException(\"Amount must be positive.\")\n  val current = wallet.getOrElse(currency, throw new NoSuchElementException(s\"No balance for $currency\"))\n  if (current < amount) throw new RuntimeException(\"Insufficient funds.\")\n  wallet.updated(currency, current - amount)\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_263","timestamp":1745436600026,"code":"def deposit(wallet: Map[String, BigDecimal], currency: String, amount: BigDecimal): Map[String, BigDecimal] =\n  if (amount > 0) wallet.updated(currency, wallet.getOrElse(currency, BigDecimal(0)) + amount)\n  else throw new IllegalArgumentException(\"Must deposit positive amount.\")\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_264","timestamp":1745436600026,"code":"def findWallet(userIdsToWallets: Map[Int, String], userId: Int): String =\n  userIdsToWallets.get(userId).getOrElse(throw new NoSuchElementException(\"User not found\"))\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_265","timestamp":1745436600026,"code":"def createWallet(user: String, existing: Set[String]): String = {\n  if (existing.contains(user)) throw new IllegalStateException(\"Wallet already exists.\")\n  s\"wallet_of_$user\"\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_266","timestamp":1745436600026,"code":"def checkAddress(address: String): Boolean = {\n  if (!address.startsWith(\"0x\")) throw new IllegalArgumentException(\"Invalid address format.\")\n  true\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_267","timestamp":1745436600026,"code":"def transfer(src: Map[String, BigDecimal], dst: Map[String, BigDecimal], cur: String, amt: BigDecimal): (Map[String, BigDecimal], Map[String, BigDecimal]) = {\n  if (amt <= 0) throw new IllegalArgumentException(\"Amount must be positive.\")\n  val srcBalance = src.getOrElse(cur, throw new NoSuchElementException(\"Source balance missing.\"))\n  if (srcBalance < amt) throw new RuntimeException(\"Source insufficient.\")\n  val dstBalance = dst.getOrElse(cur, BigDecimal(0))\n  (src.updated(cur, srcBalance - amt), dst.updated(cur, dstBalance + amt))\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_268","timestamp":1745436600026,"code":"def requirePin(actual: String, entered: String): Boolean =\n  if (actual == entered) true else throw new SecurityException(\"Invalid PIN.\")\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_269","timestamp":1745436600026,"code":"def parseAmount(s: String): BigDecimal =\n  try BigDecimal(s)\n  catch { case _: NumberFormatException => throw new IllegalArgumentException(\"Bad amount format\") }\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_270","timestamp":1745436600026,"code":"def selectWalletById(wallets: Seq[String], idx: Int): String =\n  if (idx < 0 || idx >= wallets.length) throw new IndexOutOfBoundsException(\"Index is out of wallet list bounds.\")\n  else wallets(idx)\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_271","timestamp":1745436600026,"code":"def removeCurrency(wallet: Map[String, BigDecimal], currency: String): Map[String, BigDecimal] =\n  if (wallet.contains(currency)) wallet - currency\n  else throw new RuntimeException(s\"Currency not found: $currency\")\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_272","timestamp":1745436600026,"code":"def safeDivideReward(total: BigDecimal, n: Int): BigDecimal =\n  if (n == 0) throw new ArithmeticException(\"Cannot divide by zero.\")\n  else total / BigDecimal(n)\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_273","timestamp":1745436600026,"code":"def backupWallet(walletId: String, backupsEnabled: Boolean): String =\n  if (!backupsEnabled) throw new IllegalStateException(\"Backups not enabled.\")\n  else s\"backup_for_$walletId\"\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_274","timestamp":1745436600026,"code":"def claimAirdrop(wallets: Map[String, Boolean], wallet: String): Boolean =\n  if (!wallets.contains(wallet)) throw new NoSuchElementException(s\"Wallet not found: $wallet\")\n  if (wallets(wallet)) throw new IllegalStateException(\"Airdrop already claimed.\")\n  true\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_275","timestamp":1745436600026,"code":"def listKeys(keys: Seq[String], minRequired: Int): Seq[String] =\n  if (keys.length < minRequired) throw new IllegalArgumentException(\"Not enough keys.\")\n  keys\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_276","timestamp":1745436600026,"code":"def changePassphrase(current: String, provided: String, newPhrase: String): String =\n  if (current != provided) throw new SecurityException(\"Wrong passphrase.\")\n  newPhrase\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_277","timestamp":1745436600026,"code":"def importAddress(address: String, whitelist: Set[String]): Boolean =\n  if (!whitelist.contains(address)) throw new IllegalAccessException(\"Address not whitelisted.\")\n  true\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_278","timestamp":1745436600026,"code":"def sweepWallet(wallet: Map[String, BigDecimal], minAmount: BigDecimal): Map[String, BigDecimal] = {\n  if (wallet.values.exists(_ < minAmount)) throw new IllegalArgumentException(\"All balances must meet minimum to sweep.\")\n  wallet.mapValues(_ => BigDecimal(0))\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_279","timestamp":1745436600026,"code":"def setTag(walletId: String, tag: String): (String, String) = {\n  if (tag.trim.isEmpty) throw new IllegalArgumentException(\"Tag cannot be empty.\")\n  (walletId, tag)\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_280","timestamp":1745436600026,"code":"def unlockTimedWallet(unlockTime: Long, now: Long): Boolean =\n  if (now < unlockTime) throw new IllegalStateException(\"Wallet still locked.\")\n  true\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_281","timestamp":1745436619276,"code":"def findProduct(sku: String, inventory: Map[String, Int]): Int = {\n  if (!inventory.contains(sku)) throw new NoSuchElementException(\"SKU not found.\")\n  inventory(sku)\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_282","timestamp":1745436619276,"code":"def deductStock(sku: String, qty: Int, inventory: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (!inventory.contains(sku)) throw new IllegalArgumentException(\"Product not found.\")\n  if (qty > inventory(sku)) throw new RuntimeException(\"Insufficient stock.\")\n  inventory(sku) -= qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_283","timestamp":1745436619276,"code":"def addProduct(sku: String, initialStock: Int, inventory: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (initialStock < 0) throw new IllegalArgumentException(\"Negative stock not allowed.\")\n  if (inventory.contains(sku)) throw new IllegalArgumentException(\"SKU already exists.\")\n  inventory(sku) = initialStock\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_284","timestamp":1745436619276,"code":"case class Warehouse(items: Map[String, Int]) {\n  def moveStock(from: String, to: String, amount: Int): Warehouse = {\n    if (!items.contains(from) || !items.contains(to)) throw new RuntimeException(\"Invalid SKU.\")\n    if (items(from) < amount) throw new RuntimeException(\"Not enough stock.\")\n    copy(items = items.updated(from, items(from) - amount).updated(to, items(to) + amount))\n  }\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_285","timestamp":1745436619276,"code":"def removeProduct(sku: String, inventory: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (!inventory.contains(sku)) throw new NoSuchElementException(\"Removing non-existent product.\")\n  inventory -= sku\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_286","timestamp":1745436619276,"code":"def restock(sku: String, qty: Int, inventory: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (qty <= 0) throw new IllegalArgumentException(\"Restock qty must be positive.\")\n  if (!inventory.contains(sku)) throw new NoSuchElementException(\"Product not found.\")\n  inventory(sku) += qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_287","timestamp":1745436619276,"code":"def getDivisionPerWarehouse(totalStock: Int, warehouses: Int): Int = {\n  if (warehouses == 0) throw new ArithmeticException(\"Divide by zero.\")\n  totalStock / warehouses\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_288","timestamp":1745436619276,"code":"def validateSku(sku: String): String = {\n  if (sku.trim.isEmpty) throw new IllegalArgumentException(\"SKU cannot be empty.\")\n  sku\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_289","timestamp":1745436619276,"code":"def findWarehouseByName(name: String, warehouses: List[String]): Int = {\n  val idx = warehouses.indexOf(name)\n  if (idx < 0) throw new NoSuchElementException(\"Warehouse not found.\")\n  idx\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_290","timestamp":1745436619276,"code":"def recordDamage(sku: String, qty: Int, damaged: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (qty < 0) throw new IllegalArgumentException(\"Negative damage not allowed.\")\n  if (!damaged.contains(sku)) throw new RuntimeException(\"Unknown SKU.\")\n  damaged(sku) += qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_291","timestamp":1745436619276,"code":"def assignShelf(sku: String, shelf: Option[String]): String = {\n  shelf.getOrElse(throw new IllegalArgumentException(\"Missing shelf assignment.\"))\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_292","timestamp":1745436619276,"code":"def mergeInventories(invA: Map[String, Int], invB: Map[String, Int]): Map[String, Int] = {\n  if (invA.keySet.intersect(invB.keySet).nonEmpty)\n    throw new RuntimeException(\"Overlapping SKUs in merge.\")\n  invA ++ invB\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_293","timestamp":1745436619276,"code":"def checkReorderPoint(sku: String, reorderPoints: Map[String, Int], stock: Map[String, Int]): Boolean = {\n  if (!reorderPoints.contains(sku)) throw new RuntimeException(\"Missing reorder point.\")\n  if (!stock.contains(sku)) throw new RuntimeException(\"Missing stock data.\")\n  stock(sku) < reorderPoints(sku)\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_294","timestamp":1745436619276,"code":"def createWarehouse(name: String, capacity: Int): (String, Int) = {\n  if (name.isEmpty) throw new IllegalArgumentException(\"Invalid warehouse name.\")\n  if (capacity <= 0) throw new IllegalArgumentException(\"Invalid capacity.\")\n  (name, capacity)\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_295","timestamp":1745436619276,"code":"def getSupplierContact(sku: String, suppliers: Map[String, String]): String = {\n  suppliers.getOrElse(sku, throw new NoSuchElementException(\"Supplier for SKU not found.\"))\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_296","timestamp":1745436619276,"code":"def reserveStock(sku: String, qty: Int, warehouseStock: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (!warehouseStock.contains(sku)) throw new RuntimeException(\"SKU missing for reservation.\")\n  if (warehouseStock(sku) < qty) throw new IllegalStateException(\"Reservation exceeds stock.\")\n  warehouseStock(sku) -= qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_297","timestamp":1745436619276,"code":"def unreserveStock(sku: String, qty: Int, warehouseStock: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (qty <= 0) throw new IllegalArgumentException(\"Cannot unreserve non-positive quantity.\")\n  if (!warehouseStock.contains(sku)) throw new RuntimeException(\"SKU not present.\")\n  warehouseStock(sku) += qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_298","timestamp":1745436619276,"code":"def fetchInventoryForCategory(category: String, cats: Map[String, List[String]], inv: Map[String, Int]): Map[String, Int] = {\n  if (!cats.contains(category)) throw new RuntimeException(\"Category missing.\")\n  cats(category).map(sku => sku -> inv.getOrElse(sku, throw new RuntimeException(\"SKU missing in inventory.\")))\n    .toMap\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_299","timestamp":1745436619276,"code":"def transferStock(from: String, to: String, qty: Int,\n    stocks: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (!stocks.contains(from) || !stocks.contains(to)) throw new RuntimeException(\"Warehouse not found.\")\n  if (stocks(from) < qty) throw new IllegalStateException(\"Insufficient stock.\")\n  stocks(from) -= qty\n  stocks(to) += qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_300","timestamp":1745436619276,"code":"def calculateAverageStock(items: Map[String, Int]): Double = {\n  if (items.isEmpty) throw new IllegalArgumentException(\"No items in inventory.\")\n  items.values.sum.toDouble / items.size\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_301","timestamp":1745436628415,"code":"def getUserById(id: String): User = if (id.isEmpty) throw new IllegalArgumentException(\"ID cannot be empty\") else User(id)","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_302","timestamp":1745436628415,"code":"def moderatePost(post: Post): Boolean = if (post.content == null) throw new NullPointerException(\"Content is null\") else true","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_303","timestamp":1745436628415,"code":"def parseFlag(flag: String): Boolean = flag match { case \"yes\" => true case \"no\" => false case _ => throw new Exception(\"Invalid flag\") }","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_304","timestamp":1745436628415,"code":"def fetchComment(comments: List[String], idx: Int): String = if (idx < 0 || idx >= comments.length) throw new IndexOutOfBoundsException else comments(idx)","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_305","timestamp":1745436628415,"code":"def blockUser(user: User): Unit = if (!user.active) throw new Exception(\"User already blocked\") else user.active = false","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_306","timestamp":1745436628415,"code":"def approveContent(content: Option[String]): String = content.getOrElse(throw new Exception(\"Missing content\"))","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_307","timestamp":1745436628415,"code":"def checkSpamScore(score: Int): Unit = if (score < 0) throw new IllegalArgumentException(\"Negative score\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_308","timestamp":1745436628415,"code":"def reportAbuse(postId: String, reason: String): String = if (reason.isEmpty) throw new Exception(\"No reason provided\") else \"Reported\"","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_309","timestamp":1745436628415,"code":"def reviewReport(report: Option[Report]): Report = report match { case Some(r) => r case None => throw new Exception(\"No report\") }","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_310","timestamp":1745436628415,"code":"def setContentWarning(level: Int): Unit = if (level < 1 || level > 5) throw new Exception(\"Invalid level\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_311","timestamp":1745436628415,"code":"def getUserHandle(handle: String): String = if (handle.contains(\" \")) throw new Exception(\"Handle cannot contain spaces\") else handle","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_312","timestamp":1745436628415,"code":"def checkImageForNSFW(image: Image): Boolean = if (image.data.isEmpty) throw new Exception(\"No image data\") else false","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_313","timestamp":1745436628415,"code":"def validateModerator(user: User): Boolean = if (!user.isModerator) throw new Exception(\"Not a moderator\") else true","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_314","timestamp":1745436628415,"code":"def deleteComment(comments: Map[Int, String], id: Int): Map[Int, String] = if (!comments.contains(id)) throw new Exception(\"No such comment\") else comments - id","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_315","timestamp":1745436628415,"code":"def flagUser(userId: String): Unit = if (userId == null) throw new Exception(\"userId null\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_316","timestamp":1745436628415,"code":"def filterProfanity(text: String): String = if (text == null) throw new NullPointerException else text.replaceAll(\"badword\", \"****\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_317","timestamp":1745436628415,"code":"def verifyEmail(email: String): Boolean = if (!email.contains(\"@\")) throw new Exception(\"Invalid email\") else true","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_318","timestamp":1745436628415,"code":"def assignRole(user: User, role: String): Unit = if (!List(\"admin\",\"mod\",\"user\").contains(role)) throw new Exception(\"Unknown role\") else user.role = role","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_319","timestamp":1745436628416,"code":"def checkQuota(quota: Int): Unit = if (quota < 0) throw new Exception(\"Quota cannot be negative\") else ()","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_320","timestamp":1745436628416,"code":"def findPostByTitle(posts: List[Post], title: String): Post = posts.find(_.title == title).getOrElse(throw new Exception(\"Post not found\"))","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_321","timestamp":1745436671208,"code":"object FeedSnippet1 {\n  def getUserFeed(userId: Int): List[String] = {\n    if (userId <= 0) throw new IllegalArgumentException(\"Invalid user id\")\n    List(\"News1\", \"News2\")\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_322","timestamp":1745436671208,"code":"object FeedSnippet2 {\n  def getArticleTitle(id: String): String = {\n    if (id.isEmpty) throw new NoSuchElementException(\"Empty article id\")\n    \"Breaking News\"\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_323","timestamp":1745436671208,"code":"object FeedSnippet3 {\n  def personalizedScore(score: Int): Double = {\n    if (score < 0) throw new ArithmeticException(\"Negative score\")\n    100.0 / (score + 1)\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_324","timestamp":1745436671208,"code":"object FeedSnippet4 {\n  def fetchUserPreference(user: String): String = {\n    if (user == null) throw new NullPointerException(\"User is null\")\n    \"Tech\"\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_325","timestamp":1745436671208,"code":"object FeedSnippet5 {\n  def getPreferredPublisher(publishers: List[String]): String = {\n    if (publishers.isEmpty) throw new IllegalArgumentException(\"No publishers\")\n    publishers.head\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_326","timestamp":1745436671208,"code":"object FeedSnippet6 {\n  def getLatestNews(feed: List[String]): String = {\n    if (feed == null) throw new NullPointerException(\"Feed missing\")\n    if (feed.isEmpty) throw new NoSuchElementException(\"No news available\")\n    feed.last\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_327","timestamp":1745436671208,"code":"object FeedSnippet7 {\n  def unreadCount(read: Int, total: Int): Int = {\n    if (total < read) throw new IllegalArgumentException(\"Total less than read\")\n    total - read\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_328","timestamp":1745436671208,"code":"object FeedSnippet8 {\n  def selectTopic(topics: Seq[String], idx: Int): String = {\n    if (idx < 0 || idx >= topics.length) throw new IndexOutOfBoundsException(\"Invalid topic index\")\n    topics(idx)\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_329","timestamp":1745436671208,"code":"object FeedSnippet9 {\n  def getUserAge(age: Option[Int]): Int = {\n    age.getOrElse(throw new IllegalArgumentException(\"Age missing\"))\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_330","timestamp":1745436671208,"code":"object FeedSnippet10 {\n  def safeDivideScore(a: Int, b: Int): Int = {\n    if (b == 0) throw new ArithmeticException(\"Score division by zero\")\n    a / b\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_331","timestamp":1745436671208,"code":"object FeedSnippet11 {\n  def getUserSetting(settings: Map[String, String], key: String): String = {\n    if (!settings.contains(key)) throw new NoSuchElementException(\"Setting not found\")\n    settings(key)\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_332","timestamp":1745436671208,"code":"object FeedSnippet12 {\n  def userCountryCode(code: String): String = {\n    if (code.length != 2) throw new IllegalArgumentException(\"Country code must be 2 chars\")\n    code.toUpperCase\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_333","timestamp":1745436671208,"code":"object FeedSnippet13 {\n  def timeToNextFeed(mins: Int): Int = {\n    if (mins < 0) throw new IllegalArgumentException(\"Negative minutes\")\n    60 - mins\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_334","timestamp":1745436671208,"code":"object FeedSnippet14 {\n  def fetchBreakingNews(news: List[String]): String = {\n    if (news.isEmpty) throw new RuntimeException(\"No breaking news\")\n    news.filter(_.contains(\"Breaking\")).headOption.getOrElse(throw new NoSuchElementException(\"No breaking news\"))\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_335","timestamp":1745436671208,"code":"object FeedSnippet15 {\n  def favoriteTag(tags: Set[String]): String = {\n    if (tags.isEmpty) throw new IllegalStateException(\"No tags available\")\n    tags.head\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_336","timestamp":1745436671208,"code":"object FeedSnippet16 {\n  def getUserReputation(score: Int): String = {\n    if (score < 0) throw new IllegalArgumentException(\"Reputation must be positive\")\n    if (score > 100) throw new IllegalArgumentException(\"Reputation too high\")\n    \"Reputation: \" + score\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_337","timestamp":1745436671208,"code":"object FeedSnippet17 {\n  def updateFeedList(feed: List[String], article: String): List[String] = {\n    if (article.isEmpty) throw new IllegalArgumentException(\"Article cannot be empty\")\n    article :: feed\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_338","timestamp":1745436671208,"code":"object FeedSnippet18 {\n  def mergeFeeds(a: List[String], b: List[String]): List[String] = {\n    if (a == null || b == null) throw new NullPointerException(\"Null feed\")\n    a ++ b\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_339","timestamp":1745436671208,"code":"object FeedSnippet19 {\n  def getEditorChoice(choices: Seq[String]): String = {\n    if (choices.isEmpty) throw new RuntimeException(\"No editor choices\")\n    choices(0)\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_340","timestamp":1745436671208,"code":"object FeedSnippet20 {\n  def getFriendFeed(friendId: Int, feeds: Map[Int, List[String]]): List[String] = {\n    feeds.getOrElse(friendId, throw new NoSuchElementException(\"Friend feed not found\"))\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_341","timestamp":1745436685143,"code":"def findStationById(id: String): ChargingStation = if (id.isEmpty) throw new IllegalArgumentException(\"Empty id\") else ChargingStation(id)\ncase class ChargingStation(id: String)\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_342","timestamp":1745436685143,"code":"def parseLatitude(lat: String): Double = try { lat.toDouble } catch { case _: NumberFormatException => throw new Exception(\"Invalid latitude\") }\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_343","timestamp":1745436685143,"code":"def calculateRange(kWh: Double, efficiency: Double): Double = if (efficiency == 0) throw new ArithmeticException(\"Efficiency is zero\") else kWh / efficiency\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_344","timestamp":1745436685143,"code":"def nearestStation(stations: List[Station], userLat: Double, userLong: Double): Station = if (stations.isEmpty) throw new Exception(\"No stations found\") else stations.head\ncase class Station(name: String)\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_345","timestamp":1745436685143,"code":"def getConnectorType(connector: String): String = connector match { case \"CCS\" | \"Type2\" => connector; case _ => throw new Exception(\"Unknown connector\") }\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_346","timestamp":1745436685143,"code":"def verifyChargingSpeed(speed: Int): Int = if (speed < 0) throw new Exception(\"Negative speed\") else speed\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_347","timestamp":1745436685143,"code":"def choosePaymentMethod(method: String): String = if (method == \"\") throw new Exception(\"Payment method required\") else method\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_348","timestamp":1745436685143,"code":"def getCityStations(city: String, stations: Map[String, List[String]]): List[String] = stations.getOrElse(city, throw new Exception(\"City not found\"))\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_349","timestamp":1745436685143,"code":"def getPlugCount(station: Station): Int = station.plugCount match { case n if n < 0 => throw new Exception(\"Negative plug count\"); case n => n }\ncase class Station(name: String, plugCount: Int)\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_350","timestamp":1745436685143,"code":"def stationAtIndex(stations: Array[Station], idx: Int): Station = if (idx < 0 || idx >= stations.length) throw new IndexOutOfBoundsException else stations(idx)\ncase class Station(name: String)\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_351","timestamp":1745436685143,"code":"def parsePrice(priceStr: String): Double = try { priceStr.toDouble } catch { case _: Exception => throw new Exception(\"Invalid price\") }\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_352","timestamp":1745436685143,"code":"def getStationName(station: Option[Station]): String = station match { case Some(s) => s.name; case None => throw new Exception(\"No station available\") }\ncase class Station(name: String)\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_353","timestamp":1745436685143,"code":"def isStationOpen(hours: (Int, Int), currentHour: Int): Boolean = if (currentHour < hours._1 || currentHour > hours._2) throw new Exception(\"Station closed\") else true\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_354","timestamp":1745436685143,"code":"def getProviderStations(provider: String, stations: Map[String, List[String]]): List[String] = stations.getOrElse(provider, throw new Exception(\"Unknown provider\"))\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_355","timestamp":1745436685143,"code":"def findAvailableSlot(slots: List[Boolean]): Int = slots.indexWhere(_ == true) match { case -1 => throw new Exception(\"No slot available\"); case i => i }\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_356","timestamp":1745436685143,"code":"def reserveCharger(user: String): Boolean = if (user.isEmpty) throw new Exception(\"User not logged in\") else true\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_357","timestamp":1745436685143,"code":"def checkBatteryLevel(level: Int): Int = if (level < 0 || level > 100) throw new Exception(\"Invalid battery level\") else level\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_358","timestamp":1745436685143,"code":"def getStationLocation(station: Station): (Double, Double) = station.location.getOrElse(throw new Exception(\"Location not provided\"))\ncase class Station(location: Option[(Double, Double)])\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_359","timestamp":1745436685143,"code":"def getPricePerKWh(station: Station): Double = station.pricePerKWh match { case Some(p) => p; case None => throw new Exception(\"No price info\") }\ncase class Station(pricePerKWh: Option[Double])\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_360","timestamp":1745436685143,"code":"def pingStation(stationId: String): Unit = if (stationId == \"offline\") throw new Exception(\"Station unreachable\")","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_361","timestamp":1745436698209,"code":"object CropTemperature {\n  def averageTemperature(readings: List[Double]): Double = {\n    if (readings.isEmpty) throw new IllegalArgumentException(\"No readings provided\")\n    readings.sum / readings.size\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_362","timestamp":1745436698209,"code":"object CropMoisture {\n  def moistureLevel(level: Int): String = {\n    if (level < 0) throw new RuntimeException(\"Negative soil moisture\")\n    if (level > 100) throw new RuntimeException(\"Moisture level over 100\")\n    if (level < 30) \"Low\" else if (level < 70) \"Optimal\" else \"High\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_363","timestamp":1745436698209,"code":"object CropHealth {\n  def checkHealthIndex(index: Double): String = {\n    if (index.isNaN) throw new IllegalArgumentException(\"Invalid health index\")\n    if (index < 0.5) \"Poor health\"\n    else if (index < 0.8) \"Fair health\"\n    else \"Good health\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_364","timestamp":1745436698209,"code":"object GrowthRateCalculator {\n  def rate(days: Int, height: Double): Double = {\n    if (days == 0) throw new ArithmeticException(\"Days cannot be zero\")\n    height / days\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_365","timestamp":1745436698209,"code":"object PestDetection {\n  def pestCount(data: Map[String, Int], crop: String): Int = {\n    if (!data.contains(crop)) throw new NoSuchElementException(\"Crop not found\")\n    data(crop)\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_366","timestamp":1745436698209,"code":"object IrrigationScheduler {\n  def nextIrrigationDay(days: List[String]): String = {\n    if (days.isEmpty) throw new IllegalStateException(\"No irrigation days scheduled\")\n    days.head\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_367","timestamp":1745436698209,"code":"object CropYield {\n  def averageYield(yields: List[Double]): Double = {\n    if (yields.isEmpty) throw new Exception(\"Yield list empty\")\n    yields.sum / yields.size\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_368","timestamp":1745436698209,"code":"object RainfallPredictor {\n  def predictRainfall(region: String, data: Map[String, Double]): Double = {\n    if (!data.contains(region)) throw new RuntimeException(\"No data for region\")\n    data(region)\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_369","timestamp":1745436698209,"code":"object FertilizerRecommender {\n  def recommendFertilizer(cropType: String): String = {\n    if (cropType == \"\") throw new IllegalArgumentException(\"Crop type is empty\")\n    cropType match {\n      case \"Wheat\" => \"NPK\"\n      case \"Rice\" => \"Urea\"\n      case _ => \"Generic\"\n    }\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_370","timestamp":1745436698209,"code":"object DiseaseAlert {\n  def alertLevel(diseaseScore: Int): String = {\n    if (diseaseScore < 0 || diseaseScore > 100) throw new IllegalArgumentException(\"Invalid disease score\")\n    if (diseaseScore > 80) \"High\"\n    else if (diseaseScore > 50) \"Medium\"\n    else \"Low\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_371","timestamp":1745436698209,"code":"object FieldMonitor {\n  def getFieldStatus(fields: Map[String, String], fieldId: String): String = {\n    if (!fields.contains(fieldId)) throw new NoSuchElementException(\"Unknown field ID\")\n    fields(fieldId)\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_372","timestamp":1745436698209,"code":"object CropAnalyzer {\n  def calculateIndex(values: List[Double]): Double = {\n    if (values.contains(0.0)) throw new ArithmeticException(\"Zero in data not allowed\")\n    values.product\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_373","timestamp":1745436698209,"code":"object HarvestEstimator {\n  def estimateHarvest(acres: Int, yieldPerAcre: Double): Double = {\n    if (acres <= 0) throw new IllegalArgumentException(\"Acreage must be positive\")\n    acres * yieldPerAcre\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_374","timestamp":1745436698209,"code":"object WaterUsageCalculator {\n  def perHectareUsage(totalWater: Double, hectares: Int): Double = {\n    if (hectares == 0) throw new IllegalArgumentException(\"Number of hectares is zero\")\n    totalWater / hectares\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_375","timestamp":1745436698209,"code":"object PesticideApplicator {\n  def calculateDose(area: Double, rate: Double): Double = {\n    if (rate <= 0) throw new IllegalArgumentException(\"Invalid pesticide rate\")\n    area * rate\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_376","timestamp":1745436698209,"code":"object CropRotationPlanner {\n  def nextCrop(current: String): String = {\n    if (current != \"Corn\" && current != \"Soybean\") throw new RuntimeException(\"Unknown crop\")\n    if (current == \"Corn\") \"Soybean\" else \"Corn\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_377","timestamp":1745436698209,"code":"object YieldValidator {\n  def validateYield(y: Double): Boolean = {\n    if (y < 0) throw new IllegalArgumentException(\"Yield cannot be negative\")\n    y <= 10000\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_378","timestamp":1745436698209,"code":"object DroneDeployment {\n  def assignDrone(area: Int): String = {\n    if (area > 500) throw new UnsupportedOperationException(\"Area too large for a single drone\")\n    \"Drone assigned\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_379","timestamp":1745436698209,"code":"object TemperatureAlert {\n  def checkTemperature(temp: Double): String = {\n    if (temp > 50 || temp < -20) throw new IllegalArgumentException(\"Abnormal temperature detected\")\n    \"Temperature is normal\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_380","timestamp":1745436698209,"code":"object SoilNutrientChecker {\n  def nutrientPercentage(level: Double): Double = {\n    if (level < 0 || level > 1) throw new IllegalArgumentException(\"Invalid nutrient percentage\")\n    level * 100\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_381","timestamp":1745436718238,"code":"object SensorIdValidation {\n  def parseSensorId(id: String): Int = {\n    if (id.isEmpty) throw new IllegalArgumentException(\"Sensor ID empty\")\n    else id.toInt\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_382","timestamp":1745436718238,"code":"object AverageTemperature {\n  def computeAverage(tempReadings: List[Double]): Double = {\n    if (tempReadings.isEmpty) throw new RuntimeException(\"No temperatures to average\")\n    else tempReadings.sum / tempReadings.size\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_383","timestamp":1745436718238,"code":"object SensorData {\n  def getValueOrThrow(sensor: Map[String, Int], key: String): Int = {\n    sensor.getOrElse(key, throw new NoSuchElementException(s\"No sensor $key\"))\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_384","timestamp":1745436718238,"code":"object Divider {\n  def safeDivide(total: Int, count: Int): Int = {\n    if (count == 0) throw new ArithmeticException(\"Division by zero while aggregating data\")\n    else total / count\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_385","timestamp":1745436718238,"code":"object HumidityParser {\n  def parseHumidity(value: String): Double = {\n    if (!value.matches(\"[0-9.]+\")) throw new NumberFormatException(\"Invalid humidity format\")\n    else value.toDouble\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_386","timestamp":1745436718238,"code":"class SensorAggregator(readings: List[Int]) {\n  def maxReading: Int = {\n    if (readings.isEmpty) throw new Exception(\"No readings to aggregate\")\n    else readings.max\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_387","timestamp":1745436718238,"code":"object MovingAverage {\n  def slidingAverage(data: List[Double], window: Int): List[Double] = {\n    if (window <= 0) throw new IllegalArgumentException(\"Window must be positive\")\n    else data.sliding(window).map(_.sum / window).toList\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_388","timestamp":1745436718239,"code":"object SensorRecord {\n  def validateTimestamp(ts: Long): Long = {\n    if (ts < 0) throw new IllegalArgumentException(\"Negative timestamp in sensor data\")\n    else ts\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_389","timestamp":1745436718239,"code":"object Gateway {\n  def getSensorData(data: Map[String, Double], sensor: String): Double = {\n    data.getOrElse(sensor, throw new Exception(s\"Sensor $sensor not found at gateway\"))\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_390","timestamp":1745436718239,"code":"object AggregationLevel {\n  def requireLevel(level: String): String = {\n    if (Set(\"minute\", \"hour\", \"day\").contains(level)) level\n    else throw new Exception(\"Invalid aggregation level\")\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_391","timestamp":1745436718239,"code":"object SensorJoiner {\n  def joinOrThrow(left: Option[Int], right: Option[Int]): (Int, Int) = {\n    (left, right) match {\n      case (Some(l), Some(r)) => (l, r)\n      case _ => throw new RuntimeException(\"Missing sensor data for join\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_392","timestamp":1745436718239,"code":"object VoltageParser {\n  def parseVoltage(s: String): Int = {\n    try {\n      s.toInt\n    } catch {\n      case _: NumberFormatException => throw new Exception(\"Invalid voltage reading\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_393","timestamp":1745436718239,"code":"object SensorArray {\n  def getAtIndex(array: Array[Double], idx: Int): Double = {\n    if (idx < 0 || idx >= array.length) throw new IndexOutOfBoundsException(\"Sensor index invalid\")\n    else array(idx)\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_394","timestamp":1745436718239,"code":"object PressureValidator {\n  def validatePressure(pressure: Int): Int = {\n    if (pressure < 0) throw new Exception(\"Negative pressure reading not allowed\")\n    else pressure\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_395","timestamp":1745436718239,"code":"class Aggregator(step: Int) {\n  def groupReadings(data: Seq[Int]): Seq[Seq[Int]] = {\n    if (step <= 0) throw new Exception(\"Step must be positive\")\n    else data.grouped(step).toSeq\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_396","timestamp":1745436718239,"code":"object BatteryChecker {\n  def safeBatteryLevel(level: Option[Double]): Double = {\n    level.getOrElse(throw new Exception(\"Missing battery level from sensor\"))\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_397","timestamp":1745436718239,"code":"object SensorFilter {\n  def filterAbove(readings: Seq[Int], threshold: Int): Seq[Int] = {\n    if (readings.exists(_ < 0)) throw new Exception(\"Negative reading encountered\")\n    else readings.filter(_ > threshold)\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_398","timestamp":1745436718239,"code":"object SensorTagParser {\n  def getZoneTag(tags: Map[String, String]): String = {\n    tags.get(\"zone\").getOrElse(throw new Exception(\"Missing 'zone' tag in sensor metadata\"))\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_399","timestamp":1745436718239,"code":"object DataMerger {\n  def mergeData(a: List[Int], b: List[Int]): List[Int] = {\n    if (a.length != b.length) throw new Exception(\"Cannot merge sensor data of unequal lengths\")\n    else a.zip(b).map{ case (x, y) => x + y }\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_400","timestamp":1745436718239,"code":"class FieldAggregator(fieldName: String) {\n  def extractAndSum(data: List[Map[String, Int]]): Int = {\n    if (data.forall(_.contains(fieldName))) data.map(_(fieldName)).sum\n    else throw new Exception(s\"Field $fieldName missing in some data records\")\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_401","timestamp":1745436730074,"code":"def getBusRouteNumber(line: String): Int =\n  if (line.nonEmpty) line.toInt\n  else throw new IllegalArgumentException(\"Bus line must not be empty\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_402","timestamp":1745436730074,"code":"def findStationIndex(stations: List[String], station: String): Int =\n  stations.indexOf(station) match {\n    case -1 => throw new NoSuchElementException(s\"Station not found: $station\")\n    case idx => idx\n  }","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_403","timestamp":1745436730074,"code":"def getNextTrainTime(times: List[Int], current: Int): Int =\n  times.find(_ > current).getOrElse(throw new RuntimeException(\"No next train available\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_404","timestamp":1745436730074,"code":"case class Route(stops: List[String])\ndef firstStop(r: Route): String =\n  if (r.stops.nonEmpty) r.stops.head else throw new NoSuchElementException(\"No stops in route\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_405","timestamp":1745436730074,"code":"def parseFare(input: String): Double =\n  try input.toDouble\n  catch { case _: NumberFormatException => throw new NumberFormatException(s\"Invalid fare: $input\") }","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_406","timestamp":1745436730074,"code":"def validateTransfer(allowed: Boolean): Unit =\n  if (!allowed) throw new UnsupportedOperationException(\"Transfer not permitted\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_407","timestamp":1745436730074,"code":"def calculateDistance(start: Option[Int], end: Option[Int]): Int =\n  (start, end) match {\n    case (Some(s), Some(e)) if e > s => e - s\n    case _ => throw new IllegalArgumentException(\"Invalid station indices\")\n  }","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_408","timestamp":1745436730074,"code":"def getZoneFare(zone: Int): Int =\n  if (zone >= 1 && zone <= 5) zone * 2\n  else throw new IllegalArgumentException(s\"Unknown zone $zone\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_409","timestamp":1745436730074,"code":"def getLineColor(line: String): String =\n  line match {\n    case \"Red\" => \"#FF0000\"\n    case \"Blue\" => \"#0000FF\"\n    case _ => throw new Exception(\"Unknown line color\")\n  }","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_410","timestamp":1745436730074,"code":"case class Trip(route: String, duration: Int)\ndef tripDuration(trip: Trip): Int =\n  if (trip.duration >= 0) trip.duration\n  else throw new IllegalArgumentException(\"Negative duration\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_411","timestamp":1745436730074,"code":"def stationIdMap(ids: Map[String, Int], name: String): Int =\n  ids.getOrElse(name, throw new NoSuchElementException(s\"No id for station $name\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_412","timestamp":1745436730074,"code":"def getBoardingTime(times: Seq[Int]): Int =\n  if (times.nonEmpty) times.min\n  else throw new IllegalStateException(\"No boarding times available\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_413","timestamp":1745436730074,"code":"def getExpressTrain(trains: List[String]): String =\n  trains.find(_.contains(\"Express\")).getOrElse(throw new Exception(\"No express train found\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_414","timestamp":1745436730074,"code":"case class Passenger(name: String, ticketId: Option[String])\ndef getTicketId(p: Passenger): String =\n  p.ticketId.getOrElse(throw new IllegalArgumentException(\"Ticket ID missing\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_415","timestamp":1745436730074,"code":"def computeFarePerZone(fare: Int, zones: Int): Int =\n  if (zones == 0) throw new ArithmeticException(\"Cannot divide by zero zones\")\n  else fare / zones","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_416","timestamp":1745436730074,"code":"def routeName(routes: Vector[String], idx: Int): String =\n  if (idx >= 0 && idx < routes.length) routes(idx)\n  else throw new ArrayIndexOutOfBoundsException(\"Route index out of bounds\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_417","timestamp":1745436730074,"code":"def getTransferStations(stations: List[String]): String =\n  stations.find(_.contains(\"Transfer\")).getOrElse(throw new Exception(\"No transfer station available\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_418","timestamp":1745436730074,"code":"def findLastStop(stops: Seq[String]): String =\n  if (stops.nonEmpty) stops.last\n  else throw new IllegalStateException(\"Route has no stops\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_419","timestamp":1745436730074,"code":"def calculateAverageWait(times: List[Int]): Double =\n  if (times.isEmpty) throw new IllegalArgumentException(\"Empty times list\")\n  else times.sum.toDouble / times.length","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_420","timestamp":1745436730074,"code":"def selectPlatform(platforms: Map[String, Int], name: String): Int =\n  platforms.getOrElse(name, throw new Exception(s\"Platform not found for $name\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_421","timestamp":1745436745572,"code":"object PosIntegration1 {\n  def parseProductCode(code: String): Int = {\n    if (code.matches(\"\\\\d+\")) code.toInt\n    else throw new IllegalArgumentException(\"Invalid product code\")\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_422","timestamp":1745436745572,"code":"object PosIntegration2 {\n  def getDiscountAmount(discounts: Map[String, Double], id: String): Double = {\n    discounts.get(id) match {\n      case Some(d) => d\n      case None => throw new NoSuchElementException(\"No discount for given id\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_423","timestamp":1745436745572,"code":"object PosIntegration3 {\n  def applyCoupon(coupons: Set[String], coupon: String): Boolean = {\n    if (coupons.contains(coupon)) true\n    else throw new Exception(\"Coupon not recognized\")\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_424","timestamp":1745436745572,"code":"object PosIntegration4 {\n  def divideAmount(total: Double, n: Int): Double = {\n    if (n == 0) throw new ArithmeticException(\"Cannot divide by zero\")\n    total / n\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_425","timestamp":1745436745572,"code":"object PosIntegration5 {\n  def validateQuantity(qty: Int): Unit = {\n    if (qty < 1) throw new IllegalArgumentException(\"Quantity must be positive\")\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_426","timestamp":1745436745572,"code":"object PosIntegration6 {\n  class Payment(val amount: Double)\n\n  def processPayment(p: Payment): String = {\n    if (p.amount <= 0) throw new Exception(\"Payment amount must be positive\")\n    \"Processed\"\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_427","timestamp":1745436745572,"code":"object PosIntegration7 {\n  def getProductPrice(products: Map[String, Double], sku: String): Double = {\n    products.get(sku) match {\n      case Some(price) => price\n      case None => throw new Exception(\"SKU not found\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_428","timestamp":1745436745572,"code":"object PosIntegration8 {\n  def removeItem(items: List[String], item: String): List[String] = {\n    if (!items.contains(item)) throw new Exception(\"Item not found in list\")\n    items.filterNot(_ == item)\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_429","timestamp":1745436745572,"code":"object PosIntegration9 {\n  def applyTax(amount: Double, rate: Double): Double = {\n    if (rate < 0.0) throw new Exception(\"Negative tax rate invalid\")\n    amount * (1.0 + rate)\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_430","timestamp":1745436745572,"code":"object PosIntegration10 {\n  def findStore(stores: Seq[String], name: String): Int = {\n    val idx = stores.indexOf(name)\n    if (idx < 0) throw new Exception(\"Store not found\")\n    idx\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_431","timestamp":1745436745572,"code":"object PosIntegration11 {\n  def connectToTerminal(terminalId: String): Boolean = {\n    if (terminalId.isEmpty) throw new RuntimeException(\"Terminal ID required\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_432","timestamp":1745436745572,"code":"object PosIntegration12 {\n  def refund(paymentId: Option[String]): String = {\n    paymentId match {\n      case Some(id) => \"Refund initiated\"\n      case None => throw new Exception(\"No payment ID provided\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_433","timestamp":1745436745572,"code":"object PosIntegration13 {\n  def lookupEmployee(employees: Set[String], id: String): String = {\n    if (employees.contains(id)) id\n    else throw new Exception(\"Employee ID not found\")\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_434","timestamp":1745436745573,"code":"object PosIntegration14 {\n  def splitBill(amount: Double, customers: Int): Double = {\n    if (customers < 1) throw new IllegalArgumentException(\"No customers to split bill\")\n    amount / customers\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_435","timestamp":1745436745573,"code":"object PosIntegration15 {\n  def authorizeManager(roles: List[String]): String = {\n    if (!roles.contains(\"manager\")) throw new Exception(\"Manager authorization required\")\n    \"Authorized\"\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_436","timestamp":1745436745573,"code":"object PosIntegration16 {\n  def validateBarcode(barcode: String): String = {\n    if (barcode.length != 12) throw new Exception(\"Barcode must be 12 digits\")\n    barcode\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_437","timestamp":1745436745573,"code":"object PosIntegration17 {\n  def reserveStock(stock: Int, requested: Int): Int = {\n    if (requested > stock) throw new Exception(\"Insufficient stock\")\n    stock - requested\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_438","timestamp":1745436745573,"code":"object PosIntegration18 {\n  def selectPaymentMethod(methods: List[String], chosen: String): String = {\n    if (!methods.contains(chosen)) throw new Exception(\"Unsupported payment method\")\n    chosen\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_439","timestamp":1745436745573,"code":"object PosIntegration19 {\n  def connectScanner(scannerId: String): Boolean = {\n    if (scannerId == \"\") throw new Exception(\"Scanner ID missing\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_440","timestamp":1745436745573,"code":"object PosIntegration20 {\n  def cashDrawerOpen(status: Boolean): String = {\n    if (!status) throw new Exception(\"Cash drawer did not open\")\n    \"Drawer Opened\"\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_441","timestamp":1745436756259,"code":"def parseAmount(str: String): Double =\n  if (str.isEmpty) throw new IllegalArgumentException(\"Amount required\")\n  else str.toDouble\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_442","timestamp":1745436756259,"code":"def getInterestRate(rate: Double): Double =\n  if (rate < 0) throw new Exception(\"Negative rate not allowed\")\n  else rate\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_443","timestamp":1745436756259,"code":"def monthlyPayment(principal: Double, years: Int, rate: Double): Double =\n  if (years == 0) throw new RuntimeException(\"Years cannot be zero\")\n  val r = rate / 12 / 100\n  principal * r / (1 - math.pow(1 + r, -years * 12))\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_444","timestamp":1745436756259,"code":"def checkLoanType(loanType: String): String =\n  loanType match {\n    case \"fixed\" => loanType\n    case \"variable\" => loanType\n    case _ => throw new Exception(\"Unknown loan type\")\n  }\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_445","timestamp":1745436756259,"code":"class MortgageInput(val amount: Double, val rate: Double, val years: Int) {\n  if (amount <= 0) throw new IllegalArgumentException(\"Amount must be positive\")\n}\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_446","timestamp":1745436756259,"code":"def downpaymentPercentage(amt: Double, dp: Double): Double =\n  if (amt == 0) throw new ArithmeticException(\"Amount cannot be zero\")\n  else (dp / amt) * 100\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_447","timestamp":1745436756259,"code":"def parseYears(str: String): Int =\n  try str.toInt\n  catch { case _: NumberFormatException => throw new NumberFormatException(\"Years is not a valid number\") }\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_448","timestamp":1745436756259,"code":"def getPropertyTaxRate(zip: String): Double =\n  if (zip.length != 5) throw new Exception(\"Invalid ZIP code\")\n  else 1.2\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_449","timestamp":1745436756259,"code":"def amortizationSchedule(principal: Double, payments: Int): Seq[Double] =\n  if (payments <= 0) throw new IllegalArgumentException(\"Payments must be > 0\")\n  else Seq.fill(payments)(principal / payments)\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_450","timestamp":1745436756259,"code":"def validateInput(amount: Double, rate: Double): Boolean =\n  if (amount < 10000) throw new Exception(\"Minimum amount is 10,000\")\n  else if (rate > 15) throw new Exception(\"Rate too high\")\n  else true\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_451","timestamp":1745436756259,"code":"def extraPaymentsAllowed(term: Int): Boolean =\n  if (term < 5) throw new Exception(\"No extra payments allowed for short term\")\n  else true\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_452","timestamp":1745436756259,"code":"def calculateAPR(rate: Double, fees: Double, years: Int): Double =\n  if (fees < 0) throw new Exception(\"Fees cannot be negative\")\n  else rate + (fees / years)\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_453","timestamp":1745436756259,"code":"def lookupBank(name: String): String =\n  if (name == \"\") throw new IllegalArgumentException(\"Bank name required\")\n  else name\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_454","timestamp":1745436756259,"code":"def toDoubleOrThrow(arg: String): Double =\n  arg.toDoubleOption.getOrElse(throw new NumberFormatException(\"Not a double\"))\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_455","timestamp":1745436756259,"code":"def checkEligibility(age: Int, income: Double): Boolean =\n  if (age < 18) throw new Exception(\"Must be 18 or older\")\n  else if (income < 20000) throw new Exception(\"Income too low\")\n  else true\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_456","timestamp":1745436756259,"code":"def insuranceRequired(purchased: Boolean): Boolean =\n  if (!purchased) throw new RuntimeException(\"Insurance required\")\n  else true\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_457","timestamp":1745436756259,"code":"def rateFromString(rate: String): Double =\n  try rate.toDouble\n  catch { case _: Exception => throw new Exception(\"Invalid rate string\") }\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_458","timestamp":1745436756259,"code":"def loanOfficerApproval(score: Int): String =\n  if (score < 600) throw new Exception(\"Loan denied: low credit score\")\n  else \"approved\"\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_459","timestamp":1745436756259,"code":"def checkAddress(addr: String): String =\n  if (addr.length < 10) throw new Exception(\"Address too short\")\n  else addr\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_460","timestamp":1745436756259,"code":"def calcTotalPayment(month: Double, n: Int): Double =\n  if (n <= 0) throw new IllegalArgumentException(\"Months must be positive\")\n  else month * n\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_461","timestamp":1745436768194,"code":"object TelemetryValueParser {\n  def parseTemperature(s: String): Double =\n    if (s == \"\") throw new IllegalArgumentException(\"Empty temperature\")\n    else s.toDouble\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_462","timestamp":1745436768195,"code":"object SensorReader {\n  def readSensorValue(sensorId: Int): Float =\n    if (sensorId < 0) throw new RuntimeException(\"Invalid sensor ID\")\n    else Math.random().toFloat * 100\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_463","timestamp":1745436768195,"code":"object DataNormalizer {\n  def normalizeValue(value: Double, base: Double): Double =\n    if (base == 0) throw new ArithmeticException(\"Zero base for normalization\")\n    else value / base\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_464","timestamp":1745436768195,"code":"class Machine(val id: String) {\n  def getTelemetryOrThrow: Int =\n    if (id.isEmpty) throw new Exception(\"Missing machine ID\")\n    else id.length * 10\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_465","timestamp":1745436768195,"code":"object RPMCalculator {\n  def calculateRPM(pulses: Int, duration: Int): Int =\n    if (duration <= 0) throw new IllegalArgumentException(\"Duration must be positive\")\n    else (pulses * 60)/duration\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_466","timestamp":1745436768195,"code":"object AlertManager {\n  def triggerAlert(level: String): Boolean =\n    if (level != \"CRITICAL\" && level != \"WARNING\")\n      throw new Exception(\"Unknown alert level\")\n    else true\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_467","timestamp":1745436768195,"code":"object TelemetryDispatcher {\n  def dispatchData(batch: List[Int]): Unit =\n    if (batch.isEmpty) throw new RuntimeException(\"Empty batch can't be dispatched\")\n    else batch.foreach(x => println(s\"Sent: $x\"))\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_468","timestamp":1745436768195,"code":"object VoltageProcessor {\n  def safeDivide(voltage: Double, divider: Double): Double =\n    if (divider == 0) throw new ArithmeticException(\"Divider cannot be zero\")\n    else voltage / divider\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_469","timestamp":1745436768195,"code":"object ThresholdChecker {\n  def checkThreshold(value: Double, limit: Double): Boolean =\n    if (value > limit) throw new Exception(\"Threshold exceeded\")\n    else true\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_470","timestamp":1745436768195,"code":"class SignalParser {\n  def parse(signal: String): Int =\n    if (signal == null) throw new NullPointerException(\"No signal present\")\n    else signal.length\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_471","timestamp":1745436768195,"code":"class PressureSensor(reading: Option[Double]) {\n  def getPressure: Double =\n    reading.getOrElse(throw new Exception(\"No pressure reading available\"))\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_472","timestamp":1745436768195,"code":"object TelemetryRouter {\n  def route(packet: String): String =\n    if (!packet.startsWith(\"PKT\")) throw new Exception(\"Invalid packet format\")\n    else packet.reverse\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_473","timestamp":1745436768195,"code":"object DataAggregator {\n  def aggregate(values: List[Int]): Int =\n    if (values.isEmpty) throw new Exception(\"No values to aggregate\")\n    else values.sum\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_474","timestamp":1745436768195,"code":"class SensorData(val raw: String) {\n  def toIntValue: Int =\n    try raw.toInt\n    catch {\n      case _: NumberFormatException => throw new Exception(\"Invalid sensor raw value\")\n    }\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_475","timestamp":1745436768195,"code":"object DiagnosticTool {\n  def diagnose(code: Int): String =\n    if (code < 0) throw new Exception(\"Negative diagnostic code\")\n    else \"OK\"\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_476","timestamp":1745436768195,"code":"object BatchUploader {\n  def upload(batch: Seq[String]): Boolean =\n    if (batch.contains(null)) throw new NullPointerException(\"Null batch element\")\n    else true\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_477","timestamp":1745436768195,"code":"object OutlierRemover {\n  def removeOutlier(values: Seq[Double], max: Double): Seq[Double] =\n    if (values.exists(_ > max)) throw new Exception(\"Outlier detected\")\n    else values\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_478","timestamp":1745436768195,"code":"class TelemetrySession(sessionId: Option[String]) {\n  def validate: String =\n    sessionId.getOrElse(throw new Exception(\"Session ID required\"))\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_479","timestamp":1745436768195,"code":"object HeartbeatMonitor {\n  def check(lastReceived: Long, now: Long): Boolean =\n    if (now - lastReceived > 10000) throw new Exception(\"Heartbeat missed\")\n    else true\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_480","timestamp":1745436768195,"code":"class LinearScale(factor: Double) {\n  def scale(value: Double): Double =\n    if (factor == 0) throw new Exception(\"Scale factor cannot be zero\")\n    else value * factor\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_481","timestamp":1745436789569,"code":"object VRLobby1 {\n  def getPlayerName(playerId: Int): String = {\n    if (playerId < 0) throw new IllegalArgumentException(\"Invalid player ID\")\n    s\"Player$playerId\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_482","timestamp":1745436789569,"code":"object VRLobby2 {\n  def createRoom(name: String): String = {\n    if (name.trim.isEmpty) throw new Exception(\"Room name cannot be empty\")\n    s\"Room: $name\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_483","timestamp":1745436789569,"code":"object VRLobby3 {\n  def assignHeadset(userId: Int): String = {\n    if (userId == 42) throw new RuntimeException(\"User banned\")\n    \"Headset assigned\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_484","timestamp":1745436789569,"code":"object VRLobby4 {\n  def joinLobby(code: String): Boolean = {\n    if (!code.startsWith(\"VR\")) throw new Exception(\"Invalid lobby code\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_485","timestamp":1745436789569,"code":"object VRLobby5 {\n  def setLobbyCapacity(cap: Int): Unit = {\n    if (cap <= 0) throw new IllegalArgumentException(\"Capacity must be positive\")\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_486","timestamp":1745436789569,"code":"object VRLobby6 {\n  def findHost(users: List[String]): String = {\n    if (users.isEmpty) throw new Exception(\"No users to choose from\")\n    users.head\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_487","timestamp":1745436789569,"code":"object VRLobby7 {\n  def getAvatar(user: String): String = {\n    if (user.length < 3) throw new RuntimeException(\"Invalid username\")\n    s\"AvatarOf$user\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_488","timestamp":1745436789569,"code":"object VRLobby8 {\n  def selectRoom(rooms: List[String], idx: Int): String = {\n    if (idx < 0 || idx >= rooms.length) throw new Exception(\"Room index out of range\")\n    rooms(idx)\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_489","timestamp":1745436789569,"code":"object VRLobby9 {\n  def calculatePlayerLevel(exp: Int, divisor: Int): Int = {\n    if (divisor == 0) throw new ArithmeticException(\"Division by zero\")\n    exp / divisor\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_490","timestamp":1745436789569,"code":"object VRLobby10 {\n  def inviteFriend(friendName: String): Unit = {\n    if (friendName.contains(\" \")) throw new RuntimeException(\"Invalid friend name\")\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_491","timestamp":1745436789569,"code":"object VRLobby11 {\n  def removePlayer(players: List[String], name: String): List[String] = {\n    if (!players.contains(name)) throw new Exception(\"Player not found\")\n    players.filterNot(_ == name)\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_492","timestamp":1745436789569,"code":"object VRLobby12 {\n  def getLobbyByPort(port: Int): String = {\n    if (port < 1024 || port > 65535) throw new Exception(\"Port out of range\")\n    s\"Lobby on port $port\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_493","timestamp":1745436789569,"code":"object VRLobby13 {\n  def reserveSeat(lobby: Map[Int, String], seat: Int): Map[Int, String] = {\n    if (lobby.contains(seat)) throw new Exception(\"Seat already taken\")\n    lobby + (seat -> \"reserved\")\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_494","timestamp":1745436789569,"code":"object VRLobby14 {\n  def validateAccess(token: Option[String]): String = {\n    if (token.isEmpty) throw new Exception(\"Access denied\")\n    \"Access granted\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_495","timestamp":1745436789569,"code":"object VRLobby15 {\n  def startGame(players: List[String]): String = {\n    if (players.size < 2) throw new Exception(\"Not enough players to start\")\n    \"Game started\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_496","timestamp":1745436789569,"code":"object VRLobby16 {\n  def spectateLobby(user: String, lobbies: Set[String]): String = {\n    if (!lobbies.exists(_.contains(user))) throw new Exception(\"User not in any lobby\")\n    s\"Spectating $user's lobby\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_497","timestamp":1745436789569,"code":"object VRLobby17 {\n  def submitScore(score: Int): String = {\n    if (score < 0) throw new Exception(\"Negative score not allowed\")\n    s\"Score: $score submitted\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_498","timestamp":1745436789569,"code":"object VRLobby18 {\n  def setMicrophone(user: String, micOn: Boolean): String = {\n    if (user.isEmpty) throw new Exception(\"User required\")\n    if (!micOn) throw new Exception(\"Microphone must be on\")\n    \"Microphone set\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_499","timestamp":1745436789569,"code":"object VRLobby19 {\n  def calculateRoundTime(time: Int): Int = {\n    if (time <= 0) throw new IllegalArgumentException(\"Time must be positive\")\n    time * 2\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_500","timestamp":1745436789569,"code":"object VRLobby20 {\n  def pickTeam(teams: Vector[String], selection: Int): String = {\n    if (selection < 0 || selection >= teams.length) throw new Exception(\"Invalid team selection\")\n    teams(selection)\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_501","timestamp":1745436809712,"code":"object Snippet1 {\n  def parseHours(hours: String): Int = {\n    if (hours.forall(_.isDigit)) hours.toInt\n    else throw new IllegalArgumentException(\"Invalid hours format\")\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_502","timestamp":1745436809713,"code":"object Snippet2 {\n  def calculateOvertime(hours: Int): Int = {\n    if (hours < 0) throw new RuntimeException(\"Hours cannot be negative\")\n    else if (hours > 40) hours - 40\n    else 0\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_503","timestamp":1745436809713,"code":"object Snippet3 {\n  class Employee(val id: String)\n  class TimeTracker {\n    def clockIn(e: Employee, time: String): Unit = {\n      if (time.isEmpty) throw new Exception(\"Time is required\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_504","timestamp":1745436809713,"code":"object Snippet4 {\n  def checkEmployeeActive(active: Boolean): String = {\n    if (!active) throw new Exception(\"Employee not active\")\n    else \"Proceed\"\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_505","timestamp":1745436809713,"code":"object Snippet5 {\n  def getBreakDuration(breaks: List[Int]): Int = {\n    if (breaks.isEmpty) throw new NoSuchElementException(\"No breaks found\")\n    breaks.sum\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_506","timestamp":1745436809713,"code":"object Snippet6 {\n  def percentageWorked(hours: Int, total: Int): Double = {\n    if (total == 0) throw new ArithmeticException(\"Total hours cannot be zero\")\n    else hours.toDouble / total\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_507","timestamp":1745436809713,"code":"object Snippet7 {\n  class TimeSheet\n  def saveTimeSheet(ts: Option[TimeSheet]): String = {\n    ts match {\n      case Some(sheet) => \"Saved\"\n      case None => throw new Exception(\"No TimeSheet to save\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_508","timestamp":1745436809713,"code":"object Snippet8 {\n  def findEmployeeById(id: String, employees: Map[String, String]): String = {\n    if (!employees.contains(id)) throw new Exception(\"Employee not found\")\n    employees(id)\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_509","timestamp":1745436809713,"code":"object Snippet9 {\n  def validateDate(date: String): String = {\n    if (!date.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) throw new IllegalArgumentException(\"Invalid date format\")\n    date\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_510","timestamp":1745436809713,"code":"object Snippet10 {\n  def hoursWorked(start: Int, end: Int): Int = {\n    if (end < start) throw new Exception(\"End time before start time\")\n    end - start\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_511","timestamp":1745436809713,"code":"object Snippet11 {\n  def recordShift(emp: String, in: Int, out: Int): Int = {\n    if (emp == \"\") throw new Exception(\"Employee name required\")\n    if (out <= in) throw new Exception(\"Invalid shift times\")\n    out - in\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_512","timestamp":1745436809713,"code":"object Snippet12 {\n  class Project(val name: String)\n  def assign(project: Project, emp: String): String = {\n    if (project == null) throw new Exception(\"Project is null\")\n    if (emp == null || emp.isEmpty) throw new Exception(\"Employee invalid\")\n    \"Assigned\"\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_513","timestamp":1745436809713,"code":"object Snippet13 {\n  def removeBreak(breaks: List[Int], index: Int): List[Int] = {\n    if (index < 0 || index >= breaks.length) throw new IndexOutOfBoundsException(\"Invalid break index\")\n    breaks.patch(index, Nil, 1)\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_514","timestamp":1745436809713,"code":"object Snippet14 {\n  def approveLeave(leavesLeft: Int): Boolean = {\n    if (leavesLeft <= 0) throw new Exception(\"No leaves left\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_515","timestamp":1745436809713,"code":"object Snippet15 {\n  def getFirstClockIn(times: List[Int]): Int = {\n    if (times.isEmpty) throw new Exception(\"No clock-in times recorded\")\n    times.min\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_516","timestamp":1745436809713,"code":"object Snippet16 {\n  def addWorkDay(days: Set[String], day: String): Set[String] = {\n    if (days.contains(day)) throw new Exception(\"Day already exists\")\n    days + day\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_517","timestamp":1745436809713,"code":"object Snippet17 {\n  def subtractBreaks(total: Int, breaks: Int): Int = {\n    if (breaks > total) throw new Exception(\"Breaks exceed total hours\")\n    total - breaks\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_518","timestamp":1745436809713,"code":"object Snippet18 {\n  case class TimeEntry(employee: String, duration: Int)\n  def totalForEmployee(entries: List[TimeEntry], name: String): Int = {\n    val filtered = entries.filter(_.employee == name)\n    if (filtered.isEmpty) throw new Exception(\"No entries for employee\")\n    filtered.map(_.duration).sum\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_519","timestamp":1745436809713,"code":"object Snippet19 {\n  def setHourlyRate(rate: Double): Double = {\n    if (rate <= 0) throw new Exception(\"Rate must be positive\")\n    rate\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_520","timestamp":1745436809713,"code":"object Snippet20 {\n  def parseEmployee(input: String): (String, Int) = {\n    val parts = input.split(\",\")\n    if (parts.length != 2) throw new Exception(\"Invalid input format\")\n    (parts(0), parts(1).toInt)\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_521","timestamp":1745436826983,"code":"object WeatherAlert1 {\n  def getTemperature(city: String): Double = {\n    if (city.isEmpty) throw new IllegalArgumentException(\"City name required\")\n    24.3\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_522","timestamp":1745436826983,"code":"object WeatherAlert2 {\n  def parseAlertLevel(level: String): Int = {\n    if (level == \"\") throw new RuntimeException(\"Empty level\")\n    else if (level == \"Severe\") 3\n    else if (level == \"Warning\") 2\n    else if (level == \"Info\") 1\n    else throw new RuntimeException(\"Unknown level\")\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_523","timestamp":1745436826983,"code":"object WeatherAlert3 {\n  def getHumidity(report: Map[String, String], key: String): Double = {\n    if (!report.contains(key)) throw new NoSuchElementException(s\"Missing key $key\")\n    report(key).toDouble\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_524","timestamp":1745436826983,"code":"object WeatherAlert4 {\n  def computeWindChill(temp: Double, windSpeed: Double): Double = {\n    if (windSpeed == 0) throw new ArithmeticException(\"Wind speed must not be zero\")\n    13.12 + 0.6215 * temp - 11.37 * Math.pow(windSpeed, 0.16)\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_525","timestamp":1745436826983,"code":"object WeatherAlert5 {\n  def sendNotification(userId: String, message: String): Unit = {\n    if (userId == null) throw new NullPointerException(\"User id is null\")\n    println(s\"Sending $message to $userId\")\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_526","timestamp":1745436826983,"code":"object WeatherAlert6 {\n  def validateAlertDuration(minutes: Int): Int = {\n    if (minutes <= 0) throw new IllegalArgumentException(\"Duration must be positive\")\n    minutes\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_527","timestamp":1745436826983,"code":"object WeatherAlert7 {\n  def fetchWeatherCode(code: String): String = {\n    if (code.length != 5) throw new Exception(\"Invalid weather code format\")\n    code.toUpperCase\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_528","timestamp":1745436826983,"code":"object WeatherAlert8 {\n  def getUserSubscription(users: Map[String, String], user: String): String = {\n    if (!users.contains(user)) throw new Exception(\"User not subscribed\")\n    users(user)\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_529","timestamp":1745436826983,"code":"object WeatherAlert9 {\n  def calculateRiskIndex(humidity: Double, temp: Double): Int = {\n    if (humidity < 0 || temp < -50) throw new Exception(\"Unrealistic input for risk calculation\")\n    (humidity + temp).toInt\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_530","timestamp":1745436826983,"code":"object WeatherAlert10 {\n  def alertMessagePrefix(level: String): String = {\n    if (level == null) throw new NullPointerException(\"Null alert level\")\n    level.toUpperCase + \": \"\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_531","timestamp":1745436826983,"code":"object WeatherAlert11 {\n  def ensureValidRecipient(recipient: String): Unit = {\n    if (recipient.trim.isEmpty) throw new Exception(\"Empty recipient\")\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_532","timestamp":1745436826983,"code":"object WeatherAlert12 {\n  def daysSinceLastStorm(days: Int): Int = {\n    if (days < 0) throw new IllegalArgumentException(\"Negative days not allowed\")\n    days\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_533","timestamp":1745436826983,"code":"object WeatherAlert13 {\n  def extractAlertId(alert: String): Int = {\n    try {\n      alert.split(\"-\")(1).toInt\n    } catch {\n      case _: Throwable => throw new RuntimeException(\"Could not parse alert id\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_534","timestamp":1745436826983,"code":"object WeatherAlert14 {\n  def getStationLocation(stations: Map[Int, String], id: Int): String = {\n    stations.getOrElse(id, throw new Exception(\"Station not found\"))\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_535","timestamp":1745436826983,"code":"object WeatherAlert15 {\n  def updateUserPreference(map: Map[String, String], key: String, value: String): Map[String, String] = {\n    if (key.isEmpty) throw new Exception(\"Preference key required\")\n    map + (key -> value)\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_536","timestamp":1745436826983,"code":"object WeatherAlert16 {\n  def checkSevereRainfall(mm: Double): Unit = {\n    if (mm > 500) throw new Exception(\"Extreme rainfall event detected\")\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_537","timestamp":1745436826983,"code":"object WeatherAlert17 {\n  def safeDivide(a: Int, b: Int): Int = {\n    if (b == 0) throw new ArithmeticException(\"Division by zero in alert calculation\")\n    a / b\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_538","timestamp":1745436826983,"code":"object WeatherAlert18 {\n  def messageForStatus(status: String): String = {\n    status match {\n      case \"active\" => \"Alert currently active.\"\n      case \"resolved\" => \"Alert has been resolved.\"\n      case _ => throw new Exception(\"Unknown status\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_539","timestamp":1745436826983,"code":"object WeatherAlert19 {\n  def alertTimes(times: List[Int], hour: Int): Int = {\n    if (!times.contains(hour)) throw new Exception(\"No alert scheduled at this hour\")\n    hour\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_540","timestamp":1745436826983,"code":"object WeatherAlert20 {\n  def setAlertType(alerts: collection.mutable.Map[Int, String], id: Int, tpe: String): Unit = {\n    if (alerts.contains(id)) throw new Exception(\"Alert id already used\")\n    alerts(id) = tpe\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_541","timestamp":1745436843607,"code":"object FraudCheck1 {\n  def validateAmount(amount: Double): Double = {\n    if (amount <= 0) throw new IllegalArgumentException(\"Negative or zero amount is invalid\")\n    amount\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_542","timestamp":1745436843607,"code":"object FraudCheck2 {\n  def getCountryCode(country: String): Int = {\n    if (country.isEmpty) throw new RuntimeException(\"Country not provided\")\n    country.hashCode\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_543","timestamp":1745436843607,"code":"object FraudCheck3 {\n  def userStatus(userId: String): String = {\n    if (!userId.startsWith(\"U\")) throw new Exception(\"User ID invalid\")\n    \"active\"\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_544","timestamp":1745436843607,"code":"object FraudCheck4 {\n  def checkCurrency(currency: String): String = {\n    if (currency != \"USD\" && currency != \"EUR\") throw new Exception(\"Unsupported currency\")\n    currency\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_545","timestamp":1745436843607,"code":"object FraudCheck5 {\n  def calculateRiskScore(transactions: Int, chargebacks: Int): Double = {\n    if (transactions == 0) throw new ArithmeticException(\"Transactions cannot be zero\")\n    chargebacks.toDouble / transactions\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_546","timestamp":1745436843607,"code":"object FraudCheck6 {\n  def verifyEmail(email: String): Boolean = {\n    if (!email.contains(\"@\")) throw new Exception(\"Invalid email address\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_547","timestamp":1745436843607,"code":"object FraudCheck7 {\n  def checkBlacklistedCard(cardNumber: String): Boolean = {\n    if (cardNumber.startsWith(\"9999\")) throw new Exception(\"Blacklisted card number\")\n    false\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_548","timestamp":1745436843607,"code":"object FraudCheck8 {\n  def parseTransactionId(txn: String): Long = {\n    try {\n      txn.toLong\n    } catch {\n      case _: Exception => throw new NumberFormatException(\"Transaction ID is not numeric\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_549","timestamp":1745436843607,"code":"object FraudCheck9 {\n  def riskLevel(flag: Boolean): String = {\n    if (flag) \"high\"\n    else throw new RuntimeException(\"Risk level not determined\")\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_550","timestamp":1745436843607,"code":"object FraudCheck10 {\n  def validateIpAddress(ip: String): String = {\n    if (!ip.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) throw new IllegalArgumentException(\"Invalid IP\")\n    ip\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_551","timestamp":1745436843607,"code":"object FraudCheck11 {\n  def fetchPayment(paymentId: String): String = {\n    if (paymentId.length != 12) throw new Exception(\"Invalid payment ID\")\n    \"payment_data\"\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_552","timestamp":1745436843607,"code":"object FraudCheck12 {\n  def isRepeatTransaction(times: Int): Boolean = {\n    if (times > 3) throw new Exception(\"Suspicious repeat transaction\")\n    false\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_553","timestamp":1745436843607,"code":"object FraudCheck13 {\n  def requireMatchingNames(name1: String, name2: String): Boolean = {\n    if (name1.isEmpty || name2.isEmpty) throw new Exception(\"Names cannot be empty\")\n    if (name1 != name2) throw new Exception(\"Names do not match\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_554","timestamp":1745436843607,"code":"object FraudCheck14 {\n  def ensureNonWeekend(day: String): String = {\n    if (day == \"Saturday\" || day == \"Sunday\") throw new Exception(\"Transactions not allowed on weekends\")\n    day\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_555","timestamp":1745436843607,"code":"object FraudCheck15 {\n  def getCardType(card: String): String = {\n    card.headOption match {\n      case Some('4') => \"Visa\"\n      case Some('5') => \"MasterCard\"\n      case _ => throw new Exception(\"Unknown card type\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_556","timestamp":1745436843607,"code":"object FraudCheck16 {\n  def checkTransactionVelocity(hours: Int, txns: Int): Boolean = {\n    if (txns > 5 && hours < 1) throw new Exception(\"Excessive transactions in short period\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_557","timestamp":1745436843607,"code":"object FraudCheck17 {\n  def safeDivide(amount: Int, divisor: Int): Int = {\n    if (divisor == 0) throw new ArithmeticException(\"Division by zero\")\n    amount / divisor\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_558","timestamp":1745436843607,"code":"object FraudCheck18 {\n  def validateReference(ref: String): String = {\n    if (ref == null) throw new NullPointerException(\"Reference is null\")\n    ref\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_559","timestamp":1745436843607,"code":"object FraudCheck19 {\n  def getMerchantCategory(mcc: String): String = {\n    if (mcc.length != 4) throw new Exception(\"Invalid MCC\")\n    \"Retail\"\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_560","timestamp":1745436843607,"code":"object FraudCheck20 {\n  def checkAccountFrozen(status: String): String = {\n    if (status == \"frozen\") throw new Exception(\"Account is frozen\")\n    status\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_561","timestamp":1745436870195,"code":"def loadDICOM(file: String): Array[Byte] = if (file.endsWith(\".dcm\")) Array() else throw new IllegalArgumentException(\"Not a DICOM file\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_562","timestamp":1745436870195,"code":"def getSlice(volume: Array[Array[Array[Int]]], index: Int): Array[Array[Int]] = if (index >= 0 && index < volume.length) volume(index) else throw new IndexOutOfBoundsException(\"Invalid slice index\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_563","timestamp":1745436870195,"code":"def parseImageDimensions(meta: Map[String, String]): (Int, Int) = meta.get(\"Rows\").flatMap(r => meta.get(\"Columns\").map(c => (r.toInt, c.toInt))).getOrElse(throw new NoSuchElementException(\"Rows or Columns missing\"))","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_564","timestamp":1745436870195,"code":"def displayImage(img: Option[Array[Byte]]): Unit = img.map(arr => println(\"Displaying\")) .getOrElse(throw new RuntimeException(\"Image data missing\"))","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_565","timestamp":1745436870195,"code":"def getPixelValue(image: Array[Array[Int]], x: Int, y: Int): Int = if (x >= 0 && x < image.length && y >= 0 && y < image(0).length) image(x)(y) else throw new IllegalArgumentException(\"Invalid pixel coordinates\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_566","timestamp":1745436870195,"code":"def normalizePixelIntensities(values: Array[Int]): Array[Double] = {\n  val max = if (values.nonEmpty) values.max else throw new RuntimeException(\"Empty intensity array\")\n  values.map(v => v.toDouble / max)\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_567","timestamp":1745436870195,"code":"def contrastAdjust(img: Array[Array[Int]], factor: Double): Array[Array[Int]] = {\n  if (factor <= 0) throw new IllegalArgumentException(\"Contrast factor must be positive\")\n  img.map(row => row.map(v => (v * factor).toInt))\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_568","timestamp":1745436870195,"code":"case class MedicalImage(name: String, data: Array[Byte])\ndef findImage(images: Seq[MedicalImage], wanted: String): MedicalImage = {\n  images.find(_.name == wanted).getOrElse(throw new NoSuchElementException(\"Image not found\"))\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_569","timestamp":1745436870195,"code":"def setWindowLevel(level: Int): Unit = if (level < 0) throw new IllegalArgumentException(\"Window level cannot be negative\") else println(s\"Level: $level\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_570","timestamp":1745436870195,"code":"def saveAnnotatedImage(path: String, img: Array[Byte]): Unit = {\n  if (!path.endsWith(\".dcm\")) throw new RuntimeException(\"Path must have .dcm extension\")\n  println(\"Saving annotated image\")\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_571","timestamp":1745436870195,"code":"def computeMeanIntensity(pixels: Array[Int]): Double = {\n  if (pixels.isEmpty) throw new IllegalArgumentException(\"Pixel array is empty\")\n  pixels.sum.toDouble / pixels.length\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_572","timestamp":1745436870195,"code":"def rotateImage(img: Array[Array[Int]], angle: Int): Array[Array[Int]] = {\n  if (angle % 90 != 0) throw new IllegalArgumentException(\"Angle must be a multiple of 90\")\n  img.reverse\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_573","timestamp":1745436870195,"code":"def parseAnnotation(json: String): Map[String, Any] = {\n  if (!json.startsWith(\"{\")) throw new RuntimeException(\"Malformed annotation JSON\")\n  Map()\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_574","timestamp":1745436870195,"code":"def openImageViewer(images: Seq[Array[Byte]]): Array[Byte] = if (images.nonEmpty) images.head else throw new RuntimeException(\"No images to open\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_575","timestamp":1745436870195,"code":"def rescaleIntensity(value: Int, min: Int, max: Int): Int = {\n  if (max == min) throw new ArithmeticException(\"Min and max intensity are equal\")\n  (value - min) * 255 / (max - min)\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_576","timestamp":1745436870195,"code":"def findSeries(seriesList: Seq[String], id: String): String = seriesList.find(_ == id).getOrElse(throw new NoSuchElementException(\"Series not found\"))","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_577","timestamp":1745436870195,"code":"class SegmentationResult(val mask: Array[Array[Boolean]])\ndef getMaskValue(seg: SegmentationResult, x: Int, y: Int): Boolean = if (x < 0 || y < 0) throw new IllegalArgumentException(\"Invalid mask coordinates\") else seg.mask(x)(y)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_578","timestamp":1745436870195,"code":"def decodePixelSpacing(meta: Map[String, String]): (Double, Double) = {\n  val spacing = meta.get(\"PixelSpacing\").getOrElse(throw new NoSuchElementException(\"PixelSpacing not found\"))\n  val arr = spacing.split(\"\\\\\\\\\")\n  if (arr.length == 2) (arr(0).toDouble, arr(1).toDouble) else throw new RuntimeException(\"PixelSpacing format\" )\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_579","timestamp":1745436870195,"code":"def flipImage(img: Array[Array[Int]], vertical: Boolean): Array[Array[Int]] = {\n  if (img.isEmpty) throw new IllegalArgumentException(\"Image is empty\")\n  if (vertical) img.reverse else img.map(_.reverse)\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_580","timestamp":1745436870195,"code":"def validateModality(mod: String): String = {\n  List(\"CT\", \"MR\").find(_ == mod).getOrElse(throw new RuntimeException(\"Unsupported modality\"))\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_581","timestamp":1745436870195,"code":"def loadPatientInfo(patientId: String): String = {\n  if (patientId.trim.isEmpty) throw new IllegalArgumentException(\"Empty patient id\")\n  s\"Loaded info for $patientId\"\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_582","timestamp":1745436883265,"code":"case class PaymentLink(id: String, amount: Double)\ndef findPaymentLink(id: String): PaymentLink =\n  if (id.isEmpty) throw new IllegalArgumentException(\"Empty payment link id!\")\n  else PaymentLink(id, 20.0)","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_583","timestamp":1745436883265,"code":"def getPaymentLinkStatus(linkId: String): String = {\n  if (linkId != \"existingId\") throw new NoSuchElementException(\"Payment Link not found!\")\n  \"ACTIVE\"\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_584","timestamp":1745436883265,"code":"def calculateFee(amount: Double, percent: Double): Double = {\n  if (percent == 0) throw new ArithmeticException(\"Fee percentage cannot be zero!\")\n  amount * percent / 100\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_585","timestamp":1745436883265,"code":"def parseCurrency(code: String): String = {\n  if (code != \"USD\" && code != \"EUR\") throw new IllegalArgumentException(\"Unsupported currency!\")\n  code\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_586","timestamp":1745436883265,"code":"case class User(id: String)\ndef getUser(userId: String): User = {\n  if (userId == null) throw new NullPointerException(\"userId is null!\")\n  User(userId)\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_587","timestamp":1745436883265,"code":"def deletePaymentLink(linkId: String): Boolean = {\n  if (linkId == \"blocked\") throw new IllegalStateException(\"Link is protected and cannot be deleted!\")\n  true\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_588","timestamp":1745436883265,"code":"def requireNonNegative(amount: Double): Unit = {\n  if (amount < 0) throw new IllegalArgumentException(\"Amount must be non-negative!\")\n}\nrequireNonNegative(10.0)","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_589","timestamp":1745436883265,"code":"def paymentLinkUrl(domain: String, path: String): String = {\n  if (!domain.startsWith(\"https://\")) throw new IllegalArgumentException(\"Invalid domain!\")\n  domain + path\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_590","timestamp":1745436883265,"code":"case class PaymentRequest(amount: Double)\ndef processRequest(request: PaymentRequest): String = {\n  if (request.amount == 0) throw new RuntimeException(\"Zero amount not allowed!\")\n  \"REQUEST_PROCESSED\"\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_591","timestamp":1745436883265,"code":"def validatePayee(payee: Option[String]): String = {\n  if (payee.isEmpty) throw new IllegalArgumentException(\"Payee missing!\")\n  payee.get\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_592","timestamp":1745436883265,"code":"def updateLinkStatus(id: String, status: String): Unit = {\n  if (status != \"ACTIVE\" && status != \"INACTIVE\") throw new IllegalArgumentException(\"Invalid status!\")\n}\nupdateLinkStatus(\"id\", \"ACTIVE\")","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_593","timestamp":1745436883265,"code":"def parseAmount(value: String): Double = {\n  try value.toDouble\n  catch { case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid amount format!\") }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_594","timestamp":1745436883265,"code":"def sendEmail(email: String): Boolean = {\n  if (!email.contains(\"@\")) throw new IllegalArgumentException(\"Invalid email address!\")\n  true\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_595","timestamp":1745436883265,"code":"def getPaymentAmount(link: PaymentLink): Double = {\n  if (link.amount < 1) throw new RuntimeException(\"Too low payment amount!\")\n  link.amount\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_596","timestamp":1745436883265,"code":"def extractId(input: String): String = {\n  if (input.trim.isEmpty) throw new Exception(\"ID is empty!\")\n  input.trim\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_597","timestamp":1745436883265,"code":"def confirmLink(link: PaymentLink): Boolean = {\n  if (link.id == \"pending\") throw new IllegalStateException(\"Link is pending, cannot confirm!\")\n  true\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_598","timestamp":1745436883265,"code":"def getOwnerName(linkId: String): String = {\n  if (linkId == \"anon\") throw new Exception(\"Owner anonymous!\")\n  \"TestOwner\"\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_599","timestamp":1745436883265,"code":"def verifySecret(secret: String): Boolean = {\n  if (secret.length < 8) throw new IllegalArgumentException(\"Secret too short!\")\n  true\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_600","timestamp":1745436883265,"code":"def safeDivide(total: Int, count: Int): Int = {\n  if (count == 0) throw new ArithmeticException(\"Divide by zero!\")\n  total / count\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_601","timestamp":1745436883265,"code":"def fetchLinkOrThrow(id: String): PaymentLink = {\n  val links = Map(\"A\" -> PaymentLink(\"A\", 44.0))\n  links.getOrElse(id, throw new NoSuchElementException(\"Link not found!\"))\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_602","timestamp":1745436897144,"code":"def translateWord(word: String): String =\n  if (word.isEmpty) throw new IllegalArgumentException(\"Word cannot be empty!\")\n  else \"translated-\" + word\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_603","timestamp":1745436897144,"code":"def getSupportedLanguages(): List[String] =\n  val langs = List(\"en\", \"es\", \"fr\")\n  if (langs.isEmpty) throw new Exception(\"No supported languages!\")\n  langs\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_604","timestamp":1745436897144,"code":"def getLanguageCode(name: String): String =\n  name.toLowerCase match {\n    case \"english\" => \"en\"\n    case \"spanish\" => \"es\"\n    case _ => throw new NoSuchElementException(\"Language not found\")\n  }\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_605","timestamp":1745436897144,"code":"def validateTextLength(text: String): Unit =\n  if (text.length > 140)\n    throw new IllegalArgumentException(\"Text too long!\")\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_606","timestamp":1745436897144,"code":"def parseUserMessage(msg: String): (String, String) =\n  val arr = msg.split(\":\")\n  if (arr.length != 2) throw new Exception(\"Invalid message format\")\n  (arr(0), arr(1))\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_607","timestamp":1745436897144,"code":"def fetchTranslationApi(token: String): String =\n  if (token != \"api-token\") throw new SecurityException(\"Invalid API Token\")\n  \"Connected\"\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_608","timestamp":1745436897144,"code":"def getTranslationDirection(from: String, to: String): String =\n  if (from == to) throw new Exception(\"Source and target languages must differ\")\n  s\"$from-$to\"\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_609","timestamp":1745436897144,"code":"def lookupDictionary(word: String): String =\n  if (word == \"\") throw new Exception(\"Word is empty\")\n  \"Definition of \" + word\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_610","timestamp":1745436897144,"code":"def ensureUserIsLoggedIn(username: Option[String]): String =\n  username match {\n    case Some(u) => u\n    case None => throw new Exception(\"User not logged in\")\n  }\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_611","timestamp":1745436897144,"code":"def getChatHistory(user: String): List[String] =\n  if (user == \"\") throw new Exception(\"Invalid user!\")\n  List()\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_612","timestamp":1745436897144,"code":"def parseLanguageRequest(request: String): (String, String) =\n  val tokens = request.split(\"->\")\n  if (tokens.length != 2) throw new Exception(\"Bad request\")\n  (tokens(0).trim, tokens(1).trim)\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_613","timestamp":1745436897144,"code":"def sendChatResponse(response: String): Unit =\n  if (response == null) throw new NullPointerException(\"Null response!\")\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_614","timestamp":1745436897144,"code":"def getFirstWord(sentence: String): String =\n  val ws = sentence.split(\" \")\n  if (ws.isEmpty) throw new Exception(\"No words found\")\n  ws(0)\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_615","timestamp":1745436897144,"code":"def extractLanguageFromCommand(cmd: String): String =\n  if (!cmd.startsWith(\"/lang \")) throw new Exception(\"Command not recognized\")\n  cmd.stripPrefix(\"/lang \")\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_616","timestamp":1745436897144,"code":"def getUserTranslationRequest(userId: Int): String =\n  if (userId < 0) throw new IllegalArgumentException(\"Invalid userId\")\n  \"Translate this!\"\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_617","timestamp":1745436897144,"code":"def isValidLanguage(lang: String): Boolean =\n  if (lang.length != 2) throw new Exception(\"Language code must be 2 letters\")\n  true\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_618","timestamp":1745436897144,"code":"def deleteUserChat(user: String): Unit =\n  if (user == null) throw new NullPointerException(\"User is null\")\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_619","timestamp":1745436897144,"code":"def parseResponseCode(resp: String): Int =\n  try {\n    resp.toInt\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Response is not a number\")\n  }\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_620","timestamp":1745436897144,"code":"def uppercaseInput(text: String): String =\n  if (text eq null) throw new Exception(\"Input text is null\")\n  text.toUpperCase\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_621","timestamp":1745436897144,"code":"def getApiKey(user: String): String =\n  if (user != \"admin\") throw new SecurityException(\"Access denied\")\n  \"secret-api-key\"\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_622","timestamp":1745436911774,"code":"def energyConsumptionPerHour(totalEnergy: Int, hours: Int): Int = {\n  if (hours == 0) throw new ArithmeticException(\"Hours cannot be zero\")\n  totalEnergy / hours\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_623","timestamp":1745436911774,"code":"def getDeviceById(devices: Map[String, String], id: String): String = {\n  devices.get(id) match {\n    case Some(name) => name\n    case None => throw new NoSuchElementException(\"Device not found\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_624","timestamp":1745436911774,"code":"def parseEnergyValue(value: String): Int = {\n  try {\n    value.toInt\n  } catch {\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid energy value\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_625","timestamp":1745436911774,"code":"def reportEnergyForRoom(room: Option[String], energy: Int): String = {\n  room match {\n    case Some(r) => s\"$r energy: $energy\"\n    case None => throw new IllegalArgumentException(\"No room provided\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_626","timestamp":1745436911774,"code":"class User(val name: String, val email: String)\ndef getUserEmail(user: User): String = {\n  if (user.email.isEmpty) throw new RuntimeException(\"User email missing\")\n  user.email\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_627","timestamp":1745436911774,"code":"def averageConsumption(readings: List[Int]): Int = {\n  if (readings.isEmpty) throw new IllegalArgumentException(\"No readings\")\n  readings.sum / readings.size\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_628","timestamp":1745436911774,"code":"def dailyUsage(usages: Map[String, Int], day: String): Int = {\n  usages.get(day) match {\n    case Some(usage) => usage\n    case None => throw new Exception(\"Usage data not found for day\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_629","timestamp":1745436911774,"code":"def getStatus(online: Boolean): String = {\n  if (!online) throw new IllegalStateException(\"Dashboard is offline\")\n  \"Online\"\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_630","timestamp":1745436911774,"code":"def displayDeviceStatus(status: String): String = {\n  status.toLowerCase match {\n    case \"active\" => \"Device is active\"\n    case \"inactive\" => \"Device is inactive\"\n    case _ => throw new IllegalArgumentException(\"Unknown status\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_631","timestamp":1745436911774,"code":"def computeCost(energy: Int, rate: Double): Double = {\n  if (rate <= 0) throw new IllegalArgumentException(\"Invalid rate\")\n  energy * rate\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_632","timestamp":1745436911774,"code":"def maxUsage(usages: List[Int]): Int = {\n  usages.maxOption.getOrElse(throw new RuntimeException(\"No usage data\"))\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_633","timestamp":1745436911774,"code":"class Dashboard(configured: Boolean)\ndef runDashboard(d: Dashboard): String = {\n  if (!d.configured) throw new Exception(\"Dashboard not configured\")\n  \"Dashboard running\"\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_634","timestamp":1745436911774,"code":"def getReadingAt(readings: Array[Int], idx: Int): Int = {\n  if (idx < 0 || idx >= readings.length) throw new IndexOutOfBoundsException(\"Invalid index\")\n  readings(idx)\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_635","timestamp":1745436911774,"code":"def energyCategory(code: Int): String = {\n  code match {\n    case 1 => \"Low\"\n    case 2 => \"Medium\"\n    case 3 => \"High\"\n    case _ => throw new IllegalArgumentException(\"Invalid category code\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_636","timestamp":1745436911774,"code":"def removeDevice(devices: List[String], name: String): List[String] = {\n  if (!devices.contains(name)) throw new NoSuchElementException(\"No such device\")\n  devices.filterNot(_ == name)\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_637","timestamp":1745436911774,"code":"def updateThreshold(threshold: Double): Double = {\n  if (threshold < 0) throw new IllegalArgumentException(\"Threshold cannot be negative\")\n  threshold\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_638","timestamp":1745436911774,"code":"def calculateEfficiency(consumed: Double, produced: Double): Double = {\n  if (produced == 0) throw new ArithmeticException(\"Production is zero\")\n  consumed / produced\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_639","timestamp":1745436911774,"code":"def sensorValue(values: Seq[Double], idx: Int): Double = {\n  if (idx < 0 || idx >= values.length) throw new Exception(\"No such sensor reading\")\n  values(idx)\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_640","timestamp":1745436911774,"code":"def getChartType(chart: String): String = {\n  chart match {\n    case \"bar\" | \"line\" | \"pie\" => chart\n    case _ => throw new IllegalArgumentException(\"Unsupported chart type\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_641","timestamp":1745436911774,"code":"def verifyUserAccess(userRole: String): Boolean = {\n  if (userRole != \"admin\") throw new SecurityException(\"Access denied\")\n  true\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_642","timestamp":1745436932730,"code":"object E1 {\n  def parseVoteCount(s: String): Int = {\n    if (s.forall(_.isDigit)) s.toInt\n    else throw new IllegalArgumentException(\"Invalid vote count string\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_643","timestamp":1745436932730,"code":"object E2 {\n  def getCandidateVotes(candidate: String, results: Map[String, Int]): Int = {\n    results.getOrElse(candidate, throw new NoSuchElementException(\"Candidate not found\"))\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_644","timestamp":1745436932730,"code":"object E3 {\n  class Ballot(val votes: List[String])\n  def getFirstVote(ballot: Ballot): String = {\n    if (ballot.votes.nonEmpty) ballot.votes.head\n    else throw new RuntimeException(\"Empty ballot\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_645","timestamp":1745436932730,"code":"object E4 {\n  def validateBallot(votes: List[String], candidates: Set[String]): Unit = {\n    if (!votes.forall(candidates.contains)) throw new Exception(\"Unknown candidate detected\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_646","timestamp":1745436932730,"code":"object E5 {\n  def computePercentage(votes: Int, total: Int): Double = {\n    if (total == 0) throw new ArithmeticException(\"Division by zero in percentage calculation\")\n    100.0 * votes / total\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_647","timestamp":1745436932730,"code":"object E6 {\n  def tally(votes: Seq[String]): Int = {\n    if (votes.isEmpty) throw new IllegalStateException(\"No votes to tally\")\n    votes.length\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_648","timestamp":1745436932730,"code":"object E7 {\n  def safeGet[T](seq: Seq[T], idx: Int): T = {\n    if (idx < 0 || idx >= seq.length) throw new IndexOutOfBoundsException(s\"Invalid index $idx\")\n    seq(idx)\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_649","timestamp":1745436932730,"code":"object E8 {\n  def majority(winner: String, votes: Map[String, Int]): Int = {\n    if (!votes.contains(winner)) throw new Exception(\"No such winner\")\n    votes(winner)\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_650","timestamp":1745436932730,"code":"object E9 {\n  def requireQuorum(totalVoters: Int, voted: Int): Unit = {\n    if (voted < totalVoters / 2) throw new Exception(\"Quorum not met\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_651","timestamp":1745436932730,"code":"object E10 {\n  def parseBoolVote(v: String): Boolean = {\n    if (v == \"yes\") true\n    else if (v == \"no\") false\n    else throw new IllegalArgumentException(\"Invalid vote value\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_652","timestamp":1745436932730,"code":"object E11 {\n  class Vote(val candidate: String, val value: Int)\n  def getVoteValue(vote: Vote): Int = {\n    if (vote.value < 0) throw new Exception(\"Negative vote value\")\n    vote.value\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_653","timestamp":1745436932730,"code":"object E12 {\n  def calculateWinner(candidates: List[String], votes: Map[String, Int]): String = {\n    if (candidates.isEmpty) throw new Exception(\"No candidates\")\n    candidates.maxBy(votes.getOrElse(_, throw new Exception(\"Candidate missing in votes map\")))\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_654","timestamp":1745436932730,"code":"object E13 {\n  def divideCounts(a: Int, b: Int): Int = {\n    if (b == 0) throw new ArithmeticException(\"Divide by zero in voting count\")\n    a / b\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_655","timestamp":1745436932730,"code":"object E14 {\n  def removeBallot(ballots: List[String], ballot: String): List[String] = {\n    if (!ballots.contains(ballot)) throw new NoSuchElementException(\"Ballot not found\")\n    ballots.filterNot(_ == ballot)\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_656","timestamp":1745436932730,"code":"object E15 {\n  class VotingSession(val ballots: Seq[String])\n  def getLastBallot(session: VotingSession): String = {\n    if (session.ballots.isEmpty) throw new Exception(\"No ballots submitted\")\n    session.ballots.last\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_657","timestamp":1745436932730,"code":"object E16 {\n  def checkUniqueVotes(votes: Seq[String]): Unit = {\n    if (votes.distinct.length != votes.length) throw new Exception(\"Duplicate votes detected\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_658","timestamp":1745436932730,"code":"object E17 {\n  def readVote(voteLine: String): (String, Int) = {\n    val parts = voteLine.split(\":\")\n    if (parts.length != 2) throw new Exception(\"Malformed vote line\")\n    (parts(0), parts(1).toInt)\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_659","timestamp":1745436932730,"code":"object E18 {\n  def transferVotes(votes: Int, from: String, to: String): String = {\n    if (votes < 0) throw new Exception(\"Cannot transfer negative votes\")\n    s\"Transferred $votes votes from $from to $to\"\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_660","timestamp":1745436932730,"code":"object E19 {\n  def assertValidVotes(count: Int): Unit = {\n    if (count < 0) throw new Exception(\"Vote count cannot be negative\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_661","timestamp":1745436932730,"code":"object E20 {\n  def recountBallots(ballots: List[String]): Int = {\n    if (ballots == null) throw new NullPointerException(\"Ballot list is null\")\n    ballots.length\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_662","timestamp":1745436963650,"code":"def findBookByISBN(isbn: String): Book =\n  if (isbn.isEmpty) throw new IllegalArgumentException(\"ISBN cannot be empty\")\n  else catalog.find(_.isbn == isbn).getOrElse(throw new NoSuchElementException(\"Not found\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_663","timestamp":1745436963650,"code":"def parseQuery(query: String): Query =\n  if (query == null) throw new NullPointerException(\"Query string is null\")\n  else new Query(query)\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_664","timestamp":1745436963650,"code":"def getUserById(id: Int): User =\n  users.get(id) match {\n    case Some(user) => user\n    case None => throw new RuntimeException(\"User not found\")\n  }\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_665","timestamp":1745436963650,"code":"def searchByTitle(title: String): Book =\n  val book = catalog.find(_.title == title)\n  if (book.isEmpty) throw new Exception(\"Book with given title not found\")\n  book.get\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_666","timestamp":1745436963650,"code":"def booksByAuthor(author: String): List[Book] =\n  val result = catalog.filter(_.author == author)\n  if (result.isEmpty) throw new Exception(\"No books by this author\")\n  result\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_667","timestamp":1745436963650,"code":"def checkLibraryOpen(day: String): Boolean =\n  if (day.isEmpty) throw new IllegalArgumentException(\"Day is not specified\")\n  else if (day == \"Sunday\") throw new Exception(\"Library closed on Sunday\")\n  else true\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_668","timestamp":1745436963650,"code":"def getCopyNumber(bookId: Int): Int =\n  catalogMap.get(bookId) match {\n    case Some(book) => book.copies\n    case None => throw new NoSuchElementException(\"Book not found\")\n  }\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_669","timestamp":1745436963650,"code":"def validateSearchTerm(term: String): String =\n  if (term.trim.length < 3) throw new IllegalArgumentException(\"Search term too short\")\n  else term.trim\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_670","timestamp":1745436963650,"code":"def getCatalogSection(section: String): CatalogSection =\n  sectionMap.get(section) match {\n    case Some(sec) => sec\n    case None => throw new Exception(\"Section does not exist\")\n  }\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_671","timestamp":1745436963650,"code":"def pageResults(results: List[Book], page: Int): List[Book] =\n  if (page <= 0) throw new IllegalArgumentException(\"Negative or zero page number\")\n  else results.slice((page - 1) * 10, page * 10)\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_672","timestamp":1745436963650,"code":"def isbnToInt(isbn: String): Int =\n  try isbn.toInt\n  catch {\n    case _: NumberFormatException => throw new Exception(\"Invalid ISBN format\")\n  }\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_673","timestamp":1745436963650,"code":"def keywordSearch(keywords: List[String]): List[Book] =\n  if (keywords.isEmpty) throw new IllegalArgumentException(\"No keywords provided\")\n  catalog.filter(book => keywords.exists(book.keywords.contains))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_674","timestamp":1745436963650,"code":"def getPublicationYear(book: Book): Int =\n  if (book.publicationYear <= 0) throw new Exception(\"Invalid publication year\")\n  book.publicationYear\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_675","timestamp":1745436963650,"code":"def login(username: String, password: String): User =\n  if (username == \"\" || password == \"\") throw new IllegalArgumentException(\"Missing credentials\")\n  else if (!users.exists(u => u.username == username && u.password == password))\n    throw new Exception(\"Authentication failed\")\n  users.find(u => u.username == username && u.password == password).get\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_676","timestamp":1745436963650,"code":"def reserveBook(userId: Int, bookId: Int): Reservation =\n  if (!users.exists(_.id == userId)) throw new Exception(\"User does not exist\")\n  if (!catalog.exists(_.id == bookId)) throw new Exception(\"Book does not exist\")\n  new Reservation(userId, bookId)\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_677","timestamp":1745436963650,"code":"def findRecommendation(user: User): Book =\n  val recommended = recommendations.get(user.id)\n  if (recommended.isEmpty) throw new Exception(\"No recommendations available\")\n  recommended.get\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_678","timestamp":1745436963650,"code":"def deweyToInt(code: String): Int =\n  try code.toInt\n  catch {\n    case _: Throwable => throw new Exception(\"Non-numeric Dewey code\")\n  }\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_679","timestamp":1745436963650,"code":"def ensureBookAvailable(book: Book): Unit =\n  if (book.copies < 1) throw new Exception(\"Book is not available\")\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_680","timestamp":1745436963650,"code":"def getBookOrThrow(id: Int): Book =\n  catalogById.get(id).getOrElse(throw new Exception(\"Book ID not found\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_681","timestamp":1745436963650,"code":"def lastSearchResult(results: List[Book]): Book =\n  if (results.isEmpty) throw new Exception(\"No search results\")\n  else results.last\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_682","timestamp":1745436983974,"code":"def validateQrCode(qr: String): String =\n  if (qr.isEmpty) throw new IllegalArgumentException(\"QR code is empty\")\n  else qr.toUpperCase\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_683","timestamp":1745436983974,"code":"class Ticket(val code: String)\ndef getTicketFromCode(qr: String): Ticket =\n  if (!qr.startsWith(\"EVT\")) throw new Exception(\"Invalid QR prefix\")\n  else new Ticket(qr)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_684","timestamp":1745436983974,"code":"def ticketId(qr: String): Int =\n  try qr.drop(3).toInt\n  catch { case _: NumberFormatException => throw new RuntimeException(\"Ticket ID parse error\") }\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_685","timestamp":1745436983974,"code":"def requireValidFormat(qr: String): Unit =\n  if (!qr.matches(\"EVT-\\\\d{5}\")) throw new IllegalArgumentException(\"Malformed QR\")\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_686","timestamp":1745436983974,"code":"def scanQr(qr: Option[String]): String =\n  qr.getOrElse(throw new NoSuchElementException(\"No QR provided\"))\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_687","timestamp":1745436983974,"code":"def validateAndUse(qr: String): Boolean =\n  if (qr == null) throw new NullPointerException(\"Null QR sent\")\n  else qr.length % 2 == 0\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_688","timestamp":1745436983974,"code":"def checkEntry(ticket: Ticket): String =\n  if (ticket.code.endsWith(\"0\")) throw new Exception(\"Ticket expired\")\n  else \"Entry granted\"\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_689","timestamp":1745436983974,"code":"def fetchTicket(qr: String): String =\n  if (qr.size < 8) throw new Exception(\"QR code too short\")\n  else \"Ticket found\"\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_690","timestamp":1745436983974,"code":"def index(qr: String, idx: Int): Char =\n  if (idx < 0 || idx >= qr.length) throw new IndexOutOfBoundsException(\"Index out of bounds\")\n  else qr.charAt(idx)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_691","timestamp":1745436983974,"code":"def decodeBase64Qr(qr: String): Array[Byte] =\n  if (!qr.matches(\"[A-Za-z0-9+/=]+\")) throw new Exception(\"Non-base64 QR\")\n  else java.util.Base64.getDecoder.decode(qr)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_692","timestamp":1745436983974,"code":"def getEventId(qr: String): String =\n  val split = qr.split(\"-\")\n  if (split.length < 2) throw new Exception(\"QR missing event ID\")\n  else split(1)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_693","timestamp":1745436983974,"code":"def validateIssuer(qr: String, issuer: String): String =\n  if (!qr.contains(issuer)) throw new Exception(\"Issuer mismatch\")\n  else \"QR valid for issuer\"\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_694","timestamp":1745436983974,"code":"def parseDateFromQr(qr: String): String =\n  val parts = qr.split(\":\")\n  if (parts.length < 2) throw new RuntimeException(\"No event date in QR\")\n  else parts(1)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_695","timestamp":1745436983974,"code":"def verifyTicket(qr: String): Unit =\n  if (qr.contains(\"FAKE\")) throw new Exception(\"Fake ticket detected\")\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_696","timestamp":1745436983974,"code":"def findUserId(qr: String): Int =\n  val idx = qr.indexOf(\"U-\")\n  if (idx == -1) throw new NoSuchElementException(\"User ID missing\")\n  else qr.substring(idx + 2).takeWhile(_.isDigit).toInt\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_697","timestamp":1745436983974,"code":"def isValidEvent(qr: String): Boolean =\n  if (!qr.startsWith(\"2024\")) throw new IllegalArgumentException(\"Not a 2024 event code\")\n  else true\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_698","timestamp":1745436983974,"code":"def extractSection(qr: String): String =\n  val p = qr.split=\"#\"\n  if (p.length < 2) throw new Exception(\"Section missing in QR\")\n  else p(1)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_699","timestamp":1745436983974,"code":"def getSeat(qr: String): Int =\n  val seatMatch = \"SEAT(\\\\d+)\".r.findFirstMatchIn(qr)\n  seatMatch.map(_.group(1).toInt).getOrElse(throw new Exception(\"Seat number not found\"))\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_700","timestamp":1745436983974,"code":"def discount(qr: String): Double =\n  val discMatch = \"DISC(\\\\d+)\".r.findFirstMatchIn(qr)\n  if (discMatch.isEmpty) throw new Exception(\"No discount in QR\")\n  discMatch.get.group(1).toDouble / 10\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_701","timestamp":1745436983974,"code":"def scanTime(qr: String): Long =\n  val idx = qr.indexOf(\"T=\")\n  if (idx == -1) throw new Exception(\"No scan time in QR\")\n  val numStr = qr.substring(idx + 2).takeWhile(_.isDigit)\n  if (numStr.isEmpty) throw new Exception(\"Malformed scan time\")\n  numStr.toLong\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_702","timestamp":1745437006557,"code":"def computePathCost(dist: Double, wind: Double): Double =\n  if (dist < 0 || wind < 0) throw new IllegalArgumentException(\"Negative values\")\n  else dist * (1 + wind/10)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_703","timestamp":1745437006557,"code":"def findLandingZone(zones: List[String]): String =\n  if (zones.isEmpty) throw new NoSuchElementException(\"No zones available\")\n  zones.head","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_704","timestamp":1745437006557,"code":"def allocateDrone(drones: Seq[String], idx: Int): String =\n  if (idx < 0 || idx >= drones.length) throw new IndexOutOfBoundsException(\"Invalid index\")\n  drones(idx)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_705","timestamp":1745437006557,"code":"def scheduleDelivery(timeSlots: List[Int]): Int =\n  if (timeSlots.isEmpty) throw new RuntimeException(\"No available slots\")\n  timeSlots.min","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_706","timestamp":1745437006557,"code":"def energyRequired(distance: Double, payload: Double): Double =\n  if (payload == 0) throw new ArithmeticException(\"Payload is zero\")\n  distance / payload","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_707","timestamp":1745437006557,"code":"def getWaypoint(path: Vector[(Int, Int)], n: Int): (Int, Int) =\n  if (n < 0 || n >= path.length) throw new NoSuchElementException(\"Invalid waypoint index\")\n  path(n)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_708","timestamp":1745437006557,"code":"def updateBattery(battery: Double, used: Double): Double =\n  if (used > battery) throw new IllegalStateException(\"Insufficient battery\")\n  battery - used","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_709","timestamp":1745437006557,"code":"def parseCoordinates(coord: String): (Double, Double) =\n  val parts = coord.split(\",\")\n  if (parts.length != 2) throw new IllegalArgumentException(\"Invalid coordinate format\")\n  (parts(0).toDouble, parts(1).toDouble)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_710","timestamp":1745437006557,"code":"def selectOptimalRoute(routes: List[List[String]]): List[String] =\n  if (routes.forall(_.isEmpty)) throw new RuntimeException(\"All routes empty\")\n  routes.maxBy(_.length)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_711","timestamp":1745437006557,"code":"def safeDivide(a: Int, b: Int): Int =\n  if (b == 0) throw new ArithmeticException(\"Division by zero\")\n  a / b","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_712","timestamp":1745437006557,"code":"def checkHeight(height: Double): String =\n  if (height > 200) throw new IllegalArgumentException(\"Height exceeds limit\")\n  \"Height OK\"","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_713","timestamp":1745437006557,"code":"def refuelIfNeeded(level: Int): Int =\n  if (level < 10) throw new RuntimeException(\"Battery critically low\")\n  level","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_714","timestamp":1745437006557,"code":"def estimateArrival(speed: Double, distance: Double): Double =\n  if (speed <= 0) throw new IllegalArgumentException(\"Invalid speed\")\n  distance / speed","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_715","timestamp":1745437006557,"code":"def getDroneStatus(status: Option[String]): String =\n  if (status.isEmpty) throw new RuntimeException(\"No status found\")\n  status.get","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_716","timestamp":1745437006557,"code":"def calculateTurns(pathLength: Int, turnInterval: Int): Int =\n  if (turnInterval == 0) throw new IllegalArgumentException(\"Zero turn interval\")\n  pathLength / turnInterval","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_717","timestamp":1745437006557,"code":"def assignPackage(packages: Map[Int, String], pkgId: Int): String =\n  if (!packages.contains(pkgId)) throw new NoSuchElementException(\"Package not found\")\n  packages(pkgId)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_718","timestamp":1745437006557,"code":"def reserveAltitude(reserved: Set[Double], alt: Double): Double =\n  if (reserved.contains(alt)) throw new IllegalArgumentException(\"Altitude overlaps\")\n  alt","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_719","timestamp":1745437006557,"code":"def removeObstacle(obstacles: List[String], obs: String): List[String] =\n  if (!obstacles.contains(obs)) throw new NoSuchElementException(\"Obstacle not found\")\n  obstacles.filterNot(_ == obs)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_720","timestamp":1745437006557,"code":"def getDepot(depots: Seq[String]): String =\n  if (depots.isEmpty) throw new RuntimeException(\"No depots defined\")\n  depots.head","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_721","timestamp":1745437006557,"code":"def computeTurnAngle(angle: Double): Double =\n  if (angle.isNaN) throw new IllegalArgumentException(\"Angle is NaN\")\n  angle","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_722","timestamp":1745437027872,"code":"object ClaimAmountCalculator {\n  def calculateClaimAmount(total: Double, deductible: Double): Double = {\n    if (deductible <= 0) throw new IllegalArgumentException(\"Deductible must be positive!\")\n    total - deductible\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_723","timestamp":1745437027872,"code":"object ClaimTypeVerifier {\n  def verifyType(claimType: String): String = {\n    if (claimType == \"\") throw new RuntimeException(\"Claim type cannot be empty\")\n    claimType.toUpperCase\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_724","timestamp":1745437027872,"code":"object PolicyChecker {\n  def checkPolicy(id: Int): Boolean = {\n    if (id <= 0) throw new Exception(\"Invalid policy ID\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_725","timestamp":1745437027872,"code":"object UserAuthenticator {\n  def authenticateUser(username: String, password: String): String = {\n    if (username != \"admin\") throw new IllegalAccessException(\"User not found\")\n    \"Token123\"\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_726","timestamp":1745437027872,"code":"object ClaimSubmission {\n  def submit(claimId: String): String = {\n    if (claimId.isEmpty) throw new IllegalArgumentException(\"Claim ID is required\")\n    \"Claim Submitted\"\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_727","timestamp":1745437027872,"code":"object ItemValidator {\n  def validateItem(itemCode: Option[String]): String = {\n    if (itemCode.isEmpty) throw new NoSuchElementException(\"Invalid item code\")\n    itemCode.get\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_728","timestamp":1745437027872,"code":"object PaymentProcessor {\n  def processPayment(amount: Double): String = {\n    if (amount < 0) throw new Exception(\"Negative payment not allowed\")\n    \"Payment processed\"\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_729","timestamp":1745437027872,"code":"object DocumentationChecker {\n  def checkDocs(docs: List[String]): String = {\n    if (docs.isEmpty) throw new IllegalStateException(\"No documents uploaded\")\n    \"Documentation complete\"\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_730","timestamp":1745437027872,"code":"object ClaimDateValidator {\n  def validateDate(submitDate: String): Boolean = {\n    if (submitDate == null) throw new NullPointerException(\"Submit date cannot be null\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_731","timestamp":1745437027872,"code":"object AmountDivider {\n  def divideAmount(amount: Int, divisor: Int): Int = {\n    if (divisor == 0) throw new ArithmeticException(\"Cannot divide by zero\")\n    amount / divisor\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_732","timestamp":1745437027872,"code":"object ClaimantsChecker {\n  def getClaimant(claimants: List[String], n: Int): String = {\n    if (n >= claimants.length) throw new IndexOutOfBoundsException(\"Claimant index out of bounds\")\n    claimants(n)\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_733","timestamp":1745437027872,"code":"object EmailChecker {\n  def checkEmail(email: String): String = {\n    if (!email.contains(\"@\")) throw new IllegalArgumentException(\"Invalid email format\")\n    email\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_734","timestamp":1745437027872,"code":"object ReferenceNumberValidator {\n  def validateReference(ref: String): Int = {\n    if (ref.length != 8) throw new NumberFormatException(\"Reference must be 8 characters\")\n    ref.toInt\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_735","timestamp":1745437027872,"code":"object InsuranceAmountRetriever {\n  def retrieveAmount(payoutAmounts: Map[Int, Double], policyId: Int): Double = {\n    if (!payoutAmounts.contains(policyId)) throw new NoSuchElementException(\"Policy not found\")\n    payoutAmounts(policyId)\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_736","timestamp":1745437027872,"code":"object RiskCategoryChecker {\n  def getRisk(category: String): String = {\n    if (Set(\"Low\", \"Medium\", \"High\").contains(category)) category\n    else throw new Exception(\"Unknown risk category\")\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_737","timestamp":1745437027872,"code":"object FileUploadValidator {\n  def validateUpload(fileName: String): Boolean = {\n    if (fileName.endsWith(\".exe\")) throw new Exception(\"Executable files not allowed\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_738","timestamp":1745437027872,"code":"object PolicyActiveChecker {\n  def checkIfActive(isActive: Boolean): Unit = {\n    if (!isActive) throw new Exception(\"Policy not active\")\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_739","timestamp":1745437027872,"code":"object BenefitLimitChecker {\n  def checkLimit(used: Double, limit: Double): Double = {\n    if (used > limit) throw new Exception(\"Benefit limit exceeded\")\n    limit - used\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_740","timestamp":1745437027872,"code":"object AddressVerifier {\n  def verifyAddress(address: String): String = {\n    if (address.trim == \"\") throw new Exception(\"Address required\")\n    address\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_741","timestamp":1745437027872,"code":"object AgentLookup {\n  def findAgent(agents: List[String], name: String): Int = {\n    val idx = agents.indexOf(name)\n    if (idx == -1) throw new NoSuchElementException(\"Agent not found\")\n    idx\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_742","timestamp":1745437038575,"code":"def averageScore(scores: List[Int]): Double = {\n  if (scores.isEmpty) throw new IllegalArgumentException(\"No scores to average\")\n  scores.sum.toDouble / scores.size\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_743","timestamp":1745437038575,"code":"def getStudentById(id: String, students: Map[String, String]): String = {\n  students.getOrElse(id, throw new NoSuchElementException(\"Student not found\"))\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_744","timestamp":1745437038575,"code":"def calculateGrade(score: Int): String = {\n  if (score < 0 || score > 100) throw new IllegalArgumentException(\"Invalid score\")\n  if (score >= 90) \"A\"\n  else if (score >= 80) \"B\"\n  else if (score >= 70) \"C\"\n  else if (score >= 60) \"D\"\n  else \"F\"\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_745","timestamp":1745437038575,"code":"def attendancePercentage(totalClasses: Int, attended: Int): Double = {\n  if (totalClasses == 0) throw new ArithmeticException(\"No classes held\")\n  attended.toDouble / totalClasses * 100\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_746","timestamp":1745437038575,"code":"def timeSpentOnAssignment(times: List[Int]): Int = {\n  if(times.forall(_ == 0)) throw new IllegalArgumentException(\"No participation detected\")\n  times.sum\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_747","timestamp":1745437038575,"code":"def studentProgress(progress: Option[Double]): Double = {\n  progress.getOrElse(throw new Exception(\"No progress data\"))\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_748","timestamp":1745437038575,"code":"def fetchCourse(courseId: Int, courses: Map[Int,String]): String = {\n  courses.get(courseId) match {\n    case Some(c) => c\n    case None => throw new Exception(\"Course not found\")\n  }\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_749","timestamp":1745437038575,"code":"def assignmentsLeft(completed: Int, total: Int): Int = {\n  if (completed > total) throw new RuntimeException(\"Completed exceeds total assignments!\")\n  total - completed\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_750","timestamp":1745437038575,"code":"def engagementLevel(logins: Int): String = {\n  if (logins < 0) throw new IllegalArgumentException(\"Negative logins not possible\")\n  if (logins > 10) \"High\" else \"Low\"\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_751","timestamp":1745437038575,"code":"def fetchQuizScore(quizId: String, data: Map[String,Int]): Int = {\n  data.get(quizId).getOrElse(throw new Exception(\"Quiz not found\"))\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_752","timestamp":1745437038575,"code":"def calculateFinalGrade(grades: List[Int]): Double = {\n  if (grades.isEmpty) throw new Exception(\"No grades available\")\n  grades.sum.toDouble / grades.size\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_753","timestamp":1745437038575,"code":"def isPassed(score: Int, passing: Int): Boolean = {\n  if (score < 0) throw new IllegalArgumentException(\"Negative score!\")\n  score >= passing\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_754","timestamp":1745437038575,"code":"def moduleCompletion(status: String): Boolean = {\n  if (status != \"completed\" && status != \"incomplete\") throw new RuntimeException(\"Unknown module status\")\n  status == \"completed\"\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_755","timestamp":1745437038575,"code":"def fetchInstructor(name: String, instructors: List[String]): String = {\n  if (!instructors.contains(name)) throw new Exception(\"Instructor not found\")\n  name\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_756","timestamp":1745437038575,"code":"def analyzeInteraction(interactions: Int): String = {\n  if (interactions < 0) throw new IllegalArgumentException(\"Invalid interaction count\")\n  if (interactions > 20) \"Very Active\" else \"Less Active\"\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_757","timestamp":1745437038575,"code":"def questionAttempts(attempts: Int): Int = {\n  if (attempts > 3) throw new Exception(\"Maximum attempts exceeded\")\n  attempts\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_758","timestamp":1745437038575,"code":"def getAverageQuizTime(times: Seq[Int]): Double = {\n  if (times.isEmpty) throw new Exception(\"No quiz time data\")\n  times.sum.toDouble / times.size\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_759","timestamp":1745437038575,"code":"def retrieveLearningGoal(goalId: String, goals: Map[String, String]): String = {\n  goals.getOrElse(goalId, throw new NoSuchElementException(\"Goal not found\"))\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_760","timestamp":1745437038575,"code":"def peerReviewScore(scores: Seq[Int]): Int = {\n  if (scores.isEmpty) throw new Exception(\"No peer review scores\")\n  scores.sum / scores.size\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_761","timestamp":1745437038575,"code":"def submitAssignment(assignmentId: String, submitted: List[String]): Boolean = {\n  if (!submitted.contains(assignmentId)) throw new Exception(\"Assignment not submitted\")\n  true\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_762","timestamp":1745437038575,"code":"def validateSessionDuration(duration: Int): Unit = {\n  if (duration < 5) throw new IllegalArgumentException(\"Session too short\")\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_763","timestamp":1745437052171,"code":"def getRecipeById(id: Int): String =\n  if (id < 0) throw new IllegalArgumentException(\"Negative id\")\n  else \"Pizza\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_764","timestamp":1745437052171,"code":"def recommendRecipe(userId: String): String =\n  if (userId.isEmpty) throw new RuntimeException(\"Empty userId\")\n  else \"Pasta Carbonara\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_765","timestamp":1745437052171,"code":"def getUserPreferences(user: String): List[String] =\n  if (user == null) throw new NullPointerException(\"user is null\")\n  else List(\"vegan\", \"italian\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_766","timestamp":1745437052171,"code":"case class Recipe(name: String, ingredients: List[String])\ndef findRecipe(ingredient: String): Recipe =\n  if (!ingredient.forall(_.isLetter)) throw new Exception(\"Invalid ingredient\")\n  else Recipe(\"Salad\", List(ingredient))","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_767","timestamp":1745437052171,"code":"def calculateScore(likes: Int, dislikes: Int): Double =\n  if (dislikes == 0) throw new ArithmeticException(\"Division by zero\")\n  else likes.toDouble / dislikes","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_768","timestamp":1745437052171,"code":"def getFavoriteCuisine(userPrefs: List[String]): String =\n  if (userPrefs.isEmpty) throw new NoSuchElementException(\"No preferences found\")\n  else userPrefs.head","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_769","timestamp":1745437052171,"code":"def suggestHealthyOption(calories: Int): String =\n  if (calories < 0) throw new IllegalArgumentException(\"Negative calories\")\n  else if (calories < 300) \"Salad\"\n  else \"Chicken Wrap\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_770","timestamp":1745437052171,"code":"def fetchRecommendedRecipes(userId: Int): List[String] =\n  if (userId == 0) throw new Exception(\"User not found\")\n  else List(\"Tacos\", \"Ramen\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_771","timestamp":1745437052171,"code":"def getIngredientAmount(recipe: String, ingredient: String): Int =\n  if (recipe.isEmpty || ingredient.isEmpty) throw new IllegalArgumentException(\"Empty string input\")\n  else 2","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_772","timestamp":1745437052171,"code":"def logUserActivity(user: String, activity: String): Unit =\n  if (activity == null) throw new RuntimeException(\"Activity required\")\n  println(s\"User $user did $activity\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_773","timestamp":1745437052171,"code":"def parseRecipeJson(json: String): Recipe =\n  if (!json.startsWith(\"{\")) throw new Exception(\"Invalid JSON format\")\n  Recipe(\"Soup\", List(\"water\"))","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_774","timestamp":1745437052171,"code":"def recommendForDiet(dietType: String): String =\n  if (dietType != \"keto\" && dietType != \"vegan\") throw new Exception(\"Unknown diet type\")\n  else \"Grilled Vegetables\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_775","timestamp":1745437052171,"code":"def rateRecipe(rating: Int): String =\n  if (rating < 1 || rating > 5) throw new IllegalArgumentException(\"Rating must be 1-5\")\n  else \"Thank you for rating!\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_776","timestamp":1745437052171,"code":"def suggestNextMeal(time: String): String =\n  if (time != \"breakfast\" && time != \"lunch\" && time != \"dinner\") throw new Exception(\"Invalid meal time\")\n  else \"Sandwich\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_777","timestamp":1745437052171,"code":"def getAllergyInfo(user: String): String =\n  if (user == \"\") throw new RuntimeException(\"User is required\")\n  else \"No allergies reported\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_778","timestamp":1745437052171,"code":"def personalizeShoppingList(userPrefs: List[String]): List[String] =\n  if (userPrefs.contains(null)) throw new Exception(\"Null preference detected\")\n  else List(\"Tomatoes\", \"Rice\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_779","timestamp":1745437052171,"code":"def findRelatedRecipes(recipe: Recipe): List[Recipe] =\n  if (recipe == null) throw new NullPointerException(\"Recipe is null\")\n  else List(Recipe(\"Burger\", List(\"bun\", \"patty\")))","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_780","timestamp":1745437052171,"code":"def recommendForAllergies(allergies: Set[String]): String =\n  if (allergies.contains(\"peanut\")) throw new Exception(\"Cannot recommend due to peanut allergy\")\n  else \"Trail Mix\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_781","timestamp":1745437052171,"code":"def suggestPortionSize(age: Int): Int =\n  if (age <= 0) throw new IllegalArgumentException(\"Invalid age\")\n  else if (age < 12) 1 else 2","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_782","timestamp":1745437052171,"code":"def checkIngredientStock(ingredient: String, stock: Int): Unit =\n  if (stock < 0) throw new RuntimeException(\"Stock cannot be negative\")\n  println(s\"Stock for $ingredient: $stock\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_783","timestamp":1745437064617,"code":"def parseDonationAmount(input: String): Int =\n  if (input.forall(_.isDigit)) input.toInt\n  else throw new IllegalArgumentException(\"Invalid amount format\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_784","timestamp":1745437064617,"code":"def getDonorById(id: Long): String =\n  if (id > 0) s\"Donor-$id\"\n  else throw new NoSuchElementException(\"Donor not found\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_785","timestamp":1745437064617,"code":"class DonationForm(val name: String, val amount: Double)\ndef validateForm(form: DonationForm): Unit =\n  if (form.name.isEmpty || form.amount <= 0) throw new Exception(\"Invalid form data\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_786","timestamp":1745437064617,"code":"def assignGiftAid(donation: Double): Double =\n  if (donation <= 0) throw new RuntimeException(\"Donation must be positive\")\n  else donation * 1.25\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_787","timestamp":1745437064617,"code":"def findCharityByCode(code: String): String =\n  if (code.startsWith(\"CH_\")) code\n  else throw new Exception(\"Charity code invalid\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_788","timestamp":1745437064617,"code":"def getDonationHistory(userId: Int): List[Int] =\n  if (userId > 100) List(10, 20, 50)\n  else throw new Exception(\"No history for user\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_789","timestamp":1745437064617,"code":"def makePledge(userId: Int, amount: Int): String =\n  if (amount > 0) s\"Pledge of $$amount accepted\"\n  else throw new IllegalArgumentException(\"Invalid pledge amount\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_790","timestamp":1745437064617,"code":"def withdrawDonation(donationId: String): Boolean =\n  if (donationId.nonEmpty) true\n  else throw new Exception(\"Invalid donation ID\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_791","timestamp":1745437064617,"code":"def splitDonation(amount: Double, parts: Int): Double =\n  if (parts == 0) throw new ArithmeticException(\"Cannot split into zero parts\")\n  else amount / parts\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_792","timestamp":1745437064617,"code":"def getMatchFundingPercent(charity: String): Int =\n  if (charity == \"BigHeart\") 50\n  else throw new NoSuchElementException(\"Charity not in match program\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_793","timestamp":1745437064617,"code":"def verifyDonorEmail(email: String): Unit =\n  if (email.contains(\"@\")) ()\n  else throw new Exception(\"Malformed email address\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_794","timestamp":1745437064617,"code":"def fetchTopDonors(count: Int): List[String] =\n  if (count <= 0) throw new RuntimeException(\"Count must be positive\")\n  else List.fill(count)(\"DonorX\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_795","timestamp":1745437064617,"code":"def allocateDonation(amount: Double, charity: String): String =\n  if (amount < 1 || charity.isEmpty) throw new Exception(\"Allocation error\")\n  else s\"Allocated $$amount to $$charity\"\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_796","timestamp":1745437064617,"code":"def receiptForDonation(id: Long): String =\n  if (id == 42) \"Receipt-42\"\n  else throw new Exception(\"Receipt not found\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_797","timestamp":1745437064617,"code":"def declineDonation(reason: String): Nothing =\n  throw new Exception(\"Donation declined: \" + reason)\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_798","timestamp":1745437064617,"code":"def getCampaignStatus(campaign: String): String =\n  if (campaign == \"Spring2024\") \"open\"\n  else throw new IllegalArgumentException(\"Unknown campaign\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_799","timestamp":1745437064617,"code":"def validateBankAccount(account: String): Boolean =\n  if (account.length == 8) true\n  else throw new Exception(\"Invalid account number length\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_800","timestamp":1745437064617,"code":"def addCharityToPartnerList(name: String): Unit =\n  if (name.startsWith(\"Charity\")) ()\n  else throw new Exception(\"Not an approved partner\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_801","timestamp":1745437064617,"code":"def removeDonorIfExists(donor: String): Boolean =\n  if (donor == \"Donor1\") true\n  else throw new Exception(\"Donor does not exist\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_802","timestamp":1745437064617,"code":"def processRecurringDonation(userId: Int, period: String): String =\n  if (period == \"monthly\" || period == \"yearly\") \"Scheduled\"\n  else throw new Exception(\"Unsupported recurrence period\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_803","timestamp":1745437078135,"code":"def parseScore(score: String): Int =\n  if (score.matches(\"[0-9]+\")) score.toInt\n  else throw new IllegalArgumentException(\"Invalid score format\")\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_804","timestamp":1745437078135,"code":"def getTeamIndex(teams: List[String], name: String): Int =\n  teams.indexOf(name) match {\n    case -1 => throw new NoSuchElementException(\"Team not found\")\n    case idx => idx\n  }\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_805","timestamp":1745437078135,"code":"def updateScore(current: Int, delta: Int): Int =\n  if (delta == 0) throw new RuntimeException(\"No update to apply\")\n  else current + delta\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_806","timestamp":1745437078135,"code":"case class Game(teamA: String, teamB: String, scoreA: Int, scoreB: Int)\ndef winner(game: Game): String =\n  if (game.scoreA > game.scoreB) game.teamA\n  else if (game.scoreB > game.scoreA) game.teamB\n  else throw new Exception(\"It's a draw!\")\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_807","timestamp":1745437078135,"code":"def getLiveScore(gameId: Int, scores: Map[Int, Int]): Int =\n  scores.get(gameId).getOrElse(throw new NoSuchElementException(\"Game not live\"))\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_808","timestamp":1745437078135,"code":"def calculateAverage(scores: List[Int]): Double =\n  if (scores.isEmpty) throw new ArithmeticException(\"No scores to average\")\n  else scores.sum.toDouble / scores.size\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_809","timestamp":1745437078135,"code":"def setScore(gameId: Int, score: Int): Unit =\n  if (score < 0) throw new IllegalArgumentException(\"Negative score\")\n  else println(s\"Score set: $gameId -> $score\")\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_810","timestamp":1745437078135,"code":"def parseTeamName(name: String): String =\n  if (name.trim.isEmpty) throw new IllegalStateException(\"Blank team name\")\n  else name.trim\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_811","timestamp":1745437078135,"code":"def fetchScoreFromFeed(url: String): Int =\n  if (!url.startsWith(\"http\")) throw new RuntimeException(\"Invalid feed URL\")\n  else 45\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_812","timestamp":1745437078135,"code":"def removeGame(games: List[Int], id: Int): List[Int] =\n  if (!games.contains(id)) throw new Exception(\"Game ID not found in list\")\n  else games.filter(_ != id)\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_813","timestamp":1745437078135,"code":"def safeDivide(points: Int, divisor: Int): Int =\n  if (divisor == 0) throw new ArithmeticException(\"Cannot divide by zero during stats update\")\n  else points / divisor\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_814","timestamp":1745437078135,"code":"def readScoreInput(input: String): Int =\n  try input.toInt\n  catch { case _: NumberFormatException => throw new Exception(\"Score must be a number\") }\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_815","timestamp":1745437078135,"code":"def ensureLiveStatus(status: String): Unit =\n  if (status != \"live\") throw new Exception(\"Game is not live right now!\")\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_816","timestamp":1745437078135,"code":"def incrementGoal(score: Int): Int =\n  if (score >= 10) throw new RuntimeException(\"Max goals reached\")\n  else score + 1\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_817","timestamp":1745437078135,"code":"def getPlayerScore(players: Map[String, Int], player: String): Int =\n  players.getOrElse(player, throw new NoSuchElementException(\"Player not found in this match\"))\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_818","timestamp":1745437078135,"code":"def setHalf(half: Int): Unit =\n  if (half != 1 && half != 2) throw new IllegalArgumentException(\"Invalid half specified\")\n  else ()\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_819","timestamp":1745437078135,"code":"def updateLiveFeed(feed: Option[String]): String =\n  feed.getOrElse(throw new RuntimeException(\"No live feed available\"))\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_820","timestamp":1745437078135,"code":"def removeScore(scores: List[Int], score: Int): List[Int] =\n  if (!scores.contains(score)) throw new Exception(\"Score not found: nothing to remove\")\n  else scores.filterNot(_ == score)\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_821","timestamp":1745437078135,"code":"def recordRedCard(cards: Int): Int =\n  if (cards >= 5) throw new Exception(\"Card limit exceeded for match recording\")\n  else cards + 1\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_822","timestamp":1745437078135,"code":"def validateGoals(goals: Int): Int =\n  if (goals < 0) throw new RuntimeException(\"Goals cannot be negative\")\n  else goals\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_823","timestamp":1745437111100,"code":"def getCarByPlate(fleet: List[String], plate: String): String = {\n  val car = fleet.find(_ == plate)\n  if (car.isDefined) car.get\n  else throw new NoSuchElementException(\"Car not found\")\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_824","timestamp":1745437111100,"code":"def parseCarYear(yearStr: String): Int = {\n  try yearStr.toInt\n  catch { case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid year format\") }\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_825","timestamp":1745437111100,"code":"def rentCar(available: Boolean): String = {\n  if (available) \"Rented\"\n  else throw new RuntimeException(\"Car is not available\")\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_826","timestamp":1745437111100,"code":"def calculateRentalDays(start: Int, end: Int): Int = {\n  if (end >= start) end - start\n  else throw new IllegalArgumentException(\"End date before start date\")\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_827","timestamp":1745437111100,"code":"def getCustomerEmail(customers: Map[Int, String], id: Int): String = {\n  customers.get(id) match {\n    case Some(email) => email\n    case None => throw new Exception(\"Customer not found\")\n  }\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_828","timestamp":1745437111100,"code":"class Car(val model: String, val mileage: Int) {\n  def discountRate: Double = {\n    if (mileage < 0) throw new IllegalArgumentException(\"Negative mileage\")\n    else if (mileage > 100000) 0.10\n    else 0.05\n  }\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_829","timestamp":1745437111100,"code":"def removeCar(fleet: scala.collection.mutable.Set[String], plate: String): Unit = {\n  if (!fleet.contains(plate)) throw new NoSuchElementException(\"Car not in fleet\")\n  fleet.remove(plate)\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_830","timestamp":1745437111100,"code":"def getFleetSize(cars: List[String]): Int = {\n  if (cars.isEmpty) throw new Exception(\"No cars in fleet\")\n  cars.size\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_831","timestamp":1745437111100,"code":"def listRentedCars(rented: List[String]): List[String] = {\n  if (rented.isEmpty) throw new Exception(\"No cars currently rented\")\n  rented\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_832","timestamp":1745437111100,"code":"def updateMileage(mileage: Int, newMileage: Int): Int = {\n  if (newMileage < mileage) throw new IllegalArgumentException(\"New mileage less than current\")\n  newMileage\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_833","timestamp":1745437111100,"code":"def carCategory(code: String): String = code match {\n  case \"ECON\" => \"Economy\"\n  case \"SUV\" => \"SUV\"\n  case \"LUX\" => \"Luxury\"\n  case _ => throw new IllegalArgumentException(\"Unknown category\")\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_834","timestamp":1745437111100,"code":"def findCheapestCar(prices: Map[String, Double]): String = {\n  if (prices.isEmpty) throw new Exception(\"No cars to compare\")\n  prices.minBy(_._2)._1\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_835","timestamp":1745437111100,"code":"def reserveCar(reservations: Set[String], plate: String): String = {\n  if (reservations.contains(plate)) throw new Exception(\"Car already reserved\")\n  \"Reserved \" + plate\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_836","timestamp":1745437111100,"code":"def validateLicense(license: String): Boolean = {\n  if (license.isEmpty) throw new IllegalArgumentException(\"License required\")\n  true\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_837","timestamp":1745437111100,"code":"def getCarModel(fleet: Map[String, String], plate: String): String = {\n  fleet.get(plate).getOrElse(throw new NoSuchElementException(\"Plate not found\"))\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_838","timestamp":1745437111100,"code":"def calculateDailyRate(total: Double, days: Int): Double = {\n  if (days <= 0) throw new ArithmeticException(\"Days must be positive\")\n  total / days\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_839","timestamp":1745437111100,"code":"def applyDiscount(price: Double, percent: Double): Double = {\n  if (percent < 0 || percent > 100) throw new IllegalArgumentException(\"Invalid discount\")\n  price * (1 - percent / 100)\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_840","timestamp":1745437111100,"code":"def nextAvailableDate(bookedDates: List[Int]): Int = {\n  if (bookedDates.isEmpty) throw new Exception(\"No bookings found\")\n  bookedDates.max + 1\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_841","timestamp":1745437111100,"code":"def extendRental(current: Int, extension: Int): Int = {\n  if (extension < 0) throw new IllegalArgumentException(\"Invalid extension\")\n  current + extension\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_842","timestamp":1745437111100,"code":"def searchByModel(fleet: List[(String, String)], model: String): String = {\n  fleet.find(_._2 == model) match {\n    case Some((plate, _)) => plate\n    case None => throw new Exception(\"No car with specified model\")\n  }\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
