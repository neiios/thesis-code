{"id":"idiomatic_1","timestamp":1745438014894,"code":"case class Product(id: String, name: String, price: BigDecimal)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_2","timestamp":1745438014894,"code":"case class CartItem(product: Product, quantity: Int)\ncase class Cart(items: List[CartItem])","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_3","timestamp":1745438014894,"code":"def findProductById(id: String, catalog: List[Product]): Option[Product] =\n  catalog.find(_.id == id)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_4","timestamp":1745438014894,"code":"def discountCodeValue(code: Option[String]): BigDecimal =\n  code.map(_ => 10.00).getOrElse(0.00)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_5","timestamp":1745438014894,"code":"def parseQuantity(str: String): Either[String, Int] =\n  scala.util.Try(str.toInt).toEither.left.map(_ => \"Invalid quantity\")","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_6","timestamp":1745438014894,"code":"case class Address(street: String, city: String, zip: Option[String])","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_7","timestamp":1745438014894,"code":"def getShippingFee(zip: Option[String]): BigDecimal =\n  zip.map(_ => 4.99).getOrElse(9.99)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_8","timestamp":1745438014894,"code":"def paymentToken(token: Option[String]): Either[String, String] =\n  token.toRight(\"Payment token missing\")","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_9","timestamp":1745438014894,"code":"def applyDiscount(total: BigDecimal, discountCode: Option[String]): BigDecimal =\n  discountCode.map(_ => total * 0.9).getOrElse(total)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_10","timestamp":1745438014895,"code":"def safeDivide(a: BigDecimal, b: BigDecimal): Option[BigDecimal] =\n  if (b == 0) None else Some(a / b)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_11","timestamp":1745438014895,"code":"case class OrderSummary(orderId: String, total: BigDecimal, status: String)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_12","timestamp":1745438014895,"code":"case class PaymentInfo(method: String, accountId: String, cvv: Option[String])","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_13","timestamp":1745438014895,"code":"def getCartTotal(cart: Cart): BigDecimal =\n  cart.items.map(item => item.product.price * item.quantity).sum","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_14","timestamp":1745438014895,"code":"def validateAddress(address: Address): Either[String, Address] =\n  if (address.zip.exists(_.nonEmpty)) Right(address) else Left(\"ZIP code required\")","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_15","timestamp":1745438014895,"code":"def finalizeOrder(user: Option[String], cart: Cart): Either[String, OrderSummary] =\n  user match {\n    case Some(u) => Right(OrderSummary(orderId = u.take(5)+\"-\"+System.currentTimeMillis(), total = getCartTotal(cart), status = \"Pending\"))\n    case None => Left(\"User not logged in\")\n  }","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_16","timestamp":1745438014895,"code":"def parsePrice(s: String): scala.util.Try[BigDecimal] =\n  scala.util.Try(BigDecimal(s))","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_17","timestamp":1745438014895,"code":"case class Coupon(code: String, discount: Option[BigDecimal])","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_18","timestamp":1745438014895,"code":"def getCouponDiscount(coupon: Option[Coupon], cartTotal: BigDecimal): BigDecimal =\n  coupon.flatMap(_.discount).getOrElse(0.0)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_19","timestamp":1745438014895,"code":"def safeProductName(product: Option[Product]): String =\n  product.map(_.name).getOrElse(\"Unknown Product\")","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_20","timestamp":1745438014895,"code":"def parseCartItem(data: Map[String, String], catalog: List[Product]): Either[String, CartItem] =\n  for {\n    id <- data.get(\"productId\").toRight(\"productId missing\")\n    product <- findProductById(id, catalog).toRight(\"Product not found\")\n    quantityStr <- data.get(\"quantity\").toRight(\"quantity missing\")\n    quantity <- parseQuantity(quantityStr)\n  } yield CartItem(product, quantity)\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_21","timestamp":1745438033940,"code":"case class UserProfile(id: String, name: String, email: Option[String])\n\nval user1 = UserProfile(\"u1\", \"Alice\", Some(\"alice@bank.com\"))\nval user2 = UserProfile(\"u2\", \"Bob\", None)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_22","timestamp":1745438033940,"code":"def findAccount(accounts: List[Account], accountId: String): Option[Account] = {\n  accounts.find(_.id == accountId)\n}\n\ncase class Account(id: String, balance: BigDecimal)\nval maybeAcc = findAccount(List(Account(\"a1\", 100)), \"a2\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_23","timestamp":1745438033940,"code":"case class Transaction(id: String, amount: BigDecimal, description: Option[String])\n\nval t = Transaction(\"t1\", 200, None)\nval desc = t.description.getOrElse(\"No description provided.\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_24","timestamp":1745438033940,"code":"import scala.util.Try\n\ndef parseAmount(input: String): Try[BigDecimal] = Try(BigDecimal(input))\n\nval result = parseAmount(\"250.15\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_25","timestamp":1745438033940,"code":"import scala.util.Try\n\nval withdrawalResult = Try(100 / 0).recover {\n  case _: ArithmeticException => -1\n}","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_26","timestamp":1745438033940,"code":"case class CreditCard(number: String, expiry: String, cvv: Option[String])\nval ccInfo = CreditCard(\"1234567890123456\", \"12/25\", None)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_27","timestamp":1745438033940,"code":"def getAuthToken(headers: Map[String, String]): Option[String] = {\n  headers.get(\"Authorization\")\n}\nval token = getAuthToken(Map(\"User\" -> \"bob\"))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_28","timestamp":1745438033940,"code":"def mobileNumberVerified(num: Option[String]): String = num match {\n  case Some(n) => s\"Verified: $n\"\n  case None    => \"Mobile number not verified\"\n}\nval msg = mobileNumberVerified(None)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_29","timestamp":1745438033940,"code":"case class Transfer(from: String, to: String, amount: BigDecimal)\ndef transferFunds(t: Transfer): Either[String, String] = {\n  if (t.amount <= 0) Left(\"Amount must be positive\") else Right(\"Transfer complete\")\n}\nval r = transferFunds(Transfer(\"a\", \"b\", 0))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_30","timestamp":1745438033940,"code":"case class Beneficiary(account: String, nickname: Option[String])\nval ben = Beneficiary(\"54321\", Some(\"Savings account\"))\nval label = ben.nickname.fold(\"No nick\")(_ + \" ben\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_31","timestamp":1745438033940,"code":"def findSession(sessions: Map[String, String], sessionId: String): Option[String] = {\n  sessions.get(sessionId)\n}\nval value = findSession(Map(\"s1\" -> \"active\"), \"s2\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_32","timestamp":1745438033940,"code":"import scala.util.Try\n\ndef safeDivide(x: Int, y: Int): Try[Int] = Try(x / y)\nval res = safeDivide(10, 0).getOrElse(-1)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_33","timestamp":1745438033940,"code":"case class DeviceInfo(id: String, osVersion: String, pushToken: Option[String])\nval info = DeviceInfo(\"dev1\", \"iOS 16\", None)\nval hasPush = info.pushToken.isDefined","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_34","timestamp":1745438033940,"code":"case class Balance(amount: BigDecimal)\ndef showBalance(b: Option[Balance]): String = b match {\n  case Some(balance) => s\"$${balance.amount}\"\n  case None => \"Unavailable\"\n}\nval sb = showBalance(None)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_35","timestamp":1745438033940,"code":"case class ScheduledPayment(id: String, date: String, amount: BigDecimal, note: Option[String])\nval sp = ScheduledPayment(\"pid\", \"2024-12-01\", 50, Some(\"Rent\"))\nval noteMsg = sp.note.getOrElse(\"No note\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_36","timestamp":1745438033940,"code":"def updateEmail(profile: UserProfile, email: Option[String]): UserProfile = {\n  profile.copy(email = email)\n}\nval updated = updateEmail(UserProfile(\"u1\", \"Alice\", None), Some(\"alice@bank.com\"))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_37","timestamp":1745438033940,"code":"def parseIntOpt(s: String): Option[Int] = scala.util.Try(s.toInt).toOption\nval age = parseIntOpt(\"thirty\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_38","timestamp":1745438033940,"code":"case class Notification(id: String, msg: String, read: Boolean)\ndef unread(notifs: List[Notification]): List[Notification] = notifs.filterNot(_.read)\nval unreadList = unread(List(Notification(\"1\", \"Welcome!\", false)))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_39","timestamp":1745438033940,"code":"case class SecurityQuestion(question: String, answer: String)\ndef verifyAnswer(q: SecurityQuestion, input: String): Either[String, Boolean] = {\n  if (input == q.answer) Right(true) else Left(\"Incorrect answer\")\n}\nval checked = verifyAnswer(SecurityQuestion(\"Pet?\", \"dog\"), \"cat\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_40","timestamp":1745438033940,"code":"def lookupTransaction(transactions: Map[String, Transaction], id: String): Option[Transaction] = {\n  transactions.get(id)\n}\nval tx = lookupTransaction(Map(\"t1\" -> Transaction(\"t1\", 10, None)), \"t2\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_41","timestamp":1745438048070,"code":"case class Patient(id: String, name: String, email: Option[String])\nval john = Patient(\"p01\", \"John Smith\", Some(\"john@telemed.com\"))\nval jane = Patient(\"p02\", \"Jane Doe\", None)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_42","timestamp":1745438048070,"code":"case class Appointment(id: String, patientId: String, doctorId: String, dateTime: String)\nval appt = Appointment(\"a01\", \"p01\", \"d01\", \"2024-07-05T10:00\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_43","timestamp":1745438048070,"code":"def findPatientEmail(p: Patient): String =\n  p.email.getOrElse(\"Email not provided\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_44","timestamp":1745438048070,"code":"import scala.util.Try\ndef parseDateTime(s: String): Try[java.time.LocalDateTime] =\n  Try(java.time.LocalDateTime.parse(s))","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_45","timestamp":1745438048070,"code":"case class Doctor(id: String, name: String, telemedicineAvailable: Boolean)\nval drSmith = Doctor(\"d01\", \"Dr. Smith\", true)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_46","timestamp":1745438048070,"code":"def scheduleAppointment(patient: Patient, doctor: Doctor, dateTime: String): Either[String, Appointment] =\n  if (!doctor.telemedicineAvailable) Left(\"Doctor unavailable for telemedicine.\")\n  else Right(Appointment(\"a02\", patient.id, doctor.id, dateTime))","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_47","timestamp":1745438048070,"code":"def getDoctorById(id: String): Option[Doctor] =\n  if (id == \"d01\") Some(drSmith) else None","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_48","timestamp":1745438048070,"code":"val docOpt: Option[Doctor] = getDoctorById(\"d99\")\nval docName = docOpt.map(_.name).getOrElse(\"Unknown Doctor\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_49","timestamp":1745438048070,"code":"def appointmentConfirmation(appt: Option[Appointment]): String = appt match {\n  case Some(a) => s\"Appointment scheduled: ${a.id}\"\n  case None => \"No appointment scheduled.\"\n}","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_50","timestamp":1745438048070,"code":"import scala.util.Try\nval maybeAppt = Try(Appointment(\"a03\", \"p03\", \"d02\", \"invalid-date\"))\nval apptResult = maybeAppt.toOption","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_51","timestamp":1745438048070,"code":"case class TimeSlot(start: String, end: String)\ndef findAvailableSlot(slots: List[TimeSlot]): Option[TimeSlot] =\n  slots.headOption","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_52","timestamp":1745438048070,"code":"val patients = List(john, jane)\nval emails = patients.flatMap(_.email)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_53","timestamp":1745438048070,"code":"def cancelAppointment(appt: Option[Appointment]): Either[String, String] =\n  appt.toRight(\"Appointment does not exist\").map(a => s\"Cancelled ${a.id}\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_54","timestamp":1745438048070,"code":"case class VideoSession(url: String, token: String)\ndef createSession(appt: Appointment): Either[String, VideoSession] =\n  if (appt.dateTime.nonEmpty) Right(VideoSession(\"https://video.com/room\", \"tok123\"))\n  else Left(\"Missing appointment time.\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_55","timestamp":1745438048070,"code":"def safeEmailUpper(p: Patient): Option[String] =\n  p.email.map(_.toUpperCase)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_56","timestamp":1745438048070,"code":"case class SchedulerState(appointments: List[Appointment])\ndef addAppointment(state: SchedulerState, appt: Appointment): SchedulerState =\n  state.copy(appointments = appt :: state.appointments)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_57","timestamp":1745438048070,"code":"case class AppointmentRequest(patientId: String, preferredTime: Option[String])\ndef bestEffortSchedule(req: AppointmentRequest): Option[Appointment] =\n  req.preferredTime.map(t => Appointment(\"a12\", req.patientId, \"d10\", t))","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_58","timestamp":1745438048070,"code":"import scala.util.Try\ndef parseAndSchedule(dateStr: String, patient: Patient, doctor: Doctor): Try[Appointment] =\n  Try(java.time.LocalDateTime.parse(dateStr)).map(_ => Appointment(\"a20\", patient.id, doctor.id, dateStr))","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_59","timestamp":1745438048070,"code":"def notifyPatient(p: Patient, msg: String): Option[String] =\n  p.email.map(e => s\"Send to $e: $msg\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_60","timestamp":1745438048070,"code":"case class AppointmentSummary(appointment: Appointment, videoSession: Option[VideoSession])\ndef summarize(appt: Appointment, session: Either[String, VideoSession]): AppointmentSummary =\n  AppointmentSummary(appt, session.toOption)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_61","timestamp":1745438082894,"code":"case class StepData(userId: String, steps: Int, date: String)\nval todayData = StepData(\"u123\", 12000, \"2024-01-14\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_62","timestamp":1745438082894,"code":"case class HeartRate(value: Int)\ndef safeHeartRate(input: String): Option[HeartRate] =\n  input.toIntOption.map(HeartRate(_))\nsafeHeartRate(\"85\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_63","timestamp":1745438082894,"code":"case class SleepRecord(hours: Int)\ndef classifySleep(record: Option[SleepRecord]) =\n  record.map(r => if (r.hours >= 8) \"good\" else \"poor\")\n    .getOrElse(\"unknown\")\nclassifySleep(Some(SleepRecord(7)))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_64","timestamp":1745438082894,"code":"import scala.util.Try\ncase class CaloriesBurned(amount: Double)\ndef parseCalories(str: String): Try[CaloriesBurned] =\n  Try(CaloriesBurned(str.toDouble))\nparseCalories(\"234.5\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_65","timestamp":1745438082894,"code":"case class GPSTrack(points: List[(Double, Double)])\ndef totalDistance(track: Option[GPSTrack]) =\n  track.map(_.points.size - 1).getOrElse(0)\ntotalDistance(None)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_66","timestamp":1745438082894,"code":"case class Workout(session: String, duration: Int)\nval maybeWorkout: Option[Workout] = None\nmaybeWorkout.fold(\"No data available\")(_.session)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_67","timestamp":1745438082894,"code":"case class UserProfile(id: String, nickname: Option[String])\nval user = UserProfile(\"u567\", None)\nuser.nickname.getOrElse(\"Guest\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_68","timestamp":1745438082894,"code":"case class ZoneMinutes(cardio: Int, fatBurn: Int)\ndef totalZoneMinutes(zone: ZoneMinutes): Int =\n  zone.cardio + zone.fatBurn\ntotalZoneMinutes(ZoneMinutes(20, 30))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_69","timestamp":1745438082895,"code":"import scala.util.Try\ncase class Activity(name: String, calories: Int)\ndef safeActivity(line: String): Either[String, Activity] = {\n  val parts = line.split(\",\")\n  if (parts.length != 2) Left(\"Invalid format\")\n  else Try(parts(1).trim.toInt).toOption match {\n    case Some(cals) => Right(Activity(parts(0).trim, cals))\n    case None => Left(\"Calories not a number\")\n  }\n}\nsafeActivity(\"Cycling, 320\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_70","timestamp":1745438082895,"code":"case class WaterIntake(ml: Int, date: String)\ndef status(water: Option[WaterIntake]) =\n  water match {\n    case Some(WaterIntake(ml, _)) if ml >= 2000 => \"sufficient\"\n    case Some(_) => \"insufficient\"\n    case None => \"missing\"\n  }\nstatus(Some(WaterIntake(1500, \"2024-01-14\")))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_71","timestamp":1745438082895,"code":"case class Session(date: String, calories: Option[Double])\ndef averageCalories(sessions: List[Session]): Double =\n  val total = sessions.flatMap(_.calories).sum\n  val count = sessions.count(_.calories.isDefined)\n  if (count == 0) 0.0 else total / count\naverageCalories(List(Session(\"2024-01-14\", Some(230)), Session(\"2024-01-15\", None)))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_72","timestamp":1745438082895,"code":"case class StepGoal(goal: Int)\ndef achieved(goal: Option[StepGoal], actual: Int) =\n  goal.exists(_.goal <= actual)\nachieved(Some(StepGoal(10000)), 12000)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_73","timestamp":1745438082895,"code":"import scala.util.Try\ncase class WeightEntry(weight: Double)\ndef safeWeight(str: String): Try[WeightEntry] =\n  Try(str.toDouble).map(WeightEntry(_))\nsafeWeight(\"72.5\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_74","timestamp":1745438082895,"code":"case class HeartRateZone(userId: String, zone: Option[String])\nval z = HeartRateZone(\"u001\", Some(\"Cardio\"))\nz.zone.fold(\"unknown\")(_.toLowerCase)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_75","timestamp":1745438082895,"code":"case class WorkoutSummary(typeName: String, distanceKm: Option[Double])\ndef showDistance(ws: WorkoutSummary) =\n  ws.distanceKm.map(d => f\"$d%.1f km\").getOrElse(\"n/a\")\nshowDistance(WorkoutSummary(\"run\", None))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_76","timestamp":1745438082895,"code":"case class Badge(name: String)\ndef firstBadge(badges: List[Badge]): Option[Badge] =\n  badges.headOption\nfirstBadge(Nil)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_77","timestamp":1745438082895,"code":"case class ElevationGain(meters: Int)\nval maybeElev = Some(ElevationGain(210))\nmaybeElev match {\n  case Some(ElevationGain(m)) if m > 200 => \"steep\"\n  case Some(_) => \"normal\"\n  case None => \"unknown\"\n}","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_78","timestamp":1745438082895,"code":"case class MoodEntry(level: Option[Int], date: String)\ndef positiveMood(entry: MoodEntry) =\n  entry.level.contains(5)\npositiveMood(MoodEntry(Some(5), \"2024-01-14\"))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_79","timestamp":1745438082895,"code":"import scala.util.Try\ncase class ActiveMinutes(minutes: Int)\ndef parseActiveMinutes(str: String): Either[String, ActiveMinutes] =\n  Try(str.toInt).toOption match {\n    case Some(mins) => Right(ActiveMinutes(mins))\n    case None => Left(\"Invalid minutes\")\n  }\nparseActiveMinutes(\"notANumber\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_80","timestamp":1745438082895,"code":"case class Device(user: String, deviceId: Option[String])\ndef deviceAssigned(d: Device) =\n  d.deviceId.isDefined\ndeviceAssigned(Device(\"user1\", None))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_81","timestamp":1745438082895,"code":"case class BodyFat(percent: Double)\ndef safeFat(p: Any): Option[BodyFat] =\n  p match {\n    case d: Double => Some(BodyFat(d))\n    case _ => None\n  }\nsafeFat(18.0)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_82","timestamp":1745438099091,"code":"case class PricingPlan(id: String, name: String, price: BigDecimal)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_83","timestamp":1745438099091,"code":"case class PlanFeature(planId: String, feature: String)\nval feature: Option[PlanFeature] = None\nfeature.map(_.feature).getOrElse(\"No feature\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_84","timestamp":1745438099091,"code":"def findPlan(plans: List[PricingPlan], id: String): Option[PricingPlan] =\n  plans.find(_.id == id)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_85","timestamp":1745438099091,"code":"val trialDays: Option[Int] = Some(14)\nval days = trialDays.getOrElse(0)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_86","timestamp":1745438099091,"code":"def parsePrice(s: String): Either[String, BigDecimal] =\n  try Right(BigDecimal(s))\n  catch { case _: NumberFormatException => Left(\"Invalid price\") }","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_87","timestamp":1745438099091,"code":"case class UserPlan(userId: String, plan: PricingPlan)\ndef assignPlan(userId: String, planOpt: Option[PricingPlan]): Option[UserPlan] =\n  planOpt.map(plan => UserPlan(userId, plan))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_88","timestamp":1745438099091,"code":"import scala.util.Try\ncase class PlanDuration(months: Int)\ndef safeDuration(s: String): Option[PlanDuration] =\n  Try(PlanDuration(s.toInt)).toOption","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_89","timestamp":1745438099091,"code":"import scala.util.Try\nval maybePlan: Option[PricingPlan] = None\nval planName: String = maybePlan.map(_.name).getOrElse(\"Default Plan\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_90","timestamp":1745438099091,"code":"case class PlanUpdate(id: String, newPrice: Option[BigDecimal])\ndef updatePrice(plan: PricingPlan, update: PlanUpdate): PricingPlan =\n  plan.copy(price = update.newPrice.getOrElse(plan.price))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_91","timestamp":1745438099091,"code":"val plans: List[PricingPlan] = List(PricingPlan(\"b\",\"Basic\",5), PricingPlan(\"p\",\"Pro\",10))\ndef cheapestPlan(plans: List[PricingPlan]): Option[PricingPlan] =\n  plans.sortBy(_.price).headOption","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_92","timestamp":1745438099091,"code":"case class PlanDiscount(code: String, percent: Int)\ndef discountAmount(plan: PricingPlan, discount: Option[PlanDiscount]): BigDecimal =\n  discount.map(d => plan.price * (d.percent / 100.0)).getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_93","timestamp":1745438099091,"code":"import scala.util.Try\ndef parsePlan(json: String): Try[PricingPlan] =\n  Try { PricingPlan(json, \"Parsed Plan\", 99) }","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_94","timestamp":1745438099091,"code":"case class PlanStatus(isActive: Boolean, expiresOn: Option[String])\nval expiresLabel = PlanStatus(true, None).expiresOn.getOrElse(\"No expiration\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_95","timestamp":1745438099091,"code":"val maybePrice: Option[String] = Some(\"19.99\")\nval price: Either[String, BigDecimal] =\n  maybePrice.toRight(\"No price set\").flatMap(s =>\n    Try(BigDecimal(s)).toEither.left.map(_ => \"Invalid price\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_96","timestamp":1745438099091,"code":"case class PlanMigration(oldId: String, newId: String)\ndef migrate(plan: Option[PricingPlan], migration: PlanMigration): Option[PricingPlan] =\n  plan.map(p => p.copy(id = migration.newId))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_97","timestamp":1745438099091,"code":"def addFeatureToPlan(plan: PricingPlan, featureOpt: Option[String]): Either[String, PlanFeature] =\n  featureOpt.map(f => Right(PlanFeature(plan.id, f))).getOrElse(Left(\"Missing feature\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_98","timestamp":1745438099091,"code":"val planIds: List[String] = List(\"a1\", \"b2\")\ndef findFirstPlan(plans: List[PricingPlan], ids: List[String]): Option[PricingPlan] =\n  ids.flatMap(id => plans.find(_.id == id)).headOption","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_99","timestamp":1745438099091,"code":"case class PlanLimits(planId: String, maxUsers: Option[Int])\ndef userLimit(plan: PlanLimits): Int = plan.maxUsers.getOrElse(1)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_100","timestamp":1745438099092,"code":"import scala.util.Try\ndef priceWithTax(plan: PricingPlan, taxPct: Option[Int]): Try[BigDecimal] =\n  Try(taxPct.getOrElse(0)).map(tax => plan.price * (1 + tax / 100.0))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_101","timestamp":1745438099092,"code":"def safeGetPlanName(planOpt: Option[PricingPlan]): String =\n  planOpt.fold(\"Unknown Plan\")(_.name)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_102","timestamp":1745438111967,"code":"case class Light(id: String, isOn: Boolean)\nval livingRoomLight = Light(\"living-room\", isOn = false)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_103","timestamp":1745438111968,"code":"case class Thermostat(location: String, currentTemp: Double, targetTemp: Double)\nval t = Thermostat(\"kitchen\", 20.5, 22.0)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_104","timestamp":1745438111968,"code":"def findDeviceById(id: String): Option[String] =\n  if (id == \"living-room\") Some(\"Light\") else None\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_105","timestamp":1745438111968,"code":"def getTemperatureReading(sensorId: String): Option[Double] =\n  if (sensorId == \"sensor-1\") Some(21.3) else None\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_106","timestamp":1745438111968,"code":"val maybeTemp: Option[Double] = getTemperatureReading(\"sensor-2\")\nval actualTemp = maybeTemp.getOrElse(0.0)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_107","timestamp":1745438111968,"code":"val maybeDevice: Option[String] = findDeviceById(\"bedroom\")\nmaybeDevice match {\n  case Some(device) => device.toUpperCase\n  case None => \"Unknown Device\"\n}\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_108","timestamp":1745438111968,"code":"import scala.util.Try\ndef parseTemperature(input: String): Try[Double] = Try(input.toDouble)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_109","timestamp":1745438111968,"code":"import scala.util.Try\nval tempTry = parseTemperature(\"invalid\")\nval result = tempTry.getOrElse(18.0)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_110","timestamp":1745438111968,"code":"case class DeviceStatus(id: String, status: String)\nval status = DeviceStatus(\"sensor-1\", \"active\")\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_111","timestamp":1745438111968,"code":"case class SmartPlug(id: String, isOn: Boolean)\nval plugs: List[SmartPlug] = List(SmartPlug(\"plug1\", false), SmartPlug(\"plug2\", true))\nval allOn = plugs.forall(_.isOn)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_112","timestamp":1745438111968,"code":"def adjustBrightness(deviceId: String, value: Int): Either[String, Int] =\n  if (value >= 0 && value <= 100) Right(value)\n  else Left(s\"Invalid brightness $value for $deviceId\")\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_113","timestamp":1745438111968,"code":"val brightnessResult = adjustBrightness(\"lamp1\", 150)\nval brightValue = brightnessResult.getOrElse(50)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_114","timestamp":1745438111968,"code":"case class MotionSensor(id: String, lastMotion: Option[Long])\nval motion = MotionSensor(\"front-door\", None)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_115","timestamp":1745438111968,"code":"case class DoorLock(id: String, isLocked: Boolean)\ndef maybeUnlock(lock: DoorLock): Option[DoorLock] =\n  if (lock.isLocked) Some(lock.copy(isLocked = false)) else None\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_116","timestamp":1745438111968,"code":"def setTargetTemperature(deviceId: String, value: Double): Either[String, Double] = {\n  if (value >= 15.0 && value <= 25.0) Right(value)\n  else Left(s\"Temperature $value out of range for $deviceId\")\n}\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_117","timestamp":1745438111968,"code":"import scala.util.Try\ndef safeToggle(dev: Option[SmartPlug]): Try[SmartPlug] = Try(dev.map(p => p.copy(isOn = !p.isOn)).get)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_118","timestamp":1745438111968,"code":"case class Room(name: String, devices: List[String])\nval rooms = List(Room(\"Bedroom\", List(\"Light\", \"Plug\")), Room(\"Hall\", Nil))\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_119","timestamp":1745438111968,"code":"def findTargetTemp(thermo: Thermostat): Option[Double] =\n  if (thermo.targetTemp > 0) Some(thermo.targetTemp) else None\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_120","timestamp":1745438111968,"code":"case class Scene(name: String, actions: List[String])\nval eveningScene = Scene(\"Evening\", List(\"dim-lights\", \"lock-door\"))\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_121","timestamp":1745438111968,"code":"def setDeviceStatus(id: String, status: Option[String]): String = status match {\n  case Some(s) => s\"Device $id set to $s\"\n  case None => s\"No status provided for $id\"\n}\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_122","timestamp":1745438124562,"code":"case class Rider(id: String, location: String)\ncase class Driver(id: String, available: Boolean)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_123","timestamp":1745438124562,"code":"def findRider(riders: List[Rider], riderId: String): Option[Rider] =\n  riders.find(_.id == riderId)\n\ndef getRiderLocation(riderOpt: Option[Rider]): String =\n  riderOpt.map(_.location).getOrElse(\"Unknown\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_124","timestamp":1745438124562,"code":"case class RideRequest(rider: Rider, pickup: String, destination: String)\ndef isPickupValid(request: RideRequest): Boolean = request.pickup.nonEmpty","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_125","timestamp":1745438124562,"code":"case class DispatchResult(driver: Driver, estimatedArrival: Int)\ndef safeDispatch(rider: Rider, drivers: List[Driver]): Option[DispatchResult] =\n  drivers.find(_.available).map(d => DispatchResult(d, 5))","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_126","timestamp":1745438124562,"code":"import scala.util.Try\n\ndef parseDistance(str: String): Try[Int] = Try(str.toInt)\nval maybeDistance = parseDistance(\"15\").getOrElse(0)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_127","timestamp":1745438124562,"code":"case class MatchmakingError(reason: String)\ndef assignDriver(rider: Rider, drivers: List[Driver]): Either[MatchmakingError, Driver] =\n  drivers.find(_.available).toRight(MatchmakingError(\"No available drivers\"))","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_128","timestamp":1745438124562,"code":"case class Route(pickup: String, dropoff: String, distanceKm: Int)\nval maybeRoute: Option[Route] = Some(Route(\"A\", \"B\", 12))\nval dropoff = maybeRoute.map(_.dropoff).getOrElse(\"Unknown\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_129","timestamp":1745438124562,"code":"def estimateFare(distanceKm: Int): Either[String, Double] =\n  if (distanceKm < 0) Left(\"Distance cannot be negative\")\n  else Right(distanceKm * 1.25)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_130","timestamp":1745438124562,"code":"case class Vehicle(plate: String, capacity: Int)\ndef vehicleCapacity(vehicleOpt: Option[Vehicle]): Int =\n  vehicleOpt.map(_.capacity).getOrElse(0)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_131","timestamp":1745438124562,"code":"import scala.util.{Try, Success, Failure}\ndef parseFare(input: String): Try[Double] = Try(input.toDouble)\nparseFare(\"9.75\") match {\n  case Success(v) => v\n  case Failure(_) => 0.0\n}","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_132","timestamp":1745438124562,"code":"case class Ride(id: String, rider: Rider, driver: Option[Driver])\ndef isAssigned(ride: Ride): Boolean = ride.driver.isDefined","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_133","timestamp":1745438124562,"code":"def findNearestDriver(riderLoc: String, drivers: List[Driver]): Option[Driver] =\n  drivers.filter(_.available).headOption","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_134","timestamp":1745438124562,"code":"def getDropoffTime(eta: Option[Int]): Int = eta.getOrElse(30)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_135","timestamp":1745438124562,"code":"case class Feedback(score: Int, comment: Option[String])\ndef printComment(f: Feedback): String =\n  f.comment.getOrElse(\"No comment provided\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_136","timestamp":1745438124562,"code":"case class RideStatus(id: String, status: String)\ndef updateStatus(status: Option[RideStatus]): String =\n  status.map(_.status).getOrElse(\"Unknown\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_137","timestamp":1745438124562,"code":"def parseCoordinates(coord: String): Either[String, (Double, Double)] =\n  coord.split(\",\") match {\n    case Array(lat, lon) =>\n      Try((lat.toDouble, lon.toDouble)).toEither.left.map(_ => \"Invalid number format\")\n    case _ => Left(\"Invalid coordinate format\")\n  }","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_138","timestamp":1745438124562,"code":"case class Payment(amount: Double, method: Option[String])\ndef getPaymentMethod(payment: Payment): String = payment.method.getOrElse(\"cash\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_139","timestamp":1745438124562,"code":"def safeFareCalculation(distance: Option[Int]): Either[String, Double] =\n  distance.map(d => if (d < 0) Left(\"Invalid distance\") else Right(d * 1.15)).getOrElse(Left(\"Distance not provided\"))","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_140","timestamp":1745438124562,"code":"case class Surge(zone: String, multiplier: Double)\ndef applySurge(fare: Double, surgeOpt: Option[Surge]): Double =\n  surgeOpt.map(s => fare * s.multiplier).getOrElse(fare)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_141","timestamp":1745438124562,"code":"import scala.util.Try\ndef safeAssignRating(input: String): Option[Int] =\n  Try(input.toInt).toOption.filter(r => r >= 1 && r <= 5)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_142","timestamp":1745438142031,"code":"case class Passenger(name: String, passportNumber: String)\n\nval passenger = Passenger(\"Alice Smith\", \"P12345\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_143","timestamp":1745438142031,"code":"case class Ticket(id: String, flightNumber: String, passenger: Option[Passenger])\n\nval emptyTicket = Ticket(\"T001\", \"F1234\", None)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_144","timestamp":1745438142031,"code":"val seatMap: Map[Int, Option[String]] = Map(1 -> Some(\"Alice\"), 2 -> None)\nval seat1 = seatMap.get(1).flatten.getOrElse(\"Seat unassigned\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_145","timestamp":1745438142031,"code":"def findTicketById(id: String, tickets: List[Ticket]): Option[Ticket] =\n  tickets.find(_.id == id)\n\nval found = findTicketById(\"T002\", List())","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_146","timestamp":1745438142031,"code":"case class Flight(number: String, origin: String, destination: String)\n\nval flight = Flight(\"F001\", \"JFK\", \"LHR\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_147","timestamp":1745438142031,"code":"import scala.util.Try\n\ndef parsePrice(input: String): Try[Double] = Try(input.toDouble)\n\nval result = parsePrice(\"199.99\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_148","timestamp":1745438142031,"code":"def getPassengerName(ticket: Ticket): String =\n  ticket.passenger.map(_.name).getOrElse(\"Unknown Passenger\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_149","timestamp":1745438142031,"code":"case class Booking(ticket: Ticket, seat: Option[String])\nval booking = Booking(Ticket(\"T001\", \"FL100\", None), Some(\"12A\"))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_150","timestamp":1745438142031,"code":"def safeSeatAllocation(seatNumber: Int): Either[String, Int] =\n  if (seatNumber > 0 && seatNumber <= 150) Right(seatNumber) else Left(\"Invalid seat number\")\n\nval seatStatus = safeSeatAllocation(151)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_151","timestamp":1745438142031,"code":"def upgradePassenger(passenger: Option[Passenger]): Option[Passenger] =\n  passenger.map(p => p.copy(name = s\"VIP ${p.name}\"))\n\nval upgraded = upgradePassenger(Some(Passenger(\"Bob\", \"P54321\")))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_152","timestamp":1745438142031,"code":"val maybeEmail: Option[String] = Some(\"alice@example.com\")\nval emailDomain = maybeEmail.map(_.split(\"@\").last).getOrElse(\"Domain Unknown\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_153","timestamp":1745438142031,"code":"import scala.util.Try\n\ndef parseFlightNumber(s: String): Either[String, Int] =\n  Try(s.drop(1).toInt).toEither.left.map(_ => \"Invalid flight number\")\n\nval flightNum = parseFlightNumber(\"F1234\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_154","timestamp":1745438142031,"code":"case class Aircraft(model: String, capacity: Int)\nval aircrafts = List(Aircraft(\"A320\", 180), Aircraft(\"B737\", 160))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_155","timestamp":1745438142031,"code":"def seatAvailable(seats: Map[String, Boolean], seat: String): Option[Boolean] =\n  seats.get(seat)\n\nval seats = Map(\"12A\" -> true, \"12B\" -> false)\nval available = seatAvailable(seats, \"12A\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_156","timestamp":1745438142031,"code":"case class Payment(cardNumber: String, amount: Double)\ndef processPayment(payment: Payment): Either[String, Payment] =\n  if (payment.amount > 0) Right(payment) else Left(\"Payment amount must be positive\")\n\nval paymentStatus = processPayment(Payment(\"4111\", 0.0))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_157","timestamp":1745438142031,"code":"val passengerList: List[Option[Passenger]] = List(Some(Passenger(\"Anna\", \"X1\")), None)\nval names = passengerList.flatMap(_.map(_.name))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_158","timestamp":1745438142031,"code":"case class Baggage(weight: Double)\ndef checkOverweight(bag: Baggage, maxAllowed: Double): Option[String] =\n  if (bag.weight > maxAllowed) Some(\"Overweight\") else None\n\nval status = checkOverweight(Baggage(31.0), 30.0)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_159","timestamp":1745438142031,"code":"import scala.util.Try\n\ndef issueTicket(flight: Flight, name: String): Try[Ticket] =\n  Try(Ticket(java.util.UUID.randomUUID().toString, flight.number, Some(Passenger(name, \"P\"+name.hashCode))))\n\nval tryTicket = issueTicket(Flight(\"F99\", \"MUC\", \"ROM\"), \"Omar\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_160","timestamp":1745438142031,"code":"case class CheckIn(ticket: Ticket, baggage: Option[Baggage])\ndef checkInStatus(checkIn: CheckIn): String =\n  checkIn.baggage match {\n    case Some(b) if b.weight > 20.0 => \"Extra fee applies\"\n    case Some(_) => \"Checked in\"\n    case None => \"No baggage\"\n  }\nval statusChecked = checkInStatus(CheckIn(Ticket(\"T2\",\"F2\",None),Some(Baggage(22))))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_161","timestamp":1745438142031,"code":"def lookupMealPreference(passenger: Option[Passenger]): String =\n  passenger match {\n    case Some(p) if p.name == \"Anna\" => \"Vegetarian\"\n    case Some(_) => \"Standard\"\n    case None => \"None requested\"\n  }\n\nval meal = lookupMealPreference(Some(Passenger(\"Anna\",\"A1\")))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_162","timestamp":1745438167831,"code":"case class Guest(name: String, email: Option[String])\nval guest = Guest(\"Alice\", Some(\"alice@mail.com\"))\nguest.email match {\n  case Some(email) => println(s\"Email: $email\")\n  case None => println(\"No email provided\")\n}","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_163","timestamp":1745438167831,"code":"case class Room(number: Int, available: Boolean)\ndef findAvailableRoom(rooms: List[Room]): Option[Room] =\n  rooms.find(_.available)\nval roomList = List(Room(101, false), Room(102, true))\nval result = findAvailableRoom(roomList).getOrElse(Room(0, false))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_164","timestamp":1745438167831,"code":"import scala.util.Try\ncase class Price(value: Double)\ndef parsePrice(input: String): Try[Price] = Try(input.toDouble).map(Price(_))\nval parsed = parsePrice(\"129.99\")\nparsed.foreach(p => println(s\"Parsed price: ${p.value}\"))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_165","timestamp":1745438167831,"code":"case class Reservation(id: String, guest: Guest, room: Room)\ndef findReservation(reservations: List[Reservation], id: String): Option[Reservation] =\n  reservations.find(_.id == id)\nval found = findReservation(Nil, \"r123\") match {\n  case Some(res) => res\n  case None => Reservation(\"\", Guest(\"\", None), Room(0, false))\n}","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_166","timestamp":1745438167831,"code":"case class Hotel(name: String, address: String)\nval maybeHotel: Option[Hotel] = None\nval name = maybeHotel.map(_.name).getOrElse(\"Unknown Hotel\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_167","timestamp":1745438167831,"code":"case class DateRange(checkIn: String, checkOut: String)\ndef validateDateRange(dr: DateRange): Either[String, DateRange] =\n  if (dr.checkIn < dr.checkOut) Right(dr) else Left(\"Invalid date range\")\nval validation = validateDateRange(DateRange(\"2024-09-10\", \"2024-09-12\"))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_168","timestamp":1745438167831,"code":"case class SpecialRequest(notes: Option[String])\ndef getRequestSummary(sr: SpecialRequest): String =\n  sr.notes.getOrElse(\"No special requests\")\nval sr = SpecialRequest(None)\nval summary = getRequestSummary(sr)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_169","timestamp":1745438167831,"code":"case class Rate(plan: String, nightly: Double)\ndef discounted(rate: Rate, code: Option[String]): Double =\n  code.map(_ => rate.nightly * 0.9).getOrElse(rate.nightly)\nval price = discounted(Rate(\"Standard\", 200.0), Some(\"SUMMER21\"))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_170","timestamp":1745438167831,"code":"case class Payment(cardNumber: String, expiry: String)\ndef validatePayment(p: Payment): Either[String, Payment] =\n  if (p.cardNumber.length == 16) Right(p) else Left(\"Invalid card number\")\nval pay = Payment(\"1234123412341234\", \"12/25\")\nvalidatePayment(pay)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_171","timestamp":1745438167831,"code":"import scala.util.Try\ncase class ReservationCount(count: Int)\ndef safeParseCount(input: String): Option[ReservationCount] =\n  Try(input.toInt).toOption.map(ReservationCount(_))\nval count = safeParseCount(\"10\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_172","timestamp":1745438167831,"code":"case class Customer(id: Long, name: String, vipStatus: Option[Boolean])\ndef greeting(customer: Customer): String =\n  customer.vipStatus match {\n    case Some(true) => s\"Welcome VIP ${customer.name}!\"\n    case _ => s\"Welcome ${customer.name}!\"\n  }\ngreeting(Customer(1L, \"Bob\", Some(true)))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_173","timestamp":1745438167831,"code":"case class RoomType(name: String, occupancy: Int)\ndef selectForOccupancy(roomTypes: List[RoomType], guests: Int): Option[RoomType] =\n  roomTypes.find(_.occupancy >= guests)\nselectForOccupancy(List(RoomType(\"Suite\", 4), RoomType(\"Double\", 2)), 3)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_174","timestamp":1745438167831,"code":"case class BookingStatus(code: String)\ndef interpretStatus(status: Option[BookingStatus]): String =\n  status.map(_.code).getOrElse(\"No Status\")\ninterpretStatus(Some(BookingStatus(\"Confirmed\")))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_175","timestamp":1745438167831,"code":"import scala.util.Try\ncase class Email(value: String)\ndef parseEmail(input: String): Either[String, Email] =\n  if (input.contains(\"@\")) Right(Email(input)) else Left(\"Invalid email\")\nparseEmail(\"guest@example.com\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_176","timestamp":1745438167831,"code":"case class CancellationPolicy(freeUntil: Option[String], fee: Option[Double])\ndef describePolicy(policy: CancellationPolicy): String =\n  policy.fee.fold(\"No fee\")(_ => \"Cancellation fee applies\")\ndescribePolicy(CancellationPolicy(Some(\"2024-09-10\"), None))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_177","timestamp":1745438167831,"code":"case class LoyaltyPoints(points: Int)\ndef redeem(points: Option[LoyaltyPoints], required: Int): Boolean =\n  points.exists(_.points >= required)\nredeem(Some(LoyaltyPoints(500)), 300)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_178","timestamp":1745438167831,"code":"case class BreakfastIncluded(isIncluded: Boolean)\nval maybeBreakfast: Option[BreakfastIncluded] = Some(BreakfastIncluded(true))\nval message = maybeBreakfast.map(b => if (b.isIncluded) \"Includes breakfast\" else \"No breakfast\").getOrElse(\"Details unavailable\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_179","timestamp":1745438167831,"code":"case class Amenity(name: String)\nval amenities: List[Option[Amenity]] = List(Some(Amenity(\"WiFi\")), None, Some(Amenity(\"Pool\")))\nval names = amenities.flatten.map(_.name)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_180","timestamp":1745438167831,"code":"case class Discount(code: String, amount: Double)\ndef applyDiscount(total: Double, discount: Option[Discount]): Double =\n  discount.map(d => total - d.amount).getOrElse(total)\napplyDiscount(250.0, Some(Discount(\"SPRING10\", 10.0)))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_181","timestamp":1745438167831,"code":"import scala.util.Try\ncase class Invoice(amount: Double)\ndef generateInvoice(amountStr: String): Either[String, Invoice] =\n  Try(amountStr.toDouble).toEither.left.map(_ => \"Invalid amount\").map(Invoice(_))\ngenerateInvoice(\"350.75\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_182","timestamp":1745438184877,"code":"case class Address(city: String, street: String, apartment: Option[String])\n\nval address = Address(\"New York\", \"5th Ave\", None)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_183","timestamp":1745438184877,"code":"case class FoodOrder(id: Int, items: List[String], deliveryNote: Option[String])\n\nval urgentOrder = FoodOrder(1001, List(\"Burger\", \"Fries\"), Some(\"Leave at door\"))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_184","timestamp":1745438184877,"code":"def parseQuantity(str: String): Either[String, Int] =\n  scala.util.Try(str.toInt).toEither.left.map(_ => \"Invalid number format.\")\n\nval result = parseQuantity(\"3\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_185","timestamp":1745438184877,"code":"case class Courier(name: String, rating: Option[Double])\n\ndef printRating(courier: Courier): String = courier.rating match {\n  case Some(r) => s\"Rating: $r\"\n  case None    => \"No rating yet\"\n}\n\nprintRating(Courier(\"Alex\", Some(4.8)))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_186","timestamp":1745438184877,"code":"def findBestCourier(couriers: List[Courier]): Option[Courier] =\n  couriers.filter(_.rating.isDefined).sortBy(-_.rating.get).headOption\n\nval bestOpt = findBestCourier(List(Courier(\"Emma\", None), Courier(\"Kai\", Some(4.9))))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_187","timestamp":1745438184877,"code":"case class Restaurant(name: String, menu: List[String], rating: Double)\n\nval restaurants = List(\n  Restaurant(\"Salad House\", List(\"Caesar\", \"Greek\"), 4.5),\n  Restaurant(\"Pizza Time\", List(\"Pepperoni\", \"Veggie\"), 4.2)\n)\nval goodMenu = restaurants.find(_.menu.contains(\"Caesar\"))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_188","timestamp":1745438184877,"code":"case class Delivery(id: Int, address: Address, delivered: Boolean)\n\ndef markDelivered(delivery: Delivery): Delivery = delivery.copy(delivered = true)\n\nval d = markDelivered(Delivery(42, address, false))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_189","timestamp":1745438184877,"code":"def safeDivide(total: Double, parts: Int): Either[String, Double] =\n  if(parts == 0) Left(\"Cannot divide by zero.\")\n  else Right(total / parts)\n\nsafeDivide(45.0, 0)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_190","timestamp":1745438184877,"code":"case class Customer(name: String, phone: Option[String])\n\nval maybeNumber = Customer(\"Sam\", None).phone.getOrElse(\"Not Provided\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_191","timestamp":1745438184877,"code":"def parseOrderId(str: String): Option[Int] =\n  scala.util.Try(str.toInt).toOption\n\nval maybeId = parseOrderId(\"order123\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_192","timestamp":1745438184877,"code":"val addresses = List(\n  Address(\"LA\", \"Sunset Blvd\", Some(\"8A\")),\n  Address(\"Boston\", \"Boylston\", None)\n)\nval withApt = addresses.collect { case a if a.apartment.isDefined => a }","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_193","timestamp":1745438184877,"code":"def getDeliveryNote(order: FoodOrder): String =\n  order.deliveryNote match {\n    case Some(note) => note\n    case None       => \"No special instructions\"\n  }\n\ngetDeliveryNote(FoodOrder(202, List(\"Taco\"), None))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_194","timestamp":1745438184877,"code":"def readEstimatedTime(input: String): Either[String, Int] =\n  scala.util.Try(input.trim.toInt).toEither.left.map(_ => \"Invalid ETA\")\n\nreadEstimatedTime(\"20\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_195","timestamp":1745438184877,"code":"val maybeCourier: Option[Courier] = None\nval courierName = maybeCourier.map(_.name).getOrElse(\"Unassigned\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_196","timestamp":1745438184877,"code":"case class Warehouse(location: String, hasRefrigeration: Boolean)\n\nval ware = Warehouse(\"Uptown\", true)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_197","timestamp":1745438184877,"code":"def incrementRating(courier: Courier): Courier =\n  courier.rating match {\n    case Some(r) => courier.copy(rating = Some(r + 0.1))\n    case None    => courier\n  }\n\nincrementRating(Courier(\"Liam\", Some(4.2)))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_198","timestamp":1745438184877,"code":"def calculateTotal(items: List[(String, Double)]): Double =\n  items.map(_._2).sum\n\ncalculateTotal(List((\"Sushi\", 12.5), (\"Soup\", 6.0)))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_199","timestamp":1745438184877,"code":"case class Payment(customer: Customer, amount: Double, voucher: Option[String])\n\nval payment = Payment(Customer(\"Zoe\", Some(\"123-456\")), 29.99, None)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_200","timestamp":1745438184877,"code":"def parseLocation(s: String): Option[(Double, Double)] =\n  s.split(\",\").map(_.trim).toList match {\n    case lat :: lng :: Nil =>\n      for {\n        la <- scala.util.Try(lat.toDouble).toOption\n        lo <- scala.util.Try(lng.toDouble).toOption\n      } yield (la, lo)\n    case _ => None\n  }\n\nparseLocation(\"40.7128, -74.0060\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_201","timestamp":1745438184877,"code":"case class Vehicle(plate: String, capacity: Option[Int])\n\ndef enoughSpace(vehicle: Vehicle, needed: Int): Boolean =\n  vehicle.capacity.exists(_ >= needed)\n\nenoughSpace(Vehicle(\"ABC-123\", Some(3)), 2)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_202","timestamp":1745438205633,"code":"case class Song(title: String, artist: String, durationSeconds: Int)\n\nval track: Option[Song] = Some(Song(\"Moonlight\", \"Luna\", 215))\nval songName = track.map(_.title).getOrElse(\"Unknown song\")\nprintln(songName)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_203","timestamp":1745438205633,"code":"case class UserProfile(username: String, subscription: Option[String])\n\ndef getSubscriptionMsg(profile: UserProfile): String = profile.subscription match {\n  case Some(tier) => s\"Subscription: $tier\"\n  case None => \"Free User\"\n}\n\nprintln(getSubscriptionMsg(UserProfile(\"alex\", Some(\"Premium\"))))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_204","timestamp":1745438205633,"code":"import scala.util.Try\n\ndef parseDuration(duration: String): Try[Int] = Try(duration.toInt)\n\nval maybeSecs = parseDuration(\"260\")\nprintln(maybeSecs.getOrElse(0))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_205","timestamp":1745438205633,"code":"case class Playlist(name: String, tracks: List[Song])\n\nval emptyPlaylist = Playlist(\"My Playlist\", Nil)\nprintln(emptyPlaylist.tracks.headOption.getOrElse(Song(\"\", \"\", 0)))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_206","timestamp":1745438205633,"code":"val maybeArtist: Option[String] = None\nval greeting = maybeArtist.fold(\"Guest artist\")(_.toUpperCase)\nprintln(greeting)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_207","timestamp":1745438205633,"code":"case class Album(title: String, year: Int, topSong: Option[Song])\n\nval album = Album(\"Echoes\", 2020, None)\nprintln(album.topSong.map(_.title).getOrElse(\"No top song\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_208","timestamp":1745438205633,"code":"def safeDivide(x: Int, y: Int): Either[String, Int] = if (y == 0) Left(\"Division by zero\") else Right(x / y)\n\nval bitratePerUser = safeDivide(320, 0).left.map(msg => s\"Error: $msg\")\nprintln(bitratePerUser.getOrElse(-1))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_209","timestamp":1745438205633,"code":"case class StreamEvent(user: String, eventType: String, details: Option[String])\n\nval event = StreamEvent(\"user1\", \"play\", None)\nval detailsDisplay = event.details.getOrElse(\"No details available\")\nprintln(detailsDisplay)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_210","timestamp":1745438205633,"code":"import scala.util.Try\n\ndef toIntSafe(str: String): Option[Int] = Try(str.toInt).toOption\nval maybeListeners = toIntSafe(\"900\")\nprintln(maybeListeners.getOrElse(0))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_211","timestamp":1745438205633,"code":"case class User(id: Long, name: String)\nval users = List(User(1L, \"Ana\"), User(2L, \"Ben\"))\nval foundUser = users.find(_.name == \"Ana\")\nprintf(\"User: %s\\n\", foundUser.map(_.name).getOrElse(\"none\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_212","timestamp":1745438205633,"code":"case class Playback(state: String, position: Option[Int])\nval playback = Playback(\"paused\", Some(123))\nval pos = playback.position.fold(0)(_ + 1)\nprintln(pos)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_213","timestamp":1745438205633,"code":"def lookupTrackById(id: Long): Option[Song] = None\nval trackInfo = lookupTrackById(15L).map(_.title).getOrElse(\"Not found\")\nprintln(trackInfo)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_214","timestamp":1745438205633,"code":"def getCoverArt(album: Album): Either[String, String] = album.topSong match {\n  case Some(_) => Right(\"ImageURL\")\n  case None => Left(\"Album cover not available\")\n}\nval cover = getCoverArt(Album(\"Dawn\", 2021, None))\nprintln(cover.getOrElse(\"DefaultImage\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_215","timestamp":1745438205633,"code":"val songRatings: Map[String, Int] = Map(\"Track1\" -> 5, \"Track2\" -> 4)\nval trackRating = songRatings.get(\"Track3\").getOrElse(0)\nprintln(trackRating)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_216","timestamp":1745438205633,"code":"case class Device(name: String, lastUsed: Option[String])\n\nval device = Device(\"Smartphone\", Some(\"2023-12-01\"))\nprintln(device.lastUsed.getOrElse(\"Never used\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_217","timestamp":1745438205633,"code":"case class SearchResult(total: Int, topResult: Option[Song])\nval search = SearchResult(0, None)\nval resultMsg = search.topResult.fold(\"No top result\")(_.title)\nprintln(resultMsg)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_218","timestamp":1745438205633,"code":"def luckyDraw(user: Option[User]): Either[String, String] = user match {\n  case Some(u) if u.id == 42L => Right(\"Winner!\")\n  case Some(_) => Left(\"Not a winner\")\n  case None => Left(\"No user\")\n}\nprintln(luckyDraw(Some(User(1L, \"Sam\")).fold(identity, identity)))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_219","timestamp":1745438205633,"code":"case class StreamError(reason: String)\ndef fetchStream(url: String): Either[StreamError, String] =\n  if (url.contains(\".mp3\")) Right(\"Stream started\") else Left(StreamError(\"Invalid format\"))\n\nprintln(fetchStream(\"song.wav\").left.map(_.reason).getOrElse(\"Success\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_220","timestamp":1745438205633,"code":"case class Genre(name: String)\ndef genreFromString(s: String): Option[Genre] = if (s.isEmpty) None else Some(Genre(s))\nval maybeGenre = genreFromString(\"\")\nprintln(maybeGenre.map(_.name).getOrElse(\"Unknown Genre\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_221","timestamp":1745438205633,"code":"case class Listen(userId: Long, songId: Long)\nval listens = List(Listen(1L, 101L), Listen(2L, 102L))\ndef userSongs(uid: Long): List[Long] = listens.filter(_.userId == uid).map(_.songId)\nprintln(userSongs(1L).headOption.getOrElse(-1L))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_222","timestamp":1745438222425,"code":"case class Tutor(id: Int, name: String, subjects: List[String])\n\nval maybeTutor: Option[Tutor] = Some(Tutor(1, \"Ann\", List(\"Math\", \"Physics\")))\n\nval tutorName: String = maybeTutor.map(_.name).getOrElse(\"Unknown\")\ntutorName.length\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_223","timestamp":1745438222425,"code":"case class Student(username: String, email: Option[String])\n\nval s = Student(\"stefan\", None)\nval emailOrDefault = s.email.getOrElse(\"no-email@example.com\")\nemailOrDefault.toLowerCase()\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_224","timestamp":1745438222425,"code":"case class Session(tutorId: Int, studentId: Int, durationMinutes: Int)\ndef averageSessionDuration(sessions: List[Session]): Option[Double] =\n  if (sessions.nonEmpty) Some(sessions.map(_.durationMinutes).sum.toDouble / sessions.size)\n  else None\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_225","timestamp":1745438222425,"code":"def parseRating(str: String): Either[String, Int] =\n  scala.util.Try(str.toInt).toEither.left.map(_ => s\"Invalid number: $str\")\n\nparseRating(\"5\")\nparseRating(\"abc\")\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_226","timestamp":1745438222425,"code":"case class Course(title: String, description: String)\n\nval maybeCourse: Option[Course] = None\nval courseTitle = maybeCourse.map(_.title).getOrElse(\"Untitled Course\")\ncourseTitle.reverse\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_227","timestamp":1745438222425,"code":"def findTutorById(id: Int, tutors: List[Tutor]): Option[Tutor] =\n  tutors.find(_.id == id)\n\nfindTutorById(2, List(Tutor(1, \"Bella\", List(\"Eng\")), Tutor(2, \"Sean\", Nil)))","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_228","timestamp":1745438222425,"code":"case class Lesson(topic: String, resources: List[String])\n\nval lesson = Lesson(\"Calculus\", Nil)\nval maybeFirstResource = lesson.resources.headOption\nmaybeFirstResource.getOrElse(\"No resources available\")\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_229","timestamp":1745438222425,"code":"def safeDivide(x: Int, y: Int): Either[String, Double] =\n  if (y == 0) Left(\"Division by zero\") else Right(x.toDouble / y)\n\nsafeDivide(10, 2)\nsafeDivide(10, 0)","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_230","timestamp":1745438222425,"code":"case class ChatMessage(sender: String, content: String)\ndef findMessage(messages: List[ChatMessage], query: String): Option[ChatMessage] =\n  messages.find(_.content.contains(query))\n\nfindMessage(List(ChatMessage(\"A\", \"hi there\")), \"hi\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_231","timestamp":1745438222425,"code":"case class Booking(tutor: Tutor, student: Student, status: String)\n\nval booking = Booking(Tutor(3, \"Max\", List(\"Chemistry\")), Student(\"eva\", Some(\"eva@mail.com\")), \"confirmed\")\nval studentEmail = booking.student.email.getOrElse(\"No email\")\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_232","timestamp":1745438222425,"code":"def parseSessionDuration(input: String): Try[Int] =\n  scala.util.Try(input.toInt)\n\nparseSessionDuration(\"60\")\nparseSessionDuration(\"sixty\")\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_233","timestamp":1745438222425,"code":"case class Feedback(student: Student, text: Option[String])\nval fb = Feedback(Student(\"nina\", None), None)\nval feedbackText = fb.text.getOrElse(\"No feedback provided\")\nfeedbackText.capitalize\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_234","timestamp":1745438222425,"code":"case class Schedule(times: List[String])\nval sch = Schedule(List())\nsch.times.headOption.fold(\"No slots available\")(identity)\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_235","timestamp":1745438222425,"code":"def enrollStudent(course: Course, student: Student): Either[String, String] =\n  if (course.title.nonEmpty) Right(s\"${student.username} enrolled in ${course.title}\")\n  else Left(\"Course title missing\")\n\nval st = Student(\"dan\", None)\nenrollStudent(Course(\"\", \"desc\"), st)\nenrollStudent(Course(\"Algebra\", \"desc\"), st)","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_236","timestamp":1745438222425,"code":"case class Payment(userId: Int, amount: Double)\ndef validatePayment(payment: Payment): Either[String, Payment] =\n  if (payment.amount > 0) Right(payment) else Left(\"Invalid amount\")\n\nvalidatePayment(Payment(1, 100))","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_237","timestamp":1745438222425,"code":"case class Notification(message: String)\nval maybeNotification: Option[Notification] = None\nval toSend: String = maybeNotification.map(_.message).getOrElse(\"No notifications\")\ntoSend.toUpperCase\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_238","timestamp":1745438222425,"code":"def getStudentByUsername(username: String, group: List[Student]): Option[Student] =\n  group.find(_.username == username)\n\ngetStudentByUsername(\"ana\", List(Student(\"ana\", Some(\"a@b.com\")), Student(\"bob\", None)))","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_239","timestamp":1745438222425,"code":"def parseBoolean(input: String): Either[String, Boolean] =\n  input.toLowerCase match {\n    case \"true\"  => Right(true)\n    case \"false\" => Right(false)\n    case _       => Left(\"Not a boolean\")\n  }\n\nparseBoolean(\"TRUE\")\nparseBoolean(\"yes\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_240","timestamp":1745438222425,"code":"case class Review(rating: Int, comment: Option[String])\ndef hasPositiveReview(review: Review): Boolean =\n  (review.comment, review.rating) match {\n    case (Some(text), r) if text.nonEmpty && r >= 4 => true\n    case _                                         => false\n  }\n\nhasPositiveReview(Review(5, Some(\"Great!\")))","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_241","timestamp":1745438222425,"code":"case class GroupSession(students: List[Student], topic: String)\ndef findStudentEmail(session: GroupSession, username: String): Option[String] =\n  session.students.find(_.username == username).flatMap(_.email)\n\nfindStudentEmail(GroupSession(List(Student(\"lee\", Some(\"l@x.com\")), Student(\"mia\", None)), \"Scala\"), \"lee\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_242","timestamp":1745438249285,"code":"case class Address(street: String, city: String, zip: Option[String])\nval addr = Address(\"42 Main St\", \"Springfield\", None)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_243","timestamp":1745438249285,"code":"case class Agent(name: String, phone: Option[String])\nval agentWithPhone = Agent(\"Pam\", Some(\"555-1234\"))\nval agentNoPhone = Agent(\"Jim\", None)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_244","timestamp":1745438249285,"code":"def parsePrice(s: String): Either[String, Int] =\n  scala.util.Try(s.toInt).toEither.left.map(_ => s\"Invalid price: $s\")\nval price = parsePrice(\"500000\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_245","timestamp":1745438249285,"code":"case class Listing(id: Int, title: String, price: Option[Int])\ndef showPrice(l: Listing): String =\n  l.price.map(p => s\"$$$p\").getOrElse(\"Call for Price\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_246","timestamp":1745438249285,"code":"case class Location(city: String, state: String)\ndef findListingsByCity(city: String, listings: List[Listing]): List[Listing] =\n  listings.filter(l => l.title.contains(city))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_247","timestamp":1745438249285,"code":"case class User(id: Int, name: String, email: Option[String])\nval user: User = User(5, \"Dana\", None)\nval contact = user.email.getOrElse(\"No email provided\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_248","timestamp":1745438249285,"code":"def safeGetFirstListing(listings: Seq[Listing]): Option[Listing] =\n  listings.headOption\n\nval first = safeGetFirstListing(Seq())","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_249","timestamp":1745438249285,"code":"case class Photo(url: String, description: Option[String])\nval p = Photo(\"img1.jpg\", None)\nval desc = p.description.fold(\"No Description\")(d => d.take(20))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_250","timestamp":1745438249285,"code":"def parseBedrooms(s: String): Try[Int] =\n  scala.util.Try(s.toInt)\nval bd = parseBedrooms(\"3\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_251","timestamp":1745438249285,"code":"val addresses = List(\n  Address(\"1 Main\", \"Metropolis\", Some(\"12345\")),\n  Address(\"2 Park\", \"Metropolis\", None)\n)\nval zips = addresses.flatMap(_.zip)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_252","timestamp":1745438249285,"code":"case class SearchQuery(city: Option[String], minPrice: Option[Int], maxBeds: Option[Int])\nval q = SearchQuery(Some(\"Dublin\"), None, Some(2))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_253","timestamp":1745438249285,"code":"def totalListings(listings: List[Listing]): Int =\n  listings.size\nval total = totalListings(List(Listing(1, \"Nice Home\", Some(250000))))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_254","timestamp":1745438249285,"code":"def maybeGetAgentPhone(agent: Agent): String =\n  agent.phone match {\n    case Some(p) => p\n    case None => \"No phone on file\"\n  }\nval agent = Agent(\"Janet\", None)\nval phone = maybeGetAgentPhone(agent)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_255","timestamp":1745438249285,"code":"def safeDivide(a: Int, b: Int): Either[String, Int] =\n  if (b == 0) Left(\"Division by zero\") else Right(a / b)\nval res = safeDivide(10, 2)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_256","timestamp":1745438249285,"code":"def fromMap(m: Map[String, String]): Option[Listing] =\n  for {\n    id <- m.get(\"id\").flatMap(s => scala.util.Try(s.toInt).toOption)\n    title <- m.get(\"title\")\n    price = m.get(\"price\").flatMap(s => scala.util.Try(s.toInt).toOption)\n  } yield Listing(id, title, price)\nval m = Map(\"id\" -> \"1\", \"title\" -> \"Cozy Loft\")\nval listingOpt = fromMap(m)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_257","timestamp":1745438249285,"code":"case class Feature(name: String)\ndef findFeature(features: List[Feature], n: String): Option[Feature] =\n  features.find(_.name == n)\nval hasGarden = findFeature(List(Feature(\"Pool\"), Feature(\"Garden\")), \"Garden\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_258","timestamp":1745438249285,"code":"def getListingCity(listing: Listing): Option[String] =\n  listing.title.split(',').lift(1).map(_.trim)\nval city = getListingCity(Listing(7, \"Luxury Condo, Miami\", Some(900000)))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_259","timestamp":1745438249285,"code":"case class Realtor(name: String, agency: String, email: Option[String])\nval realtor = Realtor(\"Emily\", \"Home Realty\", None)\ndef sendEmail(realtor: Realtor): Either[String, String] =\n  realtor.email.toRight(\"No email address\")\nval result = sendEmail(realtor)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_260","timestamp":1745438249285,"code":"def filterListingsByMaxPrice(listings: List[Listing], max: Int): List[Listing] =\n  listings.filter(_.price.exists(_ <= max))\nval filtered = filterListingsByMaxPrice(List(Listing(1, \"Cheap\", Some(10))), 20)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_261","timestamp":1745438249285,"code":"case class Amenity(description: String)\nval amenities: Option[List[Amenity]] = Some(List(Amenity(\"WiFi\")))\ndef amenityCount(optA: Option[List[Amenity]]): Int =\n  optA.map(_.size).getOrElse(0)\nval count = amenityCount(amenities)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_262","timestamp":1745438263723,"code":"case class Wallet(address: String, balance: BigDecimal)\nval myWallet = Wallet(\"0x123abc\", 2.5)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_263","timestamp":1745438263723,"code":"case class Transaction(id: String, amount: BigDecimal, from: String, to: String)\ndef findTransaction(transactions: List[Transaction], txId: String): Option[Transaction] = \n  transactions.find(_.id == txId)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_264","timestamp":1745438263723,"code":"def getWalletBalance(walletOpt: Option[Wallet]): BigDecimal = \n  walletOpt.map(_.balance).getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_265","timestamp":1745438263723,"code":"def parseAmount(s: String): Either[String, BigDecimal] = \n  scala.util.Try(BigDecimal(s)).toEither.left.map(_ => \"Invalid amount\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_266","timestamp":1745438263723,"code":"case class PrivateKey(key: String)\ndef loadPrivateKey(raw: String): Option[PrivateKey] = \n  if (raw.nonEmpty) Some(PrivateKey(raw)) else None","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_267","timestamp":1745438263723,"code":"case class WalletSeed(words: List[String])\ndef validateSeed(seed: WalletSeed): Boolean = seed.words.length == 12 || seed.words.length == 24","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_268","timestamp":1745438263723,"code":"def sendFunds(wallet: Wallet, amount: BigDecimal): Either[String, Wallet] = \n  if (wallet.balance >= amount) Right(wallet.copy(balance = wallet.balance - amount))\n  else Left(\"Insufficient funds\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_269","timestamp":1745438263723,"code":"case class WalletLabel(name: String, tag: Option[String])\nval labeled = WalletLabel(\"Savings\", Some(\"cold storage\"))","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_270","timestamp":1745438263723,"code":"case class AddressBookEntry(address: String, label: Option[String])\ndef lookupLabel(book: List[AddressBookEntry], address: String): Option[String] = \n  book.find(_.address == address).flatMap(_.label)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_271","timestamp":1745438263723,"code":"import scala.util.Try\ndef parseWallet(line: String): Try[Wallet] = Try {\n  val Array(addr, bal) = line.split(\",\")\n  Wallet(addr, BigDecimal(bal))\n}","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_272","timestamp":1745438263723,"code":"def findWalletByAddress(wallets: List[Wallet], address: String): Option[Wallet] = \n  wallets.find(_.address == address)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_273","timestamp":1745438263724,"code":"case class NetworkFee(amount: BigDecimal)\ndef selectFee(fees: List[NetworkFee]): Option[NetworkFee] = \n  fees.sortBy(_.amount).headOption","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_274","timestamp":1745438263724,"code":"import scala.util.Try\ncase class BalanceUpdate(newBalance: BigDecimal)\ndef updateWallet(wallet: Wallet, delta: String): Try[Wallet] = for {\n  change <- Try(BigDecimal(delta))\n} yield wallet.copy(balance = wallet.balance + change)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_275","timestamp":1745438263724,"code":"case class MnemonicPhrase(words: List[String])\ndef isValidMnemonic(phrase: MnemonicPhrase): Boolean = \n  Set(12,18,24).contains(phrase.words.length)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_276","timestamp":1745438263724,"code":"def importWallet(json: String): Either[String, Wallet] = {\n  if (json.contains(\"address\") && json.contains(\"balance\")) Right(Wallet(\"0xabc\", 1.5))\n  else Left(\"Invalid JSON format\")\n}","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_277","timestamp":1745438263724,"code":"def safeGetBalance(wallet: Option[Wallet]): Option[BigDecimal] = \n  wallet.map(_.balance)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_278","timestamp":1745438263724,"code":"case class SignedTransaction(tx: Transaction, signature: String)\ndef signTransaction(tx: Transaction, key: PrivateKey): Either[String, SignedTransaction] = \n  if (key.key.length == 64) Right(SignedTransaction(tx, \"signed\"))\n  else Left(\"Invalid private key\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_279","timestamp":1745438263724,"code":"case class Currency(symbol: String, decimals: Int)\ndef formatAmount(amount: BigDecimal, currency: Currency): String =\n  f\"${amount}%.${currency.decimals}f ${currency.symbol}\"","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_280","timestamp":1745438263724,"code":"def withdraw(wallet: Wallet, amount: BigDecimal): Option[Wallet] = \n  if (wallet.balance >= amount) Some(wallet.copy(balance = wallet.balance - amount))\n  else None","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_281","timestamp":1745438263724,"code":"import scala.util.Try\ndef parseAddress(s: String): Try[String] = Try {\n  require(s.startsWith(\"0x\"))\n  s\n}","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_282","timestamp":1745438281800,"code":"case class Item(id: String, name: String, quantity: Int)\nval item = Item(\"A001\", \"Widget\", 10)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_283","timestamp":1745438281800,"code":"case class Location(id: String, description: String)\nval loc = Location(\"L02\", \"Shelf Top\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_284","timestamp":1745438281800,"code":"def findItemById(items: List[Item], id: String): Option[Item] =\n  items.find(_.id == id)\n\nval inventory = List(Item(\"A001\", \"Widget\", 10))\nval maybeItem = findItemById(inventory, \"A001\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_285","timestamp":1745438281800,"code":"def parseQuantity(s: String): Either[String, Int] =\n  scala.util.Try(s.toInt).toEither.left.map(_ => \"Invalid quantity\")\n\nval result = parseQuantity(\"15\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_286","timestamp":1745438281800,"code":"val maybeLocation: Option[Location] = None\nval display = maybeLocation.map(_.description).getOrElse(\"Unknown location\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_287","timestamp":1745438281800,"code":"case class StockEntry(item: Item, location: Location)\nval widgetAtLoc = StockEntry(Item(\"A001\", \"Widget\", 8), Location(\"L02\", \"Shelf Top\"))","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_288","timestamp":1745438281801,"code":"case class InventoryCount(item: Item, count: Int)\ndef updateCount(inv: InventoryCount, delta: Int): InventoryCount =\n  inv.copy(count = inv.count + delta)\n\nval ic = InventoryCount(Item(\"A002\", \"Gadget\", 20), 20)\nval updated = updateCount(ic, -2)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_289","timestamp":1745438281801,"code":"def safeGetQuantity(itemOpt: Option[Item]): Int =\n  itemOpt.map(_.quantity).getOrElse(0)\n\nval maybeItem: Option[Item] = Some(Item(\"B002\", \"Tool\", 5))\nval q = safeGetQuantity(maybeItem)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_290","timestamp":1745438281801,"code":"import scala.util.Try\n\ndef parseItem(line: String): Try[Item] = Try {\n  val parts = line.split(\",\")\n  Item(parts(0), parts(1), parts(2).toInt)\n}\nval tryItem = parseItem(\"A003,Gizmo,7\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_291","timestamp":1745438281801,"code":"case class TransferRequest(itemId: String, from: String, to: String, amount: Int)\nval req = TransferRequest(\"A005\", \"L01\", \"L02\", 3)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_292","timestamp":1745438281801,"code":"def findLocationByItemId(stock: List[StockEntry], itemId: String): Option[Location] =\n  stock.find(_.item.id == itemId).map(_.location)\n\nval stock = List(widgetAtLoc)\nval locOpt = findLocationByItemId(stock, \"A001\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_293","timestamp":1745438281801,"code":"case class Reorder(itemId: String, amount: Int)\ndef needsReorder(item: Item, threshold: Int): Option[Reorder] =\n  if (item.quantity < threshold) Some(Reorder(item.id, threshold - item.quantity)) else None\n\nval reorderOpt = needsReorder(Item(\"A004\", \"Gizmo\", 2), 5)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_294","timestamp":1745438281801,"code":"import scala.util.Try\n\ndef safeDivideStock(count: Int, locations: Int): Try[Int] = Try(count / locations)\nval result = safeDivideStock(10, 2)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_295","timestamp":1745438281801,"code":"def itemNameOpt(item: Option[Item]): Option[String] = item.map(_.name)\n\nval maybeName = itemNameOpt(Some(Item(\"A007\", \"Clip\", 15)))","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_296","timestamp":1745438281801,"code":"case class Inventory(items: Map[String, Item])\ndef getItem(inventory: Inventory, id: String): Either[String, Item] =\n  inventory.items.get(id).toRight(\"Item not found\")\n\nval inv = Inventory(Map(\"A001\" -> Item(\"A001\", \"Widget\", 3)))\nval res = getItem(inv, \"A001\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_297","timestamp":1745438281801,"code":"case class ChangeLog(entry: String)\ndef logAdjustment(item: Item, delta: Int): Option[ChangeLog] =\n  if (delta != 0) Some(ChangeLog(s\"Adjusted ${item.name} by $delta\")) else None\n\nval log = logAdjustment(Item(\"A008\", \"Stapler\", 5), -2)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_298","timestamp":1745438281801,"code":"def transferItem(stock: List[StockEntry], itemId: String, to: Location): Either[String, List[StockEntry]] =\n  stock.find(_.item.id == itemId) match {\n    case Some(entry) => Right(stock.map(e => if (e == entry) e.copy(location = to) else e))\n    case None => Left(\"Item not found in stock\")\n  }\nval entries = List(widgetAtLoc)\nval moved = transferItem(entries, \"A001\", Location(\"L03\", \"Bins\"))","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_299","timestamp":1745438281801,"code":"val missingItem: Option[Item] = None\nval out = missingItem.fold(\"No item\")(_.name)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_300","timestamp":1745438281801,"code":"def checkStock(item: Option[Item]): String =\n  item match {\n    case Some(i) if i.quantity > 0 => s\"${i.name} in stock\"\n    case Some(i) => s\"${i.name} out of stock\"\n    case None => \"Item not found\"\n  }\nval msg = checkStock(Some(Item(\"A009\", \"Label\", 0)))","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_301","timestamp":1745438281801,"code":"case class InventoryError(msg: String)\ndef validateQuantity(qty: Int): Either[InventoryError, Int] =\n  if (qty >= 0) Right(qty) else Left(InventoryError(\"Negative quantity\"))\nval check = validateQuantity(-3)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_302","timestamp":1745438281801,"code":"case class Batch(id: String, items: List[Item])\ndef totalStock(batch: Batch): Int = batch.items.map(_.quantity).sum\nval batch = Batch(\"B1\", List(Item(\"A010\", \"Bolt\", 4), Item(\"A011\", \"Nut\", 6)))\nval total = totalStock(batch)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_303","timestamp":1745438302740,"code":"case class User(id: String, username: String)\n\nval maybeUser: Option[User] = Some(User(\"1\", \"alice\"))\nval displayName = maybeUser.map(_.username).getOrElse(\"Anonymous\")\nprintln(displayName)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_304","timestamp":1745438302740,"code":"case class Content(id: String, text: String)\n\ndef findContentById(id: String): Option[Content] = None\nval content = findContentById(\"42\").getOrElse(Content(\"0\", \"[deleted]\"))\nprintln(content.text)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_305","timestamp":1745438302740,"code":"case class ModerationResult(isClean: Boolean)\n\ndef moderate(text: String): Either[String, ModerationResult] =\n  if (text.contains(\"bad\")) Left(\"Inappropriate content detected\")\n  else Right(ModerationResult(true))\n\nval result = moderate(\"hello world\").getOrElse(ModerationResult(false))\nprintln(result.isClean)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_306","timestamp":1745438302740,"code":"import scala.util.Try\ncase class Report(contentId: String, reason: String)\n\ndef parseReport(s: String): Try[Report] = Try {\n  val Array(cid, reason) = s.split(\":\", 2)\n  Report(cid, reason)\n}\n\nprintln(parseReport(\"1:spam\").toOption)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_307","timestamp":1745438302740,"code":"case class Comment(id: Int, author: Option[String], body: String)\nval c = Comment(13, None, \"Hidden\")\nval authorTag = c.author.getOrElse(\"[unknown]\")\nprintln(authorTag)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_308","timestamp":1745438302740,"code":"case class Flag(userId: String, contentId: String, reason: Option[String])\nval flag = Flag(\"u2\", \"c12\", None)\nval msg = flag.reason.getOrElse(\"No reason provided\")\nprintln(msg)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_309","timestamp":1745438302740,"code":"case class Decision(approved: Boolean, moderator: String)\n\nval action: Option[Decision] = Some(Decision(false, \"mod42\"))\naction match {\n  case Some(Decision(true, _)) => println(\"Approved\")\n  case Some(Decision(false, m)) => println(s\"Rejected by $m\")\n  case None => println(\"No decision\")\n}","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_310","timestamp":1745438302740,"code":"import scala.util.Try\n\ndef safeCheckWords(text: String, trigger: String): Try[Boolean] = Try {\n  text.toLowerCase.contains(trigger.toLowerCase)\n}\n\nprintln(safeCheckWords(\"Some test text\", \"test\").getOrElse(false))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_311","timestamp":1745438302740,"code":"case class UserProfile(id: String, bio: Option[String])\nval profile = UserProfile(\"alice\", Some(\"Scala Dev\"))\nprofile.bio.foreach(println)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_312","timestamp":1745438302740,"code":"case class ModerationLog(entryId: String, contentId: String, status: String)\ndef findLog(id: String): Option[ModerationLog] = None\nval logMsg = findLog(\"55\").map(_.status).getOrElse(\"No Log Found\")\nprintln(logMsg)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_313","timestamp":1745438302740,"code":"case class BlockedWord(word: String)\nval blockList = List(BlockedWord(\"hate\"), BlockedWord(\"spam\"))\n\ndef containsBlockedWord(text: String, banned: List[BlockedWord]): Boolean =\n  banned.exists(w => text.contains(w.word))\n\nprintln(containsBlockedWord(\"no spam here\", blockList))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_314","timestamp":1745438302740,"code":"import scala.util.Try\n\ndef parseRating(s: String): Either[String, Int] = Try(s.toInt).toEither.left.map(_ => \"Invalid rating\")\nval r = parseRating(\"5\").getOrElse(-1)\nprintln(r)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_315","timestamp":1745438302740,"code":"case class Appeal(userId: String, contentId: String, details: Option[String])\nval a = Appeal(\"u3\", \"c7\", None)\nval d = a.details.getOrElse(\"No details given\")\nprintln(d)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_316","timestamp":1745438302740,"code":"case class Violation(userId: String, kind: String, extra: Option[String])\n\ndef notify(v: Violation): String = v.extra match {\n  case Some(detail) => s\"Violation: ${v.kind} ($detail)\"\n  case None => s\"Violation: ${v.kind}\"\n}\nprintln(notify(Violation(\"u5\", \"abuse\", Some(\"profanity\"))))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_317","timestamp":1745438302740,"code":"case class Reaction(contentId: String, userId: String, reaction: String)\nval validReactions = Set(\"like\", \"dislike\", \"flag\")\ndef validateReaction(r: Reaction): Either[String, Reaction] =\n  if (validReactions.contains(r.reaction)) Right(r) else Left(\"Invalid reaction\")\nprintf(\"%s\\n\", validateReaction(Reaction(\"42\", \"bob\", \"flag\")).isRight)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_318","timestamp":1745438302740,"code":"case class Ban(userId: String, reason: String, until: Option[String])\nval ban = Ban(\"u7\", \"spam\", None)\nval until = ban.until.getOrElse(\"Permanent\")\nprintln(until)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_319","timestamp":1745438302740,"code":"import scala.util.Try\n\ndef parseUserName(s: String): Option[String] = Try(Option(s)).toOption.flatten\nval userName = parseUserName(\"moderator\").getOrElse(\"[empty username]\")\nprintln(userName)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_320","timestamp":1745438302740,"code":"case class ContentMeta(id: String, created: Long, flagged: Boolean)\nval maybeMeta: Option[ContentMeta] = None\nprintln(maybeMeta.map(_.created).getOrElse(0L))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_321","timestamp":1745438302740,"code":"case class ModeratorAction(contentId: String, outcome: String)\ndef actionFor(contentId: String): Option[ModeratorAction] = None\nval isRemoved = actionFor(\"abc\").exists(_.outcome == \"removed\")\nprintln(isRemoved)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_322","timestamp":1745438302740,"code":"import scala.util.{Try, Success, Failure}\n\ncase class Message(id: String, userId: String, body: String)\ndef parseMessage(raw: String): Try[Message] = Try {\n  val parts = raw.split(\":\".toCharArray)\n  if (parts.length >= 3) Message(parts(0), parts(1), parts(2))\n  else throw new RuntimeException(\"Invalid message format\")\n}\nparseMessage(\"1:bob:hello\") match {\n  case Success(m) => println(m.body)\n  case Failure(_) => println(\"Parse error\")\n}","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_323","timestamp":1745438319123,"code":"case class User(id: String, preferences: Option[List[String]])\n\nval user1 = User(\"u123\", Some(List(\"sports\", \"tech\")))\nval user2 = User(\"u777\", None)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_324","timestamp":1745438319123,"code":"case class Article(id: String, topic: String, content: String)\n\ndef findArticleById(articles: List[Article], id: String): Option[Article] =\n  articles.find(_.id == id)\n\nval articleOpt = findArticleById(List(Article(\"1\", \"tech\", \"...\")), \"1\")","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_325","timestamp":1745438319123,"code":"case class FeedItem(userId: String, article: Article)\n\ndef personalize(feed: List[Article], user: User): List[FeedItem] =\n  user.preferences\n    .getOrElse(List.empty)\n    .flatMap(pref => feed.filter(_.topic == pref))\n    .map(a => FeedItem(user.id, a))","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_326","timestamp":1745438319123,"code":"import scala.util.Try\n\ndef parseArticle(json: String): Try[Article] = Try {\n  val fields = json.split(\",\")\n  Article(fields(0), fields(1), fields(2))\n}\n\nval parsed = parseArticle(\"1,tech,Scala 2.13 Released\")","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_327","timestamp":1745438319123,"code":"def getFirstPreference(user: User): Option[String] =\n  user.preferences.flatMap(_.headOption)\n\nval firstPref = getFirstPreference(User(\"u1\", Some(List(\"sports\", \"business\"))))","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_328","timestamp":1745438319123,"code":"case class Notification(message: String)\n\ndef createNotification(user: User, article: Option[Article]): Option[Notification] =\n  for {\n    a <- article\n  } yield Notification(s\"New article for ${user.id}: ${a.topic}\")","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_329","timestamp":1745438319123,"code":"def loadUser(id: String): Either[String, User] =\n  if (id.nonEmpty) Right(User(id, Some(List(\"sports\"))))\n  else Left(\"User not found\")\n\nval userResult: Either[String, User] = loadUser(\"\")","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_330","timestamp":1745438319123,"code":"def getRecommendedArticles(articles: List[Article], user: User): List[Article] =\n  user.preferences\n    .map(prefs => articles.filter(a => prefs.contains(a.topic)))\n    .getOrElse(Nil)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_331","timestamp":1745438319123,"code":"case class Feed(items: List[FeedItem])\n\ndef mergeFeeds(f1: Feed, f2: Feed): Feed =\n  Feed((f1.items ++ f2.items).distinct)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_332","timestamp":1745438319123,"code":"import scala.util.Try\n\ndef safeSubstring(s: String, end: Int): Option[String] =\n  Try(s.substring(0, end)).toOption\n\nval preview: Option[String] = safeSubstring(\"Breaking news!\", 20)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_333","timestamp":1745438319123,"code":"def getTopicCount(user: User, articles: List[Article]): Int =\n  user.preferences\n    .map(prefs => articles.count(a => prefs.contains(a.topic)))\n    .getOrElse(0)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_334","timestamp":1745438319123,"code":"def lastReadArticle(userFeeds: Map[String, List[Article]], userId: String): Option[Article] =\n  userFeeds.get(userId).flatMap(_.lastOption)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_335","timestamp":1745438319123,"code":"case class Bookmark(userId: String, articleId: String)\n\ndef addBookmark(bookmarks: Set[Bookmark], bookmark: Bookmark): Set[Bookmark] =\n  bookmarks + bookmark","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_336","timestamp":1745438319123,"code":"def safeParseInt(str: String): Either[String, Int] =\n  scala.util.Try(str.toInt).toEither.left.map(_ => s\"Failed to parse '$str' as Int\")\n\nval result = safeParseInt(\"abc\")","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_337","timestamp":1745438319123,"code":"def maybePromote(article: Article): Option[String] =\n  if (article.topic == \"sponsored\") Some(\"Promoted\") else None","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_338","timestamp":1745438319124,"code":"def getLatestTopic(user: User): Option[String] =\n  user.preferences.flatMap(_.lastOption)\n\nval latest = getLatestTopic(User(\"abc\", Some(List(\"news\", \"finance\"))))","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_339","timestamp":1745438319124,"code":"case class Subscription(userId: String, topics: List[String])\nval sub = Subscription(\"alex\", List(\"economy\", \"science\"))","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_340","timestamp":1745438319124,"code":"def filterByKeyword(articles: List[Article], keyword: String): List[Article] =\n  articles.filter(_.content.contains(keyword))","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_341","timestamp":1745438319124,"code":"import scala.util.Try\n\ndef recommendTopArticle(user: User, articles: List[Article]): Try[FeedItem] = Try {\n  val topic = user.preferences.getOrElse(Nil).head\n  val article = articles.find(_.topic == topic).get\n  FeedItem(user.id, article)\n}","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_342","timestamp":1745438319124,"code":"def removeUser(u: Option[User]): List[User] = u.toList","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_343","timestamp":1745438341098,"code":"case class ChargingStation(id: String, name: String, location: (Double, Double))","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_344","timestamp":1745438341099,"code":"def findStationById(id: String, stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.find(_.id == id)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_345","timestamp":1745438341099,"code":"val maybePort: Option[Int] = Some(3)\nval availablePorts = maybePort.getOrElse(0)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_346","timestamp":1745438341099,"code":"val addressToStation: Map[String, ChargingStation] = Map(\n  \"Main Street\" -> ChargingStation(\"1\", \"FastCharge\", (40.8, -73.9)),\n  \"Oak Avenue\"  -> ChargingStation(\"2\", \"EcoCharge\", (41.1, -73.5))\n)\nval stationOpt = addressToStation.get(\"Main Street\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_347","timestamp":1745438341099,"code":"def parseChargingRate(rate: String): Either[String, Double] =\n  scala.util.Try(rate.toDouble).toEither.left.map(_ => s\"Invalid rate: $rate\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_348","timestamp":1745438341099,"code":"case class UserQuery(userId: String, position: (Double, Double), preferredNetwork: Option[String])","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_349","timestamp":1745438341099,"code":"val maybeStation: Option[ChargingStation] = None\nval stationName = maybeStation.map(_.name).getOrElse(\"Unknown\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_350","timestamp":1745438341099,"code":"def getStationDetails(name: String, stations: List[ChargingStation]): Option[(String, (Double, Double))] =\n  stations.find(_.name == name).map(s => (s.id, s.location))","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_351","timestamp":1745438341099,"code":"def distance(a: (Double, Double), b: (Double, Double)): Double =\n  math.hypot(a._1 - b._1, a._2 - b._2)\n\ndef closestStation(pos: (Double, Double), stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.minByOption(s => distance(pos, s.location))","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_352","timestamp":1745438341099,"code":"case class ChargingSession(userId: String, stationId: String, startedAt: Long, endedAt: Option[Long])","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_353","timestamp":1745438341099,"code":"def tryParseLocation(s: String): Option[(Double, Double)] =\n  s.split(\",\").map(_.trim).toList match {\n    case lat :: lon :: Nil =>\n      (scala.util.Try(lat.toDouble), scala.util.Try(lon.toDouble)) match {\n        case (scala.util.Success(a), scala.util.Success(b)) => Some((a, b))\n        case _ => None\n      }\n    case _ => None\n  }","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_354","timestamp":1745438341099,"code":"def lookupByName(name: String)(stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.find(_.name.toLowerCase == name.toLowerCase)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_355","timestamp":1745438341099,"code":"case class ChargingNetwork(name: String, stations: List[ChargingStation])\nval networks = List(\n  ChargingNetwork(\"TeslaSupercharger\", List()),\n  ChargingNetwork(\"ChargePoint\", List())\n)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_356","timestamp":1745438341099,"code":"def reservePort(station: ChargingStation, requested: Int, available: Int): Either[String, Int] =\n  if (requested <= available && requested > 0) Right(available - requested)\n  else Left(\"Not enough ports available\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_357","timestamp":1745438341099,"code":"val loc: Option[(Double, Double)] = Some((40.7128, -74.0060))\nval showLoc = loc.fold(\"No location\")(lc => s\"Lat: ${lc._1}, Lon: ${lc._2}\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_358","timestamp":1745438341099,"code":"def getUserPreferredStation(query: UserQuery, stations: List[ChargingStation]): Option[ChargingStation] =\n  query.preferredNetwork.flatMap { nw =>\n    stations.find(_.name == nw)\n  }","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_359","timestamp":1745438341099,"code":"def safeDivide(x: Double, y: Double): Either[String, Double] =\n  if (y == 0) Left(\"Division by zero\") else Right(x / y)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_360","timestamp":1745438341099,"code":"case class PricePerKWh(value: Double)\ndef parsePrice(s: String): Option[PricePerKWh] =\n  scala.util.Try(s.toDouble).toOption.filter(_ > 0).map(PricePerKWh)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_361","timestamp":1745438341099,"code":"val maybeSession: Option[ChargingSession] = Some(ChargingSession(\"user1\", \"station2\", 1661234567890L, None))\nval isActive = maybeSession.exists(_.endedAt.isEmpty)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_362","timestamp":1745438341099,"code":"def getUniqueStationNames(stations: List[ChargingStation]): Set[String] =\n  stations.map(_.name).toSet","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_363","timestamp":1745438377980,"code":"case class Crop(name: String, growthStage: Option[String])\nval wheat = Crop(\"Wheat\", Some(\"Seedling\"))\nval unknown = Crop(\"Unknown\", None)\nval stage = wheat.growthStage.getOrElse(\"No data\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_364","timestamp":1745438377981,"code":"import scala.util.Try\ncase class TemperatureReading(cropId: Int, temperatureC: Double)\ndef parseTemperature(input: String): Try[TemperatureReading] = Try {\n  val parts = input.split(\",\")\n  TemperatureReading(parts(0).toInt, parts(1).toDouble)\n}","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_365","timestamp":1745438377981,"code":"case class Field(id: Int, areaHectares: Double, lastIrrigated: Option[String])\nval field1 = Field(5, 12.2, Some(\"2024-04-10\"))\nval field2 = Field(6, 15.0, None)\nval irrigation = field2.lastIrrigated.getOrElse(\"Irrigation date missing\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_366","timestamp":1745438377981,"code":"case class SoilMoisture(sensorId: Int, moistureLevel: Option[Double])\ndef moistureAlert(soil: SoilMoisture): String = soil.moistureLevel match {\n  case Some(level) if level < 20.0 => \"Low Moisture!\"\n  case Some(_) => \"Moisture OK.\"\n  case None => \"Sensor error.\"\n}\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_367","timestamp":1745438377981,"code":"import scala.util.Try\ncase class Rainfall(day: String, mm: Int)\ndef safeRainfall(mmStr: String): Either[String, Rainfall] =\n  Try(mmStr.split(\":\")).toOption.flatMap(arr =>\n    if (arr.length == 2) Some(Rainfall(arr(0), arr(1).toInt)) else None\n  ).toRight(\"Malformed input\")","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_368","timestamp":1745438377981,"code":"case class PestReport(crop: String, pest: Option[String])\nval report = PestReport(\"Corn\", None)\nval pestInfo: String = report.pest.getOrElse(\"No pest detected.\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_369","timestamp":1745438377981,"code":"case class CropHealth(cropId: Int, ndvi: Option[Double])\nval health = CropHealth(3, Some(0.68))\nval adjustedNdvi = health.ndvi.map(_ + 0.01).getOrElse(0.0)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_370","timestamp":1745438377981,"code":"case class Sensor(id: String, status: Option[String])\nval sensor = Sensor(\"S-100\", None)\nval status = sensor.status.getOrElse(\"Status unknown\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_371","timestamp":1745438377981,"code":"case class YieldForecast(crop: String, estimateTons: Option[Double])\ndef doubleEstimate(yf: YieldForecast): YieldForecast =\n  yf.copy(estimateTons = yf.estimateTons.map(_ * 2))\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_372","timestamp":1745438377981,"code":"import scala.util.Try\ncase class FertilizerApplication(fieldId: Int, amountKg: Double)\ndef tryFertilizer(data: String): Try[FertilizerApplication] = Try {\n  val Array(fid, amt) = data.split(\",\")\n  FertilizerApplication(fid.toInt, amt.toDouble)\n}","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_373","timestamp":1745438377981,"code":"case class DiseaseObservation(cropId: Int, disease: Option[String])\ndef isInfected(obs: DiseaseObservation): Boolean =\n  obs.disease.exists(_.nonEmpty)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_374","timestamp":1745438377981,"code":"case class WeatherData(temp: Option[Double], humidity: Option[Double])\nval wd = WeatherData(Some(25.0), None)\nval humidityString = wd.humidity.fold(\"Humidity not recorded\")(_.toString)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_375","timestamp":1745438377981,"code":"case class CropVariety(name: String, droughtResistant: Boolean)\nval varieties = List(\n  CropVariety(\"Maize A\", true),\n  CropVariety(\"Maize B\", false)\n)\nval droughtVarieties = varieties.filter(_.droughtResistant)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_376","timestamp":1745438377981,"code":"import scala.util.Try\ncase class PlotMeasurement(plotId: Int, length: Double, width: Double)\ndef safeArea(input: String): Either[String, Double] =\n  Try {\n    val Array(_, l, w) = input.split(\",\")\n    l.toDouble * w.toDouble\n  }.toEither.left.map(_ => \"Invalid measurement input\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_377","timestamp":1745438377981,"code":"case class NitrogenLevel(fieldId: Int, ppm: Option[Double])\ndef nitrogenWarning(nl: NitrogenLevel): String = nl.ppm match {\n  case Some(value) if value < 10 => \"Low Nitrogen!\"\n  case Some(_) => \"Nitrogen OK\"\n  case None => \"Measurement missing\"\n}\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_378","timestamp":1745438377981,"code":"case class IrrigationEvent(field: String, timestamp: Option[Long])\ndef lastWatered(event: IrrigationEvent): Long =\n  event.timestamp.getOrElse(0L)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_379","timestamp":1745438377981,"code":"case class SensorReading(sensorId: String, value: Option[Double])\ndef failover(sensor: SensorReading, backup: Option[Double]): Double =\n  sensor.value.orElse(backup).getOrElse(-1.0)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_380","timestamp":1745438377981,"code":"case class CropSampling(crop: String, sampleId: Int, proteinContent: Option[Double])\ndef isHighProtein(sample: CropSampling): Boolean =\n  sample.proteinContent.exists(_ > 11)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_381","timestamp":1745438377981,"code":"import scala.util.Try\ncase class PHReading(field: String, pH: Double)\ndef safePH(str: String): Either[String, PHReading] =\n  Try {\n    val Array(field, ph) = str.split(\",\")\n    PHReading(field, ph.toDouble)\n  }.toEither.left.map(_ => \"Bad data for pH\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_382","timestamp":1745438377981,"code":"case class CropDeficiency(crop: String, deficiency: Option[String])\nval deficiencies = List(\n  CropDeficiency(\"Soy\", Some(\"Iron\")),\n  CropDeficiency(\"Wheat\", None)\n)\nval allReported = deficiencies.flatMap(_.deficiency)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_383","timestamp":1745438397500,"code":"case class TemperatureSensor(id: String, value: Option[Double])\nval temp = TemperatureSensor(\"t-1001\", Some(21.8))\ntemp.value.getOrElse(0.0)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_384","timestamp":1745438397500,"code":"import scala.util.Try\n\ndef parseHumidity(data: String): Try[Double] = Try(data.toDouble)\nval res = parseHumidity(\"45.7\").getOrElse(0.0)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_385","timestamp":1745438397501,"code":"case class SensorReading(sensorId: String, timestamp: Long, reading: Option[Double])\nval reading = SensorReading(\"p-23\", 1618910201L, None)\nval value = reading.reading.fold(\"no data\")(_.toString)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_386","timestamp":1745438397501,"code":"case class AggregatedData(sensorId: String, avg: Double, min: Double, max: Double)\nval agg = AggregatedData(\"t-200\", 16.5, 10.7, 22.0)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_387","timestamp":1745438397501,"code":"def safeDivide(a: Double, b: Double): Either[String, Double] =\n  if (b == 0) Left(\"division by zero\") else Right(a / b)\nsafeDivide(50.0, 4.0).getOrElse(0.0)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_388","timestamp":1745438397501,"code":"import scala.util.Try\ncase class MotionEvent(sensorId: String, detected: Boolean)\ndef parseMotion(input: String): Try[MotionEvent] =\n  Try(MotionEvent(input.takeWhile(_ != ':'), input.endsWith(\"true\")))\nparseMotion(\"s-5:true\").getOrElse(MotionEvent(\"unknown\", false))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_389","timestamp":1745438397501,"code":"case class SensorMeta(id: String, location: Option[String])\nval m1 = SensorMeta(\"light-44\", Some(\"lab\"))\nval locMsg = m1.location.map(loc => s\"Located at $loc\").getOrElse(\"Location unknown\")","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_390","timestamp":1745438397501,"code":"def calculateAvg(values: Seq[Double]): Option[Double] =\n  if (values.isEmpty) None else Some(values.sum / values.size)\ncalculateAvg(Seq(1.5, 2.5, 3.5)).getOrElse(0.0)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_391","timestamp":1745438397501,"code":"import scala.util.Try\ncase class PressureData(sensor: String, value: Double)\ndef fromStr(data: String): Try[PressureData] = Try {\n  val Array(id, v) = data.split(\",\")\n  PressureData(id, v.toDouble)\n}\nfromStr(\"p-11,1024.0\").toOption","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_392","timestamp":1745438397501,"code":"case class LightReading(id: String, intensity: Option[Int])\ndef status(reading: LightReading): String =\n  reading.intensity.map(i => s\"Intensity: $i\").getOrElse(\"No Data Available\")\nstatus(LightReading(\"l-3\", None))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_393","timestamp":1745438397501,"code":"def combineReadings(a: Option[Double], b: Option[Double]): Option[Double] = for {\n  va <- a\n  vb <- b\n} yield va + vb\ncombineReadings(Some(2.0), None)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_394","timestamp":1745438397501,"code":"import scala.util.Try\ncase class BatteryStatus(sensor: String, percent: Int)\ndef safeParse(status: String): Option[BatteryStatus] =\n  Try {\n    val Array(s, p) = status.split(\"/\")\n    BatteryStatus(s, p.toInt)\n  }.toOption\nsafeParse(\"vib-1/88\")","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_395","timestamp":1745438397501,"code":"case class DataPacket(id: String, data: Option[Double], error: Option[String])\ndef processPacket(packet: DataPacket): Double =\n  packet.data.getOrElse(-1.0)\nprocessPacket(DataPacket(\"xyz\", None, Some(\"timeout\")))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_396","timestamp":1745438397501,"code":"def getLastReading(readings: Seq[SensorReading]): Option[SensorReading] =\n  readings.sortBy(-_.timestamp).headOption\nval readings = Seq(SensorReading(\"s1\", 100, Some(1.1)), SensorReading(\"s2\", 80, None))\ngetLastReading(readings)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_397","timestamp":1745438397501,"code":"case class DoorSensor(id: String, open: Boolean, lastActivity: Option[Long])\nval ds = DoorSensor(\"door-7\", true, Some(1620000123L))\nds.lastActivity.map(ts => s\"Active at $ts\").getOrElse(\"No activity\")","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_398","timestamp":1745438397501,"code":"case class SensorGroup(groupId: String, sensors: Seq[String])\nval g = SensorGroup(\"grp-2\", Seq(\"temp-2\", \"hum-3\"))\ng.sensors.find(_.startsWith(\"temp\"))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_399","timestamp":1745438397501,"code":"import scala.util.Try\ndef parseBoolean(s: String): Either[String, Boolean] = Try(s.toBoolean).toEither.left.map(_ => \"not a boolean\")\nparseBoolean(\"true\")","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_400","timestamp":1745438397501,"code":"def failedReadings(readings: Seq[Option[Double]]): Int = readings.count(_.isEmpty)\nfailedReadings(Seq(Some(3.2), None, Some(4.5), None))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_401","timestamp":1745438397501,"code":"case class SensorError(id: String, msg: String)\ndef handleEither(e: Either[SensorError, Double]): Double = e match {\n  case Right(value) => value\n  case Left(err) => -1.0\n}\nhandleEither(Left(SensorError(\"s-3\", \"Overheat\")))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_402","timestamp":1745438397501,"code":"def aggregateValid(readings: List[Option[Double]]): Double =\n  readings.flatten.sum\naggregateValid(List(Some(0.5), None, Some(0.7)))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_403","timestamp":1745438397501,"code":"case class AggregationResult(avg: Option[Double], count: Int)\ndef aggregate(readings: List[Option[Double]]): AggregationResult = {\n  val vals = readings.flatten\n  AggregationResult(if (vals.isEmpty) None else Some(vals.sum / vals.size), vals.size)\n}\naggregate(List(Some(2), None, Some(4)) )","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_404","timestamp":1745438415601,"code":"case class Stop(id: String, name: String)\nval mainStation = Stop(\"001\", \"Main Station\")\nprintln(mainStation)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_405","timestamp":1745438415601,"code":"case class TransitLine(name: String, stops: List[String])\nval metro = TransitLine(\"Metro A\", List(\"A1\", \"A2\", \"A3\"))\nprintln(metro.stops.headOption.getOrElse(\"No stops available\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_406","timestamp":1745438415601,"code":"def findStop(stops: List[Stop], name: String): Option[Stop] =\n  stops.find(_.name == name)\nval stops = List(Stop(\"S1\", \"Central\"), Stop(\"S2\", \"East\"))\nval result = findStop(stops, \"North\").getOrElse(Stop(\"\", \"Unknown\"))\nprintln(result)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_407","timestamp":1745438415601,"code":"def parseStop(text: String): Either[String, Stop] =\n  text.split(\",\").toList match {\n    case id :: name :: Nil => Right(Stop(id, name))\n    case _ => Left(\"Invalid input format\")\n  }\nprintln(parseStop(\"100,Airport\"))\nprintln(parseStop(\"Nope\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_408","timestamp":1745438415601,"code":"import scala.util.Try\ncase class Timetable(stopId: String, times: List[String])\ndef safeParseTimes(line: String): Try[Timetable] = Try {\n  val Array(stopId, timesStr) = line.split(\":\")\n  Timetable(stopId, timesStr.split(\",\").toList)\n}\nprintln(safeParseTimes(\"S1:08:00,09:00\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_409","timestamp":1745438415601,"code":"case class Trip(origin: String, destination: String, durationMin: Int)\nval trip: Option[Trip] = Some(Trip(\"A\", \"B\", 18))\nval summary = trip.map(t => s\"From ${t.origin} to ${t.destination} in ${t.durationMin} min\").getOrElse(\"No trip\")\nprintln(summary)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_410","timestamp":1745438415602,"code":"def getNextStop(line: TransitLine, current: String): Option[String] =\n  line.stops.dropWhile(_ != current) match {\n    case _ :: next :: _ => Some(next)\n    case _ => None\n  }\nval metro = TransitLine(\"Metro B\", List(\"Start\", \"Mid\", \"End\"))\nprintln(getNextStop(metro, \"Mid\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_411","timestamp":1745438415602,"code":"import scala.util.Try\ncase class Fare(amount: Double)\ndef calculateFare(distance: String): Try[Fare] = Try {\n  Fare(distance.toDouble * 2.5)\n}\ncalculateFare(\"12\").foreach(f => println(f.amount))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_412","timestamp":1745438415602,"code":"case class Route(id: String, stops: List[String])\nval routeOpt: Option[Route] = None\nval stops = routeOpt.map(_.stops).getOrElse(List.empty)\nprintln(stops)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_413","timestamp":1745438415602,"code":"case class Rider(name: String, preferredLine: Option[TransitLine])\ndef printPreference(r: Rider): Unit = r.preferredLine match {\n  case Some(line) => println(s\"Prefers ${line.name}\")\n  case None => println(\"No preference\")\n}\nprintPreference(Rider(\"Alex\", None))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_414","timestamp":1745438415602,"code":"import scala.util.Try\ndef readRouteId(input: String): Either[String, String] =\n  Try(input.trim).toEither.left.map(_ => \"Failed to parse route id\")\nprintln(readRouteId(\" 23 \"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_415","timestamp":1745438415602,"code":"case class Transfer(from: String, to: String, waitMinutes: Int)\ndef possibleTransfer(wait: Int): Option[Transfer] =\n  if (wait < 15) Some(Transfer(\"Blue\", \"Red\", wait)) else None\npossibleTransfer(10).foreach(t => println(t.waitMinutes))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_416","timestamp":1745438415602,"code":"case class Schedule(stop: String, times: Option[List[String]])\nval schedule = Schedule(\"Downtown\", Some(List(\"10:00\", \"11:00\")))\nschedule.times.flatMap(_.headOption).foreach(println)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_417","timestamp":1745438415602,"code":"def safeLastStop(stops: List[String]): Option[String] = stops.lastOption\nval lineStops = List(\"A\", \"B\", \"C\")\nprintln(safeLastStop(lineStops).getOrElse(\"No stops\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_418","timestamp":1745438415602,"code":"import scala.util.Try\ndef safeDivide(a: Int, b: Int): Either[String, Int] =\n  Try(a / b).toEither.left.map(_ => \"Division by zero\")\nprintln(safeDivide(10, 2))\nprintln(safeDivide(5, 0))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_419","timestamp":1745438415602,"code":"case class Connection(line: String, atStop: String)\nval conn: Option[Connection] = Some(Connection(\"Green\", \"Elm\"))\nval description = conn match {\n  case Some(Connection(line, stop)) => s\"Connect at $stop via $line\"\n  case None => \"No connection\"\n}\nprintln(description)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_420","timestamp":1745438415602,"code":"case class Vehicle(id: String, kind: String)\ndef findVehicle(vehicles: List[Vehicle], id: String): Option[Vehicle] = vehicles.find(_.id == id)\nval vehicleList = List(Vehicle(\"V1\", \"Bus\"))\nprintln(findVehicle(vehicleList, \"V2\").getOrElse(Vehicle(\"\", \"Unknown\")))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_421","timestamp":1745438415602,"code":"import scala.util.Try\ncase class GeoCoord(lat: Double, lon: Double)\ndef parseCoord(str: String): Try[GeoCoord] = Try {\n  val Array(lat, lon) = str.split(\",\")\n  GeoCoord(lat.toDouble, lon.toDouble)\n}\nprintln(parseCoord(\"51.5,0.1\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_422","timestamp":1745438415602,"code":"case class Alert(message: String)\ndef formatAlert(optMsg: Option[String]): Alert = Alert(optMsg.getOrElse(\"No message\"))\nprintln(formatAlert(Some(\"Delay at Central\")))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_423","timestamp":1745438415602,"code":"case class Itinerary(stops: List[String], totalMinutes: Int)\ndef extendItinerary(it: Option[Itinerary], extraStop: String, addTime: Int): Option[Itinerary] =\n  it.map(i => i.copy(stops = i.stops :+ extraStop, totalMinutes = i.totalMinutes + addTime))\nprintln(extendItinerary(Some(Itinerary(List(\"A\"), 10)), \"B\", 5))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_424","timestamp":1745438432273,"code":"case class Product(sku: String, name: String, price: BigDecimal)\nval maybeProduct: Option[Product] = Some(Product(\"1001\", \"Milk\", 2.99))\nval priceWithFallback = maybeProduct.map(_.price).getOrElse(0.0)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_425","timestamp":1745438432273,"code":"case class Customer(id: Long, email: Option[String])\nval customer = Customer(10, None)\nval emailString = customer.email.getOrElse(\"no-email@unknown.com\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_426","timestamp":1745438432273,"code":"import scala.util.Try\ncase class Payment(amount: BigDecimal, method: String)\ndef parsePayment(input: String): Try[Payment] = Try {\n  val parts = input.split(\",\")\n  Payment(BigDecimal(parts(0)), parts(1))\n}","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_427","timestamp":1745438432273,"code":"case class Discount(code: String, percentage: Option[Int])\nval maybeDiscount = Some(Discount(\"BLACKFRIDAY\", Some(10)))\nval discountAmount = maybeDiscount.flatMap(_.percentage).getOrElse(0)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_428","timestamp":1745438432273,"code":"val maybeBarcode: Option[String] = None\nval barcodeMsg = maybeBarcode match {\n  case Some(code) => s\"Processing barcode: $code\"\n  case None => \"Barcode missing. Please scan again.\"\n}","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_429","timestamp":1745438432273,"code":"case class Item(name: String, price: BigDecimal)\nval maybeCart: Option[List[Item]] = Some(List(Item(\"Shirt\", 20.0)))\nval total = maybeCart.map(_.map(_.price).sum).getOrElse(0.0)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_430","timestamp":1745438432273,"code":"import scala.util.Try\ndef toIntOption(str: String): Option[Int] = Try(str.toInt).toOption\nval enteredQty = toIntOption(\"5\").getOrElse(1)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_431","timestamp":1745438432273,"code":"case class Register(id: Int, location: Option[String])\nval registerInfo = Register(2, Some(\"Front Store\"))\nval loc = registerInfo.location.fold(\"Unknown location\")(identity)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_432","timestamp":1745438432273,"code":"import scala.util.Try\ncase class Sale(amount: BigDecimal)\ndef parseSaleAmount(input: String): Either[String, Sale] = Try(Sale(BigDecimal(input))).toEither.left.map(_ => \"Invalid amount\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_433","timestamp":1745438432273,"code":"case class LoyaltyCard(number: String)\ndef lookupLoyaltyCard(maybeNum: Option[String]): Option[LoyaltyCard] = maybeNum.map(LoyaltyCard)\nval result = lookupLoyaltyCard(None)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_434","timestamp":1745438432273,"code":"case class Receipt(items: List[String], total: BigDecimal)\ndef printReceipt(receipt: Option[Receipt]): Unit = receipt.foreach(r => println(s\"Total: $${r.total}\"))","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_435","timestamp":1745438432273,"code":"case class InventoryUpdate(item: String, change: Int)\nval updates: List[Option[InventoryUpdate]] = List(Some(InventoryUpdate(\"Soda\", 5)), None)\nval justUpdates = updates.flatten","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_436","timestamp":1745438432273,"code":"case class User(id: Long, name: String)\ndef fetchUser(id: Long): Option[User] = if (id == 1) Some(User(1, \"Alex\")) else None\nval user = fetchUser(5).map(_.name).getOrElse(\"Guest\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_437","timestamp":1745438432273,"code":"import scala.util.Try\ndef safeDouble(str: String): Option[Double] = Try(str.toDouble).toOption\nsafeDouble(\"abc\").orElse(Some(0.0))","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_438","timestamp":1745438432273,"code":"case class Terminal(id: String, isActive: Boolean)\ndef isTerminalOnline(maybeTerminal: Option[Terminal]): Boolean = maybeTerminal.exists(_.isActive)\nval active = isTerminalOnline(Some(Terminal(\"POS01\", true)))","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_439","timestamp":1745438432273,"code":"case class Refund(originalPaymentId: String, amount: BigDecimal)\ndef processRefund(refund: Refund): Either[String, String] =\n  if (refund.amount > 0) Right(\"Refund processed.\") else Left(\"Amount must be positive.\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_440","timestamp":1745438432273,"code":"case class Promotion(name: String, details: Option[String])\nval promotion = Promotion(\"Weekend Sale\", None)\nval detailsText = promotion.details.fold(\"No details.\")(d => s\"Details: $d\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_441","timestamp":1745438432273,"code":"case class Basket(items: List[String])\ndef basketSize(optBasket: Option[Basket]): Int = optBasket.map(_.items.size).getOrElse(0)\nbasketSize(None)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_442","timestamp":1745438432273,"code":"import scala.util.Try\ndef parseProductId(input: String): Either[String, Int] =\n  Try(input.toInt).toEither.left.map(_ => \"Invalid product ID\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_443","timestamp":1745438432273,"code":"case class Store(name: String, address: String)\ndef findStoreByName(name: String): Option[Store] =\n  if (name == \"Central\") Some(Store(\"Central\", \"123 High St\")) else None\nval address = findStoreByName(\"Central\").map(_.address).getOrElse(\"Unknown\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_444","timestamp":1745438448180,"code":"case class MortgageInput(principal: Double, rate: Double, years: Int)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_445","timestamp":1745438448180,"code":"val maybePropertyValue: Option[Double] = Some(300000.0)\nval loanAmount = maybePropertyValue.map(_ * 0.8)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_446","timestamp":1745438448181,"code":"def parseInterestRate(s: String): Either[String, Double] =\n  try Right(s.toDouble) catch { case _: Throwable => Left(\"Invalid rate\") }","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_447","timestamp":1745438448181,"code":"case class User(name: String, email: Option[String])\nval user = User(\"Alice\", None)\nval contact = user.email.getOrElse(\"no-email@example.com\")","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_448","timestamp":1745438448181,"code":"def monthlyPayment(principal: Double, rate: Double, years: Int): Option[Double] =\n  if (rate <= 0 || years <= 0) None\n  else Some(\n    principal * (rate / 12) / (1 - Math.pow(1 + rate / 12, -years * 12))\n  )","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_449","timestamp":1745438448181,"code":"import scala.util.Try\nval n = Try(\"30\".toInt).getOrElse(0)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_450","timestamp":1745438448181,"code":"case class MortgageApplication(applicant: String, income: Option[Double], propertyValue: Option[Double])","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_451","timestamp":1745438448181,"code":"def loanToValue(loan: Double, value: Option[Double]): Option[Double] =\n  value.map(v => loan / v)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_452","timestamp":1745438448181,"code":"import scala.util.Try\ndef safeDivideLoan(loan: Double, divisor: String): Option[Double] =\n  Try(divisor.toDouble).toOption.filter(_ != 0).map(loan / _)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_453","timestamp":1745438448181,"code":"case class MortgageResult(monthlyPayment: Double, totalCost: Double)\ndef calculate(principal: Double, rate: Double, years: Int): Either[String, MortgageResult] =\n  if (principal <= 0 || rate <= 0 || years <= 0) Left(\"Inputs must be positive\")\n  else Right(\n    {\n      val pmt = principal * (rate / 12) / (1 - math.pow(1 + rate / 12, -years * 12))\n      MortgageResult(pmt, pmt * years * 12)\n    }\n  )","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_454","timestamp":1745438448181,"code":"val applicantIncome: Option[Double] = None\nval maxLoan = applicantIncome.map(_ * 4).getOrElse(0.0)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_455","timestamp":1745438448181,"code":"case class InterestRate(value: Double)\ndef validRate(input: String): Option[InterestRate] =\n  scala.util.Try(input.toDouble).toOption.filter(_ > 0).map(InterestRate)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_456","timestamp":1745438448181,"code":"def parseYear(year: String): Either[String, Int] =\n  scala.util.Try(year.toInt).toEither.left.map(_ => \"Invalid year\")","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_457","timestamp":1745438448181,"code":"case class MortgageQuote(input: MortgageInput, monthly: Double)\ndef quote(input: MortgageInput): Option[MortgageQuote] =\n  monthlyPayment(input.principal, input.rate, input.years)\n    .map(mp => MortgageQuote(input, mp))","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_458","timestamp":1745438448181,"code":"def getApplicantName(data: Map[String, String]): Option[String] =\n  data.get(\"name\").filter(_.nonEmpty)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_459","timestamp":1745438448181,"code":"val rateInput: Option[String] = Some(\"0.045\")\nval interestRate: Option[Double] = rateInput.flatMap(s => scala.util.Try(s.toDouble).toOption)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_460","timestamp":1745438448181,"code":"def calculateTotalPayment(payment: Double, years: Int): Either[String, Double] =\n  if (years < 0) Left(\"Years must be positive\")\n  else Right(payment * years * 12)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_461","timestamp":1745438448181,"code":"case class Borrower(name: String, age: Option[Int])\ndef isEligible(b: Borrower): Boolean =\n  b.age.exists(_ >= 18)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_462","timestamp":1745438448181,"code":"def parsePrincipal(s: String): Option[Double] =\n  scala.util.Try(s.trim.toDouble).toOption.filter(_ > 0)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_463","timestamp":1745438448181,"code":"case class DownPayment(amount: Double)\ndef checkDownPayment(input: Option[Double]): Either[String, DownPayment] =\n  input.filter(_ >= 10000)\n    .map(DownPayment)\n    .toRight(\"Down payment too low\")","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_464","timestamp":1745438467402,"code":"case class SensorReading(id: String, value: Double, timestamp: Long)\nval readingOpt: Option[SensorReading] = Some(SensorReading(\"temp001\", 72.5, 1627892461L))\nreadingOpt.map(_.value).getOrElse(0.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_465","timestamp":1745438467402,"code":"case class MachineStatus(machineId: String, isActive: Boolean)\ndef isMachineActive(status: Option[MachineStatus]): Boolean =\n  status.map(_.isActive).getOrElse(false)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_466","timestamp":1745438467402,"code":"import scala.util.Try\n\ndef parseTemperature(s: String): Try[Double] = Try(s.toDouble)\nval temp = parseTemperature(\"85.6\").getOrElse(0.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_467","timestamp":1745438467402,"code":"case class TelemetryEvent(machineId: String, reading: Option[SensorReading])\ndef averageReading(event: TelemetryEvent): Double =\n  event.reading.map(_.value).getOrElse(-1.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_468","timestamp":1745438467402,"code":"import scala.util.Try\n\ndef parseSensorReading(data: String): Try[SensorReading] = {\n  val parts = data.split(\",\")\n  Try(SensorReading(parts(0), parts(1).toDouble, parts(2).toLong))\n}","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_469","timestamp":1745438467402,"code":"case class Alarm(code: String, description: Option[String])\ndef alarmMessage(alarm: Alarm): String =\n  alarm.description.getOrElse(\"No description available\")","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_470","timestamp":1745438467402,"code":"import scala.util.Try\n\ncase class EngineRpm(rpm: Int)\ndef safeRpm(s: String): Option[EngineRpm] = Try(s.toInt).toOption.map(EngineRpm(_))","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_471","timestamp":1745438467403,"code":"case class VibrationData(axis: String, magnitude: Option[Double])\ndef checkVibration(data: VibrationData): String =\n  data.magnitude.map(m => s\"$m m/s^2\").getOrElse(\"No data\")","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_472","timestamp":1745438467403,"code":"import scala.util.Try\n\ndef readPowerValue(input: String): Either[String, Double] =\n  Try(input.toDouble).toEither.left.map(_ => \"Invalid power value\")","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_473","timestamp":1745438467403,"code":"case class MachineSnapshot(id: String, readings: Map[String, Option[Double]])\ndef getPressure(snapshot: MachineSnapshot): Option[Double] =\n  snapshot.readings.get(\"pressure\").flatten","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_474","timestamp":1745438467403,"code":"case class OilLevel(machineId: String, level: Option[Double])\nval levelResult = OilLevel(\"mx-22\", None)\nval displayLevel = levelResult.level.getOrElse(-1.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_475","timestamp":1745438467403,"code":"case class Metric(name: String, value: Option[Double])\ndef toJson(m: Metric): String =\n  m.value.map(v => s\"{\\\"${m.name}\\\": $v}\").getOrElse(\"{}\")","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_476","timestamp":1745438467403,"code":"case class Fault(code: Int, msg: String)\ndef parseFault(s: String): Option[Fault] = {\n  s.split(\"-\") match {\n    case Array(c, m) => Try(c.toInt).toOption.map(code => Fault(code, m))\n    case _ => None\n  }\n}","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_477","timestamp":1745438467403,"code":"import scala.util.Try\n\ndef readTemperature(data: Map[String, String]): Option[Double] =\n  data.get(\"temperature\").flatMap(s => Try(s.toDouble).toOption)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_478","timestamp":1745438467403,"code":"case class TelemetryBatch(readings: List[SensorReading])\ndef highestReading(batch: TelemetryBatch): Option[Double] =\n  if (batch.readings.isEmpty) None else Some(batch.readings.map(_.value).max)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_479","timestamp":1745438467403,"code":"case class BatteryStatus(voltage: Option[Double], health: String)\ndef voltageOk(status: BatteryStatus): Boolean =\n  status.voltage.exists(_ > 12.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_480","timestamp":1745438467403,"code":"case class FlowMeasurement(rate: Double, timestamp: Long)\ndef toOption(measurement: Either[String, FlowMeasurement]): Option[FlowMeasurement] =\n  measurement.toOption","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_481","timestamp":1745438467403,"code":"case class CoolingSystem(temp: Option[Double], fanRunning: Boolean)\nval cooling = CoolingSystem(Some(56.2), fanRunning = true)\nval displayTemp = cooling.temp.fold(\"No temp\")(_.toString)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_482","timestamp":1745438467403,"code":"case class TelemetryRecord(sensor: String, value: Either[String, Double])\ndef safeValue(record: TelemetryRecord): Double =\n  record.value.getOrElse(0.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_483","timestamp":1745438467403,"code":"case class PressureInfo(sensorId: String, pressure: Option[Double], timestamp: Long)\ndef stablePressure(p: PressureInfo): Boolean =\n  p.pressure.exists(_ > 30.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_484","timestamp":1745438492290,"code":"case class Player(id: String, username: String)\nval somePlayer: Option[Player] = Some(Player(\"1\", \"GamerVR\"))\nsomePlayer.map(_.username.toUpperCase)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_485","timestamp":1745438492290,"code":"case class GameLobby(id: Int, name: String)\ndef findLobbyById(id: Int, lobbies: List[GameLobby]): Option[GameLobby] =\n  lobbies.find(_.id == id)\nfindLobbyById(2, List(GameLobby(1, \"Arena\"), GameLobby(2, \"SpaceWars\"))).getOrElse(GameLobby(0, \"None\"))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_486","timestamp":1745438492290,"code":"case class VRDevice(serial: String, firmwareVersion: Option[String])\nval device = VRDevice(\"ABC123\", None)\nval version = device.firmwareVersion.getOrElse(\"unknown\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_487","timestamp":1745438492290,"code":"import scala.util.Try\n\ndef parsePlayerScore(input: String): Try[Int] = Try(input.toInt)\nparsePlayerScore(\"200\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_488","timestamp":1745438492290,"code":"import scala.util.{Try, Success, Failure}\n\ndef loadLobbyConfig(path: String): Either[String, String] =\n  Try(scala.io.Source.fromFile(path).getLines.mkString(\"\\n\"))\n    .toEither.left.map(_ => \"Failed to load config\")\nloadLobbyConfig(\"lobby.conf\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_489","timestamp":1745438492290,"code":"case class LobbySettings(maxPlayers: Int, vrMode: Boolean)\nval settings = Some(LobbySettings(8, true))\nsettings.map(_.vrMode).getOrElse(false)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_490","timestamp":1745438492290,"code":"case class GameMode(name: String, minPlayers: Int)\nval modes = List(GameMode(\"Deathmatch\", 2), GameMode(\"Coop\", 4))\ndef modeByName(name: String): Option[GameMode] = modes.find(_.name == name)\nmodeByName(\"Coop\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_491","timestamp":1745438492290,"code":"case class VRRoom(name: String, lobbyId: Int)\ndef roomForLobby(lobbyId: Int, rooms: List[VRRoom]): Option[VRRoom] =\n  rooms.find(_.lobbyId == lobbyId)\nroomForLobby(3, List(VRRoom(\"FutureLab\", 3))).map(_.name)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_492","timestamp":1745438492290,"code":"case class Participant(id: String, isHost: Boolean)\ndef hostParticipant(participants: List[Participant]): Option[Participant] =\n  participants.find(_.isHost)\nhostParticipant(List(Participant(\"x\", false), Participant(\"y\", true)))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_493","timestamp":1745438492290,"code":"import scala.util.Try\n\ndef safeDivide(a: Int, b: Int): Either[String, Int] =\n  Try(a / b).toEither.left.map(_ => \"Division by zero\")\nsafeDivide(100, 0)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_494","timestamp":1745438492290,"code":"case class Invite(player: String, accepted: Boolean)\ndef countAccepted(invites: List[Invite]): Int = invites.count(_.accepted)\ncountAccepted(List(Invite(\"Alice\", true), Invite(\"Bob\", false)))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_495","timestamp":1745438492290,"code":"case class Avatar(id: Int, skin: Option[String])\ndef getSkin(avatar: Avatar): String =\n  avatar.skin.getOrElse(\"defaultSkin\")\ngetSkin(Avatar(1, None))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_496","timestamp":1745438492290,"code":"case class Settings(volume: Int, vrMode: Boolean)\ndef updateVolume(s: Settings, newVol: Option[Int]): Settings =\n  s.copy(volume = newVol.getOrElse(s.volume))\nupdateVolume(Settings(50, true), Some(70))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_497","timestamp":1745438492290,"code":"import scala.util.Try\n\ndef parseLobbyId(str: String): Try[Int] = Try(str.toInt)\nparseLobbyId(\"101\") match {\n  case scala.util.Success(id) => id\n  case scala.util.Failure(_)  => -1\n}","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_498","timestamp":1745438492290,"code":"case class VRSession(id: String, player: Player)\ndef findSession(playerId: String, sessions: List[VRSession]): Option[VRSession] =\n  sessions.find(_.player.id == playerId)\nfindSession(\"42\", List(VRSession(\"a\", Player(\"42\", \"Qubit\"))))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_499","timestamp":1745438492290,"code":"case class LobbyError(reason: String)\ntype LobbyResult[A] = Either[LobbyError, A]\ndef joinLobby(username: String, lobbies: Set[String]): LobbyResult[String] =\n  if (lobbies.contains(username)) Left(LobbyError(\"Username already in use\"))\n  else Right(username)\njoinLobby(\"Eve\", Set(\"Alice\", \"Eve\"))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_500","timestamp":1745438492290,"code":"case class VRSettings(renderDistance: Option[Int])\nval settings = VRSettings(None)\nval dist = settings.renderDistance.getOrElse(500)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_501","timestamp":1745438492290,"code":"case class DeviceStatus(connected: Boolean, lastError: Option[String])\ndef reportStatus(status: DeviceStatus): String =\n  status.lastError.getOrElse(if(status.connected) \"OK\" else \"Disconnected\")\nreportStatus(DeviceStatus(false, None))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_502","timestamp":1745438492290,"code":"case class GameInvite(invitee: String, status: String)\ndef acceptInvite(invites: List[GameInvite], name: String): List[GameInvite] =\n  invites.map(inv => if (inv.invitee == name) inv.copy(status = \"Accepted\") else inv)\nacceptInvite(List(GameInvite(\"Eve\", \"Pending\")), \"Eve\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_503","timestamp":1745438492290,"code":"case class VRLobby(name: String, maxPlayers: Int)\ndef createLobby(name: String, maxPlayers: Int): Either[String, VRLobby] =\n  if (maxPlayers > 0) Right(VRLobby(name, maxPlayers))\n  else Left(\"Max players must be positive\")\ncreateLobby(\"NeoArcade\", 0)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_504","timestamp":1745438492290,"code":"case class Spectator(id: String, watching: Option[String])\ndef spectatorView(s: Spectator): String =\n  s.watching.map(w => s\"Watching $w\").getOrElse(\"Spectator is idle\")\nspectatorView(Spectator(\"s1\", None))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_505","timestamp":1745438512133,"code":"case class Employee(id: Int, name: String)\nval john = Employee(1, \"John Doe\")\nprintln(john)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_506","timestamp":1745438512133,"code":"case class TimeEntry(employeeId: Int, projectId: Option[Int], hours: Double)\nval entry = TimeEntry(1, None, 8.0)\nprintln(entry.projectId.getOrElse(\"No project assigned\"))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_507","timestamp":1745438512133,"code":"val project: Option[String] = Some(\"ScalaRefactor\")\nval displayProject = project.map(_.toUpperCase).getOrElse(\"No Project\")\nprintln(displayProject)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_508","timestamp":1745438512133,"code":"case class ClockIn(employeeId: Int, timestamp: Long)\ndef latestClockIn(entries: List[ClockIn]): Option[ClockIn] = entries.sortBy(_.timestamp).lastOption\nval ins = List(ClockIn(1, 1000), ClockIn(1, 2000))\nprintln(latestClockIn(ins))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_509","timestamp":1745438512133,"code":"import scala.util.Try\ndef parseHours(input: String): Try[Double] = Try(input.toDouble)\nval hours = parseHours(\"8.5\").getOrElse(0.0)\nprintln(hours)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_510","timestamp":1745438512133,"code":"case class Break(start: Long, end: Long)\ndef breakDuration(b: Break): Long = b.end - b.start\nval lunch = Break(1200, 1400)\nprintln(breakDuration(lunch))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_511","timestamp":1745438512133,"code":"case class TimeSheet(employee: Employee, entries: List[TimeEntry])\ndef totalHours(sheet: TimeSheet): Double = sheet.entries.map(_.hours).sum\nval sheet = TimeSheet(Employee(2, \"Alice\"), List(TimeEntry(2, None, 4.0), TimeEntry(2, Some(99), 3.0)))\nprintln(totalHours(sheet))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_512","timestamp":1745438512133,"code":"import scala.util.Try\ndef parseEmployeeId(id: String): Either[String, Int] = Try(id.toInt).toEither.left.map(_ => s\"Invalid ID: $id\")\nprintln(parseEmployeeId(\"abc\"))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_513","timestamp":1745438512133,"code":"case class Shift(employee: Employee, start: Long, end: Option[Long])\ndef duration(shift: Shift): Option[Long] = shift.end.map(_ - shift.start)\nval s = Shift(Employee(4, \"Eve\"), 800, None)\nprintln(duration(s))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_514","timestamp":1745438512133,"code":"case class Overtime(employeeId: Int, hours: Double)\ndef totalOvertime(entries: List[Option[Overtime]]): Double = entries.flatten.map(_.hours).sum\nval overtimeEntries = List(Some(Overtime(1, 2.0)), None, Some(Overtime(2, 1.5)))\nprintln(totalOvertime(overtimeEntries))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_515","timestamp":1745438512133,"code":"def findEmployee(id: Int, db: Map[Int, Employee]): Option[Employee] = db.get(id)\nval empDb = Map(1 -> Employee(1, \"John\"), 2 -> Employee(2, \"Sara\"))\nprintln(findEmployee(3, empDb).getOrElse(Employee(0, \"Unknown\")))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_516","timestamp":1745438512133,"code":"case class ClockEvent(employeeId: Int, clockType: String, timestamp: Long)\ndef isLate(event: ClockEvent, startTime: Long): Boolean = event.clockType == \"IN\" && event.timestamp > startTime\nval event = ClockEvent(10, \"IN\", 900)\nprintln(isLate(event, 800))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_517","timestamp":1745438512133,"code":"import scala.util.Try\ndef hoursWorkedPerDay(entries: List[String]): Try[Double] = Try(entries.map(_.toDouble).sum)\nprintln(hoursWorkedPerDay(List(\"8.0\", \"abc\")))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_518","timestamp":1745438512133,"code":"case class DailyRecord(day: String, entry: Option[TimeEntry])\ndef showRecord(record: DailyRecord): String = record.entry match {\n  case Some(te) => s\"Worked ${te.hours}h on $day\"\n  case None     => s\"No hours for $day\"\n}\nval rec = DailyRecord(\"Monday\", None)\nprintln(showRecord(rec))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_519","timestamp":1745438512133,"code":"def safeDivideHours(total: Double, days: Int): Either[String, Double] =\n  if (days == 0) Left(\"No days worked\") else Right(total / days)\nprintln(safeDivideHours(40.0, 0))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_520","timestamp":1745438512133,"code":"case class Absence(employee: Employee, reason: Option[String])\ndef reasonText(abs: Absence): String = abs.reason.getOrElse(\"No reason provided\")\nprintln(reasonText(Absence(Employee(8, \"Paul\"), None)))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_521","timestamp":1745438512133,"code":"val maybeEntry: Option[TimeEntry] = None\nval result = maybeEntry.map(_.hours).getOrElse(0.0)\nprintln(result)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_522","timestamp":1745438512133,"code":"def logTime(employeeId: Int, hours: Double): Either[String, TimeEntry] =\n  if (hours < 0) Left(\"Negative hours!\") else Right(TimeEntry(employeeId, None, hours))\nprintln(logTime(7, -3.0))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_523","timestamp":1745438512133,"code":"case class TimePeriod(start: Long, end: Option[Long])\ndef finished(tp: TimePeriod): Boolean = tp.end.isDefined\nval period = TimePeriod(1600, None)\nprintln(finished(period))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_524","timestamp":1745438512133,"code":"case class Correction(employeeId: Int, oldHours: Double, newHours: Double)\ndef updatedHours(c: Option[Correction]): Double = c.map(_.newHours).getOrElse(0.0)\nprintln(updatedHours(Some(Correction(2, 8.0, 7.5))))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_525","timestamp":1745438530372,"code":"case class WeatherAlert(area: String, alertType: String, severity: Int)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_526","timestamp":1745438530372,"code":"case class User(id: Int, email: Option[String])\ndef sendAlert(user: User, alert: WeatherAlert): Boolean = user.email.isDefined","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_527","timestamp":1745438530372,"code":"val temperature: Option[Double] = Some(22.4)\nval feelsLike = temperature.map(_ - 1.5).getOrElse(0.0)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_528","timestamp":1745438530372,"code":"import scala.util.Try\ndef parseSeverity(input: String): Try[Int] = Try(input.toInt)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_529","timestamp":1745438530372,"code":"case class NotificationSent(userId: Int, alertType: String)\ndef notifyUser(email: Option[String]): Option[NotificationSent] = \n  email.map(e => NotificationSent(1, \"Flood\"))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_530","timestamp":1745438530372,"code":"def fetchWeatherData(apiKey: Option[String]): Either[String, String] =\n  apiKey.toRight(\"Missing API key\").map(_ => \"Clear sky\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_531","timestamp":1745438530372,"code":"case class Location(lat: Double, lon: Double)\ndef locateUser(ip: String): Option[Location] = \n  if (ip.startsWith(\"192.\")) Some(Location(42.3, -71.1)) else None","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_532","timestamp":1745438530372,"code":"import scala.util.Try\ncase class Alert(id: Long, message: String)\ndef parseAlertId(s: String, msg: String): Try[Alert] = \n  Try(Alert(s.toLong, msg))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_533","timestamp":1745438530372,"code":"def computeAlertLevel(windSpeed: Option[Double]): Int = \n  windSpeed.filter(_ > 20).map(_ => 3).getOrElse(1)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_534","timestamp":1745438530372,"code":"val weatherCondition: Option[String] = Some(\"Rain\")\nval alertMessage = weatherCondition match {\n  case Some(\"Rain\") => \"Take an umbrella!\"\n  case Some(_)      => \"Have a nice day!\"\n  case None         => \"No data available.\"\n}","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_535","timestamp":1745438530372,"code":"case class Subscription(userId: Int, area: String, active: Boolean)\nval subscriptions = List(\n  Subscription(1, \"Boston\", true), Subscription(2, \"NYC\", false)\n)\nval activeBoston = subscriptions.find(s => s.area == \"Boston\" && s.active)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_536","timestamp":1745438530372,"code":"import scala.util.Try\ncase class AlertType(code: String)\ndef validateAlertCode(str: String): Either[String, AlertType] =\n  if (str.nonEmpty && str(0).isUpper) Right(AlertType(str)) else Left(\"Invalid code\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_537","timestamp":1745438530372,"code":"val maybeSeverity: Option[Int] = None\nval levelStr = maybeSeverity.map(_.toString).getOrElse(\"Not set\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_538","timestamp":1745438530372,"code":"case class WeatherData(temperature: Double, humidity: Double)\nval data: Either[String, WeatherData] = Right(WeatherData(22.0, 60.0))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_539","timestamp":1745438530372,"code":"def userEmail(userId: Int): Option[String] = if (userId > 0) Some(\"user@mail\") else None\nval fallbackEmail = userEmail(-1).getOrElse(\"default@mail\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_540","timestamp":1745438530372,"code":"case class DeliveryResult(userId: Int, success: Boolean)\ndef deliverNotificationOpt(email: Option[String]): DeliveryResult = \n  DeliveryResult(42, email.exists(_.contains(\"@\")))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_541","timestamp":1745438530372,"code":"import scala.util.Try\ndef parseTemperature(s: String): Option[Double] = Try(s.toDouble).toOption","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_542","timestamp":1745438530372,"code":"case class AlertPreference(userId: Int, viaEmail: Boolean, viaSms: Boolean)\ndef prefersEmail(pref: Option[AlertPreference]): Boolean = \n  pref.exists(_.viaEmail)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_543","timestamp":1745438530372,"code":"val userOpt: Option[User] = Some(User(7, Some(\"weather@alerts\")))\nval emailToSend = for {\n  user <- userOpt\n  email <- user.email\n} yield email","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_544","timestamp":1745438530372,"code":"def lookupAlert(area: String): Option[WeatherAlert] = \n  if (area == \"Harbor\") Some(WeatherAlert(\"Harbor\", \"Wind\", 2)) else None\nval found = lookupAlert(\"Harbor\").map(_.severity).getOrElse(0)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_545","timestamp":1745438553126,"code":"case class Payment(amount: BigDecimal, cardNumber: String, merchant: String)\nval maybePayment: Option[Payment] = Some(Payment(500.0, \"4242424242424242\", \"GroceryStore\"))\nval isLarge = maybePayment.exists(_.amount > 1000)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_546","timestamp":1745438553126,"code":"case class User(id: Long, email: Option[String])\ndef sendAlert(user: User): Boolean = user.email.isDefined\nval user = User(1, None)\nval sent = sendAlert(user)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_547","timestamp":1745438553126,"code":"import scala.util.Try\ncase class Transaction(amount: String)\ndef parseAmount(tx: Transaction): Try[BigDecimal] = Try(BigDecimal(tx.amount))\nval result = parseAmount(Transaction(\"1000.25\"))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_548","timestamp":1745438553126,"code":"case class Alert(message: String, userEmail: String)\ndef maybeSendAlert(alert: Option[Alert]): String = alert.map(a => s\"Sent: ${a.userEmail}\").getOrElse(\"No alert sent\")\nval output = maybeSendAlert(None)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_549","timestamp":1745438553126,"code":"case class CardInfo(number: String, expiry: Option[String])\ndef validCard(card: CardInfo): Boolean = card.expiry.isDefined\nval info = CardInfo(\"5555666677778888\", None)\nval isValid = validCard(info)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_550","timestamp":1745438553126,"code":"import scala.util.Either\ncase class FraudScore(score: Double)\ndef flagIfHigh(score: FraudScore): Either[String, FraudScore] =\n  if (score.score > 0.8) Left(\"High risk\") else Right(score)\nval risk = flagIfHigh(FraudScore(0.9))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_551","timestamp":1745438553126,"code":"case class PaymentMeta(merchant: Option[String], country: Option[String])\nval meta = PaymentMeta(Some(\"E-Shop\"), None)\nval desc = (meta.merchant, meta.country) match {\n  case (Some(m), Some(c)) => s\"$m in $c\"\n  case (Some(m), None)    => s\"$m (country unknown)\"\n  case _                  => \"Unknown payment\"\n}","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_552","timestamp":1745438553126,"code":"case class RiskAssessment(id: Long, score: Option[Double])\ndef takeAction(risk: RiskAssessment): String = risk.score match {\n  case Some(s) if s > 0.7 => \"Manual review\"\n  case Some(_)            => \"Accept\"\n  case None               => \"Insufficient data\"\n}\nval action = takeAction(RiskAssessment(10, Some(0.8)))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_553","timestamp":1745438553126,"code":"import scala.util.Try\ncase class RawTransaction(json: String)\ndef parseJsonToAmount(raw: RawTransaction): Try[BigDecimal] =\n  Try(BigDecimal(raw.json))\nval parsed = parseJsonToAmount(RawTransaction(\"20.88\"))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_554","timestamp":1745438553126,"code":"case class PaymentAttempt(userId: Long, traceId: Option[String])\ndef traceInfo(attempt: PaymentAttempt): String =\n  s\"Trace: ${attempt.traceId.getOrElse(\"not available\")}\"\nval result = traceInfo(PaymentAttempt(9, None))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_555","timestamp":1745438553126,"code":"case class Device(deviceId: String, location: Option[String])\ndef suspiciousLocation(device: Device): Boolean = device.location.exists(_ == \"unknown\")\nval suspicious = suspiciousLocation(Device(\"dev123\", Some(\"unknown\")))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_556","timestamp":1745438553126,"code":"case class Verification(method: String, passed: Boolean)\ncase class ReviewResult(passed: Boolean, notes: Option[String])\ndef escalateIfNeeded(review: ReviewResult): Option[String] =\n  review.notes.filter(_ => !review.passed)\nval escalation = escalateIfNeeded(ReviewResult(false, Some(\"IP mismatch\")))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_557","timestamp":1745438553126,"code":"import scala.util.Either\ncase class PaymentDetails(card: Option[String], amount: Option[BigDecimal])\ndef checkDetails(pd: PaymentDetails): Either[String, PaymentDetails] =\n  if (pd.card.isEmpty || pd.amount.isEmpty) Left(\"Missing info\") else Right(pd)\nval status = checkDetails(PaymentDetails(None, Some(10.5)))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_558","timestamp":1745438553126,"code":"case class TransactionLog(id: Long, status: String)\ndef findFailed(logs: List[TransactionLog]): Option[TransactionLog] =\n  logs.find(_.status == \"failed\")\nval failed = findFailed(List(TransactionLog(1, \"ok\"), TransactionLog(2, \"failed\")))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_559","timestamp":1745438553126,"code":"import scala.util.Try\ncase class Event(time: String)\ndef parseTime(ev: Event): Try[java.time.Instant] = Try(java.time.Instant.parse(ev.time))\nval instantOpt = parseTime(Event(\"2024-05-08T10:00:00Z\"))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_560","timestamp":1745438553126,"code":"case class ScoreRecord(txId: String, risk: Option[Double])\nval records = List(\n  ScoreRecord(\"t1\", Some(0.5)),\n  ScoreRecord(\"t2\", None)\n)\nval avg = records.flatMap(_.risk).sum / records.flatMap(_.risk).size","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_561","timestamp":1745438553126,"code":"case class Account(id: Long, isBlacklisted: Option[Boolean])\ndef canProcess(acc: Account): Boolean = !acc.isBlacklisted.contains(true)\nval canDo = canProcess(Account(1, Some(true)))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_562","timestamp":1745438553126,"code":"import scala.util.Try\ncase class PaymentRef(ref: String)\ndef loadPayment(ref: String): Try[PaymentRef] = Try(PaymentRef(ref))\nval loaded = loadPayment(\"abc123\")","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_563","timestamp":1745438553126,"code":"case class UserProfile(userId: Long, city: Option[String])\ndef unusualCity(profile: UserProfile, blacklist: Set[String]): Boolean =\n  profile.city.exists(blacklist.contains)\nval found = unusualCity(UserProfile(10, Some(\"Moscow\")), Set(\"Moscow\", \"Tehran\"))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_564","timestamp":1745438553126,"code":"import scala.util.Either\ncase class ReviewDecision(decision: String, comment: Option[String])\ndef finalize(decision: ReviewDecision): Either[String, String] =\n  if (decision.decision == \"accept\") Right(\"Processed\")\n  else Left(decision.comment.getOrElse(\"Manual review required\"))\nval result = finalize(ReviewDecision(\"review\", None))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_565","timestamp":1745439101525,"code":"case class DicomHeader(patientName: Option[String], studyDate: Option[String])\nval header = DicomHeader(Some(\"Alice\"), None)\nval date = header.studyDate.getOrElse(\"Unknown Date\")\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_566","timestamp":1745439101525,"code":"case class ImageSlice(z: Double, pixelData: Vector[Int])\ndef findSlice(slices: List[ImageSlice], z: Double): Option[ImageSlice] =\n  slices.find(_.z == z)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_567","timestamp":1745439101525,"code":"import scala.util.Try\ndef parseIntensity(raw: String): Try[Int] = Try(raw.toInt)\nval intensity = parseIntensity(\"120\").getOrElse(0)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_568","timestamp":1745439101525,"code":"case class ImagingStudy(seriesId: String, modality: Option[String])\ndef modalityTag(study: ImagingStudy): String = study.modality match {\n  case Some(mod) => mod\n  case None => \"Unknown\"\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_569","timestamp":1745439101525,"code":"import scala.util.Try\ncase class ViewerConfig(windowLevel: Int, windowWidth: Int)\ndef parseConfig(levelStr: String, widthStr: String): Either[String, ViewerConfig] = for {\n  level <- Try(levelStr.toInt).toEither.left.map(_ => \"Invalid level\")\n  width <- Try(widthStr.toInt).toEither.left.map(_ => \"Invalid width\")\n} yield ViewerConfig(level, width)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_570","timestamp":1745439101525,"code":"case class Series(id: String, images: List[ImageSlice])\ndef getFirstImage(series: Series): Option[ImageSlice] = series.images.headOption\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_571","timestamp":1745439101525,"code":"case class PixelSpacing(x: Double, y: Double)\ndef calcAspectRatio(spacing: Option[PixelSpacing]): Double = {\n  spacing.map(s => s.x / s.y).getOrElse(1.0)\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_572","timestamp":1745439101525,"code":"import scala.util.Try\ndef loadDicomFile(path: String): Try[Array[Byte]] = Try(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(path)))\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_573","timestamp":1745439101525,"code":"case class AnnotatedRegion(label: String, points: List[(Int, Int)])\ndef getMainRegion(regions: List[AnnotatedRegion]): Option[AnnotatedRegion] =\n  regions.find(_.label == \"main\")\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_574","timestamp":1745439101525,"code":"def overlayAnnotation(image: ImageSlice, ann: Option[AnnotatedRegion]): ImageSlice = ann match {\n  case Some(region) => image.copy(pixelData = image.pixelData.map(_ + 10))\n  case None => image\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_575","timestamp":1745439101525,"code":"case class LoadResult(image: Option[ImageSlice], error: Option[String])\ndef loadImage(path: String): LoadResult = \n  if (path.endsWith(\".dcm\")) LoadResult(Some(ImageSlice(0.0, Vector(0,1,2))), None)\n  else LoadResult(None, Some(\"Invalid file format\"))\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_576","timestamp":1745439101525,"code":"import scala.util.Try\ndef parseHeaderField(header: Map[String,String], key: String): Try[String] = {\n  Try(header(key))\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_577","timestamp":1745439101525,"code":"case class DisplaySettings(brightness: Int, contrast: Int)\ndef adjustContrast(s: DisplaySettings, factor: Option[Int]): DisplaySettings = {\n  s.copy(contrast = s.contrast * factor.getOrElse(1))\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_578","timestamp":1745439101525,"code":"def safeGetPatientName(header: DicomHeader): String = header.patientName match {\n  case Some(name) => name\n  case None => \"No Name\"\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_579","timestamp":1745439101525,"code":"case class DicomSeries(seriesId: String, description: Option[String])\ndef seriesLabel(ds: DicomSeries): String = ds.description.getOrElse(ds.seriesId)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_580","timestamp":1745439101525,"code":"case class Coordinates(x: Double, y: Double, z: Double)\ndef maybeZ(coords: Option[Coordinates]): Double = coords.map(_.z).getOrElse(0.0)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_581","timestamp":1745439101525,"code":"import scala.util.Try\ndef readImageDimensions(meta: Map[String,String]): Either[String, (Int,Int)] = for {\n  w <- Try(meta(\"Width\").toInt).toEither.left.map(_ => \"Missing/invalid width\")\n  h <- Try(meta(\"Height\").toInt).toEither.left.map(_ => \"Missing/invalid height\")\n} yield (w, h)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_582","timestamp":1745439101525,"code":"case class Study(id: String, images: List[ImageSlice])\ndef firstZ(study: Study): Option[Double] = study.images.headOption.map(_.z)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_583","timestamp":1745439101525,"code":"def displayIfPresent(slice: Option[ImageSlice]): String = slice match {\n  case Some(img) => s\"Slice at z=${img.z}\"\n  case None => \"No slice to display\"\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_584","timestamp":1745439101525,"code":"case class UserPreferences(window: Option[(Int,Int)])\ndef getWindow(prefs: UserPreferences): (Int,Int) = prefs.window.getOrElse((40, 80))\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_585","timestamp":1745439128392,"code":"case class PaymentLink(id: String, amount: BigDecimal, currency: String, description: Option[String])\n\nval link = PaymentLink(\"1234\", BigDecimal(42.5), \"USD\", Some(\"Consulting fee\"))\nval desc = link.description.getOrElse(\"No description provided\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_586","timestamp":1745439128392,"code":"def findPaymentLinkById(id: String): Option[PaymentLink] =\n  if (id.nonEmpty) Some(PaymentLink(id, 99.99, \"USD\", None))\n  else None\n\nfindPaymentLinkById(\"abc\").map(_.amount)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_587","timestamp":1745439128392,"code":"import scala.util.Try\n\ndef parseAmount(amountStr: String): Try[BigDecimal] = Try(BigDecimal(amountStr))\n\nval result = parseAmount(\"25.50\").getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_588","timestamp":1745439128392,"code":"case class PaymentRequest(clientId: String, amount: BigDecimal)\n\nval maybeRequest: Option[PaymentRequest] = None\nval amount = maybeRequest.map(_.amount).getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_589","timestamp":1745439128392,"code":"def getDescription(link: PaymentLink): String = link.description match {\n  case Some(desc) => desc\n  case None => \"No description available\"\n}\n\nval output = getDescription(PaymentLink(\"id1\", 25.99, \"EUR\", None))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_590","timestamp":1745439128392,"code":"case class PaymentLinkStatus(linkId: String, status: String, lastUpdated: Long)\n\nval status = PaymentLinkStatus(\"pl-123\", \"ACTIVE\", System.currentTimeMillis())","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_591","timestamp":1745439128392,"code":"import scala.util.{Either, Left, Right}\n\ndef validateCurrency(currency: String): Either[String, String] =\n  if (currency.matches(\"[A-Z]{3}\")) Right(currency) else Left(\"Invalid currency code.\")\n\nval checked = validateCurrency(\"USD\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_592","timestamp":1745439128392,"code":"def tryFindAmount(link: Option[PaymentLink]): BigDecimal = link match {\n  case Some(pl) => pl.amount\n  case None => BigDecimal(0)\n}\n\nval amt = tryFindAmount(None)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_593","timestamp":1745439128392,"code":"case class CreatePaymentLinkRequest(amount: BigDecimal, currency: String, callbackUrl: Option[String])\n\nval request = CreatePaymentLinkRequest(120.00, \"USD\", None)\nval callback = request.callbackUrl.getOrElse(\"https://default-callback.com\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_594","timestamp":1745439128392,"code":"import scala.util.Try\n\ndef toPaymentLinkId(maybeId: Option[String]): Try[String] = Try(maybeId.get)\n\ntoPaymentLinkId(Some(\"pl-unique-id\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_595","timestamp":1745439128392,"code":"case class ErrorResponse(error: String, details: Option[String])\n\ndef errorMessage(err: ErrorResponse): String = err.details.map(d => s\"${err.error}: $d\").getOrElse(err.error)\n\nerrorMessage(ErrorResponse(\"NotFound\", None))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_596","timestamp":1745439128392,"code":"def getPaymentLinkCurrency(pl: PaymentLink): Either[String, String] =\n  if (pl.currency.nonEmpty) Right(pl.currency) else Left(\"Currency missing\")\n\ngetPaymentLinkCurrency(PaymentLink(\"id1\", 42, \"\", None))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_597","timestamp":1745439128392,"code":"case class PaymentMetadata(orderId: String, meta: Option[Map[String, String]])\n\nval meta = PaymentMetadata(\"o123\", Some(Map(\"promo\" -> \"XMAS2024\")))\nmeta.meta.flatMap(_.get(\"promo\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_598","timestamp":1745439128393,"code":"import scala.util.Try\n\ndef parsePaymentLink(json: String): Try[PaymentLink] = Try {\n  val parts = json.split(\",\")\n  PaymentLink(parts(0), BigDecimal(parts(1)), parts(2), None)\n}\n\nparsePaymentLink(\"pid,45.2,USD\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_599","timestamp":1745439128393,"code":"case class LinkStatusUpdate(id: String, status: String)\n\ndef updateStatus(old: PaymentLink, newStatus: String): PaymentLink = old.copy(description = Some(newStatus))\n\nval newLink = updateStatus(PaymentLink(\"id\", 23, \"USD\", None), \"PAID\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_600","timestamp":1745439128393,"code":"def tryGetCallbackUrl(request: CreatePaymentLinkRequest): Option[String] = request.callbackUrl\n\nval url = tryGetCallbackUrl(CreatePaymentLinkRequest(10, \"AUD\", Some(\"https://cb.com\")))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_601","timestamp":1745439128393,"code":"def parseBigDecimal(s: String): Either[String, BigDecimal] =\n  scala.util.Try(BigDecimal(s)).toEither.left.map(_ => s\"Invalid amount: $s\")\n\nparseBigDecimal(\"foo\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_602","timestamp":1745439128393,"code":"case class PaymentLinkInfo(linkId: String, url: String, expiration: Option[Long])\nval info = PaymentLinkInfo(\"id321\", \"https://wix.com/pay/123\", None)\nval expTime = info.expiration.getOrElse(0L)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_603","timestamp":1745439128393,"code":"def getOrderId(meta: PaymentMetadata): Option[String] = Some(meta.orderId).filter(_.nonEmpty)\n\nval orderId = getOrderId(PaymentMetadata(\"\", None))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_604","timestamp":1745439128393,"code":"case class RefundRequest(linkId: String, reason: Option[String])\n\ndef refundReason(r: RefundRequest): String = r.reason.getOrElse(\"No reason provided\")\n\nrefundReason(RefundRequest(\"l123\", Some(\"Duplicate payment\")))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_605","timestamp":1745439151020,"code":"case class TranslationRequest(text: String, from: String, to: String)\n\nval req = TranslationRequest(\"Hello\", \"en\", \"es\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_606","timestamp":1745439151020,"code":"def getUserPreferredLanguage(userId: String): Option[String] = \n  Map(\"alice\" -> \"fr\", \"bob\" -> \"es\").get(userId)\n\nval langOpt = getUserPreferredLanguage(\"alice\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_607","timestamp":1745439151020,"code":"def safeParseConfidence(conf: String): Either[String, Double] = \n  scala.util.Try(conf.toDouble).toEither.left.map(_ => s\"Invalid confidence: $conf\")\n\nval conf = safeParseConfidence(\"0.9\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_608","timestamp":1745439151020,"code":"case class ChatMessage(sender: String, text: String, timestamp: Long)\n\nval msg = ChatMessage(\"bot\", \"Bonjour\", System.currentTimeMillis)","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_609","timestamp":1745439151020,"code":"def translate(msg: String): Option[String] =\n  if (msg.nonEmpty) Some(msg.reverse) else None\n\nval result = translate(\"hello\").getOrElse(\"[untranslated]\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_610","timestamp":1745439151020,"code":"case class UserSession(id: String, preferredLanguages: List[String])\n\nval session = UserSession(\"12345\", List(\"en\", \"de\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_611","timestamp":1745439151020,"code":"def findTranslatorEngine(name: String): Option[String] =\n  List(\"google\", \"deepl\", \"bing\").find(_ == name)\n\nval engine = findTranslatorEngine(\"deepl\").map(_.toUpperCase)","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_612","timestamp":1745439151020,"code":"def safeInt(s: String): Option[Int] = scala.util.Try(s.toInt).toOption\nval port: Option[Int] = safeInt(\"8080\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_613","timestamp":1745439151020,"code":"def detectLanguage(text: String): Either[String, String] =\n  if (text.startsWith(\"Hola\")) Right(\"es\") else Left(\"Unknown language\")\n\nval lang = detectLanguage(\"Hola mundo\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_614","timestamp":1745439151020,"code":"case class TranslationResponse(input: String, output: Option[String], durationMs: Int)\n\nval resp = TranslationResponse(\"hi\", Some(\"salut\"), 32)","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_615","timestamp":1745439151020,"code":"def lookupTranslation(word: String, dict: Map[String, String]): Option[String] =\n  dict.get(word)\n\nval maybeWord = lookupTranslation(\"house\", Map(\"house\" -> \"casa\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_616","timestamp":1745439151020,"code":"case class User(id: String, alias: Option[String])\n\nval u1 = User(\"42\", None)\nval u2 = User(\"43\", Some(\"translator_bob\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_617","timestamp":1745439151020,"code":"def parseJsonMessage(json: String): Either[Throwable, Map[String, String]] = \n  scala.util.Try {\n    val parts = json.stripPrefix(\"{\").stripSuffix(\"}\").split(\":\").map(_.trim)\n    Map(parts(0) -> parts(1))\n  }.toEither\nval parsed = parseJsonMessage(\"{text:hello}\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_618","timestamp":1745439151020,"code":"def translateOrError(text: String, lang: String): Either[String, String] =\n  if (lang == \"fr\") Right(\"bonjour\") else Left(s\"Translation not supported: $lang\")\n\ndef printTranslation(result: Either[String, String]): Unit = result match {\n  case Right(txt) => println(txt)\n  case Left(err) => println(err)\n}\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_619","timestamp":1745439151020,"code":"case class Translator(id: String, supports: Set[String])\n\nval tr = Translator(\"g1\", Set(\"en-es\", \"es-en\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_620","timestamp":1745439151020,"code":"def getGreeting(lang: String): Option[String] =\n  Map(\"en\" -> \"Hello\", \"es\" -> \"Hola\").get(lang)\nval greet = getGreeting(\"de\").getOrElse(\"[greeting unknown]\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_621","timestamp":1745439151020,"code":"def safeDivide(n: Int, d: Int): Either[String, Int] =\n  if (d != 0) Right(n / d) else Left(\"Cannot divide by zero\")\nval res = safeDivide(12, 0)","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_622","timestamp":1745439151020,"code":"case class Error(message: String)\ndef translateSafe(input: String): Either[Error, String] =\n  if (input == \"ping\") Right(\"pong\") else Left(Error(\"Not translatable\"))\nval t = translateSafe(\"hello\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_623","timestamp":1745439151020,"code":"def fallbackTranslation(word: String): Option[String] = \n  if (word.length > 4) Some(word.take(4)) else None\nval ft = fallbackTranslation(\"chatbot\").orElse(Some(\"fallback\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_624","timestamp":1745439151020,"code":"case class TranslationLogEntry(request: TranslationRequest, succeeded: Boolean, error: Option[String])\n\nval log1 = TranslationLogEntry(TranslationRequest(\"hi\",\"en\",\"de\"), true, None)\nval log2 = TranslationLogEntry(TranslationRequest(\"foo\",\"fr\",\"en\"), false, Some(\"Timeout\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_625","timestamp":1745439166627,"code":"case class EnergyReading(deviceId: String, consumption: Double)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_626","timestamp":1745439166627,"code":"val maybeReading: Option[EnergyReading] = None\nmaybeReading.getOrElse(EnergyReading(\"unknown\", 0.0))","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_627","timestamp":1745439166627,"code":"def findReading(id: String, readings: List[EnergyReading]): Option[EnergyReading] = readings.find(_.deviceId == id)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_628","timestamp":1745439166627,"code":"case class User(name: String, dashboardVisible: Boolean)\nval user: Option[User] = Some(User(\"Alice\", true))\nuser.filter(_.dashboardVisible)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_629","timestamp":1745439166627,"code":"import scala.util.Try\ndef parseConsumption(value: String): Try[Double] = Try(value.toDouble)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_630","timestamp":1745439166627,"code":"case class Device(id: String, lastSeen: Option[Long])\nval device = Device(\"dev3\", None)\ndevice.lastSeen.map(ts => s\"Last seen at $ts\").getOrElse(\"Never seen\")","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_631","timestamp":1745439166627,"code":"val maybeValue: Option[Double] = Some(74.2)\nval alert = maybeValue.exists(_ > 70.0)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_632","timestamp":1745439166627,"code":"def safeDivision(total: Double, count: Int): Either[String, Double] =\n  if(count == 0) Left(\"Cannot divide by zero\") else Right(total / count)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_633","timestamp":1745439166627,"code":"val monthlyReadings: List[Option[EnergyReading]] = List(Some(EnergyReading(\"d1\", 12.0)), None)\nval valid = monthlyReadings.flatten","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_634","timestamp":1745439166627,"code":"import scala.util.Try\nval result = Try(100.0 / 0).recover { case _: ArithmeticException => Double.PositiveInfinity }","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_635","timestamp":1745439166627,"code":"case class Meter(id: String, installed: Boolean, location: Option[String])\nval meter = Meter(\"m1\", true, Some(\"Roof\"))","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_636","timestamp":1745439166627,"code":"def lookupConsumption(readings: Map[String, Double], id: String): Option[Double] = readings.get(id)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_637","timestamp":1745439166627,"code":"val readingsByDevice: Map[String, List[Double]] = Map(\"a\" -> List(10.0, 12.5))\nval avg = readingsByDevice.get(\"a\").flatMap(xs => if(xs.nonEmpty) Some(xs.sum / xs.length) else None)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_638","timestamp":1745439166627,"code":"case class DashboardData(user: User, readings: List[EnergyReading])\nval dash = DashboardData(User(\"Bob\", true), List(EnergyReading(\"c2\", 7.1)))","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_639","timestamp":1745439166627,"code":"def safeParseInt(s: String): Option[Int] = Try(s.toInt).toOption\nval threshold = safeParseInt(\"42\")","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_640","timestamp":1745439166628,"code":"import scala.util.Try\ndef readConfig(path: String): Try[Map[String, String]] = Try(scala.io.Source.fromFile(path).getLines().map(line => line.split(\"=\") match { case Array(k,v) => (k.trim, v.trim) }).toMap)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_641","timestamp":1745439166628,"code":"case class ConsumptionAlert(deviceId: String, current: Double, threshold: Double)\nval alert = Some(ConsumptionAlert(\"devX\", 110.6, 100.0)).filter(_.current > _.threshold)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_642","timestamp":1745439166628,"code":"def getLatestReading(readings: List[EnergyReading]): Option[EnergyReading] = readings.sortBy(-_.consumption).headOption","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_643","timestamp":1745439166628,"code":"case class Building(name: String, floors: Int, dashboardUrl: Option[String])\nval b = Building(\"HQ\", 3, None)\nb.dashboardUrl.getOrElse(\"/dashboard/default\")","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_644","timestamp":1745439166628,"code":"val values = List(\"12.4\", \"oops\", \"40.0\")\nval parsed = values.flatMap(s => Try(s.toDouble).toOption)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_645","timestamp":1745439186576,"code":"case class Ballot(voterId: String, candidate: String)\n\nval ballot: Option[Ballot] = Some(Ballot(\"v001\", \"Alice\"))\nval candidateOpt: Option[String] = ballot.map(_.candidate)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_646","timestamp":1745439186576,"code":"case class Tally(candidate: String, votes: Int)\ndef safeIncrement(tally: Option[Tally]): Option[Tally] =\n  tally.map(t => t.copy(votes = t.votes + 1))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_647","timestamp":1745439186576,"code":"import scala.util.Try\n\ndef parseBallotId(input: String): Try[Int] = Try(input.toInt)\n\nval ballotId = parseBallotId(\"42\").getOrElse(-1)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_648","timestamp":1745439186576,"code":"case class Voter(id: String, registered: Boolean)\ndef findVoter(id: String, voters: List[Voter]): Option[Voter] =\n  voters.find(_.id == id)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_649","timestamp":1745439186576,"code":"import scala.util.Either\ncase class Result(winner: String)\ndef determineWinner(tallies: Map[String, Int]): Either[String, Result] = {\n  if (tallies.isEmpty) Left(\"No tallies to evaluate\")\n  else Right(Result(tallies.maxBy(_._2)._1))\n}","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_650","timestamp":1745439186576,"code":"case class BallotBox(ballots: List[Ballot])\ndef countVotes(box: BallotBox): Map[String, Int] =\n  box.ballots.groupBy(_.candidate).mapValues(_.size)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_651","timestamp":1745439186576,"code":"case class VoterStatus(eligible: Boolean, voted: Boolean)\ndef canVote(status: Option[VoterStatus]): Boolean =\n  status.exists(s => s.eligible && !s.voted)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_652","timestamp":1745439186576,"code":"import scala.util.Try\ncase class VotingSession(id: String)\ndef openSession(id: String): Try[VotingSession] =\n  Try(VotingSession(id))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_653","timestamp":1745439186576,"code":"case class ElectronicSignature(hash: String)\ndef signatureOpt(input: String): Option[ElectronicSignature] =\n  Option(input).filter(_.nonEmpty).map(ElectronicSignature)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_654","timestamp":1745439186576,"code":"def firstValidBallot(ballots: List[Option[Ballot]]): Option[Ballot] =\n  ballots.collectFirst { case Some(b) => b }","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_655","timestamp":1745439186576,"code":"case class PollingStation(id: String, online: Boolean)\ndef isStationActive(station: Option[PollingStation]): Boolean =\n  station.exists(_.online)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_656","timestamp":1745439186576,"code":"import scala.util.Try\n\ndef parseVotes(input: String): Either[String, Int] =\n  Try(input.toInt).toEither.left.map(_ => s\"Invalid vote count: $input\")","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_657","timestamp":1745439186576,"code":"case class TallyingError(message: String)\ndef safeDivideVotes(total: Int, divisors: Int): Either[TallyingError, Int] =\n  if (divisors == 0) Left(TallyingError(\"Division by zero\"))\n  else Right(total / divisors)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_658","timestamp":1745439186576,"code":"case class BallotEnvelope(barcode: String, sealedStatus: Boolean)\ndef extractBarcode(envelope: Option[BallotEnvelope]): Option[String] =\n  envelope.filter(_.sealedStatus).map(_.barcode)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_659","timestamp":1745439186576,"code":"case class AuditLog(event: String)\ndef maybeLogEvent(eventOpt: Option[String]): Option[AuditLog] =\n  eventOpt.map(AuditLog)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_660","timestamp":1745439186576,"code":"case class Vote(value: Int)\ndef addVote(current: Option[Vote], increment: Int): Option[Vote] =\n  current.map(v => v.copy(value = v.value + increment))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_661","timestamp":1745439186576,"code":"case class Election(name: String, participants: List[String])\ndef getParticipant(election: Election, idx: Int): Option[String] =\n  election.participants.lift(idx)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_662","timestamp":1745439186576,"code":"case class BallotValidation(valid: Boolean, reason: Option[String])\ndef validateBallot(ballot: Option[Ballot]): BallotValidation =\n  ballot.map(_ => BallotValidation(true, None)).getOrElse(BallotValidation(false, Some(\"Missing ballot\")))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_663","timestamp":1745439186576,"code":"case class PrecinctReport(votes: Map[String, Int])\ndef totalVotes(report: Option[PrecinctReport]): Int =\n  report.map(_.votes.values.sum).getOrElse(0)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_664","timestamp":1745439186576,"code":"import scala.util.Try\ncase class ElectionResultSummary(totalBallots: Int, winner: String)\ndef summarizeResults(ballots: List[Ballot]): Try[ElectionResultSummary] =\n  Try {\n    val counts = ballots.groupBy(_.candidate).mapValues(_.size)\n    val winner = counts.maxBy(_._2)._1\n    ElectionResultSummary(ballots.length, winner)\n  }","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_665","timestamp":1745439203591,"code":"case class Book(title: String, author: String, isbn: Option[String])\nval book = Book(\"Scala for Libraries\", \"Alice Smith\", Some(\"978-1234567890\"))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_666","timestamp":1745439203591,"code":"val maybeTitle: Option[String] = Some(\"Functional Programming\")\nval uppercaseTitle = maybeTitle.map(_.toUpperCase)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_667","timestamp":1745439203591,"code":"def findBookByIsbn(isbn: String, catalog: List[Book]): Option[Book] =\n  catalog.find(_.isbn.contains(isbn))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_668","timestamp":1745439203591,"code":"def parseYear(yearStr: String): Either[String, Int] =\n  try Right(yearStr.toInt) catch { case _: NumberFormatException => Left(\"Invalid year\") }","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_669","timestamp":1745439203591,"code":"case class SearchQuery(term: String, author: Option[String], year: Option[Int])\nval q = SearchQuery(\"Scala\", None, Some(2022))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_670","timestamp":1745439203591,"code":"val userInput: Option[String] = None\nval searchTerm = userInput.getOrElse(\"default subject\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_671","timestamp":1745439203591,"code":"def getFirstResult(results: List[Book]): Either[String, Book] =\n  results.headOption.toRight(\"No results found\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_672","timestamp":1745439203591,"code":"case class Catalog(books: List[Book])\ndef searchByAuthor(author: String, catalog: Catalog): List[Book] =\n  catalog.books.filter(_.author == author)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_673","timestamp":1745439203591,"code":"val catalog = List(Book(\"Scala for All\", \"Jane Doe\", None))\ncatalog.headOption match {\n  case Some(b) => b.title\n  case None => \"No books\"\n}","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_674","timestamp":1745439203591,"code":"import scala.util.Try\ndef safeParseDouble(s: String): Try[Double] = Try(s.toDouble)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_675","timestamp":1745439203591,"code":"def getIsbnOrUnknown(book: Book): String = book.isbn.getOrElse(\"unknown\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_676","timestamp":1745439203591,"code":"case class SearchResult(books: List[Book], total: Int)\ndef getSearchResult(books: List[Book]): SearchResult = SearchResult(books, books.length)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_677","timestamp":1745439203591,"code":"def safeDivide(total: Int, count: Int): Either[String, Double] =\n  if (count == 0) Left(\"Division by zero\") else Right(total.toDouble / count)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_678","timestamp":1745439203591,"code":"val maybePublisher: Option[String] = Some(\"O'Reilly\")\nmaybePublisher.foreach(println)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_679","timestamp":1745439203591,"code":"def tryParseIsbn(isbnStr: String): Either[String, String] =\n  if (isbnStr.matches(\"[0-9-]+\")) Right(isbnStr) else Left(\"Invalid ISBN format\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_680","timestamp":1745439203591,"code":"case class UserQuery(query: String, filters: Option[Map[String, String]])\ndef getFilterValue(userQuery: UserQuery, key: String): Option[String] =\n  userQuery.filters.flatMap(_.get(key))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_681","timestamp":1745439203591,"code":"def findBooksByTitle(term: String, books: List[Book]): List[Book] =\n  books.filter(_.title.toLowerCase.contains(term.toLowerCase))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_682","timestamp":1745439203591,"code":"import scala.util.Try\ndef tryLoadCatalog(file: String): Try[List[Book]] = Try(io.Source.fromFile(file).getLines.toList.map { line =>\n  val parts = line.split(\",\").map(_.trim)\n  Book(parts(0), parts(1), Some(parts(2)))\n})","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_683","timestamp":1745439203591,"code":"case class SearchResponse(status: String, books: List[Book], error: Option[String])\nval response = SearchResponse(\"ok\", List(book), None)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_684","timestamp":1745439203591,"code":"def getAuthorOrDefault(book: Book, default: String): String =\n  Option(book.author).getOrElse(default)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_685","timestamp":1745439219590,"code":"final case class Event(id: String, name: String)\nfinal case class Ticket(qr: String, userId: String, event: Event)","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_686","timestamp":1745439219590,"code":"case class QRCode(value: String)\ndef decodeQRCode(raw: String): Option[QRCode] = if (raw.nonEmpty) Some(QRCode(raw)) else None","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_687","timestamp":1745439219590,"code":"case class ValidationError(msg: String)\ncase class Attendee(name: String, ticket: Ticket)\ndef findAttendee(tickets: List[Ticket], qr: String): Either[ValidationError, Attendee] =\n  tickets.find(_.qr == qr)\n    .map(t => Right(Attendee(\"Unknown\", t)))\n    .getOrElse(Left(ValidationError(\"QR not found\")))","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_688","timestamp":1745439219590,"code":"import scala.util.Try\ncase class ParsedQR(id: String, eventId: String)\ndef parseQR(qr: String): Try[ParsedQR] = Try {\n  val Array(id, eventId) = qr.split(\"-\")\n  ParsedQR(id, eventId)\n}","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_689","timestamp":1745439219590,"code":"case class ScanResult(ticket: Ticket, scannedAt: Long)\ndef recordScan(ticket: Option[Ticket]): Option[ScanResult] = ticket.map(t => ScanResult(t, System.currentTimeMillis))","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_690","timestamp":1745439219590,"code":"case class User(id: String, name: String)\ndef getUserById(id: String, users: List[User]): Option[User] = users.find(_.id == id)","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_691","timestamp":1745439219590,"code":"case class Event(id: String, expired: Boolean)\ndef validateEvent(eventId: String, events: List[Event]): Either[String, Event] =\n  events.find(_.id == eventId).toRight(\"Event does not exist\").filterOrElse(!_.expired, \"Event expired\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_692","timestamp":1745439219590,"code":"case class Ticket(id: String, used: Boolean)\ndef checkAlreadyUsed(ticket: Ticket): Option[String] = if (ticket.used) Some(\"Ticket already used\") else None","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_693","timestamp":1745439219590,"code":"case class ErrorResponse(error: String)\ndef validateNotNull(str: String): Either[ErrorResponse, String] = Option(str).filter(_.nonEmpty).toRight(ErrorResponse(\"Value is null or empty\"))","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_694","timestamp":1745439219590,"code":"import scala.util.Try\ncase class QRTicket(id: String, userId: String)\ndef tryParse(input: String): Try[QRTicket] = Try {\n  val parts = input.split(\":\")\n  QRTicket(parts(0), parts(1))\n}","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_695","timestamp":1745439219590,"code":"case class ValidationSuccess(ticket: Ticket)\nsealed trait ValidationResult\ncase class ValidationFailure(msg: String) extends ValidationResult\ndef validateTicketByQR(qr: String, tickets: List[Ticket]): ValidationResult = tickets.find(_.qr == qr)\n  .map(ValidationSuccess)\n  .getOrElse(ValidationFailure(\"QR code invalid\"))","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_696","timestamp":1745439219590,"code":"case class Venue(name: String)\ndef findVenue(event: Event, venues: List[Venue]): Option[Venue] = venues.headOption","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_697","timestamp":1745439219590,"code":"case class ScanLog(ticketId: String, status: String)\ndef logResult(ticketId: String, ok: Boolean): ScanLog =\n  ScanLog(ticketId, if (ok) \"Valid\" else \"Invalid\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_698","timestamp":1745439219590,"code":"case class EventInfo(id: String, date: String)\ndef eventIsOngoing(event: EventInfo, current: String): Boolean = event.date == current","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_699","timestamp":1745439219590,"code":"import scala.util.Try\ndef intFromQR(qr: String): Option[Int] = Try(qr.toInt).toOption","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_700","timestamp":1745439219590,"code":"case class Ticket(qr: String, validUntil: Long)\ndef isTicketValid(ticket: Ticket, now: Long): Boolean = ticket.validUntil > now","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_701","timestamp":1745439219590,"code":"case class TicketHolder(name: String, ticket: Option[Ticket])\ndef ticketStatus(holder: TicketHolder): String = holder.ticket.map(_ => \"Valid\").getOrElse(\"Missing ticket\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_702","timestamp":1745439219590,"code":"case class Scan(id: String, result: Either[String, Ticket])\ndef ticketFromQR(qr: String, tickets: Map[String, Ticket]): Scan =\n  Scan(qr, tickets.get(qr).toRight(\"Ticket not found\"))","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_703","timestamp":1745439219590,"code":"case class Validator(config: Map[String, String])\ndef getValidationSecret(cfg: Validator): Option[String] = cfg.config.get(\"secret\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_704","timestamp":1745439219590,"code":"case class QRTicket(id: String, event: String, issued: Long)\ndef canBeScanned(ticket: QRTicket, now: Long): Boolean =\n  (now - ticket.issued) < 86400000","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_705","timestamp":1745439298785,"code":"case class Location(lat: Double, lon: Double)\n\nval deliveryPoint: Option[Location] = Some(Location(51.5, -0.12))\nval startPoint: Option[Location] = None\nval target = deliveryPoint.getOrElse(Location(0, 0))\nval start = startPoint.getOrElse(Location(0, 0))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_706","timestamp":1745439298785,"code":"case class BatteryStatus(level: Int)\n\ndef checkBattery(status: Option[BatteryStatus]): String = status match {\n  case Some(BatteryStatus(l)) if l > 20 => \"Sufficient\"\n  case Some(_) => \"Low battery\"\n  case None => \"No data\"\n}\nval result = checkBattery(Some(BatteryStatus(25)))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_707","timestamp":1745439298785,"code":"case class Waypoint(x: Double, y: Double, z: Double)\nval maybeWaypoint: Option[Waypoint] = None\nval safeWaypoint = maybeWaypoint.getOrElse(Waypoint(0,0,0))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_708","timestamp":1745439298785,"code":"import scala.util.Try\ncase class DroneRoute(path: List[String])\n\ndef parseRoute(input: String): Try[DroneRoute] = Try {\n  DroneRoute(input.split(\",\").toList)\n}\nval tryRoute = parseRoute(\"A,B,C\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_709","timestamp":1745439298785,"code":"case class Package(weight: Double, destination: Location)\nval maybePackage: Option[Package] = Some(Package(2.1, Location(40, -74)))\nval destLat: Option[Double] = maybePackage.map(_.destination.lat)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_710","timestamp":1745439298785,"code":"case class Drone(id: String, battery: Int)\nval drones: List[Drone] = List(Drone(\"A1\", 80), Drone(\"B2\", 15))\nval active = drones.filter(_.battery > 20)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_711","timestamp":1745439298785,"code":"import scala.util.Try\ncase class Wind(speed: Double)\n\ndef safeSpeed(w: Wind): Either[String, Wind] = {\n  if (w.speed < 40) Right(w)\n  else Left(\"Too windy for drone delivery\")\n}\nval windResult = safeSpeed(Wind(50))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_712","timestamp":1745439298785,"code":"case class Obstacle(position: Location, radius: Double)\nval obstacles: List[Obstacle] = List(Obstacle(Location(1,2), 3))\nval obstacleCount = obstacles.size","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_713","timestamp":1745439298785,"code":"case class Path(nodes: List[Location])\nval paths: List[Path] = List(Path(List(Location(0,0), Location(1,1))))\ndef totalDistance(path: Path): Double = path.nodes.sliding(2).collect {\n  case List(a, b) => math.hypot(a.lat-b.lat, a.lon-b.lon)\n}.sum\nval dist = totalDistance(paths.head)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_714","timestamp":1745439298785,"code":"case class Signal(strength: Int)\nval signal: Option[Signal] = Some(Signal(10))\ndef strongEnough(signal: Option[Signal]) = signal.exists(_.strength > 5)\nval ok = strongEnough(signal)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_715","timestamp":1745439298785,"code":"case class Delivery(id: String, delivered: Boolean)\ndef maybeUndelivered(deliveries: List[Delivery]): Option[Delivery] =\n  deliveries.find(!_.delivered)\nval deliveries = List(Delivery(\"x\", true), Delivery(\"y\", false))\nval next = maybeUndelivered(deliveries)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_716","timestamp":1745439298785,"code":"import scala.util.Try\ncase class FlightPlan(steps: List[Location])\ndef safePlan(input: String): Try[FlightPlan] = Try {\n  val coords = input.split(\" \").toList.map(_.split(\",\")).map{\n    case Array(x, y) => Location(x.toDouble, y.toDouble)\n  }\n  FlightPlan(coords)\n}\nval planTry = safePlan(\"50.1,20.5 51.2,21.5\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_717","timestamp":1745439298785,"code":"case class Drone(id: String)\ndef assignDrone(available: List[Drone]): Option[Drone] =\n  available.headOption\nval droneOption = assignDrone(List())","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_718","timestamp":1745439298785,"code":"import scala.util.Try\ncase class Height(meters: Double)\ndef parseHeight(s: String): Either[String, Height] =\n  Try(s.toDouble).toEither.left.map(_ => \"Invalid format\").map(Height)\nval h = parseHeight(\"120.\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_719","timestamp":1745439298785,"code":"case class DeliveryRoute(routeId: String, stops: List[Location])\nval maybeRoute: Option[DeliveryRoute] = None\ndef getStops(route: Option[DeliveryRoute]) = route.map(_.stops).getOrElse(Nil)\nval stops = getStops(maybeRoute)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_720","timestamp":1745439298785,"code":"case class DronePath(points: List[Location])\ndef mergePaths(a: Option[DronePath], b: Option[DronePath]): Option[DronePath] =\n  for {\n    ap <- a\n    bp <- b\n  } yield DronePath(ap.points ++ bp.points)\nval merged = mergePaths(Some(DronePath(List(Location(0,0)))), None)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_721","timestamp":1745439298785,"code":"case class WeatherReport(windSpeed: Double, rain: Boolean)\nval maybeWeather: Option[WeatherReport] = Some(WeatherReport(10, false))\nval canFly = maybeWeather.exists(w => w.windSpeed < 30 && !w.rain)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_722","timestamp":1745439298785,"code":"import scala.util.Try\ndef safeInt(s: String): Either[String, Int] =\n  Try(s.toInt).toEither.left.map(_ => s\"Not a number: $s\")\nval parsedBattery = safeInt(\"93\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_723","timestamp":1745439298785,"code":"case class Zone(id: String, capacity: Int)\nval zones: List[Zone] = List(Zone(\"A\", 10), Zone(\"B\", 0))\nval availableId: Option[String] = zones.find(_.capacity > 0).map(_.id)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_724","timestamp":1745439298785,"code":"case class Plan(status: String)\nval errorOrPlan: Either[String, Plan] = Right(Plan(\"Active\"))\nval status = errorOrPlan match {\n  case Right(p) => p.status\n  case Left(msg) => msg\n}","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_725","timestamp":1745439327829,"code":"case class ClaimId(value: String)\ncase class PolicyNumber(value: String)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_726","timestamp":1745439327829,"code":"case class ClaimSubmission(policyNumber: PolicyNumber, claimantName: String, amount: BigDecimal)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_727","timestamp":1745439327829,"code":"def parseAmount(s: String): Either[String, BigDecimal] =\n  Either.catchOnly[NumberFormatException](BigDecimal(s)).left.map(_ => s\"Invalid amount: $s\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_728","timestamp":1745439327829,"code":"def findClaimById(id: ClaimId, claims: List[ClaimSubmission]): Option[ClaimSubmission] =\n  claims.find(_.policyNumber.value == id.value)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_729","timestamp":1745439327829,"code":"def getPolicyHolderEmail(maybeEmail: Option[String]): String =\n  maybeEmail.getOrElse(\"unknown@invalid.com\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_730","timestamp":1745439327829,"code":"def validateClaimAmount(amount: BigDecimal): Either[String, BigDecimal] =\n  if (amount > 0) Right(amount) else Left(\"Amount must be positive\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_731","timestamp":1745439327829,"code":"case class Address(line1: String, city: String, state: String, zip: String)\ncase class Claimant(name: String, address: Option[Address])","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_732","timestamp":1745439327829,"code":"def getClaimantCity(claimant: Claimant): Option[String] =\n  claimant.address.map(_.city)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_733","timestamp":1745439327829,"code":"import scala.util.Try\ndef submitClaim(claim: ClaimSubmission): Try[String] =\n  Try(\"CLAIM_SUBMITTED\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_734","timestamp":1745439327829,"code":"def parsePolicyNumber(s: String): Option[PolicyNumber] =\n  if (s.matches(\"[A-Z]{3}\\d{6}\")) Some(PolicyNumber(s)) else None","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_735","timestamp":1745439327829,"code":"case class ClaimDocument(documentId: String, content: Array[Byte])\ndef uploadDocument(doc: ClaimDocument): Either[String, String] =\n  if (doc.content.nonEmpty) Right(doc.documentId) else Left(\"Empty document\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_736","timestamp":1745439327829,"code":"case class ClaimReviewResult(claim: ClaimSubmission, approved: Boolean, notes: Option[String])","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_737","timestamp":1745439327829,"code":"def getNotesOrDefault(result: ClaimReviewResult): String =\n  result.notes.getOrElse(\"No additional notes\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_738","timestamp":1745439327829,"code":"def safeClaimantName(claim: ClaimSubmission): Option[String] =\n  Option(claim.claimantName).filter(_.nonEmpty)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_739","timestamp":1745439327829,"code":"def evalClaim(claim: Option[ClaimSubmission]): String = claim match {\n  case Some(cs) => s\"Processing claim for ${cs.claimantName}\"\n  case None     => \"No claim to process\"\n}","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_740","timestamp":1745439327829,"code":"def combineNotes(existing: Option[String], newNote: Option[String]): Option[String] =\n  (existing, newNote) match {\n    case (Some(a), Some(b)) => Some(s\"$a; $b\")\n    case (Some(a), None)    => Some(a)\n    case (None, Some(b))    => Some(b)\n    case (None, None)       => None\n  }","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_741","timestamp":1745439327829,"code":"import scala.util.Try\ndef safeParseClaim(json: String): Try[ClaimSubmission] = Try(??? : ClaimSubmission)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_742","timestamp":1745439327829,"code":"case class BankDetails(accountNumber: String, sortCode: String)\ndef payoutDetails(claim: ClaimSubmission, bank: Option[BankDetails]): Either[String, String] =\n  bank match {\n    case Some(bd) => Right(s\"Paid to ${bd.accountNumber}\")\n    case None     => Left(\"Missing bank details\")\n  }","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_743","timestamp":1745439327829,"code":"def enrichEmail(claimant: Claimant): String =\n  claimant.address.map(a => s\"${claimant.name}@${a.city.toLowerCase}.com\").getOrElse(s\"${claimant.name}@example.com\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_744","timestamp":1745439327829,"code":"def parseDocumentId(in: String): Option[String] =\n  if (in.nonEmpty) Some(in.trim) else None","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_745","timestamp":1745439353174,"code":"case class Student(id: String, name: String, gpa: Option[Double])\nval alice = Student(\"s101\", \"Alice\", Some(3.7))\nval bob = Student(\"s102\", \"Bob\", None)\nalice.gpa.map(g => s\"GPA: $g\").getOrElse(\"GPA not available\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_746","timestamp":1745439353174,"code":"case class CourseScore(courseId: String, score: Option[Double])\nval data = List(\n  CourseScore(\"math\", Some(92.0)),\n  CourseScore(\"history\", None)\n)\ndata.collect { case CourseScore(cid, Some(sc)) => (cid, sc) }","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_747","timestamp":1745439353174,"code":"import scala.util.Try\n\ndef parseScore(str: String): Try[Double] = Try(str.toDouble)\nparseScore(\"85.6\").getOrElse(0.0)\nparseScore(\"N/A\").recover { case _ => 0.0 }.get","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_748","timestamp":1745439353174,"code":"case class Attendance(studentId: String, attended: Boolean)\nval logs = List(\n  Attendance(\"s101\", true),\n  Attendance(\"s102\", false)\n)\nlogs.count(_.attended)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_749","timestamp":1745439353174,"code":"def passOrFail(score: Option[Double]): String = score match {\n  case Some(s) if s >= 60.0 => \"Pass\"\n  case Some(_)              => \"Fail\"\n  case None                 => \"No Score\"\n}\npassOrFail(Some(75.0))\npassOrFail(None)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_750","timestamp":1745439353174,"code":"case class Assignment(id: String, dueDate: Option[String])\nval a1 = Assignment(\"a1\", Some(\"2024-01-10\"))\nval a2 = Assignment(\"a2\", None)\na2.dueDate.getOrElse(\"No due date set\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_751","timestamp":1745439353174,"code":"import scala.util.Try\ncase class QuizSubmission(score: Double)\ndef safeAverage(scores: List[String]): Try[Double] = Try {\n  scores.map(_.toDouble).sum / scores.length\n}","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_752","timestamp":1745439353174,"code":"case class Feedback(studentId: String, comment: Option[String])\nval f = Feedback(\"s100\", None)\nf.comment.getOrElse(\"No feedback provided\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_753","timestamp":1745439353174,"code":"case class Module(id: String, title: String, duration: Option[Int])\nval m = Module(\"mod1\", \"Algebra\", Some(45))\nm.duration.map(_ * 2)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_754","timestamp":1745439353174,"code":"def parseAttendance(attendance: String): Either[String, Boolean] = attendance match {\n  case \"Y\" => Right(true)\n  case \"N\" => Right(false)\n  case _   => Left(\"Unrecognized attendance value\")\n}\nparseAttendance(\"Y\")\nparseAttendance(\"maybe\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_755","timestamp":1745439353174,"code":"case class Enrollment(studentId: String, courseId: String, active: Boolean)\nval enrollments = List(\n  Enrollment(\"s1\", \"phy\", true),\n  Enrollment(\"s2\", \"chem\", false)\n)\nenrollments.find(_.active).map(_.courseId)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_756","timestamp":1745439353174,"code":"case class Grade(studentId: String, grade: Option[String])\nval g = Grade(\"s10\", Some(\"A\"))\ng.grade.fold(\"No grade assigned\")(gr => s\"Grade: $gr\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_757","timestamp":1745439353174,"code":"import scala.util.Try\ncase class ReadingTime(minutes: Int)\ndef toReadingTime(str: String): Either[String, ReadingTime] =\n  Try(str.toInt).toEither.left.map(_ => s\"Invalid time: $str\").map(ReadingTime)\ntoReadingTime(\"30\")\ntoReadingTime(\"abc\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_758","timestamp":1745439353174,"code":"case class LearningGoal(goal: String, achieved: Boolean)\nval goals = List(\n  LearningGoal(\"Algebra\", true),\n  LearningGoal(\"Trigonometry\", false)\n)\ngoals.filter(_.achieved).map(_.goal)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_759","timestamp":1745439353174,"code":"case class Instructor(id: String, email: Option[String])\nval inst = Instructor(\"i101\", None)\ninst.email match {\n  case Some(e) => s\"Email: $e\"\n  case None    => \"No email provided\"\n}","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_760","timestamp":1745439353174,"code":"def safeDivide(a: Int, b: Int): Option[Double] = if (b != 0) Some(a.toDouble / b) else None\nsafeDivide(100, 10)\nsafeDivide(5, 0).getOrElse(Double.NaN)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_761","timestamp":1745439353174,"code":"case class Progress(studentId: String, percent: Option[Double])\ndef progressReport(progress: Progress): String =\n  progress.percent.map(p => s\"Progress: $p%\").getOrElse(\"No data\")\nprogressReport(Progress(\"s10\", Some(72.0)))","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_762","timestamp":1745439353174,"code":"import scala.util.Try\ncase class Event(timestamp: String, eventType: String)\ndef parseEvent(ts: String, typ: String): Try[Event] = Try(Event(ts, typ))\nparseEvent(\"2024-06-15T10:00\", \"login\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_763","timestamp":1745439353174,"code":"case class Course(id: String, students: List[String])\ndef findStudent(course: Course, sid: String): Option[String] =\n  course.students.find(_ == sid)\nfindStudent(Course(\"c101\", List(\"s1\",\"s2\",\"s3\")), \"s2\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_764","timestamp":1745439353174,"code":"case class SessionLength(studentId: String, minutes: Option[Int])\nval s = SessionLength(\"s201\", None)\ns.minutes.fold(0)(_ * 2)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_765","timestamp":1745439364421,"code":"case class User(id: Int, name: String, preferences: Set[String])\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_766","timestamp":1745439364421,"code":"case class Recipe(id: Int, title: String, ingredients: List[String], vegetarian: Boolean)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_767","timestamp":1745439364421,"code":"def findRecipeById(id: Int, recipes: List[Recipe]): Option[Recipe] = recipes.find(_.id == id)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_768","timestamp":1745439364421,"code":"def parsePreference(input: String): Option[String] = if (input.nonEmpty) Some(input.trim.toLowerCase) else None\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_769","timestamp":1745439364421,"code":"def recommendVegetarian(user: User, recipes: List[Recipe]): List[Recipe] =\n  if (user.preferences.contains(\"vegetarian\")) recipes.filter(_.vegetarian) else recipes\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_770","timestamp":1745439364421,"code":"def ingredientCount(recipe: Recipe): Int = recipe.ingredients.length\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_771","timestamp":1745439364421,"code":"import scala.util.Try\ndef parseRecipeId(s: String): Try[Int] = Try(s.toInt)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_772","timestamp":1745439364421,"code":"def getMainIngredient(recipe: Recipe): Option[String] = recipe.ingredients.headOption\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_773","timestamp":1745439364421,"code":"def recommendByIngredient(user: User, recipes: List[Recipe]): List[Recipe] =\n  user.preferences.headOption\n    .map(pref => recipes.filter(_.ingredients.exists(_.contains(pref))))\n    .getOrElse(recipes)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_774","timestamp":1745439364421,"code":"def adjustServingSize(ingredients: List[String], factor: Double): Either[String, List[String]] =\n  if (factor <= 0) Left(\"Serving factor must be positive.\") else Right(ingredients)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_775","timestamp":1745439364421,"code":"case class RatedRecipe(recipe: Recipe, rating: Option[Double])\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_776","timestamp":1745439364421,"code":"def topRated(recipes: List[RatedRecipe]): Option[RatedRecipe] =\n  recipes.sortBy(-_.rating.getOrElse(0.0)).headOption\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_777","timestamp":1745439364421,"code":"def getUserFavorite(user: User, rated: List[RatedRecipe]): Option[RatedRecipe] =\n  rated.filter(rr => user.preferences.exists(p => rr.recipe.ingredients.exists(_.contains(p)))).headOption\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_778","timestamp":1745439364421,"code":"def safeTitle(recipe: Option[Recipe]): String =\n  recipe.map(_.title).getOrElse(\"No recipe found\")\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_779","timestamp":1745439364421,"code":"import scala.util.Try\ndef caloriesPerServing(recipeData: String): Try[Int] = Try(recipeData.split(\",\")(2).toInt)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_780","timestamp":1745439364421,"code":"case class Recommendation(user: User, recipes: List[Recipe])\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_781","timestamp":1745439364421,"code":"def recommendGlutenFree(recipes: List[Recipe]): List[Recipe] =\n  recipes.filterNot(_.ingredients.exists(_.toLowerCase.contains(\"wheat\")))\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_782","timestamp":1745439364421,"code":"def suggestedRecipes(optRecipes: Option[List[Recipe]]): List[Recipe] =\n  optRecipes.getOrElse(List.empty)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_783","timestamp":1745439364421,"code":"def selectForAllergy(user: User, recipes: List[Recipe], allergy: String): List[Recipe] =\n  recipes.filterNot(_.ingredients.exists(_.toLowerCase.contains(allergy.toLowerCase)))\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_784","timestamp":1745439364422,"code":"def totalIngredients(recipes: List[Recipe]): Int = recipes.map(_.ingredients.size).sum\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_785","timestamp":1745439382342,"code":"case class Donor(id: Long, name: String, email: Option[String])\nval donor = Donor(1, \"Alice\", None)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_786","timestamp":1745439382342,"code":"def parseDonationAmount(str: String): Either[String, BigDecimal] =\n  try {\n    Right(BigDecimal(str))\n  } catch {\n    case _: NumberFormatException => Left(\"Invalid donation amount\")\n  }\nparseDonationAmount(\"20.50\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_787","timestamp":1745439382342,"code":"case class Charity(name: String, description: Option[String])\nval c = Charity(\"SaveTheForest\", Some(\"Providing trees for rural areas\"))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_788","timestamp":1745439382342,"code":"val optionalNote: Option[String] = Some(\"Keep up the great work!\")\nval displayNote = optionalNote.getOrElse(\"No note provided\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_789","timestamp":1745439382342,"code":"case class Donation(id: Long, donor: Donor, charity: Charity, amount: BigDecimal)\nval d = Donation(1, Donor(1, \"Alice\", None), Charity(\"KidsFund\", None), BigDecimal(50))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_790","timestamp":1745439382342,"code":"def findDonationById(id: Long): Option[Donation] = None\nfindDonationById(2).map(_.amount).getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_791","timestamp":1745439382342,"code":"def sendReceipt(email: Option[String]): Either[String, String] = \n  email match {\n    case Some(addr) => Right(s\"Receipt sent to $addr\")\n    case None => Left(\"No email address provided\")\n  }\nsendReceipt(Some(\"user@site.org\"))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_792","timestamp":1745439382342,"code":"val donorList: List[Donor] = List(Donor(1, \"John\", Some(\"john@site.com\")), Donor(2, \"Sue\", None))\ndonorList.collectFirst { case d if d.email.isDefined => d.email.get }","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_793","timestamp":1745439382342,"code":"case class DonationSummary(total: BigDecimal, donorCount: Int)\ndef summarize(ds: List[Donation]): DonationSummary = \n  DonationSummary(ds.map(_.amount).sum, ds.map(_.donor.id).distinct.size)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_794","timestamp":1745439382342,"code":"def safeDivideDonation(amount: BigDecimal, parts: Int): Option[BigDecimal] = \n  if (parts > 0) Some(amount / parts) else None\nsafeDivideDonation(BigDecimal(100), 4)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_795","timestamp":1745439382342,"code":"def getCharityDescription(c: Charity): String = c.description.getOrElse(\"No description available\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_796","timestamp":1745439382342,"code":"import scala.util.Try\ndef parseDonorId(str: String): Try[Long] = Try(str.toLong)\nparseDonorId(\"123\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_797","timestamp":1745439382342,"code":"def lookupDonorByEmail(email: String, donors: List[Donor]): Option[Donor] = \n  donors.find(_.email.contains(email))\nlookupDonorByEmail(\"john@site.com\", donorList)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_798","timestamp":1745439382342,"code":"def processDonation(amount: BigDecimal): Either[String, String] =\n  if (amount > 0) Right(\"Donation processed\") else Left(\"Invalid amount\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_799","timestamp":1745439382342,"code":"case class Campaign(name: String, target: BigDecimal, raised: BigDecimal)\ndef percentageRaised(c: Campaign): Option[Double] =\n  if (c.target != 0) Some((c.raised / c.target * 100).toDouble) else None","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_800","timestamp":1745439382342,"code":"case class Message(text: String, recipientEmail: Option[String])\ndef send(msg: Message): Option[String] =\n  msg.recipientEmail.map(email => s\"Sent to $email: ${msg.text}\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_801","timestamp":1745439382342,"code":"def anonymousDonorName(name: Option[String]): String =\n  name.getOrElse(\"Anonymous\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_802","timestamp":1745439382342,"code":"def updateCharityTarget(c: Charity, newTarget: Option[BigDecimal]): Either[String, Charity] =\n  newTarget match {\n    case Some(amount) if amount > 0 => Right(c)\n    case _ => Left(\"Invalid target amount\")\n  }","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_803","timestamp":1745439382342,"code":"val maybeAmount: Option[String] = Some(\"50\")\nval parsed: Option[BigDecimal] = maybeAmount.flatMap(a => Try(BigDecimal(a)).toOption)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_804","timestamp":1745439382342,"code":"def firstDonorWithEmail(ds: List[Donor]): Option[Donor] =\n  ds.find(_.email.isDefined)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_805","timestamp":1745439401697,"code":"case class Team(name: String)\ncase class Score(home: Int, away: Int)\ncase class Match(homeTeam: Team, awayTeam: Team, score: Score)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_806","timestamp":1745439401697,"code":"case class LiveScore(matchId: String, score: Option[Score])\ndef printCurrentScore(live: LiveScore): Unit = live.score match {\n  case Some(s) => println(s\"Score: ${s.home} - ${s.away}\")\n  case None => println(\"Score not available yet\")\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_807","timestamp":1745439401697,"code":"def parseScore(input: String): Option[Score] = {\n  input.split(\"-\").toList.map(_.trim).flatMap(s => scala.util.Try(s.toInt).toOption) match {\n    case h :: a :: Nil => Some(Score(h, a))\n    case _ => None\n  }\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_808","timestamp":1745439401697,"code":"import scala.util.{Try, Success, Failure}\ndef fetchLiveMatch(id: String): Try[LiveScore] = Try {\n  if (id.nonEmpty) LiveScore(id, Some(Score(1,2)))\n  else throw new Exception(\"Invalid match id\")\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_809","timestamp":1745439401697,"code":"case class Event(minute: Int, description: String)\ncase class LiveFeed(events: List[Event])\ndef latestEvent(feed: LiveFeed): Option[Event] = feed.events.lastOption","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_810","timestamp":1745439401697,"code":"def updateScore(current: Option[Score], scoredByHome: Boolean): Option[Score] = current.map {\n  case Score(h, a) if scoredByHome => Score(h+1, a)\n  case Score(h, a) => Score(h, a+1)\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_811","timestamp":1745439401697,"code":"case class ScoreUpdate(time: String, newScore: Score)\ndef prettyPrintUpdate(update: Option[ScoreUpdate]): String = update match {\n  case Some(u) => s\"At ${u.time}, new score: ${u.newScore.home}-${u.newScore.away}\"\n  case None => \"No updates yet.\"\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_812","timestamp":1745439401697,"code":"case class MatchStatus(live: Boolean, paused: Boolean)\ndef statusString(status: MatchStatus): String = status match {\n  case MatchStatus(true, false) => \"Live\"\n  case MatchStatus(false, true) => \"Paused\"\n  case MatchStatus(false, false) => \"Finished\"\n  case _ => \"Unknown\"\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_813","timestamp":1745439401697,"code":"case class MatchDetails(id: String, home: Team, away: Team, score: Option[Score])\ndef getAwayTeamName(details: MatchDetails): String = details.away.name","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_814","timestamp":1745439401697,"code":"def safeParseInt(str: String): Either[String, Int] =\n  scala.util.Try(str.toInt).toEither.left.map(_ => s\"Not a number: $str\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_815","timestamp":1745439401697,"code":"case class GoalScorer(name: String, minute: Int)\ndef getScorerAtMinute(list: List[GoalScorer], min: Int): Option[GoalScorer] =\n  list.find(_.minute == min)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_816","timestamp":1745439401697,"code":"def matchSummary(details: MatchDetails): String = details.score match {\n  case Some(s) => s\"${details.home.name} ${s.home}-${s.away} ${details.away.name}\"\n  case None => \"Score not available\"\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_817","timestamp":1745439401697,"code":"import scala.util.Try\ndef parseScoreUpdate(line: String): Try[ScoreUpdate] = Try {\n  val Array(t, s) = line.split(\" \")\n  val Array(h, a) = s.split(\"-\").map(_.toInt)\n  ScoreUpdate(t, Score(h, a))\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_818","timestamp":1745439401697,"code":"case class LiveMatch(matchId: String, events: List[Event], latestScore: Option[Score])\ndef addEvent(live: LiveMatch, event: Event): LiveMatch = live.copy(events = live.events :+ event)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_819","timestamp":1745439401697,"code":"def incrementHome(score: Option[Score]): Option[Score] = score.map(s => s.copy(home = s.home + 1))","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_820","timestamp":1745439401697,"code":"def safeGetScore(live: LiveScore): Either[String, Score] = live.score.toRight(\"Score not available\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_821","timestamp":1745439401697,"code":"import scala.util.{Try, Success}\ndef tryGetLatestEvent(feed: LiveFeed): Try[Event] = Try {\n  feed.events.last\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_822","timestamp":1745439401697,"code":"case class Notification(receiver: String, content: String)\ndef sendNotification(notification: Notification): Either[String, Unit] =\n  if (notification.receiver.nonEmpty) Right(println(notification.content)) else Left(\"No receiver specified\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_823","timestamp":1745439401697,"code":"case class Player(id: String, name: String)\ncase class Substitution(out: Player, in: Player, minute: Int)\ndef notifySub(sub: Option[Substitution]): String = sub match {\n  case Some(s) => s\"${s.in.name} replaced ${s.out.name} at ${s.minute}'\"\n  case None => \"No substitutions\"\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_824","timestamp":1745439401697,"code":"def parseEvent(str: String): Option[Event] = for {\n  parts <- Option(str.split(\",\")).filter(_.length == 2)\n  min <- scala.util.Try(parts(0).trim.toInt).toOption\n  desc = parts(1).trim\n} yield Event(min, desc)\n","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_825","timestamp":1745439414462,"code":"case class Car(id: String, make: String, model: String)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_826","timestamp":1745439414462,"code":"case class Rental(customerId: String, carId: String)\ndef customerForRental(rental: Rental, customers: Map[String, String]): Option[String] =\n  customers.get(rental.customerId)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_827","timestamp":1745439414462,"code":"case class Fleet(cars: List[Car])\ndef findCarById(fleet: Fleet, id: String): Option[Car] =\n  fleet.cars.find(_.id == id)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_828","timestamp":1745439414462,"code":"def parseYear(input: String): Either[String, Int] =\n  try Right(input.toInt)\n  catch { case _: NumberFormatException => Left(\"Invalid year\") }","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_829","timestamp":1745439414462,"code":"case class MaintenanceRecord(carId: String, date: String)\ndef recentMaintenance(records: List[MaintenanceRecord], carId: String): Option[MaintenanceRecord] =\n  records.filter(_.carId == carId).sortBy(_.date).lastOption","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_830","timestamp":1745439414462,"code":"def daysAvailable(car: Car, rentals: List[Rental]): Int =\n  if (rentals.exists(_.carId == car.id)) 0 else 7","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_831","timestamp":1745439414462,"code":"def getCarOrDefault(fleet: Fleet, id: String): Car =\n  findCarById(fleet, id).getOrElse(Car(\"unknown\", \"Unknown\", \"Unknown\"))","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_832","timestamp":1745439414462,"code":"def parseCar(data: String): Option[Car] = {\n  val parts = data.split(\",\")\n  if (parts.length == 3) Some(Car(parts(0), parts(1), parts(2))) else None\n}","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_833","timestamp":1745439414462,"code":"case class Reservation(customerId: String, carId: String, status: String)\ndef updateStatus(reservation: Reservation, newStatus: Option[String]): Reservation =\n  reservation.copy(status = newStatus.getOrElse(reservation.status))","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_834","timestamp":1745439414462,"code":"def safeHead[T](xs: List[T]): Option[T] = xs.headOption","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_835","timestamp":1745439414462,"code":"case class Location(city: String, state: String)\ncase class Station(name: String, location: Option[Location])","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_836","timestamp":1745439414462,"code":"case class Price(amount: Double)\ndef applyDiscount(price: Price, percent: Option[Double]): Price =\n  percent.fold(price)(p => Price(price.amount * (1 - p / 100)))","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_837","timestamp":1745439414462,"code":"import scala.util.Try\ndef safeDivide(a: Double, b: Double): Try[Double] = Try(a / b)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_838","timestamp":1745439414462,"code":"def carStatus(carId: String, rentedCars: Set[String]): String =\n  if (rentedCars.contains(carId)) \"Rented\" else \"Available\"","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_839","timestamp":1745439414462,"code":"case class Insurance(policyNum: String, valid: Boolean)\ndef hasValidInsurance(optIns: Option[Insurance]): Boolean =\n  optIns.exists(_.valid)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_840","timestamp":1745439414462,"code":"case class Customer(id: String, name: String)\ndef findCustomer(name: String, customers: List[Customer]): Option[Customer] =\n  customers.find(_.name == name)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_841","timestamp":1745439414462,"code":"def tryParseDouble(s: String): Either[String, Double] =\n  Try(s.toDouble).toEither.left.map(_ => s\"Bad double: $s\")","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_842","timestamp":1745439414462,"code":"case class FuelLog(carId: String, liters: Double)\ndef averageFuelUsed(logs: List[FuelLog], carId: String): Option[Double] = {\n  val carLogs = logs.filter(_.carId == carId)\n  if (carLogs.isEmpty) None else Some(carLogs.map(_.liters).sum / carLogs.size)\n}","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_843","timestamp":1745439414462,"code":"def isCarRented(car: Car, rentals: List[Rental]): Boolean =\n  rentals.exists(_.carId == car.id)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_844","timestamp":1745439414462,"code":"case class Driver(id: String, license: Option[String])\ndef hasLicense(driver: Driver): Boolean =\n  driver.license.nonEmpty","category":"idiomatic","topicUsed":"Car rental fleet management"}
