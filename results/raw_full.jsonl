{"id":"idiomatic_1","timestamp":1745438014894,"code":"case class Product(id: String, name: String, price: BigDecimal)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_2","timestamp":1745438014894,"code":"case class CartItem(product: Product, quantity: Int)\ncase class Cart(items: List[CartItem])","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_3","timestamp":1745438014894,"code":"def findProductById(id: String, catalog: List[Product]): Option[Product] =\n  catalog.find(_.id == id)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_4","timestamp":1745438014894,"code":"def discountCodeValue(code: Option[String]): BigDecimal =\n  code.map(_ => 10.00).getOrElse(0.00)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_5","timestamp":1745438014894,"code":"def parseQuantity(str: String): Either[String, Int] =\n  scala.util.Try(str.toInt).toEither.left.map(_ => \"Invalid quantity\")","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_6","timestamp":1745438014894,"code":"case class Address(street: String, city: String, zip: Option[String])","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_7","timestamp":1745438014894,"code":"def getShippingFee(zip: Option[String]): BigDecimal =\n  zip.map(_ => 4.99).getOrElse(9.99)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_8","timestamp":1745438014894,"code":"def paymentToken(token: Option[String]): Either[String, String] =\n  token.toRight(\"Payment token missing\")","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_9","timestamp":1745438014894,"code":"def applyDiscount(total: BigDecimal, discountCode: Option[String]): BigDecimal =\n  discountCode.map(_ => total * 0.9).getOrElse(total)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_10","timestamp":1745438014895,"code":"def safeDivide(a: BigDecimal, b: BigDecimal): Option[BigDecimal] =\n  if (b == 0) None else Some(a / b)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_11","timestamp":1745438014895,"code":"case class OrderSummary(orderId: String, total: BigDecimal, status: String)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_12","timestamp":1745438014895,"code":"case class PaymentInfo(method: String, accountId: String, cvv: Option[String])","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_13","timestamp":1745438014895,"code":"def getCartTotal(cart: Cart): BigDecimal =\n  cart.items.map(item => item.product.price * item.quantity).sum","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_14","timestamp":1745438014895,"code":"def validateAddress(address: Address): Either[String, Address] =\n  if (address.zip.exists(_.nonEmpty)) Right(address) else Left(\"ZIP code required\")","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_15","timestamp":1745438014895,"code":"def finalizeOrder(user: Option[String], cart: Cart): Either[String, OrderSummary] =\n  user match {\n    case Some(u) => Right(OrderSummary(orderId = u.take(5)+\"-\"+System.currentTimeMillis(), total = getCartTotal(cart), status = \"Pending\"))\n    case None => Left(\"User not logged in\")\n  }","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_16","timestamp":1745438014895,"code":"def parsePrice(s: String): scala.util.Try[BigDecimal] =\n  scala.util.Try(BigDecimal(s))","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_17","timestamp":1745438014895,"code":"case class Coupon(code: String, discount: Option[BigDecimal])","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_18","timestamp":1745438014895,"code":"def getCouponDiscount(coupon: Option[Coupon], cartTotal: BigDecimal): BigDecimal =\n  coupon.flatMap(_.discount).getOrElse(0.0)","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_19","timestamp":1745438014895,"code":"def safeProductName(product: Option[Product]): String =\n  product.map(_.name).getOrElse(\"Unknown Product\")","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_20","timestamp":1745438014895,"code":"def parseCartItem(data: Map[String, String], catalog: List[Product]): Either[String, CartItem] =\n  for {\n    id <- data.get(\"productId\").toRight(\"productId missing\")\n    product <- findProductById(id, catalog).toRight(\"Product not found\")\n    quantityStr <- data.get(\"quantity\").toRight(\"quantity missing\")\n    quantity <- parseQuantity(quantityStr)\n  } yield CartItem(product, quantity)\n","category":"idiomatic","topicUsed":"E-commerce checkout"}
{"id":"idiomatic_21","timestamp":1745438033940,"code":"case class UserProfile(id: String, name: String, email: Option[String])\n\nval user1 = UserProfile(\"u1\", \"Alice\", Some(\"alice@bank.com\"))\nval user2 = UserProfile(\"u2\", \"Bob\", None)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_22","timestamp":1745438033940,"code":"def findAccount(accounts: List[Account], accountId: String): Option[Account] = {\n  accounts.find(_.id == accountId)\n}\n\ncase class Account(id: String, balance: BigDecimal)\nval maybeAcc = findAccount(List(Account(\"a1\", 100)), \"a2\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_23","timestamp":1745438033940,"code":"case class Transaction(id: String, amount: BigDecimal, description: Option[String])\n\nval t = Transaction(\"t1\", 200, None)\nval desc = t.description.getOrElse(\"No description provided.\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_24","timestamp":1745438033940,"code":"import scala.util.Try\n\ndef parseAmount(input: String): Try[BigDecimal] = Try(BigDecimal(input))\n\nval result = parseAmount(\"250.15\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_25","timestamp":1745438033940,"code":"import scala.util.Try\n\nval withdrawalResult = Try(100 / 0).recover {\n  case _: ArithmeticException => -1\n}","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_26","timestamp":1745438033940,"code":"case class CreditCard(number: String, expiry: String, cvv: Option[String])\nval ccInfo = CreditCard(\"1234567890123456\", \"12/25\", None)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_27","timestamp":1745438033940,"code":"def getAuthToken(headers: Map[String, String]): Option[String] = {\n  headers.get(\"Authorization\")\n}\nval token = getAuthToken(Map(\"User\" -> \"bob\"))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_28","timestamp":1745438033940,"code":"def mobileNumberVerified(num: Option[String]): String = num match {\n  case Some(n) => s\"Verified: $n\"\n  case None    => \"Mobile number not verified\"\n}\nval msg = mobileNumberVerified(None)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_29","timestamp":1745438033940,"code":"case class Transfer(from: String, to: String, amount: BigDecimal)\ndef transferFunds(t: Transfer): Either[String, String] = {\n  if (t.amount <= 0) Left(\"Amount must be positive\") else Right(\"Transfer complete\")\n}\nval r = transferFunds(Transfer(\"a\", \"b\", 0))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_30","timestamp":1745438033940,"code":"case class Beneficiary(account: String, nickname: Option[String])\nval ben = Beneficiary(\"54321\", Some(\"Savings account\"))\nval label = ben.nickname.fold(\"No nick\")(_ + \" ben\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_31","timestamp":1745438033940,"code":"def findSession(sessions: Map[String, String], sessionId: String): Option[String] = {\n  sessions.get(sessionId)\n}\nval value = findSession(Map(\"s1\" -> \"active\"), \"s2\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_32","timestamp":1745438033940,"code":"import scala.util.Try\n\ndef safeDivide(x: Int, y: Int): Try[Int] = Try(x / y)\nval res = safeDivide(10, 0).getOrElse(-1)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_33","timestamp":1745438033940,"code":"case class DeviceInfo(id: String, osVersion: String, pushToken: Option[String])\nval info = DeviceInfo(\"dev1\", \"iOS 16\", None)\nval hasPush = info.pushToken.isDefined","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_34","timestamp":1745438033940,"code":"case class Balance(amount: BigDecimal)\ndef showBalance(b: Option[Balance]): String = b match {\n  case Some(balance) => s\"$${balance.amount}\"\n  case None => \"Unavailable\"\n}\nval sb = showBalance(None)","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_35","timestamp":1745438033940,"code":"case class ScheduledPayment(id: String, date: String, amount: BigDecimal, note: Option[String])\nval sp = ScheduledPayment(\"pid\", \"2024-12-01\", 50, Some(\"Rent\"))\nval noteMsg = sp.note.getOrElse(\"No note\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_36","timestamp":1745438033940,"code":"def updateEmail(profile: UserProfile, email: Option[String]): UserProfile = {\n  profile.copy(email = email)\n}\nval updated = updateEmail(UserProfile(\"u1\", \"Alice\", None), Some(\"alice@bank.com\"))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_37","timestamp":1745438033940,"code":"def parseIntOpt(s: String): Option[Int] = scala.util.Try(s.toInt).toOption\nval age = parseIntOpt(\"thirty\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_38","timestamp":1745438033940,"code":"case class Notification(id: String, msg: String, read: Boolean)\ndef unread(notifs: List[Notification]): List[Notification] = notifs.filterNot(_.read)\nval unreadList = unread(List(Notification(\"1\", \"Welcome!\", false)))","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_39","timestamp":1745438033940,"code":"case class SecurityQuestion(question: String, answer: String)\ndef verifyAnswer(q: SecurityQuestion, input: String): Either[String, Boolean] = {\n  if (input == q.answer) Right(true) else Left(\"Incorrect answer\")\n}\nval checked = verifyAnswer(SecurityQuestion(\"Pet?\", \"dog\"), \"cat\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_40","timestamp":1745438033940,"code":"def lookupTransaction(transactions: Map[String, Transaction], id: String): Option[Transaction] = {\n  transactions.get(id)\n}\nval tx = lookupTransaction(Map(\"t1\" -> Transaction(\"t1\", 10, None)), \"t2\")","category":"idiomatic","topicUsed":"Mobile banking app"}
{"id":"idiomatic_41","timestamp":1745438048070,"code":"case class Patient(id: String, name: String, email: Option[String])\nval john = Patient(\"p01\", \"John Smith\", Some(\"john@telemed.com\"))\nval jane = Patient(\"p02\", \"Jane Doe\", None)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_42","timestamp":1745438048070,"code":"case class Appointment(id: String, patientId: String, doctorId: String, dateTime: String)\nval appt = Appointment(\"a01\", \"p01\", \"d01\", \"2024-07-05T10:00\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_43","timestamp":1745438048070,"code":"def findPatientEmail(p: Patient): String =\n  p.email.getOrElse(\"Email not provided\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_44","timestamp":1745438048070,"code":"import scala.util.Try\ndef parseDateTime(s: String): Try[java.time.LocalDateTime] =\n  Try(java.time.LocalDateTime.parse(s))","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_45","timestamp":1745438048070,"code":"case class Doctor(id: String, name: String, telemedicineAvailable: Boolean)\nval drSmith = Doctor(\"d01\", \"Dr. Smith\", true)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_46","timestamp":1745438048070,"code":"def scheduleAppointment(patient: Patient, doctor: Doctor, dateTime: String): Either[String, Appointment] =\n  if (!doctor.telemedicineAvailable) Left(\"Doctor unavailable for telemedicine.\")\n  else Right(Appointment(\"a02\", patient.id, doctor.id, dateTime))","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_47","timestamp":1745438048070,"code":"def getDoctorById(id: String): Option[Doctor] =\n  if (id == \"d01\") Some(drSmith) else None","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_48","timestamp":1745438048070,"code":"val docOpt: Option[Doctor] = getDoctorById(\"d99\")\nval docName = docOpt.map(_.name).getOrElse(\"Unknown Doctor\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_49","timestamp":1745438048070,"code":"def appointmentConfirmation(appt: Option[Appointment]): String = appt match {\n  case Some(a) => s\"Appointment scheduled: ${a.id}\"\n  case None => \"No appointment scheduled.\"\n}","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_50","timestamp":1745438048070,"code":"import scala.util.Try\nval maybeAppt = Try(Appointment(\"a03\", \"p03\", \"d02\", \"invalid-date\"))\nval apptResult = maybeAppt.toOption","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_51","timestamp":1745438048070,"code":"case class TimeSlot(start: String, end: String)\ndef findAvailableSlot(slots: List[TimeSlot]): Option[TimeSlot] =\n  slots.headOption","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_52","timestamp":1745438048070,"code":"val patients = List(john, jane)\nval emails = patients.flatMap(_.email)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_53","timestamp":1745438048070,"code":"def cancelAppointment(appt: Option[Appointment]): Either[String, String] =\n  appt.toRight(\"Appointment does not exist\").map(a => s\"Cancelled ${a.id}\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_54","timestamp":1745438048070,"code":"case class VideoSession(url: String, token: String)\ndef createSession(appt: Appointment): Either[String, VideoSession] =\n  if (appt.dateTime.nonEmpty) Right(VideoSession(\"https://video.com/room\", \"tok123\"))\n  else Left(\"Missing appointment time.\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_55","timestamp":1745438048070,"code":"def safeEmailUpper(p: Patient): Option[String] =\n  p.email.map(_.toUpperCase)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_56","timestamp":1745438048070,"code":"case class SchedulerState(appointments: List[Appointment])\ndef addAppointment(state: SchedulerState, appt: Appointment): SchedulerState =\n  state.copy(appointments = appt :: state.appointments)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_57","timestamp":1745438048070,"code":"case class AppointmentRequest(patientId: String, preferredTime: Option[String])\ndef bestEffortSchedule(req: AppointmentRequest): Option[Appointment] =\n  req.preferredTime.map(t => Appointment(\"a12\", req.patientId, \"d10\", t))","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_58","timestamp":1745438048070,"code":"import scala.util.Try\ndef parseAndSchedule(dateStr: String, patient: Patient, doctor: Doctor): Try[Appointment] =\n  Try(java.time.LocalDateTime.parse(dateStr)).map(_ => Appointment(\"a20\", patient.id, doctor.id, dateStr))","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_59","timestamp":1745438048070,"code":"def notifyPatient(p: Patient, msg: String): Option[String] =\n  p.email.map(e => s\"Send to $e: $msg\")","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_60","timestamp":1745438048070,"code":"case class AppointmentSummary(appointment: Appointment, videoSession: Option[VideoSession])\ndef summarize(appt: Appointment, session: Either[String, VideoSession]): AppointmentSummary =\n  AppointmentSummary(appt, session.toOption)","category":"idiomatic","topicUsed":"Telemedicine appointment scheduling"}
{"id":"idiomatic_61","timestamp":1745438082894,"code":"case class StepData(userId: String, steps: Int, date: String)\nval todayData = StepData(\"u123\", 12000, \"2024-01-14\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_62","timestamp":1745438082894,"code":"case class HeartRate(value: Int)\ndef safeHeartRate(input: String): Option[HeartRate] =\n  input.toIntOption.map(HeartRate(_))\nsafeHeartRate(\"85\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_63","timestamp":1745438082894,"code":"case class SleepRecord(hours: Int)\ndef classifySleep(record: Option[SleepRecord]) =\n  record.map(r => if (r.hours >= 8) \"good\" else \"poor\")\n    .getOrElse(\"unknown\")\nclassifySleep(Some(SleepRecord(7)))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_64","timestamp":1745438082894,"code":"import scala.util.Try\ncase class CaloriesBurned(amount: Double)\ndef parseCalories(str: String): Try[CaloriesBurned] =\n  Try(CaloriesBurned(str.toDouble))\nparseCalories(\"234.5\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_65","timestamp":1745438082894,"code":"case class GPSTrack(points: List[(Double, Double)])\ndef totalDistance(track: Option[GPSTrack]) =\n  track.map(_.points.size - 1).getOrElse(0)\ntotalDistance(None)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_66","timestamp":1745438082894,"code":"case class Workout(session: String, duration: Int)\nval maybeWorkout: Option[Workout] = None\nmaybeWorkout.fold(\"No data available\")(_.session)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_67","timestamp":1745438082894,"code":"case class UserProfile(id: String, nickname: Option[String])\nval user = UserProfile(\"u567\", None)\nuser.nickname.getOrElse(\"Guest\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_68","timestamp":1745438082894,"code":"case class ZoneMinutes(cardio: Int, fatBurn: Int)\ndef totalZoneMinutes(zone: ZoneMinutes): Int =\n  zone.cardio + zone.fatBurn\ntotalZoneMinutes(ZoneMinutes(20, 30))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_69","timestamp":1745438082895,"code":"import scala.util.Try\ncase class Activity(name: String, calories: Int)\ndef safeActivity(line: String): Either[String, Activity] = {\n  val parts = line.split(\",\")\n  if (parts.length != 2) Left(\"Invalid format\")\n  else Try(parts(1).trim.toInt).toOption match {\n    case Some(cals) => Right(Activity(parts(0).trim, cals))\n    case None => Left(\"Calories not a number\")\n  }\n}\nsafeActivity(\"Cycling, 320\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_70","timestamp":1745438082895,"code":"case class WaterIntake(ml: Int, date: String)\ndef status(water: Option[WaterIntake]) =\n  water match {\n    case Some(WaterIntake(ml, _)) if ml >= 2000 => \"sufficient\"\n    case Some(_) => \"insufficient\"\n    case None => \"missing\"\n  }\nstatus(Some(WaterIntake(1500, \"2024-01-14\")))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_71","timestamp":1745438082895,"code":"case class Session(date: String, calories: Option[Double])\ndef averageCalories(sessions: List[Session]): Double =\n  val total = sessions.flatMap(_.calories).sum\n  val count = sessions.count(_.calories.isDefined)\n  if (count == 0) 0.0 else total / count\naverageCalories(List(Session(\"2024-01-14\", Some(230)), Session(\"2024-01-15\", None)))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_72","timestamp":1745438082895,"code":"case class StepGoal(goal: Int)\ndef achieved(goal: Option[StepGoal], actual: Int) =\n  goal.exists(_.goal <= actual)\nachieved(Some(StepGoal(10000)), 12000)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_73","timestamp":1745438082895,"code":"import scala.util.Try\ncase class WeightEntry(weight: Double)\ndef safeWeight(str: String): Try[WeightEntry] =\n  Try(str.toDouble).map(WeightEntry(_))\nsafeWeight(\"72.5\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_74","timestamp":1745438082895,"code":"case class HeartRateZone(userId: String, zone: Option[String])\nval z = HeartRateZone(\"u001\", Some(\"Cardio\"))\nz.zone.fold(\"unknown\")(_.toLowerCase)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_75","timestamp":1745438082895,"code":"case class WorkoutSummary(typeName: String, distanceKm: Option[Double])\ndef showDistance(ws: WorkoutSummary) =\n  ws.distanceKm.map(d => f\"$d%.1f km\").getOrElse(\"n/a\")\nshowDistance(WorkoutSummary(\"run\", None))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_76","timestamp":1745438082895,"code":"case class Badge(name: String)\ndef firstBadge(badges: List[Badge]): Option[Badge] =\n  badges.headOption\nfirstBadge(Nil)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_77","timestamp":1745438082895,"code":"case class ElevationGain(meters: Int)\nval maybeElev = Some(ElevationGain(210))\nmaybeElev match {\n  case Some(ElevationGain(m)) if m > 200 => \"steep\"\n  case Some(_) => \"normal\"\n  case None => \"unknown\"\n}","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_78","timestamp":1745438082895,"code":"case class MoodEntry(level: Option[Int], date: String)\ndef positiveMood(entry: MoodEntry) =\n  entry.level.contains(5)\npositiveMood(MoodEntry(Some(5), \"2024-01-14\"))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_79","timestamp":1745438082895,"code":"import scala.util.Try\ncase class ActiveMinutes(minutes: Int)\ndef parseActiveMinutes(str: String): Either[String, ActiveMinutes] =\n  Try(str.toInt).toOption match {\n    case Some(mins) => Right(ActiveMinutes(mins))\n    case None => Left(\"Invalid minutes\")\n  }\nparseActiveMinutes(\"notANumber\")","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_80","timestamp":1745438082895,"code":"case class Device(user: String, deviceId: Option[String])\ndef deviceAssigned(d: Device) =\n  d.deviceId.isDefined\ndeviceAssigned(Device(\"user1\", None))","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_81","timestamp":1745438082895,"code":"case class BodyFat(percent: Double)\ndef safeFat(p: Any): Option[BodyFat] =\n  p match {\n    case d: Double => Some(BodyFat(d))\n    case _ => None\n  }\nsafeFat(18.0)","category":"idiomatic","topicUsed":"Fitness tracker analytics"}
{"id":"idiomatic_82","timestamp":1745438099091,"code":"case class PricingPlan(id: String, name: String, price: BigDecimal)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_83","timestamp":1745438099091,"code":"case class PlanFeature(planId: String, feature: String)\nval feature: Option[PlanFeature] = None\nfeature.map(_.feature).getOrElse(\"No feature\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_84","timestamp":1745438099091,"code":"def findPlan(plans: List[PricingPlan], id: String): Option[PricingPlan] =\n  plans.find(_.id == id)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_85","timestamp":1745438099091,"code":"val trialDays: Option[Int] = Some(14)\nval days = trialDays.getOrElse(0)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_86","timestamp":1745438099091,"code":"def parsePrice(s: String): Either[String, BigDecimal] =\n  try Right(BigDecimal(s))\n  catch { case _: NumberFormatException => Left(\"Invalid price\") }","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_87","timestamp":1745438099091,"code":"case class UserPlan(userId: String, plan: PricingPlan)\ndef assignPlan(userId: String, planOpt: Option[PricingPlan]): Option[UserPlan] =\n  planOpt.map(plan => UserPlan(userId, plan))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_88","timestamp":1745438099091,"code":"import scala.util.Try\ncase class PlanDuration(months: Int)\ndef safeDuration(s: String): Option[PlanDuration] =\n  Try(PlanDuration(s.toInt)).toOption","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_89","timestamp":1745438099091,"code":"import scala.util.Try\nval maybePlan: Option[PricingPlan] = None\nval planName: String = maybePlan.map(_.name).getOrElse(\"Default Plan\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_90","timestamp":1745438099091,"code":"case class PlanUpdate(id: String, newPrice: Option[BigDecimal])\ndef updatePrice(plan: PricingPlan, update: PlanUpdate): PricingPlan =\n  plan.copy(price = update.newPrice.getOrElse(plan.price))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_91","timestamp":1745438099091,"code":"val plans: List[PricingPlan] = List(PricingPlan(\"b\",\"Basic\",5), PricingPlan(\"p\",\"Pro\",10))\ndef cheapestPlan(plans: List[PricingPlan]): Option[PricingPlan] =\n  plans.sortBy(_.price).headOption","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_92","timestamp":1745438099091,"code":"case class PlanDiscount(code: String, percent: Int)\ndef discountAmount(plan: PricingPlan, discount: Option[PlanDiscount]): BigDecimal =\n  discount.map(d => plan.price * (d.percent / 100.0)).getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_93","timestamp":1745438099091,"code":"import scala.util.Try\ndef parsePlan(json: String): Try[PricingPlan] =\n  Try { PricingPlan(json, \"Parsed Plan\", 99) }","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_94","timestamp":1745438099091,"code":"case class PlanStatus(isActive: Boolean, expiresOn: Option[String])\nval expiresLabel = PlanStatus(true, None).expiresOn.getOrElse(\"No expiration\")","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_95","timestamp":1745438099091,"code":"val maybePrice: Option[String] = Some(\"19.99\")\nval price: Either[String, BigDecimal] =\n  maybePrice.toRight(\"No price set\").flatMap(s =>\n    Try(BigDecimal(s)).toEither.left.map(_ => \"Invalid price\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_96","timestamp":1745438099091,"code":"case class PlanMigration(oldId: String, newId: String)\ndef migrate(plan: Option[PricingPlan], migration: PlanMigration): Option[PricingPlan] =\n  plan.map(p => p.copy(id = migration.newId))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_97","timestamp":1745438099091,"code":"def addFeatureToPlan(plan: PricingPlan, featureOpt: Option[String]): Either[String, PlanFeature] =\n  featureOpt.map(f => Right(PlanFeature(plan.id, f))).getOrElse(Left(\"Missing feature\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_98","timestamp":1745438099091,"code":"val planIds: List[String] = List(\"a1\", \"b2\")\ndef findFirstPlan(plans: List[PricingPlan], ids: List[String]): Option[PricingPlan] =\n  ids.flatMap(id => plans.find(_.id == id)).headOption","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_99","timestamp":1745438099091,"code":"case class PlanLimits(planId: String, maxUsers: Option[Int])\ndef userLimit(plan: PlanLimits): Int = plan.maxUsers.getOrElse(1)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_100","timestamp":1745438099092,"code":"import scala.util.Try\ndef priceWithTax(plan: PricingPlan, taxPct: Option[Int]): Try[BigDecimal] =\n  Try(taxPct.getOrElse(0)).map(tax => plan.price * (1 + tax / 100.0))","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_101","timestamp":1745438099092,"code":"def safeGetPlanName(planOpt: Option[PricingPlan]): String =\n  planOpt.fold(\"Unknown Plan\")(_.name)","category":"idiomatic","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"idiomatic_102","timestamp":1745438111967,"code":"case class Light(id: String, isOn: Boolean)\nval livingRoomLight = Light(\"living-room\", isOn = false)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_103","timestamp":1745438111968,"code":"case class Thermostat(location: String, currentTemp: Double, targetTemp: Double)\nval t = Thermostat(\"kitchen\", 20.5, 22.0)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_104","timestamp":1745438111968,"code":"def findDeviceById(id: String): Option[String] =\n  if (id == \"living-room\") Some(\"Light\") else None\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_105","timestamp":1745438111968,"code":"def getTemperatureReading(sensorId: String): Option[Double] =\n  if (sensorId == \"sensor-1\") Some(21.3) else None\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_106","timestamp":1745438111968,"code":"val maybeTemp: Option[Double] = getTemperatureReading(\"sensor-2\")\nval actualTemp = maybeTemp.getOrElse(0.0)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_107","timestamp":1745438111968,"code":"val maybeDevice: Option[String] = findDeviceById(\"bedroom\")\nmaybeDevice match {\n  case Some(device) => device.toUpperCase\n  case None => \"Unknown Device\"\n}\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_108","timestamp":1745438111968,"code":"import scala.util.Try\ndef parseTemperature(input: String): Try[Double] = Try(input.toDouble)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_109","timestamp":1745438111968,"code":"import scala.util.Try\nval tempTry = parseTemperature(\"invalid\")\nval result = tempTry.getOrElse(18.0)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_110","timestamp":1745438111968,"code":"case class DeviceStatus(id: String, status: String)\nval status = DeviceStatus(\"sensor-1\", \"active\")\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_111","timestamp":1745438111968,"code":"case class SmartPlug(id: String, isOn: Boolean)\nval plugs: List[SmartPlug] = List(SmartPlug(\"plug1\", false), SmartPlug(\"plug2\", true))\nval allOn = plugs.forall(_.isOn)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_112","timestamp":1745438111968,"code":"def adjustBrightness(deviceId: String, value: Int): Either[String, Int] =\n  if (value >= 0 && value <= 100) Right(value)\n  else Left(s\"Invalid brightness $value for $deviceId\")\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_113","timestamp":1745438111968,"code":"val brightnessResult = adjustBrightness(\"lamp1\", 150)\nval brightValue = brightnessResult.getOrElse(50)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_114","timestamp":1745438111968,"code":"case class MotionSensor(id: String, lastMotion: Option[Long])\nval motion = MotionSensor(\"front-door\", None)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_115","timestamp":1745438111968,"code":"case class DoorLock(id: String, isLocked: Boolean)\ndef maybeUnlock(lock: DoorLock): Option[DoorLock] =\n  if (lock.isLocked) Some(lock.copy(isLocked = false)) else None\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_116","timestamp":1745438111968,"code":"def setTargetTemperature(deviceId: String, value: Double): Either[String, Double] = {\n  if (value >= 15.0 && value <= 25.0) Right(value)\n  else Left(s\"Temperature $value out of range for $deviceId\")\n}\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_117","timestamp":1745438111968,"code":"import scala.util.Try\ndef safeToggle(dev: Option[SmartPlug]): Try[SmartPlug] = Try(dev.map(p => p.copy(isOn = !p.isOn)).get)\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_118","timestamp":1745438111968,"code":"case class Room(name: String, devices: List[String])\nval rooms = List(Room(\"Bedroom\", List(\"Light\", \"Plug\")), Room(\"Hall\", Nil))\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_119","timestamp":1745438111968,"code":"def findTargetTemp(thermo: Thermostat): Option[Double] =\n  if (thermo.targetTemp > 0) Some(thermo.targetTemp) else None\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_120","timestamp":1745438111968,"code":"case class Scene(name: String, actions: List[String])\nval eveningScene = Scene(\"Evening\", List(\"dim-lights\", \"lock-door\"))\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_121","timestamp":1745438111968,"code":"def setDeviceStatus(id: String, status: Option[String]): String = status match {\n  case Some(s) => s\"Device $id set to $s\"\n  case None => s\"No status provided for $id\"\n}\n","category":"idiomatic","topicUsed":"Smart home device control"}
{"id":"idiomatic_122","timestamp":1745438124562,"code":"case class Rider(id: String, location: String)\ncase class Driver(id: String, available: Boolean)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_123","timestamp":1745438124562,"code":"def findRider(riders: List[Rider], riderId: String): Option[Rider] =\n  riders.find(_.id == riderId)\n\ndef getRiderLocation(riderOpt: Option[Rider]): String =\n  riderOpt.map(_.location).getOrElse(\"Unknown\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_124","timestamp":1745438124562,"code":"case class RideRequest(rider: Rider, pickup: String, destination: String)\ndef isPickupValid(request: RideRequest): Boolean = request.pickup.nonEmpty","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_125","timestamp":1745438124562,"code":"case class DispatchResult(driver: Driver, estimatedArrival: Int)\ndef safeDispatch(rider: Rider, drivers: List[Driver]): Option[DispatchResult] =\n  drivers.find(_.available).map(d => DispatchResult(d, 5))","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_126","timestamp":1745438124562,"code":"import scala.util.Try\n\ndef parseDistance(str: String): Try[Int] = Try(str.toInt)\nval maybeDistance = parseDistance(\"15\").getOrElse(0)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_127","timestamp":1745438124562,"code":"case class MatchmakingError(reason: String)\ndef assignDriver(rider: Rider, drivers: List[Driver]): Either[MatchmakingError, Driver] =\n  drivers.find(_.available).toRight(MatchmakingError(\"No available drivers\"))","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_128","timestamp":1745438124562,"code":"case class Route(pickup: String, dropoff: String, distanceKm: Int)\nval maybeRoute: Option[Route] = Some(Route(\"A\", \"B\", 12))\nval dropoff = maybeRoute.map(_.dropoff).getOrElse(\"Unknown\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_129","timestamp":1745438124562,"code":"def estimateFare(distanceKm: Int): Either[String, Double] =\n  if (distanceKm < 0) Left(\"Distance cannot be negative\")\n  else Right(distanceKm * 1.25)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_130","timestamp":1745438124562,"code":"case class Vehicle(plate: String, capacity: Int)\ndef vehicleCapacity(vehicleOpt: Option[Vehicle]): Int =\n  vehicleOpt.map(_.capacity).getOrElse(0)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_131","timestamp":1745438124562,"code":"import scala.util.{Try, Success, Failure}\ndef parseFare(input: String): Try[Double] = Try(input.toDouble)\nparseFare(\"9.75\") match {\n  case Success(v) => v\n  case Failure(_) => 0.0\n}","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_132","timestamp":1745438124562,"code":"case class Ride(id: String, rider: Rider, driver: Option[Driver])\ndef isAssigned(ride: Ride): Boolean = ride.driver.isDefined","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_133","timestamp":1745438124562,"code":"def findNearestDriver(riderLoc: String, drivers: List[Driver]): Option[Driver] =\n  drivers.filter(_.available).headOption","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_134","timestamp":1745438124562,"code":"def getDropoffTime(eta: Option[Int]): Int = eta.getOrElse(30)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_135","timestamp":1745438124562,"code":"case class Feedback(score: Int, comment: Option[String])\ndef printComment(f: Feedback): String =\n  f.comment.getOrElse(\"No comment provided\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_136","timestamp":1745438124562,"code":"case class RideStatus(id: String, status: String)\ndef updateStatus(status: Option[RideStatus]): String =\n  status.map(_.status).getOrElse(\"Unknown\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_137","timestamp":1745438124562,"code":"def parseCoordinates(coord: String): Either[String, (Double, Double)] =\n  coord.split(\",\") match {\n    case Array(lat, lon) =>\n      Try((lat.toDouble, lon.toDouble)).toEither.left.map(_ => \"Invalid number format\")\n    case _ => Left(\"Invalid coordinate format\")\n  }","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_138","timestamp":1745438124562,"code":"case class Payment(amount: Double, method: Option[String])\ndef getPaymentMethod(payment: Payment): String = payment.method.getOrElse(\"cash\")","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_139","timestamp":1745438124562,"code":"def safeFareCalculation(distance: Option[Int]): Either[String, Double] =\n  distance.map(d => if (d < 0) Left(\"Invalid distance\") else Right(d * 1.15)).getOrElse(Left(\"Distance not provided\"))","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_140","timestamp":1745438124562,"code":"case class Surge(zone: String, multiplier: Double)\ndef applySurge(fare: Double, surgeOpt: Option[Surge]): Double =\n  surgeOpt.map(s => fare * s.multiplier).getOrElse(fare)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_141","timestamp":1745438124562,"code":"import scala.util.Try\ndef safeAssignRating(input: String): Option[Int] =\n  Try(input.toInt).toOption.filter(r => r >= 1 && r <= 5)","category":"idiomatic","topicUsed":"Ride-sharing dispatch"}
{"id":"idiomatic_142","timestamp":1745438142031,"code":"case class Passenger(name: String, passportNumber: String)\n\nval passenger = Passenger(\"Alice Smith\", \"P12345\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_143","timestamp":1745438142031,"code":"case class Ticket(id: String, flightNumber: String, passenger: Option[Passenger])\n\nval emptyTicket = Ticket(\"T001\", \"F1234\", None)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_144","timestamp":1745438142031,"code":"val seatMap: Map[Int, Option[String]] = Map(1 -> Some(\"Alice\"), 2 -> None)\nval seat1 = seatMap.get(1).flatten.getOrElse(\"Seat unassigned\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_145","timestamp":1745438142031,"code":"def findTicketById(id: String, tickets: List[Ticket]): Option[Ticket] =\n  tickets.find(_.id == id)\n\nval found = findTicketById(\"T002\", List())","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_146","timestamp":1745438142031,"code":"case class Flight(number: String, origin: String, destination: String)\n\nval flight = Flight(\"F001\", \"JFK\", \"LHR\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_147","timestamp":1745438142031,"code":"import scala.util.Try\n\ndef parsePrice(input: String): Try[Double] = Try(input.toDouble)\n\nval result = parsePrice(\"199.99\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_148","timestamp":1745438142031,"code":"def getPassengerName(ticket: Ticket): String =\n  ticket.passenger.map(_.name).getOrElse(\"Unknown Passenger\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_149","timestamp":1745438142031,"code":"case class Booking(ticket: Ticket, seat: Option[String])\nval booking = Booking(Ticket(\"T001\", \"FL100\", None), Some(\"12A\"))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_150","timestamp":1745438142031,"code":"def safeSeatAllocation(seatNumber: Int): Either[String, Int] =\n  if (seatNumber > 0 && seatNumber <= 150) Right(seatNumber) else Left(\"Invalid seat number\")\n\nval seatStatus = safeSeatAllocation(151)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_151","timestamp":1745438142031,"code":"def upgradePassenger(passenger: Option[Passenger]): Option[Passenger] =\n  passenger.map(p => p.copy(name = s\"VIP ${p.name}\"))\n\nval upgraded = upgradePassenger(Some(Passenger(\"Bob\", \"P54321\")))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_152","timestamp":1745438142031,"code":"val maybeEmail: Option[String] = Some(\"alice@example.com\")\nval emailDomain = maybeEmail.map(_.split(\"@\").last).getOrElse(\"Domain Unknown\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_153","timestamp":1745438142031,"code":"import scala.util.Try\n\ndef parseFlightNumber(s: String): Either[String, Int] =\n  Try(s.drop(1).toInt).toEither.left.map(_ => \"Invalid flight number\")\n\nval flightNum = parseFlightNumber(\"F1234\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_154","timestamp":1745438142031,"code":"case class Aircraft(model: String, capacity: Int)\nval aircrafts = List(Aircraft(\"A320\", 180), Aircraft(\"B737\", 160))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_155","timestamp":1745438142031,"code":"def seatAvailable(seats: Map[String, Boolean], seat: String): Option[Boolean] =\n  seats.get(seat)\n\nval seats = Map(\"12A\" -> true, \"12B\" -> false)\nval available = seatAvailable(seats, \"12A\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_156","timestamp":1745438142031,"code":"case class Payment(cardNumber: String, amount: Double)\ndef processPayment(payment: Payment): Either[String, Payment] =\n  if (payment.amount > 0) Right(payment) else Left(\"Payment amount must be positive\")\n\nval paymentStatus = processPayment(Payment(\"4111\", 0.0))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_157","timestamp":1745438142031,"code":"val passengerList: List[Option[Passenger]] = List(Some(Passenger(\"Anna\", \"X1\")), None)\nval names = passengerList.flatMap(_.map(_.name))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_158","timestamp":1745438142031,"code":"case class Baggage(weight: Double)\ndef checkOverweight(bag: Baggage, maxAllowed: Double): Option[String] =\n  if (bag.weight > maxAllowed) Some(\"Overweight\") else None\n\nval status = checkOverweight(Baggage(31.0), 30.0)","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_159","timestamp":1745438142031,"code":"import scala.util.Try\n\ndef issueTicket(flight: Flight, name: String): Try[Ticket] =\n  Try(Ticket(java.util.UUID.randomUUID().toString, flight.number, Some(Passenger(name, \"P\"+name.hashCode))))\n\nval tryTicket = issueTicket(Flight(\"F99\", \"MUC\", \"ROM\"), \"Omar\")","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_160","timestamp":1745438142031,"code":"case class CheckIn(ticket: Ticket, baggage: Option[Baggage])\ndef checkInStatus(checkIn: CheckIn): String =\n  checkIn.baggage match {\n    case Some(b) if b.weight > 20.0 => \"Extra fee applies\"\n    case Some(_) => \"Checked in\"\n    case None => \"No baggage\"\n  }\nval statusChecked = checkInStatus(CheckIn(Ticket(\"T2\",\"F2\",None),Some(Baggage(22))))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_161","timestamp":1745438142031,"code":"def lookupMealPreference(passenger: Option[Passenger]): String =\n  passenger match {\n    case Some(p) if p.name == \"Anna\" => \"Vegetarian\"\n    case Some(_) => \"Standard\"\n    case None => \"None requested\"\n  }\n\nval meal = lookupMealPreference(Some(Passenger(\"Anna\",\"A1\")))","category":"idiomatic","topicUsed":"Airline ticketing system"}
{"id":"idiomatic_162","timestamp":1745438167831,"code":"case class Guest(name: String, email: Option[String])\nval guest = Guest(\"Alice\", Some(\"alice@mail.com\"))\nguest.email match {\n  case Some(email) => println(s\"Email: $email\")\n  case None => println(\"No email provided\")\n}","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_163","timestamp":1745438167831,"code":"case class Room(number: Int, available: Boolean)\ndef findAvailableRoom(rooms: List[Room]): Option[Room] =\n  rooms.find(_.available)\nval roomList = List(Room(101, false), Room(102, true))\nval result = findAvailableRoom(roomList).getOrElse(Room(0, false))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_164","timestamp":1745438167831,"code":"import scala.util.Try\ncase class Price(value: Double)\ndef parsePrice(input: String): Try[Price] = Try(input.toDouble).map(Price(_))\nval parsed = parsePrice(\"129.99\")\nparsed.foreach(p => println(s\"Parsed price: ${p.value}\"))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_165","timestamp":1745438167831,"code":"case class Reservation(id: String, guest: Guest, room: Room)\ndef findReservation(reservations: List[Reservation], id: String): Option[Reservation] =\n  reservations.find(_.id == id)\nval found = findReservation(Nil, \"r123\") match {\n  case Some(res) => res\n  case None => Reservation(\"\", Guest(\"\", None), Room(0, false))\n}","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_166","timestamp":1745438167831,"code":"case class Hotel(name: String, address: String)\nval maybeHotel: Option[Hotel] = None\nval name = maybeHotel.map(_.name).getOrElse(\"Unknown Hotel\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_167","timestamp":1745438167831,"code":"case class DateRange(checkIn: String, checkOut: String)\ndef validateDateRange(dr: DateRange): Either[String, DateRange] =\n  if (dr.checkIn < dr.checkOut) Right(dr) else Left(\"Invalid date range\")\nval validation = validateDateRange(DateRange(\"2024-09-10\", \"2024-09-12\"))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_168","timestamp":1745438167831,"code":"case class SpecialRequest(notes: Option[String])\ndef getRequestSummary(sr: SpecialRequest): String =\n  sr.notes.getOrElse(\"No special requests\")\nval sr = SpecialRequest(None)\nval summary = getRequestSummary(sr)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_169","timestamp":1745438167831,"code":"case class Rate(plan: String, nightly: Double)\ndef discounted(rate: Rate, code: Option[String]): Double =\n  code.map(_ => rate.nightly * 0.9).getOrElse(rate.nightly)\nval price = discounted(Rate(\"Standard\", 200.0), Some(\"SUMMER21\"))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_170","timestamp":1745438167831,"code":"case class Payment(cardNumber: String, expiry: String)\ndef validatePayment(p: Payment): Either[String, Payment] =\n  if (p.cardNumber.length == 16) Right(p) else Left(\"Invalid card number\")\nval pay = Payment(\"1234123412341234\", \"12/25\")\nvalidatePayment(pay)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_171","timestamp":1745438167831,"code":"import scala.util.Try\ncase class ReservationCount(count: Int)\ndef safeParseCount(input: String): Option[ReservationCount] =\n  Try(input.toInt).toOption.map(ReservationCount(_))\nval count = safeParseCount(\"10\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_172","timestamp":1745438167831,"code":"case class Customer(id: Long, name: String, vipStatus: Option[Boolean])\ndef greeting(customer: Customer): String =\n  customer.vipStatus match {\n    case Some(true) => s\"Welcome VIP ${customer.name}!\"\n    case _ => s\"Welcome ${customer.name}!\"\n  }\ngreeting(Customer(1L, \"Bob\", Some(true)))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_173","timestamp":1745438167831,"code":"case class RoomType(name: String, occupancy: Int)\ndef selectForOccupancy(roomTypes: List[RoomType], guests: Int): Option[RoomType] =\n  roomTypes.find(_.occupancy >= guests)\nselectForOccupancy(List(RoomType(\"Suite\", 4), RoomType(\"Double\", 2)), 3)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_174","timestamp":1745438167831,"code":"case class BookingStatus(code: String)\ndef interpretStatus(status: Option[BookingStatus]): String =\n  status.map(_.code).getOrElse(\"No Status\")\ninterpretStatus(Some(BookingStatus(\"Confirmed\")))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_175","timestamp":1745438167831,"code":"import scala.util.Try\ncase class Email(value: String)\ndef parseEmail(input: String): Either[String, Email] =\n  if (input.contains(\"@\")) Right(Email(input)) else Left(\"Invalid email\")\nparseEmail(\"guest@example.com\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_176","timestamp":1745438167831,"code":"case class CancellationPolicy(freeUntil: Option[String], fee: Option[Double])\ndef describePolicy(policy: CancellationPolicy): String =\n  policy.fee.fold(\"No fee\")(_ => \"Cancellation fee applies\")\ndescribePolicy(CancellationPolicy(Some(\"2024-09-10\"), None))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_177","timestamp":1745438167831,"code":"case class LoyaltyPoints(points: Int)\ndef redeem(points: Option[LoyaltyPoints], required: Int): Boolean =\n  points.exists(_.points >= required)\nredeem(Some(LoyaltyPoints(500)), 300)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_178","timestamp":1745438167831,"code":"case class BreakfastIncluded(isIncluded: Boolean)\nval maybeBreakfast: Option[BreakfastIncluded] = Some(BreakfastIncluded(true))\nval message = maybeBreakfast.map(b => if (b.isIncluded) \"Includes breakfast\" else \"No breakfast\").getOrElse(\"Details unavailable\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_179","timestamp":1745438167831,"code":"case class Amenity(name: String)\nval amenities: List[Option[Amenity]] = List(Some(Amenity(\"WiFi\")), None, Some(Amenity(\"Pool\")))\nval names = amenities.flatten.map(_.name)","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_180","timestamp":1745438167831,"code":"case class Discount(code: String, amount: Double)\ndef applyDiscount(total: Double, discount: Option[Discount]): Double =\n  discount.map(d => total - d.amount).getOrElse(total)\napplyDiscount(250.0, Some(Discount(\"SPRING10\", 10.0)))","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_181","timestamp":1745438167831,"code":"import scala.util.Try\ncase class Invoice(amount: Double)\ndef generateInvoice(amountStr: String): Either[String, Invoice] =\n  Try(amountStr.toDouble).toEither.left.map(_ => \"Invalid amount\").map(Invoice(_))\ngenerateInvoice(\"350.75\")","category":"idiomatic","topicUsed":"Hotel reservation engine"}
{"id":"idiomatic_182","timestamp":1745438184877,"code":"case class Address(city: String, street: String, apartment: Option[String])\n\nval address = Address(\"New York\", \"5th Ave\", None)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_183","timestamp":1745438184877,"code":"case class FoodOrder(id: Int, items: List[String], deliveryNote: Option[String])\n\nval urgentOrder = FoodOrder(1001, List(\"Burger\", \"Fries\"), Some(\"Leave at door\"))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_184","timestamp":1745438184877,"code":"def parseQuantity(str: String): Either[String, Int] =\n  scala.util.Try(str.toInt).toEither.left.map(_ => \"Invalid number format.\")\n\nval result = parseQuantity(\"3\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_185","timestamp":1745438184877,"code":"case class Courier(name: String, rating: Option[Double])\n\ndef printRating(courier: Courier): String = courier.rating match {\n  case Some(r) => s\"Rating: $r\"\n  case None    => \"No rating yet\"\n}\n\nprintRating(Courier(\"Alex\", Some(4.8)))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_186","timestamp":1745438184877,"code":"def findBestCourier(couriers: List[Courier]): Option[Courier] =\n  couriers.filter(_.rating.isDefined).sortBy(-_.rating.get).headOption\n\nval bestOpt = findBestCourier(List(Courier(\"Emma\", None), Courier(\"Kai\", Some(4.9))))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_187","timestamp":1745438184877,"code":"case class Restaurant(name: String, menu: List[String], rating: Double)\n\nval restaurants = List(\n  Restaurant(\"Salad House\", List(\"Caesar\", \"Greek\"), 4.5),\n  Restaurant(\"Pizza Time\", List(\"Pepperoni\", \"Veggie\"), 4.2)\n)\nval goodMenu = restaurants.find(_.menu.contains(\"Caesar\"))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_188","timestamp":1745438184877,"code":"case class Delivery(id: Int, address: Address, delivered: Boolean)\n\ndef markDelivered(delivery: Delivery): Delivery = delivery.copy(delivered = true)\n\nval d = markDelivered(Delivery(42, address, false))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_189","timestamp":1745438184877,"code":"def safeDivide(total: Double, parts: Int): Either[String, Double] =\n  if(parts == 0) Left(\"Cannot divide by zero.\")\n  else Right(total / parts)\n\nsafeDivide(45.0, 0)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_190","timestamp":1745438184877,"code":"case class Customer(name: String, phone: Option[String])\n\nval maybeNumber = Customer(\"Sam\", None).phone.getOrElse(\"Not Provided\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_191","timestamp":1745438184877,"code":"def parseOrderId(str: String): Option[Int] =\n  scala.util.Try(str.toInt).toOption\n\nval maybeId = parseOrderId(\"order123\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_192","timestamp":1745438184877,"code":"val addresses = List(\n  Address(\"LA\", \"Sunset Blvd\", Some(\"8A\")),\n  Address(\"Boston\", \"Boylston\", None)\n)\nval withApt = addresses.collect { case a if a.apartment.isDefined => a }","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_193","timestamp":1745438184877,"code":"def getDeliveryNote(order: FoodOrder): String =\n  order.deliveryNote match {\n    case Some(note) => note\n    case None       => \"No special instructions\"\n  }\n\ngetDeliveryNote(FoodOrder(202, List(\"Taco\"), None))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_194","timestamp":1745438184877,"code":"def readEstimatedTime(input: String): Either[String, Int] =\n  scala.util.Try(input.trim.toInt).toEither.left.map(_ => \"Invalid ETA\")\n\nreadEstimatedTime(\"20\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_195","timestamp":1745438184877,"code":"val maybeCourier: Option[Courier] = None\nval courierName = maybeCourier.map(_.name).getOrElse(\"Unassigned\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_196","timestamp":1745438184877,"code":"case class Warehouse(location: String, hasRefrigeration: Boolean)\n\nval ware = Warehouse(\"Uptown\", true)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_197","timestamp":1745438184877,"code":"def incrementRating(courier: Courier): Courier =\n  courier.rating match {\n    case Some(r) => courier.copy(rating = Some(r + 0.1))\n    case None    => courier\n  }\n\nincrementRating(Courier(\"Liam\", Some(4.2)))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_198","timestamp":1745438184877,"code":"def calculateTotal(items: List[(String, Double)]): Double =\n  items.map(_._2).sum\n\ncalculateTotal(List((\"Sushi\", 12.5), (\"Soup\", 6.0)))","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_199","timestamp":1745438184877,"code":"case class Payment(customer: Customer, amount: Double, voucher: Option[String])\n\nval payment = Payment(Customer(\"Zoe\", Some(\"123-456\")), 29.99, None)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_200","timestamp":1745438184877,"code":"def parseLocation(s: String): Option[(Double, Double)] =\n  s.split(\",\").map(_.trim).toList match {\n    case lat :: lng :: Nil =>\n      for {\n        la <- scala.util.Try(lat.toDouble).toOption\n        lo <- scala.util.Try(lng.toDouble).toOption\n      } yield (la, lo)\n    case _ => None\n  }\n\nparseLocation(\"40.7128, -74.0060\")","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_201","timestamp":1745438184877,"code":"case class Vehicle(plate: String, capacity: Option[Int])\n\ndef enoughSpace(vehicle: Vehicle, needed: Int): Boolean =\n  vehicle.capacity.exists(_ >= needed)\n\nenoughSpace(Vehicle(\"ABC-123\", Some(3)), 2)","category":"idiomatic","topicUsed":"Food delivery logistics"}
{"id":"idiomatic_202","timestamp":1745438205633,"code":"case class Song(title: String, artist: String, durationSeconds: Int)\n\nval track: Option[Song] = Some(Song(\"Moonlight\", \"Luna\", 215))\nval songName = track.map(_.title).getOrElse(\"Unknown song\")\nprintln(songName)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_203","timestamp":1745438205633,"code":"case class UserProfile(username: String, subscription: Option[String])\n\ndef getSubscriptionMsg(profile: UserProfile): String = profile.subscription match {\n  case Some(tier) => s\"Subscription: $tier\"\n  case None => \"Free User\"\n}\n\nprintln(getSubscriptionMsg(UserProfile(\"alex\", Some(\"Premium\"))))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_204","timestamp":1745438205633,"code":"import scala.util.Try\n\ndef parseDuration(duration: String): Try[Int] = Try(duration.toInt)\n\nval maybeSecs = parseDuration(\"260\")\nprintln(maybeSecs.getOrElse(0))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_205","timestamp":1745438205633,"code":"case class Playlist(name: String, tracks: List[Song])\n\nval emptyPlaylist = Playlist(\"My Playlist\", Nil)\nprintln(emptyPlaylist.tracks.headOption.getOrElse(Song(\"\", \"\", 0)))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_206","timestamp":1745438205633,"code":"val maybeArtist: Option[String] = None\nval greeting = maybeArtist.fold(\"Guest artist\")(_.toUpperCase)\nprintln(greeting)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_207","timestamp":1745438205633,"code":"case class Album(title: String, year: Int, topSong: Option[Song])\n\nval album = Album(\"Echoes\", 2020, None)\nprintln(album.topSong.map(_.title).getOrElse(\"No top song\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_208","timestamp":1745438205633,"code":"def safeDivide(x: Int, y: Int): Either[String, Int] = if (y == 0) Left(\"Division by zero\") else Right(x / y)\n\nval bitratePerUser = safeDivide(320, 0).left.map(msg => s\"Error: $msg\")\nprintln(bitratePerUser.getOrElse(-1))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_209","timestamp":1745438205633,"code":"case class StreamEvent(user: String, eventType: String, details: Option[String])\n\nval event = StreamEvent(\"user1\", \"play\", None)\nval detailsDisplay = event.details.getOrElse(\"No details available\")\nprintln(detailsDisplay)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_210","timestamp":1745438205633,"code":"import scala.util.Try\n\ndef toIntSafe(str: String): Option[Int] = Try(str.toInt).toOption\nval maybeListeners = toIntSafe(\"900\")\nprintln(maybeListeners.getOrElse(0))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_211","timestamp":1745438205633,"code":"case class User(id: Long, name: String)\nval users = List(User(1L, \"Ana\"), User(2L, \"Ben\"))\nval foundUser = users.find(_.name == \"Ana\")\nprintf(\"User: %s\\n\", foundUser.map(_.name).getOrElse(\"none\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_212","timestamp":1745438205633,"code":"case class Playback(state: String, position: Option[Int])\nval playback = Playback(\"paused\", Some(123))\nval pos = playback.position.fold(0)(_ + 1)\nprintln(pos)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_213","timestamp":1745438205633,"code":"def lookupTrackById(id: Long): Option[Song] = None\nval trackInfo = lookupTrackById(15L).map(_.title).getOrElse(\"Not found\")\nprintln(trackInfo)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_214","timestamp":1745438205633,"code":"def getCoverArt(album: Album): Either[String, String] = album.topSong match {\n  case Some(_) => Right(\"ImageURL\")\n  case None => Left(\"Album cover not available\")\n}\nval cover = getCoverArt(Album(\"Dawn\", 2021, None))\nprintln(cover.getOrElse(\"DefaultImage\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_215","timestamp":1745438205633,"code":"val songRatings: Map[String, Int] = Map(\"Track1\" -> 5, \"Track2\" -> 4)\nval trackRating = songRatings.get(\"Track3\").getOrElse(0)\nprintln(trackRating)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_216","timestamp":1745438205633,"code":"case class Device(name: String, lastUsed: Option[String])\n\nval device = Device(\"Smartphone\", Some(\"2023-12-01\"))\nprintln(device.lastUsed.getOrElse(\"Never used\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_217","timestamp":1745438205633,"code":"case class SearchResult(total: Int, topResult: Option[Song])\nval search = SearchResult(0, None)\nval resultMsg = search.topResult.fold(\"No top result\")(_.title)\nprintln(resultMsg)","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_218","timestamp":1745438205633,"code":"def luckyDraw(user: Option[User]): Either[String, String] = user match {\n  case Some(u) if u.id == 42L => Right(\"Winner!\")\n  case Some(_) => Left(\"Not a winner\")\n  case None => Left(\"No user\")\n}\nprintln(luckyDraw(Some(User(1L, \"Sam\")).fold(identity, identity)))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_219","timestamp":1745438205633,"code":"case class StreamError(reason: String)\ndef fetchStream(url: String): Either[StreamError, String] =\n  if (url.contains(\".mp3\")) Right(\"Stream started\") else Left(StreamError(\"Invalid format\"))\n\nprintln(fetchStream(\"song.wav\").left.map(_.reason).getOrElse(\"Success\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_220","timestamp":1745438205633,"code":"case class Genre(name: String)\ndef genreFromString(s: String): Option[Genre] = if (s.isEmpty) None else Some(Genre(s))\nval maybeGenre = genreFromString(\"\")\nprintln(maybeGenre.map(_.name).getOrElse(\"Unknown Genre\"))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_221","timestamp":1745438205633,"code":"case class Listen(userId: Long, songId: Long)\nval listens = List(Listen(1L, 101L), Listen(2L, 102L))\ndef userSongs(uid: Long): List[Long] = listens.filter(_.userId == uid).map(_.songId)\nprintln(userSongs(1L).headOption.getOrElse(-1L))","category":"idiomatic","topicUsed":"Digital music streaming"}
{"id":"idiomatic_222","timestamp":1745438222425,"code":"case class Tutor(id: Int, name: String, subjects: List[String])\n\nval maybeTutor: Option[Tutor] = Some(Tutor(1, \"Ann\", List(\"Math\", \"Physics\")))\n\nval tutorName: String = maybeTutor.map(_.name).getOrElse(\"Unknown\")\ntutorName.length\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_223","timestamp":1745438222425,"code":"case class Student(username: String, email: Option[String])\n\nval s = Student(\"stefan\", None)\nval emailOrDefault = s.email.getOrElse(\"no-email@example.com\")\nemailOrDefault.toLowerCase()\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_224","timestamp":1745438222425,"code":"case class Session(tutorId: Int, studentId: Int, durationMinutes: Int)\ndef averageSessionDuration(sessions: List[Session]): Option[Double] =\n  if (sessions.nonEmpty) Some(sessions.map(_.durationMinutes).sum.toDouble / sessions.size)\n  else None\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_225","timestamp":1745438222425,"code":"def parseRating(str: String): Either[String, Int] =\n  scala.util.Try(str.toInt).toEither.left.map(_ => s\"Invalid number: $str\")\n\nparseRating(\"5\")\nparseRating(\"abc\")\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_226","timestamp":1745438222425,"code":"case class Course(title: String, description: String)\n\nval maybeCourse: Option[Course] = None\nval courseTitle = maybeCourse.map(_.title).getOrElse(\"Untitled Course\")\ncourseTitle.reverse\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_227","timestamp":1745438222425,"code":"def findTutorById(id: Int, tutors: List[Tutor]): Option[Tutor] =\n  tutors.find(_.id == id)\n\nfindTutorById(2, List(Tutor(1, \"Bella\", List(\"Eng\")), Tutor(2, \"Sean\", Nil)))","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_228","timestamp":1745438222425,"code":"case class Lesson(topic: String, resources: List[String])\n\nval lesson = Lesson(\"Calculus\", Nil)\nval maybeFirstResource = lesson.resources.headOption\nmaybeFirstResource.getOrElse(\"No resources available\")\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_229","timestamp":1745438222425,"code":"def safeDivide(x: Int, y: Int): Either[String, Double] =\n  if (y == 0) Left(\"Division by zero\") else Right(x.toDouble / y)\n\nsafeDivide(10, 2)\nsafeDivide(10, 0)","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_230","timestamp":1745438222425,"code":"case class ChatMessage(sender: String, content: String)\ndef findMessage(messages: List[ChatMessage], query: String): Option[ChatMessage] =\n  messages.find(_.content.contains(query))\n\nfindMessage(List(ChatMessage(\"A\", \"hi there\")), \"hi\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_231","timestamp":1745438222425,"code":"case class Booking(tutor: Tutor, student: Student, status: String)\n\nval booking = Booking(Tutor(3, \"Max\", List(\"Chemistry\")), Student(\"eva\", Some(\"eva@mail.com\")), \"confirmed\")\nval studentEmail = booking.student.email.getOrElse(\"No email\")\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_232","timestamp":1745438222425,"code":"def parseSessionDuration(input: String): Try[Int] =\n  scala.util.Try(input.toInt)\n\nparseSessionDuration(\"60\")\nparseSessionDuration(\"sixty\")\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_233","timestamp":1745438222425,"code":"case class Feedback(student: Student, text: Option[String])\nval fb = Feedback(Student(\"nina\", None), None)\nval feedbackText = fb.text.getOrElse(\"No feedback provided\")\nfeedbackText.capitalize\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_234","timestamp":1745438222425,"code":"case class Schedule(times: List[String])\nval sch = Schedule(List())\nsch.times.headOption.fold(\"No slots available\")(identity)\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_235","timestamp":1745438222425,"code":"def enrollStudent(course: Course, student: Student): Either[String, String] =\n  if (course.title.nonEmpty) Right(s\"${student.username} enrolled in ${course.title}\")\n  else Left(\"Course title missing\")\n\nval st = Student(\"dan\", None)\nenrollStudent(Course(\"\", \"desc\"), st)\nenrollStudent(Course(\"Algebra\", \"desc\"), st)","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_236","timestamp":1745438222425,"code":"case class Payment(userId: Int, amount: Double)\ndef validatePayment(payment: Payment): Either[String, Payment] =\n  if (payment.amount > 0) Right(payment) else Left(\"Invalid amount\")\n\nvalidatePayment(Payment(1, 100))","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_237","timestamp":1745438222425,"code":"case class Notification(message: String)\nval maybeNotification: Option[Notification] = None\nval toSend: String = maybeNotification.map(_.message).getOrElse(\"No notifications\")\ntoSend.toUpperCase\n","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_238","timestamp":1745438222425,"code":"def getStudentByUsername(username: String, group: List[Student]): Option[Student] =\n  group.find(_.username == username)\n\ngetStudentByUsername(\"ana\", List(Student(\"ana\", Some(\"a@b.com\")), Student(\"bob\", None)))","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_239","timestamp":1745438222425,"code":"def parseBoolean(input: String): Either[String, Boolean] =\n  input.toLowerCase match {\n    case \"true\"  => Right(true)\n    case \"false\" => Right(false)\n    case _       => Left(\"Not a boolean\")\n  }\n\nparseBoolean(\"TRUE\")\nparseBoolean(\"yes\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_240","timestamp":1745438222425,"code":"case class Review(rating: Int, comment: Option[String])\ndef hasPositiveReview(review: Review): Boolean =\n  (review.comment, review.rating) match {\n    case (Some(text), r) if text.nonEmpty && r >= 4 => true\n    case _                                         => false\n  }\n\nhasPositiveReview(Review(5, Some(\"Great!\")))","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_241","timestamp":1745438222425,"code":"case class GroupSession(students: List[Student], topic: String)\ndef findStudentEmail(session: GroupSession, username: String): Option[String] =\n  session.students.find(_.username == username).flatMap(_.email)\n\nfindStudentEmail(GroupSession(List(Student(\"lee\", Some(\"l@x.com\")), Student(\"mia\", None)), \"Scala\"), \"lee\")","category":"idiomatic","topicUsed":"Online tutoring platform"}
{"id":"idiomatic_242","timestamp":1745438249285,"code":"case class Address(street: String, city: String, zip: Option[String])\nval addr = Address(\"42 Main St\", \"Springfield\", None)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_243","timestamp":1745438249285,"code":"case class Agent(name: String, phone: Option[String])\nval agentWithPhone = Agent(\"Pam\", Some(\"555-1234\"))\nval agentNoPhone = Agent(\"Jim\", None)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_244","timestamp":1745438249285,"code":"def parsePrice(s: String): Either[String, Int] =\n  scala.util.Try(s.toInt).toEither.left.map(_ => s\"Invalid price: $s\")\nval price = parsePrice(\"500000\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_245","timestamp":1745438249285,"code":"case class Listing(id: Int, title: String, price: Option[Int])\ndef showPrice(l: Listing): String =\n  l.price.map(p => s\"$$$p\").getOrElse(\"Call for Price\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_246","timestamp":1745438249285,"code":"case class Location(city: String, state: String)\ndef findListingsByCity(city: String, listings: List[Listing]): List[Listing] =\n  listings.filter(l => l.title.contains(city))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_247","timestamp":1745438249285,"code":"case class User(id: Int, name: String, email: Option[String])\nval user: User = User(5, \"Dana\", None)\nval contact = user.email.getOrElse(\"No email provided\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_248","timestamp":1745438249285,"code":"def safeGetFirstListing(listings: Seq[Listing]): Option[Listing] =\n  listings.headOption\n\nval first = safeGetFirstListing(Seq())","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_249","timestamp":1745438249285,"code":"case class Photo(url: String, description: Option[String])\nval p = Photo(\"img1.jpg\", None)\nval desc = p.description.fold(\"No Description\")(d => d.take(20))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_250","timestamp":1745438249285,"code":"def parseBedrooms(s: String): Try[Int] =\n  scala.util.Try(s.toInt)\nval bd = parseBedrooms(\"3\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_251","timestamp":1745438249285,"code":"val addresses = List(\n  Address(\"1 Main\", \"Metropolis\", Some(\"12345\")),\n  Address(\"2 Park\", \"Metropolis\", None)\n)\nval zips = addresses.flatMap(_.zip)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_252","timestamp":1745438249285,"code":"case class SearchQuery(city: Option[String], minPrice: Option[Int], maxBeds: Option[Int])\nval q = SearchQuery(Some(\"Dublin\"), None, Some(2))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_253","timestamp":1745438249285,"code":"def totalListings(listings: List[Listing]): Int =\n  listings.size\nval total = totalListings(List(Listing(1, \"Nice Home\", Some(250000))))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_254","timestamp":1745438249285,"code":"def maybeGetAgentPhone(agent: Agent): String =\n  agent.phone match {\n    case Some(p) => p\n    case None => \"No phone on file\"\n  }\nval agent = Agent(\"Janet\", None)\nval phone = maybeGetAgentPhone(agent)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_255","timestamp":1745438249285,"code":"def safeDivide(a: Int, b: Int): Either[String, Int] =\n  if (b == 0) Left(\"Division by zero\") else Right(a / b)\nval res = safeDivide(10, 2)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_256","timestamp":1745438249285,"code":"def fromMap(m: Map[String, String]): Option[Listing] =\n  for {\n    id <- m.get(\"id\").flatMap(s => scala.util.Try(s.toInt).toOption)\n    title <- m.get(\"title\")\n    price = m.get(\"price\").flatMap(s => scala.util.Try(s.toInt).toOption)\n  } yield Listing(id, title, price)\nval m = Map(\"id\" -> \"1\", \"title\" -> \"Cozy Loft\")\nval listingOpt = fromMap(m)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_257","timestamp":1745438249285,"code":"case class Feature(name: String)\ndef findFeature(features: List[Feature], n: String): Option[Feature] =\n  features.find(_.name == n)\nval hasGarden = findFeature(List(Feature(\"Pool\"), Feature(\"Garden\")), \"Garden\")","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_258","timestamp":1745438249285,"code":"def getListingCity(listing: Listing): Option[String] =\n  listing.title.split(',').lift(1).map(_.trim)\nval city = getListingCity(Listing(7, \"Luxury Condo, Miami\", Some(900000)))","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_259","timestamp":1745438249285,"code":"case class Realtor(name: String, agency: String, email: Option[String])\nval realtor = Realtor(\"Emily\", \"Home Realty\", None)\ndef sendEmail(realtor: Realtor): Either[String, String] =\n  realtor.email.toRight(\"No email address\")\nval result = sendEmail(realtor)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_260","timestamp":1745438249285,"code":"def filterListingsByMaxPrice(listings: List[Listing], max: Int): List[Listing] =\n  listings.filter(_.price.exists(_ <= max))\nval filtered = filterListingsByMaxPrice(List(Listing(1, \"Cheap\", Some(10))), 20)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_261","timestamp":1745438249285,"code":"case class Amenity(description: String)\nval amenities: Option[List[Amenity]] = Some(List(Amenity(\"WiFi\")))\ndef amenityCount(optA: Option[List[Amenity]]): Int =\n  optA.map(_.size).getOrElse(0)\nval count = amenityCount(amenities)","category":"idiomatic","topicUsed":"Real-estate listing search"}
{"id":"idiomatic_262","timestamp":1745438263723,"code":"case class Wallet(address: String, balance: BigDecimal)\nval myWallet = Wallet(\"0x123abc\", 2.5)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_263","timestamp":1745438263723,"code":"case class Transaction(id: String, amount: BigDecimal, from: String, to: String)\ndef findTransaction(transactions: List[Transaction], txId: String): Option[Transaction] = \n  transactions.find(_.id == txId)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_264","timestamp":1745438263723,"code":"def getWalletBalance(walletOpt: Option[Wallet]): BigDecimal = \n  walletOpt.map(_.balance).getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_265","timestamp":1745438263723,"code":"def parseAmount(s: String): Either[String, BigDecimal] = \n  scala.util.Try(BigDecimal(s)).toEither.left.map(_ => \"Invalid amount\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_266","timestamp":1745438263723,"code":"case class PrivateKey(key: String)\ndef loadPrivateKey(raw: String): Option[PrivateKey] = \n  if (raw.nonEmpty) Some(PrivateKey(raw)) else None","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_267","timestamp":1745438263723,"code":"case class WalletSeed(words: List[String])\ndef validateSeed(seed: WalletSeed): Boolean = seed.words.length == 12 || seed.words.length == 24","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_268","timestamp":1745438263723,"code":"def sendFunds(wallet: Wallet, amount: BigDecimal): Either[String, Wallet] = \n  if (wallet.balance >= amount) Right(wallet.copy(balance = wallet.balance - amount))\n  else Left(\"Insufficient funds\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_269","timestamp":1745438263723,"code":"case class WalletLabel(name: String, tag: Option[String])\nval labeled = WalletLabel(\"Savings\", Some(\"cold storage\"))","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_270","timestamp":1745438263723,"code":"case class AddressBookEntry(address: String, label: Option[String])\ndef lookupLabel(book: List[AddressBookEntry], address: String): Option[String] = \n  book.find(_.address == address).flatMap(_.label)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_271","timestamp":1745438263723,"code":"import scala.util.Try\ndef parseWallet(line: String): Try[Wallet] = Try {\n  val Array(addr, bal) = line.split(\",\")\n  Wallet(addr, BigDecimal(bal))\n}","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_272","timestamp":1745438263723,"code":"def findWalletByAddress(wallets: List[Wallet], address: String): Option[Wallet] = \n  wallets.find(_.address == address)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_273","timestamp":1745438263724,"code":"case class NetworkFee(amount: BigDecimal)\ndef selectFee(fees: List[NetworkFee]): Option[NetworkFee] = \n  fees.sortBy(_.amount).headOption","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_274","timestamp":1745438263724,"code":"import scala.util.Try\ncase class BalanceUpdate(newBalance: BigDecimal)\ndef updateWallet(wallet: Wallet, delta: String): Try[Wallet] = for {\n  change <- Try(BigDecimal(delta))\n} yield wallet.copy(balance = wallet.balance + change)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_275","timestamp":1745438263724,"code":"case class MnemonicPhrase(words: List[String])\ndef isValidMnemonic(phrase: MnemonicPhrase): Boolean = \n  Set(12,18,24).contains(phrase.words.length)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_276","timestamp":1745438263724,"code":"def importWallet(json: String): Either[String, Wallet] = {\n  if (json.contains(\"address\") && json.contains(\"balance\")) Right(Wallet(\"0xabc\", 1.5))\n  else Left(\"Invalid JSON format\")\n}","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_277","timestamp":1745438263724,"code":"def safeGetBalance(wallet: Option[Wallet]): Option[BigDecimal] = \n  wallet.map(_.balance)","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_278","timestamp":1745438263724,"code":"case class SignedTransaction(tx: Transaction, signature: String)\ndef signTransaction(tx: Transaction, key: PrivateKey): Either[String, SignedTransaction] = \n  if (key.key.length == 64) Right(SignedTransaction(tx, \"signed\"))\n  else Left(\"Invalid private key\")","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_279","timestamp":1745438263724,"code":"case class Currency(symbol: String, decimals: Int)\ndef formatAmount(amount: BigDecimal, currency: Currency): String =\n  f\"${amount}%.${currency.decimals}f ${currency.symbol}\"","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_280","timestamp":1745438263724,"code":"def withdraw(wallet: Wallet, amount: BigDecimal): Option[Wallet] = \n  if (wallet.balance >= amount) Some(wallet.copy(balance = wallet.balance - amount))\n  else None","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_281","timestamp":1745438263724,"code":"import scala.util.Try\ndef parseAddress(s: String): Try[String] = Try {\n  require(s.startsWith(\"0x\"))\n  s\n}","category":"idiomatic","topicUsed":"Cryptocurrency wallet management"}
{"id":"idiomatic_282","timestamp":1745438281800,"code":"case class Item(id: String, name: String, quantity: Int)\nval item = Item(\"A001\", \"Widget\", 10)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_283","timestamp":1745438281800,"code":"case class Location(id: String, description: String)\nval loc = Location(\"L02\", \"Shelf Top\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_284","timestamp":1745438281800,"code":"def findItemById(items: List[Item], id: String): Option[Item] =\n  items.find(_.id == id)\n\nval inventory = List(Item(\"A001\", \"Widget\", 10))\nval maybeItem = findItemById(inventory, \"A001\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_285","timestamp":1745438281800,"code":"def parseQuantity(s: String): Either[String, Int] =\n  scala.util.Try(s.toInt).toEither.left.map(_ => \"Invalid quantity\")\n\nval result = parseQuantity(\"15\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_286","timestamp":1745438281800,"code":"val maybeLocation: Option[Location] = None\nval display = maybeLocation.map(_.description).getOrElse(\"Unknown location\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_287","timestamp":1745438281800,"code":"case class StockEntry(item: Item, location: Location)\nval widgetAtLoc = StockEntry(Item(\"A001\", \"Widget\", 8), Location(\"L02\", \"Shelf Top\"))","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_288","timestamp":1745438281801,"code":"case class InventoryCount(item: Item, count: Int)\ndef updateCount(inv: InventoryCount, delta: Int): InventoryCount =\n  inv.copy(count = inv.count + delta)\n\nval ic = InventoryCount(Item(\"A002\", \"Gadget\", 20), 20)\nval updated = updateCount(ic, -2)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_289","timestamp":1745438281801,"code":"def safeGetQuantity(itemOpt: Option[Item]): Int =\n  itemOpt.map(_.quantity).getOrElse(0)\n\nval maybeItem: Option[Item] = Some(Item(\"B002\", \"Tool\", 5))\nval q = safeGetQuantity(maybeItem)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_290","timestamp":1745438281801,"code":"import scala.util.Try\n\ndef parseItem(line: String): Try[Item] = Try {\n  val parts = line.split(\",\")\n  Item(parts(0), parts(1), parts(2).toInt)\n}\nval tryItem = parseItem(\"A003,Gizmo,7\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_291","timestamp":1745438281801,"code":"case class TransferRequest(itemId: String, from: String, to: String, amount: Int)\nval req = TransferRequest(\"A005\", \"L01\", \"L02\", 3)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_292","timestamp":1745438281801,"code":"def findLocationByItemId(stock: List[StockEntry], itemId: String): Option[Location] =\n  stock.find(_.item.id == itemId).map(_.location)\n\nval stock = List(widgetAtLoc)\nval locOpt = findLocationByItemId(stock, \"A001\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_293","timestamp":1745438281801,"code":"case class Reorder(itemId: String, amount: Int)\ndef needsReorder(item: Item, threshold: Int): Option[Reorder] =\n  if (item.quantity < threshold) Some(Reorder(item.id, threshold - item.quantity)) else None\n\nval reorderOpt = needsReorder(Item(\"A004\", \"Gizmo\", 2), 5)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_294","timestamp":1745438281801,"code":"import scala.util.Try\n\ndef safeDivideStock(count: Int, locations: Int): Try[Int] = Try(count / locations)\nval result = safeDivideStock(10, 2)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_295","timestamp":1745438281801,"code":"def itemNameOpt(item: Option[Item]): Option[String] = item.map(_.name)\n\nval maybeName = itemNameOpt(Some(Item(\"A007\", \"Clip\", 15)))","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_296","timestamp":1745438281801,"code":"case class Inventory(items: Map[String, Item])\ndef getItem(inventory: Inventory, id: String): Either[String, Item] =\n  inventory.items.get(id).toRight(\"Item not found\")\n\nval inv = Inventory(Map(\"A001\" -> Item(\"A001\", \"Widget\", 3)))\nval res = getItem(inv, \"A001\")","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_297","timestamp":1745438281801,"code":"case class ChangeLog(entry: String)\ndef logAdjustment(item: Item, delta: Int): Option[ChangeLog] =\n  if (delta != 0) Some(ChangeLog(s\"Adjusted ${item.name} by $delta\")) else None\n\nval log = logAdjustment(Item(\"A008\", \"Stapler\", 5), -2)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_298","timestamp":1745438281801,"code":"def transferItem(stock: List[StockEntry], itemId: String, to: Location): Either[String, List[StockEntry]] =\n  stock.find(_.item.id == itemId) match {\n    case Some(entry) => Right(stock.map(e => if (e == entry) e.copy(location = to) else e))\n    case None => Left(\"Item not found in stock\")\n  }\nval entries = List(widgetAtLoc)\nval moved = transferItem(entries, \"A001\", Location(\"L03\", \"Bins\"))","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_299","timestamp":1745438281801,"code":"val missingItem: Option[Item] = None\nval out = missingItem.fold(\"No item\")(_.name)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_300","timestamp":1745438281801,"code":"def checkStock(item: Option[Item]): String =\n  item match {\n    case Some(i) if i.quantity > 0 => s\"${i.name} in stock\"\n    case Some(i) => s\"${i.name} out of stock\"\n    case None => \"Item not found\"\n  }\nval msg = checkStock(Some(Item(\"A009\", \"Label\", 0)))","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_301","timestamp":1745438281801,"code":"case class InventoryError(msg: String)\ndef validateQuantity(qty: Int): Either[InventoryError, Int] =\n  if (qty >= 0) Right(qty) else Left(InventoryError(\"Negative quantity\"))\nval check = validateQuantity(-3)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_302","timestamp":1745438281801,"code":"case class Batch(id: String, items: List[Item])\ndef totalStock(batch: Batch): Int = batch.items.map(_.quantity).sum\nval batch = Batch(\"B1\", List(Item(\"A010\", \"Bolt\", 4), Item(\"A011\", \"Nut\", 6)))\nval total = totalStock(batch)","category":"idiomatic","topicUsed":"Warehouse inventory tracking"}
{"id":"idiomatic_303","timestamp":1745438302740,"code":"case class User(id: String, username: String)\n\nval maybeUser: Option[User] = Some(User(\"1\", \"alice\"))\nval displayName = maybeUser.map(_.username).getOrElse(\"Anonymous\")\nprintln(displayName)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_304","timestamp":1745438302740,"code":"case class Content(id: String, text: String)\n\ndef findContentById(id: String): Option[Content] = None\nval content = findContentById(\"42\").getOrElse(Content(\"0\", \"[deleted]\"))\nprintln(content.text)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_305","timestamp":1745438302740,"code":"case class ModerationResult(isClean: Boolean)\n\ndef moderate(text: String): Either[String, ModerationResult] =\n  if (text.contains(\"bad\")) Left(\"Inappropriate content detected\")\n  else Right(ModerationResult(true))\n\nval result = moderate(\"hello world\").getOrElse(ModerationResult(false))\nprintln(result.isClean)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_306","timestamp":1745438302740,"code":"import scala.util.Try\ncase class Report(contentId: String, reason: String)\n\ndef parseReport(s: String): Try[Report] = Try {\n  val Array(cid, reason) = s.split(\":\", 2)\n  Report(cid, reason)\n}\n\nprintln(parseReport(\"1:spam\").toOption)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_307","timestamp":1745438302740,"code":"case class Comment(id: Int, author: Option[String], body: String)\nval c = Comment(13, None, \"Hidden\")\nval authorTag = c.author.getOrElse(\"[unknown]\")\nprintln(authorTag)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_308","timestamp":1745438302740,"code":"case class Flag(userId: String, contentId: String, reason: Option[String])\nval flag = Flag(\"u2\", \"c12\", None)\nval msg = flag.reason.getOrElse(\"No reason provided\")\nprintln(msg)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_309","timestamp":1745438302740,"code":"case class Decision(approved: Boolean, moderator: String)\n\nval action: Option[Decision] = Some(Decision(false, \"mod42\"))\naction match {\n  case Some(Decision(true, _)) => println(\"Approved\")\n  case Some(Decision(false, m)) => println(s\"Rejected by $m\")\n  case None => println(\"No decision\")\n}","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_310","timestamp":1745438302740,"code":"import scala.util.Try\n\ndef safeCheckWords(text: String, trigger: String): Try[Boolean] = Try {\n  text.toLowerCase.contains(trigger.toLowerCase)\n}\n\nprintln(safeCheckWords(\"Some test text\", \"test\").getOrElse(false))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_311","timestamp":1745438302740,"code":"case class UserProfile(id: String, bio: Option[String])\nval profile = UserProfile(\"alice\", Some(\"Scala Dev\"))\nprofile.bio.foreach(println)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_312","timestamp":1745438302740,"code":"case class ModerationLog(entryId: String, contentId: String, status: String)\ndef findLog(id: String): Option[ModerationLog] = None\nval logMsg = findLog(\"55\").map(_.status).getOrElse(\"No Log Found\")\nprintln(logMsg)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_313","timestamp":1745438302740,"code":"case class BlockedWord(word: String)\nval blockList = List(BlockedWord(\"hate\"), BlockedWord(\"spam\"))\n\ndef containsBlockedWord(text: String, banned: List[BlockedWord]): Boolean =\n  banned.exists(w => text.contains(w.word))\n\nprintln(containsBlockedWord(\"no spam here\", blockList))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_314","timestamp":1745438302740,"code":"import scala.util.Try\n\ndef parseRating(s: String): Either[String, Int] = Try(s.toInt).toEither.left.map(_ => \"Invalid rating\")\nval r = parseRating(\"5\").getOrElse(-1)\nprintln(r)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_315","timestamp":1745438302740,"code":"case class Appeal(userId: String, contentId: String, details: Option[String])\nval a = Appeal(\"u3\", \"c7\", None)\nval d = a.details.getOrElse(\"No details given\")\nprintln(d)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_316","timestamp":1745438302740,"code":"case class Violation(userId: String, kind: String, extra: Option[String])\n\ndef notify(v: Violation): String = v.extra match {\n  case Some(detail) => s\"Violation: ${v.kind} ($detail)\"\n  case None => s\"Violation: ${v.kind}\"\n}\nprintln(notify(Violation(\"u5\", \"abuse\", Some(\"profanity\"))))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_317","timestamp":1745438302740,"code":"case class Reaction(contentId: String, userId: String, reaction: String)\nval validReactions = Set(\"like\", \"dislike\", \"flag\")\ndef validateReaction(r: Reaction): Either[String, Reaction] =\n  if (validReactions.contains(r.reaction)) Right(r) else Left(\"Invalid reaction\")\nprintf(\"%s\\n\", validateReaction(Reaction(\"42\", \"bob\", \"flag\")).isRight)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_318","timestamp":1745438302740,"code":"case class Ban(userId: String, reason: String, until: Option[String])\nval ban = Ban(\"u7\", \"spam\", None)\nval until = ban.until.getOrElse(\"Permanent\")\nprintln(until)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_319","timestamp":1745438302740,"code":"import scala.util.Try\n\ndef parseUserName(s: String): Option[String] = Try(Option(s)).toOption.flatten\nval userName = parseUserName(\"moderator\").getOrElse(\"[empty username]\")\nprintln(userName)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_320","timestamp":1745438302740,"code":"case class ContentMeta(id: String, created: Long, flagged: Boolean)\nval maybeMeta: Option[ContentMeta] = None\nprintln(maybeMeta.map(_.created).getOrElse(0L))","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_321","timestamp":1745438302740,"code":"case class ModeratorAction(contentId: String, outcome: String)\ndef actionFor(contentId: String): Option[ModeratorAction] = None\nval isRemoved = actionFor(\"abc\").exists(_.outcome == \"removed\")\nprintln(isRemoved)","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_322","timestamp":1745438302740,"code":"import scala.util.{Try, Success, Failure}\n\ncase class Message(id: String, userId: String, body: String)\ndef parseMessage(raw: String): Try[Message] = Try {\n  val parts = raw.split(\":\".toCharArray)\n  if (parts.length >= 3) Message(parts(0), parts(1), parts(2))\n  else throw new RuntimeException(\"Invalid message format\")\n}\nparseMessage(\"1:bob:hello\") match {\n  case Success(m) => println(m.body)\n  case Failure(_) => println(\"Parse error\")\n}","category":"idiomatic","topicUsed":"Social media content moderation"}
{"id":"idiomatic_323","timestamp":1745438319123,"code":"case class User(id: String, preferences: Option[List[String]])\n\nval user1 = User(\"u123\", Some(List(\"sports\", \"tech\")))\nval user2 = User(\"u777\", None)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_324","timestamp":1745438319123,"code":"case class Article(id: String, topic: String, content: String)\n\ndef findArticleById(articles: List[Article], id: String): Option[Article] =\n  articles.find(_.id == id)\n\nval articleOpt = findArticleById(List(Article(\"1\", \"tech\", \"...\")), \"1\")","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_325","timestamp":1745438319123,"code":"case class FeedItem(userId: String, article: Article)\n\ndef personalize(feed: List[Article], user: User): List[FeedItem] =\n  user.preferences\n    .getOrElse(List.empty)\n    .flatMap(pref => feed.filter(_.topic == pref))\n    .map(a => FeedItem(user.id, a))","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_326","timestamp":1745438319123,"code":"import scala.util.Try\n\ndef parseArticle(json: String): Try[Article] = Try {\n  val fields = json.split(\",\")\n  Article(fields(0), fields(1), fields(2))\n}\n\nval parsed = parseArticle(\"1,tech,Scala 2.13 Released\")","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_327","timestamp":1745438319123,"code":"def getFirstPreference(user: User): Option[String] =\n  user.preferences.flatMap(_.headOption)\n\nval firstPref = getFirstPreference(User(\"u1\", Some(List(\"sports\", \"business\"))))","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_328","timestamp":1745438319123,"code":"case class Notification(message: String)\n\ndef createNotification(user: User, article: Option[Article]): Option[Notification] =\n  for {\n    a <- article\n  } yield Notification(s\"New article for ${user.id}: ${a.topic}\")","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_329","timestamp":1745438319123,"code":"def loadUser(id: String): Either[String, User] =\n  if (id.nonEmpty) Right(User(id, Some(List(\"sports\"))))\n  else Left(\"User not found\")\n\nval userResult: Either[String, User] = loadUser(\"\")","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_330","timestamp":1745438319123,"code":"def getRecommendedArticles(articles: List[Article], user: User): List[Article] =\n  user.preferences\n    .map(prefs => articles.filter(a => prefs.contains(a.topic)))\n    .getOrElse(Nil)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_331","timestamp":1745438319123,"code":"case class Feed(items: List[FeedItem])\n\ndef mergeFeeds(f1: Feed, f2: Feed): Feed =\n  Feed((f1.items ++ f2.items).distinct)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_332","timestamp":1745438319123,"code":"import scala.util.Try\n\ndef safeSubstring(s: String, end: Int): Option[String] =\n  Try(s.substring(0, end)).toOption\n\nval preview: Option[String] = safeSubstring(\"Breaking news!\", 20)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_333","timestamp":1745438319123,"code":"def getTopicCount(user: User, articles: List[Article]): Int =\n  user.preferences\n    .map(prefs => articles.count(a => prefs.contains(a.topic)))\n    .getOrElse(0)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_334","timestamp":1745438319123,"code":"def lastReadArticle(userFeeds: Map[String, List[Article]], userId: String): Option[Article] =\n  userFeeds.get(userId).flatMap(_.lastOption)","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_335","timestamp":1745438319123,"code":"case class Bookmark(userId: String, articleId: String)\n\ndef addBookmark(bookmarks: Set[Bookmark], bookmark: Bookmark): Set[Bookmark] =\n  bookmarks + bookmark","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_336","timestamp":1745438319123,"code":"def safeParseInt(str: String): Either[String, Int] =\n  scala.util.Try(str.toInt).toEither.left.map(_ => s\"Failed to parse '$str' as Int\")\n\nval result = safeParseInt(\"abc\")","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_337","timestamp":1745438319123,"code":"def maybePromote(article: Article): Option[String] =\n  if (article.topic == \"sponsored\") Some(\"Promoted\") else None","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_338","timestamp":1745438319124,"code":"def getLatestTopic(user: User): Option[String] =\n  user.preferences.flatMap(_.lastOption)\n\nval latest = getLatestTopic(User(\"abc\", Some(List(\"news\", \"finance\"))))","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_339","timestamp":1745438319124,"code":"case class Subscription(userId: String, topics: List[String])\nval sub = Subscription(\"alex\", List(\"economy\", \"science\"))","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_340","timestamp":1745438319124,"code":"def filterByKeyword(articles: List[Article], keyword: String): List[Article] =\n  articles.filter(_.content.contains(keyword))","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_341","timestamp":1745438319124,"code":"import scala.util.Try\n\ndef recommendTopArticle(user: User, articles: List[Article]): Try[FeedItem] = Try {\n  val topic = user.preferences.getOrElse(Nil).head\n  val article = articles.find(_.topic == topic).get\n  FeedItem(user.id, article)\n}","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_342","timestamp":1745438319124,"code":"def removeUser(u: Option[User]): List[User] = u.toList","category":"idiomatic","topicUsed":"Personalized news feed"}
{"id":"idiomatic_343","timestamp":1745438341098,"code":"case class ChargingStation(id: String, name: String, location: (Double, Double))","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_344","timestamp":1745438341099,"code":"def findStationById(id: String, stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.find(_.id == id)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_345","timestamp":1745438341099,"code":"val maybePort: Option[Int] = Some(3)\nval availablePorts = maybePort.getOrElse(0)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_346","timestamp":1745438341099,"code":"val addressToStation: Map[String, ChargingStation] = Map(\n  \"Main Street\" -> ChargingStation(\"1\", \"FastCharge\", (40.8, -73.9)),\n  \"Oak Avenue\"  -> ChargingStation(\"2\", \"EcoCharge\", (41.1, -73.5))\n)\nval stationOpt = addressToStation.get(\"Main Street\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_347","timestamp":1745438341099,"code":"def parseChargingRate(rate: String): Either[String, Double] =\n  scala.util.Try(rate.toDouble).toEither.left.map(_ => s\"Invalid rate: $rate\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_348","timestamp":1745438341099,"code":"case class UserQuery(userId: String, position: (Double, Double), preferredNetwork: Option[String])","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_349","timestamp":1745438341099,"code":"val maybeStation: Option[ChargingStation] = None\nval stationName = maybeStation.map(_.name).getOrElse(\"Unknown\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_350","timestamp":1745438341099,"code":"def getStationDetails(name: String, stations: List[ChargingStation]): Option[(String, (Double, Double))] =\n  stations.find(_.name == name).map(s => (s.id, s.location))","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_351","timestamp":1745438341099,"code":"def distance(a: (Double, Double), b: (Double, Double)): Double =\n  math.hypot(a._1 - b._1, a._2 - b._2)\n\ndef closestStation(pos: (Double, Double), stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.minByOption(s => distance(pos, s.location))","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_352","timestamp":1745438341099,"code":"case class ChargingSession(userId: String, stationId: String, startedAt: Long, endedAt: Option[Long])","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_353","timestamp":1745438341099,"code":"def tryParseLocation(s: String): Option[(Double, Double)] =\n  s.split(\",\").map(_.trim).toList match {\n    case lat :: lon :: Nil =>\n      (scala.util.Try(lat.toDouble), scala.util.Try(lon.toDouble)) match {\n        case (scala.util.Success(a), scala.util.Success(b)) => Some((a, b))\n        case _ => None\n      }\n    case _ => None\n  }","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_354","timestamp":1745438341099,"code":"def lookupByName(name: String)(stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.find(_.name.toLowerCase == name.toLowerCase)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_355","timestamp":1745438341099,"code":"case class ChargingNetwork(name: String, stations: List[ChargingStation])\nval networks = List(\n  ChargingNetwork(\"TeslaSupercharger\", List()),\n  ChargingNetwork(\"ChargePoint\", List())\n)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_356","timestamp":1745438341099,"code":"def reservePort(station: ChargingStation, requested: Int, available: Int): Either[String, Int] =\n  if (requested <= available && requested > 0) Right(available - requested)\n  else Left(\"Not enough ports available\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_357","timestamp":1745438341099,"code":"val loc: Option[(Double, Double)] = Some((40.7128, -74.0060))\nval showLoc = loc.fold(\"No location\")(lc => s\"Lat: ${lc._1}, Lon: ${lc._2}\")","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_358","timestamp":1745438341099,"code":"def getUserPreferredStation(query: UserQuery, stations: List[ChargingStation]): Option[ChargingStation] =\n  query.preferredNetwork.flatMap { nw =>\n    stations.find(_.name == nw)\n  }","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_359","timestamp":1745438341099,"code":"def safeDivide(x: Double, y: Double): Either[String, Double] =\n  if (y == 0) Left(\"Division by zero\") else Right(x / y)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_360","timestamp":1745438341099,"code":"case class PricePerKWh(value: Double)\ndef parsePrice(s: String): Option[PricePerKWh] =\n  scala.util.Try(s.toDouble).toOption.filter(_ > 0).map(PricePerKWh)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_361","timestamp":1745438341099,"code":"val maybeSession: Option[ChargingSession] = Some(ChargingSession(\"user1\", \"station2\", 1661234567890L, None))\nval isActive = maybeSession.exists(_.endedAt.isEmpty)","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_362","timestamp":1745438341099,"code":"def getUniqueStationNames(stations: List[ChargingStation]): Set[String] =\n  stations.map(_.name).toSet","category":"idiomatic","topicUsed":"Electric vehicle charging station locator"}
{"id":"idiomatic_363","timestamp":1745438377980,"code":"case class Crop(name: String, growthStage: Option[String])\nval wheat = Crop(\"Wheat\", Some(\"Seedling\"))\nval unknown = Crop(\"Unknown\", None)\nval stage = wheat.growthStage.getOrElse(\"No data\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_364","timestamp":1745438377981,"code":"import scala.util.Try\ncase class TemperatureReading(cropId: Int, temperatureC: Double)\ndef parseTemperature(input: String): Try[TemperatureReading] = Try {\n  val parts = input.split(\",\")\n  TemperatureReading(parts(0).toInt, parts(1).toDouble)\n}","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_365","timestamp":1745438377981,"code":"case class Field(id: Int, areaHectares: Double, lastIrrigated: Option[String])\nval field1 = Field(5, 12.2, Some(\"2024-04-10\"))\nval field2 = Field(6, 15.0, None)\nval irrigation = field2.lastIrrigated.getOrElse(\"Irrigation date missing\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_366","timestamp":1745438377981,"code":"case class SoilMoisture(sensorId: Int, moistureLevel: Option[Double])\ndef moistureAlert(soil: SoilMoisture): String = soil.moistureLevel match {\n  case Some(level) if level < 20.0 => \"Low Moisture!\"\n  case Some(_) => \"Moisture OK.\"\n  case None => \"Sensor error.\"\n}\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_367","timestamp":1745438377981,"code":"import scala.util.Try\ncase class Rainfall(day: String, mm: Int)\ndef safeRainfall(mmStr: String): Either[String, Rainfall] =\n  Try(mmStr.split(\":\")).toOption.flatMap(arr =>\n    if (arr.length == 2) Some(Rainfall(arr(0), arr(1).toInt)) else None\n  ).toRight(\"Malformed input\")","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_368","timestamp":1745438377981,"code":"case class PestReport(crop: String, pest: Option[String])\nval report = PestReport(\"Corn\", None)\nval pestInfo: String = report.pest.getOrElse(\"No pest detected.\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_369","timestamp":1745438377981,"code":"case class CropHealth(cropId: Int, ndvi: Option[Double])\nval health = CropHealth(3, Some(0.68))\nval adjustedNdvi = health.ndvi.map(_ + 0.01).getOrElse(0.0)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_370","timestamp":1745438377981,"code":"case class Sensor(id: String, status: Option[String])\nval sensor = Sensor(\"S-100\", None)\nval status = sensor.status.getOrElse(\"Status unknown\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_371","timestamp":1745438377981,"code":"case class YieldForecast(crop: String, estimateTons: Option[Double])\ndef doubleEstimate(yf: YieldForecast): YieldForecast =\n  yf.copy(estimateTons = yf.estimateTons.map(_ * 2))\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_372","timestamp":1745438377981,"code":"import scala.util.Try\ncase class FertilizerApplication(fieldId: Int, amountKg: Double)\ndef tryFertilizer(data: String): Try[FertilizerApplication] = Try {\n  val Array(fid, amt) = data.split(\",\")\n  FertilizerApplication(fid.toInt, amt.toDouble)\n}","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_373","timestamp":1745438377981,"code":"case class DiseaseObservation(cropId: Int, disease: Option[String])\ndef isInfected(obs: DiseaseObservation): Boolean =\n  obs.disease.exists(_.nonEmpty)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_374","timestamp":1745438377981,"code":"case class WeatherData(temp: Option[Double], humidity: Option[Double])\nval wd = WeatherData(Some(25.0), None)\nval humidityString = wd.humidity.fold(\"Humidity not recorded\")(_.toString)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_375","timestamp":1745438377981,"code":"case class CropVariety(name: String, droughtResistant: Boolean)\nval varieties = List(\n  CropVariety(\"Maize A\", true),\n  CropVariety(\"Maize B\", false)\n)\nval droughtVarieties = varieties.filter(_.droughtResistant)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_376","timestamp":1745438377981,"code":"import scala.util.Try\ncase class PlotMeasurement(plotId: Int, length: Double, width: Double)\ndef safeArea(input: String): Either[String, Double] =\n  Try {\n    val Array(_, l, w) = input.split(\",\")\n    l.toDouble * w.toDouble\n  }.toEither.left.map(_ => \"Invalid measurement input\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_377","timestamp":1745438377981,"code":"case class NitrogenLevel(fieldId: Int, ppm: Option[Double])\ndef nitrogenWarning(nl: NitrogenLevel): String = nl.ppm match {\n  case Some(value) if value < 10 => \"Low Nitrogen!\"\n  case Some(_) => \"Nitrogen OK\"\n  case None => \"Measurement missing\"\n}\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_378","timestamp":1745438377981,"code":"case class IrrigationEvent(field: String, timestamp: Option[Long])\ndef lastWatered(event: IrrigationEvent): Long =\n  event.timestamp.getOrElse(0L)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_379","timestamp":1745438377981,"code":"case class SensorReading(sensorId: String, value: Option[Double])\ndef failover(sensor: SensorReading, backup: Option[Double]): Double =\n  sensor.value.orElse(backup).getOrElse(-1.0)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_380","timestamp":1745438377981,"code":"case class CropSampling(crop: String, sampleId: Int, proteinContent: Option[Double])\ndef isHighProtein(sample: CropSampling): Boolean =\n  sample.proteinContent.exists(_ > 11)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_381","timestamp":1745438377981,"code":"import scala.util.Try\ncase class PHReading(field: String, pH: Double)\ndef safePH(str: String): Either[String, PHReading] =\n  Try {\n    val Array(field, ph) = str.split(\",\")\n    PHReading(field, ph.toDouble)\n  }.toEither.left.map(_ => \"Bad data for pH\")\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_382","timestamp":1745438377981,"code":"case class CropDeficiency(crop: String, deficiency: Option[String])\nval deficiencies = List(\n  CropDeficiency(\"Soy\", Some(\"Iron\")),\n  CropDeficiency(\"Wheat\", None)\n)\nval allReported = deficiencies.flatMap(_.deficiency)\n","category":"idiomatic","topicUsed":"Agricultural crop monitoring"}
{"id":"idiomatic_383","timestamp":1745438397500,"code":"case class TemperatureSensor(id: String, value: Option[Double])\nval temp = TemperatureSensor(\"t-1001\", Some(21.8))\ntemp.value.getOrElse(0.0)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_384","timestamp":1745438397500,"code":"import scala.util.Try\n\ndef parseHumidity(data: String): Try[Double] = Try(data.toDouble)\nval res = parseHumidity(\"45.7\").getOrElse(0.0)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_385","timestamp":1745438397501,"code":"case class SensorReading(sensorId: String, timestamp: Long, reading: Option[Double])\nval reading = SensorReading(\"p-23\", 1618910201L, None)\nval value = reading.reading.fold(\"no data\")(_.toString)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_386","timestamp":1745438397501,"code":"case class AggregatedData(sensorId: String, avg: Double, min: Double, max: Double)\nval agg = AggregatedData(\"t-200\", 16.5, 10.7, 22.0)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_387","timestamp":1745438397501,"code":"def safeDivide(a: Double, b: Double): Either[String, Double] =\n  if (b == 0) Left(\"division by zero\") else Right(a / b)\nsafeDivide(50.0, 4.0).getOrElse(0.0)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_388","timestamp":1745438397501,"code":"import scala.util.Try\ncase class MotionEvent(sensorId: String, detected: Boolean)\ndef parseMotion(input: String): Try[MotionEvent] =\n  Try(MotionEvent(input.takeWhile(_ != ':'), input.endsWith(\"true\")))\nparseMotion(\"s-5:true\").getOrElse(MotionEvent(\"unknown\", false))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_389","timestamp":1745438397501,"code":"case class SensorMeta(id: String, location: Option[String])\nval m1 = SensorMeta(\"light-44\", Some(\"lab\"))\nval locMsg = m1.location.map(loc => s\"Located at $loc\").getOrElse(\"Location unknown\")","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_390","timestamp":1745438397501,"code":"def calculateAvg(values: Seq[Double]): Option[Double] =\n  if (values.isEmpty) None else Some(values.sum / values.size)\ncalculateAvg(Seq(1.5, 2.5, 3.5)).getOrElse(0.0)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_391","timestamp":1745438397501,"code":"import scala.util.Try\ncase class PressureData(sensor: String, value: Double)\ndef fromStr(data: String): Try[PressureData] = Try {\n  val Array(id, v) = data.split(\",\")\n  PressureData(id, v.toDouble)\n}\nfromStr(\"p-11,1024.0\").toOption","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_392","timestamp":1745438397501,"code":"case class LightReading(id: String, intensity: Option[Int])\ndef status(reading: LightReading): String =\n  reading.intensity.map(i => s\"Intensity: $i\").getOrElse(\"No Data Available\")\nstatus(LightReading(\"l-3\", None))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_393","timestamp":1745438397501,"code":"def combineReadings(a: Option[Double], b: Option[Double]): Option[Double] = for {\n  va <- a\n  vb <- b\n} yield va + vb\ncombineReadings(Some(2.0), None)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_394","timestamp":1745438397501,"code":"import scala.util.Try\ncase class BatteryStatus(sensor: String, percent: Int)\ndef safeParse(status: String): Option[BatteryStatus] =\n  Try {\n    val Array(s, p) = status.split(\"/\")\n    BatteryStatus(s, p.toInt)\n  }.toOption\nsafeParse(\"vib-1/88\")","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_395","timestamp":1745438397501,"code":"case class DataPacket(id: String, data: Option[Double], error: Option[String])\ndef processPacket(packet: DataPacket): Double =\n  packet.data.getOrElse(-1.0)\nprocessPacket(DataPacket(\"xyz\", None, Some(\"timeout\")))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_396","timestamp":1745438397501,"code":"def getLastReading(readings: Seq[SensorReading]): Option[SensorReading] =\n  readings.sortBy(-_.timestamp).headOption\nval readings = Seq(SensorReading(\"s1\", 100, Some(1.1)), SensorReading(\"s2\", 80, None))\ngetLastReading(readings)","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_397","timestamp":1745438397501,"code":"case class DoorSensor(id: String, open: Boolean, lastActivity: Option[Long])\nval ds = DoorSensor(\"door-7\", true, Some(1620000123L))\nds.lastActivity.map(ts => s\"Active at $ts\").getOrElse(\"No activity\")","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_398","timestamp":1745438397501,"code":"case class SensorGroup(groupId: String, sensors: Seq[String])\nval g = SensorGroup(\"grp-2\", Seq(\"temp-2\", \"hum-3\"))\ng.sensors.find(_.startsWith(\"temp\"))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_399","timestamp":1745438397501,"code":"import scala.util.Try\ndef parseBoolean(s: String): Either[String, Boolean] = Try(s.toBoolean).toEither.left.map(_ => \"not a boolean\")\nparseBoolean(\"true\")","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_400","timestamp":1745438397501,"code":"def failedReadings(readings: Seq[Option[Double]]): Int = readings.count(_.isEmpty)\nfailedReadings(Seq(Some(3.2), None, Some(4.5), None))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_401","timestamp":1745438397501,"code":"case class SensorError(id: String, msg: String)\ndef handleEither(e: Either[SensorError, Double]): Double = e match {\n  case Right(value) => value\n  case Left(err) => -1.0\n}\nhandleEither(Left(SensorError(\"s-3\", \"Overheat\")))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_402","timestamp":1745438397501,"code":"def aggregateValid(readings: List[Option[Double]]): Double =\n  readings.flatten.sum\naggregateValid(List(Some(0.5), None, Some(0.7)))","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_403","timestamp":1745438397501,"code":"case class AggregationResult(avg: Option[Double], count: Int)\ndef aggregate(readings: List[Option[Double]]): AggregationResult = {\n  val vals = readings.flatten\n  AggregationResult(if (vals.isEmpty) None else Some(vals.sum / vals.size), vals.size)\n}\naggregate(List(Some(2), None, Some(4)) )","category":"idiomatic","topicUsed":"IoT sensor data aggregation"}
{"id":"idiomatic_404","timestamp":1745438415601,"code":"case class Stop(id: String, name: String)\nval mainStation = Stop(\"001\", \"Main Station\")\nprintln(mainStation)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_405","timestamp":1745438415601,"code":"case class TransitLine(name: String, stops: List[String])\nval metro = TransitLine(\"Metro A\", List(\"A1\", \"A2\", \"A3\"))\nprintln(metro.stops.headOption.getOrElse(\"No stops available\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_406","timestamp":1745438415601,"code":"def findStop(stops: List[Stop], name: String): Option[Stop] =\n  stops.find(_.name == name)\nval stops = List(Stop(\"S1\", \"Central\"), Stop(\"S2\", \"East\"))\nval result = findStop(stops, \"North\").getOrElse(Stop(\"\", \"Unknown\"))\nprintln(result)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_407","timestamp":1745438415601,"code":"def parseStop(text: String): Either[String, Stop] =\n  text.split(\",\").toList match {\n    case id :: name :: Nil => Right(Stop(id, name))\n    case _ => Left(\"Invalid input format\")\n  }\nprintln(parseStop(\"100,Airport\"))\nprintln(parseStop(\"Nope\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_408","timestamp":1745438415601,"code":"import scala.util.Try\ncase class Timetable(stopId: String, times: List[String])\ndef safeParseTimes(line: String): Try[Timetable] = Try {\n  val Array(stopId, timesStr) = line.split(\":\")\n  Timetable(stopId, timesStr.split(\",\").toList)\n}\nprintln(safeParseTimes(\"S1:08:00,09:00\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_409","timestamp":1745438415601,"code":"case class Trip(origin: String, destination: String, durationMin: Int)\nval trip: Option[Trip] = Some(Trip(\"A\", \"B\", 18))\nval summary = trip.map(t => s\"From ${t.origin} to ${t.destination} in ${t.durationMin} min\").getOrElse(\"No trip\")\nprintln(summary)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_410","timestamp":1745438415602,"code":"def getNextStop(line: TransitLine, current: String): Option[String] =\n  line.stops.dropWhile(_ != current) match {\n    case _ :: next :: _ => Some(next)\n    case _ => None\n  }\nval metro = TransitLine(\"Metro B\", List(\"Start\", \"Mid\", \"End\"))\nprintln(getNextStop(metro, \"Mid\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_411","timestamp":1745438415602,"code":"import scala.util.Try\ncase class Fare(amount: Double)\ndef calculateFare(distance: String): Try[Fare] = Try {\n  Fare(distance.toDouble * 2.5)\n}\ncalculateFare(\"12\").foreach(f => println(f.amount))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_412","timestamp":1745438415602,"code":"case class Route(id: String, stops: List[String])\nval routeOpt: Option[Route] = None\nval stops = routeOpt.map(_.stops).getOrElse(List.empty)\nprintln(stops)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_413","timestamp":1745438415602,"code":"case class Rider(name: String, preferredLine: Option[TransitLine])\ndef printPreference(r: Rider): Unit = r.preferredLine match {\n  case Some(line) => println(s\"Prefers ${line.name}\")\n  case None => println(\"No preference\")\n}\nprintPreference(Rider(\"Alex\", None))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_414","timestamp":1745438415602,"code":"import scala.util.Try\ndef readRouteId(input: String): Either[String, String] =\n  Try(input.trim).toEither.left.map(_ => \"Failed to parse route id\")\nprintln(readRouteId(\" 23 \"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_415","timestamp":1745438415602,"code":"case class Transfer(from: String, to: String, waitMinutes: Int)\ndef possibleTransfer(wait: Int): Option[Transfer] =\n  if (wait < 15) Some(Transfer(\"Blue\", \"Red\", wait)) else None\npossibleTransfer(10).foreach(t => println(t.waitMinutes))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_416","timestamp":1745438415602,"code":"case class Schedule(stop: String, times: Option[List[String]])\nval schedule = Schedule(\"Downtown\", Some(List(\"10:00\", \"11:00\")))\nschedule.times.flatMap(_.headOption).foreach(println)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_417","timestamp":1745438415602,"code":"def safeLastStop(stops: List[String]): Option[String] = stops.lastOption\nval lineStops = List(\"A\", \"B\", \"C\")\nprintln(safeLastStop(lineStops).getOrElse(\"No stops\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_418","timestamp":1745438415602,"code":"import scala.util.Try\ndef safeDivide(a: Int, b: Int): Either[String, Int] =\n  Try(a / b).toEither.left.map(_ => \"Division by zero\")\nprintln(safeDivide(10, 2))\nprintln(safeDivide(5, 0))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_419","timestamp":1745438415602,"code":"case class Connection(line: String, atStop: String)\nval conn: Option[Connection] = Some(Connection(\"Green\", \"Elm\"))\nval description = conn match {\n  case Some(Connection(line, stop)) => s\"Connect at $stop via $line\"\n  case None => \"No connection\"\n}\nprintln(description)","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_420","timestamp":1745438415602,"code":"case class Vehicle(id: String, kind: String)\ndef findVehicle(vehicles: List[Vehicle], id: String): Option[Vehicle] = vehicles.find(_.id == id)\nval vehicleList = List(Vehicle(\"V1\", \"Bus\"))\nprintln(findVehicle(vehicleList, \"V2\").getOrElse(Vehicle(\"\", \"Unknown\")))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_421","timestamp":1745438415602,"code":"import scala.util.Try\ncase class GeoCoord(lat: Double, lon: Double)\ndef parseCoord(str: String): Try[GeoCoord] = Try {\n  val Array(lat, lon) = str.split(\",\")\n  GeoCoord(lat.toDouble, lon.toDouble)\n}\nprintln(parseCoord(\"51.5,0.1\"))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_422","timestamp":1745438415602,"code":"case class Alert(message: String)\ndef formatAlert(optMsg: Option[String]): Alert = Alert(optMsg.getOrElse(\"No message\"))\nprintln(formatAlert(Some(\"Delay at Central\")))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_423","timestamp":1745438415602,"code":"case class Itinerary(stops: List[String], totalMinutes: Int)\ndef extendItinerary(it: Option[Itinerary], extraStop: String, addTime: Int): Option[Itinerary] =\n  it.map(i => i.copy(stops = i.stops :+ extraStop, totalMinutes = i.totalMinutes + addTime))\nprintln(extendItinerary(Some(Itinerary(List(\"A\"), 10)), \"B\", 5))","category":"idiomatic","topicUsed":"Public transit route planning"}
{"id":"idiomatic_424","timestamp":1745438432273,"code":"case class Product(sku: String, name: String, price: BigDecimal)\nval maybeProduct: Option[Product] = Some(Product(\"1001\", \"Milk\", 2.99))\nval priceWithFallback = maybeProduct.map(_.price).getOrElse(0.0)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_425","timestamp":1745438432273,"code":"case class Customer(id: Long, email: Option[String])\nval customer = Customer(10, None)\nval emailString = customer.email.getOrElse(\"no-email@unknown.com\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_426","timestamp":1745438432273,"code":"import scala.util.Try\ncase class Payment(amount: BigDecimal, method: String)\ndef parsePayment(input: String): Try[Payment] = Try {\n  val parts = input.split(\",\")\n  Payment(BigDecimal(parts(0)), parts(1))\n}","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_427","timestamp":1745438432273,"code":"case class Discount(code: String, percentage: Option[Int])\nval maybeDiscount = Some(Discount(\"BLACKFRIDAY\", Some(10)))\nval discountAmount = maybeDiscount.flatMap(_.percentage).getOrElse(0)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_428","timestamp":1745438432273,"code":"val maybeBarcode: Option[String] = None\nval barcodeMsg = maybeBarcode match {\n  case Some(code) => s\"Processing barcode: $code\"\n  case None => \"Barcode missing. Please scan again.\"\n}","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_429","timestamp":1745438432273,"code":"case class Item(name: String, price: BigDecimal)\nval maybeCart: Option[List[Item]] = Some(List(Item(\"Shirt\", 20.0)))\nval total = maybeCart.map(_.map(_.price).sum).getOrElse(0.0)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_430","timestamp":1745438432273,"code":"import scala.util.Try\ndef toIntOption(str: String): Option[Int] = Try(str.toInt).toOption\nval enteredQty = toIntOption(\"5\").getOrElse(1)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_431","timestamp":1745438432273,"code":"case class Register(id: Int, location: Option[String])\nval registerInfo = Register(2, Some(\"Front Store\"))\nval loc = registerInfo.location.fold(\"Unknown location\")(identity)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_432","timestamp":1745438432273,"code":"import scala.util.Try\ncase class Sale(amount: BigDecimal)\ndef parseSaleAmount(input: String): Either[String, Sale] = Try(Sale(BigDecimal(input))).toEither.left.map(_ => \"Invalid amount\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_433","timestamp":1745438432273,"code":"case class LoyaltyCard(number: String)\ndef lookupLoyaltyCard(maybeNum: Option[String]): Option[LoyaltyCard] = maybeNum.map(LoyaltyCard)\nval result = lookupLoyaltyCard(None)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_434","timestamp":1745438432273,"code":"case class Receipt(items: List[String], total: BigDecimal)\ndef printReceipt(receipt: Option[Receipt]): Unit = receipt.foreach(r => println(s\"Total: $${r.total}\"))","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_435","timestamp":1745438432273,"code":"case class InventoryUpdate(item: String, change: Int)\nval updates: List[Option[InventoryUpdate]] = List(Some(InventoryUpdate(\"Soda\", 5)), None)\nval justUpdates = updates.flatten","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_436","timestamp":1745438432273,"code":"case class User(id: Long, name: String)\ndef fetchUser(id: Long): Option[User] = if (id == 1) Some(User(1, \"Alex\")) else None\nval user = fetchUser(5).map(_.name).getOrElse(\"Guest\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_437","timestamp":1745438432273,"code":"import scala.util.Try\ndef safeDouble(str: String): Option[Double] = Try(str.toDouble).toOption\nsafeDouble(\"abc\").orElse(Some(0.0))","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_438","timestamp":1745438432273,"code":"case class Terminal(id: String, isActive: Boolean)\ndef isTerminalOnline(maybeTerminal: Option[Terminal]): Boolean = maybeTerminal.exists(_.isActive)\nval active = isTerminalOnline(Some(Terminal(\"POS01\", true)))","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_439","timestamp":1745438432273,"code":"case class Refund(originalPaymentId: String, amount: BigDecimal)\ndef processRefund(refund: Refund): Either[String, String] =\n  if (refund.amount > 0) Right(\"Refund processed.\") else Left(\"Amount must be positive.\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_440","timestamp":1745438432273,"code":"case class Promotion(name: String, details: Option[String])\nval promotion = Promotion(\"Weekend Sale\", None)\nval detailsText = promotion.details.fold(\"No details.\")(d => s\"Details: $d\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_441","timestamp":1745438432273,"code":"case class Basket(items: List[String])\ndef basketSize(optBasket: Option[Basket]): Int = optBasket.map(_.items.size).getOrElse(0)\nbasketSize(None)","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_442","timestamp":1745438432273,"code":"import scala.util.Try\ndef parseProductId(input: String): Either[String, Int] =\n  Try(input.toInt).toEither.left.map(_ => \"Invalid product ID\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_443","timestamp":1745438432273,"code":"case class Store(name: String, address: String)\ndef findStoreByName(name: String): Option[Store] =\n  if (name == \"Central\") Some(Store(\"Central\", \"123 High St\")) else None\nval address = findStoreByName(\"Central\").map(_.address).getOrElse(\"Unknown\")","category":"idiomatic","topicUsed":"Retail point-of-sale integration"}
{"id":"idiomatic_444","timestamp":1745438448180,"code":"case class MortgageInput(principal: Double, rate: Double, years: Int)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_445","timestamp":1745438448180,"code":"val maybePropertyValue: Option[Double] = Some(300000.0)\nval loanAmount = maybePropertyValue.map(_ * 0.8)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_446","timestamp":1745438448181,"code":"def parseInterestRate(s: String): Either[String, Double] =\n  try Right(s.toDouble) catch { case _: Throwable => Left(\"Invalid rate\") }","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_447","timestamp":1745438448181,"code":"case class User(name: String, email: Option[String])\nval user = User(\"Alice\", None)\nval contact = user.email.getOrElse(\"no-email@example.com\")","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_448","timestamp":1745438448181,"code":"def monthlyPayment(principal: Double, rate: Double, years: Int): Option[Double] =\n  if (rate <= 0 || years <= 0) None\n  else Some(\n    principal * (rate / 12) / (1 - Math.pow(1 + rate / 12, -years * 12))\n  )","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_449","timestamp":1745438448181,"code":"import scala.util.Try\nval n = Try(\"30\".toInt).getOrElse(0)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_450","timestamp":1745438448181,"code":"case class MortgageApplication(applicant: String, income: Option[Double], propertyValue: Option[Double])","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_451","timestamp":1745438448181,"code":"def loanToValue(loan: Double, value: Option[Double]): Option[Double] =\n  value.map(v => loan / v)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_452","timestamp":1745438448181,"code":"import scala.util.Try\ndef safeDivideLoan(loan: Double, divisor: String): Option[Double] =\n  Try(divisor.toDouble).toOption.filter(_ != 0).map(loan / _)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_453","timestamp":1745438448181,"code":"case class MortgageResult(monthlyPayment: Double, totalCost: Double)\ndef calculate(principal: Double, rate: Double, years: Int): Either[String, MortgageResult] =\n  if (principal <= 0 || rate <= 0 || years <= 0) Left(\"Inputs must be positive\")\n  else Right(\n    {\n      val pmt = principal * (rate / 12) / (1 - math.pow(1 + rate / 12, -years * 12))\n      MortgageResult(pmt, pmt * years * 12)\n    }\n  )","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_454","timestamp":1745438448181,"code":"val applicantIncome: Option[Double] = None\nval maxLoan = applicantIncome.map(_ * 4).getOrElse(0.0)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_455","timestamp":1745438448181,"code":"case class InterestRate(value: Double)\ndef validRate(input: String): Option[InterestRate] =\n  scala.util.Try(input.toDouble).toOption.filter(_ > 0).map(InterestRate)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_456","timestamp":1745438448181,"code":"def parseYear(year: String): Either[String, Int] =\n  scala.util.Try(year.toInt).toEither.left.map(_ => \"Invalid year\")","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_457","timestamp":1745438448181,"code":"case class MortgageQuote(input: MortgageInput, monthly: Double)\ndef quote(input: MortgageInput): Option[MortgageQuote] =\n  monthlyPayment(input.principal, input.rate, input.years)\n    .map(mp => MortgageQuote(input, mp))","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_458","timestamp":1745438448181,"code":"def getApplicantName(data: Map[String, String]): Option[String] =\n  data.get(\"name\").filter(_.nonEmpty)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_459","timestamp":1745438448181,"code":"val rateInput: Option[String] = Some(\"0.045\")\nval interestRate: Option[Double] = rateInput.flatMap(s => scala.util.Try(s.toDouble).toOption)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_460","timestamp":1745438448181,"code":"def calculateTotalPayment(payment: Double, years: Int): Either[String, Double] =\n  if (years < 0) Left(\"Years must be positive\")\n  else Right(payment * years * 12)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_461","timestamp":1745438448181,"code":"case class Borrower(name: String, age: Option[Int])\ndef isEligible(b: Borrower): Boolean =\n  b.age.exists(_ >= 18)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_462","timestamp":1745438448181,"code":"def parsePrincipal(s: String): Option[Double] =\n  scala.util.Try(s.trim.toDouble).toOption.filter(_ > 0)","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_463","timestamp":1745438448181,"code":"case class DownPayment(amount: Double)\ndef checkDownPayment(input: Option[Double]): Either[String, DownPayment] =\n  input.filter(_ >= 10000)\n    .map(DownPayment)\n    .toRight(\"Down payment too low\")","category":"idiomatic","topicUsed":"Online mortgage calculator"}
{"id":"idiomatic_464","timestamp":1745438467402,"code":"case class SensorReading(id: String, value: Double, timestamp: Long)\nval readingOpt: Option[SensorReading] = Some(SensorReading(\"temp001\", 72.5, 1627892461L))\nreadingOpt.map(_.value).getOrElse(0.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_465","timestamp":1745438467402,"code":"case class MachineStatus(machineId: String, isActive: Boolean)\ndef isMachineActive(status: Option[MachineStatus]): Boolean =\n  status.map(_.isActive).getOrElse(false)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_466","timestamp":1745438467402,"code":"import scala.util.Try\n\ndef parseTemperature(s: String): Try[Double] = Try(s.toDouble)\nval temp = parseTemperature(\"85.6\").getOrElse(0.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_467","timestamp":1745438467402,"code":"case class TelemetryEvent(machineId: String, reading: Option[SensorReading])\ndef averageReading(event: TelemetryEvent): Double =\n  event.reading.map(_.value).getOrElse(-1.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_468","timestamp":1745438467402,"code":"import scala.util.Try\n\ndef parseSensorReading(data: String): Try[SensorReading] = {\n  val parts = data.split(\",\")\n  Try(SensorReading(parts(0), parts(1).toDouble, parts(2).toLong))\n}","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_469","timestamp":1745438467402,"code":"case class Alarm(code: String, description: Option[String])\ndef alarmMessage(alarm: Alarm): String =\n  alarm.description.getOrElse(\"No description available\")","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_470","timestamp":1745438467402,"code":"import scala.util.Try\n\ncase class EngineRpm(rpm: Int)\ndef safeRpm(s: String): Option[EngineRpm] = Try(s.toInt).toOption.map(EngineRpm(_))","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_471","timestamp":1745438467403,"code":"case class VibrationData(axis: String, magnitude: Option[Double])\ndef checkVibration(data: VibrationData): String =\n  data.magnitude.map(m => s\"$m m/s^2\").getOrElse(\"No data\")","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_472","timestamp":1745438467403,"code":"import scala.util.Try\n\ndef readPowerValue(input: String): Either[String, Double] =\n  Try(input.toDouble).toEither.left.map(_ => \"Invalid power value\")","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_473","timestamp":1745438467403,"code":"case class MachineSnapshot(id: String, readings: Map[String, Option[Double]])\ndef getPressure(snapshot: MachineSnapshot): Option[Double] =\n  snapshot.readings.get(\"pressure\").flatten","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_474","timestamp":1745438467403,"code":"case class OilLevel(machineId: String, level: Option[Double])\nval levelResult = OilLevel(\"mx-22\", None)\nval displayLevel = levelResult.level.getOrElse(-1.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_475","timestamp":1745438467403,"code":"case class Metric(name: String, value: Option[Double])\ndef toJson(m: Metric): String =\n  m.value.map(v => s\"{\\\"${m.name}\\\": $v}\").getOrElse(\"{}\")","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_476","timestamp":1745438467403,"code":"case class Fault(code: Int, msg: String)\ndef parseFault(s: String): Option[Fault] = {\n  s.split(\"-\") match {\n    case Array(c, m) => Try(c.toInt).toOption.map(code => Fault(code, m))\n    case _ => None\n  }\n}","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_477","timestamp":1745438467403,"code":"import scala.util.Try\n\ndef readTemperature(data: Map[String, String]): Option[Double] =\n  data.get(\"temperature\").flatMap(s => Try(s.toDouble).toOption)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_478","timestamp":1745438467403,"code":"case class TelemetryBatch(readings: List[SensorReading])\ndef highestReading(batch: TelemetryBatch): Option[Double] =\n  if (batch.readings.isEmpty) None else Some(batch.readings.map(_.value).max)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_479","timestamp":1745438467403,"code":"case class BatteryStatus(voltage: Option[Double], health: String)\ndef voltageOk(status: BatteryStatus): Boolean =\n  status.voltage.exists(_ > 12.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_480","timestamp":1745438467403,"code":"case class FlowMeasurement(rate: Double, timestamp: Long)\ndef toOption(measurement: Either[String, FlowMeasurement]): Option[FlowMeasurement] =\n  measurement.toOption","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_481","timestamp":1745438467403,"code":"case class CoolingSystem(temp: Option[Double], fanRunning: Boolean)\nval cooling = CoolingSystem(Some(56.2), fanRunning = true)\nval displayTemp = cooling.temp.fold(\"No temp\")(_.toString)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_482","timestamp":1745438467403,"code":"case class TelemetryRecord(sensor: String, value: Either[String, Double])\ndef safeValue(record: TelemetryRecord): Double =\n  record.value.getOrElse(0.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_483","timestamp":1745438467403,"code":"case class PressureInfo(sensorId: String, pressure: Option[Double], timestamp: Long)\ndef stablePressure(p: PressureInfo): Boolean =\n  p.pressure.exists(_ > 30.0)","category":"idiomatic","topicUsed":"Telemetry for industrial machinery"}
{"id":"idiomatic_484","timestamp":1745438492290,"code":"case class Player(id: String, username: String)\nval somePlayer: Option[Player] = Some(Player(\"1\", \"GamerVR\"))\nsomePlayer.map(_.username.toUpperCase)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_485","timestamp":1745438492290,"code":"case class GameLobby(id: Int, name: String)\ndef findLobbyById(id: Int, lobbies: List[GameLobby]): Option[GameLobby] =\n  lobbies.find(_.id == id)\nfindLobbyById(2, List(GameLobby(1, \"Arena\"), GameLobby(2, \"SpaceWars\"))).getOrElse(GameLobby(0, \"None\"))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_486","timestamp":1745438492290,"code":"case class VRDevice(serial: String, firmwareVersion: Option[String])\nval device = VRDevice(\"ABC123\", None)\nval version = device.firmwareVersion.getOrElse(\"unknown\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_487","timestamp":1745438492290,"code":"import scala.util.Try\n\ndef parsePlayerScore(input: String): Try[Int] = Try(input.toInt)\nparsePlayerScore(\"200\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_488","timestamp":1745438492290,"code":"import scala.util.{Try, Success, Failure}\n\ndef loadLobbyConfig(path: String): Either[String, String] =\n  Try(scala.io.Source.fromFile(path).getLines.mkString(\"\\n\"))\n    .toEither.left.map(_ => \"Failed to load config\")\nloadLobbyConfig(\"lobby.conf\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_489","timestamp":1745438492290,"code":"case class LobbySettings(maxPlayers: Int, vrMode: Boolean)\nval settings = Some(LobbySettings(8, true))\nsettings.map(_.vrMode).getOrElse(false)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_490","timestamp":1745438492290,"code":"case class GameMode(name: String, minPlayers: Int)\nval modes = List(GameMode(\"Deathmatch\", 2), GameMode(\"Coop\", 4))\ndef modeByName(name: String): Option[GameMode] = modes.find(_.name == name)\nmodeByName(\"Coop\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_491","timestamp":1745438492290,"code":"case class VRRoom(name: String, lobbyId: Int)\ndef roomForLobby(lobbyId: Int, rooms: List[VRRoom]): Option[VRRoom] =\n  rooms.find(_.lobbyId == lobbyId)\nroomForLobby(3, List(VRRoom(\"FutureLab\", 3))).map(_.name)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_492","timestamp":1745438492290,"code":"case class Participant(id: String, isHost: Boolean)\ndef hostParticipant(participants: List[Participant]): Option[Participant] =\n  participants.find(_.isHost)\nhostParticipant(List(Participant(\"x\", false), Participant(\"y\", true)))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_493","timestamp":1745438492290,"code":"import scala.util.Try\n\ndef safeDivide(a: Int, b: Int): Either[String, Int] =\n  Try(a / b).toEither.left.map(_ => \"Division by zero\")\nsafeDivide(100, 0)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_494","timestamp":1745438492290,"code":"case class Invite(player: String, accepted: Boolean)\ndef countAccepted(invites: List[Invite]): Int = invites.count(_.accepted)\ncountAccepted(List(Invite(\"Alice\", true), Invite(\"Bob\", false)))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_495","timestamp":1745438492290,"code":"case class Avatar(id: Int, skin: Option[String])\ndef getSkin(avatar: Avatar): String =\n  avatar.skin.getOrElse(\"defaultSkin\")\ngetSkin(Avatar(1, None))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_496","timestamp":1745438492290,"code":"case class Settings(volume: Int, vrMode: Boolean)\ndef updateVolume(s: Settings, newVol: Option[Int]): Settings =\n  s.copy(volume = newVol.getOrElse(s.volume))\nupdateVolume(Settings(50, true), Some(70))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_497","timestamp":1745438492290,"code":"import scala.util.Try\n\ndef parseLobbyId(str: String): Try[Int] = Try(str.toInt)\nparseLobbyId(\"101\") match {\n  case scala.util.Success(id) => id\n  case scala.util.Failure(_)  => -1\n}","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_498","timestamp":1745438492290,"code":"case class VRSession(id: String, player: Player)\ndef findSession(playerId: String, sessions: List[VRSession]): Option[VRSession] =\n  sessions.find(_.player.id == playerId)\nfindSession(\"42\", List(VRSession(\"a\", Player(\"42\", \"Qubit\"))))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_499","timestamp":1745438492290,"code":"case class LobbyError(reason: String)\ntype LobbyResult[A] = Either[LobbyError, A]\ndef joinLobby(username: String, lobbies: Set[String]): LobbyResult[String] =\n  if (lobbies.contains(username)) Left(LobbyError(\"Username already in use\"))\n  else Right(username)\njoinLobby(\"Eve\", Set(\"Alice\", \"Eve\"))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_500","timestamp":1745438492290,"code":"case class VRSettings(renderDistance: Option[Int])\nval settings = VRSettings(None)\nval dist = settings.renderDistance.getOrElse(500)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_501","timestamp":1745438492290,"code":"case class DeviceStatus(connected: Boolean, lastError: Option[String])\ndef reportStatus(status: DeviceStatus): String =\n  status.lastError.getOrElse(if(status.connected) \"OK\" else \"Disconnected\")\nreportStatus(DeviceStatus(false, None))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_502","timestamp":1745438492290,"code":"case class GameInvite(invitee: String, status: String)\ndef acceptInvite(invites: List[GameInvite], name: String): List[GameInvite] =\n  invites.map(inv => if (inv.invitee == name) inv.copy(status = \"Accepted\") else inv)\nacceptInvite(List(GameInvite(\"Eve\", \"Pending\")), \"Eve\")","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_503","timestamp":1745438492290,"code":"case class VRLobby(name: String, maxPlayers: Int)\ndef createLobby(name: String, maxPlayers: Int): Either[String, VRLobby] =\n  if (maxPlayers > 0) Right(VRLobby(name, maxPlayers))\n  else Left(\"Max players must be positive\")\ncreateLobby(\"NeoArcade\", 0)","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_504","timestamp":1745438492290,"code":"case class Spectator(id: String, watching: Option[String])\ndef spectatorView(s: Spectator): String =\n  s.watching.map(w => s\"Watching $w\").getOrElse(\"Spectator is idle\")\nspectatorView(Spectator(\"s1\", None))","category":"idiomatic","topicUsed":"Virtual reality gaming lobby"}
{"id":"idiomatic_505","timestamp":1745438512133,"code":"case class Employee(id: Int, name: String)\nval john = Employee(1, \"John Doe\")\nprintln(john)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_506","timestamp":1745438512133,"code":"case class TimeEntry(employeeId: Int, projectId: Option[Int], hours: Double)\nval entry = TimeEntry(1, None, 8.0)\nprintln(entry.projectId.getOrElse(\"No project assigned\"))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_507","timestamp":1745438512133,"code":"val project: Option[String] = Some(\"ScalaRefactor\")\nval displayProject = project.map(_.toUpperCase).getOrElse(\"No Project\")\nprintln(displayProject)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_508","timestamp":1745438512133,"code":"case class ClockIn(employeeId: Int, timestamp: Long)\ndef latestClockIn(entries: List[ClockIn]): Option[ClockIn] = entries.sortBy(_.timestamp).lastOption\nval ins = List(ClockIn(1, 1000), ClockIn(1, 2000))\nprintln(latestClockIn(ins))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_509","timestamp":1745438512133,"code":"import scala.util.Try\ndef parseHours(input: String): Try[Double] = Try(input.toDouble)\nval hours = parseHours(\"8.5\").getOrElse(0.0)\nprintln(hours)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_510","timestamp":1745438512133,"code":"case class Break(start: Long, end: Long)\ndef breakDuration(b: Break): Long = b.end - b.start\nval lunch = Break(1200, 1400)\nprintln(breakDuration(lunch))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_511","timestamp":1745438512133,"code":"case class TimeSheet(employee: Employee, entries: List[TimeEntry])\ndef totalHours(sheet: TimeSheet): Double = sheet.entries.map(_.hours).sum\nval sheet = TimeSheet(Employee(2, \"Alice\"), List(TimeEntry(2, None, 4.0), TimeEntry(2, Some(99), 3.0)))\nprintln(totalHours(sheet))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_512","timestamp":1745438512133,"code":"import scala.util.Try\ndef parseEmployeeId(id: String): Either[String, Int] = Try(id.toInt).toEither.left.map(_ => s\"Invalid ID: $id\")\nprintln(parseEmployeeId(\"abc\"))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_513","timestamp":1745438512133,"code":"case class Shift(employee: Employee, start: Long, end: Option[Long])\ndef duration(shift: Shift): Option[Long] = shift.end.map(_ - shift.start)\nval s = Shift(Employee(4, \"Eve\"), 800, None)\nprintln(duration(s))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_514","timestamp":1745438512133,"code":"case class Overtime(employeeId: Int, hours: Double)\ndef totalOvertime(entries: List[Option[Overtime]]): Double = entries.flatten.map(_.hours).sum\nval overtimeEntries = List(Some(Overtime(1, 2.0)), None, Some(Overtime(2, 1.5)))\nprintln(totalOvertime(overtimeEntries))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_515","timestamp":1745438512133,"code":"def findEmployee(id: Int, db: Map[Int, Employee]): Option[Employee] = db.get(id)\nval empDb = Map(1 -> Employee(1, \"John\"), 2 -> Employee(2, \"Sara\"))\nprintln(findEmployee(3, empDb).getOrElse(Employee(0, \"Unknown\")))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_516","timestamp":1745438512133,"code":"case class ClockEvent(employeeId: Int, clockType: String, timestamp: Long)\ndef isLate(event: ClockEvent, startTime: Long): Boolean = event.clockType == \"IN\" && event.timestamp > startTime\nval event = ClockEvent(10, \"IN\", 900)\nprintln(isLate(event, 800))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_517","timestamp":1745438512133,"code":"import scala.util.Try\ndef hoursWorkedPerDay(entries: List[String]): Try[Double] = Try(entries.map(_.toDouble).sum)\nprintln(hoursWorkedPerDay(List(\"8.0\", \"abc\")))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_518","timestamp":1745438512133,"code":"case class DailyRecord(day: String, entry: Option[TimeEntry])\ndef showRecord(record: DailyRecord): String = record.entry match {\n  case Some(te) => s\"Worked ${te.hours}h on $day\"\n  case None     => s\"No hours for $day\"\n}\nval rec = DailyRecord(\"Monday\", None)\nprintln(showRecord(rec))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_519","timestamp":1745438512133,"code":"def safeDivideHours(total: Double, days: Int): Either[String, Double] =\n  if (days == 0) Left(\"No days worked\") else Right(total / days)\nprintln(safeDivideHours(40.0, 0))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_520","timestamp":1745438512133,"code":"case class Absence(employee: Employee, reason: Option[String])\ndef reasonText(abs: Absence): String = abs.reason.getOrElse(\"No reason provided\")\nprintln(reasonText(Absence(Employee(8, \"Paul\"), None)))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_521","timestamp":1745438512133,"code":"val maybeEntry: Option[TimeEntry] = None\nval result = maybeEntry.map(_.hours).getOrElse(0.0)\nprintln(result)","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_522","timestamp":1745438512133,"code":"def logTime(employeeId: Int, hours: Double): Either[String, TimeEntry] =\n  if (hours < 0) Left(\"Negative hours!\") else Right(TimeEntry(employeeId, None, hours))\nprintln(logTime(7, -3.0))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_523","timestamp":1745438512133,"code":"case class TimePeriod(start: Long, end: Option[Long])\ndef finished(tp: TimePeriod): Boolean = tp.end.isDefined\nval period = TimePeriod(1600, None)\nprintln(finished(period))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_524","timestamp":1745438512133,"code":"case class Correction(employeeId: Int, oldHours: Double, newHours: Double)\ndef updatedHours(c: Option[Correction]): Double = c.map(_.newHours).getOrElse(0.0)\nprintln(updatedHours(Some(Correction(2, 8.0, 7.5))))","category":"idiomatic","topicUsed":"Employee time tracking"}
{"id":"idiomatic_525","timestamp":1745438530372,"code":"case class WeatherAlert(area: String, alertType: String, severity: Int)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_526","timestamp":1745438530372,"code":"case class User(id: Int, email: Option[String])\ndef sendAlert(user: User, alert: WeatherAlert): Boolean = user.email.isDefined","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_527","timestamp":1745438530372,"code":"val temperature: Option[Double] = Some(22.4)\nval feelsLike = temperature.map(_ - 1.5).getOrElse(0.0)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_528","timestamp":1745438530372,"code":"import scala.util.Try\ndef parseSeverity(input: String): Try[Int] = Try(input.toInt)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_529","timestamp":1745438530372,"code":"case class NotificationSent(userId: Int, alertType: String)\ndef notifyUser(email: Option[String]): Option[NotificationSent] = \n  email.map(e => NotificationSent(1, \"Flood\"))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_530","timestamp":1745438530372,"code":"def fetchWeatherData(apiKey: Option[String]): Either[String, String] =\n  apiKey.toRight(\"Missing API key\").map(_ => \"Clear sky\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_531","timestamp":1745438530372,"code":"case class Location(lat: Double, lon: Double)\ndef locateUser(ip: String): Option[Location] = \n  if (ip.startsWith(\"192.\")) Some(Location(42.3, -71.1)) else None","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_532","timestamp":1745438530372,"code":"import scala.util.Try\ncase class Alert(id: Long, message: String)\ndef parseAlertId(s: String, msg: String): Try[Alert] = \n  Try(Alert(s.toLong, msg))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_533","timestamp":1745438530372,"code":"def computeAlertLevel(windSpeed: Option[Double]): Int = \n  windSpeed.filter(_ > 20).map(_ => 3).getOrElse(1)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_534","timestamp":1745438530372,"code":"val weatherCondition: Option[String] = Some(\"Rain\")\nval alertMessage = weatherCondition match {\n  case Some(\"Rain\") => \"Take an umbrella!\"\n  case Some(_)      => \"Have a nice day!\"\n  case None         => \"No data available.\"\n}","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_535","timestamp":1745438530372,"code":"case class Subscription(userId: Int, area: String, active: Boolean)\nval subscriptions = List(\n  Subscription(1, \"Boston\", true), Subscription(2, \"NYC\", false)\n)\nval activeBoston = subscriptions.find(s => s.area == \"Boston\" && s.active)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_536","timestamp":1745438530372,"code":"import scala.util.Try\ncase class AlertType(code: String)\ndef validateAlertCode(str: String): Either[String, AlertType] =\n  if (str.nonEmpty && str(0).isUpper) Right(AlertType(str)) else Left(\"Invalid code\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_537","timestamp":1745438530372,"code":"val maybeSeverity: Option[Int] = None\nval levelStr = maybeSeverity.map(_.toString).getOrElse(\"Not set\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_538","timestamp":1745438530372,"code":"case class WeatherData(temperature: Double, humidity: Double)\nval data: Either[String, WeatherData] = Right(WeatherData(22.0, 60.0))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_539","timestamp":1745438530372,"code":"def userEmail(userId: Int): Option[String] = if (userId > 0) Some(\"user@mail\") else None\nval fallbackEmail = userEmail(-1).getOrElse(\"default@mail\")","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_540","timestamp":1745438530372,"code":"case class DeliveryResult(userId: Int, success: Boolean)\ndef deliverNotificationOpt(email: Option[String]): DeliveryResult = \n  DeliveryResult(42, email.exists(_.contains(\"@\")))","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_541","timestamp":1745438530372,"code":"import scala.util.Try\ndef parseTemperature(s: String): Option[Double] = Try(s.toDouble).toOption","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_542","timestamp":1745438530372,"code":"case class AlertPreference(userId: Int, viaEmail: Boolean, viaSms: Boolean)\ndef prefersEmail(pref: Option[AlertPreference]): Boolean = \n  pref.exists(_.viaEmail)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_543","timestamp":1745438530372,"code":"val userOpt: Option[User] = Some(User(7, Some(\"weather@alerts\")))\nval emailToSend = for {\n  user <- userOpt\n  email <- user.email\n} yield email","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_544","timestamp":1745438530372,"code":"def lookupAlert(area: String): Option[WeatherAlert] = \n  if (area == \"Harbor\") Some(WeatherAlert(\"Harbor\", \"Wind\", 2)) else None\nval found = lookupAlert(\"Harbor\").map(_.severity).getOrElse(0)","category":"idiomatic","topicUsed":"Weather alert notification service"}
{"id":"idiomatic_545","timestamp":1745438553126,"code":"case class Payment(amount: BigDecimal, cardNumber: String, merchant: String)\nval maybePayment: Option[Payment] = Some(Payment(500.0, \"4242424242424242\", \"GroceryStore\"))\nval isLarge = maybePayment.exists(_.amount > 1000)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_546","timestamp":1745438553126,"code":"case class User(id: Long, email: Option[String])\ndef sendAlert(user: User): Boolean = user.email.isDefined\nval user = User(1, None)\nval sent = sendAlert(user)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_547","timestamp":1745438553126,"code":"import scala.util.Try\ncase class Transaction(amount: String)\ndef parseAmount(tx: Transaction): Try[BigDecimal] = Try(BigDecimal(tx.amount))\nval result = parseAmount(Transaction(\"1000.25\"))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_548","timestamp":1745438553126,"code":"case class Alert(message: String, userEmail: String)\ndef maybeSendAlert(alert: Option[Alert]): String = alert.map(a => s\"Sent: ${a.userEmail}\").getOrElse(\"No alert sent\")\nval output = maybeSendAlert(None)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_549","timestamp":1745438553126,"code":"case class CardInfo(number: String, expiry: Option[String])\ndef validCard(card: CardInfo): Boolean = card.expiry.isDefined\nval info = CardInfo(\"5555666677778888\", None)\nval isValid = validCard(info)","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_550","timestamp":1745438553126,"code":"import scala.util.Either\ncase class FraudScore(score: Double)\ndef flagIfHigh(score: FraudScore): Either[String, FraudScore] =\n  if (score.score > 0.8) Left(\"High risk\") else Right(score)\nval risk = flagIfHigh(FraudScore(0.9))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_551","timestamp":1745438553126,"code":"case class PaymentMeta(merchant: Option[String], country: Option[String])\nval meta = PaymentMeta(Some(\"E-Shop\"), None)\nval desc = (meta.merchant, meta.country) match {\n  case (Some(m), Some(c)) => s\"$m in $c\"\n  case (Some(m), None)    => s\"$m (country unknown)\"\n  case _                  => \"Unknown payment\"\n}","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_552","timestamp":1745438553126,"code":"case class RiskAssessment(id: Long, score: Option[Double])\ndef takeAction(risk: RiskAssessment): String = risk.score match {\n  case Some(s) if s > 0.7 => \"Manual review\"\n  case Some(_)            => \"Accept\"\n  case None               => \"Insufficient data\"\n}\nval action = takeAction(RiskAssessment(10, Some(0.8)))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_553","timestamp":1745438553126,"code":"import scala.util.Try\ncase class RawTransaction(json: String)\ndef parseJsonToAmount(raw: RawTransaction): Try[BigDecimal] =\n  Try(BigDecimal(raw.json))\nval parsed = parseJsonToAmount(RawTransaction(\"20.88\"))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_554","timestamp":1745438553126,"code":"case class PaymentAttempt(userId: Long, traceId: Option[String])\ndef traceInfo(attempt: PaymentAttempt): String =\n  s\"Trace: ${attempt.traceId.getOrElse(\"not available\")}\"\nval result = traceInfo(PaymentAttempt(9, None))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_555","timestamp":1745438553126,"code":"case class Device(deviceId: String, location: Option[String])\ndef suspiciousLocation(device: Device): Boolean = device.location.exists(_ == \"unknown\")\nval suspicious = suspiciousLocation(Device(\"dev123\", Some(\"unknown\")))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_556","timestamp":1745438553126,"code":"case class Verification(method: String, passed: Boolean)\ncase class ReviewResult(passed: Boolean, notes: Option[String])\ndef escalateIfNeeded(review: ReviewResult): Option[String] =\n  review.notes.filter(_ => !review.passed)\nval escalation = escalateIfNeeded(ReviewResult(false, Some(\"IP mismatch\")))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_557","timestamp":1745438553126,"code":"import scala.util.Either\ncase class PaymentDetails(card: Option[String], amount: Option[BigDecimal])\ndef checkDetails(pd: PaymentDetails): Either[String, PaymentDetails] =\n  if (pd.card.isEmpty || pd.amount.isEmpty) Left(\"Missing info\") else Right(pd)\nval status = checkDetails(PaymentDetails(None, Some(10.5)))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_558","timestamp":1745438553126,"code":"case class TransactionLog(id: Long, status: String)\ndef findFailed(logs: List[TransactionLog]): Option[TransactionLog] =\n  logs.find(_.status == \"failed\")\nval failed = findFailed(List(TransactionLog(1, \"ok\"), TransactionLog(2, \"failed\")))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_559","timestamp":1745438553126,"code":"import scala.util.Try\ncase class Event(time: String)\ndef parseTime(ev: Event): Try[java.time.Instant] = Try(java.time.Instant.parse(ev.time))\nval instantOpt = parseTime(Event(\"2024-05-08T10:00:00Z\"))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_560","timestamp":1745438553126,"code":"case class ScoreRecord(txId: String, risk: Option[Double])\nval records = List(\n  ScoreRecord(\"t1\", Some(0.5)),\n  ScoreRecord(\"t2\", None)\n)\nval avg = records.flatMap(_.risk).sum / records.flatMap(_.risk).size","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_561","timestamp":1745438553126,"code":"case class Account(id: Long, isBlacklisted: Option[Boolean])\ndef canProcess(acc: Account): Boolean = !acc.isBlacklisted.contains(true)\nval canDo = canProcess(Account(1, Some(true)))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_562","timestamp":1745438553126,"code":"import scala.util.Try\ncase class PaymentRef(ref: String)\ndef loadPayment(ref: String): Try[PaymentRef] = Try(PaymentRef(ref))\nval loaded = loadPayment(\"abc123\")","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_563","timestamp":1745438553126,"code":"case class UserProfile(userId: Long, city: Option[String])\ndef unusualCity(profile: UserProfile, blacklist: Set[String]): Boolean =\n  profile.city.exists(blacklist.contains)\nval found = unusualCity(UserProfile(10, Some(\"Moscow\")), Set(\"Moscow\", \"Tehran\"))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_564","timestamp":1745438553126,"code":"import scala.util.Either\ncase class ReviewDecision(decision: String, comment: Option[String])\ndef finalize(decision: ReviewDecision): Either[String, String] =\n  if (decision.decision == \"accept\") Right(\"Processed\")\n  else Left(decision.comment.getOrElse(\"Manual review required\"))\nval result = finalize(ReviewDecision(\"review\", None))","category":"idiomatic","topicUsed":"Fraud detection in payments"}
{"id":"idiomatic_565","timestamp":1745439101525,"code":"case class DicomHeader(patientName: Option[String], studyDate: Option[String])\nval header = DicomHeader(Some(\"Alice\"), None)\nval date = header.studyDate.getOrElse(\"Unknown Date\")\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_566","timestamp":1745439101525,"code":"case class ImageSlice(z: Double, pixelData: Vector[Int])\ndef findSlice(slices: List[ImageSlice], z: Double): Option[ImageSlice] =\n  slices.find(_.z == z)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_567","timestamp":1745439101525,"code":"import scala.util.Try\ndef parseIntensity(raw: String): Try[Int] = Try(raw.toInt)\nval intensity = parseIntensity(\"120\").getOrElse(0)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_568","timestamp":1745439101525,"code":"case class ImagingStudy(seriesId: String, modality: Option[String])\ndef modalityTag(study: ImagingStudy): String = study.modality match {\n  case Some(mod) => mod\n  case None => \"Unknown\"\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_569","timestamp":1745439101525,"code":"import scala.util.Try\ncase class ViewerConfig(windowLevel: Int, windowWidth: Int)\ndef parseConfig(levelStr: String, widthStr: String): Either[String, ViewerConfig] = for {\n  level <- Try(levelStr.toInt).toEither.left.map(_ => \"Invalid level\")\n  width <- Try(widthStr.toInt).toEither.left.map(_ => \"Invalid width\")\n} yield ViewerConfig(level, width)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_570","timestamp":1745439101525,"code":"case class Series(id: String, images: List[ImageSlice])\ndef getFirstImage(series: Series): Option[ImageSlice] = series.images.headOption\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_571","timestamp":1745439101525,"code":"case class PixelSpacing(x: Double, y: Double)\ndef calcAspectRatio(spacing: Option[PixelSpacing]): Double = {\n  spacing.map(s => s.x / s.y).getOrElse(1.0)\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_572","timestamp":1745439101525,"code":"import scala.util.Try\ndef loadDicomFile(path: String): Try[Array[Byte]] = Try(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(path)))\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_573","timestamp":1745439101525,"code":"case class AnnotatedRegion(label: String, points: List[(Int, Int)])\ndef getMainRegion(regions: List[AnnotatedRegion]): Option[AnnotatedRegion] =\n  regions.find(_.label == \"main\")\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_574","timestamp":1745439101525,"code":"def overlayAnnotation(image: ImageSlice, ann: Option[AnnotatedRegion]): ImageSlice = ann match {\n  case Some(region) => image.copy(pixelData = image.pixelData.map(_ + 10))\n  case None => image\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_575","timestamp":1745439101525,"code":"case class LoadResult(image: Option[ImageSlice], error: Option[String])\ndef loadImage(path: String): LoadResult = \n  if (path.endsWith(\".dcm\")) LoadResult(Some(ImageSlice(0.0, Vector(0,1,2))), None)\n  else LoadResult(None, Some(\"Invalid file format\"))\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_576","timestamp":1745439101525,"code":"import scala.util.Try\ndef parseHeaderField(header: Map[String,String], key: String): Try[String] = {\n  Try(header(key))\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_577","timestamp":1745439101525,"code":"case class DisplaySettings(brightness: Int, contrast: Int)\ndef adjustContrast(s: DisplaySettings, factor: Option[Int]): DisplaySettings = {\n  s.copy(contrast = s.contrast * factor.getOrElse(1))\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_578","timestamp":1745439101525,"code":"def safeGetPatientName(header: DicomHeader): String = header.patientName match {\n  case Some(name) => name\n  case None => \"No Name\"\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_579","timestamp":1745439101525,"code":"case class DicomSeries(seriesId: String, description: Option[String])\ndef seriesLabel(ds: DicomSeries): String = ds.description.getOrElse(ds.seriesId)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_580","timestamp":1745439101525,"code":"case class Coordinates(x: Double, y: Double, z: Double)\ndef maybeZ(coords: Option[Coordinates]): Double = coords.map(_.z).getOrElse(0.0)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_581","timestamp":1745439101525,"code":"import scala.util.Try\ndef readImageDimensions(meta: Map[String,String]): Either[String, (Int,Int)] = for {\n  w <- Try(meta(\"Width\").toInt).toEither.left.map(_ => \"Missing/invalid width\")\n  h <- Try(meta(\"Height\").toInt).toEither.left.map(_ => \"Missing/invalid height\")\n} yield (w, h)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_582","timestamp":1745439101525,"code":"case class Study(id: String, images: List[ImageSlice])\ndef firstZ(study: Study): Option[Double] = study.images.headOption.map(_.z)\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_583","timestamp":1745439101525,"code":"def displayIfPresent(slice: Option[ImageSlice]): String = slice match {\n  case Some(img) => s\"Slice at z=${img.z}\"\n  case None => \"No slice to display\"\n}\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_584","timestamp":1745439101525,"code":"case class UserPreferences(window: Option[(Int,Int)])\ndef getWindow(prefs: UserPreferences): (Int,Int) = prefs.window.getOrElse((40, 80))\n","category":"idiomatic","topicUsed":"Medical imaging data viewer"}
{"id":"idiomatic_585","timestamp":1745439128392,"code":"case class PaymentLink(id: String, amount: BigDecimal, currency: String, description: Option[String])\n\nval link = PaymentLink(\"1234\", BigDecimal(42.5), \"USD\", Some(\"Consulting fee\"))\nval desc = link.description.getOrElse(\"No description provided\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_586","timestamp":1745439128392,"code":"def findPaymentLinkById(id: String): Option[PaymentLink] =\n  if (id.nonEmpty) Some(PaymentLink(id, 99.99, \"USD\", None))\n  else None\n\nfindPaymentLinkById(\"abc\").map(_.amount)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_587","timestamp":1745439128392,"code":"import scala.util.Try\n\ndef parseAmount(amountStr: String): Try[BigDecimal] = Try(BigDecimal(amountStr))\n\nval result = parseAmount(\"25.50\").getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_588","timestamp":1745439128392,"code":"case class PaymentRequest(clientId: String, amount: BigDecimal)\n\nval maybeRequest: Option[PaymentRequest] = None\nval amount = maybeRequest.map(_.amount).getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_589","timestamp":1745439128392,"code":"def getDescription(link: PaymentLink): String = link.description match {\n  case Some(desc) => desc\n  case None => \"No description available\"\n}\n\nval output = getDescription(PaymentLink(\"id1\", 25.99, \"EUR\", None))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_590","timestamp":1745439128392,"code":"case class PaymentLinkStatus(linkId: String, status: String, lastUpdated: Long)\n\nval status = PaymentLinkStatus(\"pl-123\", \"ACTIVE\", System.currentTimeMillis())","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_591","timestamp":1745439128392,"code":"import scala.util.{Either, Left, Right}\n\ndef validateCurrency(currency: String): Either[String, String] =\n  if (currency.matches(\"[A-Z]{3}\")) Right(currency) else Left(\"Invalid currency code.\")\n\nval checked = validateCurrency(\"USD\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_592","timestamp":1745439128392,"code":"def tryFindAmount(link: Option[PaymentLink]): BigDecimal = link match {\n  case Some(pl) => pl.amount\n  case None => BigDecimal(0)\n}\n\nval amt = tryFindAmount(None)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_593","timestamp":1745439128392,"code":"case class CreatePaymentLinkRequest(amount: BigDecimal, currency: String, callbackUrl: Option[String])\n\nval request = CreatePaymentLinkRequest(120.00, \"USD\", None)\nval callback = request.callbackUrl.getOrElse(\"https://default-callback.com\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_594","timestamp":1745439128392,"code":"import scala.util.Try\n\ndef toPaymentLinkId(maybeId: Option[String]): Try[String] = Try(maybeId.get)\n\ntoPaymentLinkId(Some(\"pl-unique-id\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_595","timestamp":1745439128392,"code":"case class ErrorResponse(error: String, details: Option[String])\n\ndef errorMessage(err: ErrorResponse): String = err.details.map(d => s\"${err.error}: $d\").getOrElse(err.error)\n\nerrorMessage(ErrorResponse(\"NotFound\", None))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_596","timestamp":1745439128392,"code":"def getPaymentLinkCurrency(pl: PaymentLink): Either[String, String] =\n  if (pl.currency.nonEmpty) Right(pl.currency) else Left(\"Currency missing\")\n\ngetPaymentLinkCurrency(PaymentLink(\"id1\", 42, \"\", None))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_597","timestamp":1745439128392,"code":"case class PaymentMetadata(orderId: String, meta: Option[Map[String, String]])\n\nval meta = PaymentMetadata(\"o123\", Some(Map(\"promo\" -> \"XMAS2024\")))\nmeta.meta.flatMap(_.get(\"promo\"))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_598","timestamp":1745439128393,"code":"import scala.util.Try\n\ndef parsePaymentLink(json: String): Try[PaymentLink] = Try {\n  val parts = json.split(\",\")\n  PaymentLink(parts(0), BigDecimal(parts(1)), parts(2), None)\n}\n\nparsePaymentLink(\"pid,45.2,USD\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_599","timestamp":1745439128393,"code":"case class LinkStatusUpdate(id: String, status: String)\n\ndef updateStatus(old: PaymentLink, newStatus: String): PaymentLink = old.copy(description = Some(newStatus))\n\nval newLink = updateStatus(PaymentLink(\"id\", 23, \"USD\", None), \"PAID\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_600","timestamp":1745439128393,"code":"def tryGetCallbackUrl(request: CreatePaymentLinkRequest): Option[String] = request.callbackUrl\n\nval url = tryGetCallbackUrl(CreatePaymentLinkRequest(10, \"AUD\", Some(\"https://cb.com\")))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_601","timestamp":1745439128393,"code":"def parseBigDecimal(s: String): Either[String, BigDecimal] =\n  scala.util.Try(BigDecimal(s)).toEither.left.map(_ => s\"Invalid amount: $s\")\n\nparseBigDecimal(\"foo\")","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_602","timestamp":1745439128393,"code":"case class PaymentLinkInfo(linkId: String, url: String, expiration: Option[Long])\nval info = PaymentLinkInfo(\"id321\", \"https://wix.com/pay/123\", None)\nval expTime = info.expiration.getOrElse(0L)","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_603","timestamp":1745439128393,"code":"def getOrderId(meta: PaymentMetadata): Option[String] = Some(meta.orderId).filter(_.nonEmpty)\n\nval orderId = getOrderId(PaymentMetadata(\"\", None))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_604","timestamp":1745439128393,"code":"case class RefundRequest(linkId: String, reason: Option[String])\n\ndef refundReason(r: RefundRequest): String = r.reason.getOrElse(\"No reason provided\")\n\nrefundReason(RefundRequest(\"l123\", Some(\"Duplicate payment\")))","category":"idiomatic","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"idiomatic_605","timestamp":1745439151020,"code":"case class TranslationRequest(text: String, from: String, to: String)\n\nval req = TranslationRequest(\"Hello\", \"en\", \"es\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_606","timestamp":1745439151020,"code":"def getUserPreferredLanguage(userId: String): Option[String] = \n  Map(\"alice\" -> \"fr\", \"bob\" -> \"es\").get(userId)\n\nval langOpt = getUserPreferredLanguage(\"alice\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_607","timestamp":1745439151020,"code":"def safeParseConfidence(conf: String): Either[String, Double] = \n  scala.util.Try(conf.toDouble).toEither.left.map(_ => s\"Invalid confidence: $conf\")\n\nval conf = safeParseConfidence(\"0.9\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_608","timestamp":1745439151020,"code":"case class ChatMessage(sender: String, text: String, timestamp: Long)\n\nval msg = ChatMessage(\"bot\", \"Bonjour\", System.currentTimeMillis)","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_609","timestamp":1745439151020,"code":"def translate(msg: String): Option[String] =\n  if (msg.nonEmpty) Some(msg.reverse) else None\n\nval result = translate(\"hello\").getOrElse(\"[untranslated]\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_610","timestamp":1745439151020,"code":"case class UserSession(id: String, preferredLanguages: List[String])\n\nval session = UserSession(\"12345\", List(\"en\", \"de\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_611","timestamp":1745439151020,"code":"def findTranslatorEngine(name: String): Option[String] =\n  List(\"google\", \"deepl\", \"bing\").find(_ == name)\n\nval engine = findTranslatorEngine(\"deepl\").map(_.toUpperCase)","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_612","timestamp":1745439151020,"code":"def safeInt(s: String): Option[Int] = scala.util.Try(s.toInt).toOption\nval port: Option[Int] = safeInt(\"8080\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_613","timestamp":1745439151020,"code":"def detectLanguage(text: String): Either[String, String] =\n  if (text.startsWith(\"Hola\")) Right(\"es\") else Left(\"Unknown language\")\n\nval lang = detectLanguage(\"Hola mundo\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_614","timestamp":1745439151020,"code":"case class TranslationResponse(input: String, output: Option[String], durationMs: Int)\n\nval resp = TranslationResponse(\"hi\", Some(\"salut\"), 32)","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_615","timestamp":1745439151020,"code":"def lookupTranslation(word: String, dict: Map[String, String]): Option[String] =\n  dict.get(word)\n\nval maybeWord = lookupTranslation(\"house\", Map(\"house\" -> \"casa\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_616","timestamp":1745439151020,"code":"case class User(id: String, alias: Option[String])\n\nval u1 = User(\"42\", None)\nval u2 = User(\"43\", Some(\"translator_bob\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_617","timestamp":1745439151020,"code":"def parseJsonMessage(json: String): Either[Throwable, Map[String, String]] = \n  scala.util.Try {\n    val parts = json.stripPrefix(\"{\").stripSuffix(\"}\").split(\":\").map(_.trim)\n    Map(parts(0) -> parts(1))\n  }.toEither\nval parsed = parseJsonMessage(\"{text:hello}\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_618","timestamp":1745439151020,"code":"def translateOrError(text: String, lang: String): Either[String, String] =\n  if (lang == \"fr\") Right(\"bonjour\") else Left(s\"Translation not supported: $lang\")\n\ndef printTranslation(result: Either[String, String]): Unit = result match {\n  case Right(txt) => println(txt)\n  case Left(err) => println(err)\n}\n","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_619","timestamp":1745439151020,"code":"case class Translator(id: String, supports: Set[String])\n\nval tr = Translator(\"g1\", Set(\"en-es\", \"es-en\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_620","timestamp":1745439151020,"code":"def getGreeting(lang: String): Option[String] =\n  Map(\"en\" -> \"Hello\", \"es\" -> \"Hola\").get(lang)\nval greet = getGreeting(\"de\").getOrElse(\"[greeting unknown]\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_621","timestamp":1745439151020,"code":"def safeDivide(n: Int, d: Int): Either[String, Int] =\n  if (d != 0) Right(n / d) else Left(\"Cannot divide by zero\")\nval res = safeDivide(12, 0)","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_622","timestamp":1745439151020,"code":"case class Error(message: String)\ndef translateSafe(input: String): Either[Error, String] =\n  if (input == \"ping\") Right(\"pong\") else Left(Error(\"Not translatable\"))\nval t = translateSafe(\"hello\")","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_623","timestamp":1745439151020,"code":"def fallbackTranslation(word: String): Option[String] = \n  if (word.length > 4) Some(word.take(4)) else None\nval ft = fallbackTranslation(\"chatbot\").orElse(Some(\"fallback\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_624","timestamp":1745439151020,"code":"case class TranslationLogEntry(request: TranslationRequest, succeeded: Boolean, error: Option[String])\n\nval log1 = TranslationLogEntry(TranslationRequest(\"hi\",\"en\",\"de\"), true, None)\nval log2 = TranslationLogEntry(TranslationRequest(\"foo\",\"fr\",\"en\"), false, Some(\"Timeout\"))","category":"idiomatic","topicUsed":"Language translation chat bot"}
{"id":"idiomatic_625","timestamp":1745439166627,"code":"case class EnergyReading(deviceId: String, consumption: Double)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_626","timestamp":1745439166627,"code":"val maybeReading: Option[EnergyReading] = None\nmaybeReading.getOrElse(EnergyReading(\"unknown\", 0.0))","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_627","timestamp":1745439166627,"code":"def findReading(id: String, readings: List[EnergyReading]): Option[EnergyReading] = readings.find(_.deviceId == id)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_628","timestamp":1745439166627,"code":"case class User(name: String, dashboardVisible: Boolean)\nval user: Option[User] = Some(User(\"Alice\", true))\nuser.filter(_.dashboardVisible)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_629","timestamp":1745439166627,"code":"import scala.util.Try\ndef parseConsumption(value: String): Try[Double] = Try(value.toDouble)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_630","timestamp":1745439166627,"code":"case class Device(id: String, lastSeen: Option[Long])\nval device = Device(\"dev3\", None)\ndevice.lastSeen.map(ts => s\"Last seen at $ts\").getOrElse(\"Never seen\")","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_631","timestamp":1745439166627,"code":"val maybeValue: Option[Double] = Some(74.2)\nval alert = maybeValue.exists(_ > 70.0)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_632","timestamp":1745439166627,"code":"def safeDivision(total: Double, count: Int): Either[String, Double] =\n  if(count == 0) Left(\"Cannot divide by zero\") else Right(total / count)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_633","timestamp":1745439166627,"code":"val monthlyReadings: List[Option[EnergyReading]] = List(Some(EnergyReading(\"d1\", 12.0)), None)\nval valid = monthlyReadings.flatten","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_634","timestamp":1745439166627,"code":"import scala.util.Try\nval result = Try(100.0 / 0).recover { case _: ArithmeticException => Double.PositiveInfinity }","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_635","timestamp":1745439166627,"code":"case class Meter(id: String, installed: Boolean, location: Option[String])\nval meter = Meter(\"m1\", true, Some(\"Roof\"))","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_636","timestamp":1745439166627,"code":"def lookupConsumption(readings: Map[String, Double], id: String): Option[Double] = readings.get(id)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_637","timestamp":1745439166627,"code":"val readingsByDevice: Map[String, List[Double]] = Map(\"a\" -> List(10.0, 12.5))\nval avg = readingsByDevice.get(\"a\").flatMap(xs => if(xs.nonEmpty) Some(xs.sum / xs.length) else None)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_638","timestamp":1745439166627,"code":"case class DashboardData(user: User, readings: List[EnergyReading])\nval dash = DashboardData(User(\"Bob\", true), List(EnergyReading(\"c2\", 7.1)))","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_639","timestamp":1745439166627,"code":"def safeParseInt(s: String): Option[Int] = Try(s.toInt).toOption\nval threshold = safeParseInt(\"42\")","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_640","timestamp":1745439166628,"code":"import scala.util.Try\ndef readConfig(path: String): Try[Map[String, String]] = Try(scala.io.Source.fromFile(path).getLines().map(line => line.split(\"=\") match { case Array(k,v) => (k.trim, v.trim) }).toMap)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_641","timestamp":1745439166628,"code":"case class ConsumptionAlert(deviceId: String, current: Double, threshold: Double)\nval alert = Some(ConsumptionAlert(\"devX\", 110.6, 100.0)).filter(_.current > _.threshold)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_642","timestamp":1745439166628,"code":"def getLatestReading(readings: List[EnergyReading]): Option[EnergyReading] = readings.sortBy(-_.consumption).headOption","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_643","timestamp":1745439166628,"code":"case class Building(name: String, floors: Int, dashboardUrl: Option[String])\nval b = Building(\"HQ\", 3, None)\nb.dashboardUrl.getOrElse(\"/dashboard/default\")","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_644","timestamp":1745439166628,"code":"val values = List(\"12.4\", \"oops\", \"40.0\")\nval parsed = values.flatMap(s => Try(s.toDouble).toOption)","category":"idiomatic","topicUsed":"Energy consumption dashboard"}
{"id":"idiomatic_645","timestamp":1745439186576,"code":"case class Ballot(voterId: String, candidate: String)\n\nval ballot: Option[Ballot] = Some(Ballot(\"v001\", \"Alice\"))\nval candidateOpt: Option[String] = ballot.map(_.candidate)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_646","timestamp":1745439186576,"code":"case class Tally(candidate: String, votes: Int)\ndef safeIncrement(tally: Option[Tally]): Option[Tally] =\n  tally.map(t => t.copy(votes = t.votes + 1))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_647","timestamp":1745439186576,"code":"import scala.util.Try\n\ndef parseBallotId(input: String): Try[Int] = Try(input.toInt)\n\nval ballotId = parseBallotId(\"42\").getOrElse(-1)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_648","timestamp":1745439186576,"code":"case class Voter(id: String, registered: Boolean)\ndef findVoter(id: String, voters: List[Voter]): Option[Voter] =\n  voters.find(_.id == id)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_649","timestamp":1745439186576,"code":"import scala.util.Either\ncase class Result(winner: String)\ndef determineWinner(tallies: Map[String, Int]): Either[String, Result] = {\n  if (tallies.isEmpty) Left(\"No tallies to evaluate\")\n  else Right(Result(tallies.maxBy(_._2)._1))\n}","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_650","timestamp":1745439186576,"code":"case class BallotBox(ballots: List[Ballot])\ndef countVotes(box: BallotBox): Map[String, Int] =\n  box.ballots.groupBy(_.candidate).mapValues(_.size)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_651","timestamp":1745439186576,"code":"case class VoterStatus(eligible: Boolean, voted: Boolean)\ndef canVote(status: Option[VoterStatus]): Boolean =\n  status.exists(s => s.eligible && !s.voted)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_652","timestamp":1745439186576,"code":"import scala.util.Try\ncase class VotingSession(id: String)\ndef openSession(id: String): Try[VotingSession] =\n  Try(VotingSession(id))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_653","timestamp":1745439186576,"code":"case class ElectronicSignature(hash: String)\ndef signatureOpt(input: String): Option[ElectronicSignature] =\n  Option(input).filter(_.nonEmpty).map(ElectronicSignature)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_654","timestamp":1745439186576,"code":"def firstValidBallot(ballots: List[Option[Ballot]]): Option[Ballot] =\n  ballots.collectFirst { case Some(b) => b }","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_655","timestamp":1745439186576,"code":"case class PollingStation(id: String, online: Boolean)\ndef isStationActive(station: Option[PollingStation]): Boolean =\n  station.exists(_.online)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_656","timestamp":1745439186576,"code":"import scala.util.Try\n\ndef parseVotes(input: String): Either[String, Int] =\n  Try(input.toInt).toEither.left.map(_ => s\"Invalid vote count: $input\")","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_657","timestamp":1745439186576,"code":"case class TallyingError(message: String)\ndef safeDivideVotes(total: Int, divisors: Int): Either[TallyingError, Int] =\n  if (divisors == 0) Left(TallyingError(\"Division by zero\"))\n  else Right(total / divisors)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_658","timestamp":1745439186576,"code":"case class BallotEnvelope(barcode: String, sealedStatus: Boolean)\ndef extractBarcode(envelope: Option[BallotEnvelope]): Option[String] =\n  envelope.filter(_.sealedStatus).map(_.barcode)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_659","timestamp":1745439186576,"code":"case class AuditLog(event: String)\ndef maybeLogEvent(eventOpt: Option[String]): Option[AuditLog] =\n  eventOpt.map(AuditLog)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_660","timestamp":1745439186576,"code":"case class Vote(value: Int)\ndef addVote(current: Option[Vote], increment: Int): Option[Vote] =\n  current.map(v => v.copy(value = v.value + increment))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_661","timestamp":1745439186576,"code":"case class Election(name: String, participants: List[String])\ndef getParticipant(election: Election, idx: Int): Option[String] =\n  election.participants.lift(idx)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_662","timestamp":1745439186576,"code":"case class BallotValidation(valid: Boolean, reason: Option[String])\ndef validateBallot(ballot: Option[Ballot]): BallotValidation =\n  ballot.map(_ => BallotValidation(true, None)).getOrElse(BallotValidation(false, Some(\"Missing ballot\")))","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_663","timestamp":1745439186576,"code":"case class PrecinctReport(votes: Map[String, Int])\ndef totalVotes(report: Option[PrecinctReport]): Int =\n  report.map(_.votes.values.sum).getOrElse(0)","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_664","timestamp":1745439186576,"code":"import scala.util.Try\ncase class ElectionResultSummary(totalBallots: Int, winner: String)\ndef summarizeResults(ballots: List[Ballot]): Try[ElectionResultSummary] =\n  Try {\n    val counts = ballots.groupBy(_.candidate).mapValues(_.size)\n    val winner = counts.maxBy(_._2)._1\n    ElectionResultSummary(ballots.length, winner)\n  }","category":"idiomatic","topicUsed":"Electronic voting tallying"}
{"id":"idiomatic_665","timestamp":1745439203591,"code":"case class Book(title: String, author: String, isbn: Option[String])\nval book = Book(\"Scala for Libraries\", \"Alice Smith\", Some(\"978-1234567890\"))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_666","timestamp":1745439203591,"code":"val maybeTitle: Option[String] = Some(\"Functional Programming\")\nval uppercaseTitle = maybeTitle.map(_.toUpperCase)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_667","timestamp":1745439203591,"code":"def findBookByIsbn(isbn: String, catalog: List[Book]): Option[Book] =\n  catalog.find(_.isbn.contains(isbn))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_668","timestamp":1745439203591,"code":"def parseYear(yearStr: String): Either[String, Int] =\n  try Right(yearStr.toInt) catch { case _: NumberFormatException => Left(\"Invalid year\") }","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_669","timestamp":1745439203591,"code":"case class SearchQuery(term: String, author: Option[String], year: Option[Int])\nval q = SearchQuery(\"Scala\", None, Some(2022))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_670","timestamp":1745439203591,"code":"val userInput: Option[String] = None\nval searchTerm = userInput.getOrElse(\"default subject\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_671","timestamp":1745439203591,"code":"def getFirstResult(results: List[Book]): Either[String, Book] =\n  results.headOption.toRight(\"No results found\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_672","timestamp":1745439203591,"code":"case class Catalog(books: List[Book])\ndef searchByAuthor(author: String, catalog: Catalog): List[Book] =\n  catalog.books.filter(_.author == author)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_673","timestamp":1745439203591,"code":"val catalog = List(Book(\"Scala for All\", \"Jane Doe\", None))\ncatalog.headOption match {\n  case Some(b) => b.title\n  case None => \"No books\"\n}","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_674","timestamp":1745439203591,"code":"import scala.util.Try\ndef safeParseDouble(s: String): Try[Double] = Try(s.toDouble)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_675","timestamp":1745439203591,"code":"def getIsbnOrUnknown(book: Book): String = book.isbn.getOrElse(\"unknown\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_676","timestamp":1745439203591,"code":"case class SearchResult(books: List[Book], total: Int)\ndef getSearchResult(books: List[Book]): SearchResult = SearchResult(books, books.length)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_677","timestamp":1745439203591,"code":"def safeDivide(total: Int, count: Int): Either[String, Double] =\n  if (count == 0) Left(\"Division by zero\") else Right(total.toDouble / count)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_678","timestamp":1745439203591,"code":"val maybePublisher: Option[String] = Some(\"O'Reilly\")\nmaybePublisher.foreach(println)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_679","timestamp":1745439203591,"code":"def tryParseIsbn(isbnStr: String): Either[String, String] =\n  if (isbnStr.matches(\"[0-9-]+\")) Right(isbnStr) else Left(\"Invalid ISBN format\")","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_680","timestamp":1745439203591,"code":"case class UserQuery(query: String, filters: Option[Map[String, String]])\ndef getFilterValue(userQuery: UserQuery, key: String): Option[String] =\n  userQuery.filters.flatMap(_.get(key))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_681","timestamp":1745439203591,"code":"def findBooksByTitle(term: String, books: List[Book]): List[Book] =\n  books.filter(_.title.toLowerCase.contains(term.toLowerCase))","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_682","timestamp":1745439203591,"code":"import scala.util.Try\ndef tryLoadCatalog(file: String): Try[List[Book]] = Try(io.Source.fromFile(file).getLines.toList.map { line =>\n  val parts = line.split(\",\").map(_.trim)\n  Book(parts(0), parts(1), Some(parts(2)))\n})","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_683","timestamp":1745439203591,"code":"case class SearchResponse(status: String, books: List[Book], error: Option[String])\nval response = SearchResponse(\"ok\", List(book), None)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_684","timestamp":1745439203591,"code":"def getAuthorOrDefault(book: Book, default: String): String =\n  Option(book.author).getOrElse(default)","category":"idiomatic","topicUsed":"Digital library catalog search"}
{"id":"idiomatic_685","timestamp":1745439219590,"code":"final case class Event(id: String, name: String)\nfinal case class Ticket(qr: String, userId: String, event: Event)","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_686","timestamp":1745439219590,"code":"case class QRCode(value: String)\ndef decodeQRCode(raw: String): Option[QRCode] = if (raw.nonEmpty) Some(QRCode(raw)) else None","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_687","timestamp":1745439219590,"code":"case class ValidationError(msg: String)\ncase class Attendee(name: String, ticket: Ticket)\ndef findAttendee(tickets: List[Ticket], qr: String): Either[ValidationError, Attendee] =\n  tickets.find(_.qr == qr)\n    .map(t => Right(Attendee(\"Unknown\", t)))\n    .getOrElse(Left(ValidationError(\"QR not found\")))","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_688","timestamp":1745439219590,"code":"import scala.util.Try\ncase class ParsedQR(id: String, eventId: String)\ndef parseQR(qr: String): Try[ParsedQR] = Try {\n  val Array(id, eventId) = qr.split(\"-\")\n  ParsedQR(id, eventId)\n}","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_689","timestamp":1745439219590,"code":"case class ScanResult(ticket: Ticket, scannedAt: Long)\ndef recordScan(ticket: Option[Ticket]): Option[ScanResult] = ticket.map(t => ScanResult(t, System.currentTimeMillis))","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_690","timestamp":1745439219590,"code":"case class User(id: String, name: String)\ndef getUserById(id: String, users: List[User]): Option[User] = users.find(_.id == id)","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_691","timestamp":1745439219590,"code":"case class Event(id: String, expired: Boolean)\ndef validateEvent(eventId: String, events: List[Event]): Either[String, Event] =\n  events.find(_.id == eventId).toRight(\"Event does not exist\").filterOrElse(!_.expired, \"Event expired\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_692","timestamp":1745439219590,"code":"case class Ticket(id: String, used: Boolean)\ndef checkAlreadyUsed(ticket: Ticket): Option[String] = if (ticket.used) Some(\"Ticket already used\") else None","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_693","timestamp":1745439219590,"code":"case class ErrorResponse(error: String)\ndef validateNotNull(str: String): Either[ErrorResponse, String] = Option(str).filter(_.nonEmpty).toRight(ErrorResponse(\"Value is null or empty\"))","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_694","timestamp":1745439219590,"code":"import scala.util.Try\ncase class QRTicket(id: String, userId: String)\ndef tryParse(input: String): Try[QRTicket] = Try {\n  val parts = input.split(\":\")\n  QRTicket(parts(0), parts(1))\n}","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_695","timestamp":1745439219590,"code":"case class ValidationSuccess(ticket: Ticket)\nsealed trait ValidationResult\ncase class ValidationFailure(msg: String) extends ValidationResult\ndef validateTicketByQR(qr: String, tickets: List[Ticket]): ValidationResult = tickets.find(_.qr == qr)\n  .map(ValidationSuccess)\n  .getOrElse(ValidationFailure(\"QR code invalid\"))","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_696","timestamp":1745439219590,"code":"case class Venue(name: String)\ndef findVenue(event: Event, venues: List[Venue]): Option[Venue] = venues.headOption","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_697","timestamp":1745439219590,"code":"case class ScanLog(ticketId: String, status: String)\ndef logResult(ticketId: String, ok: Boolean): ScanLog =\n  ScanLog(ticketId, if (ok) \"Valid\" else \"Invalid\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_698","timestamp":1745439219590,"code":"case class EventInfo(id: String, date: String)\ndef eventIsOngoing(event: EventInfo, current: String): Boolean = event.date == current","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_699","timestamp":1745439219590,"code":"import scala.util.Try\ndef intFromQR(qr: String): Option[Int] = Try(qr.toInt).toOption","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_700","timestamp":1745439219590,"code":"case class Ticket(qr: String, validUntil: Long)\ndef isTicketValid(ticket: Ticket, now: Long): Boolean = ticket.validUntil > now","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_701","timestamp":1745439219590,"code":"case class TicketHolder(name: String, ticket: Option[Ticket])\ndef ticketStatus(holder: TicketHolder): String = holder.ticket.map(_ => \"Valid\").getOrElse(\"Missing ticket\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_702","timestamp":1745439219590,"code":"case class Scan(id: String, result: Either[String, Ticket])\ndef ticketFromQR(qr: String, tickets: Map[String, Ticket]): Scan =\n  Scan(qr, tickets.get(qr).toRight(\"Ticket not found\"))","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_703","timestamp":1745439219590,"code":"case class Validator(config: Map[String, String])\ndef getValidationSecret(cfg: Validator): Option[String] = cfg.config.get(\"secret\")","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_704","timestamp":1745439219590,"code":"case class QRTicket(id: String, event: String, issued: Long)\ndef canBeScanned(ticket: QRTicket, now: Long): Boolean =\n  (now - ticket.issued) < 86400000","category":"idiomatic","topicUsed":"Event ticket QR validation"}
{"id":"idiomatic_705","timestamp":1745439298785,"code":"case class Location(lat: Double, lon: Double)\n\nval deliveryPoint: Option[Location] = Some(Location(51.5, -0.12))\nval startPoint: Option[Location] = None\nval target = deliveryPoint.getOrElse(Location(0, 0))\nval start = startPoint.getOrElse(Location(0, 0))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_706","timestamp":1745439298785,"code":"case class BatteryStatus(level: Int)\n\ndef checkBattery(status: Option[BatteryStatus]): String = status match {\n  case Some(BatteryStatus(l)) if l > 20 => \"Sufficient\"\n  case Some(_) => \"Low battery\"\n  case None => \"No data\"\n}\nval result = checkBattery(Some(BatteryStatus(25)))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_707","timestamp":1745439298785,"code":"case class Waypoint(x: Double, y: Double, z: Double)\nval maybeWaypoint: Option[Waypoint] = None\nval safeWaypoint = maybeWaypoint.getOrElse(Waypoint(0,0,0))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_708","timestamp":1745439298785,"code":"import scala.util.Try\ncase class DroneRoute(path: List[String])\n\ndef parseRoute(input: String): Try[DroneRoute] = Try {\n  DroneRoute(input.split(\",\").toList)\n}\nval tryRoute = parseRoute(\"A,B,C\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_709","timestamp":1745439298785,"code":"case class Package(weight: Double, destination: Location)\nval maybePackage: Option[Package] = Some(Package(2.1, Location(40, -74)))\nval destLat: Option[Double] = maybePackage.map(_.destination.lat)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_710","timestamp":1745439298785,"code":"case class Drone(id: String, battery: Int)\nval drones: List[Drone] = List(Drone(\"A1\", 80), Drone(\"B2\", 15))\nval active = drones.filter(_.battery > 20)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_711","timestamp":1745439298785,"code":"import scala.util.Try\ncase class Wind(speed: Double)\n\ndef safeSpeed(w: Wind): Either[String, Wind] = {\n  if (w.speed < 40) Right(w)\n  else Left(\"Too windy for drone delivery\")\n}\nval windResult = safeSpeed(Wind(50))","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_712","timestamp":1745439298785,"code":"case class Obstacle(position: Location, radius: Double)\nval obstacles: List[Obstacle] = List(Obstacle(Location(1,2), 3))\nval obstacleCount = obstacles.size","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_713","timestamp":1745439298785,"code":"case class Path(nodes: List[Location])\nval paths: List[Path] = List(Path(List(Location(0,0), Location(1,1))))\ndef totalDistance(path: Path): Double = path.nodes.sliding(2).collect {\n  case List(a, b) => math.hypot(a.lat-b.lat, a.lon-b.lon)\n}.sum\nval dist = totalDistance(paths.head)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_714","timestamp":1745439298785,"code":"case class Signal(strength: Int)\nval signal: Option[Signal] = Some(Signal(10))\ndef strongEnough(signal: Option[Signal]) = signal.exists(_.strength > 5)\nval ok = strongEnough(signal)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_715","timestamp":1745439298785,"code":"case class Delivery(id: String, delivered: Boolean)\ndef maybeUndelivered(deliveries: List[Delivery]): Option[Delivery] =\n  deliveries.find(!_.delivered)\nval deliveries = List(Delivery(\"x\", true), Delivery(\"y\", false))\nval next = maybeUndelivered(deliveries)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_716","timestamp":1745439298785,"code":"import scala.util.Try\ncase class FlightPlan(steps: List[Location])\ndef safePlan(input: String): Try[FlightPlan] = Try {\n  val coords = input.split(\" \").toList.map(_.split(\",\")).map{\n    case Array(x, y) => Location(x.toDouble, y.toDouble)\n  }\n  FlightPlan(coords)\n}\nval planTry = safePlan(\"50.1,20.5 51.2,21.5\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_717","timestamp":1745439298785,"code":"case class Drone(id: String)\ndef assignDrone(available: List[Drone]): Option[Drone] =\n  available.headOption\nval droneOption = assignDrone(List())","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_718","timestamp":1745439298785,"code":"import scala.util.Try\ncase class Height(meters: Double)\ndef parseHeight(s: String): Either[String, Height] =\n  Try(s.toDouble).toEither.left.map(_ => \"Invalid format\").map(Height)\nval h = parseHeight(\"120.\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_719","timestamp":1745439298785,"code":"case class DeliveryRoute(routeId: String, stops: List[Location])\nval maybeRoute: Option[DeliveryRoute] = None\ndef getStops(route: Option[DeliveryRoute]) = route.map(_.stops).getOrElse(Nil)\nval stops = getStops(maybeRoute)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_720","timestamp":1745439298785,"code":"case class DronePath(points: List[Location])\ndef mergePaths(a: Option[DronePath], b: Option[DronePath]): Option[DronePath] =\n  for {\n    ap <- a\n    bp <- b\n  } yield DronePath(ap.points ++ bp.points)\nval merged = mergePaths(Some(DronePath(List(Location(0,0)))), None)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_721","timestamp":1745439298785,"code":"case class WeatherReport(windSpeed: Double, rain: Boolean)\nval maybeWeather: Option[WeatherReport] = Some(WeatherReport(10, false))\nval canFly = maybeWeather.exists(w => w.windSpeed < 30 && !w.rain)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_722","timestamp":1745439298785,"code":"import scala.util.Try\ndef safeInt(s: String): Either[String, Int] =\n  Try(s.toInt).toEither.left.map(_ => s\"Not a number: $s\")\nval parsedBattery = safeInt(\"93\")","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_723","timestamp":1745439298785,"code":"case class Zone(id: String, capacity: Int)\nval zones: List[Zone] = List(Zone(\"A\", 10), Zone(\"B\", 0))\nval availableId: Option[String] = zones.find(_.capacity > 0).map(_.id)","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_724","timestamp":1745439298785,"code":"case class Plan(status: String)\nval errorOrPlan: Either[String, Plan] = Right(Plan(\"Active\"))\nval status = errorOrPlan match {\n  case Right(p) => p.status\n  case Left(msg) => msg\n}","category":"idiomatic","topicUsed":"Drone delivery path optimization"}
{"id":"idiomatic_725","timestamp":1745439327829,"code":"case class ClaimId(value: String)\ncase class PolicyNumber(value: String)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_726","timestamp":1745439327829,"code":"case class ClaimSubmission(policyNumber: PolicyNumber, claimantName: String, amount: BigDecimal)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_727","timestamp":1745439327829,"code":"def parseAmount(s: String): Either[String, BigDecimal] =\n  Either.catchOnly[NumberFormatException](BigDecimal(s)).left.map(_ => s\"Invalid amount: $s\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_728","timestamp":1745439327829,"code":"def findClaimById(id: ClaimId, claims: List[ClaimSubmission]): Option[ClaimSubmission] =\n  claims.find(_.policyNumber.value == id.value)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_729","timestamp":1745439327829,"code":"def getPolicyHolderEmail(maybeEmail: Option[String]): String =\n  maybeEmail.getOrElse(\"unknown@invalid.com\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_730","timestamp":1745439327829,"code":"def validateClaimAmount(amount: BigDecimal): Either[String, BigDecimal] =\n  if (amount > 0) Right(amount) else Left(\"Amount must be positive\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_731","timestamp":1745439327829,"code":"case class Address(line1: String, city: String, state: String, zip: String)\ncase class Claimant(name: String, address: Option[Address])","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_732","timestamp":1745439327829,"code":"def getClaimantCity(claimant: Claimant): Option[String] =\n  claimant.address.map(_.city)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_733","timestamp":1745439327829,"code":"import scala.util.Try\ndef submitClaim(claim: ClaimSubmission): Try[String] =\n  Try(\"CLAIM_SUBMITTED\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_734","timestamp":1745439327829,"code":"def parsePolicyNumber(s: String): Option[PolicyNumber] =\n  if (s.matches(\"[A-Z]{3}\\d{6}\")) Some(PolicyNumber(s)) else None","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_735","timestamp":1745439327829,"code":"case class ClaimDocument(documentId: String, content: Array[Byte])\ndef uploadDocument(doc: ClaimDocument): Either[String, String] =\n  if (doc.content.nonEmpty) Right(doc.documentId) else Left(\"Empty document\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_736","timestamp":1745439327829,"code":"case class ClaimReviewResult(claim: ClaimSubmission, approved: Boolean, notes: Option[String])","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_737","timestamp":1745439327829,"code":"def getNotesOrDefault(result: ClaimReviewResult): String =\n  result.notes.getOrElse(\"No additional notes\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_738","timestamp":1745439327829,"code":"def safeClaimantName(claim: ClaimSubmission): Option[String] =\n  Option(claim.claimantName).filter(_.nonEmpty)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_739","timestamp":1745439327829,"code":"def evalClaim(claim: Option[ClaimSubmission]): String = claim match {\n  case Some(cs) => s\"Processing claim for ${cs.claimantName}\"\n  case None     => \"No claim to process\"\n}","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_740","timestamp":1745439327829,"code":"def combineNotes(existing: Option[String], newNote: Option[String]): Option[String] =\n  (existing, newNote) match {\n    case (Some(a), Some(b)) => Some(s\"$a; $b\")\n    case (Some(a), None)    => Some(a)\n    case (None, Some(b))    => Some(b)\n    case (None, None)       => None\n  }","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_741","timestamp":1745439327829,"code":"import scala.util.Try\ndef safeParseClaim(json: String): Try[ClaimSubmission] = Try(??? : ClaimSubmission)","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_742","timestamp":1745439327829,"code":"case class BankDetails(accountNumber: String, sortCode: String)\ndef payoutDetails(claim: ClaimSubmission, bank: Option[BankDetails]): Either[String, String] =\n  bank match {\n    case Some(bd) => Right(s\"Paid to ${bd.accountNumber}\")\n    case None     => Left(\"Missing bank details\")\n  }","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_743","timestamp":1745439327829,"code":"def enrichEmail(claimant: Claimant): String =\n  claimant.address.map(a => s\"${claimant.name}@${a.city.toLowerCase}.com\").getOrElse(s\"${claimant.name}@example.com\")","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_744","timestamp":1745439327829,"code":"def parseDocumentId(in: String): Option[String] =\n  if (in.nonEmpty) Some(in.trim) else None","category":"idiomatic","topicUsed":"Insurance claim submission portal"}
{"id":"idiomatic_745","timestamp":1745439353174,"code":"case class Student(id: String, name: String, gpa: Option[Double])\nval alice = Student(\"s101\", \"Alice\", Some(3.7))\nval bob = Student(\"s102\", \"Bob\", None)\nalice.gpa.map(g => s\"GPA: $g\").getOrElse(\"GPA not available\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_746","timestamp":1745439353174,"code":"case class CourseScore(courseId: String, score: Option[Double])\nval data = List(\n  CourseScore(\"math\", Some(92.0)),\n  CourseScore(\"history\", None)\n)\ndata.collect { case CourseScore(cid, Some(sc)) => (cid, sc) }","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_747","timestamp":1745439353174,"code":"import scala.util.Try\n\ndef parseScore(str: String): Try[Double] = Try(str.toDouble)\nparseScore(\"85.6\").getOrElse(0.0)\nparseScore(\"N/A\").recover { case _ => 0.0 }.get","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_748","timestamp":1745439353174,"code":"case class Attendance(studentId: String, attended: Boolean)\nval logs = List(\n  Attendance(\"s101\", true),\n  Attendance(\"s102\", false)\n)\nlogs.count(_.attended)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_749","timestamp":1745439353174,"code":"def passOrFail(score: Option[Double]): String = score match {\n  case Some(s) if s >= 60.0 => \"Pass\"\n  case Some(_)              => \"Fail\"\n  case None                 => \"No Score\"\n}\npassOrFail(Some(75.0))\npassOrFail(None)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_750","timestamp":1745439353174,"code":"case class Assignment(id: String, dueDate: Option[String])\nval a1 = Assignment(\"a1\", Some(\"2024-01-10\"))\nval a2 = Assignment(\"a2\", None)\na2.dueDate.getOrElse(\"No due date set\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_751","timestamp":1745439353174,"code":"import scala.util.Try\ncase class QuizSubmission(score: Double)\ndef safeAverage(scores: List[String]): Try[Double] = Try {\n  scores.map(_.toDouble).sum / scores.length\n}","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_752","timestamp":1745439353174,"code":"case class Feedback(studentId: String, comment: Option[String])\nval f = Feedback(\"s100\", None)\nf.comment.getOrElse(\"No feedback provided\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_753","timestamp":1745439353174,"code":"case class Module(id: String, title: String, duration: Option[Int])\nval m = Module(\"mod1\", \"Algebra\", Some(45))\nm.duration.map(_ * 2)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_754","timestamp":1745439353174,"code":"def parseAttendance(attendance: String): Either[String, Boolean] = attendance match {\n  case \"Y\" => Right(true)\n  case \"N\" => Right(false)\n  case _   => Left(\"Unrecognized attendance value\")\n}\nparseAttendance(\"Y\")\nparseAttendance(\"maybe\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_755","timestamp":1745439353174,"code":"case class Enrollment(studentId: String, courseId: String, active: Boolean)\nval enrollments = List(\n  Enrollment(\"s1\", \"phy\", true),\n  Enrollment(\"s2\", \"chem\", false)\n)\nenrollments.find(_.active).map(_.courseId)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_756","timestamp":1745439353174,"code":"case class Grade(studentId: String, grade: Option[String])\nval g = Grade(\"s10\", Some(\"A\"))\ng.grade.fold(\"No grade assigned\")(gr => s\"Grade: $gr\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_757","timestamp":1745439353174,"code":"import scala.util.Try\ncase class ReadingTime(minutes: Int)\ndef toReadingTime(str: String): Either[String, ReadingTime] =\n  Try(str.toInt).toEither.left.map(_ => s\"Invalid time: $str\").map(ReadingTime)\ntoReadingTime(\"30\")\ntoReadingTime(\"abc\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_758","timestamp":1745439353174,"code":"case class LearningGoal(goal: String, achieved: Boolean)\nval goals = List(\n  LearningGoal(\"Algebra\", true),\n  LearningGoal(\"Trigonometry\", false)\n)\ngoals.filter(_.achieved).map(_.goal)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_759","timestamp":1745439353174,"code":"case class Instructor(id: String, email: Option[String])\nval inst = Instructor(\"i101\", None)\ninst.email match {\n  case Some(e) => s\"Email: $e\"\n  case None    => \"No email provided\"\n}","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_760","timestamp":1745439353174,"code":"def safeDivide(a: Int, b: Int): Option[Double] = if (b != 0) Some(a.toDouble / b) else None\nsafeDivide(100, 10)\nsafeDivide(5, 0).getOrElse(Double.NaN)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_761","timestamp":1745439353174,"code":"case class Progress(studentId: String, percent: Option[Double])\ndef progressReport(progress: Progress): String =\n  progress.percent.map(p => s\"Progress: $p%\").getOrElse(\"No data\")\nprogressReport(Progress(\"s10\", Some(72.0)))","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_762","timestamp":1745439353174,"code":"import scala.util.Try\ncase class Event(timestamp: String, eventType: String)\ndef parseEvent(ts: String, typ: String): Try[Event] = Try(Event(ts, typ))\nparseEvent(\"2024-06-15T10:00\", \"login\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_763","timestamp":1745439353174,"code":"case class Course(id: String, students: List[String])\ndef findStudent(course: Course, sid: String): Option[String] =\n  course.students.find(_ == sid)\nfindStudent(Course(\"c101\", List(\"s1\",\"s2\",\"s3\")), \"s2\")","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_764","timestamp":1745439353174,"code":"case class SessionLength(studentId: String, minutes: Option[Int])\nval s = SessionLength(\"s201\", None)\ns.minutes.fold(0)(_ * 2)","category":"idiomatic","topicUsed":"Education learning analytics"}
{"id":"idiomatic_765","timestamp":1745439364421,"code":"case class User(id: Int, name: String, preferences: Set[String])\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_766","timestamp":1745439364421,"code":"case class Recipe(id: Int, title: String, ingredients: List[String], vegetarian: Boolean)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_767","timestamp":1745439364421,"code":"def findRecipeById(id: Int, recipes: List[Recipe]): Option[Recipe] = recipes.find(_.id == id)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_768","timestamp":1745439364421,"code":"def parsePreference(input: String): Option[String] = if (input.nonEmpty) Some(input.trim.toLowerCase) else None\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_769","timestamp":1745439364421,"code":"def recommendVegetarian(user: User, recipes: List[Recipe]): List[Recipe] =\n  if (user.preferences.contains(\"vegetarian\")) recipes.filter(_.vegetarian) else recipes\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_770","timestamp":1745439364421,"code":"def ingredientCount(recipe: Recipe): Int = recipe.ingredients.length\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_771","timestamp":1745439364421,"code":"import scala.util.Try\ndef parseRecipeId(s: String): Try[Int] = Try(s.toInt)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_772","timestamp":1745439364421,"code":"def getMainIngredient(recipe: Recipe): Option[String] = recipe.ingredients.headOption\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_773","timestamp":1745439364421,"code":"def recommendByIngredient(user: User, recipes: List[Recipe]): List[Recipe] =\n  user.preferences.headOption\n    .map(pref => recipes.filter(_.ingredients.exists(_.contains(pref))))\n    .getOrElse(recipes)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_774","timestamp":1745439364421,"code":"def adjustServingSize(ingredients: List[String], factor: Double): Either[String, List[String]] =\n  if (factor <= 0) Left(\"Serving factor must be positive.\") else Right(ingredients)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_775","timestamp":1745439364421,"code":"case class RatedRecipe(recipe: Recipe, rating: Option[Double])\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_776","timestamp":1745439364421,"code":"def topRated(recipes: List[RatedRecipe]): Option[RatedRecipe] =\n  recipes.sortBy(-_.rating.getOrElse(0.0)).headOption\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_777","timestamp":1745439364421,"code":"def getUserFavorite(user: User, rated: List[RatedRecipe]): Option[RatedRecipe] =\n  rated.filter(rr => user.preferences.exists(p => rr.recipe.ingredients.exists(_.contains(p)))).headOption\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_778","timestamp":1745439364421,"code":"def safeTitle(recipe: Option[Recipe]): String =\n  recipe.map(_.title).getOrElse(\"No recipe found\")\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_779","timestamp":1745439364421,"code":"import scala.util.Try\ndef caloriesPerServing(recipeData: String): Try[Int] = Try(recipeData.split(\",\")(2).toInt)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_780","timestamp":1745439364421,"code":"case class Recommendation(user: User, recipes: List[Recipe])\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_781","timestamp":1745439364421,"code":"def recommendGlutenFree(recipes: List[Recipe]): List[Recipe] =\n  recipes.filterNot(_.ingredients.exists(_.toLowerCase.contains(\"wheat\")))\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_782","timestamp":1745439364421,"code":"def suggestedRecipes(optRecipes: Option[List[Recipe]]): List[Recipe] =\n  optRecipes.getOrElse(List.empty)\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_783","timestamp":1745439364421,"code":"def selectForAllergy(user: User, recipes: List[Recipe], allergy: String): List[Recipe] =\n  recipes.filterNot(_.ingredients.exists(_.toLowerCase.contains(allergy.toLowerCase)))\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_784","timestamp":1745439364422,"code":"def totalIngredients(recipes: List[Recipe]): Int = recipes.map(_.ingredients.size).sum\n","category":"idiomatic","topicUsed":"Personalized recipe recommender"}
{"id":"idiomatic_785","timestamp":1745439382342,"code":"case class Donor(id: Long, name: String, email: Option[String])\nval donor = Donor(1, \"Alice\", None)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_786","timestamp":1745439382342,"code":"def parseDonationAmount(str: String): Either[String, BigDecimal] =\n  try {\n    Right(BigDecimal(str))\n  } catch {\n    case _: NumberFormatException => Left(\"Invalid donation amount\")\n  }\nparseDonationAmount(\"20.50\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_787","timestamp":1745439382342,"code":"case class Charity(name: String, description: Option[String])\nval c = Charity(\"SaveTheForest\", Some(\"Providing trees for rural areas\"))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_788","timestamp":1745439382342,"code":"val optionalNote: Option[String] = Some(\"Keep up the great work!\")\nval displayNote = optionalNote.getOrElse(\"No note provided\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_789","timestamp":1745439382342,"code":"case class Donation(id: Long, donor: Donor, charity: Charity, amount: BigDecimal)\nval d = Donation(1, Donor(1, \"Alice\", None), Charity(\"KidsFund\", None), BigDecimal(50))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_790","timestamp":1745439382342,"code":"def findDonationById(id: Long): Option[Donation] = None\nfindDonationById(2).map(_.amount).getOrElse(BigDecimal(0))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_791","timestamp":1745439382342,"code":"def sendReceipt(email: Option[String]): Either[String, String] = \n  email match {\n    case Some(addr) => Right(s\"Receipt sent to $addr\")\n    case None => Left(\"No email address provided\")\n  }\nsendReceipt(Some(\"user@site.org\"))","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_792","timestamp":1745439382342,"code":"val donorList: List[Donor] = List(Donor(1, \"John\", Some(\"john@site.com\")), Donor(2, \"Sue\", None))\ndonorList.collectFirst { case d if d.email.isDefined => d.email.get }","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_793","timestamp":1745439382342,"code":"case class DonationSummary(total: BigDecimal, donorCount: Int)\ndef summarize(ds: List[Donation]): DonationSummary = \n  DonationSummary(ds.map(_.amount).sum, ds.map(_.donor.id).distinct.size)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_794","timestamp":1745439382342,"code":"def safeDivideDonation(amount: BigDecimal, parts: Int): Option[BigDecimal] = \n  if (parts > 0) Some(amount / parts) else None\nsafeDivideDonation(BigDecimal(100), 4)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_795","timestamp":1745439382342,"code":"def getCharityDescription(c: Charity): String = c.description.getOrElse(\"No description available\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_796","timestamp":1745439382342,"code":"import scala.util.Try\ndef parseDonorId(str: String): Try[Long] = Try(str.toLong)\nparseDonorId(\"123\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_797","timestamp":1745439382342,"code":"def lookupDonorByEmail(email: String, donors: List[Donor]): Option[Donor] = \n  donors.find(_.email.contains(email))\nlookupDonorByEmail(\"john@site.com\", donorList)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_798","timestamp":1745439382342,"code":"def processDonation(amount: BigDecimal): Either[String, String] =\n  if (amount > 0) Right(\"Donation processed\") else Left(\"Invalid amount\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_799","timestamp":1745439382342,"code":"case class Campaign(name: String, target: BigDecimal, raised: BigDecimal)\ndef percentageRaised(c: Campaign): Option[Double] =\n  if (c.target != 0) Some((c.raised / c.target * 100).toDouble) else None","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_800","timestamp":1745439382342,"code":"case class Message(text: String, recipientEmail: Option[String])\ndef send(msg: Message): Option[String] =\n  msg.recipientEmail.map(email => s\"Sent to $email: ${msg.text}\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_801","timestamp":1745439382342,"code":"def anonymousDonorName(name: Option[String]): String =\n  name.getOrElse(\"Anonymous\")","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_802","timestamp":1745439382342,"code":"def updateCharityTarget(c: Charity, newTarget: Option[BigDecimal]): Either[String, Charity] =\n  newTarget match {\n    case Some(amount) if amount > 0 => Right(c)\n    case _ => Left(\"Invalid target amount\")\n  }","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_803","timestamp":1745439382342,"code":"val maybeAmount: Option[String] = Some(\"50\")\nval parsed: Option[BigDecimal] = maybeAmount.flatMap(a => Try(BigDecimal(a)).toOption)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_804","timestamp":1745439382342,"code":"def firstDonorWithEmail(ds: List[Donor]): Option[Donor] =\n  ds.find(_.email.isDefined)","category":"idiomatic","topicUsed":"Charity donation platform"}
{"id":"idiomatic_805","timestamp":1745439401697,"code":"case class Team(name: String)\ncase class Score(home: Int, away: Int)\ncase class Match(homeTeam: Team, awayTeam: Team, score: Score)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_806","timestamp":1745439401697,"code":"case class LiveScore(matchId: String, score: Option[Score])\ndef printCurrentScore(live: LiveScore): Unit = live.score match {\n  case Some(s) => println(s\"Score: ${s.home} - ${s.away}\")\n  case None => println(\"Score not available yet\")\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_807","timestamp":1745439401697,"code":"def parseScore(input: String): Option[Score] = {\n  input.split(\"-\").toList.map(_.trim).flatMap(s => scala.util.Try(s.toInt).toOption) match {\n    case h :: a :: Nil => Some(Score(h, a))\n    case _ => None\n  }\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_808","timestamp":1745439401697,"code":"import scala.util.{Try, Success, Failure}\ndef fetchLiveMatch(id: String): Try[LiveScore] = Try {\n  if (id.nonEmpty) LiveScore(id, Some(Score(1,2)))\n  else throw new Exception(\"Invalid match id\")\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_809","timestamp":1745439401697,"code":"case class Event(minute: Int, description: String)\ncase class LiveFeed(events: List[Event])\ndef latestEvent(feed: LiveFeed): Option[Event] = feed.events.lastOption","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_810","timestamp":1745439401697,"code":"def updateScore(current: Option[Score], scoredByHome: Boolean): Option[Score] = current.map {\n  case Score(h, a) if scoredByHome => Score(h+1, a)\n  case Score(h, a) => Score(h, a+1)\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_811","timestamp":1745439401697,"code":"case class ScoreUpdate(time: String, newScore: Score)\ndef prettyPrintUpdate(update: Option[ScoreUpdate]): String = update match {\n  case Some(u) => s\"At ${u.time}, new score: ${u.newScore.home}-${u.newScore.away}\"\n  case None => \"No updates yet.\"\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_812","timestamp":1745439401697,"code":"case class MatchStatus(live: Boolean, paused: Boolean)\ndef statusString(status: MatchStatus): String = status match {\n  case MatchStatus(true, false) => \"Live\"\n  case MatchStatus(false, true) => \"Paused\"\n  case MatchStatus(false, false) => \"Finished\"\n  case _ => \"Unknown\"\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_813","timestamp":1745439401697,"code":"case class MatchDetails(id: String, home: Team, away: Team, score: Option[Score])\ndef getAwayTeamName(details: MatchDetails): String = details.away.name","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_814","timestamp":1745439401697,"code":"def safeParseInt(str: String): Either[String, Int] =\n  scala.util.Try(str.toInt).toEither.left.map(_ => s\"Not a number: $str\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_815","timestamp":1745439401697,"code":"case class GoalScorer(name: String, minute: Int)\ndef getScorerAtMinute(list: List[GoalScorer], min: Int): Option[GoalScorer] =\n  list.find(_.minute == min)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_816","timestamp":1745439401697,"code":"def matchSummary(details: MatchDetails): String = details.score match {\n  case Some(s) => s\"${details.home.name} ${s.home}-${s.away} ${details.away.name}\"\n  case None => \"Score not available\"\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_817","timestamp":1745439401697,"code":"import scala.util.Try\ndef parseScoreUpdate(line: String): Try[ScoreUpdate] = Try {\n  val Array(t, s) = line.split(\" \")\n  val Array(h, a) = s.split(\"-\").map(_.toInt)\n  ScoreUpdate(t, Score(h, a))\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_818","timestamp":1745439401697,"code":"case class LiveMatch(matchId: String, events: List[Event], latestScore: Option[Score])\ndef addEvent(live: LiveMatch, event: Event): LiveMatch = live.copy(events = live.events :+ event)","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_819","timestamp":1745439401697,"code":"def incrementHome(score: Option[Score]): Option[Score] = score.map(s => s.copy(home = s.home + 1))","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_820","timestamp":1745439401697,"code":"def safeGetScore(live: LiveScore): Either[String, Score] = live.score.toRight(\"Score not available\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_821","timestamp":1745439401697,"code":"import scala.util.{Try, Success}\ndef tryGetLatestEvent(feed: LiveFeed): Try[Event] = Try {\n  feed.events.last\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_822","timestamp":1745439401697,"code":"case class Notification(receiver: String, content: String)\ndef sendNotification(notification: Notification): Either[String, Unit] =\n  if (notification.receiver.nonEmpty) Right(println(notification.content)) else Left(\"No receiver specified\")","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_823","timestamp":1745439401697,"code":"case class Player(id: String, name: String)\ncase class Substitution(out: Player, in: Player, minute: Int)\ndef notifySub(sub: Option[Substitution]): String = sub match {\n  case Some(s) => s\"${s.in.name} replaced ${s.out.name} at ${s.minute}'\"\n  case None => \"No substitutions\"\n}","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_824","timestamp":1745439401697,"code":"def parseEvent(str: String): Option[Event] = for {\n  parts <- Option(str.split(\",\")).filter(_.length == 2)\n  min <- scala.util.Try(parts(0).trim.toInt).toOption\n  desc = parts(1).trim\n} yield Event(min, desc)\n","category":"idiomatic","topicUsed":"Sports score live updating"}
{"id":"idiomatic_825","timestamp":1745439414462,"code":"case class Car(id: String, make: String, model: String)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_826","timestamp":1745439414462,"code":"case class Rental(customerId: String, carId: String)\ndef customerForRental(rental: Rental, customers: Map[String, String]): Option[String] =\n  customers.get(rental.customerId)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_827","timestamp":1745439414462,"code":"case class Fleet(cars: List[Car])\ndef findCarById(fleet: Fleet, id: String): Option[Car] =\n  fleet.cars.find(_.id == id)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_828","timestamp":1745439414462,"code":"def parseYear(input: String): Either[String, Int] =\n  try Right(input.toInt)\n  catch { case _: NumberFormatException => Left(\"Invalid year\") }","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_829","timestamp":1745439414462,"code":"case class MaintenanceRecord(carId: String, date: String)\ndef recentMaintenance(records: List[MaintenanceRecord], carId: String): Option[MaintenanceRecord] =\n  records.filter(_.carId == carId).sortBy(_.date).lastOption","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_830","timestamp":1745439414462,"code":"def daysAvailable(car: Car, rentals: List[Rental]): Int =\n  if (rentals.exists(_.carId == car.id)) 0 else 7","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_831","timestamp":1745439414462,"code":"def getCarOrDefault(fleet: Fleet, id: String): Car =\n  findCarById(fleet, id).getOrElse(Car(\"unknown\", \"Unknown\", \"Unknown\"))","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_832","timestamp":1745439414462,"code":"def parseCar(data: String): Option[Car] = {\n  val parts = data.split(\",\")\n  if (parts.length == 3) Some(Car(parts(0), parts(1), parts(2))) else None\n}","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_833","timestamp":1745439414462,"code":"case class Reservation(customerId: String, carId: String, status: String)\ndef updateStatus(reservation: Reservation, newStatus: Option[String]): Reservation =\n  reservation.copy(status = newStatus.getOrElse(reservation.status))","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_834","timestamp":1745439414462,"code":"def safeHead[T](xs: List[T]): Option[T] = xs.headOption","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_835","timestamp":1745439414462,"code":"case class Location(city: String, state: String)\ncase class Station(name: String, location: Option[Location])","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_836","timestamp":1745439414462,"code":"case class Price(amount: Double)\ndef applyDiscount(price: Price, percent: Option[Double]): Price =\n  percent.fold(price)(p => Price(price.amount * (1 - p / 100)))","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_837","timestamp":1745439414462,"code":"import scala.util.Try\ndef safeDivide(a: Double, b: Double): Try[Double] = Try(a / b)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_838","timestamp":1745439414462,"code":"def carStatus(carId: String, rentedCars: Set[String]): String =\n  if (rentedCars.contains(carId)) \"Rented\" else \"Available\"","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_839","timestamp":1745439414462,"code":"case class Insurance(policyNum: String, valid: Boolean)\ndef hasValidInsurance(optIns: Option[Insurance]): Boolean =\n  optIns.exists(_.valid)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_840","timestamp":1745439414462,"code":"case class Customer(id: String, name: String)\ndef findCustomer(name: String, customers: List[Customer]): Option[Customer] =\n  customers.find(_.name == name)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_841","timestamp":1745439414462,"code":"def tryParseDouble(s: String): Either[String, Double] =\n  Try(s.toDouble).toEither.left.map(_ => s\"Bad double: $s\")","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_842","timestamp":1745439414462,"code":"case class FuelLog(carId: String, liters: Double)\ndef averageFuelUsed(logs: List[FuelLog], carId: String): Option[Double] = {\n  val carLogs = logs.filter(_.carId == carId)\n  if (carLogs.isEmpty) None else Some(carLogs.map(_.liters).sum / carLogs.size)\n}","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_843","timestamp":1745439414462,"code":"def isCarRented(car: Car, rentals: List[Rental]): Boolean =\n  rentals.exists(_.carId == car.id)","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"idiomatic_844","timestamp":1745439414462,"code":"case class Driver(id: String, license: Option[String])\ndef hasLicense(driver: Driver): Boolean =\n  driver.license.nonEmpty","category":"idiomatic","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_1","timestamp":1745437117763,"code":"class User(val id: Int, val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_2","timestamp":1745437117763,"code":"class Product(val sku: String, val price: BigDecimal)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_3","timestamp":1745437117763,"code":"class Address(val street: String, val city: String, val zip: String, val country: String)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_4","timestamp":1745437117763,"code":"class Order(val orderId: String, val userId: Int, val items: List[String], val total: Double)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_5","timestamp":1745437117763,"code":"class Payment(val paymentId: String, val amount: Double, val method: String)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_6","timestamp":1745437117763,"code":"class CartItem(val productId: String, val quantity: Int)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_7","timestamp":1745437117763,"code":"class PromoCode(val code: String, val discountPercent: Int)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_8","timestamp":1745437117763,"code":"class ShippingInfo(val carrier: String, val trackingNumber: String)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_9","timestamp":1745437117763,"code":"class CheckoutSummary(val userId: Int, val itemCount: Int, val subtotal: Double, val tax: Double, val shipping: Double)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_10","timestamp":1745437117763,"code":"class LineItem(val name: String, val price: BigDecimal, val quantity: Int)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_11","timestamp":1745437117763,"code":"class CreditCard(val number: String, val expiry: String, val cvv: String)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_12","timestamp":1745437117763,"code":"class TaxDetail(val taxType: String, val amount: Double)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_13","timestamp":1745437117763,"code":"class InventoryStatus(val productId: String, val available: Boolean)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_14","timestamp":1745437117763,"code":"class Currency(val code: String, val symbol: String)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_15","timestamp":1745437117763,"code":"class Refund(val refundId: String, val orderId: String, val amount: Double)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_16","timestamp":1745437117763,"code":"class GiftCard(val code: String, val balance: BigDecimal)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_17","timestamp":1745437117763,"code":"class Session(val sessionId: String, val userId: Option[Int], val expiresAt: Long)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_18","timestamp":1745437117763,"code":"class Cart(val userId: Int, val items: List[CartItem])","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_19","timestamp":1745437117763,"code":"class ShippingOption(val name: String, val cost: Double, val estimatedDays: Int)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_20","timestamp":1745437117763,"code":"class TransactionRecord(val transactionId: String, val userId: Int, val amount: Double, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"E-commerce checkout"}
{"id":"regular_class_for_data_21","timestamp":1745437122985,"code":"class User(val id: Int, val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_22","timestamp":1745437122985,"code":"class BankAccount(val number: String, val balance: Double)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_23","timestamp":1745437122985,"code":"class Transaction(val txId: String, val fromAccount: String, val toAccount: String, val amount: Double, val date: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_24","timestamp":1745437122985,"code":"class Card(val cardNumber: String, val cardType: String, val expiry: String, val cvv: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_25","timestamp":1745437122985,"code":"class LoginSession(val sessionId: String, val userId: Int, val created: Long)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_26","timestamp":1745437122985,"code":"class Notification(val title: String, val message: String, val timestamp: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_27","timestamp":1745437122985,"code":"class MobileDevice(val deviceId: String, val os: String, val appVersion: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_28","timestamp":1745437122985,"code":"class Recipient(val name: String, val accountNumber: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_29","timestamp":1745437122985,"code":"class SupportTicket(val ticketId: String, val userId: Int, val issue: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_30","timestamp":1745437122985,"code":"class Currency(val code: String, val symbol: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_31","timestamp":1745437122985,"code":"class PaymentRequest(val payee: String, val amount: Double, val description: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_32","timestamp":1745437122985,"code":"class Address(val street: String, val city: String, val zip: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_33","timestamp":1745437122985,"code":"class Beneficiary(val name: String, val account: String, val bank: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_34","timestamp":1745437122985,"code":"class StatementPeriod(val start: String, val end: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_35","timestamp":1745437122985,"code":"class Location(val lat: Double, val lon: Double)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_36","timestamp":1745437122985,"code":"class OTP(val code: String, val expiration: Long)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_37","timestamp":1745437122985,"code":"class ContactInfo(val phone: String, val email: String)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_38","timestamp":1745437122985,"code":"class Fee(val feeType: String, val amount: Double)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_39","timestamp":1745437122985,"code":"class AccountSummary(val available: Double, val pending: Double)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_40","timestamp":1745437122985,"code":"class Alert(val alertId: String, val userId: Int, val content: String, val seen: Boolean)","category":"regular_class_for_data","topicUsed":"Mobile banking app"}
{"id":"regular_class_for_data_41","timestamp":1745437128686,"code":"class Patient(val id: Int, val name: String, val dob: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_42","timestamp":1745437128686,"code":"class Doctor(val id: Int, val name: String, val specialty: String, val licenseNumber: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_43","timestamp":1745437128686,"code":"class Appointment(val id: Int, val patientId: Int, val doctorId: Int, val time: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_44","timestamp":1745437128686,"code":"class Slot(val date: String, val time: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_45","timestamp":1745437128686,"code":"class TimeRange(val start: String, val end: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_46","timestamp":1745437128686,"code":"class Consultation(val appointmentId: Int, val status: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_47","timestamp":1745437128686,"code":"class Message(val fromUser: Int, val toUser: Int, val content: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_48","timestamp":1745437128686,"code":"class Schedule(val doctorId: Int, val day: String, val availableSlots: List[String])","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_49","timestamp":1745437128686,"code":"class Reminder(val appointmentId: Int, val message: String, val scheduledTime: Long)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_50","timestamp":1745437128686,"code":"class Prescription(val patientId: Int, val doctorId: Int, val medication: String, val dosage: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_51","timestamp":1745437128686,"code":"class Feedback(val appointmentId: Int, val rating: Int, val comments: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_52","timestamp":1745437128686,"code":"class VideoSession(val appointmentId: Int, val meetingUrl: String, val startTime: Long)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_53","timestamp":1745437128686,"code":"class PatientProfile(val email: String, val phoneNumber: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_54","timestamp":1745437128686,"code":"class DoctorProfile(val bio: String, val experienceYears: Int)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_55","timestamp":1745437128686,"code":"class AppointmentRequest(val patientName: String, val doctorName: String, val requestedTime: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_56","timestamp":1745437128686,"code":"class CancelledAppointment(val appointmentId: Int, val reason: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_57","timestamp":1745437128686,"code":"class Insurance(val provider: String, val policyNumber: String, val patientId: Int)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_58","timestamp":1745437128686,"code":"class Address(val line1: String, val city: String, val zip: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_59","timestamp":1745437128686,"code":"class Notification(val userId: Int, val title: String, val body: String, val time: Long)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_60","timestamp":1745437128686,"code":"class Payment(val appointmentId: Int, val amount: Double, val transactionId: String)","category":"regular_class_for_data","topicUsed":"Telemedicine appointment scheduling"}
{"id":"regular_class_for_data_61","timestamp":1745437137118,"code":"class User(val id: Int, val name: String, val age: Int, val weight: Double)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_62","timestamp":1745437137118,"code":"class WorkoutSession(val sessionId: Long, val userId: Int, val durationMinutes: Int)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_63","timestamp":1745437137118,"code":"class HeartRateReading(val timestamp: Long, val bpm: Int)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_64","timestamp":1745437137118,"code":"class StepCount(val userId: Int, val date: String, val steps: Int)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_65","timestamp":1745437137118,"code":"class SleepSummary(val userId: Int, val date: String, val totalSleepMinutes: Int, val deepSleepMinutes: Int)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_66","timestamp":1745437137118,"code":"class CaloriesBurned(val activity: String, val calories: Double)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_67","timestamp":1745437137118,"code":"class DistanceCovered(val userId: Int, val kilometers: Float)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_68","timestamp":1745437137118,"code":"class Device(val deviceId: String, val model: String, val firmware: String)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_69","timestamp":1745437137118,"code":"class ActivityGoal(val userId: Int, val dailyStepGoal: Int, val dailyCalorieGoal: Int)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_70","timestamp":1745437137118,"code":"class WaterIntake(val userId: Int, val date: String, val milliliters: Int)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_71","timestamp":1745437137118,"code":"class WorkoutType(val name: String, val intensity: String, val typicalDuration: Int)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_72","timestamp":1745437137118,"code":"class Coordinate(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_73","timestamp":1745437137118,"code":"class ElevationGain(val userId: Int, val date: String, val metersGained: Double)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_74","timestamp":1745437137118,"code":"class AppUsage(val userId: Int, val activeMinutes: Int, val date: String)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_75","timestamp":1745437137118,"code":"class MoodLog(val userId: Int, val date: String, val mood: String)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_76","timestamp":1745437137118,"code":"class BloodPressure(val userId: Int, val systolic: Int, val diastolic: Int, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_77","timestamp":1745437137118,"code":"class FriendRequest(val senderId: Int, val receiverId: Int, val requestDate: String)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_78","timestamp":1745437137118,"code":"class Badge(val badgeId: Int, val userId: Int, val name: String, val awardDate: String)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_79","timestamp":1745437137118,"code":"class WeeklySummary(val userId: Int, val weekNumber: Int, val steps: Int, val caloriesBurned: Int)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_80","timestamp":1745437137118,"code":"class InactivePeriod(val userId: Int, val start: Long, val end: Long)","category":"regular_class_for_data","topicUsed":"Fitness tracker analytics"}
{"id":"regular_class_for_data_81","timestamp":1745437146230,"code":"class PricingPlan(val id: String, val name: String, val price: Double)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_82","timestamp":1745437146230,"code":"class PlanFeature(val name: String, val description: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_83","timestamp":1745437146230,"code":"class UserAccount(val userId: String, val email: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_84","timestamp":1745437146230,"code":"class Subscription(val userId: String, val planId: String, val startDate: java.time.LocalDate, val endDate: Option[java.time.LocalDate])","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_85","timestamp":1745437146230,"code":"class UpgradeOption(val fromPlanId: String, val toPlanId: String, val cost: Double)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_86","timestamp":1745437146230,"code":"class PaymentRecord(val transactionId: String, val userId: String, val amount: Double)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_87","timestamp":1745437146230,"code":"class Discount(val code: String, val percentage: Int)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_88","timestamp":1745437146230,"code":"class PlanLimit(val planId: String, val maxSites: Int)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_89","timestamp":1745437146230,"code":"class PlanStatus(val planId: String, val isActive: Boolean)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_90","timestamp":1745437146230,"code":"class PlanTag(val planId: String, val tag: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_91","timestamp":1745437146230,"code":"class Money(val amount: Double, val currency: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_92","timestamp":1745437146230,"code":"class FeatureAccess(val featureName: String, val userId: String, val enabled: Boolean)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_93","timestamp":1745437146230,"code":"class TrialPeriod(val days: Int)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_94","timestamp":1745437146230,"code":"class PlanHistory(val userId: String, val planId: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_95","timestamp":1745437146230,"code":"class PriceChange(val previous: Double, val current: Double)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_96","timestamp":1745437146230,"code":"class BillingInfo(val userId: String, val billingCycle: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_97","timestamp":1745437146230,"code":"class Renewal(val subscriptionId: String, val nextRenewalDate: java.time.LocalDate)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_98","timestamp":1745437146230,"code":"class Invoice(val invoiceId: String, val subscriptionId: String, val total: Double)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_99","timestamp":1745437146230,"code":"class FeatureSet(val planId: String, val features: Seq[String])","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_100","timestamp":1745437146230,"code":"class Cancellation(val userId: String, val reason: String, val cancelledAt: Long)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"regular_class_for_data_101","timestamp":1745437150350,"code":"class Light(val id: String, val isOn: Boolean)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_102","timestamp":1745437150350,"code":"class Thermostat(val name: String, val temperature: Double, val mode: String)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_103","timestamp":1745437150350,"code":"class DoorLock(val location: String, val locked: Boolean)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_104","timestamp":1745437150350,"code":"class User(val username: String, val accessLevel: Int)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_105","timestamp":1745437150350,"code":"class DeviceStatus(val deviceId: String, val status: String, val updatedAt: Long)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_106","timestamp":1745437150350,"code":"class Sensor(val sensorType: String, val value: Double)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_107","timestamp":1745437150350,"code":"class Room(val name: String, val area: Double, val devices: List[String])","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_108","timestamp":1745437150350,"code":"class Scene(val sceneName: String, val active: Boolean)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_109","timestamp":1745437150350,"code":"class SmartPlug(val plugId: String, val power: Boolean, val energyUsage: Double)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_110","timestamp":1745437150350,"code":"class Camera(val ip: String, val isRecording: Boolean, val zone: String)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_111","timestamp":1745437150350,"code":"class Command(val device: String, val action: String, val parameters: Map[String,String])","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_112","timestamp":1745437150350,"code":"class Alarm(val armed: Boolean, val mode: String, val triggered: Boolean)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_113","timestamp":1745437150350,"code":"class Switch(val name: String, val on: Boolean)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_114","timestamp":1745437150350,"code":"class HouseMember(val name: String, val phoneNumber: String)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_115","timestamp":1745437150350,"code":"class Schedule(val deviceId: String, val time: String)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_116","timestamp":1745437150350,"code":"class Notification(val recipient: String, val message: String, val sent: Boolean)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_117","timestamp":1745437150350,"code":"class FirmwareUpdate(val version: String, val scheduled: Boolean)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_118","timestamp":1745437150350,"code":"class Blinds(val id: String, val openPercentage: Int)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_119","timestamp":1745437150350,"code":"class Speaker(val id: String, val volume: Int)","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_120","timestamp":1745437150350,"code":"class DeviceLocation(val deviceId: String, val room: String, val coordinates: (Double, Double))","category":"regular_class_for_data","topicUsed":"Smart home device control"}
{"id":"regular_class_for_data_121","timestamp":1745437155782,"code":"class Driver(val id: String, val name: String, val rating: Double)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_122","timestamp":1745437155782,"code":"class RideRequest(val userId: String, val pickupLatitude: Double, val pickupLongitude: Double, val destinationLatitude: Double, val destinationLongitude: Double)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_123","timestamp":1745437155782,"code":"class Vehicle(val plate: String, val model: String, val color: String, val driverId: String)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_124","timestamp":1745437155782,"code":"class Trip(val tripId: String, val passengerId: String, val driverId: String, val fare: Double)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_125","timestamp":1745437155782,"code":"class DispatchAssignment(val rideRequestId: String, val driverId: String)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_126","timestamp":1745437155782,"code":"class Location(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_127","timestamp":1745437155782,"code":"class Route(val points: List[(Double, Double)])","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_128","timestamp":1745437155782,"code":"class Rider(val id: String, val name: String)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_129","timestamp":1745437155782,"code":"class SurgeInfo(val areaCode: String, val multiplier: Double)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_130","timestamp":1745437155782,"code":"class Payment(val paymentId: String, val tripId: String, val amount: Double, val method: String)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_131","timestamp":1745437155782,"code":"class DriverStatus(val driverId: String, val isAvailable: Boolean, val location: (Double, Double))","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_132","timestamp":1745437155782,"code":"class RideStatus(val rideId: String, val status: String)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_133","timestamp":1745437155782,"code":"class QueueItem(val position: Int, val driverId: String, val requestId: String)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_134","timestamp":1745437155782,"code":"class TimeWindow(val startEpoch: Long, val endEpoch: Long)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_135","timestamp":1745437155782,"code":"class UserRating(val userId: String, val avgRating: Double, val numRatings: Int)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_136","timestamp":1745437155782,"code":"class CancelledRide(val rideId: String, val whoCancelled: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_137","timestamp":1745437155782,"code":"class FareEstimate(val origin: (Double, Double), val destination: (Double, Double), val estimatedFare: Double)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_138","timestamp":1745437155782,"code":"class DriverStats(val driverId: String, val completedTrips: Int, val totalEarnings: Double)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_139","timestamp":1745437155782,"code":"class Promotion(val promoCode: String, val discount: Double, val validUntil: Long)","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_140","timestamp":1745437155782,"code":"class Fleet(val name: String, val vehicleIds: Seq[String])","category":"regular_class_for_data","topicUsed":"Ride-sharing dispatch"}
{"id":"regular_class_for_data_141","timestamp":1745437167097,"code":"class Passenger(val name: String, val passportNumber: String, val age: Int)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_142","timestamp":1745437167097,"code":"class Flight(val flightNumber: String, val origin: String, val destination: String, val departureTime: String, val arrivalTime: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_143","timestamp":1745437167097,"code":"class Ticket(val ticketNumber: String, val passengerName: String, val seat: String, val flightNumber: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_144","timestamp":1745437167097,"code":"class Booking(val bookingId: Long, val userId: Long, val ticketId: String, val bookingDate: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_145","timestamp":1745437167097,"code":"class User(val username: String, val email: String, val phone: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_146","timestamp":1745437167097,"code":"class Airport(val code: String, val name: String, val city: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_147","timestamp":1745437167097,"code":"class Seat(val seatNumber: String, val classType: String, val isAvailable: Boolean)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_148","timestamp":1745437167097,"code":"class Fare(val amount: Double, val currency: String, val fareType: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_149","timestamp":1745437167097,"code":"class Baggage(val baggageId: String, val weight: Double, val allowedWeight: Double)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_150","timestamp":1745437167097,"code":"class Payment(val paymentId: String, val method: String, val amount: Double, val status: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_151","timestamp":1745437167097,"code":"class CrewMember(val name: String, val employeeId: String, val role: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_152","timestamp":1745437167097,"code":"class CabinClass(val className: String, val priceMultiplier: Double)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_153","timestamp":1745437167097,"code":"class BoardingPass(val passId: String, val ticketNumber: String, val gate: String, val boardingTime: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_154","timestamp":1745437167097,"code":"class LoyaltyAccount(val accountId: Long, val customerName: String, val points: Int)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_155","timestamp":1745437167097,"code":"class FlightSchedule(val scheduleId: String, val flightNumber: String, val date: String, val status: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_156","timestamp":1745437167097,"code":"class Route(val routeId: Int, val source: String, val destination: String, val distance: Int)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_157","timestamp":1745437167097,"code":"class Aircraft(val registration: String, val model: String, val totalSeats: Int)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_158","timestamp":1745437167097,"code":"class CheckIn(val checkInId: String, val passengerId: String, val ticketId: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_159","timestamp":1745437167097,"code":"class Cancellation(val cancellationId: Int, val ticketId: String, val reason: String)","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_160","timestamp":1745437167097,"code":"class Itinerary(val itineraryId: String, val passengerId: String, val flights: List[String])","category":"regular_class_for_data","topicUsed":"Airline ticketing system"}
{"id":"regular_class_for_data_161","timestamp":1745437173776,"code":"class Guest(val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_162","timestamp":1745437173776,"code":"class Room(val number: Int, val roomType: String, val isAvailable: Boolean)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_163","timestamp":1745437173776,"code":"class Booking(val bookingId: String, val guestId: String, val roomId: String, val nights: Int)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_164","timestamp":1745437173776,"code":"class Payment(val transactionId: String, val amount: Double, val paidAt: java.time.Instant)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_165","timestamp":1745437173776,"code":"class Address(val street: String, val city: String, val zipCode: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_166","timestamp":1745437173776,"code":"class Reservation(val id: Long, val guestName: String, val roomNumber: Int, val startDate: String, val endDate: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_167","timestamp":1745437173776,"code":"class RoomType(val name: String, val maxOccupancy: Int, val pricePerNight: Double)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_168","timestamp":1745437173776,"code":"class Hotel(val id: Int, val name: String, val address: Address)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_169","timestamp":1745437173776,"code":"class CreditCard(val cardNumber: String, val holder: String, val expiry: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_170","timestamp":1745437173776,"code":"class Discount(val code: String, val percentage: Double)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_171","timestamp":1745437173776,"code":"class Amenity(val name: String, val description: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_172","timestamp":1745437173776,"code":"class Receipt(val receiptId: String, val date: String, val total: Double)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_173","timestamp":1745437173776,"code":"class LoyaltyAccount(val memberId: String, val points: Int)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_174","timestamp":1745437173776,"code":"class Promotion(val promoCode: String, val description: String, val validUntil: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_175","timestamp":1745437173776,"code":"class RoomRate(val roomId: String, val date: String, val rate: Double)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_176","timestamp":1745437173776,"code":"class CheckIn(val reservationId: String, val checkedInAt: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_177","timestamp":1745437173776,"code":"class GuestReview(val guestId: String, val rating: Int, val comment: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_178","timestamp":1745437173776,"code":"class Invoice(val invoiceId: String, val issuedTo: String, val amountDue: Double, val dueDate: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_179","timestamp":1745437173776,"code":"class Country(val code: String, val name: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_180","timestamp":1745437173776,"code":"class Cancellation(val reservationId: String, val cancelledAt: String, val reason: String)","category":"regular_class_for_data","topicUsed":"Hotel reservation engine"}
{"id":"regular_class_for_data_181","timestamp":1745437179370,"code":"class Address(val street: String, val city: String, val zip: String)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_182","timestamp":1745437179370,"code":"class Restaurant(val name: String, val cuisine: String, val location: Address)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_183","timestamp":1745437179370,"code":"class DeliveryPerson(val id: Int, val name: String, val vehicle: String)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_184","timestamp":1745437179370,"code":"class MenuItem(val name: String, val price: Double)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_185","timestamp":1745437179371,"code":"class OrderItem(val item: MenuItem, val quantity: Int)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_186","timestamp":1745437179371,"code":"class Customer(val id: Long, val fullName: String, val phone: String)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_187","timestamp":1745437179371,"code":"class Order(val orderId: String, val customer: Customer, val items: List[OrderItem], val address: Address)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_188","timestamp":1745437179371,"code":"class DeliveryStatus(val orderId: String, val status: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_189","timestamp":1745437179371,"code":"class GeoCoordinate(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_190","timestamp":1745437179371,"code":"class RiderLocation(val riderId: Int, val coordinate: GeoCoordinate)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_191","timestamp":1745437179371,"code":"class PaymentInfo(val paymentId: String, val method: String, val amount: Double)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_192","timestamp":1745437179371,"code":"class Coupon(val code: String, val discountPercentage: Int, val validThrough: String)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_193","timestamp":1745437179371,"code":"class ScheduledDelivery(val orderId: String, val scheduledTime: String)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_194","timestamp":1745437179371,"code":"class Vendor(val vendorId: Int, val restaurant: Restaurant)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_195","timestamp":1745437179371,"code":"class Rating(val entityId: String, val score: Double)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_196","timestamp":1745437179371,"code":"class OrderHistory(val customerId: Long, val orders: List[Order])","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_197","timestamp":1745437179371,"code":"class EstimatedDeliveryTime(val orderId: String, val etaMinutes: Int)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_198","timestamp":1745437179371,"code":"class FoodPackage(val orderId: String, val totalWeightKg: Double, val fragile: Boolean)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_199","timestamp":1745437179371,"code":"class LogisticsRequest(val requestId: String, val pickup: Address, val dropoff: Address)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_200","timestamp":1745437179371,"code":"class DriverAssignment(val orderId: String, val driver: DeliveryPerson, val assignedAt: Long)","category":"regular_class_for_data","topicUsed":"Food delivery logistics"}
{"id":"regular_class_for_data_201","timestamp":1745437189341,"code":"class Track(val id: String, val title: String, val artist: String, val durationSec: Int)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_202","timestamp":1745437189341,"code":"class User(val username: String, val email: String, val premium: Boolean)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_203","timestamp":1745437189341,"code":"class Playlist(val name: String, val tracks: List[String])","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_204","timestamp":1745437189341,"code":"class Album(val title: String, val artist: String, val year: Int, val genre: String)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_205","timestamp":1745437189341,"code":"class Subscription(val userId: String, val startDate: String, val endDate: String)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_206","timestamp":1745437189341,"code":"class StreamEvent(val userId: String, val trackId: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_207","timestamp":1745437189341,"code":"class Device(val deviceId: String, val model: String, val operatingSystem: String, val userId: String)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_208","timestamp":1745437189341,"code":"class GenreStat(val genre: String, val playCount: Int, val uniqueListeners: Int)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_209","timestamp":1745437189341,"code":"class Follow(val followerId: String, val followeeId: String, val since: String)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_210","timestamp":1745437189341,"code":"class Artist(val name: String, val country: String)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_211","timestamp":1745437189341,"code":"class TrackRating(val trackId: String, val userId: String, val rating: Double)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_212","timestamp":1745437189341,"code":"class Credit(val trackId: String, val contributor: String, val role: String)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_213","timestamp":1745437189341,"code":"class Recommendation(val userId: String, val recommendedTrackIds: List[String])","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_214","timestamp":1745437189341,"code":"class SearchQuery(val queryText: String, val userId: String, val timestamp: Long, val resultsCount: Int)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_215","timestamp":1745437189341,"code":"class StreamingQuality(val deviceId: String, val quality: String)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_216","timestamp":1745437189341,"code":"class PlaylistCollaborator(val playlistId: String, val userId: String, val permission: String)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_217","timestamp":1745437189341,"code":"class Download(val userId: String, val trackId: String, val downloadedAt: Long)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_218","timestamp":1745437189341,"code":"class ListeningSession(val userId: String, val sessionId: String, val startTimestamp: Long, val endTimestamp: Long)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_219","timestamp":1745437189341,"code":"class Label(val name: String, val country: String, val foundingYear: Int)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_220","timestamp":1745437189341,"code":"class ArtistProfile(val artistId: String, val bio: String, val monthlyListeners: Long)","category":"regular_class_for_data","topicUsed":"Digital music streaming"}
{"id":"regular_class_for_data_221","timestamp":1745437195280,"code":"class Tutor(val id: Int, val name: String, val subject: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_222","timestamp":1745437195280,"code":"class Student(val studentId: Int, val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_223","timestamp":1745437195280,"code":"class Session(val sessionId: Long, val tutorId: Int, val studentId: Int, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_224","timestamp":1745437195280,"code":"class Message(val fromId: Int, val toId: Int, val content: String, val timeSent: Long)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_225","timestamp":1745437195280,"code":"class Rating(val raterId: Int, val rateeId: Int, val score: Double)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_226","timestamp":1745437195280,"code":"class Course(val courseId: Int, val title: String, val description: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_227","timestamp":1745437195280,"code":"class Assignment(val assignmentId: Int, val courseId: Int, val title: String, val dueDate: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_228","timestamp":1745437195280,"code":"class Payment(val paymentId: Int, val sessionId: Long, val amount: Double, val paidAt: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_229","timestamp":1745437195280,"code":"class Notification(val notificationId: Int, val userId: Int, val message: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_230","timestamp":1745437195280,"code":"class Resource(val resourceId: Int, val courseId: Int, val url: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_231","timestamp":1745437195280,"code":"class Schedule(val scheduleId: Int, val tutorId: Int, val weekday: String, val startTime: String, val endTime: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_232","timestamp":1745437195280,"code":"class Enrollment(val enrollmentId: Int, val studentId: Int, val courseId: Int, val enrolledOn: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_233","timestamp":1745437195280,"code":"class Feedback(val feedbackId: Int, val sessionId: Long, val comment: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_234","timestamp":1745437195280,"code":"class Topic(val topicId: Int, val name: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_235","timestamp":1745437195280,"code":"class Review(val reviewId: Int, val tutorId: Int, val studentId: Int, val reviewText: String, val stars: Int)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_236","timestamp":1745437195280,"code":"class Invitation(val invitationId: Int, val fromId: Int, val toId: Int, val sentAt: Long)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_237","timestamp":1745437195280,"code":"class LoginInfo(val userId: Int, val lastLogin: Long, val ipAddress: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_238","timestamp":1745437195280,"code":"class Certification(val certificationId: Int, val tutorId: Int, val name: String, val grantedOn: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_239","timestamp":1745437195280,"code":"class Question(val questionId: Int, val assignmentId: Int, val content: String, val points: Int)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_240","timestamp":1745437195280,"code":"class Bookmark(val userId: Int, val resourceId: Int, val savedOn: String)","category":"regular_class_for_data","topicUsed":"Online tutoring platform"}
{"id":"regular_class_for_data_241","timestamp":1745437201524,"code":"class Listing(val id: String, val address: String, val price: Double)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_242","timestamp":1745437201524,"code":"class Agent(val name: String, val licenseNumber: String, val agency: String)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_243","timestamp":1745437201524,"code":"class SearchFilter(val minPrice: Option[Double], val maxPrice: Option[Double], val bedrooms: Option[Int])","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_244","timestamp":1745437201524,"code":"class User(val userId: String, val email: String)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_245","timestamp":1745437201524,"code":"class Coordinate(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_246","timestamp":1745437201524,"code":"class Amenity(val typeName: String, val distanceKm: Double)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_247","timestamp":1745437201524,"code":"class PropertyPhoto(val url: String, val description: String)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_248","timestamp":1745437201524,"code":"class OpenHouse(val startTime: Long, val endTime: Long, val host: String)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_249","timestamp":1745437201524,"code":"class Transaction(val listingId: String, val buyerId: String, val amount: Double, val dateEpoch: Long)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_250","timestamp":1745437201524,"code":"class Neighborhood(val name: String, val city: String, val population: Int)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_251","timestamp":1745437201524,"code":"class VisitRequest(val userId: String, val listingId: String, val requestedDate: Long)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_252","timestamp":1745437201524,"code":"class Address(val street: String, val city: String, val state: String, val zip: String)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_253","timestamp":1745437201524,"code":"class Favorite(val userId: String, val listingId: String)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_254","timestamp":1745437201524,"code":"class PriceHistory(val date: Long, val price: Double)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_255","timestamp":1745437201524,"code":"class ListingType(val code: String, val displayName: String)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_256","timestamp":1745437201524,"code":"class MortgageOffer(val lender: String, val rate: Double)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_257","timestamp":1745437201524,"code":"class ContactInfo(val name: String, val phone: String, val email: String)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_258","timestamp":1745437201524,"code":"class Review(val reviewerId: String, val agentId: String, val rating: Int, val text: String)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_259","timestamp":1745437201524,"code":"class Feature(val name: String, val isAvailable: Boolean)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_260","timestamp":1745437201524,"code":"class SearchQuery(val keywords: String, val location: String, val radiusKm: Double, val filters: SearchFilter)","category":"regular_class_for_data","topicUsed":"Real-estate listing search"}
{"id":"regular_class_for_data_261","timestamp":1745437208898,"code":"class Wallet(val address: String, val balance: BigDecimal)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_262","timestamp":1745437208899,"code":"class Transaction(val txId: String, val amount: Double, val from: String, val to: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_263","timestamp":1745437208899,"code":"class User(val userId: Int, val username: String, val email: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_264","timestamp":1745437208899,"code":"class Token(val symbol: String, val name: String, val decimals: Int, val contract: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_265","timestamp":1745437208899,"code":"class PrivateKey(val key: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_266","timestamp":1745437208899,"code":"class PublicKey(val key: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_267","timestamp":1745437208899,"code":"class AddressBookEntry(val label: String, val address: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_268","timestamp":1745437208899,"code":"class Network(val name: String, val chainId: Int, val rpcUrl: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_269","timestamp":1745437208899,"code":"class WalletBackup(val filePath: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_270","timestamp":1745437208899,"code":"class TransferRequest(val from: String, val to: String, val amount: BigDecimal)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_271","timestamp":1745437208899,"code":"class FeeEstimate(val gasPrice: BigInt, val gasLimit: BigInt) ","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_272","timestamp":1745437208899,"code":"class TransactionStatus(val txId: String, val status: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_273","timestamp":1745437208899,"code":"class MnemonicPhrase(val words: Seq[String])","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_274","timestamp":1745437208899,"code":"class WalletSettings(val autoLockMinutes: Int, val currency: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_275","timestamp":1745437208899,"code":"class NFTAsset(val tokenId: String, val contract: String, val owner: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_276","timestamp":1745437208899,"code":"class TransactionHistory(val address: String, val transactions: Seq[String])","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_277","timestamp":1745437208899,"code":"class MultiSigWallet(val owners: Seq[String], val requiredSignatures: Int)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_278","timestamp":1745437208899,"code":"class WalletImport(val seed: String, val format: String)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_279","timestamp":1745437208899,"code":"class ExchangeRate(val token: String, val currency: String, val rate: Double)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_280","timestamp":1745437208899,"code":"class BlockchainBlock(val height: Int, val hash: String, val time: Long)","category":"regular_class_for_data","topicUsed":"Cryptocurrency wallet management"}
{"id":"regular_class_for_data_281","timestamp":1745437252829,"code":"class Product(val id: String, val name: String, val quantity: Int)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_282","timestamp":1745437252829,"code":"class Warehouse(val code: String, val location: String, val areaSqFt: Double)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_283","timestamp":1745437252829,"code":"class StockEntry(val productId: String, val warehouseCode: String, val onHand: Int)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_284","timestamp":1745437252829,"code":"class User(val userId: String, val username: String, val isActive: Boolean)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_285","timestamp":1745437252829,"code":"class Transaction(val transactionId: String, val productId: String, val amount: Int, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_286","timestamp":1745437252829,"code":"class Supplier(val supplierId: String, val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_287","timestamp":1745437252829,"code":"class Location(val aisle: Int, val rack: Int, val shelf: Int)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_288","timestamp":1745437252829,"code":"class InventoryAdjustment(val adjustmentId: String, val productId: String, val delta: Int, val reason: String)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_289","timestamp":1745437252829,"code":"class Order(val orderId: String, val customerId: String, val orderDate: Long)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_290","timestamp":1745437252829,"code":"class Delivery(val deliveryId: String, val orderId: String, val scheduledDate: Long)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_291","timestamp":1745437252829,"code":"class Category(val categoryId: String, val categoryName: String)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_292","timestamp":1745437252829,"code":"class Barcode(val productId: String, val barcode: String)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_293","timestamp":1745437252829,"code":"class ReorderPoint(val productId: String, val minStock: Int, val reorderQty: Int)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_294","timestamp":1745437252829,"code":"class Price(val productId: String, val amount: BigDecimal, val currency: String)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_295","timestamp":1745437252829,"code":"class Package(val packageId: String, val weight: Double, val dimensions: (Double, Double, Double))","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_296","timestamp":1745437252829,"code":"class InventoryAudit(val auditId: String, val warehouse: String, val date: Long, val completed: Boolean)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_297","timestamp":1745437252829,"code":"class Reservation(val reservationId: String, val productId: String, val userId: String, val amount: Int)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_298","timestamp":1745437252829,"code":"class UnitOfMeasure(val uomCode: String, val description: String)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_299","timestamp":1745437252829,"code":"class Return(val returnId: String, val productId: String, val quantity: Int, val returnDate: Long)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_300","timestamp":1745437252829,"code":"class InventoryMovement(val movementId: String, val fromWarehouse: String, val toWarehouse: String, val productId: String, val quantity: Int)","category":"regular_class_for_data","topicUsed":"Warehouse inventory tracking"}
{"id":"regular_class_for_data_301","timestamp":1745437259973,"code":"class UserReport(val userId: String, val contentId: String, val reason: String)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_302","timestamp":1745437259973,"code":"class ModerationAction(val moderatorId: String, val actionType: String)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_303","timestamp":1745437259973,"code":"class ContentFlag(val contentId: String, val flagType: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_304","timestamp":1745437259973,"code":"class BlockedUser(val userId: String, val blockedUntil: Long)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_305","timestamp":1745437259973,"code":"class Warning(val userId: String, val issuedAt: Long)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_306","timestamp":1745437259973,"code":"class ReviewResult(val contentId: String, val verdict: String)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_307","timestamp":1745437259973,"code":"class Appeal(val reportId: String, val appealText: String)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_308","timestamp":1745437259973,"code":"class Message(val senderId: String, val messageText: String, val sentAt: Long)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_309","timestamp":1745437259973,"code":"class Tag(val contentId: String, val tagName: String)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_310","timestamp":1745437259973,"code":"class Policy(val policyId: String, val description: String)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_311","timestamp":1745437259973,"code":"class ReportReason(val reasonId: String, val description: String)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_312","timestamp":1745437259973,"code":"class PhotoMetadata(val contentId: String, val uploadedBy: String, val size: Int)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_313","timestamp":1745437259973,"code":"class SuspendedContent(val contentId: String, val reason: String, val suspendUntil: Long)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_314","timestamp":1745437259973,"code":"class Moderator(val moderatorId: String, val name: String)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_315","timestamp":1745437259973,"code":"class APIRequest(val requestId: String, val endpoint: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_316","timestamp":1745437259973,"code":"class AuditLog(val entryId: String, val userId: String, val action: String, val createdAt: Long)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_317","timestamp":1745437259974,"code":"class Reaction(val userId: String, val contentId: String, val reactionType: String)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_318","timestamp":1745437259974,"code":"class Violation(val violationId: String, val userId: String, val details: String, val reportedAt: Long)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_319","timestamp":1745437259974,"code":"class MuteRecord(val userId: String, val mutedBy: String, val muteUntil: Long)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_320","timestamp":1745437259974,"code":"class Keyword(val phrase: String, val addedBy: String, val addedAt: Long)","category":"regular_class_for_data","topicUsed":"Social media content moderation"}
{"id":"regular_class_for_data_321","timestamp":1745437265730,"code":"class User(val id: Int, val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_322","timestamp":1745437265730,"code":"class Article(val title: String, val content: String, val authorId: Int)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_323","timestamp":1745437265730,"code":"class FeedItem(val userId: Int, val articleId: Int, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_324","timestamp":1745437265730,"code":"class Category(val name: String, val description: String)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_325","timestamp":1745437265730,"code":"class UserPreference(val userId: Int, val category: String, val weight: Double)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_326","timestamp":1745437265730,"code":"class NewsSource(val sourceId: Int, val sourceName: String)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_327","timestamp":1745437265730,"code":"class Recommendation(val userId: Int, val articleId: Int, val score: Double)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_328","timestamp":1745437265730,"code":"class Interaction(val userId: Int, val articleId: Int, val action: String)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_329","timestamp":1745437265730,"code":"class Bookmark(val userId: Int, val articleId: Int)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_330","timestamp":1745437265730,"code":"class Follow(val followerId: Int, val followedUserId: Int)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_331","timestamp":1745437265730,"code":"class Tag(val text: String)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_332","timestamp":1745437265730,"code":"class Device(val deviceId: String, val typeName: String)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_333","timestamp":1745437265730,"code":"class Location(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_334","timestamp":1745437265730,"code":"class Notification(val userId: Int, val message: String, val created: Long)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_335","timestamp":1745437265730,"code":"class Session(val sessionId: String, val userId: Int, val startTime: Long)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_336","timestamp":1745437265730,"code":"class Ad(val adId: Int, val content: String, val relevanceScore: Double)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_337","timestamp":1745437265730,"code":"class Topic(val topicId: Int, val name: String, val popularity: Int)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_338","timestamp":1745437265730,"code":"class Like(val userId: Int, val articleId: Int, val liked: Boolean)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_339","timestamp":1745437265730,"code":"class Impression(val userId: Int, val articleId: Int, val impressionTime: Long)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_340","timestamp":1745437265730,"code":"class TrendingScore(val articleId: Int, val score: Double, val computedAt: Long)","category":"regular_class_for_data","topicUsed":"Personalized news feed"}
{"id":"regular_class_for_data_341","timestamp":1745437278914,"code":"class Coordinate(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_342","timestamp":1745437278914,"code":"class ChargingStation(val id: String, val name: String, val location: Coordinate, val availablePlugs: Int)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_343","timestamp":1745437278914,"code":"class User(val userId: String, val email: String)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_344","timestamp":1745437278914,"code":"class Review(val user: User, val station: ChargingStation, val rating: Int, val comment: String)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_345","timestamp":1745437278914,"code":"class PlugType(val plugName: String, val maxKW: Double)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_346","timestamp":1745437278914,"code":"class Address(val street: String, val city: String, val postalCode: String)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_347","timestamp":1745437278914,"code":"class ChargingSession(val sessionId: String, val start: Long, val end: Long, val user: User)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_348","timestamp":1745437278914,"code":"class SearchFilter(val city: String, val plugType: Option[String], val minKW: Option[Double])","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_349","timestamp":1745437278914,"code":"class OpeningHour(val day: String, val open: String, val close: String)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_350","timestamp":1745437278914,"code":"class StationAmenities(val wifi: Boolean, val restroom: Boolean, val cafe: Boolean)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_351","timestamp":1745437278914,"code":"class Operator(val operatorId: String, val name: String, val phone: String)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_352","timestamp":1745437278914,"code":"class FavoriteStation(val user: User, val station: ChargingStation)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_353","timestamp":1745437278914,"code":"class PriceInfo(val stationId: String, val perKWh: Double, val flatFee: Double)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_354","timestamp":1745437278914,"code":"class ChargerStatus(val chargerId: String, val isAvailable: Boolean)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_355","timestamp":1745437278914,"code":"class Request(val query: String, val filters: List[SearchFilter])","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_356","timestamp":1745437278914,"code":"class DistanceResult(val station: ChargingStation, val distanceKm: Double)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_357","timestamp":1745437278914,"code":"class ResultPage(val stations: List[ChargingStation], val page: Int, val perPage: Int)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_358","timestamp":1745437278914,"code":"class Notification(val message: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_359","timestamp":1745437278914,"code":"class GeoBound(val north: Double, val south: Double, val east: Double, val west: Double)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_360","timestamp":1745437278914,"code":"class ChargingConnector(val typeName: String, val outputKW: Double, val isFast: Boolean)","category":"regular_class_for_data","topicUsed":"Electric vehicle charging station locator"}
{"id":"regular_class_for_data_361","timestamp":1745437285727,"code":"class Field(val name: String, val area: Double, val cropType: String)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_362","timestamp":1745437285727,"code":"class SensorReading(val sensorId: String, val timestamp: Long, val moisture: Double)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_363","timestamp":1745437285727,"code":"class CropStatus(val crop: String, val health: String)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_364","timestamp":1745437285727,"code":"class WeatherData(val temperature: Double, val rainfall: Double, val windSpeed: Double)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_365","timestamp":1745437285727,"code":"class FarmWorker(val id: Int, val name: String)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_366","timestamp":1745437285727,"code":"class PlantDisease(val crop: String, val diseaseName: String, val severity: String)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_367","timestamp":1745437285727,"code":"class IrrigationEvent(val field: String, val date: String, val volume: Double)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_368","timestamp":1745437285727,"code":"class Coordinate(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_369","timestamp":1745437285727,"code":"class FertilizerApplication(val field: String, val date: String, val amount: Double)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_370","timestamp":1745437285727,"code":"class HarvestYield(val field: String, val quantity: Double)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_371","timestamp":1745437285727,"code":"class PestTrapReading(val trapId: String, val species: String, val count: Int)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_372","timestamp":1745437285727,"code":"class GrowthStage(val crop: String, val stage: String, val dateEntered: String)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_373","timestamp":1745437285727,"code":"class DroneFlight(val droneId: String, val areaCovered: Double, val duration: Int)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_374","timestamp":1745437285727,"code":"class SoilSample(val sampleId: String, val field: String, val ph: Double, val ec: Double)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_375","timestamp":1745437285727,"code":"class EquipmentUsage(val equipmentId: String, val hoursUsed: Double)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_376","timestamp":1745437285727,"code":"class WaterSource(val sourceName: String, val availableVolume: Double)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_377","timestamp":1745437285727,"code":"class CropForecast(val crop: String, val expectedYield: Double, val probability: Double)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_378","timestamp":1745437285727,"code":"class WeatherAlert(val alertType: String, val description: String, val issuedAt: Long)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_379","timestamp":1745437285727,"code":"class ImageAnalysis(val imageId: String, val field: String, val analysisDate: Long)","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_380","timestamp":1745437285727,"code":"class FieldBoundary(val field: String, val vertices: List[Coordinate])","category":"regular_class_for_data","topicUsed":"Agricultural crop monitoring"}
{"id":"regular_class_for_data_381","timestamp":1745437290955,"code":"class SensorReading(val sensorId: String, val timestamp: Long, val value: Double)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_382","timestamp":1745437290955,"code":"class DeviceMetadata(val deviceId: String, val location: String)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_383","timestamp":1745437290955,"code":"class TemperatureData(val temp: Double, val unit: String, val time: Long)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_384","timestamp":1745437290955,"code":"class HumidityEntry(val id: String, val humidity: Float)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_385","timestamp":1745437290955,"code":"class AggregatedStats(val count: Int, val average: Double, val max: Double, val min: Double)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_386","timestamp":1745437290955,"code":"class SensorStatus(val sensorId: String, val status: String)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_387","timestamp":1745437290955,"code":"class ReadingBatch(val readings: List[Double], val batchId: String)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_388","timestamp":1745437290955,"code":"class LocationCoordinate(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_389","timestamp":1745437290955,"code":"class DeviceSummary(val deviceId: String, val totalReadings: Int, val lastActive: Long)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_390","timestamp":1745437290955,"code":"class PressureData(val pressure: Double, val recordedAt: Long)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_391","timestamp":1745437290955,"code":"class SensorGroup(val groupId: String, val sensors: Seq[String])","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_392","timestamp":1745437290955,"code":"class AggregationWindow(val startTime: Long, val endTime: Long)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_393","timestamp":1745437290955,"code":"class Alert(val alertType: String, val description: String)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_394","timestamp":1745437290955,"code":"class Measurement(val sensorId: String, val measurementType: String, val value: Double, val time: Long)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_395","timestamp":1745437290955,"code":"class EventLog(val eventId: String, val eventType: String, val device: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_396","timestamp":1745437290955,"code":"class BatteryStatus(val deviceId: String, val batteryLevel: Int)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_397","timestamp":1745437290955,"code":"class SensorType(val name: String, val description: String)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_398","timestamp":1745437290955,"code":"class DataPoint(val timestamp: Long, val value: Double)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_399","timestamp":1745437290955,"code":"class AggregationResult(val sensorId: String, val windowStart: Long, val windowEnd: Long, val avg: Double)","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_400","timestamp":1745437290955,"code":"class NetworkInfo(val gatewayId: String, val deviceIds: Seq[String])","category":"regular_class_for_data","topicUsed":"IoT sensor data aggregation"}
{"id":"regular_class_for_data_401","timestamp":1745437299285,"code":"class Stop(val id: Int, val name: String)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_402","timestamp":1745437299286,"code":"class TransitLine(val lineNumber: String, val stops: List[String])","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_403","timestamp":1745437299286,"code":"class Passenger(val identifier: Long, val origin: String, val destination: String)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_404","timestamp":1745437299286,"code":"class Route(val routeNumber: Int, val stops: Seq[String], val totalDistance: Double)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_405","timestamp":1745437299286,"code":"class Path(val pathId: String, val segments: List[(String, String)])","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_406","timestamp":1745437299286,"code":"class Coordinate(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_407","timestamp":1745437299286,"code":"class TimetableEntry(val stopName: String, val arrival: String, val departure: String)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_408","timestamp":1745437299286,"code":"class Schedule(val dayOfWeek: String, val departures: List[String])","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_409","timestamp":1745437299286,"code":"class Fare(val origin: String, val destination: String, val amount: BigDecimal)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_410","timestamp":1745437299286,"code":"class Vehicle(val code: String, val currentStop: String)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_411","timestamp":1745437299286,"code":"class Connection(val from: String, val to: String, val durationMin: Int)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_412","timestamp":1745437299286,"code":"class Alert(val alertId: String, val message: String)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_413","timestamp":1745437299286,"code":"class Transfer(val atStop: String, val minTransferTime: Int)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_414","timestamp":1745437299286,"code":"class Ticket(val ticketId: Int, val typeName: String, val price: Double)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_415","timestamp":1745437299286,"code":"class Agency(val agencyId: String, val agencyName: String)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_416","timestamp":1745437299286,"code":"class Zone(val zoneName: String, val zoneFare: Double)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_417","timestamp":1745437299286,"code":"class Trip(val tripId: String, val serviceDay: String, val stops: List[String])","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_418","timestamp":1745437299286,"code":"class Operator(val operatorId: String, val operatorName: String, val contact: String)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_419","timestamp":1745437299286,"code":"class Platform(val platformId: String, val stopId: String, val direction: String)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_420","timestamp":1745437299286,"code":"class Incident(val incidentId: String, val description: String, val impactLevel: String)","category":"regular_class_for_data","topicUsed":"Public transit route planning"}
{"id":"regular_class_for_data_421","timestamp":1745437305502,"code":"class Product(val id: Int, val name: String, val price: Double)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_422","timestamp":1745437305502,"code":"class Customer(val customerId: String, val firstName: String, val lastName: String)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_423","timestamp":1745437305502,"code":"class SaleItem(val sku: String, val quantity: Int, val unitPrice: Double)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_424","timestamp":1745437305502,"code":"class Transaction(val transactionId: String, val items: List[SaleItem], val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_425","timestamp":1745437305502,"code":"class Payment(val paymentType: String, val amount: Double)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_426","timestamp":1745437305502,"code":"class Receipt(val receiptId: String, val transaction: Transaction, val total: Double)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_427","timestamp":1745437305502,"code":"class StoreLocation(val storeId: String, val address: String)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_428","timestamp":1745437305502,"code":"class Discount(val code: String, val amount: Double, val validUntil: Long)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_429","timestamp":1745437305502,"code":"class InventoryRecord(val productId: Int, val quantityAvailable: Int)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_430","timestamp":1745437305502,"code":"class Terminal(val terminalId: String, val location: StoreLocation, val status: String)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_431","timestamp":1745437305502,"code":"class Category(val categoryId: Int, val name: String)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_432","timestamp":1745437305502,"code":"class PriceOverride(val productId: Int, val oldPrice: Double, val newPrice: Double)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_433","timestamp":1745437305502,"code":"class LoyaltyAccount(val userId: String, val points: Int)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_434","timestamp":1745437305502,"code":"class Refund(val originalTransactionId: String, val amount: Double, val reason: String)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_435","timestamp":1745437305502,"code":"class TaxLine(val description: String, val rate: Double, val amount: Double)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_436","timestamp":1745437305502,"code":"class Supplier(val supplierId: String, val name: String, val contactNumber: String)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_437","timestamp":1745437305502,"code":"class Shift(val shiftId: String, val userId: String, val startTime: Long, val endTime: Long)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_438","timestamp":1745437305502,"code":"class GiftCard(val cardNumber: String, val balance: Double, val expiryDate: Long)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_439","timestamp":1745437305502,"code":"class Basket(val basketId: String, val customerId: Option[String], val items: List[SaleItem])","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_440","timestamp":1745437305502,"code":"class Barcode(val code: String, val productId: Int)","category":"regular_class_for_data","topicUsed":"Retail point-of-sale integration"}
{"id":"regular_class_for_data_441","timestamp":1745437313349,"code":"class LoanDetails(val principal: Double, val annualRate: Double, val termYears: Int)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_442","timestamp":1745437313349,"code":"class UserProfile(val userId: String, val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_443","timestamp":1745437313349,"code":"class MortgageQuote(val quoteId: String, val amount: Double, val rate: Double, val duration: Int)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_444","timestamp":1745437313349,"code":"class BankOffer(val bankName: String, val interestRate: Double)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_445","timestamp":1745437313349,"code":"class PaymentSchedule(val paymentNumber: Int, val date: String, val amount: Double)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_446","timestamp":1745437313349,"code":"class MortgageApplication(val appId: String, val user: UserProfile, val loan: LoanDetails)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_447","timestamp":1745437313349,"code":"class Address(val street: String, val city: String, val zip: String)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_448","timestamp":1745437313349,"code":"class Property(val propertyId: String, val address: Address, val value: Double)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_449","timestamp":1745437313349,"code":"class AmortizationPeriod(val periodNumber: Int, val balance: Double, val interestPaid: Double)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_450","timestamp":1745437313349,"code":"class CalculatorSettings(val currency: String, val locale: String)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_451","timestamp":1745437313349,"code":"class ComparisonResult(val offer1: BankOffer, val offer2: BankOffer, val betterRate: Boolean)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_452","timestamp":1745437313349,"code":"class DownPayment(val amount: Double, val date: String)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_453","timestamp":1745437313349,"code":"class InterestRateHistory(val year: Int, val rate: Double)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_454","timestamp":1745437313349,"code":"class MonthlyBreakdown(val month: Int, val principalPaid: Double, val interestPaid: Double)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_455","timestamp":1745437313349,"code":"class MortgageSummary(val totalPaid: Double, val totalInterest: Double)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_456","timestamp":1745437313349,"code":"class UserLogin(val username: String, val loginTime: Long)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_457","timestamp":1745437313349,"code":"class OfferCriteria(val maxTerm: Int, val minDownPayment: Double, val maxRate: Double)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_458","timestamp":1745437313349,"code":"class PaymentResult(val totalPayments: Int, val paymentPerMonth: Double)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_459","timestamp":1745437313349,"code":"class RateLock(val lockId: String, val startDate: String, val rate: Double)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_460","timestamp":1745437313349,"code":"class EmailNotification(val notificationId: String, val to: String, val subject: String)","category":"regular_class_for_data","topicUsed":"Online mortgage calculator"}
{"id":"regular_class_for_data_461","timestamp":1745437320658,"code":"class TemperatureReading(val machineId: String, val timestamp: Long, val temperature: Double)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_462","timestamp":1745437320658,"code":"class PressureData(val equipmentId: Int, val timeRecorded: Long, val psi: Float)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_463","timestamp":1745437320658,"code":"class VibrationSample(val axis: String, val value: Double, val unit: String)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_464","timestamp":1745437320658,"code":"class MachineStatus(val id: String, val status: String, val lastUpdate: Long)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_465","timestamp":1745437320658,"code":"class EnergyUsage(val plant: String, val device: String, val kWh: Double)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_466","timestamp":1745437320658,"code":"class TelemetryPacket(val dataId: String, val metrics: Map[String, Double], val sentAt: Long)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_467","timestamp":1745437320658,"code":"class OperatorAction(val operatorId: String, val action: String, val machineId: String, val actionTime: Long)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_468","timestamp":1745437320658,"code":"class SensorConfig(val sensorId: String, val typeCode: Int, val isEnabled: Boolean)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_469","timestamp":1745437320658,"code":"class ErrorLog(val code: Int, val machine: String, val occurredAt: Long, val description: String)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_470","timestamp":1745437320658,"code":"class HumidityRecord(val station: String, val measurement: Double)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_471","timestamp":1745437320658,"code":"class PowerSpike(val subsystem: Int, val spikeLevel: Double, val detectedAt: Long)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_472","timestamp":1745437320658,"code":"class Location(val x: Double, val y: Double, val z: Double)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_473","timestamp":1745437320658,"code":"class FuelLevel(val tankId: Int, val currentLevel: Double, val maxCapacity: Double)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_474","timestamp":1745437320658,"code":"class CoolantFlow(val circuit: String, val flowRate: Double, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_475","timestamp":1745437320658,"code":"class EventMarker(val markerId: Int, val machine: String, val eventType: String, val at: Long)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_476","timestamp":1745437320658,"code":"class MaintenanceRecord(val refId: String, val performedBy: String, val time: Long, val details: String)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_477","timestamp":1745437320658,"code":"class RuntimeStats(val machineId: String, val hours: Int, val resets: Int)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_478","timestamp":1745437320658,"code":"class SpeedMeasurement(val conveyor: String, val speed: Float, val capturedAt: Long)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_479","timestamp":1745437320658,"code":"class UptimeWindow(val from: Long, val to: Long)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_480","timestamp":1745437320658,"code":"class NetworkPacket(val packetId: Long, val sourceDevice: String, val sizeBytes: Int, val receivedAt: Long)","category":"regular_class_for_data","topicUsed":"Telemetry for industrial machinery"}
{"id":"regular_class_for_data_481","timestamp":1745437326546,"code":"class VRUser(val username: String, val level: Int, val avatar: String)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_482","timestamp":1745437326546,"code":"class LobbySession(val lobbyId: String, val hostName: String, val maxPlayers: Int)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_483","timestamp":1745437326546,"code":"class VRGame(val title: String, val genre: String)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_484","timestamp":1745437326546,"code":"class LobbyInvite(val sender: String, val receiver: String, val sentAt: Long)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_485","timestamp":1745437326546,"code":"class UserPosition(val x: Double, val y: Double, val z: Double)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_486","timestamp":1745437326546,"code":"class LobbySettings(val privacy: String, val allowVoiceChat: Boolean, val region: String)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_487","timestamp":1745437326546,"code":"class Headset(val model: String, val firmwareVersion: String)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_488","timestamp":1745437326546,"code":"class VRChatMessage(val from: String, val message: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_489","timestamp":1745437326546,"code":"class Environment(val environmentName: String, val lighting: String)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_490","timestamp":1745437326546,"code":"class ControllerInput(val axisX: Float, val axisY: Float, val triggerPressed: Boolean)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_491","timestamp":1745437326546,"code":"class ReadyStatus(val username: String, val isReady: Boolean)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_492","timestamp":1745437326546,"code":"class Spectator(val name: String, val watchingSince: Long)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_493","timestamp":1745437326546,"code":"class LobbyAnnouncement(val message: String, val createdAt: Long)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_494","timestamp":1745437326546,"code":"class Achievement(val title: String, val unlockedAt: Long)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_495","timestamp":1745437326546,"code":"class UserDevice(val userId: String, val deviceType: String, val connected: Boolean)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_496","timestamp":1745437326546,"code":"class MatchResult(val winner: String, val durationSeconds: Int)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_497","timestamp":1745437326546,"code":"class AvatarCustomization(val userId: String, val skinColor: String, val accessory: String)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_498","timestamp":1745437326546,"code":"class Party(val members: List[String], val leader: String)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_499","timestamp":1745437326546,"code":"class VoteKick(val target: String, val initiatedBy: String, val successful: Boolean)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_500","timestamp":1745437326546,"code":"class VoiceChatStatus(val user: String, val muted: Boolean)","category":"regular_class_for_data","topicUsed":"Virtual reality gaming lobby"}
{"id":"regular_class_for_data_501","timestamp":1745437339694,"code":"class Employee(val id: Int, val name: String, val department: String)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_502","timestamp":1745437339694,"code":"class TimeEntry(val employeeId: Int, val date: String, val hoursWorked: Double)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_503","timestamp":1745437339694,"code":"class Project(val projectId: Int, val name: String)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_504","timestamp":1745437339694,"code":"class Shift(val shiftId: Int, val start: String, val end: String)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_505","timestamp":1745437339694,"code":"class Attendance(val employeeId: Int, val date: String, val present: Boolean)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_506","timestamp":1745437339694,"code":"class OvertimeRequest(val requestId: Int, val employeeId: Int, val hours: Double)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_507","timestamp":1745437339694,"code":"class ClockIn(val employeeId: Int, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_508","timestamp":1745437339694,"code":"class ClockOut(val employeeId: Int, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_509","timestamp":1745437339694,"code":"class LeaveRecord(val employeeId: Int, val leaveType: String, val days: Int)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_510","timestamp":1745437339694,"code":"class Task(val taskId: Int, val description: String, val assignedTo: Int)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_511","timestamp":1745437339694,"code":"class Approval(val approverId: Int, val status: String)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_512","timestamp":1745437339694,"code":"class Timesheet(val timesheetId: Int, val employeeId: Int)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_513","timestamp":1745437339694,"code":"class Role(val roleId: Int, val title: String)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_514","timestamp":1745437339694,"code":"class BreakPeriod(val start: String, val end: String)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_515","timestamp":1745437339694,"code":"class DailyReport(val employeeId: Int, val date: String, val totalHours: Double)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_516","timestamp":1745437339694,"code":"class Location(val locationId: Int, val address: String)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_517","timestamp":1745437339694,"code":"class Schedule(val employeeId: Int, val workdays: List[String])","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_518","timestamp":1745437339694,"code":"class HourlyRate(val employeeId: Int, val rate: Double)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_519","timestamp":1745437339694,"code":"class Holiday(val date: String, val description: String)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_520","timestamp":1745437339694,"code":"class ShiftChange(val employeeId: Int, val fromShift: Int, val toShift: Int, val date: String)","category":"regular_class_for_data","topicUsed":"Employee time tracking"}
{"id":"regular_class_for_data_521","timestamp":1745437345502,"code":"class User(val id: Int, val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_522","timestamp":1745437345502,"code":"class Alert(val alertId: String, val message: String, val severity: String)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_523","timestamp":1745437345502,"code":"class WeatherStation(val stationId: String, val location: String)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_524","timestamp":1745437345502,"code":"class Notification(val title: String, val content: String, val recipient: String, val sent: Boolean)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_525","timestamp":1745437345502,"code":"class Coordinate(val lat: Double, val lon: Double)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_526","timestamp":1745437345502,"code":"class AlertPreference(val userId: Int, val alertType: String, val enabled: Boolean)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_527","timestamp":1745437345502,"code":"class TemperatureReading(val stationId: String, val timestamp: Long, val temperature: Double)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_528","timestamp":1745437345502,"code":"class Subscription(val userId: Int, val region: String, val subscribed: Boolean)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_529","timestamp":1745437345502,"code":"class Region(val name: String, val country: String)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_530","timestamp":1745437345502,"code":"class Forecast(val region: String, val description: String)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_531","timestamp":1745437345502,"code":"class AlertHistory(val alertId: String, val userId: Int, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_532","timestamp":1745437345502,"code":"class RainfallRecord(val stationId: String, val date: String, val mm: Double)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_533","timestamp":1745437345502,"code":"class Threshold(val alertType: String, val value: Double)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_534","timestamp":1745437345502,"code":"class DeviceToken(val userId: Int, val deviceType: String, val token: String)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_535","timestamp":1745437345502,"code":"class WindReading(val stationId: String, val speed: Double, val direction: String)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_536","timestamp":1745437345502,"code":"class NotificationStatus(val notificationId: String, val delivered: Boolean)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_537","timestamp":1745437345502,"code":"class AlertSubscription(val alertType: String, val userEmail: String)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_538","timestamp":1745437345502,"code":"class Location(val city: String, val postalCode: String)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_539","timestamp":1745437345502,"code":"class SMSNotification(val phone: String, val message: String)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_540","timestamp":1745437345502,"code":"class UserSettings(val userId: Int, val dailyAlert: Boolean, val severeOnly: Boolean)","category":"regular_class_for_data","topicUsed":"Weather alert notification service"}
{"id":"regular_class_for_data_541","timestamp":1745437353081,"code":"class Transaction(val id: String, val amount: Double, val userId: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_542","timestamp":1745437353081,"code":"class User(val userId: String, val email: String, val phone: String)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_543","timestamp":1745437353081,"code":"class PaymentMethod(val methodId: String, val methodType: String, val isActive: Boolean)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_544","timestamp":1745437353081,"code":"class Device(val deviceId: String, val userId: String, val location: String)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_545","timestamp":1745437353081,"code":"class Merchant(val merchantId: String, val name: String, val riskScore: Double)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_546","timestamp":1745437353081,"code":"class GeoCoordinate(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_547","timestamp":1745437353081,"code":"class RiskAssessment(val transactionId: String, val riskLevel: String)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_548","timestamp":1745437353081,"code":"class Alert(val alertId: String, val userId: String, val message: String)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_549","timestamp":1745437353081,"code":"class LoginEvent(val userId: String, val timestamp: Long, val ip: String, val deviceId: String)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_550","timestamp":1745437353081,"code":"class VelocityCheck(val userId: String, val transactionCount: Int, val timeWindowMinutes: Int)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_551","timestamp":1745437353081,"code":"class AccountLock(val userId: String, val lockTime: Long)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_552","timestamp":1745437353081,"code":"class UnusualPattern(val transactionId: String, val reason: String)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_553","timestamp":1745437353081,"code":"class ManualReview(val reviewId: String, val transactionId: String, val reviewer: String, val status: String)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_554","timestamp":1745437353081,"code":"class RuleTrigger(val ruleId: String, val transactionId: String, val triggeredAt: Long)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_555","timestamp":1745437353081,"code":"class Chargeback(val chargebackId: String, val originalTransactionId: String, val reasonCode: String, val amount: Double)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_556","timestamp":1745437353081,"code":"class SuspiciousCountry(val countryCode: String, val description: String)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_557","timestamp":1745437353081,"code":"class BlacklistedAccount(val accountId: String, val addedOn: Long)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_558","timestamp":1745437353081,"code":"class PatternScore(val transactionId: String, val score: Double)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_559","timestamp":1745437353081,"code":"class FraudReport(val reportId: String, val transactionId: String, val createdAt: Long, val riskLevel: String)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_560","timestamp":1745437353081,"code":"class IpReputation(val ip: String, val reputationScore: Int)","category":"regular_class_for_data","topicUsed":"Fraud detection in payments"}
{"id":"regular_class_for_data_561","timestamp":1745437362910,"code":"class Patient(val id: Int, val name: String, val dob: String)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_562","timestamp":1745437362910,"code":"class Scan(val fileName: String, val modality: String, val resolution: (Int, Int))","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_563","timestamp":1745437362910,"code":"class Annotation(val x: Int, val y: Int, val label: String)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_564","timestamp":1745437362910,"code":"class Series(val seriesId: String, val description: String)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_565","timestamp":1745437362910,"code":"class ImageSlice(val index: Int, val pixelData: Array[Byte])","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_566","timestamp":1745437362910,"code":"class Viewport(val minZoom: Double, val maxZoom: Double)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_567","timestamp":1745437362910,"code":"class Windowing(val width: Int, val level: Int)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_568","timestamp":1745437362910,"code":"class ROI(val topLeft: (Int, Int), val bottomRight: (Int, Int))","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_569","timestamp":1745437362910,"code":"class ViewerSettings(val brightness: Double, val contrast: Double, val invertColors: Boolean)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_570","timestamp":1745437362910,"code":"class Measurement(val roiId: String, val length: Double)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_571","timestamp":1745437362910,"code":"class User(val username: String, val email: String, val accessLevel: String)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_572","timestamp":1745437362910,"code":"class AuditTrail(val event: String, val timestamp: Long, val userId: Int)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_573","timestamp":1745437362910,"code":"class Thumbnail(val scanId: String, val imageBytes: Array[Byte])","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_574","timestamp":1745437362910,"code":"class Layout(val rows: Int, val cols: Int)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_575","timestamp":1745437362910,"code":"class Study(val studyId: String, val patientId: Int)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_576","timestamp":1745437362910,"code":"class DicomHeader(val tag: String, val value: String)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_577","timestamp":1745437362910,"code":"class SeriesDescription(val modality: String, val bodyPart: String, val date: String)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_578","timestamp":1745437362910,"code":"class LoadingStatus(val loaded: Boolean, val progress: Double)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_579","timestamp":1745437362910,"code":"class Filter(val name: String, val parameters: Map[String, Double])","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_580","timestamp":1745437362910,"code":"class Cursor(val x: Int, val y: Int, val sliceIndex: Int)","category":"regular_class_for_data","topicUsed":"Medical imaging data viewer"}
{"id":"regular_class_for_data_581","timestamp":1745437368440,"code":"class PaymentLink(val id: String, val amount: Double, val currency: String, val created: Long)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_582","timestamp":1745437368440,"code":"class User(val userId: String, val email: String, val isActive: Boolean)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_583","timestamp":1745437368440,"code":"class PayerInfo(val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_584","timestamp":1745437368440,"code":"class PaymentStatus(val status: String, val updated: Long)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_585","timestamp":1745437368440,"code":"class LinkExpiration(val expiresAt: Long)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_586","timestamp":1745437368440,"code":"class Transaction(val txId: String, val paymentLinkId: String, val status: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_587","timestamp":1745437368440,"code":"class PaymentMetadata(val notes: String, val tags: List[String])","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_588","timestamp":1745437368440,"code":"class Merchant(val merchantId: String, val businessName: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_589","timestamp":1745437368440,"code":"class Amount(val value: Double, val currency: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_590","timestamp":1745437368440,"code":"class PaymentRequest(val requestId: String, val paymentLinkId: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_591","timestamp":1745437368440,"code":"class WebhookEvent(val event: String, val receivedAt: Long)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_592","timestamp":1745437368440,"code":"class Refund(val refundId: String, val amount: Double, val processedAt: Long)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_593","timestamp":1745437368440,"code":"class PaymentMethod(val method: String, val last4Digits: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_594","timestamp":1745437368440,"code":"class PaymentLinkSearchQuery(val status: String, val minAmount: Option[Double], val maxAmount: Option[Double])","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_595","timestamp":1745437368440,"code":"class Recipient(val recipientId: String, val email: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_596","timestamp":1745437368440,"code":"class FeeInfo(val feeAmount: Double, val feeDescription: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_597","timestamp":1745437368440,"code":"class Invoice(val invoiceId: String, val issuedAt: Long, val total: Double)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_598","timestamp":1745437368440,"code":"class CurrencyExchange(val fromCurrency: String, val toCurrency: String, val rate: Double)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_599","timestamp":1745437368440,"code":"class CustomField(val key: String, val value: String)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_600","timestamp":1745437368440,"code":"class PaymentLinkSettings(val allowPartialPayments: Boolean, val maxUses: Int)","category":"regular_class_for_data","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"regular_class_for_data_601","timestamp":1745437374660,"code":"class User(val id: Int, val username: String)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_602","timestamp":1745437374660,"code":"class ChatMessage(val text: String, val sender: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_603","timestamp":1745437374660,"code":"class LanguagePair(val sourceLang: String, val targetLang: String)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_604","timestamp":1745437374660,"code":"class TranslationRequest(val userId: Int, val inputText: String, val srcLang: String, val tgtLang: String)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_605","timestamp":1745437374660,"code":"class TranslationResult(val translatedText: String, val confidence: Double)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_606","timestamp":1745437374660,"code":"class BotReply(val message: String, val language: String)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_607","timestamp":1745437374660,"code":"class DetectedLanguage(val langCode: String, val probability: Float)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_608","timestamp":1745437374660,"code":"class Session(val sessionId: String, val userId: Int, val active: Boolean)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_609","timestamp":1745437374660,"code":"class Feedback(val userId: Int, val translationQuality: Int, val suggestion: String)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_610","timestamp":1745437374660,"code":"class MessageStatus(val messageId: String, val delivered: Boolean)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_611","timestamp":1745437374660,"code":"class WordAlignment(val sourceWord: String, val targetWord: String, val score: Double)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_612","timestamp":1745437374660,"code":"class ChatHistory(val userId: Int, val messages: Seq[String])","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_613","timestamp":1745437374660,"code":"class SupportedLanguage(val code: String, val name: String)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_614","timestamp":1745437374660,"code":"class UserPreference(val userId: Int, val preferredLanguage: String)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_615","timestamp":1745437374660,"code":"class TranslationJob(val jobId: String, val status: String)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_616","timestamp":1745437374660,"code":"class Correction(val original: String, val suggestion: String, val isAccepted: Boolean)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_617","timestamp":1745437374660,"code":"class TokenCount(val text: String, val count: Int)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_618","timestamp":1745437374660,"code":"class TranslationSuggestion(val suggestion: String, val rank: Int)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_619","timestamp":1745437374660,"code":"class EmojiReaction(val userId: Int, val messageId: String, val emoji: String)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_620","timestamp":1745437374661,"code":"class MessagePair(val original: String, val translation: String)","category":"regular_class_for_data","topicUsed":"Language translation chat bot"}
{"id":"regular_class_for_data_621","timestamp":1745437381137,"code":"class Device(val id: String, val name: String, val powerRating: Double)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_622","timestamp":1745437381137,"code":"class EnergyUsage(val deviceId: String, val timestamp: Long, val kWh: Double)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_623","timestamp":1745437381137,"code":"class User(val userId: String, val username: String, val email: String)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_624","timestamp":1745437381137,"code":"class Location(val city: String, val building: String, val floor: Int)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_625","timestamp":1745437381137,"code":"class DashboardConfig(val theme: String, val refreshRateSeconds: Int)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_626","timestamp":1745437381137,"code":"class Alert(val alertId: String, val severity: String, val message: String)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_627","timestamp":1745437381137,"code":"class MeterReading(val meterId: String, val value: Double, val time: Long)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_628","timestamp":1745437381137,"code":"class Appliance(val name: String, val manufacturer: String)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_629","timestamp":1745437381137,"code":"class TariffBand(val name: String, val minKwh: Double, val maxKwh: Double, val price: Double)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_630","timestamp":1745437381137,"code":"class SolarPanel(val panelId: String, val capacity: Double, val status: String)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_631","timestamp":1745437381137,"code":"class EmissionReport(val facility: String, val totalCO2: Double, val period: String)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_632","timestamp":1745437381137,"code":"class PeakHour(val startHour: Int, val endHour: Int)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_633","timestamp":1745437381137,"code":"class EnergyGoal(val userId: String, val targetConsumption: Double)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_634","timestamp":1745437381137,"code":"class Battery(val capacity: Double, val currentCharge: Double)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_635","timestamp":1745437381137,"code":"class DataPoint(val value: Double, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_636","timestamp":1745437381137,"code":"class GridStatus(val gridId: String, val currentLoad: Double, val state: String)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_637","timestamp":1745437381137,"code":"class ConsumptionSummary(val startDate: String, val endDate: String, val totalKwh: Double)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_638","timestamp":1745437381137,"code":"class ApplianceUsage(val applianceName: String, val durationMinutes: Int, val kWh: Double)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_639","timestamp":1745437381137,"code":"class UpdateLog(val updateId: String, val message: String)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_640","timestamp":1745437381137,"code":"class Notification(val recipient: String, val title: String, val content: String)","category":"regular_class_for_data","topicUsed":"Energy consumption dashboard"}
{"id":"regular_class_for_data_641","timestamp":1745437394965,"code":"class Voter(val id: String, val name: String)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_642","timestamp":1745437394965,"code":"class Ballot(val ballotId: Int, val electionId: Int, val choices: List[String])","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_643","timestamp":1745437394965,"code":"class TallyResult(val option: String, val count: Int)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_644","timestamp":1745437394965,"code":"class Election(val eid: Long, val title: String)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_645","timestamp":1745437394965,"code":"class Vote(val voterId: String, val ballotId: Int, val selectedOption: String)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_646","timestamp":1745437394965,"code":"class Candidate(val candidateId: String, val displayName: String, val party: String)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_647","timestamp":1745437394965,"code":"class Precinct(val precinctId: Int, val registeredVoters: Int)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_648","timestamp":1745437394965,"code":"class BallotBox(val boxId: Int, val sealed: Boolean)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_649","timestamp":1745437394965,"code":"class ElectronicSubmission(val submissionId: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_650","timestamp":1745437394965,"code":"class VerificationRecord(val recordId: String, val ballotId: Int, val verified: Boolean)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_651","timestamp":1745437394965,"code":"class CountSummary(val totalVotes: Int, val validVotes: Int, val invalidVotes: Int)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_652","timestamp":1745437394965,"code":"class VotingMachine(val machineId: String, val precinctId: Int, val active: Boolean)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_653","timestamp":1745437394965,"code":"class AuditTrail(val auditId: String, val action: String, val performedBy: String)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_654","timestamp":1745437394965,"code":"class TabulationBatch(val batchId: Int, val ballotsCounted: Int)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_655","timestamp":1745437394965,"code":"class ElectoralDistrict(val districtId: String, val name: String, val precinctCount: Int)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_656","timestamp":1745437394965,"code":"class Judge(val judgeId: String, val name: String, val approval: Boolean)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_657","timestamp":1745437394965,"code":"class ResultSeal(val sealId: Int, val resultHash: String)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_658","timestamp":1745437394965,"code":"class SpoiledBallot(val ballotId: Int, val reason: String)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_659","timestamp":1745437394965,"code":"class DecryptionKey(val keyId: String, val issuedTo: String)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_660","timestamp":1745437394965,"code":"class CertificationReport(val reportId: String, val passed: Boolean, val issues: Int)","category":"regular_class_for_data","topicUsed":"Electronic voting tallying"}
{"id":"regular_class_for_data_661","timestamp":1745437400884,"code":"class Book(val title: String, val author: String, val isbn: String)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_662","timestamp":1745437400884,"code":"class User(val id: Int, val username: String, val email: String)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_663","timestamp":1745437400884,"code":"class SearchQuery(val keywords: String, val filters: Map[String, String])","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_664","timestamp":1745437400884,"code":"class SearchResult(val book: Book, val score: Double)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_665","timestamp":1745437400884,"code":"class LibraryBranch(val name: String, val address: String)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_666","timestamp":1745437400884,"code":"class BorrowRecord(val userId: Int, val bookId: String, val borrowDate: String, val dueDate: String)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_667","timestamp":1745437400884,"code":"class CatalogEntry(val catalogId: Long, val book: Book)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_668","timestamp":1745437400884,"code":"class Author(val firstName: String, val lastName: String, val birthYear: Option[Int])","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_669","timestamp":1745437400884,"code":"class Reservation(val user: User, val book: Book, val reservedDate: String)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_670","timestamp":1745437400884,"code":"class Category(val name: String, val description: String)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_671","timestamp":1745437400884,"code":"class DigitalResource(val resourceId: String, val link: String, val fileType: String)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_672","timestamp":1745437400884,"code":"class Rating(val userId: Int, val itemId: String, val score: Int)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_673","timestamp":1745437400884,"code":"class SearchHistory(val userId: Int, val queries: List[SearchQuery])","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_674","timestamp":1745437400884,"code":"class Tag(val name: String)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_675","timestamp":1745437400884,"code":"class Publisher(val name: String, val address: Option[String])","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_676","timestamp":1745437400884,"code":"class BookCopy(val barcode: String, val libraryBranch: LibraryBranch)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_677","timestamp":1745437400884,"code":"class FuzzyMatch(val input: String, val matched: String, val confidence: Double)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_678","timestamp":1745437400884,"code":"class SearchFilter(val field: String, val value: String)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_679","timestamp":1745437400884,"code":"class Loan(val bookCopy: BookCopy, val user: User, val from: String, val to: String)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_680","timestamp":1745437400884,"code":"class BookLocation(val shelf: String, val floor: Int, val position: Int)","category":"regular_class_for_data","topicUsed":"Digital library catalog search"}
{"id":"regular_class_for_data_681","timestamp":1745437418002,"code":"class TicketQR(val code: String, val eventId: Long)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_682","timestamp":1745437418002,"code":"class User(val id: Int, val name: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_683","timestamp":1745437418002,"code":"class Event(val id: Int, val title: String, val date: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_684","timestamp":1745437418002,"code":"class ValidationResult(val isValid: Boolean, val reason: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_685","timestamp":1745437418002,"code":"class QRScan(val scannerId: String, val qrCode: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_686","timestamp":1745437418002,"code":"class Ticket(val number: String, val holderName: String, val price: Double)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_687","timestamp":1745437418002,"code":"class Venue(val name: String, val address: String, val capacity: Int)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_688","timestamp":1745437418002,"code":"class Seat(val section: String, val row: Int, val seat: Int)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_689","timestamp":1745437418002,"code":"class ScanRecord(val userId: Int, val ticketQR: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_690","timestamp":1745437418002,"code":"class Device(val id: String, val location: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_691","timestamp":1745437418002,"code":"class Admin(val username: String, val email: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_692","timestamp":1745437418002,"code":"class QRValidationAttempt(val attemptId: Long, val time: Long)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_693","timestamp":1745437418002,"code":"class EntryGate(val gateId: String, val zone: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_694","timestamp":1745437418002,"code":"class TicketType(val code: String, val description: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_695","timestamp":1745437418002,"code":"class ValidationLog(val ticketQR: String, val status: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_696","timestamp":1745437418002,"code":"class Session(val sessionId: String, val event: String, val startTime: Long)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_697","timestamp":1745437418002,"code":"class QRIssue(val qrCode: String, val reason: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_698","timestamp":1745437418002,"code":"class Attendance(val qr: String, val userId: Int, val scanTime: Long)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_699","timestamp":1745437418002,"code":"class QRPayload(val ticketId: String, val encryptedData: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_700","timestamp":1745437418002,"code":"class ErrorResponse(val code: Int, val message: String)","category":"regular_class_for_data","topicUsed":"Event ticket QR validation"}
{"id":"regular_class_for_data_701","timestamp":1745437423195,"code":"class Coordinate(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_702","timestamp":1745437423195,"code":"class Waypoint(val x: Double, val y: Double, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_703","timestamp":1745437423195,"code":"class DeliveryLocation(val address: String, val coordinate: Coordinate)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_704","timestamp":1745437423195,"code":"class Drone(val id: String, val maxPayload: Double)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_705","timestamp":1745437423195,"code":"class Package(val packageId: String, val weight: Double, val dimensions: (Double, Double, Double))","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_706","timestamp":1745437423195,"code":"class DeliveryRequest(val requestId: String, val origin: Coordinate, val destination: Coordinate)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_707","timestamp":1745437423195,"code":"class FlightPath(val waypoints: List[Waypoint])","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_708","timestamp":1745437423195,"code":"class DeliveryZone(val zoneId: String, val boundary: List[Coordinate])","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_709","timestamp":1745437423195,"code":"class BatteryStatus(val level: Double, val isCharging: Boolean)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_710","timestamp":1745437423196,"code":"class OptimizedRoute(val path: List[Coordinate], val totalDistance: Double)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_711","timestamp":1745437423196,"code":"class BaseStation(val name: String, val location: Coordinate)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_712","timestamp":1745437423196,"code":"class WeatherCondition(val temperature: Double, val windSpeed: Double)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_713","timestamp":1745437423196,"code":"class NoFlyZone(val name: String, val coordinates: List[Coordinate])","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_714","timestamp":1745437423196,"code":"class PathSegment(val start: Coordinate, val end: Coordinate, val cost: Double)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_715","timestamp":1745437423196,"code":"class Delivery(val drone: Drone, val route: OptimizedRoute, val status: String)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_716","timestamp":1745437423196,"code":"class TimeWindow(val start: Long, val end: Long)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_717","timestamp":1745437423196,"code":"class Mission(val missionId: String, val deliveries: List[Delivery])","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_718","timestamp":1745437423196,"code":"class OptimizationResult(val route: OptimizedRoute, val estimatedTime: Double)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_719","timestamp":1745437423196,"code":"class Obstacle(val location: Coordinate, val radius: Double)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_720","timestamp":1745437423196,"code":"class RouteCheckpoint(val coordinate: Coordinate, val checkpointId: String)","category":"regular_class_for_data","topicUsed":"Drone delivery path optimization"}
{"id":"regular_class_for_data_721","timestamp":1745437431315,"code":"class Claim(val id: String, val policyNumber: String, val claimAmount: Double)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_722","timestamp":1745437431315,"code":"class InsuredPerson(val name: String, val dob: String, val email: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_723","timestamp":1745437431315,"code":"class Policy(val policyId: Long, val policyType: String, val premium: Double)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_724","timestamp":1745437431315,"code":"class Address(val street: String, val city: String, val zip: String, val country: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_725","timestamp":1745437431315,"code":"class Acknowledgement(val claimId: String, val status: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_726","timestamp":1745437431315,"code":"class ClaimSubmission(val userId: String, val date: String, val details: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_727","timestamp":1745437431315,"code":"class ClaimItem(val itemId: Long, val description: String, val value: Double)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_728","timestamp":1745437431315,"code":"class Agent(val agentId: String, val name: String, val branch: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_729","timestamp":1745437431315,"code":"class Document(val docId: String, val docType: String, val fileName: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_730","timestamp":1745437431315,"code":"class ContactInfo(val phone: String, val email: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_731","timestamp":1745437431315,"code":"class BankDetail(val bankName: String, val accountNumber: String, val ifsc: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_732","timestamp":1745437431315,"code":"class ClaimStatus(val claimId: String, val currentStatus: String, val lastUpdated: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_733","timestamp":1745437431315,"code":"class Beneficiary(val name: String, val relation: String, val contact: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_734","timestamp":1745437431315,"code":"class LossDetail(val reason: String, val reportedDate: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_735","timestamp":1745437431315,"code":"class Payment(val paymentId: String, val amount: Double, val mode: String, val date: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_736","timestamp":1745437431315,"code":"class Notification(val notificationId: Long, val recipient: String, val message: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_737","timestamp":1745437431315,"code":"class DamagePhoto(val photoId: String, val url: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_738","timestamp":1745437431315,"code":"class Coverage(val coverageType: String, val maxAmount: Double)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_739","timestamp":1745437431315,"code":"class VehicleInfo(val vin: String, val make: String, val model: String, val year: Int)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_740","timestamp":1745437431315,"code":"class UserCredential(val username: String, val password: String)","category":"regular_class_for_data","topicUsed":"Insurance claim submission portal"}
{"id":"regular_class_for_data_741","timestamp":1745437437244,"code":"class Student(val id: Int, val name: String, val enrolledCourses: List[Int])","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_742","timestamp":1745437437245,"code":"class ExamScore(val studentId: Int, val examId: Int, val score: Double)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_743","timestamp":1745437437245,"code":"class Course(val courseId: String, val title: String)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_744","timestamp":1745437437245,"code":"class AttendanceRecord(val studentId: Int, val sessionId: Int, val present: Boolean)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_745","timestamp":1745437437245,"code":"class AssignmentSubmission(val studentId: Int, val assignmentId: Int, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_746","timestamp":1745437437245,"code":"class LearningModule(val id: Int, val topic: String, val durationMinutes: Int)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_747","timestamp":1745437437245,"code":"class Feedback(val studentId: Int, val courseId: String, val rating: Int)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_748","timestamp":1745437437245,"code":"class ResourceUsage(val resourceId: String, val userId: Int, val timeSpentSeconds: Int)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_749","timestamp":1745437437245,"code":"class Teacher(val name: String, val employeeId: String, val subject: String)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_750","timestamp":1745437437245,"code":"class EngagementMetric(val studentId: Int, val week: Int, val activityCount: Int, val activeMinutes: Int)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_751","timestamp":1745437437245,"code":"class SessionParticipation(val participantId: Int, val sessionId: Int, val joined: Boolean)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_752","timestamp":1745437437245,"code":"class QuizAttempt(val userId: Int, val quizId: Int, val correctAnswers: Int, val totalQuestions: Int)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_753","timestamp":1745437437245,"code":"class Grade(val student: String, val course: String, val gradeLetter: String)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_754","timestamp":1745437437245,"code":"class LearningPath(val pathId: Int, val description: String, val modules: List[Int])","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_755","timestamp":1745437437245,"code":"class Progress(val studentId: Int, val moduleId: Int, val percentComplete: Double)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_756","timestamp":1745437437245,"code":"class DiscussionPost(val postId: Int, val authorId: Int, val content: String, val upvotes: Int)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_757","timestamp":1745437437245,"code":"class Badge(val badgeId: String, val recipientId: Int, val awardedDate: Long)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_758","timestamp":1745437437245,"code":"class SurveyResponse(val responseId: Int, val userId: Int, val answers: List[String])","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_759","timestamp":1745437437245,"code":"class Enrollment(val studentId: Int, val courseId: String, val enrollDate: Long)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_760","timestamp":1745437437245,"code":"class LearningEvent(val eventId: Long, val userId: Int, val action: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Education learning analytics"}
{"id":"regular_class_for_data_761","timestamp":1745437443443,"code":"class User(val id: Int, val name: String, val preferences: List[String])","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_762","timestamp":1745437443443,"code":"class Recipe(val recipeId: String, val title: String, val ingredients: List[String])","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_763","timestamp":1745437443443,"code":"class Rating(val userId: Int, val recipeId: String, val score: Double)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_764","timestamp":1745437443443,"code":"class Ingredient(val name: String, val amount: Double, val unit: String)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_765","timestamp":1745437443443,"code":"class DietaryRestriction(val userId: Int, val restrictions: Set[String])","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_766","timestamp":1745437443443,"code":"class CuisineData(val cuisine: String, val popularity: Int)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_767","timestamp":1745437443443,"code":"class Recommendation(val userId: Int, val recommendedRecipeIds: Seq[String])","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_768","timestamp":1745437443443,"code":"class MealPlan(val userId: Int, val recipes: Seq[String], val days: Int)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_769","timestamp":1745437443443,"code":"class Feedback(val userId: Int, val recipeId: String, val notes: String)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_770","timestamp":1745437443443,"code":"class Session(val sessionId: String, val userId: Int, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_771","timestamp":1745437443443,"code":"class Favorite(val userId: Int, val recipeId: String)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_772","timestamp":1745437443443,"code":"class RecipeTag(val recipeId: String, val tag: String)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_773","timestamp":1745437443443,"code":"class NutritionFacts(val recipeId: String, val calories: Double, val protein: Double, val fat: Double)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_774","timestamp":1745437443443,"code":"class ShoppingList(val userId: Int, val items: List[String])","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_775","timestamp":1745437443443,"code":"class TimeSlot(val day: String, val meal: String)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_776","timestamp":1745437443443,"code":"class CookingHistory(val userId: Int, val recipeId: String, val cookedAt: Long)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_777","timestamp":1745437443443,"code":"class ExcludedIngredients(val userId: Int, val excluded: List[String])","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_778","timestamp":1745437443443,"code":"class RecipeSimilarity(val recipeIdA: String, val recipeIdB: String, val similarity: Double)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_779","timestamp":1745437443443,"code":"class UserProfile(val id: Int, val allergies: Set[String])","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_780","timestamp":1745437443443,"code":"class RecipeRating(val recipeId: String, val averageRating: Double, val numRatings: Int)","category":"regular_class_for_data","topicUsed":"Personalized recipe recommender"}
{"id":"regular_class_for_data_781","timestamp":1745437453000,"code":"class Donor(val id: Int, val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_782","timestamp":1745437453000,"code":"class Donation(val donorId: Int, val amount: Double, val date: String, val charityId: Int)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_783","timestamp":1745437453000,"code":"class Charity(val charityId: Int, val name: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_784","timestamp":1745437453000,"code":"class Campaign(val title: String, val goal: Double, val charityId: Int)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_785","timestamp":1745437453000,"code":"class Transaction(val tid: Long, val userId: Int, val amount: Double, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_786","timestamp":1745437453000,"code":"class UserProfile(val userId: Int, val displayName: String, val avatarUrl: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_787","timestamp":1745437453000,"code":"class PaymentMethod(val methodId: Int, val methodType: String, val lastFour: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_788","timestamp":1745437453000,"code":"class Fundraiser(val fundraiserId: Int, val organizerId: Int, val description: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_789","timestamp":1745437453000,"code":"class Address(val street: String, val city: String, val postcode: String, val country: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_790","timestamp":1745437453000,"code":"class AnonymousDonation(val amount: Double, val date: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_791","timestamp":1745437453000,"code":"class Category(val id: Int, val label: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_792","timestamp":1745437453000,"code":"class GiftAidClaim(val claimId: Long, val donationId: Int, val status: String, val claimedAt: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_793","timestamp":1745437453000,"code":"class Event(val eventId: Int, val name: String, val date: String, val location: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_794","timestamp":1745437453000,"code":"class BankAccount(val accountNumber: String, val sortCode: String, val ownerName: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_795","timestamp":1745437453000,"code":"class Volunteer(val id: Int, val fullName: String, val daysAvailable: List[String])","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_796","timestamp":1745437453000,"code":"class MatchingDonation(val matchingId: Long, val originalDonationId: Int, val matchedAmount: Double)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_797","timestamp":1745437453000,"code":"class EmailReceipt(val to: String, val subject: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_798","timestamp":1745437453000,"code":"class ImpactReport(val reportId: Int, val charityId: Int, val summary: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_799","timestamp":1745437453000,"code":"class RecurringDonation(val donorId: Int, val amount: Double, val frequency: String, val nextPayment: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_800","timestamp":1745437453000,"code":"class Payout(val charityId: Int, val totalAmount: Double, val dateIssued: String)","category":"regular_class_for_data","topicUsed":"Charity donation platform"}
{"id":"regular_class_for_data_801","timestamp":1745437457900,"code":"class Team(val name: String, val city: String)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_802","timestamp":1745437457900,"code":"class Player(val id: Int, val name: String, val position: String)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_803","timestamp":1745437457900,"code":"class Match(val homeTeam: String, val awayTeam: String, val startTime: Long)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_804","timestamp":1745437457900,"code":"class LiveScore(val matchId: Int, val homeScore: Int, val awayScore: Int)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_805","timestamp":1745437457900,"code":"class GoalEvent(val matchId: Int, val scorer: String, val minute: Int)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_806","timestamp":1745437457900,"code":"class Subscriber(val email: String, val subscribedMatchId: Int)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_807","timestamp":1745437457900,"code":"class Commentary(val matchId: Int, val comment: String, val time: Long)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_808","timestamp":1745437457900,"code":"class FoulEvent(val matchId: Int, val player: String, val minute: Int)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_809","timestamp":1745437457900,"code":"class CardEvent(val matchId: Int, val player: String, val cardType: String, val minute: Int)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_810","timestamp":1745437457900,"code":"class Substitution(val matchId: Int, val playerOut: String, val playerIn: String, val minute: Int)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_811","timestamp":1745437457900,"code":"class UpdateMessage(val matchId: Int, val content: String, val timestamp: Long)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_812","timestamp":1745437457900,"code":"class Referee(val name: String, val experienceYears: Int)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_813","timestamp":1745437457900,"code":"class Period(val startMinute: Int, val endMinute: Int)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_814","timestamp":1745437457900,"code":"class Venue(val venueName: String, val capacity: Int)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_815","timestamp":1745437457900,"code":"class UserPreference(val userId: Int, val prefersDarkMode: Boolean)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_816","timestamp":1745437457900,"code":"class ConnectionInfo(val userId: Int, val connectedAt: Long)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_817","timestamp":1745437457900,"code":"class Reaction(val matchId: Int, val emoji: String, val userId: Int)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_818","timestamp":1745437457900,"code":"class League(val name: String, val country: String, val season: String)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_819","timestamp":1745437457900,"code":"class Notification(val userId: Int, val matchId: Int, val message: String)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_820","timestamp":1745437457900,"code":"class MatchSummary(val matchId: Int, val totalGoals: Int, val topScorer: String)","category":"regular_class_for_data","topicUsed":"Sports score live updating"}
{"id":"regular_class_for_data_821","timestamp":1745437462955,"code":"class Car(val id: Int, val make: String, val model: String, val year: Int)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_822","timestamp":1745437462955,"code":"class Customer(val customerId: Long, val name: String, val email: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_823","timestamp":1745437462955,"code":"class Rental(val rentalId: Int, val car: Car, val customer: Customer, val days: Int)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_824","timestamp":1745437462955,"code":"class Location(val code: String, val city: String, val country: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_825","timestamp":1745437462955,"code":"class Booking(val bookingId: String, val carId: Int, val pickUp: Location, val dropOff: Location)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_826","timestamp":1745437462955,"code":"class Payment(val paymentId: Long, val bookingId: String, val amount: Double)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_827","timestamp":1745437462955,"code":"class FleetManager(val name: String, val employeeId: Int)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_828","timestamp":1745437462955,"code":"class Inspection(val inspectionId: Int, val carId: Int, val date: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_829","timestamp":1745437462955,"code":"class InsurancePolicy(val policyNumber: String, val carId: Int, val validUntil: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_830","timestamp":1745437462955,"code":"class FuelRecord(val recordId: Int, val carId: Int, val liters: Double, val date: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_831","timestamp":1745437462955,"code":"class MaintenanceRequest(val requestId: Int, val carId: Int, val description: String, val reportedOn: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_832","timestamp":1745437462955,"code":"class DamageReport(val reportId: String, val carId: Int, val notes: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_833","timestamp":1745437462955,"code":"class LoyaltyAccount(val customerId: Long, val points: Int)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_834","timestamp":1745437462955,"code":"class GPSLocation(val latitude: Double, val longitude: Double)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_835","timestamp":1745437462955,"code":"class Driver(val driverId: Int, val name: String, val licenseNumber: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_836","timestamp":1745437462955,"code":"class Fleet(val cars: List[Car], val location: Location)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_837","timestamp":1745437462955,"code":"class Promotion(val code: String, val discountPercentage: Double, val validUntil: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_838","timestamp":1745437462955,"code":"class Availability(val carId: Int, val availableFrom: String, val availableTo: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_839","timestamp":1745437462955,"code":"class ContactInfo(val phone: String, val email: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"regular_class_for_data_840","timestamp":1745437462955,"code":"class Reservation(val reservationId: String, val customerId: Long, val carId: Int, val startDate: String, val endDate: String)","category":"regular_class_for_data","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_1","timestamp":1745437474014,"code":"class Cart(var items: List[String])\nval cart: Cart = null\nif (cart == null) println(\"Cart not found.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_2","timestamp":1745437474014,"code":"def findCustomerById(id: String): String = {\n  if (id == \"\") null else \"CustomerName\"\n}","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_3","timestamp":1745437474014,"code":"var discountCode: String = null\ndiscountCode = System.getenv(\"DISCOUNT_CODE\")\nif (discountCode != null) println(\"Applying discount.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_4","timestamp":1745437474014,"code":"def getShippingAddress(userId: String): String = {\n  null\n}\nval addr = getShippingAddress(\"123\")\nif (addr == null) println(\"No address found.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_5","timestamp":1745437474014,"code":"class Payment(val method: String)\nvar payment: Payment = null\npayment = new Payment(\"CreditCard\")\nif (payment != null) println(payment.method)","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_6","timestamp":1745437474014,"code":"def retrieveOrder(orderId: Int): Order = null\nclass Order(val total: Double)\nval o = retrieveOrder(42)\nif (o == null) println(\"Order not found.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_7","timestamp":1745437474014,"code":"var coupon: String = null\nif (coupon == null) println(\"No coupon applied.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_8","timestamp":1745437474014,"code":"def queryInventory(productId: String): Integer = {\n  null\n}\nval qty = queryInventory(\"abc\")\nif (qty == null) println(\"Not in stock.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_9","timestamp":1745437474014,"code":"val paymentGatewayResponse: String = null\nif (paymentGatewayResponse == null) println(\"No response from gateway.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_10","timestamp":1745437474014,"code":"var billingInfo: String = null\nif (billingInfo eq null) println(\"Missing billing info.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_11","timestamp":1745437474014,"code":"def getLoyaltyPoints(user: String): java.lang.Integer = null\nval points = getLoyaltyPoints(\"bob\")\nif (points != null) println(s\"Points: $points\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_12","timestamp":1745437474014,"code":"var deliveryEstimate: String = null\ndeliveryEstimate = \"2-3 days\"\nif (deliveryEstimate != null) println(deliveryEstimate)","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_13","timestamp":1745437474014,"code":"class Shipping(val address: String)\ndef findShippingForOrder(order: Int): Shipping = null\nval ship = findShippingForOrder(123)\nif (ship == null) println(\"No shipping info.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_14","timestamp":1745437474014,"code":"val checkoutError: String = null\nif (checkoutError != null) println(checkoutError)","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_15","timestamp":1745437474014,"code":"def getGiftWrapMessage(orderId: Int): String = null\nval message = getGiftWrapMessage(77)\nif (message == null) println(\"No gift wrap.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_16","timestamp":1745437474014,"code":"var refundAmount: java.lang.Double = null\nif (refundAmount == null) println(\"No refund.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_17","timestamp":1745437474014,"code":"def fetchSavedCards(userId: Int): Array[String] = null\nval cards = fetchSavedCards(1)\nif (cards != null) println(cards.length)","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_18","timestamp":1745437474014,"code":"var altShippingAddress: String = null\naltShippingAddress = \"456 Lane\"\nif (altShippingAddress != null) println(altShippingAddress)","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_19","timestamp":1745437474014,"code":"def getPromoBanner(cartValue: Double): String = {\n  if (cartValue > 100) null else \"Spring Sale!\"\n}\nval banner = getPromoBanner(150.0)\nif (banner == null) println(\"No banner.\")","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_20","timestamp":1745437474014,"code":"val fraudDetected: java.lang.Boolean = null\nif (fraudDetected == null) println(\"Fraud check not done yet.\")\n","category":"uses_null_check","topicUsed":"E-commerce checkout"}
{"id":"uses_null_check_21","timestamp":1745437482820,"code":"var sessionToken: String = null\nif (sessionToken == null) {\n  println(\"User is not logged in.\")\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_22","timestamp":1745437482820,"code":"def getAccountBalance(userId: String): java.lang.Double = {\n  null\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_23","timestamp":1745437482820,"code":"class UserProfile(val username: String) {\n  var phoneNumber: String = null\n}\nval user = new UserProfile(\"alice\")\nif (user.phoneNumber != null) {\n  println(user.phoneNumber)\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_24","timestamp":1745437482820,"code":"var recentTransaction: String = null\nrecentTransaction = \"Payment to Supermarket\"\nrecentTransaction = null","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_25","timestamp":1745437482820,"code":"def findCard(cardNumber: String): String = {\n  if (cardNumber == \"1234\") \"Credit Card\"\n  else null\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_26","timestamp":1745437482820,"code":"val biometricFallback: String = null\nif (biometricFallback == null) println(\"No fallback for biometric auth\")","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_27","timestamp":1745437482820,"code":"def getTransactionDetails(id: Int): Map[String, String] = {\n  null\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_28","timestamp":1745437482820,"code":"var linkedAccounts: List[String] = null\nif (linkedAccounts == null) {\n  println(\"No linked accounts.\")\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_29","timestamp":1745437482820,"code":"def authenticateUser(email: String, password: String): String = {\n  null\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_30","timestamp":1745437482820,"code":"var lastLoginTime: java.time.LocalDateTime = null\nlastLoginTime = java.time.LocalDateTime.now\nlastLoginTime = null","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_31","timestamp":1745437482820,"code":"def findStatement(month: Int): String = {\n  if (month < 1 || month > 12) null else s\"Statement for $month\"\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_32","timestamp":1745437482820,"code":"var lastError: Exception = null\ntry {\n  throw new RuntimeException(\"Failed\")\n} catch {\n  case ex: Exception => lastError = ex\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_33","timestamp":1745437482820,"code":"class Address(var city: String, var street: String)\nvar billingAddress: Address = null\nif (billingAddress == null) println(\"Billing address is not set.\")","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_34","timestamp":1745437482820,"code":"def requestLoan(userId: String, amount: Double): String = {\n  null\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_35","timestamp":1745437482820,"code":"var currentSession: String = null\nif (currentSession == null) {\n  currentSession = \"active-session-1\"\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_36","timestamp":1745437482820,"code":"def getOfferForUser(userId: String): String = {\n  null\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_37","timestamp":1745437482820,"code":"var backupContact: String = null\nif (backupContact != null) {\n  println(s\"Backup contact: $backupContact\")\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_38","timestamp":1745437482820,"code":"class Device(\n  val id: String,\n  var pushToken: String\n)\nval device = new Device(\"DEV123\", null)\nif (device.pushToken == null) {\n  println(\"Push not enabled\")\n}","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_39","timestamp":1745437482820,"code":"def fetchPaymentHistory(userId: String): List[String] = null","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_40","timestamp":1745437482820,"code":"var overdraftNotice: String = null\noverdraftNotice = \"You are overdrawn!\"\noverdraftNotice = null","category":"uses_null_check","topicUsed":"Mobile banking app"}
{"id":"uses_null_check_41","timestamp":1745437494455,"code":"class Patient(var nextAppointment: String)\nval patient = new Patient(null)\nif (patient.nextAppointment == null) {\n  println(\"No appointment scheduled.\")\n}","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_42","timestamp":1745437494455,"code":"var appointmentTime: String = null\nif (appointmentTime == null) {\n  appointmentTime = \"2024-07-01 14:00\"\n}","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_43","timestamp":1745437494455,"code":"def getDoctorEmail(doctorId: Int): String = null\nval email = getDoctorEmail(23)\nif (email != null) println(email)","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_44","timestamp":1745437494455,"code":"val scheduler: Scheduler = null\nif (scheduler == null) println(\"Scheduler not initialized\")","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_45","timestamp":1745437494455,"code":"class TelemedicineSession(var link: String)\nval session = new TelemedicineSession(null)\nif (session.link != null) println(session.link)","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_46","timestamp":1745437494455,"code":"var notes: String = _\nif (notes == null) notes = \"No notes yet.\"","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_47","timestamp":1745437494455,"code":"def findAppointmentById(id: String): Appointment = null\nval appt = findAppointmentById(\"APPT123\")\nif (appt eq null) println(\"Appointment not found\")","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_48","timestamp":1745437494455,"code":"val patientName: String = null\nif (patientName == null) println(\"Missing patient name.\")","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_49","timestamp":1745437494455,"code":"class Doctor(val specialty: String, var nextSlot: String)\nval d = new Doctor(\"Cardiology\", null)\nif (d.nextSlot == null) d.nextSlot = \"2024-09-13T09:00\"","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_50","timestamp":1745437494455,"code":"def getPatientRecord(patientId: Int): PatientRecord = null\nval record = getPatientRecord(1001)\nif (record != null) println(record)","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_51","timestamp":1745437494455,"code":"var videoSessionUrl: String = null\nvideoSessionUrl = getSessionUrlForAppointment(856)\nif (videoSessionUrl == null) println(\"No session URL generated.\")\ndef getSessionUrlForAppointment(id: Int): String = null","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_52","timestamp":1745437494455,"code":"class Appointment(var time: String)\nval appt1: Appointment = null\nif (appt1 == null) println(\"The appointment is missing.\")","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_53","timestamp":1745437494455,"code":"val preferredLanguage: String = null\nif (preferredLanguage != null) {\n  setLocale(preferredLanguage)\n}\ndef setLocale(lang: String): Unit = ()","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_54","timestamp":1745437494455,"code":"def findAvailableSlot(doctor: String, date: String): String = null\nval slot = findAvailableSlot(\"Dr.Smith\", \"2024-07-03\")\nif (slot == null) println(\"No available slot.\")","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_55","timestamp":1745437494455,"code":"class Slot(var reservedBy: String)\nval slot = new Slot(null)\nif (slot.reservedBy == null) println(\"Slot is free.\")","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_56","timestamp":1745437494455,"code":"var confirmationNumber: String = _\nif (confirmationNumber == null) confirmationNumber = \"PENDING\"","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_57","timestamp":1745437494455,"code":"def retrieveAppointmentSummary(id: String): String = null\nval summary = retrieveAppointmentSummary(\"APPT001\")\nif (summary == null) println(\"No summary available.\")","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_58","timestamp":1745437494455,"code":"var sessionToken: String = null\nif (sessionToken == null) {\n  sessionToken = generateSessionToken()\n}\ndef generateSessionToken(): String = \"token-abc123\"","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_59","timestamp":1745437494455,"code":"class Reminder(var sentAt: String)\nval reminder = new Reminder(null)\nif (reminder.sentAt == null) println(\"Reminder not sent.\")","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_60","timestamp":1745437494455,"code":"val address: String = null\nif (address != null) {\n  println(\"Patient address: \" + address)\n}","category":"uses_null_check","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_null_check_61","timestamp":1745437510268,"code":"var calories: Integer = null\nif (calories == null) println(\"Calories data missing.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_62","timestamp":1745437510268,"code":"def getHeartRate(userId: String): java.lang.Integer = null\nval hr = getHeartRate(\"alice\")\nif (hr != null) println(s\"Heart rate: $hr\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_63","timestamp":1745437510268,"code":"var stepsToday: Int = 0\nval rawSteps: java.lang.Integer = null\nif (rawSteps != null) stepsToday = rawSteps else stepsToday = -1","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_64","timestamp":1745437510268,"code":"val distance: java.lang.Double = null\nif (distance != null) println(s\"Distance: $distance km\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_65","timestamp":1745437510268,"code":"def findMaxSteps(day: String): java.lang.Integer = null\nif (findMaxSteps(\"Monday\") == null) println(\"No step data.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_66","timestamp":1745437510268,"code":"class Session(val startTime: String, val endTime: String)\nval session: Session = null\nif (session == null) println(\"No session available.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_67","timestamp":1745437510268,"code":"def getSleepDuration(userId: String): java.lang.Double = null\nval sleep = getSleepDuration(\"u123\")\nif (sleep != null) println(s\"Sleep: $sleep h\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_68","timestamp":1745437510268,"code":"var activeMinutes: java.lang.Integer = null\nif (activeMinutes eq null) activeMinutes = 0","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_69","timestamp":1745437510268,"code":"def retrieveWeight(date: String): java.lang.Double = null\nval w = retrieveWeight(\"2024-06-17\")\nif (w == null) println(\"Weight missing.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_70","timestamp":1745437510268,"code":"val elevation: java.lang.Double = null\nif (elevation != null) println(f\"Elevation gain: $elevation%.1f m\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_71","timestamp":1745437510268,"code":"def getLastWorkout(user: String): String = null\nval workout = getLastWorkout(\"bob\")\nif (workout == null) println(\"No workout logged.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_72","timestamp":1745437510268,"code":"var hydrationLevel: java.lang.Double = null\nif (hydrationLevel == null) println(\"Hydration data unavailable.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_73","timestamp":1745437510268,"code":"def heartZone(minutes: Int): String = null\nval zone = heartZone(25)\nif (zone != null) println(s\"Zone: $zone\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_74","timestamp":1745437510268,"code":"val restingHR: java.lang.Integer = null\nif (restingHR == null) println(\"Resting HR not tracked.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_75","timestamp":1745437510268,"code":"class Tracker(var batteryLevel: java.lang.Double)\nval t = new Tracker(null)\nif (t.batteryLevel != null) println(s\"Battery: ${t.batteryLevel}\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_76","timestamp":1745437510268,"code":"def stressScore(userId: Int): java.lang.Double = null\nif (stressScore(42) == null) println(\"No stress data.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_77","timestamp":1745437510268,"code":"var latestSync: String = null\nif (latestSync eq null) println(\"Device never synced.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_78","timestamp":1745437510268,"code":"def getStepGoal(userId: String): java.lang.Integer = null\nval goal = getStepGoal(\"eve\")\nif (goal != null) println(s\"Goal: $goal steps\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_79","timestamp":1745437510268,"code":"val lastLocation: String = null\nif (lastLocation == null) println(\"No GPS location available.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_80","timestamp":1745437510268,"code":"def getCaloriesBurned(sessionId: String): java.lang.Integer = null\nval burned = getCaloriesBurned(\"sess-9\")\nif (burned eq null) println(\"Calorie data missing.\")","category":"uses_null_check","topicUsed":"Fitness tracker analytics"}
{"id":"uses_null_check_81","timestamp":1745437519519,"code":"case class PricingPlan(id: String, name: String)\n\nvar activePlan: PricingPlan = null\nif (activePlan == null) {\n  println(\"No active pricing plan\")\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_82","timestamp":1745437519519,"code":"def findPlanById(planId: String): PricingPlan = {\n  val plan = PricingPlanRepository.getById(planId)\n  if (plan == null) return null\n  plan\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_83","timestamp":1745437519519,"code":"val price: java.lang.Double = null\nif (price != null && price > 0.0) {\n  println(\"Valid price\")\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_84","timestamp":1745437519519,"code":"class PlanFeature(val name: String, var description: String)\n\nval feature: PlanFeature = null\nif (feature == null) println(\"Feature missing\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_85","timestamp":1745437519519,"code":"def getPlanName(plan: PricingPlan): String = {\n  if (plan == null) null\n  else plan.name\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_86","timestamp":1745437519519,"code":"var discount: java.lang.Double = null\nif (discount == null) {\n  discount = 0.0\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_87","timestamp":1745437519519,"code":"def createPlanIfNotExists(planId: String): PricingPlan = {\n  val found = PricingPlanRepository.getById(planId)\n  if (found != null) found else PricingPlan(planId, \"Default\")\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_88","timestamp":1745437519519,"code":"val plans: Array[PricingPlan] = null\nif (plans != null) {\n  println(plans.length)\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_89","timestamp":1745437519519,"code":"def upgradeToPremium(userId: String): String = {\n  val user = UserRepository.getUser(userId)\n  if (user == null) return null\n  \"Upgraded\"\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_90","timestamp":1745437519519,"code":"var currentPlanId: String = null\ncurrentPlanId = \"basic-plan\"\nif (currentPlanId != null) println(currentPlanId)","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_91","timestamp":1745437519519,"code":"def removePlan(plan: PricingPlan): Boolean = {\n  if (plan == null) false\n  else PricingPlanRepository.delete(plan.id)\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_92","timestamp":1745437519519,"code":"case class Price(amount: Double)\nvar planPrice: Price = null\nif (planPrice == null) {\n  planPrice = Price(9.99)\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_93","timestamp":1745437519519,"code":"def getPlanFeatures(planId: String): java.util.List[String] = {\n  val features = JavaFeatureService.getFeatures(planId)\n  if (features == null) java.util.Collections.emptyList() else features\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_94","timestamp":1745437519519,"code":"val planManager: PlanManager = null\nif (planManager != null) {\n  planManager.enablePlan(\"premium\")\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_95","timestamp":1745437519519,"code":"class PlanDetails(var pageUrl: String)\nvar details: PlanDetails = null\ndetails = new PlanDetails(\"/pricing/basic\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_96","timestamp":1745437519519,"code":"def findFirstActivePlan(plans: List[PricingPlan]): PricingPlan = {\n  plans.find(_ != null).orNull\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_97","timestamp":1745437519519,"code":"var status: String = null\nstatus = \"active\"\nif (status == null) println(\"Unknown status\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_98","timestamp":1745437519519,"code":"def getPlanOrDefault(planId: String): PricingPlan = {\n  val plan = PricingPlanRepository.getById(planId)\n  if (plan == null) PricingPlan(\"default\", \"Default Plan\") else plan\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_99","timestamp":1745437519519,"code":"class Subscription(var plan: PricingPlan)\nvar subscription: Subscription = null\nif (subscription == null) {\n  subscription = new Subscription(null)\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_100","timestamp":1745437519519,"code":"def planExists(planId: String): Boolean = {\n  val plan = PricingPlanRepository.getById(planId)\n  plan != null\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_null_check_101","timestamp":1745437526852,"code":"var thermostatStatus: String = null\nif (thermostatStatus == null) println(\"Thermostat status unknown.\")","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_102","timestamp":1745437526852,"code":"def getDeviceByName(name: String): SmartDevice = {\n  if (name.isEmpty) null else new SmartDevice(name)\n}","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_103","timestamp":1745437526852,"code":"var activeCamera: Camera = null\nif (activeCamera != null) activeCamera.record()","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_104","timestamp":1745437526852,"code":"val lightStatus: String = null\nif (lightStatus == null) println(\"Light is disconnected.\") else println(lightStatus)","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_105","timestamp":1745437526852,"code":"def getHumiditySensor(room: String): HumiditySensor = {\n  null\n}","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_106","timestamp":1745437526852,"code":"class Scene(var script: String)\nval eveningScene: Scene = null\nif (eveningScene != null) println(eveningScene.script)","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_107","timestamp":1745437526852,"code":"var speaker: Speaker = null\nif (speaker == null) speaker = new Speaker(\"KitchenSpeaker\")","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_108","timestamp":1745437526852,"code":"def cameraFeed(camera: Camera): String = {\n  if (camera == null) null else camera.openStream()\n}","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_109","timestamp":1745437526852,"code":"val washer: Washer = null\nif (washer != null) washer.start()\nelse println(\"No washer found.\")","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_110","timestamp":1745437526852,"code":"def retrieveDoorLock(serial: String): DoorLock = {\n  if (serial == \"\") null else DoorLockLookup.find(serial)\n}","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_111","timestamp":1745437526852,"code":"var temperature: java.lang.Double = null\nif (temperature == null) println(\"Temperature not available.\")","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_112","timestamp":1745437526852,"code":"def getSmartPlug(id: Int): SmartPlug = {\n  if (id > 100) null else SmartPlugPool(id)\n}","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_113","timestamp":1745437526852,"code":"var alarm: AlarmSystem = null\nif (alarm != null) alarm.arm()","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_114","timestamp":1745437526852,"code":"val airQualityMonitor: AirQualityMonitor = null\nif (airQualityMonitor == null) println(\"Monitor offline.\")","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_115","timestamp":1745437526852,"code":"def getBlindsController(zone: String): BlindsController = {\n  if (zone == \"living\") new BlindsController else null\n}","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_116","timestamp":1745437526852,"code":"var fan: Fan = null\nif (fan != null) fan.speedUp()\nelse println(\"No fan connected.\")","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_117","timestamp":1745437526852,"code":"def getConnectedDevices: Array[SmartDevice] = null","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_118","timestamp":1745437526852,"code":"val connectedRobotVacuum: RobotVacuum = null\nif (connectedRobotVacuum != null) connectedRobotVacuum.cleanRoom(\"hallway\")","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_119","timestamp":1745437526852,"code":"var motionSensor: MotionSensor = null\nif (motionSensor == null) println(\"Sensor error.\")","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_120","timestamp":1745437526852,"code":"def findOutletByLocation(loc: String): SmartOutlet = {\n  HardwareRegistry.lookupOutlet(loc) // might return null\n}","category":"uses_null_check","topicUsed":"Smart home device control"}
{"id":"uses_null_check_121","timestamp":1745437534783,"code":"case class Driver(id: String, location: String)\nvar activeDriver: Driver = null\nif (activeDriver == null) println(\"No driver assigned.\")","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_122","timestamp":1745437534783,"code":"def findPassenger(id: String): String = {\n  if (id.isEmpty) null else s\"Passenger-$id\"\n}","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_123","timestamp":1745437534783,"code":"val currentRideId: String = null\nif (currentRideId != null) println(s\"Processing ride $currentRideId\")","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_124","timestamp":1745437534783,"code":"var dispatchStatus: String = null\ndispatchStatus = \"pending\"","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_125","timestamp":1745437534783,"code":"class Car(val plate: String)\nvar assignedCar: Car = null\nif (assignedCar == null) println(\"Assigning a car...\")","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_126","timestamp":1745437534783,"code":"def getDriverLocation(driverId: String): String = null\nval loc = getDriverLocation(\"d1\")\nif (loc == null) println(\"Driver location unknown.\")","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_127","timestamp":1745437534783,"code":"case class DispatchRequest(driverId: String, passengerId: String)\nvar request: DispatchRequest = null\nif (request != null) println(\"Dispatch in progress.\")","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_128","timestamp":1745437534783,"code":"def lookupRideRequest(requestId: String): DispatchRequest = null","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_129","timestamp":1745437534783,"code":"val passengerPhone: String = null\nif (passengerPhone == null) println(\"Contact info missing.\")","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_130","timestamp":1745437534783,"code":"def cancelRide(rideId: String): String = {\n  if (rideId == null) \"No ride to cancel\" else \"Ride cancelled\"\n}","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_131","timestamp":1745437534783,"code":"var rideMatched: Boolean = false\nif (!rideMatched) rideMatched = null.asInstanceOf[Boolean]","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_132","timestamp":1745437534784,"code":"def assignDriver(passengerId: String): Driver = null\nval d = assignDriver(\"123\")\nif (d == null) println(\"No available driver.\")","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_133","timestamp":1745437534784,"code":"var dropoffLocation: String = null\ndropoffLocation = \"Airport Terminal 2\"","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_134","timestamp":1745437534784,"code":"def getNearbyDrivers(location: String): List[Driver] = null","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_135","timestamp":1745437534784,"code":"var rideStartTime: java.time.LocalDateTime = null\nrideStartTime = java.time.LocalDateTime.now()","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_136","timestamp":1745437534784,"code":"val fareEstimate: java.math.BigDecimal = null\nif (fareEstimate != null) println(fareEstimate.toPlainString)","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_137","timestamp":1745437534784,"code":"def getCarType(driverId: String): String = null","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_138","timestamp":1745437534784,"code":"var pickupTime: Long = 0L\nif (pickupTime == 0L) pickupTime = null.asInstanceOf[Long]","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_139","timestamp":1745437534784,"code":"def javaGeoLookup(address: String): String = null\nval geoPoint = javaGeoLookup(\"Some address\")\nif (geoPoint == null) println(\"Cannot locate address.\")","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_140","timestamp":1745437534784,"code":"var currentDispatcher: String = null\nif (currentDispatcher == null) currentDispatcher = \"dispatcher1\"","category":"uses_null_check","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_null_check_141","timestamp":1745437543646,"code":"class Passenger(var name: String, var passportNumber: String)\nvar currentPassenger: Passenger = null\nif (currentPassenger == null) println(\"No passenger assigned.\")","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_142","timestamp":1745437543646,"code":"def findBooking(reference: String): Booking = {\n  null\n}","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_143","timestamp":1745437543646,"code":"var seatNumber: String = null\nif (seatNumber != null) println(seatNumber)\n","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_144","timestamp":1745437543646,"code":"class Flight(val flightNo: String, val destination: String)\nvar nextFlight: Flight = null\nif (nextFlight == null) println(\"No next flight.\")","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_145","timestamp":1745437543646,"code":"def getTicket(id: Int): Ticket = {\n  if (id > 0) new Ticket(id)\n  else null\n}","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_146","timestamp":1745437543646,"code":"class Meal(val menu: String)\nvar specialMeal: Meal = null\nif (specialMeal == null) println(\"No special meal provided.\")","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_147","timestamp":1745437543646,"code":"val assignedGate: String = null\nif (assignedGate == null) println(\"Gate not assigned yet.\")","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_148","timestamp":1745437543646,"code":"def getLuggageTag(passengerId: Int): String = {\n  null\n}","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_149","timestamp":1745437543646,"code":"var loungeAccess: Boolean = false\nvar loungeDetails: String = null\nif (loungeAccess && loungeDetails != null) println(loungeDetails)","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_150","timestamp":1745437543646,"code":"def getFrequentFlyerStatus(passenger: Passenger): String = {\n  null\n}","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_151","timestamp":1745437543646,"code":"class Baggage(val weight: Double)\nval baggage: Baggage = null\nif (baggage == null) println(\"No baggage checked in\")","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_152","timestamp":1745437543647,"code":"def reservationSummary(reservationNo: String): String = {\n  if (reservationNo == \"VIP\") \"Reserved\"\n  else null\n}","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_153","timestamp":1745437543647,"code":"var checkedIn: Boolean = false\nvar checkInTime: java.time.LocalTime = null\nif (checkedIn && checkInTime != null) println(checkInTime)","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_154","timestamp":1745437543647,"code":"def getBoardingPass(passenger: Passenger): BoardingPass = {\n  null\n}","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_155","timestamp":1745437543647,"code":"var upgradeRequest: String = null\nif (upgradeRequest == null) println(\"No upgrade request received.\")","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_156","timestamp":1745437543647,"code":"var ticketPrice: java.math.BigDecimal = null\nif (ticketPrice == null) println(\"Price unavailable\")","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_157","timestamp":1745437543647,"code":"def getConnectingFlight(flight: Flight): Flight = {\n  null\n}","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_158","timestamp":1745437543647,"code":"var emergencyContactName: String = null\nif (emergencyContactName == null) println(\"No emergency contact found.\")","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_159","timestamp":1745437543647,"code":"class Fare(val amount: Double)\nvar baseFare: Fare = null\nif (baseFare == null) println(\"Fare not calculated yet.\")","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_160","timestamp":1745437543647,"code":"def getCustomerSupportChat(userId: Int): ChatSession = {\n  null\n}","category":"uses_null_check","topicUsed":"Airline ticketing system"}
{"id":"uses_null_check_161","timestamp":1745437555834,"code":"class Guest(val name: String, val email: String)\nvar currentGuest: Guest = null\nif (currentGuest == null) println(\"No guest assigned\")","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_162","timestamp":1745437555834,"code":"def findReservationById(id: Long): Reservation = {\n  if (id <= 0) null else new Reservation(id)\n}","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_163","timestamp":1745437555834,"code":"var roomNumber: Integer = null\nif (roomNumber != null) println(s\"Room: $roomNumber\")","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_164","timestamp":1745437555834,"code":"def getGuestEmail(guest: Guest): String = {\n  if (guest != null) guest.email else null\n}","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_165","timestamp":1745437555834,"code":"val reservation: Reservation = null\nif (reservation == null) println(\"Reservation not found\")","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_166","timestamp":1745437555834,"code":"var breakfastIncluded: java.lang.Boolean = null\nif (breakfastIncluded != null) println(\"Breakfast included\")","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_167","timestamp":1745437555834,"code":"def getAvailableRoom(rooms: List[Room]): Room = {\n  rooms.find(r => !r.occupied).getOrElse(null)\n}","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_168","timestamp":1745437555834,"code":"def fetchHotelByName(name: String): Hotel = javaHotelLib.getHotel(name) // might return null\nval h = fetchHotelByName(\"Scala Suites\")\nif (h != null) println(h.name)","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_169","timestamp":1745437555834,"code":"class Payment(val amount: Double)\nvar lastPayment: Payment = null\nif (lastPayment == null) println(\"No payment recorded.\")","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_170","timestamp":1745437555834,"code":"def getBookingStatus(res: Reservation): String = {\n  if (res == null) null else res.status\n}","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_171","timestamp":1745437555834,"code":"var cancellationReason: String = null\ndef cancelReservation(resId: Int): Unit = {\n  cancellationReason = \"User Request\"\n}","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_172","timestamp":1745437555834,"code":"def findGuestByEmail(email: String): Guest = {\n  val result = dbQuery(email) // possibly returns null\n  if (result == null) null else result\n}","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_173","timestamp":1745437555834,"code":"val selectedRoom: Room = null\nif (selectedRoom != null) println(selectedRoom.number)","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_174","timestamp":1745437555834,"code":"def getCheckOutTime(reservation: Reservation): java.time.LocalTime =\n  if (reservation == null) null else reservation.checkOutTime","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_175","timestamp":1745437555834,"code":"var loyaltyPoints: java.lang.Integer = null\nif (loyaltyPoints != null) println(s\"Points: $loyaltyPoints\")","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_176","timestamp":1745437555834,"code":"def getHotelAddress(hotel: Hotel): String = {\n  if (hotel == null) null else hotel.address\n}","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_177","timestamp":1745437555834,"code":"def retrieveReservationCode(guestId: Long): String = null","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_178","timestamp":1745437555834,"code":"val upgradeRequested: java.lang.Boolean = null\nif (upgradeRequested != null && upgradeRequested) println(\"Upgrade confirmed.\")","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_179","timestamp":1745437555834,"code":"def getFirstAvailableSuite(suites: Array[Suite]): Suite = {\n  for(suit <- suites) if (suit != null && !suit.occupied) return suit\n  null\n}","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_180","timestamp":1745437555834,"code":"def searchGuestByPhone(phone: String): Guest = {\n  val guest = guestService.lookup(phone) // might return null\n  if (guest != null) guest else null\n}","category":"uses_null_check","topicUsed":"Hotel reservation engine"}
{"id":"uses_null_check_181","timestamp":1745437567699,"code":"class Order(var deliveryAddress: String)\nval order = new Order(null)\nif (order.deliveryAddress == null) println(\"No delivery address set\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_182","timestamp":1745437567699,"code":"def getDriverId(orderId: Long): String = {\n  null\n}\nval driverId = getDriverId(109)\nif (driverId == null) println(\"Driver not assigned\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_183","timestamp":1745437567699,"code":"var estimatedTime: java.lang.Integer = null\nestimatedTime = 45\nif (estimatedTime != null && estimatedTime > 30) println(\"Late delivery\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_184","timestamp":1745437567699,"code":"class Delivery(val trackingNumber: String)\ndef findDelivery(trackingNumber: String): Delivery = null\nval delivery = findDelivery(\"X123\")\nif (delivery == null) println(\"Not found\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_185","timestamp":1745437567699,"code":"case class Customer(var preferences: String)\nval customer = Customer(null)\nif (customer.preferences == null) println(\"No preferences provided\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_186","timestamp":1745437567699,"code":"def getKitchen(orderId: Int): String = {\n  null\n}\nval kitchen = getKitchen(51)\nif (kitchen == null) println(\"Unassigned kitchen\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_187","timestamp":1745437567699,"code":"val foodItems: Array[String] = null\nif (foodItems == null) println(\"No foods to deliver\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_188","timestamp":1745437567699,"code":"class Rider(val name: String, var phone: String)\nval rider = new Rider(\"Jin\", null)\nif (rider.phone == null) rider.phone = \"0000000000\"","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_189","timestamp":1745437567699,"code":"def calculateTip(tip: java.lang.Double): Double = {\n  if (tip == null) 0.0 else tip\n}\nval tipAmount = calculateTip(null)","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_190","timestamp":1745437567699,"code":"class Package(var label: String)\nval pkg: Package = null\nif (pkg == null) println(\"Package info missing\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_191","timestamp":1745437567699,"code":"def getOrderById(id: Int): Order = {\n  null\n}\nval o = getOrderById(5)\nif (o == null) println(\"Order not found\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_192","timestamp":1745437567699,"code":"var pickupTime: java.util.Date = null\npickupTime = new java.util.Date()\nif (pickupTime != null) println(\"Pickup scheduled\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_193","timestamp":1745437567699,"code":"val status: String = null\nif (status == null || status == \"\") println(\"Status is missing\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_194","timestamp":1745437567699,"code":"def findAvailableRider(region: String): String = {\n  null\n}\nval availableRider = findAvailableRider(\"West\")\nif (availableRider == null) println(\"No rider available\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_195","timestamp":1745437567699,"code":"class FoodBag(var id: Int, var weight: Double)\nvar bag: FoodBag = null\nif (bag == null) bag = new FoodBag(1, 2.5)","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_196","timestamp":1745437567699,"code":"def queryDeliveryEstimate(orderNum: String): java.lang.Integer = null\nval estimate = queryDeliveryEstimate(\"A100\")\nif (estimate == null) println(\"Estimate unavailable\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_197","timestamp":1745437567699,"code":"var orderNote: String = null\nif (orderNote == null) orderNote = \"N/A\"","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_198","timestamp":1745437567699,"code":"def getRestaurantLocation(restaurantId: String): String = null\nval restLoc = getRestaurantLocation(\"rst_01\")\nif (restLoc == null) println(\"Unknown location\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_199","timestamp":1745437567699,"code":"class Courier(var vehicle: String)\nvar courier: Courier = null\nif (courier == null) courier = new Courier(null)","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_200","timestamp":1745437567699,"code":"def fetchLatestOrderForCustomer(name: String): Order = null\nval latest = fetchLatestOrderForCustomer(\"Sam\")\nif (latest == null) println(\"No orders yet\")","category":"uses_null_check","topicUsed":"Food delivery logistics"}
{"id":"uses_null_check_201","timestamp":1745437585855,"code":"object Main1 extends App {\n  var currentTrack: String = null\n  if (currentTrack == null) println(\"No track is currently playing.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_202","timestamp":1745437585855,"code":"object Main2 extends App {\n  def getAlbumArtUrl(albumId: String): String = {\n    if (albumId == \"\") null else \"http://arturl/\" + albumId\n  }\n  val art = getAlbumArtUrl(\"\")\n  println(art)\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_203","timestamp":1745437585855,"code":"object Main3 extends App {\n  val playlistTitle: String = null\n  if (playlistTitle != null) println(playlistTitle)\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_204","timestamp":1745437585855,"code":"object Main4 extends App {\n  var streamQuality: String = null\n  streamQuality = \"high\"\n  if (streamQuality != null) println(streamQuality)\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_205","timestamp":1745437585855,"code":"object Main5 extends App {\n  def findUserByEmail(email: String): String = null\n  val user = findUserByEmail(\"user@example.com\")\n  if (user == null) println(\"User not found.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_206","timestamp":1745437585855,"code":"object Main6 extends App {\n  var artistBio: String = null\n  if (artistBio == null) artistBio = \"No bio available.\"\n  println(artistBio)\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_207","timestamp":1745437585855,"code":"object Main7 extends App {\n  class Track(val id: String, var lyrics: String)\n  val track = new Track(\"123\", null)\n  if (track.lyrics == null) println(\"Lyrics not available.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_208","timestamp":1745437585855,"code":"object Main8 extends App {\n  def getNextSuggestedSong(currentId: String): String = {\n    if (currentId == \"last\") null else \"nextSongId\"\n  }\n  val nextSong = getNextSuggestedSong(\"last\")\n  println(nextSong)\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_209","timestamp":1745437585855,"code":"object Main9 extends App {\n  val deviceName: String = null\n  if (deviceName == null) println(\"No device selected.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_210","timestamp":1745437585855,"code":"object Main10 extends App {\n  var syncStatus: String = null\n  if (syncStatus != null) println(\"Synchronized.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_211","timestamp":1745437585855,"code":"object Main11 extends App {\n  def fetchStreamUrl(songId: String): String = null\n  val url = fetchStreamUrl(\"6789\")\n  if (url == null) println(\"Cannot stream song.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_212","timestamp":1745437585855,"code":"object Main12 extends App {\n  def getPlaylistDescription(name: String): String = {\n    if (name == \"Favorites\") \"Your favorite songs\" else null\n  }\n  val desc = getPlaylistDescription(\"Chill\")\n  println(desc)\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_213","timestamp":1745437585855,"code":"object Main13 extends App {\n  var albumYear: Integer = null\n  if (albumYear == null) println(\"Unknown year.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_214","timestamp":1745437585855,"code":"object Main14 extends App {\n  def getUserCurrentStation(userId: String): String = null\n  val station = getUserCurrentStation(\"A123\")\n  if (station == null) println(\"No station active.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_215","timestamp":1745437585855,"code":"object Main15 extends App {\n  var recommendedGenre: String = null\n  recommendGenre()\n  def recommendGenre(): Unit = {\n    recommendedGenre = \"Jazz\"\n  }\n  if (recommendedGenre != null) println(\"Recommended: \" + recommendedGenre)\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_216","timestamp":1745437585855,"code":"object Main16 extends App {\n  def getExplicitStatus(songId: String): java.lang.Boolean = null\n  val explicit = getExplicitStatus(\"5\")\n  if (explicit == null) println(\"Explicit status unknown.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_217","timestamp":1745437585855,"code":"object Main17 extends App {\n  class StreamSession(var sessionId: String)\n  val session = new StreamSession(null)\n  if (session.sessionId == null) println(\"Session is not active.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_218","timestamp":1745437585855,"code":"object Main18 extends App {\n  var favoriteArtist: String = null\n  setFavoriteArtist(\"The Weeknd\")\n  def setFavoriteArtist(a: String): Unit = favoriteArtist = null\n  if (favoriteArtist == null) println(\"No favorite artist.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_219","timestamp":1745437585855,"code":"object Main19 extends App {\n  def getCoverImageUrl(albumName: String): String = null\n  val cover = getCoverImageUrl(\"Best of 90s\")\n  println(cover)\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_220","timestamp":1745437585855,"code":"object Main20 extends App {\n  var userPremiumStatus: java.lang.Boolean = null\n  if (userPremiumStatus == null) println(\"User premium status unavailable.\")\n}","category":"uses_null_check","topicUsed":"Digital music streaming"}
{"id":"uses_null_check_221","timestamp":1745437595769,"code":"var tutorName: String = null\nif (tutorName == null) println(\"Tutor name is missing\")\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_222","timestamp":1745437595769,"code":"def findStudent(id: Long): Student = {\n  if (id < 0) null else studentsDb.get(id)\n}","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_223","timestamp":1745437595769,"code":"val session: TutoringSession = null\nif (session == null) println(\"Session data not loaded\")\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_224","timestamp":1745437595769,"code":"var lessonMaterial: String = null\nif (lessonMaterial != null) println(\"Material available\")\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_225","timestamp":1745437595769,"code":"def getAssignment(studentId: Long): Assignment = {\n  assignments.getOrElse(studentId, null)\n}","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_226","timestamp":1745437595769,"code":"var feedback: Feedback = null\nfeedback = fetchFeedback(lessonId)\nif (feedback == null) println(\"No feedback found\")\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_227","timestamp":1745437595769,"code":"def fetchTutorProfile(username: String): TutorProfile = {\n  javaApi.getProfile(username) // returns null if not found\n}","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_228","timestamp":1745437595769,"code":"val message: String = chatService.getLatestMessage(sessionId)\nif (message == null) println(\"No messages yet\")\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_229","timestamp":1745437595769,"code":"var student: Student = null\nstudent = loadStudentData(email)\nif (student != null) println(student.name)\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_230","timestamp":1745437595769,"code":"def getNextLessonSlot(tutorId: Long): LessonSlot = {\n  null\n}","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_231","timestamp":1745437595769,"code":"val notification: Notification = null\nif (notification == null) println(\"No notification to show\")\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_232","timestamp":1745437595769,"code":"def retrieveSubmission(submissionId: Int): Submission = submissionsDb.getOrElse(submissionId, null)\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_233","timestamp":1745437595769,"code":"val course: Course = apiClient.getCourseByIdOrNull(courseId)\nif (course == null) println(\"Course not found\")\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_234","timestamp":1745437595769,"code":"var preferredLanguage: String = null\nif (preferredLanguage == null) preferredLanguage = \"en\"\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_235","timestamp":1745437595769,"code":"def getTutorAvailability(tutor: Tutor): TutorAvailability = {\n  if (tutor == null) null else database.fetchAvailability(tutor.id)\n}","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_236","timestamp":1745437595769,"code":"val parentContact: String = null\nif (parentContact != null) sendReminder(parentContact)\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_237","timestamp":1745437595769,"code":"def findActiveSession(studentEmail: String): TutoringSession = {\n  sessions.find(_.studentEmail == studentEmail).getOrElse(null)\n}","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_238","timestamp":1745437595769,"code":"var examResult: Double = null.asInstanceOf[Double]\nif (examResult == null) println(\"Result not available\")\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_239","timestamp":1745437595769,"code":"def checkRoomAccess(roomId: String): RoomAccess = {\n  val result = roomApi.getAccess(roomId)\n  if (result == null) null else result\n}","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_240","timestamp":1745437595769,"code":"val videoUrl: String = externalApi.getLessonVideoUrl(sessionId)\nif (videoUrl == null) loadFallbackVideo()\n","category":"uses_null_check","topicUsed":"Online tutoring platform"}
{"id":"uses_null_check_241","timestamp":1745437625260,"code":"class Listing(val id: String, val address: String)\nvar selectedListing: Listing = null\nif (selectedListing == null) println(\"No listing selected.\")","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_242","timestamp":1745437625260,"code":"def findListingById(id: String): Listing = {\n  val dbListing = Database.getListing(id)\n  if (dbListing == null) null else dbListing\n}","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_243","timestamp":1745437625260,"code":"var searchQuery: String = null\nif (searchQuery == null) println(\"Empty search query.\")","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_244","timestamp":1745437625260,"code":"class Realtor(val name: String, val email: String)\nvar assignedRealtor: Realtor = null\nif (assignedRealtor != null) println(assignedRealtor.name)","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_245","timestamp":1745437625260,"code":"def getPrice(listing: Listing): java.lang.Integer = {\n  if (listing == null) null else listing.price\n}","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_246","timestamp":1745437625260,"code":"var listings: Array[Listing] = null\nif (listings == null) listings = Array.empty[Listing]","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_247","timestamp":1745437625260,"code":"def getFirstListing(address: String): Listing = {\n  val found = ListingRepo.searchByAddress(address)\n  if (found != null) found else null\n}","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_248","timestamp":1745437625260,"code":"var lastSearchedLocation: String = null\nif (lastSearchedLocation == null) lastSearchedLocation = \"Unknown\"","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_249","timestamp":1745437625260,"code":"def contactRealtor(listing: Listing): String = {\n  if (listing == null) null else listing.realtor.email\n}","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_250","timestamp":1745437625260,"code":"var filterParams: Map[String, String] = null\nif (filterParams != null) println(filterParams.size)","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_251","timestamp":1745437625260,"code":"def getPhotos(listingId: String): Array[String] = {\n  val photos = PhotoService.fetchPhotos(listingId)\n  if (photos == null) null else photos\n}","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_252","timestamp":1745437625260,"code":"val currentCity: String = null\nif (currentCity == null) println(\"Please select a city.\")","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_253","timestamp":1745437625260,"code":"def retrieveAmenities(listing: Listing): List[String] = {\n  if (listing == null) null else listing.amenities\n}","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_254","timestamp":1745437625260,"code":"var lastViewed: Listing = null\nif (lastViewed != null) println(lastViewed.address)","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_255","timestamp":1745437625260,"code":"def getSquareFootage(listing: Listing): Integer = {\n  if (listing == null) null else listing.squareFootage\n}","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_256","timestamp":1745437625260,"code":"class SearchResult(val listings: List[Listing])\nvar recentResults: SearchResult = null\nif (recentResults == null) println(\"No search results.\")","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_257","timestamp":1745437625260,"code":"def getDescription(listing: Listing): String = {\n  if (listing == null) null else listing.description\n}","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_258","timestamp":1745437625260,"code":"var favoriteListing: Listing = null\nif (favoriteListing != null) println(favoriteListing.id)","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_259","timestamp":1745437625260,"code":"def lookupAgent(listingId: String): Realtor = {\n  val agent = AgentDirectory.findAgentForListing(listingId)\n  if (agent == null) null else agent\n}","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_260","timestamp":1745437625260,"code":"var previousSearch: String = null\nif (previousSearch == null) println(\"No previous search found.\")","category":"uses_null_check","topicUsed":"Real-estate listing search"}
{"id":"uses_null_check_261","timestamp":1745437639493,"code":"class Wallet(var address: String, var privateKey: String)\nvar myWallet: Wallet = null\nif (myWallet == null) println(\"No wallet found\")\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_262","timestamp":1745437639493,"code":"def findWalletByAddress(address: String): Wallet = {\n  for (w <- wallets) {\n    if (w.address == address) return w\n  }\n  null\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_263","timestamp":1745437639493,"code":"var seedPhrase: String = null\nif (seedPhrase == null) seedPhrase = \"not set\"\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_264","timestamp":1745437639493,"code":"def getBalance(wallet: Wallet): BigDecimal = {\n  if (wallet == null) return BigDecimal(0)\n  walletBalance(wallet)\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_265","timestamp":1745437639493,"code":"var tokenList: List[String] = null\ntokenList = fetchTokens()\nif (tokenList == null) println(\"Failed to load tokens\")\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_266","timestamp":1745437639493,"code":"def restoreWallet(mnemonic: String): Wallet = {\n  if (mnemonic == null) null\n  else new WalletService().restoreFromMnemonic(mnemonic)\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_267","timestamp":1745437639493,"code":"class Transaction(val id: String, val amount: BigDecimal)\nvar lastTransaction: Transaction = null\nprocessTransaction(lastTransaction)\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_268","timestamp":1745437639493,"code":"def getPrivateKey(wallet: Wallet): String = {\n  if (wallet == null) null else wallet.privateKey\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_269","timestamp":1745437639493,"code":"def deleteWallet(wallet: Wallet): Boolean = {\n  if (wallet == null) false\n  else performDelete(wallet)\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_270","timestamp":1745437639493,"code":"val backupLocation: String = null\nif (backupLocation == null) println(\"Backup not configured\")\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_271","timestamp":1745437639493,"code":"def loadAddressBook(): Map[String, String] = {\n  val book = javaAddressBookLib.load()\n  if (book == null) Map.empty else book\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_272","timestamp":1745437639493,"code":"var pendingTx: Transaction = null\nif (pendingTx != null) broadcast(pendingTx)\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_273","timestamp":1745437639493,"code":"val keyStore: KeyStore = null\nif (keyStore == null) println(\"Key store unavailable\")\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_274","timestamp":1745437639493,"code":"def exportWallet(wallet: Wallet): Array[Byte] = {\n  if (wallet == null) null\n  else exporter.export(wallet)\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_275","timestamp":1745437639493,"code":"def importSeed(): String = {\n  val s = javaSeedImporter.tryImport()\n  if (s == null) \"Import failed\" else s\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_276","timestamp":1745437639494,"code":"def fetchWalletLabel(wallet: Wallet): String = {\n  if (wallet == null) null\n  else labelService.getLabel(wallet.address)\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_277","timestamp":1745437639494,"code":"var watchOnlyWallet: Wallet = null\nif (watchOnlyWallet == null) watchOnlyWallet = createWatchOnlyWallet()\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_278","timestamp":1745437639494,"code":"def revokeAccess(wallet: Wallet): Unit = {\n  if (wallet != null) revokeFromSystem(wallet)\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_279","timestamp":1745437639494,"code":"def getRecoveryWords(wallet: Wallet): List[String] = {\n  if (wallet == null) null\n  else walletService.recoveryWords(wallet)\n}\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_280","timestamp":1745437639494,"code":"val txHistory: List[Transaction] = null\nif (txHistory == null) println(\"No transaction history loaded\")\n","category":"uses_null_check","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_null_check_281","timestamp":1745437653524,"code":"var productLocation: String = null\nif (productLocation == null) println(\"Location not found\")\nelse println(productLocation)","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_282","timestamp":1745437653524,"code":"def findItemById(id: Int): InventoryItem = {\n  if (id == 0) null\n  else new InventoryItem(id, \"Item\" + id)\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_283","timestamp":1745437653524,"code":"class Warehouse {\n  var managerName: String = null\n  def setManager(name: String): Unit = {\n    managerName = name\n  }\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_284","timestamp":1745437653524,"code":"val stockCount: java.lang.Integer = null\nif (stockCount == null) println(\"Stock count unavailable\")\nelse println(\"Stock: \" + stockCount)","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_285","timestamp":1745437653524,"code":"def getBinContents(binId: String): Array[String] = {\n  if (binId.isEmpty) null\n  else Array(\"item1\", \"item2\")\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_286","timestamp":1745437653524,"code":"var lastAuditDate: java.util.Date = null\nif (lastAuditDate != null) println(\"Last audit: \" + lastAuditDate)\nelse println(\"No audit date recorded\")","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_287","timestamp":1745437653524,"code":"class Inventory {\n  var supplier: Supplier = null\n  def assignSupplier(s: Supplier): Unit = {\n    supplier = s\n  }\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_288","timestamp":1745437653524,"code":"def lookupProduct(barcode: String): Product = {\n  if (barcode == null) null\n  else new Product(barcode)\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_289","timestamp":1745437653524,"code":"var reservedForOrder: String = null\nif (reservedForOrder != null) {\n  println(s\"Reserved for order: $reservedForOrder\")\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_290","timestamp":1745437653524,"code":"def retrieveWarehouseName(id: Int): String = {\n  if (id > 100) \"MainWarehouse\"\n  else null\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_291","timestamp":1745437653524,"code":"val currentOrder: Order = null\nif (currentOrder == null) println(\"No current order\")","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_292","timestamp":1745437653524,"code":"class Bin {\n  var label: String = null\n  def hasLabel: Boolean = label != null\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_293","timestamp":1745437653524,"code":"def fetchCategory(itemId: Int): String = {\n  if (itemId < 0) null\n  else \"General\"\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_294","timestamp":1745437653524,"code":"var pendingShipment: Shipment = null\nif (pendingShipment == null) println(\"No pending shipments\")","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_295","timestamp":1745437653524,"code":"def getLastCheckedIn(user: String): java.util.Date = {\n  if (user == \"admin\") new java.util.Date\n  else null\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_296","timestamp":1745437653524,"code":"class InventoryRecord {\n  var expiryDate: String = null\n  def markExpired(): Unit = expiryDate = null\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_297","timestamp":1745437653524,"code":"var tempStorageLocation: String = null\ntempStorageLocation = System.getenv(\"TEMP_LOC\")\nif (tempStorageLocation == null) println(\"Temporary location undefined\")","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_298","timestamp":1745437653524,"code":"def fetchRestockLevel(productId: Int): java.lang.Integer = {\n  if (productId % 2 == 0) 100\n  else null\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_299","timestamp":1745437653524,"code":"var lastReceivedItem: Product = null\nif (lastReceivedItem != null) println(lastReceivedItem)\nelse println(\"Nothing received recently\")","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_300","timestamp":1745437653524,"code":"def getSupplierContact(supplier: Supplier): String = {\n  if (supplier == null) null\n  else supplier.contact\n}","category":"uses_null_check","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_null_check_301","timestamp":1745437664100,"code":"var flaggedWords: Array[String] = null\nif (flaggedWords == null) println(\"No flagged words loaded.\")\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_302","timestamp":1745437664100,"code":"def getModeratorById(id: String): Moderator = {\n  if (id == \"admin\") new Moderator(\"admin\")\n  else null\n}\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_303","timestamp":1745437664100,"code":"class Report(val userId: String, val content: String)\nvar latestReport: Report = null\nif (latestReport != null) println(latestReport.content)\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_304","timestamp":1745437664100,"code":"def fetchPost(postId: String): String = {\n  null\n}\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_305","timestamp":1745437664100,"code":"val bannedUsers: List[String] = null\nif (bannedUsers != null) bannedUsers.foreach(println)\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_306","timestamp":1745437664100,"code":"class Content(val text: String)\ndef getPendingContent(): Content = {\n  null\n}\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_307","timestamp":1745437664100,"code":"var recentAction: String = _\nrecentAction = null\nif (recentAction == null) println(\"No recent moderation action.\")\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_308","timestamp":1745437664100,"code":"def findSuspiciousAccount(handle: String): Account = {\n  if (handle.startsWith(\"suspicious\")) new Account(handle)\n  else null\n}\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_309","timestamp":1745437664100,"code":"class ModerationLog(val entry: String)\nval lastLog: ModerationLog = null\nif (lastLog == null) println(\"No logs found.\")\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_310","timestamp":1745437664100,"code":"def getUserFlagCount(user: String): java.lang.Integer = {\n  null\n}\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_311","timestamp":1745437664100,"code":"var postContent: String = null\nif (postContent != null) println(postContent.toLowerCase)\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_312","timestamp":1745437664100,"code":"def getViolationForComment(commentId: String): Violation = {\n  null\n}\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_313","timestamp":1745437664100,"code":"class Message(val sender: String, val text: String)\nvar recentMessage: Message = null\nif (recentMessage == null) println(\"No new messages.\")\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_314","timestamp":1745437664100,"code":"def getAppealById(appealId: String): Appeal = {\n  if (appealId.length > 5) null else new Appeal(appealId)\n}\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_315","timestamp":1745437664100,"code":"val flaggedContent: List[String] = null\nif (flaggedContent == null) println(\"No content has been flagged.\")\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_316","timestamp":1745437664100,"code":"def retrieveModerationAction(userId: String): String = {\n  null\n}\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_317","timestamp":1745437664100,"code":"var reviewer: Moderator = null\nif (reviewer != null) println(reviewer.name)\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_318","timestamp":1745437664100,"code":"def findHashTagAbuse(tag: String): HashTagAbuse = {\n  null\n}\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_319","timestamp":1745437664100,"code":"val pendingReviews: Array[Review] = null\nif (pendingReviews != null) println(pendingReviews.length)\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_320","timestamp":1745437664100,"code":"def getBlockedUser(username: String): BlockedUser = {\n  if (username == \"bot123\") new BlockedUser(username)\n  else null\n}\n","category":"uses_null_check","topicUsed":"Social media content moderation"}
{"id":"uses_null_check_321","timestamp":1745437675640,"code":"var latestArticle: Article = null\nif (latestArticle == null) println(\"No latest article found\")\n","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_322","timestamp":1745437675640,"code":"def fetchUserPreferences(userId: String): Preferences = {\n  if (userId == null) null else PreferencesDb.getForUser(userId)\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_323","timestamp":1745437675640,"code":"class PersonalizedFeed {\n  var cachedFeed: Feed = null\n  def refreshCache(): Unit = {\n    cachedFeed = FeedService.generateFeed()\n  }\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_324","timestamp":1745437675640,"code":"val userProfile = ProfileService.retrieveProfile(userId)\nif (userProfile == null) println(\"Could not load user profile\")\n","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_325","timestamp":1745437675640,"code":"def topStoryTitle(user: User): String = {\n  val topStory = NewsEngine.getTopStory(user)\n  if (topStory == null) \"No stories\" else topStory.title\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_326","timestamp":1745437675640,"code":"def saveFeedDraft(feed: Feed): Unit = {\n  if (feed != null) DraftService.save(feed)\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_327","timestamp":1745437675640,"code":"var clickedArticle: Article = null\nclickedArticle = NewsTracker.getLastClicked(userId)\nif (clickedArticle != null) Analytics.logClick(clickedArticle)\n","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_328","timestamp":1745437675640,"code":"def findBreakingNews(): Article = {\n  NewsDatabase.latestBreaking() match {\n    case a if a != null => a\n    case _ => null\n  }\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_329","timestamp":1745437675640,"code":"class UserInterest {\n  var categories: Array[String] = null\n  def setCategories(c: Array[String]): Unit = {\n    categories = c\n  }\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_330","timestamp":1745437675640,"code":"def articleSummary(articleId: String): String = {\n  val art = NewsAPI.getArticle(articleId)\n  if (art == null) null else art.summary\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_331","timestamp":1745437675640,"code":"var recommendationEngine: RecommendationEngine = null\nrecommendationEngine = RecommendationProvider.instance\nif (recommendationEngine == null) throw new RuntimeException(\"No engine\")\n","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_332","timestamp":1745437675640,"code":"def getFeedOrNull(user: User): Feed = {\n  val feed = FeedGenerator.createFeedFor(user)\n  if (feed == null) null else feed\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_333","timestamp":1745437675640,"code":"class PushNotificationManager {\n  var queuedMessage: Message = null\n  def queueMessage(msg: Message): Unit = {\n    if (msg != null) queuedMessage = msg\n  }\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_334","timestamp":1745437675640,"code":"val personalizedTag = TagService.getPersonalizedTag(user)\nif (personalizedTag != null) SearchService.addFilter(personalizedTag)\n","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_335","timestamp":1745437675640,"code":"def getUserLocation(userId: String): Location = {\n  val loc = LocationLookup.lookup(userId)\n  if (loc == null) null else loc\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_336","timestamp":1745437675640,"code":"var userFeedView: FeedView = null\nuserFeedView = FeedView.buildForUser(user)\nif (userFeedView == null) println(\"Cannot build feed view\")\n","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_337","timestamp":1745437675640,"code":"def fetchTopicPreferences(user: User): Array[String] = {\n  if (user == null) null\n  else PreferenceEngine.getTopics(user)\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_338","timestamp":1745437675640,"code":"class TrendingFetcher {\n  var trending: List[Article] = null\n  def fetch(): Unit = {\n    trending = NewsDB.getTrendingArticles\n    if (trending == null) trending = List.empty\n  }\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_339","timestamp":1745437675640,"code":"def getBookmark(articleId: String, userId: String): Bookmark = {\n  val b = BookmarkService.fetch(articleId, userId)\n  if (b == null) null else b\n}","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_340","timestamp":1745437675640,"code":"val friendFeed = SocialFeed.loadForUser(userId)\nif (friendFeed == null) println(\"No friend feed found\")\n","category":"uses_null_check","topicUsed":"Personalized news feed"}
{"id":"uses_null_check_341","timestamp":1745437683986,"code":"class Charger(val id: String, val location: String)\nvar closestCharger: Charger = null\nif (closestCharger == null) println(\"No charger found\")","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_342","timestamp":1745437683986,"code":"def findStationById(id: String): String = {\n  val station = null\n  station\n}","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_343","timestamp":1745437683986,"code":"val chargingStations: Array[String] = Array(\"StationA\", \"StationB\")\nvar selectedStation: String = null\nfor (station <- chargingStations) {\n  if (station != null && station.startsWith(\"Station\")) selectedStation = station\n}","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_344","timestamp":1745437683986,"code":"class Session(val userId: String, val stationId: String)\nvar activeSession: Session = null\nif (activeSession != null) println(activeSession.stationId)","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_345","timestamp":1745437683986,"code":"def getChargingSpeed(stationId: String): Integer = {\n  null\n}","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_346","timestamp":1745437683986,"code":"val map: Map[String, String] = Map()\nvar address: String = null\naddress = map.getOrElse(\"001\", null)","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_347","timestamp":1745437683986,"code":"def getNearestCharger(userLoc: String): Charger = {\n  null\n}","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_348","timestamp":1745437683986,"code":"var chargerId: String = null\nif (chargerId == null) chargerId = \"DefaultID\"","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_349","timestamp":1745437683986,"code":"def isChargerAvailable(charger: Charger): Boolean = {\n  if (charger == null) false else true\n}","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_350","timestamp":1745437683986,"code":"class Station(val id: String, val address: String)\nvar station: Station = null\nstation = new Station(\"s1\", null)","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_351","timestamp":1745437683986,"code":"def findAvailableStation(loc: String): Station = {\n  if (loc == null) null else new Station(\"s2\", loc)\n}","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_352","timestamp":1745437683986,"code":"var batteryLevel: java.lang.Integer = null\nif (batteryLevel == null) batteryLevel = 50","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_353","timestamp":1745437683986,"code":"def getOperatorName(stationId: String): String = {\n  var name: String = null\n  name\n}","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_354","timestamp":1745437683986,"code":"def locateStationNearby(lat: Double, lon: Double): Station = null","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_355","timestamp":1745437683986,"code":"def checkConnectorType(station: Station): String = {\n  if (station == null) null else \"Type2\"\n}","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_356","timestamp":1745437683986,"code":"class Plug(val kind: String)\nvar plug: Plug = null\nif (plug == null) plug = new Plug(\"CHAdeMO\")","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_357","timestamp":1745437683986,"code":"def fetchStationFromJavaApi(id: String): Station = {\n  val s = ThirdPartyApi.getStation(id)\n  if (s == null) null else s\n}","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_358","timestamp":1745437683986,"code":"var geoLoc: (Double, Double) = null\ngeoLoc = (37.7, -122.4)","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_359","timestamp":1745437683986,"code":"def searchCharger(loc: String): Charger = null","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_360","timestamp":1745437683986,"code":"class EV(val plate: String)\nvar ev: EV = null\nev = new EV(\"EV-1234\")","category":"uses_null_check","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_null_check_361","timestamp":1745437693665,"code":"var cropType: String = null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_362","timestamp":1745437693665,"code":"def getSoilMoisture(sensorId: String): java.lang.Double = null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_363","timestamp":1745437693665,"code":"class WeatherData {\n  var rain: java.lang.Double = null\n  var temp: java.lang.Double = null\n}","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_364","timestamp":1745437693665,"code":"def fetchSatelliteImage(fieldId: Int): Array[Byte] = {\n  null\n}","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_365","timestamp":1745437693665,"code":"val pestDetectionResult: String = null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_366","timestamp":1745437693665,"code":"def lastIrrigationDate(field: String): java.util.Date = {\n  if (field == \"Unregistered\") null else new java.util.Date()\n}","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_367","timestamp":1745437693665,"code":"def getCropYieldPerAcre(year: Int, crop: String): java.lang.Integer = null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_368","timestamp":1745437693665,"code":"var diseaseReport: String = null\nif (diseaseReport != null && diseaseReport.length > 0) println(diseaseReport)","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_369","timestamp":1745437693665,"code":"def soilPhMeasurement(sid: Int): java.lang.Double = null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_370","timestamp":1745437693665,"code":"class Sensor {\n  var lastMeasurement: java.lang.Double = null\n  def hasMeasurement: Boolean = lastMeasurement != null\n}","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_371","timestamp":1745437693665,"code":"def growthStageOfCrop(cid: Int): String = {\n  null\n}","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_372","timestamp":1745437693665,"code":"def getFieldBoundary(fieldId: String): Array[Double] = null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_373","timestamp":1745437693665,"code":"var NDVIIndex: java.lang.Float = null\nif (NDVIIndex == null) println(\"No NDVI data\")","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_374","timestamp":1745437693665,"code":"def irrigationLevel(plot: String): java.lang.Float = if (plot.startsWith(\"A\")) 12.5f else null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_375","timestamp":1745437693665,"code":"def getWeatherAlert(farmId: Int): String = null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_376","timestamp":1745437693665,"code":"var recentHarvestData: String = null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_377","timestamp":1745437693665,"code":"def fertilizerRecommendation(crop: String): String = null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_378","timestamp":1745437693665,"code":"class CropSensor {\n  def lastReportedData: java.lang.Double = null\n}","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_379","timestamp":1745437693665,"code":"def predictedHarvestDate(fieldId: Int): java.util.Date = null","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_380","timestamp":1745437693665,"code":"def sensorStatus(sid: String): String = {\n  var status: String = null\n  if (sid.length > 5) status = \"active\"\n  status\n}","category":"uses_null_check","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_null_check_381","timestamp":1745437707078,"code":"object SensorNullCheck1 extends App {\n  val tempSensorReading: java.lang.Double = null\n  if (tempSensorReading == null) println(\"No temperature data available\") else println(s\"Temperature: $tempSensorReading\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_382","timestamp":1745437707078,"code":"object SensorNullCheck2 extends App {\n  val humidity: java.lang.Float = null\n  if (humidity != null && humidity > 60) println(\"High humidity detected\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_383","timestamp":1745437707078,"code":"object SensorNullAssignment1 extends App {\n  var pressure: java.lang.Integer = 1013\n  pressure = null\n  println(\"Pressure reading is now: \" + pressure)\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_384","timestamp":1745437707078,"code":"object SensorNullFunction1 {\n  def getLatestPM25: java.lang.Double = null\n  val pm25 = getLatestPM25\n  if (pm25 == null) println(\"No PM2.5 data\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_385","timestamp":1745437707078,"code":"object SensorNullQuery {\n  def querySensorValue(sensorId: String): java.lang.Double = null\n  val value = querySensorValue(\"sensor-123\")\n  if (value == null) println(\"No value from sensor-123\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_386","timestamp":1745437707078,"code":"object SensorAggregatorNull {\n  var lastAggregate: String = null\n  def updateAggregate(value: String): Unit = {\n    lastAggregate = value\n  }\n  updateAggregate(null)\n  println(lastAggregate)\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_387","timestamp":1745437707078,"code":"object NullInListAggregation extends App {\n  val readings: List[java.lang.Float] = List(null, 23.5f, null)\n  readings.foreach { r =>\n    if (r != null) println(s\"Reading: $r\")\n  }\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_388","timestamp":1745437707078,"code":"object NullHeartbeatSensor {\n  var lastHeartbeat: Long = System.currentTimeMillis()\n  lastHeartbeat = null.asInstanceOf[Long]\n  if (lastHeartbeat == null) println(\"No heartbeat data\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_389","timestamp":1745437707078,"code":"object NullCheckMultipleSensors extends App {\n  val co2: java.lang.Integer = null\n  val voc: java.lang.Integer = 100\n  if (co2 != null && voc != null) println(s\"CO2: $co2, VOC: $voc\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_390","timestamp":1745437707078,"code":"object NullWithJavaInterop extends App {\n  class JavaSensorReader {\n    def getStatus(): String = null\n  }\n  val reader = new JavaSensorReader\n  val status = reader.getStatus()\n  if (status == null) println(\"Sensor status unknown\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_391","timestamp":1745437707078,"code":"object AssignNullToSensorData {\n  var aggregatedData: Array[Byte] = Array(1, 2, 3)\n  aggregatedData = null\n  if (aggregatedData == null) println(\"No aggregate data\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_392","timestamp":1745437707078,"code":"object NullReturnOnTimeout {\n  def fetchLatestSensorPacket(timeout: Long): String = {\n    null\n  }\n  val packet = fetchLatestSensorPacket(1000)\n  if (packet == null) println(\"No packet fetched\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_393","timestamp":1745437707078,"code":"object NullReadingWithDefaults extends App {\n  var temperature: java.lang.Double = null\n  val finalTemp = if (temperature == null) 20.0 else temperature\n  println(s\"Final temperature: $finalTemp\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_394","timestamp":1745437707078,"code":"object NullCheckOnBatchList {\n  val batch: List[String] = List(null, null, \"ok\")\n  for (item <- batch) {\n    if (item != null) println(s\"Batch entry: $item\")\n  }\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_395","timestamp":1745437707078,"code":"object NullDeserializer {\n  def deserializeSensorPayload(payload: Array[Byte]): String = {\n    null\n  }\n  val result = deserializeSensorPayload(Array(0, 1))\n  if (result == null) println(\"Failed to deserialize payload\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_396","timestamp":1745437707078,"code":"object NullReferenceAggregation extends App {\n  var runningAverage: java.lang.Float = null\n  runningAverage = 42.3f\n  if (runningAverage != null) println(runningAverage)\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_397","timestamp":1745437707078,"code":"object UseNullForMissingSensor extends App {\n  var lastMotionDetection: java.lang.Long = null\n  if (lastMotionDetection == null) println(\"No motion detected yet\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_398","timestamp":1745437707078,"code":"object AssignNullResultOfCalculation {\n  var aggregateScore: java.lang.Double = null\n  aggregateScore = null\n  println(\"Aggregate score: \" + aggregateScore)\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_399","timestamp":1745437707078,"code":"object NullCheckOnSensorMap {\n  val sensorData: Map[String, java.lang.Double] = Map(\"temp\" -> null)\n  if (sensorData(\"temp\") == null) println(\"Temperature sensor missing data\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_400","timestamp":1745437707078,"code":"object NullAssignmentInSensorLoop extends App {\n  var lastVoltage: java.lang.Float = 3.7f\n  for (_ <- 1 to 2) {\n    lastVoltage = null\n  }\n  if (lastVoltage == null) println(\"Voltage unknown\")\n}","category":"uses_null_check","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_null_check_401","timestamp":1745437719718,"code":"object Example1 {\n  def getStationById(id: String): Station = {\n    val station = Database.findStation(id)\n    if (station == null) null else station\n  }\n}\n","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_402","timestamp":1745437719718,"code":"object Example2 {\n  class Route(var name: String, var stops: List[String])\n  var currentRoute: Route = null\n","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_403","timestamp":1745437719718,"code":"object Example3 {\n  def getNextArrivalTime(stopId: String): String = {\n    val arrival = TransitApi.fetchNextArrival(stopId)\n    if (arrival != null) arrival\n    else null\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_404","timestamp":1745437719718,"code":"object Example4 {\n  class Bus(var id: String, var route: Route)\n  def assignBusToRoute(bus: Bus, route: Route): Unit = {\n    if (route == null) bus.route = null\n    else bus.route = route\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_405","timestamp":1745437719718,"code":"object Example5 {\n  def findRouteByStops(start: String, end: String): Route = {\n    val route = PublicTransitNetwork.searchRoute(start, end)\n    if (route == null) null else route\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_406","timestamp":1745437719718,"code":"object Example6 {\n  case class Trip(id: String, destination: String)\n  var plannedTrip: Trip = null\n","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_407","timestamp":1745437719718,"code":"object Example7 {\n  def addTransferOptions(routes: List[Route]): List[Route] = {\n    if (routes == null) null\n    else routes ++ List(null)\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_408","timestamp":1745437719718,"code":"object Example8 {\n  class Train(var number: String)\n  def getTrainByNumber(num: String): Train = {\n    val t = RailSystem.lookupTrain(num)\n    if (t == null) null else t\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_409","timestamp":1745437719718,"code":"object Example9 {\n  def findClosestStop(lat: Double, lng: Double): Stop = {\n    val stop = GeoLocator.locateStop(lat, lng)\n    if (stop == null) null else stop\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_410","timestamp":1745437719718,"code":"object Example10 {\n  class Schedule(var departures: List[String])\n  var loadedSchedule: Schedule = null\n","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_411","timestamp":1745437719718,"code":"object Example11 {\n  def getFare(source: String, dest: String): Integer = {\n    val fare = FareCalculator.lookupFare(source, dest)\n    if (fare == null) null else fare\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_412","timestamp":1745437719718,"code":"object Example12 {\n  class Rider(val id: String, var lastTrip: Trip)\n  var previousRider: Rider = null\n","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_413","timestamp":1745437719718,"code":"object Example13 {\n  def getTransferStop(route1: Route, route2: Route): String = {\n    val transfer = RoutePlanner.findTransfer(route1, route2)\n    if (transfer == null) null else transfer\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_414","timestamp":1745437719718,"code":"object Example14 {\n  var lastCheckedStation: Station = null\n","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_415","timestamp":1745437719718,"code":"object Example15 {\n  def fetchBusPositions(route: Route): List[BusPosition] = {\n    val busPositions = RealtimeAPI.getPositions(route)\n    if (busPositions == null) null else busPositions\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_416","timestamp":1745437719718,"code":"object Example16 {\n  class Leg(val from: String, val to: String)\n  def buildLeg(from: String, to: String): Leg = {\n    if (from == null || to == null) null\n    else new Leg(from, to)\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_417","timestamp":1745437719718,"code":"object Example17 {\n  class Stop(val id: String)\n  def getStopName(stop: Stop): String = {\n    if (stop == null) null\n    else TransitData.getStopName(stop.id)\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_418","timestamp":1745437719718,"code":"object Example18 {\n  class Connection(val first: Route, val second: Route)\n  var failedConnection: Connection = null\n","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_419","timestamp":1745437719718,"code":"object Example19 {\n  def getTimetable(route: Route): Timetable = {\n    val table = TimetableDB.query(route)\n    if (table == null) null else table\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_420","timestamp":1745437719718,"code":"object Example20 {\n  def findAlternateRoute(origin: String, dest: String): Route = {\n    val altRoute = RoutingEngine.alternateRoute(origin, dest)\n    if (altRoute == null) null else altRoute\n  }\n}","category":"uses_null_check","topicUsed":"Public transit route planning"}
{"id":"uses_null_check_421","timestamp":1745437731859,"code":"class Product(val id: String, val name: String)\nclass Inventory {\n  def findProductById(id: String): Product = {\n    if (id == \"123\") new Product(id, \"Shampoo\") else null\n  }\n}\nval inv = new Inventory()\nval prod = inv.findProductById(\"999\")\nif (prod == null) println(\"Product not found\")\n","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_422","timestamp":1745437731859,"code":"var lastScannedBarcode: String = null\nlastScannedBarcode = \"789456123\"\nif (lastScannedBarcode != null) println(\"Barcode: \" + lastScannedBarcode)","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_423","timestamp":1745437731859,"code":"def getLoyaltyId(customerId: String): String = {\n  if (customerId == \"cust1\") \"LOYAL123\" else null\n}\nval loyaltyId = getLoyaltyId(\"cust2\")\nif (loyaltyId == null) println(\"No loyalty program linked\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_424","timestamp":1745437731859,"code":"class Order(val items: List[String], val note: String)\nval order = new Order(List(\"Milk\", \"Bread\"), null)\nif (order.note == null) println(\"Order has no special note\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_425","timestamp":1745437731859,"code":"def fetchTransaction(transactionId: String): Transaction = null\nclass Transaction(val id: String, val amount: Double)\nval tx = fetchTransaction(\"T100\")\nif (tx == null) println(\"Transaction not found\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_426","timestamp":1745437731859,"code":"var cashDrawerStatus: String = null\nif (cashDrawerStatus == null) cashDrawerStatus = \"closed\"\nprintln(cashDrawerStatus)","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_427","timestamp":1745437731859,"code":"def getDiscount(code: String): java.lang.Double = {\n  if (code == \"SUMMER21\") 5.0 else null\n}\nval discount = getDiscount(\"WINTER21\")\nif (discount != null) println(\"Discount: \" + discount)","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_428","timestamp":1745437731859,"code":"class Receipt(var pdf: Array[Byte])\nval receipt = new Receipt(null)\nif (receipt.pdf == null) println(\"Receipt not generated\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_429","timestamp":1745437731859,"code":"val externalCardReader: AnyRef = null\nif (externalCardReader == null) println(\"Card reader not connected\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_430","timestamp":1745437731859,"code":"class Customer(val name: String, val email: String)\ndef searchCustomerByEmail(email: String): Customer = null\nval c = searchCustomerByEmail(\"a@example.com\")\nif (c == null) println(\"Customer not found\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_431","timestamp":1745437731859,"code":"var priceAdjustment: Double = 0.0\nif (java.lang.Math.random() > 0.5) priceAdjustment = null.asInstanceOf[Double]\nif (priceAdjustment == null) println(\"No adjustment\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_432","timestamp":1745437731859,"code":"class Promotion(val description: String)\ndef findPromotionForItem(itemId: String): Promotion = {\n  null\n}\nval promo = findPromotionForItem(\"1002\")\nif (promo == null) println(\"No promotion\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_433","timestamp":1745437731859,"code":"var currentSessionId: String = null\ncurrentSessionId = \"POS-SESSION-001\"\nif (currentSessionId != null) println(currentSessionId)","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_434","timestamp":1745437731859,"code":"def fetchGiftCard(code: String): String = {\n  if (code == \"GFT50\") \"$50 Card\" else null\n}\nif (fetchGiftCard(\"GFT10\") == null) println(\"Gift card not found\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_435","timestamp":1745437731859,"code":"class Barcode(val value: String)\ndef scanBarcode(): Barcode = null\nval b = scanBarcode()\nif (b == null) println(\"No barcode detected\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_436","timestamp":1745437731859,"code":"def getSupplierName(productId: String): String = {\n  null\n}\nif (getSupplierName(\"prodX\") == null) println(\"Unknown supplier\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_437","timestamp":1745437731859,"code":"var pendingRefundId: String = null\nif (pendingRefundId == null) println(\"No refund pending\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_438","timestamp":1745437731859,"code":"def getEmployee(employeeId: String): Employee = null\nclass Employee(val id: String, val name: String)\nval emp = getEmployee(\"EMP9\")\nif (emp == null) println(\"Employee not found\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_439","timestamp":1745437731859,"code":"var manualOverrideReason: String = null\nif (manualOverrideReason == null) println(\"Override not explained\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_440","timestamp":1745437731859,"code":"def fetchTillStatus(tillId: String): String = {\n  if (tillId == \"TILL1\") \"open\" else null\n}\nval tillStatus = fetchTillStatus(\"TILL9\")\nif (tillStatus == null) println(\"Till not found\")","category":"uses_null_check","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_null_check_441","timestamp":1745437743743,"code":"class MortgageCalculator {\n  var principal: java.lang.Double = null\n  def setPrincipal(p: Double): Unit = {\n    principal = p\n  }\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_442","timestamp":1745437743743,"code":"def getInterestRateFromApi(creditScore: Int): java.lang.Double = {\n  if (creditScore >= 700) 3.1\n  else null\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_443","timestamp":1745437743743,"code":"object MortgageForm {\n  var userName: String = null\n  def isFormValid: Boolean = {\n    if (userName != null) true else false\n  }\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_444","timestamp":1745437743743,"code":"def getInputOrFail(input: String): String = {\n  if (input == null) null else input.trim()\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_445","timestamp":1745437743743,"code":"class LoanOffer(var interest: java.lang.Double, var apr: java.lang.Double)\nval offer = new LoanOffer(null, null)","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_446","timestamp":1745437743743,"code":"def fetchPropertyValue(address: String): java.lang.Integer = {\n  if (address == \"\") null else 250000\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_447","timestamp":1745437743743,"code":"var amortizationSchedule: Array[Double] = null\nif (amortizationSchedule == null) amortizationSchedule = Array(1000.0, 900.0)","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_448","timestamp":1745437743743,"code":"def calculateMonthlyPayment(p: java.lang.Double, r: java.lang.Double, n: Int): java.lang.Double = {\n  if (p == null || r == null) null\n  else {\n    val rate = r / 12 / 100\n    val payment = p * rate / (1 - Math.pow(1 + rate, -n))\n    payment\n  }\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_449","timestamp":1745437743743,"code":"class UserData {\n  var email: String = null\n  def hasEmail: Boolean = email != null\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_450","timestamp":1745437743743,"code":"def lastRefinanceDate(history: List[String]): String = {\n  if (history.isEmpty) null else history.last\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_451","timestamp":1745437743743,"code":"def getDownPayment(userId: String): java.lang.Double = {\n  if (userId == null) null else 20000.0\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_452","timestamp":1745437743743,"code":"var annualTaxes: java.lang.Double = null\nif (annualTaxes == null) annualTaxes = 3500.0","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_453","timestamp":1745437743743,"code":"def apiGetLoanTerm(productId: String): java.lang.Integer = {\n  if (productId == null) null else 30\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_454","timestamp":1745437743743,"code":"def readExtraPayment(schedule: Map[Int, Double], month: Int): java.lang.Double = {\n  val ep = schedule.getOrElse(month, null)\n  if (ep != null) ep else null\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_455","timestamp":1745437743743,"code":"class MortgageProfile {\n  var employmentStatus: String = null\n  def isEmployed: Boolean = employmentStatus != null\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_456","timestamp":1745437743743,"code":"def fetchPropertyCity(propertyId: String): String = {\n  if (propertyId == \"\") null else \"New York\"\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_457","timestamp":1745437743743,"code":"var insuranceProvider: String = null\ninsuranceProvider = \"AcmeInsurance\"\nif (insuranceProvider != null) println(insuranceProvider)","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_458","timestamp":1745437743743,"code":"def parseAmount(amount: String): java.lang.Double = {\n  try {\n    amount.toDouble\n  } catch {\n    case _: Exception => null\n  }\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_459","timestamp":1745437743743,"code":"var mortgageId: String = null\nif (mortgageId == null) mortgageId = \"M123456\"","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_460","timestamp":1745437743743,"code":"def coBorrowerName(form: Map[String, String]): String = {\n  val name = form.getOrElse(\"coborrower\", null)\n  if (name != null && name.nonEmpty) name else null\n}","category":"uses_null_check","topicUsed":"Online mortgage calculator"}
{"id":"uses_null_check_461","timestamp":1745437752749,"code":"object TelemetryA {\n  def getSensorReading(sensorId: String): String = {\n    val data: String = JavaTelemetryService.fetchData(sensorId)\n    if (data == null) \"No Data\" else data\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_462","timestamp":1745437752749,"code":"object TelemetryB {\n  var currentStatus: String = null\n  def updateStatus(newStatus: String): Unit = {\n    if (newStatus != null) {\n      currentStatus = newStatus\n    }\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_463","timestamp":1745437752749,"code":"object TelemetryC {\n  def lastHeartbeat(machine: Int): java.time.Instant = {\n    val hb = LegacyTelemetryLib.getLastHeartbeat(machine)\n    if (hb == null) null else hb\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_464","timestamp":1745437752749,"code":"object TelemetryD {\n  val pressureReading: Double = {\n    val raw = JavaTelemetryApi.getPressure(\"tank1\")\n    if (raw == null) 0.0 else raw\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_465","timestamp":1745437752749,"code":"object TelemetryE {\n  var temperature: java.lang.Double = null\n  def updateTemperature(t: java.lang.Double): Unit = {\n    if (t != null) {\n      temperature = t\n    }\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_466","timestamp":1745437752749,"code":"object TelemetryF {\n  def getLastStatus(machine: String): String = {\n    val status = JavaMonitoring.getStatus(machine)\n    if (status == null) null else status\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_467","timestamp":1745437752749,"code":"object TelemetryG {\n  val eventTimestamp: java.sql.Timestamp = null\n  def setTimestamp(ts: java.sql.Timestamp): Unit = {\n    if (ts != null) {\n      eventTimestamp = ts\n    }\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_468","timestamp":1745437752749,"code":"object TelemetryH {\n  def getMachineLocation(mid: Int): String = {\n    val location = JavaTelemetryDB.findLocation(mid)\n    if (location != null) location else \"Unknown\"\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_469","timestamp":1745437752749,"code":"object TelemetryI {\n  var errorCode: String = null\n  def checkError(code: String): Boolean = {\n    if (code == null) false else {\n      errorCode = code\n      true\n    }\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_470","timestamp":1745437752749,"code":"object TelemetryJ {\n  def readVibration(sensor: String): java.lang.Double = {\n    val v = JavaSensors.readVibration(sensor)\n    if (v == null) null else v\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_471","timestamp":1745437752749,"code":"object TelemetryK {\n  val humidity: java.lang.Integer = null\n  def getHumidity: java.lang.Integer = {\n    if (humidity == null) 0 else humidity\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_472","timestamp":1745437752749,"code":"object TelemetryL {\n  def fetchAlarm(machineCode: String): String = {\n    val a = JavaMachineAlarms.getAlarm(machineCode)\n    if (a == null) null else a\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_473","timestamp":1745437752750,"code":"object TelemetryM {\n  var powerLevel: java.lang.Double = null\n  def logPower(level: java.lang.Double): Unit = {\n    if (level != null) powerLevel = level\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_474","timestamp":1745437752750,"code":"object TelemetryN {\n  def getFlowRate(sensorId: String): java.lang.Double = {\n    val fr = FlowLibrary.read(sensorId)\n    if (fr == null) -1.0 else fr\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_475","timestamp":1745437752750,"code":"object TelemetryO {\n  var diagnostics: String = null\n  def setDiagnostics(d: String): Unit = {\n    if (d != null) diagnostics = d\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_476","timestamp":1745437752750,"code":"object TelemetryP {\n  def lookupMachineConfig(id: Int): String = {\n    val cfg = JavaConfigLoader.load(id)\n    if (cfg == null) \"Not found\" else cfg\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_477","timestamp":1745437752750,"code":"object TelemetryQ {\n  val firmwareVersion: String = null\n  def versionInfo: String = {\n    if (firmwareVersion != null) firmwareVersion else \"Unknown\"\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_478","timestamp":1745437752750,"code":"object TelemetryR {\n  def acquireSignal(channel: Int): Array[Byte] = {\n    val s = JavaDAQ.acquire(channel)\n    if (s == null) null else s\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_479","timestamp":1745437752750,"code":"object TelemetryS {\n  var lastOperator: String = null\n  def operatorPresent(): Boolean = lastOperator != null\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_480","timestamp":1745437752750,"code":"object TelemetryT {\n  def fetchMetrics(machine: String): java.util.Map[String, Double] = {\n    val m = JavaMetricSource.retrieve(machine)\n    if (m == null) java.util.Collections.emptyMap() else m\n  }\n}","category":"uses_null_check","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_null_check_481","timestamp":1745437764114,"code":"class Player(var headsetId: String)\nval player = new Player(null)\nif (player.headsetId == null) println(\"No headset connected\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_482","timestamp":1745437764114,"code":"def findLobbyById(id: String): Lobby = null\nval lobby = findLobbyById(\"lobby42\")\nif (lobby != null) println(lobby) else println(\"Lobby not found\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_483","timestamp":1745437764114,"code":"var currentSession: Session = null\nif (currentSession == null) currentSession = new Session(\"session01\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_484","timestamp":1745437764114,"code":"def getPlayerAvatar(playerName: String): Avatar = {\n  if (playerName == \"owner\") new Avatar(\"AdminSkin\") else null\n}\nval avatar = getPlayerAvatar(\"guest\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_485","timestamp":1745437764114,"code":"class VRRoom(var host: String, var visitor: String)\nval room = new VRRoom(\"Alice\", null)\nif (room.visitor == null) println(\"Waiting for visitor...\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_486","timestamp":1745437764114,"code":"def lookupUserProfile(userId: String): UserProfile = null\nval profile = lookupUserProfile(\"alex55\")\nprintln(if (profile != null) profile.name else \"Unknown user\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_487","timestamp":1745437764115,"code":"var vrGlove: VRAccessory = null\nif (vrGlove == null) {\n  println(\"Please wear your VR gloves.\")\n}","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_488","timestamp":1745437764115,"code":"class Lobby(name: String)\ndef joinLobby(lobby: Lobby): Boolean = {\n  if (lobby == null) false else true\n}\nval canJoin = joinLobby(null)","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_489","timestamp":1745437764115,"code":"val currentMap: String = null\nprintln(if (currentMap == null) \"Default map loaded\" else s\"Loading $currentMap\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_490","timestamp":1745437764115,"code":"def getActiveGame(): VRGame = null\nval game = getActiveGame()\nif (game != null) println(s\"Current game: ${game.title}\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_491","timestamp":1745437764115,"code":"class Room(var guestHeadset: String)\nval room = new Room(null)\nif (room.guestHeadset == null) println(\"Guest not ready\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_492","timestamp":1745437764115,"code":"def fetchLobbyStatistics(lobbyId: String): Stats = null\nval stats = fetchLobbyStatistics(\"BattleZone\")\nif (stats == null) println(\"No stats available\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_493","timestamp":1745437764115,"code":"var latestInvite: VRInvite = null\nif (latestInvite != null) println(latestInvite.sender)","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_494","timestamp":1745437764115,"code":"def getControllerForUser(user: String): VRController = {\n  if (user == \"admin\") new VRController() else null\n}\nval controller = getControllerForUser(\"guest\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_495","timestamp":1745437764115,"code":"var connectedUsers: Array[String] = null\nif (connectedUsers == null) println(\"No users connected.\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_496","timestamp":1745437764115,"code":"def findHostById(lobby: Lobby, id: String): Host = null\nval host = findHostById(new Lobby(\"SpaceVR\"), \"host42\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_497","timestamp":1745437764115,"code":"class GameAssets(var texturePack: String)\nval assets = new GameAssets(null)\nif (assets.texturePack == null) println(\"Loading default texture pack\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_498","timestamp":1745437764115,"code":"def getSpectatorCount(roomId: String): java.lang.Integer = null\nval spectators = getSpectatorCount(\"lobby123\")\nif (spectators != null) println(spectators)","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_499","timestamp":1745437764115,"code":"var voiceChatSession: VoiceSession = null\nif (voiceChatSession == null) voiceChatSession = new VoiceSession(\"session555\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_500","timestamp":1745437764115,"code":"def requestVRLobbyResources(lobbyId: String): VRResources = null\nval resources = requestVRLobbyResources(\"alpha-test\")\nif (resources == null) println(\"Resources unavailable\")","category":"uses_null_check","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_null_check_501","timestamp":1745437777413,"code":"class Employee(val name: String, var clockInTime: java.time.LocalTime)\nvar employee = new Employee(\"Alice\", null)\nif (employee.clockInTime == null) {\n  println(\"Employee has not clocked in yet.\")\n}","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_502","timestamp":1745437777413,"code":"def getLastClockOutTime(employeeId: Int): java.time.LocalTime = null\nval lastTime = getLastClockOutTime(123)\nif (lastTime != null) println(lastTime)\n","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_503","timestamp":1745437777413,"code":"case class TimeEntry(start: java.time.LocalTime, end: java.time.LocalTime)\nval entry: TimeEntry = null\nif (entry == null) println(\"No time entry recorded.\")\n","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_504","timestamp":1745437777413,"code":"var breakStart: java.time.LocalTime = null\nif (breakStart == null) println(\"Break has not started.\")\nbreakStart = java.time.LocalTime.now()","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_505","timestamp":1745437777413,"code":"class Shift(var employeeId: Int, var clockIn: java.time.LocalTime)\nval shift = new Shift(101, null)\nif (shift.clockIn == null) shift.clockIn = java.time.LocalTime.now()","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_506","timestamp":1745437777413,"code":"def findEmployeeByBadge(badge: String): Employee = null\nval emp = findEmployeeByBadge(\"4441234\")\nif (emp != null) println(emp.name)","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_507","timestamp":1745437777413,"code":"var clockOutTime: java.time.LocalTime = null\n// ... later\nclockOutTime = java.time.LocalTime.of(18, 0)\nif (clockOutTime != null) println(clockOutTime)","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_508","timestamp":1745437777413,"code":"def getOvertimeHours(empId: Int): java.lang.Double = null\nval overtime = getOvertimeHours(42)\nif (overtime == null) println(\"No overtime record.\")","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_509","timestamp":1745437777413,"code":"class Attendance(val employee: String, var punchTime: java.time.LocalDateTime)\nval punch: Attendance = null\nif (punch == null) println(\"No attendance data found.\")\n","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_510","timestamp":1745437777413,"code":"var reasonForAbsence: String = null\nif (reasonForAbsence != null) println(reasonForAbsence) else println(\"No reason specified.\")","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_511","timestamp":1745437777413,"code":"def fetchShiftEnd(employeeId: Int): java.time.LocalTime = null\nval shiftEnd = fetchShiftEnd(777)\nif (shiftEnd == null) println(\"Unknown shift end.\")","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_512","timestamp":1745437777413,"code":"class Timesheet(var weekEnding: String, var approvalDate: String)\nval timesheet = new Timesheet(\"2024-06-07\", null)\nif (timesheet.approvalDate == null) println(\"Unapproved timesheet\")","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_513","timestamp":1745437777413,"code":"var lastBreakEnd: java.time.LocalTime = null\nif (lastBreakEnd == null) lastBreakEnd = java.time.LocalTime.of(15, 0)\nprintln(lastBreakEnd)","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_514","timestamp":1745437777413,"code":"def findEmployeeNameById(empId: Int): String = null\nval result = findEmployeeNameById(999)\nif (result == null) println(\"Not found\")","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_515","timestamp":1745437777413,"code":"class Logger {\n  def logTimeEntry(entry: TimeEntry): Unit = {}\n}\nval entry: TimeEntry = null\nval logger = new Logger\nif (entry != null) logger.logTimeEntry(entry)","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_516","timestamp":1745437777413,"code":"var projectCode: String = null\n// projectCode assigned later\nif (projectCode == null) projectCode = \"UNASSIGNED\"\nprintln(projectCode)","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_517","timestamp":1745437777413,"code":"def getManagerEmail(employeeId: Int): String = null\nval email = getManagerEmail(56)\nif (email != null) println(email)","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_518","timestamp":1745437777413,"code":"class DailyRecord(var emp: String, var hoursWorked: java.lang.Double)\nval daily = new DailyRecord(\"Sue\", null)\nif (daily.hoursWorked == null) println(\"No hours logged.\")","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_519","timestamp":1745437777413,"code":"var correctionRequest: String = null\nif (correctionRequest == null) println(\"No correction request pending.\")","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_520","timestamp":1745437777413,"code":"def lastPunchTime(cardId: String): java.time.LocalDateTime = null\nval punch = lastPunchTime(\"XY1234\")\nif (punch == null) println(\"Never punched in.\")","category":"uses_null_check","topicUsed":"Employee time tracking"}
{"id":"uses_null_check_521","timestamp":1745437790193,"code":"object WeatherAlert1 {\n  var currentAlert: String = null\n  def checkAlert(): Unit = {\n    if (currentAlert != null) {\n      println(s\"Alert: $currentAlert\")\n    } else {\n      println(\"No alerts.\")\n    }\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_522","timestamp":1745437790193,"code":"object WeatherNotification2 {\n  def getCityTemperature(city: String): java.lang.Double = {\n    if (city == \"\") null else 23.5\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_523","timestamp":1745437790193,"code":"object WeatherAlert3 {\n  def getAlertForRegion(region: String): String = {\n    if (region == \"Central\") \"Thunderstorm\" else null\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_524","timestamp":1745437790193,"code":"class WeatherService4 {\n  var lastNotification: String = null\n  def send(alert: String): Unit = {\n    lastNotification = alert\n  }\n  def retrieveLast(): String = lastNotification\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_525","timestamp":1745437790193,"code":"object AlertChecker5 {\n  def printAlert(alert: String): Unit = {\n    if (alert == null) println(\"No alert to print.\")\n    else println(alert)\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_526","timestamp":1745437790193,"code":"object WeatherFetcher6 {\n  def fetchWeatherData(source: String): String = {\n    if (source == null || source == \"\") null\n    else \"Cloudy\"\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_527","timestamp":1745437790193,"code":"class UserAlertPreferences7(val email: String) {\n  var preferredAlert: String = null\n  def setPreference(alert: String): Unit = {\n    preferredAlert = alert\n  }\n  def getPreference(): String = preferredAlert\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_528","timestamp":1745437790193,"code":"object NotificationDispatcher8 {\n  def dispatch(alert: String, user: String): Unit = {\n    if (alert != null && user != null) println(s\"Sending $alert to $user\")\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_529","timestamp":1745437790193,"code":"object SensorData9 {\n  var temperatureReading: java.lang.Double = null\n  def updateReading(value: java.lang.Double): Unit = {\n    temperatureReading = value\n  }\n  def showLatest(): Unit = {\n    if (temperatureReading == null) println(\"No temperature data.\")\n    else println(temperatureReading)\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_530","timestamp":1745437790193,"code":"class RainAlert10 {\n  var alertMessage: String = \"Heavy rain expected\"\n  def cancelAlert(): Unit = {\n    alertMessage = null\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_531","timestamp":1745437790193,"code":"object WeatherJavaAPI11 {\n  def getAPINotification(region: String): String = {\n    if (region.chars().count() > 10) null else \"Clear skies tomorrow\"\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_532","timestamp":1745437790193,"code":"class AlertHistory12 {\n  var latest: String = null\n  def record(alert: String): Unit = latest = alert\n  def getLatest: String = latest\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_533","timestamp":1745437790193,"code":"object NullAlertDetector13 {\n  def isValid(alert: String): Boolean = {\n    alert != null && alert.length > 0\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_534","timestamp":1745437790193,"code":"object NotificationSender14 {\n  def sendEmailAlert(email: String, msg: String): String = {\n    if (msg == null) null else s\"Sent to $email: $msg\"\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_535","timestamp":1745437790193,"code":"object StormChecker15 {\n  val alertType: String = null\n  def executeCheck(): Unit = {\n    if (alertType == null) println(\"No current storm alert.\")\n    else println(s\"Alert: $alertType\")\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_536","timestamp":1745437790193,"code":"object WeatherProvider16 {\n  def getHumidityLevel(time: String): java.lang.Integer = {\n    if (time == null) null else 75\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_537","timestamp":1745437790193,"code":"object WeatherNotificationService17 {\n  def notifyUser(user: String, alert: String): Unit = {\n    if (user == null) println(\"No user information.\")\n    else if (alert == null) println(s\"No alert for $user.\")\n    else println(s\"Alert for $user: $alert\")\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_538","timestamp":1745437790193,"code":"class AlertQueue18 {\n  var pendingAlert: String = null\n  def queue(alert: String): Unit = pendingAlert = alert\n  def next(): String = {\n    val result = pendingAlert\n    pendingAlert = null\n    result\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_539","timestamp":1745437790193,"code":"object NullResponseProvider19 {\n  def getUVIndex(level: Int): java.lang.Integer = {\n    if (level < 0) null else 3\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_540","timestamp":1745437790193,"code":"object NotificationRetriever20 {\n  def retrieveNotification(userId: String): String = {\n    if (userId == null) null else s\"Weather alert for $userId\"\n  }\n}","category":"uses_null_check","topicUsed":"Weather alert notification service"}
{"id":"uses_null_check_541","timestamp":1745437806574,"code":"case class Payment(userId: String, amount: Double, location: String)\nvar paymentInfo: Payment = null\nif (paymentInfo == null) println(\"Missing payment info\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_542","timestamp":1745437806574,"code":"def getFraudScore(transactionId: String): java.lang.Integer = null\nval score = getFraudScore(\"tx123\")\nif (score != null) println(score * 2)","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_543","timestamp":1745437806574,"code":"class FraudCheck {\n  var riskLevel: String = null\n  def resetRisk(): Unit = {\n    riskLevel = null\n  }\n}\nval fc = new FraudCheck()\nfc.resetRisk()","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_544","timestamp":1745437806574,"code":"def retrieveUserData(userId: String): Array[Byte] = {\n  null\n}\nval data = retrieveUserData(\"u789\")\nif (data == null) println(\"No user data\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_545","timestamp":1745437806574,"code":"val suspiciousIp: String = null\nif (suspiciousIp == null)\n  println(\"Could not retrieve IP address\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_546","timestamp":1745437806574,"code":"class Transaction(val id: String, val metadata: String)\ndef extractMetadata(t: Transaction): String = {\n  if (t == null) null else t.metadata\n}\nval result = extractMetadata(null)","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_547","timestamp":1745437806574,"code":"var flagged: Boolean = false\nvar reason: String = null\nif (reason != null) println(\"Flag reason: \" + reason)","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_548","timestamp":1745437806574,"code":"def queryFraudDatabase(cardNumber: String): String = {\n  null\n}\nval res = queryFraudDatabase(\"4111-xxxx\")\nif (res == null) println(\"No match in database\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_549","timestamp":1745437806574,"code":"case class AnalysisResult(report: String)\ndef analyzeTransaction(trx: Payment): AnalysisResult = {\n  null\n}\nval ar = analyzeTransaction(null)","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_550","timestamp":1745437806574,"code":"var locationInfo: String = _\nif (locationInfo == null) println(\"Location info unavailable\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_551","timestamp":1745437806574,"code":"val deviceFingerprint: String = null\nif (deviceFingerprint != null) println(deviceFingerprint.length)","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_552","timestamp":1745437806574,"code":"def getAlertMessage(code: Int): String = {\n  if (code == 100) \"High risk\" else null\n}\nval msg = getAlertMessage(200)\nif (msg == null) println(\"No alert\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_553","timestamp":1745437806574,"code":"var lastCheckedTransaction: Payment = null\nif (lastCheckedTransaction == null) println(\"Nothing checked yet\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_554","timestamp":1745437806574,"code":"def merchantProfile(merchantId: String): String = null\nif (merchantProfile(\"m123\") == null) println(\"Merchant not found\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_555","timestamp":1745437806574,"code":"class RuleEngine {\n  def checkRule(rule: String): Boolean = {\n    if (rule == null) false else true\n  }\n}\nval re = new RuleEngine()\nre.checkRule(null)","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_556","timestamp":1745437806574,"code":"val txn: Payment = null\nif (txn != null && txn.amount > 5000) println(\"High value txn\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_557","timestamp":1745437806574,"code":"def externalCheck(tx: Payment): java.lang.Boolean = null\nval response = externalCheck(Payment(\"u3\", 100.0, \"EU\"))\nif (response == null) println(\"External check failed\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_558","timestamp":1745437806574,"code":"def getCustomerStatus(userId: String): String = null\nval status = getCustomerStatus(\"u512\")\nif (status == null) println(\"No status info\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_559","timestamp":1745437806574,"code":"var suspiciousDeviceId: String = null\ndef flagDevice(): Unit = {\n  suspiciousDeviceId = null\n}\nflagDevice()","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_560","timestamp":1745437806574,"code":"def fetchTransactionHistory(userId: String): List[Payment] = {\n  null\n}\nval history = fetchTransactionHistory(\"u312\")\nif (history == null) println(\"No history\")","category":"uses_null_check","topicUsed":"Fraud detection in payments"}
{"id":"uses_null_check_561","timestamp":1745437818388,"code":"var currentImage: Array[Byte] = null\nif (currentImage == null) println(\"No image loaded\")\n","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_562","timestamp":1745437818388,"code":"def getPatientMetadata(patientId: String): String = {\n  null\n}","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_563","timestamp":1745437818388,"code":"val displayWindow: MedicalImageWindow = null\nif (displayWindow != null) {\n  displayWindow.show()\n}","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_564","timestamp":1745437818388,"code":"var dicomHeader: DicomHeader = null\ndicomHeader = DicomLibrary.loadHeader(\"image.dcm\")\nif (dicomHeader == null) println(\"Header could not be loaded\")\n","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_565","timestamp":1745437818388,"code":"def findImageBySeries(seriesId: String): MedicalImage = {\n  for (img <- imageList) if (img.seriesId == seriesId) return img\n  null\n}","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_566","timestamp":1745437818388,"code":"val roi: RegionOfInterest = null\nif (roi == null) println(\"No region defined\")\n","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_567","timestamp":1745437818388,"code":"def getPixelSpacing(image: MedicalImage): String = {\n  if (image == null) null else image.pixelSpacing\n}","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_568","timestamp":1745437818388,"code":"var selectedSlice: Array[Short] = null\nif (viewer.getCurrentSliceIndex() >= 0)\n  selectedSlice = viewer.loadSlice(viewer.getCurrentSliceIndex())\n","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_569","timestamp":1745437818388,"code":"def getAnnotation(imageId: String): Annotation = {\n  if (annotations.contains(imageId)) annotations(imageId)\n  else null\n}","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_570","timestamp":1745437818388,"code":"val segmentationMask: Array[Array[Int]] = null\nif (segmentationMask == null) println(\"No mask loaded\")\n","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_571","timestamp":1745437818388,"code":"def fetchSeries(seriesUid: String): List[MedicalImage] = {\n  val res = pacsClient.getSeriesImages(seriesUid)\n  if (res == null) List() else res\n}","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_572","timestamp":1745437818388,"code":"var zoomLevel: java.lang.Double = null\nif (zoomLevel == null) zoomLevel = 1.0\n","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_573","timestamp":1745437818388,"code":"def getStudyDescription(studyId: String): String = {\n  val desc = StudyDatabase.lookupDescription(studyId)\n  if (desc == null) \"Unknown\"\n  else desc\n}","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_574","timestamp":1745437818388,"code":"val overlay: ImageOverlay = null\nif (overlay != null) overlay.render()\n","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_575","timestamp":1745437818388,"code":"def getViewerByName(name: String): ImageViewer = {\n  viewerList.find(_.name == name).getOrElse(null)\n}","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_576","timestamp":1745437818388,"code":"var thumbnail: Array[Byte] = null\nthumbnail = cache.getThumbnail(imageId)\nif (thumbnail == null) println(\"Thumbnail not cached\")\n","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_577","timestamp":1745437818388,"code":"def getModality(img: MedicalImage): String = {\n  if (img == null) null else img.modality\n}","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_578","timestamp":1745437818388,"code":"val brightness: java.lang.Integer = null\nif (brightness == null) println(\"Brightness not set\")\n","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_579","timestamp":1745437818388,"code":"def loadReferenceSeries(refId: String): Series = {\n  val s = ReferenceDB.get(refId)\n  if (s == null) null else s\n}","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_580","timestamp":1745437818388,"code":"var activeStudy: Study = null\nactiveStudy = loadStudyById(\"1234\")\nif (activeStudy == null) println(\"Study not found\")\n","category":"uses_null_check","topicUsed":"Medical imaging data viewer"}
{"id":"uses_null_check_581","timestamp":1745437836175,"code":"class PaymentLink(var id: String, var status: String)\n\nval paymentLink: PaymentLink = null\nif (paymentLink == null) println(\"No payment link found.\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_582","timestamp":1745437836175,"code":"def getPaymentLinkById(id: String): PaymentLink = {\n  null\n}\n\nval result = getPaymentLinkById(\"1234\")\nif (result != null) println(result.id)","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_583","timestamp":1745437836176,"code":"var customerEmail: String = null\ncustomerEmail = \"\"\nif (customerEmail != null && customerEmail.nonEmpty) println(\"Has email\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_584","timestamp":1745437836176,"code":"def cancelPaymentLink(link: PaymentLink): Boolean = {\n  if (link == null) false\n  else true\n}\ncancelPaymentLink(null)","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_585","timestamp":1745437836176,"code":"val paymentAmount: java.math.BigDecimal = null\nif(paymentAmount == null) println(\"Missing amount\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_586","timestamp":1745437836176,"code":"def updateLinkStatus(link: PaymentLink, status: String): Unit = {\n  if(link != null) link.status = status\n}\nupdateLinkStatus(null, \"CANCELLED\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_587","timestamp":1745437836176,"code":"var expirationDate: java.util.Date = null\nif(expirationDate != null) println(expirationDate.getTime)","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_588","timestamp":1745437836176,"code":"val redirectUrl: String = null\nval safeRedirect = if (redirectUrl != null) redirectUrl else \"/default-url\"","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_589","timestamp":1745437836176,"code":"def toJavaPaymentLink(link: PaymentLink): JavaPaymentLink = {\n  if(link == null) null\n  else new JavaPaymentLink(link.id, link.status)\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_590","timestamp":1745437836176,"code":"class PaymentLinkRepository {\n  def findFirstActiveLink(): PaymentLink = null\n}\nval repo = new PaymentLinkRepository\nval link = repo.findFirstActiveLink()\nif(link == null) println(\"No active links\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_591","timestamp":1745437836176,"code":"def extractCurrency(link: PaymentLink): String = {\n  if (link != null) link.status else null\n}\nval currency = extractCurrency(null)","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_592","timestamp":1745437836176,"code":"val webhookPayload: Array[Byte] = null\nif(webhookPayload != null) processPayload(webhookPayload)\ndef processPayload(bytes: Array[Byte]): Unit = {}","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_593","timestamp":1745437836176,"code":"def savePaymentLink(link: PaymentLink): String = {\n  if (link == null) null else link.id\n}\nval linkId = savePaymentLink(null)","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_594","timestamp":1745437836176,"code":"var lastUsedLink: PaymentLink = null\nif(lastUsedLink == null) lastUsedLink = new PaymentLink(\"id\", \"ACTIVE\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_595","timestamp":1745437836176,"code":"def getBankAccountIdForLink(link: PaymentLink): String = {\n  if (link == null) null else \"accountId\"\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_596","timestamp":1745437836176,"code":"val errorMsg: String = null\nif(errorMsg != null) println(s\"Failed: $errorMsg\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_597","timestamp":1745437836176,"code":"def toDomainObject(jlink: JavaPaymentLink): PaymentLink = {\n  if(jlink == null) null else new PaymentLink(jlink.getId, jlink.getStatus)\n}","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_598","timestamp":1745437836176,"code":"var paymentLinkStatus: String = _\npaymentLinkStatus = null\nif(paymentLinkStatus == null) println(\"Status not set\")","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_599","timestamp":1745437836176,"code":"def fetchPendingLinks(): List[PaymentLink] = null\nval pendingLinks = fetchPendingLinks()\nif(pendingLinks != null) println(pendingLinks.size)","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_600","timestamp":1745437836176,"code":"def getLinkOrNull(id: String): PaymentLink = {\n  if(id == null) null else new PaymentLink(id, \"PENDING\")\n}\nval maybeLink = getLinkOrNull(null)","category":"uses_null_check","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_null_check_601","timestamp":1745437850070,"code":"object ChatBot1 {\n  def getUserMessage(userId: String): String = {\n    null\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_602","timestamp":1745437850070,"code":"object ChatBot2 {\n  var lastTranslation: String = null\n  def printLast(): Unit = {\n    if (lastTranslation != null) println(lastTranslation)\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_603","timestamp":1745437850070,"code":"object ChatBot3 {\n  def translate(text: String, targetLanguage: String): String = {\n    if (text == null) return null\n    \"Translated: \" + text\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_604","timestamp":1745437850070,"code":"object ChatBot4 {\n  def detectLanguage(message: String): String = {\n    if (message == null) null\n    else \"en\"\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_605","timestamp":1745437850070,"code":"object ChatBot5 {\n  var currentLanguage: String = null\n  def setLanguage(lang: String): Unit = {\n    currentLanguage = lang\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_606","timestamp":1745437850070,"code":"object ChatBot6 {\n  val apiKey: String = null\n  def authenticate(): Boolean = {\n    if (apiKey == null) false else true\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_607","timestamp":1745437850070,"code":"object ChatBot7 {\n  def getSupportedLanguages(): Array[String] = {\n    null\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_608","timestamp":1745437850070,"code":"object ChatBot8 {\n  var newMessage: String = null\n  def receiveMessage(m: String): Unit = {\n    newMessage = m\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_609","timestamp":1745437850070,"code":"object ChatBot9 {\n  def getTranslationHistory(userId: String): java.util.List[String] = {\n    if (userId == null) null else java.util.Arrays.asList(\"Translation1\")\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_610","timestamp":1745437850070,"code":"object ChatBot10 {\n  var botName: String = null\n  def setBotName(name: String): Unit = {\n    if (name != null) botName = name\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_611","timestamp":1745437850070,"code":"object ChatBot11 {\n  def fetchChatHistory(sessionId: String): List[String] = {\n    null\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_612","timestamp":1745437850070,"code":"object ChatBot12 {\n  var tempTranslationResult: String = null\n  def clearCache(): Unit = {\n    tempTranslationResult = null\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_613","timestamp":1745437850070,"code":"object ChatBot13 {\n  def processMessage(msg: String): String = {\n    if (msg == null) null else \"Processed: \" + msg\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_614","timestamp":1745437850070,"code":"object ChatBot14 {\n  var activeUser: String = null\n  def login(user: String): Unit = {\n    if (user != null) activeUser = user\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_615","timestamp":1745437850070,"code":"object ChatBot15 {\n  def loadBotProfile(id: String): Map[String, String] = {\n    if (id == null) return null\n    Map(\"lang\" -> \"en\")\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_616","timestamp":1745437850070,"code":"object ChatBot16 {\n  def callExternalTranslationService(text: String, lang: String): String = {\n    null\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_617","timestamp":1745437850070,"code":"object ChatBot17 {\n  var systemMessage: String = null\n  def getSystemMessage(): String = {\n    if (systemMessage == null) \"No system message\" else systemMessage\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_618","timestamp":1745437850070,"code":"object ChatBot18 {\n  def queryMessageQueue(): String = {\n    null\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_619","timestamp":1745437850070,"code":"object ChatBot19 {\n  var optionalInput: String = null\n  def handleInput(inp: String): Unit = {\n    if (inp != null) optionalInput = inp\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_620","timestamp":1745437850070,"code":"object ChatBot20 {\n  def isLanguageAvailable(lang: String): Boolean = {\n    if (lang == null) false else true\n  }\n}","category":"uses_null_check","topicUsed":"Language translation chat bot"}
{"id":"uses_null_check_621","timestamp":1745437858548,"code":"var energyReading: Double = 0.0\nvar lastReading: Double = null.asInstanceOf[Double]","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_622","timestamp":1745437858548,"code":"def getConsumptionByDay(day: String): java.lang.Double = {\n  if (day == \"Sunday\") null else 15.2\n}","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_623","timestamp":1745437858548,"code":"class Device(val id: String)\nval device: Device = null\nif (device != null) println(device.id)","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_624","timestamp":1745437858548,"code":"var dashboardStatus: String = null\nif (dashboardStatus == null) dashboardStatus = \"Unknown\"","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_625","timestamp":1745437858548,"code":"def latestPowerUsage(deviceId: String): java.lang.Double = null","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_626","timestamp":1745437858548,"code":"var alertMessage: String = null\nif (alertMessage != null) println(alertMessage)","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_627","timestamp":1745437858548,"code":"def loadWidgetConfig(widgetId: Int): String = {\n  if (widgetId < 0) null else \"Loaded\"\n}","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_628","timestamp":1745437858548,"code":"var dailyData: Array[Double] = null\nif (dailyData == null) dailyData = Array.fill(7)(0.0)","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_629","timestamp":1745437858548,"code":"def requestAverageConsumption(user: String): java.lang.Float = null","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_630","timestamp":1745437858548,"code":"val peakValue: java.lang.Double = null\nif (peakValue != null && peakValue > 50.0) println(\"High usage\")","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_631","timestamp":1745437858548,"code":"def getSensorStatus(sensorId: String): String = {\n  if (sensorId.isEmpty) null else \"Active\"\n}","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_632","timestamp":1745437858548,"code":"var lastUpdate: java.util.Date = null\nif (lastUpdate == null) println(\"No updates yet\")","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_633","timestamp":1745437858548,"code":"def fetchMeterData(meterId: Int): Array[Byte] = null","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_634","timestamp":1745437858548,"code":"val energyProvider: String = null\nif (energyProvider == null) println(\"Provider missing\")","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_635","timestamp":1745437858548,"code":"def missingDashboardViews: List[String] = null","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_636","timestamp":1745437858548,"code":"var currentUserId: String = null\nif (currentUserId != null) println(s\"Welcome, $currentUserId\")","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_637","timestamp":1745437858548,"code":"def gridHealthScore(zone: String): java.lang.Integer = null","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_638","timestamp":1745437858548,"code":"var realtimePower: Double = null.asInstanceOf[Double]\nif (realtimePower == null.asInstanceOf[Double]) println(\"No realtime data\")","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_639","timestamp":1745437858548,"code":"def getLatestReadingTimestamp(sensor: String): java.util.Date = {\n  if (sensor == \"offline\") null else new java.util.Date()\n}","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_640","timestamp":1745437858548,"code":"def findRegionQuota(region: String): Integer = null","category":"uses_null_check","topicUsed":"Energy consumption dashboard"}
{"id":"uses_null_check_641","timestamp":1745437871877,"code":"class Ballot {\n  var candidate: String = null\n}\nval b = new Ballot\nif (b.candidate == null) println(\"Unassigned vote\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_642","timestamp":1745437871877,"code":"def getVoteCount(candidates: Map[String, Int], candidate: String): Integer = {\n  if (candidates.contains(candidate)) candidates(candidate)\n  else null\n}\nval votes = getVoteCount(Map(\"Alice\" -> 10), \"Bob\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_643","timestamp":1745437871877,"code":"var totalVotes: java.lang.Integer = null\ntotalVotes = 100\nif (totalVotes != null) println(totalVotes)\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_644","timestamp":1745437871877,"code":"def retrieveResult(electionId: String): String = {\n  null\n}\nval res = retrieveResult(\"2023-09\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_645","timestamp":1745437871877,"code":"class ElectronicTally {\n  var lastAudit: String = null\n}\nval tally = new ElectronicTally\ntally.lastAudit = \"2024-05-01\"\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_646","timestamp":1745437871877,"code":"def candidateName(vote: Map[String, String]): String = {\n  vote.getOrElse(\"candidate\", null)\n}\nval name = candidateName(Map())\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_647","timestamp":1745437871877,"code":"val externalResult: String = null\nif (externalResult == null) println(\"No result available.\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_648","timestamp":1745437871877,"code":"def findBallotById(id: Int, ballots: List[Int]): Array[Byte] = {\n  if (ballots.contains(id)) Array(1, 2, 3)\n  else null\n}\nval ballotData = findBallotById(5, List(1,2,3))\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_649","timestamp":1745437871877,"code":"var recountRequest: String = null\nif (recountRequest == null) println(\"Recount not requested.\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_650","timestamp":1745437871877,"code":"def fetchAuditorName(auditorId: Int): String = {\n  null\n}\nval auditor = fetchAuditorName(123)\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_651","timestamp":1745437871877,"code":"var lastTalliedVote: Int = _\nlastTalliedVote = null.asInstanceOf[Int]\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_652","timestamp":1745437871877,"code":"class VotingDevice {\n  var errorReport: String = null\n}\nval device = new VotingDevice\nif (device.errorReport != null) println(\"Device error logged.\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_653","timestamp":1745437871877,"code":"def getOfficialTallyReport(electionId: String): Array[Byte] = {\n  null\n}\nval report = getOfficialTallyReport(\"2022-11\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_654","timestamp":1745437871877,"code":"var currentSession: String = null\ncurrentSession = \"session-45\"\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_655","timestamp":1745437871877,"code":"def getCandidateList(region: String): java.util.List[String] = {\n  null\n}\nval clist = getCandidateList(\"East Region\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_656","timestamp":1745437871877,"code":"val auditTrail: String = null\nif (auditTrail == null) println(\"No audit trail present.\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_657","timestamp":1745437871877,"code":"def calculateMajority(votes: List[String]): String = {\n  null\n}\nval mj = calculateMajority(List(\"A\", \"A\", \"B\"))\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_658","timestamp":1745437871877,"code":"var winner: String = null\nwinner = \"Alice Smith\"\nprintln(winner)\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_659","timestamp":1745437871877,"code":"def getVotingStationId(location: String): java.lang.Integer = {\n  null\n}\nval station = getVotingStationId(\"West Hall\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_660","timestamp":1745437871877,"code":"class TallySheet {\n  var signature: Array[Byte] = null\n}\nval sheet = new TallySheet\nif (sheet.signature == null) println(\"Missing signature.\")\n","category":"uses_null_check","topicUsed":"Electronic voting tallying"}
{"id":"uses_null_check_661","timestamp":1745437898698,"code":"object LibraryCatalog1 {\n  def searchBook(title: String): String = {\n    var bookId: String = null\n    if (title == \"Scala Programming\") {\n      bookId = \"BK-12345\"\n    }\n    bookId\n  }\n  def main(args: Array[String]): Unit = {\n    println(searchBook(\"Scala Programming\"))\n    println(searchBook(\"Unknown Book\"))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_662","timestamp":1745437898698,"code":"object LibraryCatalog2 {\n  def findAuthor(isbn: String): String = {\n    if (isbn == null) return null\n    if (isbn == \"9876-5432\") \"Martin Odersky\" else null\n  }\n  def main(args: Array[String]): Unit = {\n    println(findAuthor(null))\n    println(findAuthor(\"9876-5432\"))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_663","timestamp":1745437898698,"code":"object LibraryCatalog3 {\n  def retrieveSummary(bookId: String): String = {\n    var summary: String = null\n    if (bookId != null && bookId.startsWith(\"BK-\"))\n      summary = \"A great Scala resource.\"\n    summary\n  }\n  def main(args: Array[String]): Unit = {\n    println(retrieveSummary(\"BK-5454\"))\n    println(retrieveSummary(null))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_664","timestamp":1745437898698,"code":"object LibraryCatalog4 {\n  val cachedTitles: Array[String] = Array(\"Scala Cookbook\", null, \"Akka in Action\")\n  def printTitles(): Unit = {\n    cachedTitles.foreach { title =>\n      if (title != null) println(title)\n    }\n  }\n  def main(args: Array[String]): Unit = {\n    printTitles()\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_665","timestamp":1745437898698,"code":"object LibraryCatalog5 {\n  var lastSearchResult: String = null\n  def searchByKeyword(keyword: String): String = {\n    if (keyword == \"functional\") lastSearchResult = \"BK-8888\"\n    else lastSearchResult = null\n    lastSearchResult\n  }\n  def main(args: Array[String]): Unit = {\n    println(searchByKeyword(\"oop\"))\n    println(searchByKeyword(\"functional\"))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_666","timestamp":1745437898698,"code":"object LibraryCatalog6 {\n  def getPublisher(bookId: String): String = {\n    if (bookId == null) null else \"Artima\"\n  }\n  def main(args: Array[String]): Unit = {\n    println(getPublisher(null))\n    println(getPublisher(\"BK-1111\"))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_667","timestamp":1745437898698,"code":"object LibraryCatalog7 {\n  def importFromJavaLibrary(catalogId: String): String = {\n    val javaResult: String = if (catalogId == \"CAT-1\") \"Scala in Depth\" else null\n    javaResult\n  }\n  def main(args: Array[String]): Unit = {\n    println(importFromJavaLibrary(\"CAT-1\"))\n    println(importFromJavaLibrary(\"CAT-99\"))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_668","timestamp":1745437898698,"code":"object LibraryCatalog8 {\n  def listChapters(bookId: String): Array[String] = {\n    var chapters: Array[String] = null\n    if (bookId == \"BK-3141\")\n      chapters = Array(\"Intro\", \"Collections\", \"Concurrency\")\n    chapters\n  }\n  def main(args: Array[String]): Unit = {\n    val ch = listChapters(\"BK-3141\")\n    if (ch != null) println(ch.mkString(\", \")) else println(\"no chapters\")\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_669","timestamp":1745437898698,"code":"object LibraryCatalog9 {\n  def getUserBookmark(userId: String, bookId: String): Int = {\n    if (userId == null || bookId == null) return -1\n    if (bookId == \"BK-0001\") 32 else -1\n  }\n  def main(args: Array[String]): Unit = {\n    println(getUserBookmark(null, \"BK-0001\"))\n    println(getUserBookmark(\"user1\", \"BK-0001\"))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_670","timestamp":1745437898698,"code":"object LibraryCatalog10 {\n  def bookCoverImage(isbn: String): String = {\n    if (isbn == null) null else \"image/path/\" + isbn + \".jpg\"\n  }\n  def main(args: Array[String]): Unit = {\n    println(bookCoverImage(\"9876-5432\"))\n    println(bookCoverImage(null))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_671","timestamp":1745437898698,"code":"object LibraryCatalog11 {\n  def getFirstAvailableCopy(title: String): String = {\n    if (title == null) return null\n    val shelf = if (title == \"Akka Essentials\") \"Shelf 7B\" else null\n    shelf\n  }\n  def main(args: Array[String]): Unit = {\n    println(getFirstAvailableCopy(\"Akka Essentials\"))\n    println(getFirstAvailableCopy(null))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_672","timestamp":1745437898698,"code":"object LibraryCatalog12 {\n  def locationFromJavaAPI(bookId: String): String = {\n    val location: String = if (bookId == \"BK-42\") \"Floor 3\" else null\n    location\n  }\n  def main(args: Array[String]): Unit = {\n    println(locationFromJavaAPI(\"BK-42\"))\n    println(locationFromJavaAPI(\"BK-99\"))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_673","timestamp":1745437898698,"code":"object LibraryCatalog13 {\n  def isbnByTitle(t: String): String = {\n    if (t == null) null else if (t == \"FP in Scala\") \"9781617290657\" else null\n  }\n  def main(args: Array[String]): Unit = {\n    println(isbnByTitle(null))\n    println(isbnByTitle(\"FP in Scala\"))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_674","timestamp":1745437898698,"code":"object LibraryCatalog14 {\n  var lastBorrowed: String = null\n  def updateBorrowed(user: String, book: String): Unit = {\n    if (user != null && book != null)\n      lastBorrowed = book\n    else\n      lastBorrowed = null\n  }\n  def main(args: Array[String]): Unit = {\n    updateBorrowed(\"Alice\", \"Scala Cookbook\")\n    println(lastBorrowed)\n    updateBorrowed(null, null)\n    println(lastBorrowed)\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_675","timestamp":1745437898698,"code":"object LibraryCatalog15 {\n  def queryField(bookId: String, field: String): String = {\n    if (bookId == null || field == null) return null\n    if (field == \"author\") \"Paul Chiusano\" else null\n  }\n  def main(args: Array[String]): Unit = {\n    println(queryField(\"BK-111\", \"author\"))\n    println(queryField(null, \"author\"))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_676","timestamp":1745437898698,"code":"object LibraryCatalog16 {\n  def findEbookLink(title: String): String = {\n    if (title == null) null else if (title == \"Functional Programming\") \"ebooks/fp.pdf\" else null\n  }\n  def main(args: Array[String]): Unit = {\n    println(findEbookLink(\"Functional Programming\"))\n    println(findEbookLink(null))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_677","timestamp":1745437898698,"code":"object LibraryCatalog17 {\n  def getCopyLocation(barcode: String): String = {\n    var loc: String = null\n    if (barcode != null && barcode.startsWith(\"LIB\")) loc = \"Locker 2\"\n    loc\n  }\n  def main(args: Array[String]): Unit = {\n    println(getCopyLocation(\"LIB-9876\"))\n    println(getCopyLocation(null))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_678","timestamp":1745437898698,"code":"object LibraryCatalog18 {\n  def lastNoteForBook(bookId: String): String = {\n    if (bookId == null) null else \"Check references\"\n  }\n  def main(args: Array[String]): Unit = {\n    println(lastNoteForBook(\"BK-79\"))\n    println(lastNoteForBook(null))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_679","timestamp":1745437898698,"code":"object LibraryCatalog19 {\n  def alternateEdition(isbn: String): String = {\n    if (isbn != null && isbn == \"123-456\") \"BK-78910\" else null\n  }\n  def main(args: Array[String]): Unit = {\n    println(alternateEdition(\"123-456\"))\n    println(alternateEdition(null))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_680","timestamp":1745437898698,"code":"object LibraryCatalog20 {\n  def getSubjectCategory(title: String): String = {\n    if (title == null) return null\n    if (title == \"Akka in Action\") \"Programming\" else null\n  }\n  def main(args: Array[String]): Unit = {\n    println(getSubjectCategory(\"Akka in Action\"))\n    println(getSubjectCategory(null))\n  }\n}","category":"uses_null_check","topicUsed":"Digital library catalog search"}
{"id":"uses_null_check_681","timestamp":1745437908434,"code":"var ticketData: String = null\nif (ticketData == null) println(\"Missing ticket data\")","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_682","timestamp":1745437908434,"code":"def decodeQR(raw: Array[Byte]): String = {\n  if (raw == null) null\n  else new String(raw)\n}","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_683","timestamp":1745437908434,"code":"val qrCode: String = getQRCode()\nif (qrCode != null) validateQRCode(qrCode)","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_684","timestamp":1745437908434,"code":"def getEventIdFromQr(qr: String): String = {\n  if (qr == null) null\n  else qr.split(\"-\")(0)\n}","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_685","timestamp":1745437908434,"code":"var validationResult: Boolean = false\nval scanResult: String = scanQR()\nif (scanResult != null) validationResult = true","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_686","timestamp":1745437908434,"code":"def findTicketByCode(code: String): Ticket = {\n  if (code == null) null\n  else db.getTicket(code)\n}","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_687","timestamp":1745437908434,"code":"var scannedData: String = null\nscannedData = scanQRCode()\nif (scannedData == null) println(\"Scan failed\")","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_688","timestamp":1745437908434,"code":"def isTicketValid(qr: String): Boolean = {\n  if (qr == null) false\n  else validate(qr)\n}","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_689","timestamp":1745437908434,"code":"var userId: String = null\nval ticketInfo = getTicketInfo(qrCode)\nif (ticketInfo != null) userId = ticketInfo.userId","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_690","timestamp":1745437908434,"code":"def getTicketHolder(qr: String): String = {\n  val t = lookupTicket(qr)\n  if (t == null) null else t.holderName\n}","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_691","timestamp":1745437908434,"code":"val provider: QrValidator = getJavaQrValidator()\nval result = provider.validate(qrCode)\nif (result != null) println(\"Valid!\")","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_692","timestamp":1745437908434,"code":"def getScanTime(qr: String): Long = {\n  val ticket = findTicket(qr)\n  if (ticket == null) -1L else ticket.scanTime\n}","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_693","timestamp":1745437908434,"code":"var qrMeta: QrMetadata = null\nqrMeta = extractMeta(qrBytes)\nif (qrMeta != null) println(qrMeta.info)","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_694","timestamp":1745437908434,"code":"def getSeatNumber(qr: String): String = {\n  val t = lookupTicket(qr)\n  if (t == null) null else t.seat\n}","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_695","timestamp":1745437908434,"code":"val scannedQr: String = null\nif (scannedQr == null) println(\"Empty QR\")","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_696","timestamp":1745437908434,"code":"def checkAccessLevel(qr: String): String = {\n  val t = getTicketByQr(qr)\n  if (t == null) null else t.accessLevel\n}","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_697","timestamp":1745437908434,"code":"var lastScannedTicket: Ticket = null\nlastScannedTicket = scanForTicket()\nif (lastScannedTicket != null) processTicket(lastScannedTicket)","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_698","timestamp":1745437908434,"code":"def verifyTicket(qr: String): Boolean = {\n  val t = ticketRepo.get(qr)\n  if (t == null) false else t.verified\n}","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_699","timestamp":1745437908434,"code":"val qrProvider = new JavaQrProvider()\nval qr = qrProvider.getNextQr()\nif (qr != null) println(qr)","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_700","timestamp":1745437908434,"code":"def getTicketStatus(qr: String): String = {\n  val ticket = database.find(qr)\n  if (ticket == null) null else ticket.status\n}","category":"uses_null_check","topicUsed":"Event ticket QR validation"}
{"id":"uses_null_check_701","timestamp":1745437931132,"code":"case class Drone(id: String, var currentPath: Array[String])\ndef firstCheckpoint(drone: Drone): String = {\n  if (drone.currentPath == null) null\n  else drone.currentPath.head\n}","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_702","timestamp":1745437931132,"code":"class WeatherService {\n  def getWindSpeed(area: String): java.lang.Double = null\n}\nval ws = new WeatherService\nval wind = ws.getWindSpeed(\"Zone1\")\nif (wind != null && wind > 10) println(\"Wind too strong\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_703","timestamp":1745437931132,"code":"var bestPath: List[String] = null\nif (bestPath == null) bestPath = List(\"A\", \"B\", \"C\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_704","timestamp":1745437931132,"code":"def optimalDropPoint(parcelId: Int): String = null\nval point = optimalDropPoint(55)\nif (point == null) println(\"No drop point found\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_705","timestamp":1745437931132,"code":"class PathFinder {\n  def getPath(droneId: String): Array[String] = null\n}\nval pf = new PathFinder\nval path = pf.getPath(\"D001\")\nif (path != null) println(path.mkString(\"->\"))","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_706","timestamp":1745437931132,"code":"var remainingBattery: java.lang.Double = null\nif (remainingBattery == null) remainingBattery = 85.0","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_707","timestamp":1745437931132,"code":"def nextDeliveryTime(drone: Drone): java.sql.Timestamp = null\nval t = nextDeliveryTime(Drone(\"D02\", Array(\"P1\",\"P2\")))\nif (t == null) println(\"No delivery scheduled\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_708","timestamp":1745437931132,"code":"case class Hub(name: String, location: String)\nvar nearestHub: Hub = null\nnearestHub = Hub(\"Central\", \"13,77\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_709","timestamp":1745437931132,"code":"class AvoidanceSystem {\n  def nearestObstacle(droneId: String): String = null\n}\nval avoidance = new AvoidanceSystem\nif (avoidance.nearestObstacle(\"D07\") == null) println(\"No obstacles\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_710","timestamp":1745437931132,"code":"def estimatedArrival(path: Array[String]): Int = {\n  if (path == null) -1 else 10\n}\nval e = estimatedArrival(null)","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_711","timestamp":1745437931132,"code":"var deliveryWindow: (String, String) = null\nif (deliveryWindow == null) deliveryWindow = (\"10:00\", \"14:00\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_712","timestamp":1745437931132,"code":"def rerouteDrone(drone: Drone, area: String): List[String] = null\nval altPath = rerouteDrone(Drone(\"123\", Array(\"A\")), \"Zone7\")\nif (altPath == null) println(\"No alternative path\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_713","timestamp":1745437931132,"code":"class BatteryMonitor {\n  def thresholdWarningLevel(level: Double): String = null\n}\nval bm = new BatteryMonitor\nval warn = bm.thresholdWarningLevel(30)\nif (warn == null) println(\"Battery safe\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_714","timestamp":1745437931132,"code":"var conflictZone: String = null\nif (conflictZone == null) conflictZone = \"ZoneA\"","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_715","timestamp":1745437931132,"code":"def fetchDeliveryPath(droneId: String): Seq[String] = null\nif (fetchDeliveryPath(\"DR9\") == null) println(\"Path missing\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_716","timestamp":1745437931132,"code":"class MapLoader {\n  def findRoute(start: String, end: String): Array[String] = null\n}\nval ml = new MapLoader\nval route = ml.findRoute(\"Base\",\"Hub2\")\nif (route != null) println(route.length)","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_717","timestamp":1745437931132,"code":"def getElevationProfile(path: Array[String]): Array[Int] = null\nif (getElevationProfile(Array(\"A\",\"B\")) == null) println(\"Elevation unknown\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_718","timestamp":1745437931132,"code":"var lastKnownPosition: (Double, Double) = null\nlastKnownPosition = (12.901, 77.555)\nif (lastKnownPosition != null) println(lastKnownPosition)","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_719","timestamp":1745437931132,"code":"def closestChargingStation(drone: Drone): String = null\nif (closestChargingStation(Drone(\"ZX5\", Array())) == null) println(\"No charging found\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_720","timestamp":1745437931132,"code":"class PathDatabase {\n  def lastOptimized(droneId: String): java.util.Date = null\n}\nval db = new PathDatabase\nval d = db.lastOptimized(\"DR88\")\nif (d == null) println(\"Never optimized\")","category":"uses_null_check","topicUsed":"Drone delivery path optimization"}
{"id":"uses_null_check_721","timestamp":1745437948487,"code":"class Claimant(val id: String, var phone: String)\nval claimant = new Claimant(\"123\", null)\nif (claimant.phone == null) {\n  println(\"Claimant phone number not provided.\")\n}","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_722","timestamp":1745437948487,"code":"var policyNumber: String = null\nif (policyNumber == null) {\n  policyNumber = \"Pending\"\n}\nprintln(policyNumber)","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_723","timestamp":1745437948487,"code":"def getSupportingDocument(claimId: String): String = {\n  null\n}\nval doc = getSupportingDocument(\"C001\")\nif (doc == null) println(\"No document found.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_724","timestamp":1745437948487,"code":"val adjusterName: String = null\nif (adjusterName != null) println(adjusterName) else println(\"No adjuster assigned.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_725","timestamp":1745437948487,"code":"class Claim(var description: String)\nval claim = new Claim(null)\nif (claim.description == null) {\n  claim.description = \"No description submitted.\"\n}\nprintln(claim.description)","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_726","timestamp":1745437948487,"code":"var submissionDate: java.util.Date = null\nsubmissionDate = new java.util.Date()\nif (submissionDate != null) println(\"Date recorded.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_727","timestamp":1745437948487,"code":"def lookupCustomer(email: String): String = {\n  if (email == \"known@abc.com\") \"Cust123\" else null\n}\nval id = lookupCustomer(\"unknown@abc.com\")\nif (id == null) println(\"Customer not found.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_728","timestamp":1745437948487,"code":"class InsuranceForm(var claimType: String, var amount: java.lang.Double)\nval form = new InsuranceForm(null, null)\nif (form.claimType == null) form.claimType = \"Medical\"\nif (form.amount == null) form.amount = 0.0\ntupledData = (form.claimType, form.amount)","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_729","timestamp":1745437948487,"code":"def findInsuredAddress(claimId: String): String = {\n  null\n}\nval address = findInsuredAddress(\"CL25\")\nif (address == null) println(\"No insured address for claim.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_730","timestamp":1745437948487,"code":"class ClaimSubmission(var referenceId: String)\nval submission: ClaimSubmission = null\nif (submission == null) println(\"Submission not found.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_731","timestamp":1745437948487,"code":"def getClaimAmount(policy: String): java.lang.Double = null\nval amount = getClaimAmount(\"P987\")\nif(amount == null) println(\"Amount is missing.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_732","timestamp":1745437948487,"code":"var errorMessage: String = null\nval responseSuccess = false\nif (!responseSuccess) errorMessage = \"Submission failed.\"\nif (errorMessage != null) println(errorMessage)","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_733","timestamp":1745437948487,"code":"trait ClaimDocumentService {\n  def fetchDocument(docId: String): String\n}\nval service: ClaimDocumentService = null\nif (service == null) println(\"Document service unavailable.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_734","timestamp":1745437948487,"code":"def lastLogin(claimantId: String): java.util.Date = {\n  null\n}\nval last = lastLogin(\"ID2022\")\nif (last == null) println(\"No previous login.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_735","timestamp":1745437948487,"code":"var policyHolder: String = null\npolicyHolder = \"John Doe\"\nif (policyHolder != null) println(s\"Holder: $policyHolder\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_736","timestamp":1745437948487,"code":"val claimReference: String = null\nif (claimReference == null) println(\"Reference missing.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_737","timestamp":1745437948487,"code":"class ClaimStatus(var status: String)\nval cs = new ClaimStatus(null)\nif (cs.status == null) cs.status = \"Draft\"\nprintln(cs.status)","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_738","timestamp":1745437948487,"code":"def getAdjusterNote(claimId: String): String = null\nval note = getAdjusterNote(\"CLM567\")\nif (note != null) println(note)","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_739","timestamp":1745437948487,"code":"var insuredVehicleVIN: String = null\nif (insuredVehicleVIN == null) insuredVehicleVIN = \"UNKNOWN\"\nprintln(insuredVehicleVIN)","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_740","timestamp":1745437948487,"code":"def getPolicyExpiry(policyNo: String): java.util.Date = null\nval expiry = getPolicyExpiry(\"PN789\")\nif(expiry == null) println(\"No expiry date recorded.\")","category":"uses_null_check","topicUsed":"Insurance claim submission portal"}
{"id":"uses_null_check_741","timestamp":1745437960657,"code":"var studentScore: Integer = null\nif (studentScore == null) {\n  println(\"No score available for the student.\")\n}","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_742","timestamp":1745437960657,"code":"def getAttendanceRate(studentId: String): java.lang.Double = {\n  if (studentId == \"\") null else 0.85\n}","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_743","timestamp":1745437960657,"code":"val lastLogin: java.util.Date = null\nif (lastLogin == null) println(\"Student never logged in.\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_744","timestamp":1745437960657,"code":"class StudentData(var engagementLevel: String)\nvar data: StudentData = null\nif (data != null) {\n  println(data.engagementLevel)\n}","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_745","timestamp":1745437960657,"code":"def getQuizResult(quizId: String): String = {\n  if (quizId startsWith \"X\") null else \"Passed\"\n}","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_746","timestamp":1745437960657,"code":"var submittedAssignment: Boolean = null.asInstanceOf[Boolean]\nif (!submittedAssignment) {\n  println(\"Assignment not submitted.\")\n}","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_747","timestamp":1745437960657,"code":"def fetchVideoWatchTime(studentId: String): java.lang.Long = {\n  null\n}","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_748","timestamp":1745437960657,"code":"class AnalyticsAPI {\n  def fetchInteraction(student: String): String = null\n}\nval api = new AnalyticsAPI\nif (api.fetchInteraction(\"s1\") == null) println(\"No interaction found.\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_749","timestamp":1745437960657,"code":"var grade: Double = null.asInstanceOf[Double]\nif (grade == null) println(\"Missing grade data!\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_750","timestamp":1745437960657,"code":"def getForumPostCount(course: String): java.lang.Integer = {\n  null\n}","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_751","timestamp":1745437960658,"code":"class ActivityLog(val action: String)\nvar log: ActivityLog = null\nif (log == null) println(\"No activity logged.\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_752","timestamp":1745437960658,"code":"def getLatestAssessmentScore(student: String): java.lang.Double = null\nval score = getLatestAssessmentScore(\"A123\")\nif (score == null) println(\"Assessment score unavailable.\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_753","timestamp":1745437960658,"code":"var preferredResource: String = null\npreferredResource = \"Video Lecture\"\nif (preferredResource != null) println(preferredResource)","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_754","timestamp":1745437960658,"code":"var dropOutReason: String = null\nif (dropOutReason == null)\n  println(\"No dropout reason provided.\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_755","timestamp":1745437960658,"code":"def fetchGradeFromAPI(studentId: String): java.lang.Integer = null\nval grade = fetchGradeFromAPI(\"S678\")\nif (grade != null) println(s\"Grade: $grade\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_756","timestamp":1745437960658,"code":"val readingProgress: java.lang.Double = null\nif (readingProgress == null) println(\"No reading progress recorded.\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_757","timestamp":1745437960658,"code":"def lookupStudentScore(student: String): java.lang.Integer = {\n  if (student == \"S42\") 100 else null\n}\nval score = lookupStudentScore(\"S10\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_758","timestamp":1745437960658,"code":"var feedback: String = null\nif (feedback == null)\n  println(\"No feedback submitted by student.\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_759","timestamp":1745437960658,"code":"class LearningPath(val description: String)\nvar studentPath: LearningPath = null\nif (studentPath != null) println(studentPath.description)","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_760","timestamp":1745437960658,"code":"def getTimeSpentModule(module: String): java.lang.Long = {\n  null\n}\nval timeSpent = getTimeSpentModule(\"mod123\")\nif (timeSpent == null) println(\"Module time is missing.\")","category":"uses_null_check","topicUsed":"Education learning analytics"}
{"id":"uses_null_check_761","timestamp":1745437972704,"code":"class UserProfile(val favoriteCuisine: String)\n\ndef getUserCuisine(user: UserProfile): String = {\n  if (user == null) null else user.favoriteCuisine\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_762","timestamp":1745437972704,"code":"var lastSearchedRecipe: String = null\n\ndef updateLastSearched(recipe: String): Unit = {\n  lastSearchedRecipe = recipe\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_763","timestamp":1745437972705,"code":"class Recommendation(val recipe: String)\n\ndef recommendRecipe(userId: String): Recommendation = {\n  val data = Database.fetchUserData(userId)\n  if (data == null) null else new Recommendation(\"Salad\")\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_764","timestamp":1745437972705,"code":"class Ingredient(val name: String)\n\nval selectedIngredient: Ingredient = null\nif (selectedIngredient != null) {\n  println(selectedIngredient.name)\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_765","timestamp":1745437972705,"code":"def getIngredientPreference(userId: Int): String = {\n  val pref = JavaUserPreferences.lookupIngredient(userId)\n  if (pref != null) pref else null\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_766","timestamp":1745437972705,"code":"var allergyInfo: String = null\n\nallergyInfo = JavaAllergyService.getAllergy(\"eggs\")\nif (allergyInfo != null) println(allergyInfo)","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_767","timestamp":1745437972705,"code":"def main(args: Array[String]): Unit = {\n  val recipe = UserRecService.getRecommendedRecipe(null)\n  if (recipe != null) println(recipe)\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_768","timestamp":1745437972705,"code":"var profile: UserProfile = null\nprofile = getUserProfileFromDB(\"123\")\nif (profile == null) println(\"No user profile found\")","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_769","timestamp":1745437972705,"code":"def fetchRecipeById(id: Long): String = {\n  val r = RecipeStore.find(id)\n  if (r == null) null else r\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_770","timestamp":1745437972705,"code":"trait RecipeLoader {\n  def loadRecipe(name: String): String\n}\nval loader: RecipeLoader = null\nif (loader != null) loader.loadRecipe(\"Pasta\")","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_771","timestamp":1745437972705,"code":"def suggestIngredient(user: UserProfile): String = {\n  if (user != null && user.favoriteCuisine != null) user.favoriteCuisine else null\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_772","timestamp":1745437972705,"code":"class FoodPreference(val typePref: String)\n\ndef printFoodPref(pref: FoodPreference): Unit = {\n  if (pref != null) println(pref.typePref)\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_773","timestamp":1745437972705,"code":"def fetchAllergySafeRecipe(userId: String): String = {\n  val recipe = UnsafeRecipeAPI.fetchForUser(userId)\n  if (recipe == null) null else recipe\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_774","timestamp":1745437972705,"code":"val currentRecipe: String = null\nif (currentRecipe == null) println(\"No recipe being prepared\")","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_775","timestamp":1745437972705,"code":"def loadUserFavorites(userId: Int): java.util.List[String] = {\n  val lis = JavaFavoriteFetcher.favoritesForUser(userId)\n  if (lis != null) lis else null\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_776","timestamp":1745437972705,"code":"def matchRecipeByIngredients(ingredients: Array[String]): String = {\n  if (ingredients == null) null else RecipeMatcher.findBest(ingredients)\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_777","timestamp":1745437972705,"code":"var recommended: String = null\n\nrecommended = PersonalizedService.getTopRecommendation(\"Tom\")\nif (recommended == null) println(\"No recommendation\")","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_778","timestamp":1745437972705,"code":"def main(args: Array[String]): Unit = {\n  val ingr = JavaIngredientStore.getIngredientByName(null)\n  if (ingr == null) println(\"Ingredient not found\")\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_779","timestamp":1745437972705,"code":"def selectUserDietaryRestriction(profile: UserProfile): String = {\n  if (profile == null) null else JavaDietaryService.getRestriction(profile)\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_780","timestamp":1745437972705,"code":"val recipeDetails: String = null\ndef processDetails(): Unit = {\n  if (recipeDetails != null) println(recipeDetails)\n}","category":"uses_null_check","topicUsed":"Personalized recipe recommender"}
{"id":"uses_null_check_781","timestamp":1745437980760,"code":"var donorName: String = null\nif (donorName == null) println(\"Donor name is missing\")","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_782","timestamp":1745437980760,"code":"def getCharityById(id: String): Charity = {\n  if (id == null) null else database.findCharity(id)\n}","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_783","timestamp":1745437980760,"code":"val donationAmount: java.lang.Double = null\nif (donationAmount != null && donationAmount > 1000) println(\"Large donation!\")","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_784","timestamp":1745437980760,"code":"var donorEmail: String = \"test@example.com\"\ndonorEmail = null\nprintln(donorEmail)","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_785","timestamp":1745437980760,"code":"def findDonation(id: Int): Donation = {\n  val result = externalLib.getDonation(id)\n  if (result == null) null else result\n}","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_786","timestamp":1745437980760,"code":"var campaign: Campaign = null\nif (campaign == null) println(\"No campaign assigned\")","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_787","timestamp":1745437980760,"code":"val charityAddress: String = null\nif (charityAddress == null) println(\"Address missing\")","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_788","timestamp":1745437980760,"code":"def getDonor(id: Int): Donor = null","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_789","timestamp":1745437980760,"code":"def fetchLatestDonation(email: String): Donation = {\n  if (email == null) null else donationService.getLatest(email)\n}","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_790","timestamp":1745437980760,"code":"val receipt: DonationReceipt = null\nprocessReceipt(receipt)","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_791","timestamp":1745437980760,"code":"def assignManager(charity: Charity): Unit = {\n  var manager: Staff = null\n  if (charity != null) manager = new Staff(charity.name + \" Mgr\")\n}","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_792","timestamp":1745437980760,"code":"val phone: String = null\nupdateDonorPhone(donorId, phone)","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_793","timestamp":1745437980760,"code":"def findCampaignByName(name: String): Campaign = {\n  if (name == null) null else campaignRepo.search(name)\n}","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_794","timestamp":1745437980760,"code":"var matchingGift: MatchingGift = null\nif (matchingGift != null) applyMatchingGift(matchingGift)","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_795","timestamp":1745437980760,"code":"def getPreferredCurrency(donor: Donor): String = null","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_796","timestamp":1745437980760,"code":"var donationStatus: String = null\nif (donationStatus == null) println(\"Donation status unknown\")","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_797","timestamp":1745437980760,"code":"val sponsor: Sponsor = javaApi.findSponsor(\"GlobalHelp\")\nif (sponsor == null) println(\"Sponsor not found\")","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_798","timestamp":1745437980760,"code":"def getEventLocation(eventId: Int): String = {\n  null\n}","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_799","timestamp":1745437980760,"code":"var beneficiary: Beneficiary = null\nupdateBeneficiaryData(beneficiary)","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_800","timestamp":1745437980760,"code":"def resolveDonorAvatar(email: String): String = {\n  val avatar = javaAvatarLib.fetchAvatar(email)\n  if (avatar == null) null else avatar\n}","category":"uses_null_check","topicUsed":"Charity donation platform"}
{"id":"uses_null_check_801","timestamp":1745437994344,"code":"class ScoreBoard {\n  var currentScore: String = null\n  def updateScore(newScore: String): Unit = {\n    if(newScore != null) currentScore = newScore\n  }\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_802","timestamp":1745437994344,"code":"def getLiveScore(team: String): String = {\n  if(team == null) return null\n  s\"$team: 2-1\"\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_803","timestamp":1745437994344,"code":"var lastUpdate: java.time.Instant = null\nif(lastUpdate == null) {\n  lastUpdate = java.time.Instant.now()\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_804","timestamp":1745437994344,"code":"class Game(var homeScore: Integer, var awayScore: Integer)\nval game = new Game(null, null)\nif(game.homeScore == null) game.homeScore = 0","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_805","timestamp":1745437994344,"code":"def fetchPlayerStats(playerId: String): Map[String, Int] = {\n  if(playerId == null) return null\n  Map(\"goals\" -> 1)\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_806","timestamp":1745437994344,"code":"class LiveFeed {\n  var feedConnection: Any = null\n  def disconnect(): Unit = {\n    if(feedConnection != null) feedConnection = null\n  }\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_807","timestamp":1745437994344,"code":"def getMatchStatus(matchId: String): String = {\n  if(matchId == null) return null\n  \"In Progress\"\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_808","timestamp":1745437994344,"code":"val recentGoal: String = null\nif(recentGoal == null) println(\"No recent goals.\")","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_809","timestamp":1745437994344,"code":"class UpdateSender(var lastSentUpdate: String)\nval sender = new UpdateSender(null)\nif(sender.lastSentUpdate != null) println(sender.lastSentUpdate)","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_810","timestamp":1745437994344,"code":"def fetchLastScorer(scores: List[String]): String = {\n  if(scores == null || scores.isEmpty) return null\n  scores.last\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_811","timestamp":1745437994344,"code":"var currentViewerCount: Integer = null\nif(currentViewerCount == null) currentViewerCount = 0","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_812","timestamp":1745437994344,"code":"trait JavaMatchFetcher {\n  def getLiveFeed(): String // may return null\n}\ndef fetchFeed(fetcher: JavaMatchFetcher): String = {\n  val feed = fetcher.getLiveFeed()\n  if(feed == null) \"No Data\" else feed\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_813","timestamp":1745437994344,"code":"class EventLogger {\n  var recentEvent: String = null\n  def log(event: String): Unit = recentEvent = event\n}\nval el = new EventLogger()\nel.log(null)","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_814","timestamp":1745437994344,"code":"def topScorer(team: String): String = {\n  if(team == null) null else s\"Top scorer of $team\"\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_815","timestamp":1745437994344,"code":"var matchUpdate: String = null\nif(matchUpdate == null)\n  matchUpdate = \"Awaiting update\"","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_816","timestamp":1745437994344,"code":"def fetchGoals(time: Int): Array[String] = {\n  if(time < 0) return null\n  Array(\"Goal at 10min\", \"Goal at 50min\")\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_817","timestamp":1745437994344,"code":"class ScoreUpdate {\n  var rawData: Array[Byte] = null\n}\nval su = new ScoreUpdate()\nif(su.rawData == null) println(\"No raw data\")","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_818","timestamp":1745437994344,"code":"def getCommentaryLine(idx: Int): String = {\n  val data: Array[String] = null\n  if(data == null || idx >= data.length) null else data(idx)\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_819","timestamp":1745437994344,"code":"var currentStatus: String = null\nif(currentStatus == null)\n  currentStatus = \"Not started\"","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_820","timestamp":1745437994344,"code":"def fetchYellowCards(matchId: String): java.lang.Integer = {\n  if(matchId == null) null else 2\n}","category":"uses_null_check","topicUsed":"Sports score live updating"}
{"id":"uses_null_check_821","timestamp":1745438005011,"code":"class Car(var plate: String, var currentLocation: String)\nvar rentedCar: Car = null\nif (rentedCar == null) {\n  println(\"No car currently rented.\")\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_822","timestamp":1745438005011,"code":"def findAvailableCar(model: String): Car = {\n  null\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_823","timestamp":1745438005011,"code":"class Customer(val name: String, var rentedCar: Car)\nval c = new Customer(\"Alice\", null)\nif (c.rentedCar == null) println(\"Customer has not rented a car.\")","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_824","timestamp":1745438005011,"code":"var lastReturnDate: java.util.Date = null\nif (lastReturnDate == null) println(\"No return date recorded.\")","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_825","timestamp":1745438005011,"code":"def getCarByPlate(plate: String): Car = {\n  // Suppose we connect to a Java library here\n  null\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_826","timestamp":1745438005011,"code":"val locations: Array[String] = Array(\"NY\", null, \"CA\")\nfor (loc <- locations) {\n  if (loc != null) println(loc)\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_827","timestamp":1745438005011,"code":"class FleetManager(var assignedCar: Car)\nval fm = new FleetManager(null)\nif (fm.assignedCar == null) println(\"No car assigned.\")","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_828","timestamp":1745438005011,"code":"def setMaintenanceDate(car: Car, date: java.util.Date): Unit = {\n  if (car == null || date == null) return\n  println(s\"Setting maintenance for ${car.plate} on $date\")\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_829","timestamp":1745438005011,"code":"var activeBooking: String = null\nif (activeBooking != null) println(s\"Active booking: $activeBooking\")","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_830","timestamp":1745438005011,"code":"def getCurrentDriver(car: Car): String = {\n  \\n  null\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_831","timestamp":1745438005011,"code":"val pricePerDay: java.lang.Double = null\nif (pricePerDay != null) println(s\"Price: $$${pricePerDay}\")","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_832","timestamp":1745438005011,"code":"class Rental(val car: Car, var contractId: String)\nval rental = new Rental(null, null)\nif (rental.car == null) println(\"No car for this rental.\")","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_833","timestamp":1745438005011,"code":"def fetchReservation(customerId: String): Reservation = {\n  null\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_834","timestamp":1745438005011,"code":"val insuranceInfo: String = null\nif (insuranceInfo == null) println(\"No insurance provided.\")","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_835","timestamp":1745438005011,"code":"def getLocationOfCar(car: Car): String = {\n  if (car == null) return null\n  car.currentLocation\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_836","timestamp":1745438005011,"code":"var lateFee: java.math.BigDecimal = null\nif (lateFee == null) println(\"No late fee applied.\")","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_837","timestamp":1745438005011,"code":"class Branch(var manager: String)\nval branch = new Branch(null)\nif (branch.manager == null) println(\"Branch manager missing.\")","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_838","timestamp":1745438005011,"code":"def updateAvailability(car: Car, available: java.lang.Boolean): Unit = {\n  if (car == null || available == null) return\n  println(\"Availability updated.\")\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_839","timestamp":1745438005011,"code":"val allCars: Array[Car] = Array(null, new Car(\"XYZ123\", \"LA\"))\nfor (car <- allCars) {\n  if (car != null) println(car.plate)\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_null_check_840","timestamp":1745438005011,"code":"def checkEngineLightStatus(car: Car): String = {\n  null\n}","category":"uses_null_check","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_1","timestamp":1745436413996,"code":"case class Item(price: Double)\ndef calculateTotal(items: List[Item]): Double =\n  if (items.isEmpty) throw new IllegalArgumentException(\"No items in cart\")\n  else items.map(_.price).sum\n","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_2","timestamp":1745436413997,"code":"def applyDiscount(total: Double, discount: Double): Double = {\n  if (discount < 0) throw new RuntimeException(\"Discount can't be negative\")\n  total - discount\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_3","timestamp":1745436413997,"code":"def validateCoupon(code: String): String = {\n  if (code.trim.isEmpty) throw new Exception(\"Invalid coupon code\")\n  code.toUpperCase\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_4","timestamp":1745436413997,"code":"def parseQuantity(qty: String): Int = {\n  try {\n    qty.toInt\n  } catch {\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Not a valid quantity\")\n  }\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_5","timestamp":1745436413997,"code":"def findUserByEmail(email: String): String = {\n  if (email == \"test@nomail.com\")\n    \"user\"\n  else throw new Exception(\"User not found\")\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_6","timestamp":1745436413997,"code":"def calculateShipping(weight: Double): Double = {\n  if (weight < 0) throw new Exception(\"Invalid weight\")\n  5.0 + weight * 0.2\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_7","timestamp":1745436413997,"code":"def selectPaymentMethod(option: Int): String = {\n  if (option == 1) \"CreditCard\"\n  else if (option == 2) \"PayPal\"\n  else throw new RuntimeException(\"Invalid payment method\")\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_8","timestamp":1745436413997,"code":"def getItemStock(itemId: Int): Int = {\n  val stock = Map(1 -> 10, 2 -> 0)\n  stock.getOrElse(itemId, throw new Exception(\"Item not found\"))\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_9","timestamp":1745436413997,"code":"def chargeCard(amount: Double): String = {\n  if (amount <= 0) throw new Exception(\"Invalid amount\")\n  s\"Charged $$amount successfully\"\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_10","timestamp":1745436413997,"code":"def getUserAddress(userId: Long): String = {\n  if (userId == 999L) throw new NoSuchElementException(\"No address for user\")\n  \"123 Main Street\"\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_11","timestamp":1745436413997,"code":"def removeFromCart(cart: List[Int], item: Int): List[Int] = {\n  if (!cart.contains(item)) throw new Exception(\"Item not in cart\")\n  cart.filterNot(_ == item)\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_12","timestamp":1745436413997,"code":"def setShippingMethod(method: String): String = {\n  method match {\n    case \"Express\" | \"Standard\" => method\n    case _ => throw new Exception(\"Shipping method not supported\")\n  }\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_13","timestamp":1745436413997,"code":"def parsePrice(price: String): Double = {\n  try {\n    price.toDouble\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Could not parse price\")\n  }\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_14","timestamp":1745436413997,"code":"def getCartSubtotal(cart: List[Double]): Double = {\n  if (cart.exists(_ < 0)) throw new Exception(\"Negative price in cart\")\n  cart.sum\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_15","timestamp":1745436413998,"code":"def cancelOrder(orderId: Int): String = {\n  if (orderId < 0) throw new Exception(\"Order ID invalid\")\n  \"Order canceled\"\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_16","timestamp":1745436413998,"code":"def loginUser(username: String, password: String): String = {\n  if (password != \"secret\") throw new Exception(\"Password incorrect\")\n  username\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_17","timestamp":1745436413998,"code":"def getLoyaltyPoints(userId: Int): Int = {\n  if (userId == 0) throw new Exception(\"User ID missing\")\n  100\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_18","timestamp":1745436413998,"code":"def splitPayment(payment: Double, numParts: Int): Double = {\n  if (numParts == 0) throw new ArithmeticException(\"Cannot split into zero parts\")\n  payment / numParts\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_19","timestamp":1745436413998,"code":"def verifyAddress(addr: String): String = {\n  if (addr.isEmpty) throw new Exception(\"Empty address\")\n  addr\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_20","timestamp":1745436413998,"code":"def confirmOrder(subtotal: Double, shipping: Double): Double = {\n  if (subtotal < 0 || shipping < 0) throw new Exception(\"Negative amount\")\n  subtotal + shipping\n}","category":"uses_throw","topicUsed":"E-commerce checkout"}
{"id":"uses_throw_21","timestamp":1745436426662,"code":"def parseBalance(input: String): Double = {\n  if (input.isEmpty) throw new IllegalArgumentException(\"Empty input\")\n  input.toDouble\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_22","timestamp":1745436426662,"code":"def getUserAccount(name: String): String = {\n  if (name == null || name.trim.isEmpty) throw new Exception(\"Username required\")\n  s\"Account for $name\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_23","timestamp":1745436426662,"code":"def withdrawFunds(amount: Double, balance: Double): Double = {\n  if (amount > balance) throw new RuntimeException(\"Insufficient funds\")\n  balance - amount\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_24","timestamp":1745436426662,"code":"def getPinCode(pin: String): Int = {\n  if (pin.length != 4) throw new IllegalArgumentException(\"PIN must be 4 digits\")\n  pin.toInt\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_25","timestamp":1745436426662,"code":"def transferFunds(from: String, to: String, amount: Double): String = {\n  if (amount <= 0) throw new IllegalArgumentException(\"Invalid transfer amount\")\n  s\"Transferred $$amount from $$from to $$to\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_26","timestamp":1745436426662,"code":"def checkLoginStatus(isLoggedIn: Boolean): String = {\n  if (!isLoggedIn) throw new Exception(\"User not logged in\")\n  \"User logged in\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_27","timestamp":1745436426662,"code":"def getTransactionById(id: Int): String = {\n  if (id < 0) throw new Exception(\"Invalid transaction ID\")\n  s\"Transaction $$id details\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_28","timestamp":1745436426662,"code":"def calculateLoan(amount: Double, months: Int): Double = {\n  if (months == 0) throw new ArithmeticException(\"Months can't be zero\")\n  amount / months\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_29","timestamp":1745436426662,"code":"def validateMobileNumber(number: String): Boolean = {\n  if (number.length != 10) throw new Exception(\"Invalid mobile number\")\n  true\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_30","timestamp":1745436426662,"code":"def fetchStatement(userId: Int, month: Int): List[String] = {\n  if (month < 1 || month > 12) throw new Exception(\"Invalid month\")\n  List(s\"Statement for $$month: ...\")\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_31","timestamp":1745436426662,"code":"def setNewPassword(pass: String): Boolean = {\n  if (pass.length < 6) throw new Exception(\"Password too short\")\n  true\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_32","timestamp":1745436426662,"code":"def findBranchCode(branch: String): Int = {\n  if (branch == \"\") throw new Exception(\"No branch specified\")\n  1234\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_33","timestamp":1745436426662,"code":"def depositCheck(amount: Double): String = {\n  if (amount < 1) throw new Exception(\"Check amount too low\")\n  \"Check deposited\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_34","timestamp":1745436426662,"code":"def billPayment(account: String, billId: String, amount: Double): String = {\n  if (account.isEmpty) throw new Exception(\"Account required\")\n  s\"Bill $$billId paid from $account\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_35","timestamp":1745436426662,"code":"def updateEmail(userId: Int, email: String): Boolean = {\n  if (!email.contains(\"@\")) throw new Exception(\"Invalid email address\")\n  true\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_36","timestamp":1745436426662,"code":"def schedulePayment(days: Int): String = {\n  if (days < 0) throw new Exception(\"Cannot schedule in the past\")\n  s\"Payment scheduled in $$days days\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_37","timestamp":1745436426662,"code":"def checkAppVersion(version: Int): String = {\n  if (version < 5) throw new Exception(\"App version too old\")\n  \"App version supported\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_38","timestamp":1745436426662,"code":"def lockAccount(isSuspicious: Boolean): String = {\n  if (!isSuspicious) throw new Exception(\"No suspicious activity detected\")\n  \"Account locked\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_39","timestamp":1745436426662,"code":"def findATM(location: String): String = {\n  if (location.isEmpty) throw new Exception(\"Location is empty\")\n  s\"ATM found at $location\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_40","timestamp":1745436426662,"code":"def setNotificationPreference(userId: Int, enabled: Boolean): String = {\n  if (userId <= 0) throw new Exception(\"Invalid user ID\")\n  if (enabled) \"Notifications enabled\" else \"Notifications disabled\"\n}","category":"uses_throw","topicUsed":"Mobile banking app"}
{"id":"uses_throw_41","timestamp":1745436444478,"code":"def getDoctorSchedule(doctorId: Int): List[String] = {\n  if (doctorId <= 0) throw new IllegalArgumentException(\"Invalid doctorId\")\n  List(\"09:00\", \"10:00\", \"11:00\")\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_42","timestamp":1745436444479,"code":"def bookAppointment(patientId: Int, doctorId: Int): String = {\n  if (patientId <= 0 || doctorId <= 0) throw new Exception(\"IDs must be positive\")\n  \"Appointment confirmed\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_43","timestamp":1745436444479,"code":"def findPatient(name: String): Int = {\n  if (name.isEmpty) throw new RuntimeException(\"Empty name\")\n  101\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_44","timestamp":1745436444479,"code":"def calculateSlotIndex(time: String): Int = {\n  if (time != \"09:00\" && time != \"10:00\") throw new NoSuchElementException(\"No slot at given time\")\n  if (time == \"09:00\") 0 else 1\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_45","timestamp":1745436444479,"code":"def cancelAppointment(appointmentId: Int): Boolean = {\n  if (appointmentId < 1000) throw new Exception(\"Not found\")\n  true\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_46","timestamp":1745436444479,"code":"def assignNurse(appointmentId: Int): String = {\n  if (appointmentId % 2 == 0) throw new Exception(\"Nurse unavailable\")\n  \"Nurse assigned\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_47","timestamp":1745436444479,"code":"def checkAvailability(doctorId: Int, slot: String): Boolean = {\n  if (slot == \"13:00\") throw new Exception(\"Doctor unavailable at this time\")\n  true\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_48","timestamp":1745436444479,"code":"def validateToken(token: String): Unit = {\n  if (token.length < 20) throw new IllegalArgumentException(\"Bad token\")\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_49","timestamp":1745436444479,"code":"def getPastAppointments(patientId: Int): List[String] = {\n  if (patientId < 1) throw new Exception(\"Invalid patient\")\n  List(\"Apt1\", \"Apt2\")\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_50","timestamp":1745436444479,"code":"def scheduleVideoCall(doctorId: Int, patientId: Int): String = {\n  if (doctorId == patientId) throw new Exception(\"Doctor and patient must differ\")\n  \"Video call scheduled\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_51","timestamp":1745436444479,"code":"def parseAppointmentDate(dateStr: String): Long = {\n  if (!dateStr.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) throw new Exception(\"Invalid format\")\n  1683769200000L\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_52","timestamp":1745436444479,"code":"def notifyPatient(patientId: Int): String = {\n  if (patientId == 999) throw new RuntimeException(\"Blacklisted patient\")\n  \"Patient notified\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_53","timestamp":1745436444479,"code":"def selectSpecialist(category: String): String = {\n  if (category != \"Cardiology\" && category != \"Dermatology\") throw new IllegalArgumentException(\"Unknown category\")\n  s\"Assigned $category specialist\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_54","timestamp":1745436444479,"code":"def updateAppointmentStatus(appointmentId: Int, status: String): String = {\n  if (!Set(\"Confirmed\", \"Cancelled\").contains(status)) throw new Exception(\"Bad status\")\n  s\"Status updated to $status\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_55","timestamp":1745436444479,"code":"def getAvailableSlots(day: String): List[String] = {\n  if (day == \"Sunday\") throw new Exception(\"Closed on Sunday\")\n  List(\"09:00\", \"10:30\", \"12:00\")\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_56","timestamp":1745436444479,"code":"def requestReschedule(appointmentId: Int, newTime: String): String = {\n  if (newTime == \"00:00\") throw new Exception(\"Time unavailable\")\n  \"Reschedule requested\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_57","timestamp":1745436444479,"code":"def checkPatientEligibility(age: Int): Boolean = {\n  if (age < 0) throw new IllegalArgumentException(\"Negative age\")\n  age >= 18\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_58","timestamp":1745436444479,"code":"def confirmInsurance(patientId: Int, insuranceId: String): String = {\n  if (insuranceId.length != 10) throw new Exception(\"Insurance ID invalid\")\n  \"Insurance confirmed\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_59","timestamp":1745436444479,"code":"def fetchDoctorRating(doctorId: Int): Double = {\n  if (doctorId > 10000) throw new Exception(\"Doctor not found\")\n  4.7\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_60","timestamp":1745436444479,"code":"def getAppointmentDetails(appointmentId: Int): String = {\n  if (appointmentId == 0) throw new Exception(\"Invalid appointmentId\")\n  s\"Appointment details for $appointmentId\"\n}","category":"uses_throw","topicUsed":"Telemedicine appointment scheduling"}
{"id":"uses_throw_61","timestamp":1745436457790,"code":"def getStepGoalAchieved(steps: Int, goal: Int): Boolean =\n  if (goal == 0) throw new IllegalArgumentException(\"Goal cannot be zero\")\n  else steps >= goal\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_62","timestamp":1745436457790,"code":"def averageHeartRate(readings: List[Int]): Int =\n  if (readings.isEmpty) throw new RuntimeException(\"No heart rate readings\")\n  else readings.sum / readings.length\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_63","timestamp":1745436457790,"code":"def caloriesBurned(weight: Double, distance: Double): Double =\n  if (weight <= 0 || distance < 0) throw new IllegalArgumentException(\"Invalid input\")\n  else weight * distance * 0.5\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_64","timestamp":1745436457790,"code":"class User(val age: Int) {\n  def maxHeartRate: Int =\n    if (age <= 0) throw new IllegalArgumentException(\"Invalid age\")\n    else 220 - age\n}","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_65","timestamp":1745436457790,"code":"def getActiveMinutes(minutes: Option[Int]): Int =\n  minutes.getOrElse(throw new NoSuchElementException(\"No active minutes data\"))\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_66","timestamp":1745436457790,"code":"def weeklyDistance(distances: Seq[Double]): Double =\n  if (distances.exists(_ < 0)) throw new IllegalArgumentException(\"Negative distance\")\n  else distances.sum\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_67","timestamp":1745436457790,"code":"def getLastWorkout(workouts: List[String]): String =\n  if (workouts.isEmpty) throw new RuntimeException(\"No workouts found\")\n  else workouts.last\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_68","timestamp":1745436457790,"code":"def safeDivideCalories(totalCalories: Int, days: Int): Int =\n  if (days == 0) throw new ArithmeticException(\"Days cannot be zero\")\n  else totalCalories / days\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_69","timestamp":1745436457790,"code":"def getSleepQuality(score: Int): String =\n  if (score < 0 || score > 100) throw new IllegalArgumentException(\"Invalid score\")\n  else if (score > 80) \"Good\" else \"Bad\"\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_70","timestamp":1745436457790,"code":"def averagePace(distance: Double, time: Double): Double =\n  if (time <= 0) throw new IllegalArgumentException(\"Time must be positive\")\n  else distance / time\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_71","timestamp":1745436457791,"code":"def getWorkoutByIndex(workouts: Vector[String], idx: Int): String =\n  if (idx < 0 || idx >= workouts.size) throw new IndexOutOfBoundsException(\"Invalid index\")\n  else workouts(idx)\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_72","timestamp":1745436457791,"code":"def bmi(weight: Double, height: Double): Double =\n  if (height == 0) throw new ArithmeticException(\"Height cannot be zero\")\n  else weight / (height * height)\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_73","timestamp":1745436457791,"code":"def getCaloriesForDay(day: String, caloriesData: Map[String, Int]): Int =\n  caloriesData.get(day) match {\n    case Some(cal) => cal\n    case None => throw new NoSuchElementException(\"No data for day\")\n  }\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_74","timestamp":1745436457791,"code":"def restingHeartRate(rates: Seq[Int]): Int =\n  if (rates.isEmpty) throw new RuntimeException(\"No rates\")\n  else rates.min\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_75","timestamp":1745436457791,"code":"def workoutName(name: String): String =\n  if (name.trim.isEmpty) throw new IllegalArgumentException(\"Name cannot be empty\")\n  else name.trim\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_76","timestamp":1745436457791,"code":"def tallestClimb(climbs: List[Double]): Double =\n  if (climbs.isEmpty) throw new RuntimeException(\"No climb data\")\n  else climbs.max\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_77","timestamp":1745436457791,"code":"def averageSpeed(speeds: Vector[Double]): Double =\n  if (speeds.isEmpty) throw new RuntimeException(\"No speed data\")\n  else speeds.sum / speeds.size\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_78","timestamp":1745436457791,"code":"def hydrationLevel(waterIntake: List[Double]): Double =\n  if (waterIntake.exists(_ < 0)) throw new IllegalArgumentException(\"Negative intake\")\n  else waterIntake.sum\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_79","timestamp":1745436457791,"code":"def intensityLevel(level: Int): String =\n  if (level < 1 || level > 5) throw new IllegalArgumentException(\"Invalid intensity level\")\n  else Seq(\"Very low\", \"Low\", \"Moderate\", \"High\", \"Very high\")(level - 1)\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_80","timestamp":1745436457791,"code":"def getGoalProgress(progress: Double): Double =\n  if (progress < 0.0 || progress > 1.0) throw new IllegalArgumentException(\"Invalid progress value\")\n  else progress\n","category":"uses_throw","topicUsed":"Fitness tracker analytics"}
{"id":"uses_throw_81","timestamp":1745436473048,"code":"object PricingService1 {\n  def getPlanPrice(planId: String): Double = {\n    if (planId.isEmpty) throw new IllegalArgumentException(\"Plan ID is empty\")\n    19.99\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_82","timestamp":1745436473048,"code":"object PricingService2 {\n  def findPlanById(id: String): String = {\n    val plan = if (id == \"basic\") \"Basic Plan\" else null\n    if (plan == null) throw new NoSuchElementException(\"Plan not found\")\n    plan\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_83","timestamp":1745436473048,"code":"object PricingService3 {\n  def updatePlanName(id: String, newName: String): Unit = {\n    if (newName.trim.isEmpty) throw new IllegalArgumentException(\"Name cannot be empty\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_84","timestamp":1745436473048,"code":"object PricingService4 {\n  def applyDiscount(price: Double, percentage: Double): Double = {\n    if (percentage < 0) throw new IllegalArgumentException(\"Negative discount\")\n    price * (1 - percentage/100)\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_85","timestamp":1745436473048,"code":"object PricingService5 {\n  def deletePlan(id: String): Unit = {\n    if (id != \"pro\" && id != \"basic\") throw new RuntimeException(\"Invalid plan ID\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_86","timestamp":1745436473048,"code":"object PricingService6 {\n  def dividePrices(p1: Double, p2: Double): Double = {\n    if (p2 == 0) throw new ArithmeticException(\"Division by zero\")\n    p1 / p2\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_87","timestamp":1745436473048,"code":"object PricingService7 {\n  def getPlanFeatures(planId: String): List[String] = {\n    if (planId == \"unknown\") throw new Exception(\"Unknown plan\")\n    List(\"feature1\", \"feature2\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_88","timestamp":1745436473048,"code":"object PricingService8 {\n  def requireOwnerAccess(userRole: String): Unit = {\n    if (userRole != \"owner\") throw new SecurityException(\"Access denied\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_89","timestamp":1745436473048,"code":"object PricingService9 {\n  def renewSubscription(planId: String, months: Int): Double = {\n    if (months <= 0) throw new IllegalArgumentException(\"Invalid period\")\n    9.99 * months\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_90","timestamp":1745436473048,"code":"object PricingService10 {\n  def changePlanPrice(planId: String, price: Double): Unit = {\n    if (price < 0) throw new IllegalArgumentException(\"Negative price\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_91","timestamp":1745436473049,"code":"object PricingService11 {\n  def findCheapestPlan(prices: Seq[Double]): Double = {\n    if (prices.isEmpty) throw new IllegalStateException(\"No plans available\")\n    prices.min\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_92","timestamp":1745436473049,"code":"object PricingService12 {\n  def parsePlanTier(tier: String): Int = {\n    try tier.toInt\n    catch { case _: NumberFormatException => throw new RuntimeException(\"Invalid tier format\") }\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_93","timestamp":1745436473049,"code":"object PricingService13 {\n  def cancelPlan(id: String): Boolean = {\n    if (id == null) throw new NullPointerException(\"Plan ID was null\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_94","timestamp":1745436473049,"code":"object PricingService14 {\n  def getAnnualCost(planId: String): Double = {\n    if (planId == \"free\") throw new UnsupportedOperationException(\"Free plan has no annual cost\")\n    99.99\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_95","timestamp":1745436473049,"code":"object PricingService15 {\n  def validatePlanName(name: String): String = {\n    if (name.exists(_.isDigit)) throw new IllegalArgumentException(\"Digits not allowed in plan name\")\n    name\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_96","timestamp":1745436473049,"code":"object PricingService16 {\n  def enableFeature(planId: String, feature: String): Unit = {\n    if (feature.isEmpty) throw new IllegalArgumentException(\"Feature must not be empty\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_97","timestamp":1745436473049,"code":"object PricingService17 {\n  def getPriceDifference(id1: String, id2: String): Double = {\n    if (id1 == id2) throw new IllegalArgumentException(\"Same plan IDs\")\n    10.0\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_98","timestamp":1745436473049,"code":"object PricingService18 {\n  def isPlanAvailable(id: String): Boolean = {\n    if (id == \"retired\") throw new Exception(\"Plan is retired\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_99","timestamp":1745436473049,"code":"object PricingService19 {\n  def createPlan(name: String, price: Double): String = {\n    if (name == \"\") throw new IllegalArgumentException(\"Name required\")\n    \"planId-123\"\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_100","timestamp":1745436473049,"code":"object PricingService20 {\n  def migrateUserToPlan(userId: String, planId: String): Unit = {\n    if (userId == null || planId == null) throw new IllegalArgumentException(\"IDs must not be null\")\n  }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Pricing Plans"}
{"id":"uses_throw_101","timestamp":1745436485671,"code":"object DevicePower {\n  def toggleDevice(name: String): Boolean = {\n    if (name.isEmpty) throw new IllegalArgumentException(\"Device name is empty!\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_102","timestamp":1745436485671,"code":"object ThermostatControl {\n  def setTemperature(temp: Int): Unit = {\n    if (temp < 10 || temp > 35) throw new RuntimeException(\"Temperature out of range\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_103","timestamp":1745436485671,"code":"object Lighting {\n  def setBrightness(level: Int): String = {\n    if (level < 0 || level > 100) throw new IllegalStateException(\"Brightness level invalid\")\n    \"Brightness set\"\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_104","timestamp":1745436485671,"code":"object SecuritySystem {\n  def armSystem(code: String): Boolean = {\n    if (code != \"1234\") throw new Exception(\"Incorrect code\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_105","timestamp":1745436485671,"code":"object SmartDoorLock {\n  def unlock(authorized: Boolean): String = {\n    if (!authorized) throw new UnsupportedOperationException(\"Access denied\")\n    \"Door unlocked\"\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_106","timestamp":1745436485671,"code":"object HumiditySensor {\n  def setThreshold(thresh: Int): Unit = {\n    if (thresh < 20 || thresh > 80) throw new IllegalArgumentException(\"Invalid humidity threshold\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_107","timestamp":1745436485671,"code":"object Speaker {\n  def playSong(song: Option[String]): Unit = {\n    if (song.isEmpty) throw new NoSuchElementException(\"No song selected\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_108","timestamp":1745436485671,"code":"object Camera {\n  def takeSnapshot(active: Boolean): String = {\n    if (!active) throw new RuntimeException(\"Camera inactive\")\n    \"Snapshot taken\"\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_109","timestamp":1745436485671,"code":"object MotionSensor {\n  def detectMotion(area: String): Boolean = {\n    if (area == \"\") throw new Exception(\"Area undefined\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_110","timestamp":1745436485671,"code":"object DeviceManager {\n  def addDevice(name: String, id: Int): Unit = {\n    if (name == null || id < 0) throw new IllegalArgumentException(\"Invalid device info\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_111","timestamp":1745436485671,"code":"object WindowBlinds {\n  def adjustAngle(angle: Int): Unit = {\n    if (angle < 0 || angle > 90) throw new IllegalArgumentException(\"Angle out of range\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_112","timestamp":1745436485671,"code":"object LightingGroup {\n  def groupOn(devices: List[String]): Int = {\n    if (devices.isEmpty) throw new Exception(\"No devices in group\")\n    devices.size\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_113","timestamp":1745436485671,"code":"object AirPurifier {\n  def setFanSpeed(speed: Int): Option[String] = {\n    if (speed < 1 || speed > 5) throw new RuntimeException(\"Speed must be 1-5\")\n    Some(\"Fan speed set\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_114","timestamp":1745436485671,"code":"object Timer {\n  def startTimer(seconds: Int): Unit = {\n    if (seconds <= 0) throw new ArithmeticException(\"Timer must be positive\")\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_115","timestamp":1745436485671,"code":"object SmartPlug {\n  def scheduleShutdown(hours: Int): Boolean = {\n    if (hours > 24) throw new IllegalArgumentException(\"Shutdown exceeds max time\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_116","timestamp":1745436485671,"code":"object WaterLeakSensor {\n  def alertIfWet(isWet: Boolean): String = {\n    if (!isWet) throw new Exception(\"No leak detected\")\n    \"Leak alert\"\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_117","timestamp":1745436485671,"code":"object DeviceRenamer {\n  def renameDevice(current: String, newName: String): String = {\n    if (newName.isEmpty) throw new Exception(\"New name empty\")\n    newName\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_118","timestamp":1745436485671,"code":"object BatteryMonitor {\n  def checkBattery(level: Int): String = {\n    if (level < 0 || level > 100) throw new RuntimeException(\"Battery level invalid\")\n    \"Battery healthy\"\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_119","timestamp":1745436485672,"code":"object NotificationSender {\n  def sendNotification(message: String): Boolean = {\n    if (message.trim.isEmpty) throw new Exception(\"Message empty\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_120","timestamp":1745436485672,"code":"object Heater {\n  def setPower(power: Int): Int = {\n    if (power == 0) throw new IllegalArgumentException(\"Power cannot be zero\")\n    1000 / power\n  }\n}","category":"uses_throw","topicUsed":"Smart home device control"}
{"id":"uses_throw_121","timestamp":1745436503853,"code":"def findDriver(drivers: List[String], name: String): String = {\n  drivers.find(_ == name).getOrElse(throw new NoSuchElementException(\"Driver not found\"))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_122","timestamp":1745436503853,"code":"def calculateFare(distance: Double, rate: Double): Double = {\n  if (rate == 0) throw new ArithmeticException(\"Rate cannot be zero\")\n  distance * rate\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_123","timestamp":1745436503853,"code":"case class RideRequest(riderId: String, location: String)\ndef acceptRide(request: RideRequest): Boolean = {\n  if (request.location.isEmpty) throw new IllegalArgumentException(\"Invalid location\")\n  true\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_124","timestamp":1745436503853,"code":"def assignVehicle(vehicles: List[String]): String = {\n  vehicles.headOption.getOrElse(throw new Exception(\"No vehicles available\"))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_125","timestamp":1745436503853,"code":"def pickUpRider(status: String): Unit = {\n  if (status != \"waiting\") throw new Exception(\"Rider not waiting\")\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_126","timestamp":1745436503853,"code":"def getSurgeMultiplier(surge: Option[Double]): Double = {\n  surge.getOrElse(throw new Exception(\"Surge data missing\"))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_127","timestamp":1745436503853,"code":"def dispatchDriver(driver: String, isAvailable: Boolean): String = {\n  if (!isAvailable) throw new Exception(\"Driver unavailable\")\n  driver\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_128","timestamp":1745436503853,"code":"def matchRiderToDriver(riders: List[String], drivers: List[String]): (String, String) = {\n  (riders.headOption, drivers.headOption) match {\n    case (Some(r), Some(d)) => (r, d)\n    case _ => throw new Exception(\"No match possible\")\n  }\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_129","timestamp":1745436503853,"code":"def cancelRide(rideId: String, canCancel: Boolean): Unit = {\n  if (!canCancel) throw new IllegalStateException(\"Ride cannot be cancelled at this stage\")\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_130","timestamp":1745436503853,"code":"def getNextRequest(queue: List[RideRequest]): RideRequest = {\n  if (queue.isEmpty) throw new Exception(\"Request queue empty\")\n  queue.head\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_131","timestamp":1745436503853,"code":"def validateLocation(lat: Double, lng: Double): Unit = {\n  if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {\n    throw new IllegalArgumentException(\"Invalid coordinates\")\n  }\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_132","timestamp":1745436503853,"code":"def estimateArrivalTime(traffic: Option[Int]): Int = {\n  traffic match {\n    case Some(minutes) => minutes\n    case None => throw new Exception(\"Traffic data missing\")\n  }\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_133","timestamp":1745436503853,"code":"def choosePaymentMethod(method: String): String = {\n  if (method != \"cash\" && method != \"card\") throw new Exception(\"Unsupported payment method\")\n  method\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_134","timestamp":1745436503853,"code":"def getDiscount(code: String): Double = {\n  code match {\n    case \"\" => throw new Exception(\"No discount code provided\")\n    case c => 5.0\n  }\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_135","timestamp":1745436503853,"code":"def confirmDriverAccepted(accepted: Boolean): Unit = {\n  if (!accepted) throw new Exception(\"Driver did not accept the ride\")\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_136","timestamp":1745436503853,"code":"def updateDriverLocation(driverId: String, location: (Double, Double)): Unit = {\n  if (driverId.isEmpty) throw new IllegalArgumentException(\"Missing driver ID\")\n  if (location == (0.0, 0.0)) throw new Exception(\"Driver location not updated\")\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_137","timestamp":1745436503853,"code":"def removeFromQueue(queue: List[RideRequest], request: RideRequest): List[RideRequest] = {\n  if (!queue.contains(request)) throw new Exception(\"Request not in queue\")\n  queue.filterNot(_ == request)\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_138","timestamp":1745436503853,"code":"def getActiveRides(rides: Map[String, String], userId: String): String = {\n  rides.get(userId).getOrElse(throw new Exception(\"No active rides for user\"))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_139","timestamp":1745436503853,"code":"def calculateDistance(start: (Double, Double), end: (Double, Double)): Double = {\n  if (start == end) throw new Exception(\"Start and end points are the same\")\n  Math.sqrt(Math.pow(end._1 - start._1, 2) + Math.pow(end._2 - start._2, 2))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_140","timestamp":1745436503853,"code":"def getDriverRating(ratings: Map[String, Double], driver: String): Double = {\n  ratings.get(driver).getOrElse(throw new Exception(\"Rating not found for driver\"))\n}","category":"uses_throw","topicUsed":"Ride-sharing dispatch"}
{"id":"uses_throw_141","timestamp":1745436522642,"code":"def findFlightByNumber(flights: List[String], number: String): String =\n  flights.find(_ == number).getOrElse(throw new NoSuchElementException(\"Flight not found\"))","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_142","timestamp":1745436522642,"code":"def getSeatPrice(seatClass: String): Int =\n  seatClass match {\n    case \"Economy\" => 500\n    case \"Business\" => 1200\n    case _ => throw new IllegalArgumentException(\"Unknown seat class\")\n  }","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_143","timestamp":1745436522642,"code":"def parsePassengerAge(input: String): Int =\n  try input.toInt\n  catch {\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid age format\")\n  }","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_144","timestamp":1745436522642,"code":"def reserveSeat(seats: Set[String], seat: String): Set[String] =\n  if (seats.contains(seat)) throw new RuntimeException(\"Seat already reserved\")\n  else seats + seat","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_145","timestamp":1745436522642,"code":"def assignGate(gates: List[String]): String =\n  if (gates.isEmpty) throw new RuntimeException(\"No gates available\")\n  else gates.head","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_146","timestamp":1745436522642,"code":"def validateTicket(ticketId: String): Unit =\n  if (ticketId.length != 8) throw new IllegalArgumentException(\"Invalid ticket ID\")","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_147","timestamp":1745436522642,"code":"def checkBaggageWeight(weight: Double): Unit =\n  if (weight > 23.0) throw new RuntimeException(\"Baggage overweight\")","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_148","timestamp":1745436522642,"code":"def cancelBooking(bookings: Map[String, String], bookingId: String): Map[String, String] =\n  if (!bookings.contains(bookingId)) throw new NoSuchElementException(\"Booking not found\")\n  else bookings - bookingId","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_149","timestamp":1745436522642,"code":"def findAvailableFlights(dest: String, flights: List[(String, Boolean)]): List[(String, Boolean)] =\n  val available = flights.filter(f => f._1 == dest && f._2)\n  if (available.isEmpty) throw new Exception(\"No available flights to destination\")\n  else available","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_150","timestamp":1745436522642,"code":"def getFrequentFlyerPoints(id: Int, db: Map[Int, Int]): Int =\n  db.getOrElse(id, throw new Exception(\"Frequent flyer not found\"))","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_151","timestamp":1745436522642,"code":"def issueBoardingPass(passengerId: String, boardingPasses: Set[String]): String =\n  if (boardingPasses.contains(passengerId)) throw new Exception(\"Boarding pass already issued\")\n  else passengerId","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_152","timestamp":1745436522642,"code":"def changeFlightDate(current: String, newDate: String): String =\n  if (newDate <= current) throw new IllegalArgumentException(\"Invalid new date\")\n  else newDate","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_153","timestamp":1745436522642,"code":"def upgradeSeat(passenger: String, eligible: Boolean): String =\n  if (!eligible) throw new Exception(\"Passenger not eligible for upgrade\")\n  else \"Seat upgraded\"","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_154","timestamp":1745436522642,"code":"def calculateFare(passengers: Int, pricePerPerson: Int): Int =\n  if (passengers <= 0) throw new IllegalArgumentException(\"Invalid passenger count\")\n  else passengers * pricePerPerson","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_155","timestamp":1745436522642,"code":"def getBoardingZone(seatNumber: Int): String =\n  seatNumber match {\n    case n if n >= 1 && n <= 30 => \"Zone A\"\n    case n if n > 30 && n <= 60 => \"Zone B\"\n    case _ => throw new Exception(\"Invalid seat number for boarding zone\")\n  }","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_156","timestamp":1745436522642,"code":"def checkFlightStatus(status: String): String =\n  if (status != \"On Time\" && status != \"Delayed\" && status != \"Cancelled\")\n    throw new IllegalArgumentException(\"Unknown flight status\")\n  else status","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_157","timestamp":1745436522642,"code":"def transferMiles(from: Int, to: Int, miles: Int, balances: Map[Int, Int]): Map[Int, Int] =\n  if (miles <= 0) throw new Exception(\"Miles to transfer must be positive\")\n  val fromBalance = balances.getOrElse(from, throw new Exception(\"Sender not found\"))\n  val toBalance = balances.getOrElse(to, throw new Exception(\"Receiver not found\"))\n  if (fromBalance < miles) throw new Exception(\"Not enough miles to transfer\")\n  balances.updated(from, fromBalance - miles).updated(to, toBalance + miles)","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_158","timestamp":1745436522642,"code":"def addMealPreference(ticketId: String, preference: String, availableMeals: Set[String]): String =\n  if (!availableMeals.contains(preference)) throw new Exception(\"Meal not available\")\n  else preference","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_159","timestamp":1745436522642,"code":"def fetchBookingByEmail(bookings: Map[String, String], email: String): String =\n  bookings.getOrElse(email, throw new Exception(\"Booking not found for this email\"))","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_160","timestamp":1745436522642,"code":"def addLuggage(luggages: Int, maxAllowed: Int): Int =\n  if (luggages > maxAllowed) throw new Exception(\"Too many luggages\")\n  else luggages","category":"uses_throw","topicUsed":"Airline ticketing system"}
{"id":"uses_throw_161","timestamp":1745436533977,"code":"object ReservationExample1 {\n  def findRoomById(id: Int): String = {\n    if (id <= 0) throw new IllegalArgumentException(\"Room ID must be positive\")\n    s\"Room-$id\"\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_162","timestamp":1745436533977,"code":"object ReservationExample2 {\n  def checkInDate(date: String): String = {\n    if (date.isEmpty) throw new RuntimeException(\"No check-in date provided\")\n    date\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_163","timestamp":1745436533977,"code":"object ReservationExample3 {\n  def getGuestName(name: String): String = {\n    if (name == null) throw new NullPointerException(\"Guest name cannot be null\")\n    name\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_164","timestamp":1745436533977,"code":"object ReservationExample4 {\n  def reserveRooms(count: Int): Int = {\n    if (count <= 0) throw new IllegalArgumentException(\"Invalid number of rooms\")\n    count\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_165","timestamp":1745436533977,"code":"object ReservationExample5 {\n  def roomPrice(nights: Int, pricePerNight: Double): Double = {\n    if (nights == 0) throw new ArithmeticException(\"Number of nights cannot be zero\")\n    nights * pricePerNight\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_166","timestamp":1745436533977,"code":"object ReservationExample6 {\n  def assignRoomType(t: String): String = {\n    if (t != \"Suite\" && t != \"Standard\") throw new Exception(\"Invalid room type\")\n    t\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_167","timestamp":1745436533977,"code":"object ReservationExample7 {\n  def bookRoom(roomId: Int): String = {\n    if (roomId == 13) throw new RuntimeException(\"Room 13 is unavailable\")\n    s\"Room $roomId booked\"\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_168","timestamp":1745436533977,"code":"object ReservationExample8 {\n  def calculateTotal(amount: Double, guests: Int): Double = {\n    if (guests <= 0) throw new IllegalArgumentException(\"Guests must be positive\")\n    amount * guests\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_169","timestamp":1745436533977,"code":"object ReservationExample9 {\n  def findGuestByEmail(email: String): String = {\n    if (!email.contains(\"@\")) throw new Exception(\"Invalid email\")\n    email\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_170","timestamp":1745436533977,"code":"object ReservationExample10 {\n  def cancelBooking(bookingId: Int): String = {\n    if (bookingId < 100) throw new Exception(\"Booking ID too low\")\n    \"Cancelled\"\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_171","timestamp":1745436533977,"code":"object ReservationExample11 {\n  def selectHotel(city: String): String = {\n    if (city.trim.isEmpty) throw new Exception(\"City cannot be empty\")\n    city.capitalize + \" Hotel\"\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_172","timestamp":1745436533977,"code":"object ReservationExample12 {\n  def guestAge(age: Int): String = {\n    if (age < 18) throw new Exception(\"Guest too young\")\n    \"Adult\"\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_173","timestamp":1745436533977,"code":"object ReservationExample13 {\n  def validateCreditCard(number: String): String = {\n    if (number.length != 16) throw new Exception(\"Credit card number invalid\")\n    number\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_174","timestamp":1745436533977,"code":"object ReservationExample14 {\n  def checkRoomAvailability(rooms: Map[Int, Boolean], roomId: Int): Boolean = {\n    if (!rooms.contains(roomId)) throw new Exception(\"Room does not exist\")\n    rooms(roomId)\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_175","timestamp":1745436533977,"code":"object ReservationExample15 {\n  def getBreakfastOption(option: String): String = {\n    if (option != \"Continental\" && option != \"Buffet\") throw new Exception(\"Unknown breakfast option\")\n    option\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_176","timestamp":1745436533977,"code":"object ReservationExample16 {\n  def splitBill(total: Double, people: Int): Double = {\n    if (people == 0) throw new ArithmeticException(\"Cannot divide by zero\")\n    total / people\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_177","timestamp":1745436533977,"code":"object ReservationExample17 {\n  def daysBetween(checkIn: Int, checkOut: Int): Int = {\n    if (checkOut <= checkIn) throw new Exception(\"Check-out must be after check-in\")\n    checkOut - checkIn\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_178","timestamp":1745436533977,"code":"object ReservationExample18 {\n  def addServices(price: Double, service: String): Double = {\n    if (service != \"Laundry\" && service != \"Room Service\") throw new Exception(\"Invalid service\")\n    price + 20\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_179","timestamp":1745436533977,"code":"object ReservationExample19 {\n  def storeLuggage(items: Int): Boolean = {\n    if (items < 0) throw new Exception(\"Negative luggage not allowed\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_180","timestamp":1745436533977,"code":"object ReservationExample20 {\n  def roomCapacity(rooms: List[Int]): Int = {\n    if (rooms.isEmpty) throw new Exception(\"No rooms provided\")\n    rooms.sum\n  }\n}","category":"uses_throw","topicUsed":"Hotel reservation engine"}
{"id":"uses_throw_181","timestamp":1745436543090,"code":"def findOrderById(id: Int): String = if (id < 0) throw new IllegalArgumentException(\"Order ID must be positive\") else s\"Order-$id\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_182","timestamp":1745436543090,"code":"def calculateDeliveryTime(distance: Int, speed: Int): Int = if (speed == 0) throw new ArithmeticException(\"Speed cannot be zero\") else distance / speed","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_183","timestamp":1745436543090,"code":"def parseCustomerAddress(address: String): String = if (address.isEmpty) throw new RuntimeException(\"Address missing!\") else address","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_184","timestamp":1745436543090,"code":"def pickupCourier(name: String): String = if (name.contains(\"@\")) throw new Exception(\"Invalid courier name\") else s\"Courier $name assigned\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_185","timestamp":1745436543090,"code":"def getFoodItem(menu: Map[String, Int], item: String): Int = if (!menu.contains(item)) throw new NoSuchElementException(\"Item not found\") else menu(item)","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_186","timestamp":1745436543090,"code":"def assignVehicle(vehicles: List[String]): String = if (vehicles.isEmpty) throw new Exception(\"No vehicles available\") else vehicles.head","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_187","timestamp":1745436543090,"code":"def estimateTip(bill: Double, percentage: Int): Double = if (percentage < 0) throw new Exception(\"Negative tip not allowed\") else bill * percentage / 100","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_188","timestamp":1745436543090,"code":"def trackOrderStatus(status: String): String =\n  if (Set(\"pending\", \"on the way\", \"delivered\").contains(status)) status\n  else throw new Exception(\"Invalid order status\")","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_189","timestamp":1745436543090,"code":"def getUserPhone(user: (String, Option[String])): String = user._2.getOrElse(throw new Exception(\"No phone number\"))","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_190","timestamp":1745436543090,"code":"def validatePayment(amount: Double): String = if (amount <= 0) throw new Exception(\"Invalid payment amount\") else \"Payment processed\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_191","timestamp":1745436543090,"code":"def foodWeightPerPackage(weights: List[Int], packages: Int): Int = if (packages == 0) throw new Exception(\"Cannot divide by zero\") else weights.sum / packages","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_192","timestamp":1745436543090,"code":"def selectDeliveryWindow(hours: List[Int]): Int = if (hours.isEmpty) throw new Exception(\"No delivery slots available\") else hours.min","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_193","timestamp":1745436543090,"code":"def getRestaurantByCode(restaurants: Map[String, String], code: String): String = restaurants.get(code).getOrElse(throw new Exception(\"Restaurant not found\"))","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_194","timestamp":1745436543090,"code":"def customerRating(ratings: List[Int]): Double = if (ratings.isEmpty) throw new IllegalArgumentException(\"No ratings provided\") else ratings.sum.toDouble / ratings.size","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_195","timestamp":1745436543090,"code":"def parseDeliveryInstructions(instr: String): List[String] = if (instr.trim.isEmpty) throw new Exception(\"Empty instructions\") else instr.split(\",\").toList","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_196","timestamp":1745436543090,"code":"def startShift(driverId: Int, isActive: Boolean): String = if (!isActive) throw new Exception(\"Driver inactive\") else s\"Shift started for $driverId\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_197","timestamp":1745436543090,"code":"def checkFoodTemperature(temp: Int): String = if (temp < 0) throw new Exception(\"Temperature sensor fault\") else s\"Temperature: $temp\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_198","timestamp":1745436543090,"code":"def allocateOrderSlot(slots: Int): String = if (slots <= 0) throw new Exception(\"No slots available\") else s\"Allocated slot $slots\"","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_199","timestamp":1745436543090,"code":"def courierEarnings(orders: List[Double]): Double = if (orders.exists(_ < 0)) throw new Exception(\"Negative earnings\") else orders.sum","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_200","timestamp":1745436543090,"code":"def getDiscount(code: Option[String]): Int = code match { case Some(c) if c == \"SAVE10\" => 10; case None => throw new Exception(\"No discount code\"); case _ => throw new Exception(\"Invalid code\") }","category":"uses_throw","topicUsed":"Food delivery logistics"}
{"id":"uses_throw_201","timestamp":1745436552594,"code":"def getTrackDuration(trackId: String): Int = {\n  if (trackId.isEmpty) throw new IllegalArgumentException(\"Track ID is empty\")\n  215\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_202","timestamp":1745436552595,"code":"def downloadSong(songUrl: String): Array[Byte] = {\n  if (!songUrl.startsWith(\"http\")) throw new RuntimeException(\"Invalid URL format\")\n  Array.emptyByteArray\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_203","timestamp":1745436552595,"code":"def playPlaylist(playlist: List[String]): Unit = {\n  if (playlist.isEmpty) throw new Exception(\"Playlist is empty\")\n  println(\"Playing playlist\")\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_204","timestamp":1745436552595,"code":"def setVolume(level: Int): Unit = {\n  if (level < 0 || level > 100) throw new IllegalArgumentException(\"Volume out of range\")\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_205","timestamp":1745436552595,"code":"def createArtistProfile(name: String): String = {\n  if (name.trim.isEmpty) throw new Exception(\"Artist name is required\")\n  s\"Profile created for $name\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_206","timestamp":1745436552595,"code":"def rateSong(songId: String, rating: Int): String = {\n  if (rating < 1 || rating > 5) throw new Exception(\"Invalid rating\")\n  s\"Rated $songId as $rating\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_207","timestamp":1745436552595,"code":"def connectToStreamingServer(server: String): Boolean = {\n  if (server == \"\") throw new IllegalArgumentException(\"Empty server address\")\n  true\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_208","timestamp":1745436552595,"code":"def addToFavorites(userId: Int, songId: String): Unit = {\n  if (userId < 0) throw new Exception(\"Invalid user id\")\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_209","timestamp":1745436552595,"code":"def removeTrackFromQueue(queue: List[String], track: String): List[String] = {\n  if (!queue.contains(track)) throw new Exception(\"Track not found in queue\")\n  queue.filterNot(_ == track)\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_210","timestamp":1745436552595,"code":"def skipTrack(currentIndex: Int, playlist: List[String]): String = {\n  if (currentIndex >= playlist.length - 1) throw new Exception(\"No more tracks to skip\")\n  playlist(currentIndex + 1)\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_211","timestamp":1745436552595,"code":"def fetchAlbum(albumId: String): String = {\n  if (albumId.isEmpty) throw new Exception(\"Empty album id\")\n  \"Album data\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_212","timestamp":1745436552595,"code":"def shareSong(songId: String, target: String): Boolean = {\n  if (target == null) throw new Exception(\"No share target provided\")\n  true\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_213","timestamp":1745436552595,"code":"def getUserSubscriptionPlan(userId: Int): String = {\n  if (userId == 0) throw new RuntimeException(\"User not signed in\")\n  \"Premium\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_214","timestamp":1745436552595,"code":"def queueNextSong(queue: List[String]): String = {\n  if (queue.isEmpty) throw new Exception(\"Empty song queue\")\n  queue.head\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_215","timestamp":1745436552595,"code":"def setEqualizer(bass: Int): Unit = {\n  if (bass < -10 || bass > 10) throw new IllegalArgumentException(\"Bass level out of range\")\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_216","timestamp":1745436552595,"code":"def streamSong(songId: String, bitrate: Int): String = {\n  if (bitrate <= 0) throw new Exception(\"Invalid bitrate\")\n  s\"Streaming $songId at $bitrate kbps\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_217","timestamp":1745436552595,"code":"def pausePlayback(): String = {\n  val currentlyPlaying = false\n  if (!currentlyPlaying) throw new Exception(\"Nothing is playing\")\n  \"Paused\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_218","timestamp":1745436552595,"code":"def removeFavorite(userId: String, songId: String): Unit = {\n  if (userId.trim.isEmpty) throw new Exception(\"No user specified\")\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_219","timestamp":1745436552595,"code":"def getLyrics(trackId: String): String = {\n  if (trackId == \"unknown\") throw new Exception(\"Lyrics not found\")\n  \"la la la\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_220","timestamp":1745436552595,"code":"def purchaseTrack(trackId: String, credits: Int): String = {\n  if (credits <= 0) throw new Exception(\"Insufficient credits\")\n  s\"Purchased $trackId\"\n}","category":"uses_throw","topicUsed":"Digital music streaming"}
{"id":"uses_throw_221","timestamp":1745436568383,"code":"def findTutorBySubject(subject: String): Tutor = {\n  val tutor = tutors.find(_.subject == subject)\n  if (tutor.isDefined) tutor.get\n  else throw new NoSuchElementException(s\"No tutor found for subject $subject\")\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_222","timestamp":1745436568383,"code":"def getStudentById(id: Int): Student = {\n  students.get(id) match {\n    case Some(student) => student\n    case None => throw new IllegalArgumentException(s\"Student with id $id not found\")\n  }\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_223","timestamp":1745436568383,"code":"def bookSession(studentId: Int, tutorId: Int): Session = {\n  if (!students.contains(studentId))\n    throw new RuntimeException(\"Student does not exist\")\n  if (!tutors.exists(_.id == tutorId))\n    throw new RuntimeException(\"Tutor does not exist\")\n  Session(studentId, tutorId)\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_224","timestamp":1745436568383,"code":"def validateTimeSlot(time: String): Unit = {\n  if (!time.matches(\"[0-2][0-9]:[0-5][0-9]\"))\n    throw new IllegalArgumentException(\"Invalid time format\")\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_225","timestamp":1745436568383,"code":"def login(email: String, password: String): User = {\n  users.find(u => u.email == email && u.password == password)\n    .getOrElse(throw new Exception(\"Invalid credentials\"))\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_226","timestamp":1745436568383,"code":"def assignGrade(sessionId: Int, grade: Int): Unit = {\n  if (grade < 0 || grade > 100)\n    throw new IllegalArgumentException(\"Grade must be between 0 and 100\")\n  if (!sessions.contains(sessionId))\n    throw new Exception(\"Session not found\")\n  // ...\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_227","timestamp":1745436568383,"code":"def getSessionFeedback(sessionId: Int): String = {\n  feedbackMap.get(sessionId) match {\n    case Some(feedback) => feedback\n    case None => throw new NoSuchElementException(\"No feedback for this session\")\n  }\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_228","timestamp":1745436568383,"code":"def cancelBooking(bookingId: Int): Boolean = {\n  if (!bookings.contains(bookingId))\n    throw new Exception(\"Booking does not exist\")\n  bookings -= bookingId\n  true\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_229","timestamp":1745436568383,"code":"def rateTutor(tutorId: Int, rating: Int): Unit = {\n  if (rating < 1 || rating > 5)\n    throw new IllegalArgumentException(\"Rating out of range\")\n  if (!tutors.exists(_.id == tutorId))\n    throw new Exception(\"Tutor not found\")\n  // ...\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_230","timestamp":1745436568383,"code":"def fetchMessages(chatId: Int): Seq[Message] = {\n  chats.get(chatId) match {\n    case Some(chat) => chat.messages\n    case None => throw new Exception(\"Chat not found\")\n  }\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_231","timestamp":1745436568383,"code":"def removeStudent(id: Int): Unit = {\n  if (!students.contains(id))\n    throw new Exception(\"Cannot remove non-existent student\")\n  students -= id\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_232","timestamp":1745436568383,"code":"def calculateDiscount(code: String): Double = {\n  discountCodes.get(code).getOrElse(throw new IllegalArgumentException(s\"Discount code $code invalid\"))\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_233","timestamp":1745436568383,"code":"def validateEmail(email: String): Unit = {\n  if (!email.contains(\"@\"))\n    throw new IllegalArgumentException(\"Invalid email address\")\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_234","timestamp":1745436568383,"code":"def getAvailableSlots(tutorId: Int): Seq[String] = {\n  val tutor = tutors.find(_.id == tutorId)\n  if (tutor.isEmpty)\n    throw new Exception(\"Tutor does not exist\")\n  tutor.get.availableSlots\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_235","timestamp":1745436568383,"code":"def enrollCourse(studentId: Int, courseId: Int): Unit = {\n  if (!courses.exists(_.id == courseId))\n    throw new NoSuchElementException(\"Course not found\")\n  if (!students.contains(studentId))\n    throw new Exception(\"Student not found\")\n  // ...\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_236","timestamp":1745436568383,"code":"def deleteAccount(userId: Int): Boolean = {\n  if (!users.exists(_.id == userId))\n    throw new Exception(\"User does not exist\")\n  users = users.filterNot(_.id == userId)\n  true\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_237","timestamp":1745436568383,"code":"def getCourseMaterial(courseId: Int, fileName: String): Array[Byte] = {\n  val course = courses.find(_.id == courseId)\n  course.flatMap(_.materials.get(fileName)).getOrElse(throw new Exception(\"Material not found\"))\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_238","timestamp":1745436568383,"code":"def payForSession(sessionId: Int, amount: Double): Receipt = {\n  if (amount <= 0)\n    throw new IllegalArgumentException(\"Amount must be positive\")\n  val session = sessions.get(sessionId)\n  if (session.isEmpty)\n    throw new Exception(\"Session not found\")\n  Receipt(sessionId, amount)\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_239","timestamp":1745436568383,"code":"def setTutorAvailability(tutorId: Int, slots: Seq[String]): Unit = {\n  val tutor = tutors.find(_.id == tutorId)\n  if (tutor.isEmpty)\n    throw new Exception(\"Tutor missing\")\n  tutor.get.availableSlots = slots\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_240","timestamp":1745436568383,"code":"def joinSession(userId: Int, sessionId: Int): Session = {\n  if (!users.exists(_.id == userId))\n    throw new Exception(\"User not found\")\n  val session = sessions.get(sessionId)\n  if (session.isEmpty)\n    throw new Exception(\"Session missing\")\n  session.get\n}","category":"uses_throw","topicUsed":"Online tutoring platform"}
{"id":"uses_throw_241","timestamp":1745436584655,"code":"def getListingById(id: String): Listing =\n  if (id.isEmpty) throw new IllegalArgumentException(\"ID cannot be empty\")\n  else Listing(id, \"Nice Apartment\", 300000)\n\ncase class Listing(id: String, name: String, price: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_242","timestamp":1745436584656,"code":"def searchListingsByCity(city: String): Seq[Listing] =\n  if (city == null) throw new NullPointerException(\"City cannot be null\")\n  else Seq(Listing(\"1\", city, 400000))\n\ncase class Listing(id: String, city: String, price: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_243","timestamp":1745436584656,"code":"def parsePrice(priceStr: String): Int =\n  try priceStr.toInt\n  catch {\n    case _: NumberFormatException => throw new RuntimeException(\"Invalid price format\")\n  }","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_244","timestamp":1745436584656,"code":"def filterByBedrooms(bedrooms: Option[Int], listings: Seq[Listing]): Seq[Listing] =\n  bedrooms match {\n    case Some(b) if b <= 0 => throw new IllegalArgumentException(\"Bedrooms must be positive\")\n    case Some(b) => listings.filter(_.bedrooms == b)\n    case None => listings\n  }\n\ncase class Listing(id: String, bedrooms: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_245","timestamp":1745436584656,"code":"def divideAreaByRooms(area: Int, rooms: Int): Int =\n  if (rooms == 0) throw new ArithmeticException(\"Rooms cannot be zero\")\n  else area / rooms","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_246","timestamp":1745436584656,"code":"class ListingSearch(val listings: Seq[Listing]) {\n  def findById(id: String): Listing =\n    listings.find(_.id == id).getOrElse(throw new NoSuchElementException(\"No listing found\"))\n}\n\ncase class Listing(id: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_247","timestamp":1745436584656,"code":"def selectListing(listings: Seq[Listing], index: Int): Listing =\n  if (index < 0 || index >= listings.length) throw new IndexOutOfBoundsException(\"Invalid index\")\n  else listings(index)\n\ncase class Listing(id: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_248","timestamp":1745436584656,"code":"def getAgent(contact: String): Agent =\n  if (contact.trim.isEmpty) throw new IllegalArgumentException(\"Contact missing\")\n  else Agent(contact)\n\ncase class Agent(contact: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_249","timestamp":1745436584656,"code":"def fetchZipListings(zip: String): Seq[Listing] =\n  if (!zip.matches(\"[0-9]{5}\")) throw new IllegalArgumentException(\"Invalid ZIP code\")\n  else Seq(Listing(zip, 250000))\n\ncase class Listing(zip: String, price: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_250","timestamp":1745436584656,"code":"def calcPricePerSqft(price: Int, sqft: Int): Double =\n  if (sqft == 0) throw new ArithmeticException(\"Area cannot be zero\")\n  else price.toDouble / sqft","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_251","timestamp":1745436584656,"code":"def updateListingPrice(id: String, newPrice: Int): Listing =\n  if (newPrice < 0) throw new IllegalArgumentException(\"Negative price\")\n  else Listing(id, newPrice)\n\ncase class Listing(id: String, price: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_252","timestamp":1745436584656,"code":"def getFirstListing(listings: Seq[Listing]): Listing =\n  if (listings.isEmpty) throw new NoSuchElementException(\"No listings available\")\n  else listings.head\n\ncase class Listing(address: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_253","timestamp":1745436584656,"code":"def parseBedrooms(bedStr: String): Int =\n  if (bedStr == null) throw new NullPointerException(\"Null string\")\n  try bedStr.toInt\n  catch {\n    case _: Exception => throw new RuntimeException(\"Cannot parse bedrooms\")\n  }","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_254","timestamp":1745436584656,"code":"def minPriceFilter(listings: Seq[Listing], minPrice: Int): Seq[Listing] =\n  if (minPrice < 0) throw new IllegalArgumentException(\"Negative price not allowed\")\n  else listings.filter(_.price >= minPrice)\n\ncase class Listing(id: String, price: Int)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_255","timestamp":1745436584656,"code":"def getListingYearBuilt(yearStr: String): Int =\n  try yearStr.toInt\n  catch {\n    case _: Exception => throw new Exception(\"Invalid year built\")\n  }","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_256","timestamp":1745436584656,"code":"def removeListing(listings: Seq[Listing], id: String): Seq[Listing] =\n  if (id.isEmpty) throw new IllegalArgumentException(\"Empty ID\")\n  else listings.filterNot(_.id == id)\n\ncase class Listing(id: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_257","timestamp":1745436584656,"code":"def getLastListing(listings: Seq[Listing]): Listing =\n  if (listings.isEmpty) throw new NoSuchElementException(\"Listings list is empty\")\n  else listings.last\n\ncase class Listing(id: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_258","timestamp":1745436584656,"code":"def searchNeighborhood(listings: Seq[Listing], hood: String): Listing =\n  val l = listings.find(_.neighborhood == hood)\n  if (l.isEmpty) throw new Exception(\"Neighborhood not found\")\n  else l.get\n\ncase class Listing(id: String, neighborhood: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_259","timestamp":1745436584656,"code":"def filterByType(listings: Seq[Listing], listingType: String): Seq[Listing] =\n  if (listingType == null) throw new NullPointerException(\"Listing type is null\")\n  else listings.filter(_.listingType == listingType)\n\ncase class Listing(id: String, listingType: String)","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_260","timestamp":1745436584656,"code":"def calculateMortgage(amount: Double, years: Int): Double =\n  if (years <= 0) throw new IllegalArgumentException(\"Years must be positive\")\n  else amount / years","category":"uses_throw","topicUsed":"Real-estate listing search"}
{"id":"uses_throw_261","timestamp":1745436600026,"code":"def getBalance(wallet: Map[String, BigDecimal], currency: String): BigDecimal =\n  if (wallet.contains(currency)) wallet(currency)\n  else throw new NoSuchElementException(s\"Currency $currency not found.\")\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_262","timestamp":1745436600026,"code":"def withdraw(wallet: Map[String, BigDecimal], currency: String, amount: BigDecimal): Map[String, BigDecimal] = {\n  if (amount <= 0) throw new IllegalArgumentException(\"Amount must be positive.\")\n  val current = wallet.getOrElse(currency, throw new NoSuchElementException(s\"No balance for $currency\"))\n  if (current < amount) throw new RuntimeException(\"Insufficient funds.\")\n  wallet.updated(currency, current - amount)\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_263","timestamp":1745436600026,"code":"def deposit(wallet: Map[String, BigDecimal], currency: String, amount: BigDecimal): Map[String, BigDecimal] =\n  if (amount > 0) wallet.updated(currency, wallet.getOrElse(currency, BigDecimal(0)) + amount)\n  else throw new IllegalArgumentException(\"Must deposit positive amount.\")\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_264","timestamp":1745436600026,"code":"def findWallet(userIdsToWallets: Map[Int, String], userId: Int): String =\n  userIdsToWallets.get(userId).getOrElse(throw new NoSuchElementException(\"User not found\"))\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_265","timestamp":1745436600026,"code":"def createWallet(user: String, existing: Set[String]): String = {\n  if (existing.contains(user)) throw new IllegalStateException(\"Wallet already exists.\")\n  s\"wallet_of_$user\"\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_266","timestamp":1745436600026,"code":"def checkAddress(address: String): Boolean = {\n  if (!address.startsWith(\"0x\")) throw new IllegalArgumentException(\"Invalid address format.\")\n  true\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_267","timestamp":1745436600026,"code":"def transfer(src: Map[String, BigDecimal], dst: Map[String, BigDecimal], cur: String, amt: BigDecimal): (Map[String, BigDecimal], Map[String, BigDecimal]) = {\n  if (amt <= 0) throw new IllegalArgumentException(\"Amount must be positive.\")\n  val srcBalance = src.getOrElse(cur, throw new NoSuchElementException(\"Source balance missing.\"))\n  if (srcBalance < amt) throw new RuntimeException(\"Source insufficient.\")\n  val dstBalance = dst.getOrElse(cur, BigDecimal(0))\n  (src.updated(cur, srcBalance - amt), dst.updated(cur, dstBalance + amt))\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_268","timestamp":1745436600026,"code":"def requirePin(actual: String, entered: String): Boolean =\n  if (actual == entered) true else throw new SecurityException(\"Invalid PIN.\")\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_269","timestamp":1745436600026,"code":"def parseAmount(s: String): BigDecimal =\n  try BigDecimal(s)\n  catch { case _: NumberFormatException => throw new IllegalArgumentException(\"Bad amount format\") }\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_270","timestamp":1745436600026,"code":"def selectWalletById(wallets: Seq[String], idx: Int): String =\n  if (idx < 0 || idx >= wallets.length) throw new IndexOutOfBoundsException(\"Index is out of wallet list bounds.\")\n  else wallets(idx)\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_271","timestamp":1745436600026,"code":"def removeCurrency(wallet: Map[String, BigDecimal], currency: String): Map[String, BigDecimal] =\n  if (wallet.contains(currency)) wallet - currency\n  else throw new RuntimeException(s\"Currency not found: $currency\")\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_272","timestamp":1745436600026,"code":"def safeDivideReward(total: BigDecimal, n: Int): BigDecimal =\n  if (n == 0) throw new ArithmeticException(\"Cannot divide by zero.\")\n  else total / BigDecimal(n)\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_273","timestamp":1745436600026,"code":"def backupWallet(walletId: String, backupsEnabled: Boolean): String =\n  if (!backupsEnabled) throw new IllegalStateException(\"Backups not enabled.\")\n  else s\"backup_for_$walletId\"\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_274","timestamp":1745436600026,"code":"def claimAirdrop(wallets: Map[String, Boolean], wallet: String): Boolean =\n  if (!wallets.contains(wallet)) throw new NoSuchElementException(s\"Wallet not found: $wallet\")\n  if (wallets(wallet)) throw new IllegalStateException(\"Airdrop already claimed.\")\n  true\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_275","timestamp":1745436600026,"code":"def listKeys(keys: Seq[String], minRequired: Int): Seq[String] =\n  if (keys.length < minRequired) throw new IllegalArgumentException(\"Not enough keys.\")\n  keys\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_276","timestamp":1745436600026,"code":"def changePassphrase(current: String, provided: String, newPhrase: String): String =\n  if (current != provided) throw new SecurityException(\"Wrong passphrase.\")\n  newPhrase\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_277","timestamp":1745436600026,"code":"def importAddress(address: String, whitelist: Set[String]): Boolean =\n  if (!whitelist.contains(address)) throw new IllegalAccessException(\"Address not whitelisted.\")\n  true\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_278","timestamp":1745436600026,"code":"def sweepWallet(wallet: Map[String, BigDecimal], minAmount: BigDecimal): Map[String, BigDecimal] = {\n  if (wallet.values.exists(_ < minAmount)) throw new IllegalArgumentException(\"All balances must meet minimum to sweep.\")\n  wallet.mapValues(_ => BigDecimal(0))\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_279","timestamp":1745436600026,"code":"def setTag(walletId: String, tag: String): (String, String) = {\n  if (tag.trim.isEmpty) throw new IllegalArgumentException(\"Tag cannot be empty.\")\n  (walletId, tag)\n}","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_280","timestamp":1745436600026,"code":"def unlockTimedWallet(unlockTime: Long, now: Long): Boolean =\n  if (now < unlockTime) throw new IllegalStateException(\"Wallet still locked.\")\n  true\n","category":"uses_throw","topicUsed":"Cryptocurrency wallet management"}
{"id":"uses_throw_281","timestamp":1745436619276,"code":"def findProduct(sku: String, inventory: Map[String, Int]): Int = {\n  if (!inventory.contains(sku)) throw new NoSuchElementException(\"SKU not found.\")\n  inventory(sku)\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_282","timestamp":1745436619276,"code":"def deductStock(sku: String, qty: Int, inventory: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (!inventory.contains(sku)) throw new IllegalArgumentException(\"Product not found.\")\n  if (qty > inventory(sku)) throw new RuntimeException(\"Insufficient stock.\")\n  inventory(sku) -= qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_283","timestamp":1745436619276,"code":"def addProduct(sku: String, initialStock: Int, inventory: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (initialStock < 0) throw new IllegalArgumentException(\"Negative stock not allowed.\")\n  if (inventory.contains(sku)) throw new IllegalArgumentException(\"SKU already exists.\")\n  inventory(sku) = initialStock\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_284","timestamp":1745436619276,"code":"case class Warehouse(items: Map[String, Int]) {\n  def moveStock(from: String, to: String, amount: Int): Warehouse = {\n    if (!items.contains(from) || !items.contains(to)) throw new RuntimeException(\"Invalid SKU.\")\n    if (items(from) < amount) throw new RuntimeException(\"Not enough stock.\")\n    copy(items = items.updated(from, items(from) - amount).updated(to, items(to) + amount))\n  }\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_285","timestamp":1745436619276,"code":"def removeProduct(sku: String, inventory: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (!inventory.contains(sku)) throw new NoSuchElementException(\"Removing non-existent product.\")\n  inventory -= sku\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_286","timestamp":1745436619276,"code":"def restock(sku: String, qty: Int, inventory: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (qty <= 0) throw new IllegalArgumentException(\"Restock qty must be positive.\")\n  if (!inventory.contains(sku)) throw new NoSuchElementException(\"Product not found.\")\n  inventory(sku) += qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_287","timestamp":1745436619276,"code":"def getDivisionPerWarehouse(totalStock: Int, warehouses: Int): Int = {\n  if (warehouses == 0) throw new ArithmeticException(\"Divide by zero.\")\n  totalStock / warehouses\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_288","timestamp":1745436619276,"code":"def validateSku(sku: String): String = {\n  if (sku.trim.isEmpty) throw new IllegalArgumentException(\"SKU cannot be empty.\")\n  sku\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_289","timestamp":1745436619276,"code":"def findWarehouseByName(name: String, warehouses: List[String]): Int = {\n  val idx = warehouses.indexOf(name)\n  if (idx < 0) throw new NoSuchElementException(\"Warehouse not found.\")\n  idx\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_290","timestamp":1745436619276,"code":"def recordDamage(sku: String, qty: Int, damaged: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (qty < 0) throw new IllegalArgumentException(\"Negative damage not allowed.\")\n  if (!damaged.contains(sku)) throw new RuntimeException(\"Unknown SKU.\")\n  damaged(sku) += qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_291","timestamp":1745436619276,"code":"def assignShelf(sku: String, shelf: Option[String]): String = {\n  shelf.getOrElse(throw new IllegalArgumentException(\"Missing shelf assignment.\"))\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_292","timestamp":1745436619276,"code":"def mergeInventories(invA: Map[String, Int], invB: Map[String, Int]): Map[String, Int] = {\n  if (invA.keySet.intersect(invB.keySet).nonEmpty)\n    throw new RuntimeException(\"Overlapping SKUs in merge.\")\n  invA ++ invB\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_293","timestamp":1745436619276,"code":"def checkReorderPoint(sku: String, reorderPoints: Map[String, Int], stock: Map[String, Int]): Boolean = {\n  if (!reorderPoints.contains(sku)) throw new RuntimeException(\"Missing reorder point.\")\n  if (!stock.contains(sku)) throw new RuntimeException(\"Missing stock data.\")\n  stock(sku) < reorderPoints(sku)\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_294","timestamp":1745436619276,"code":"def createWarehouse(name: String, capacity: Int): (String, Int) = {\n  if (name.isEmpty) throw new IllegalArgumentException(\"Invalid warehouse name.\")\n  if (capacity <= 0) throw new IllegalArgumentException(\"Invalid capacity.\")\n  (name, capacity)\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_295","timestamp":1745436619276,"code":"def getSupplierContact(sku: String, suppliers: Map[String, String]): String = {\n  suppliers.getOrElse(sku, throw new NoSuchElementException(\"Supplier for SKU not found.\"))\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_296","timestamp":1745436619276,"code":"def reserveStock(sku: String, qty: Int, warehouseStock: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (!warehouseStock.contains(sku)) throw new RuntimeException(\"SKU missing for reservation.\")\n  if (warehouseStock(sku) < qty) throw new IllegalStateException(\"Reservation exceeds stock.\")\n  warehouseStock(sku) -= qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_297","timestamp":1745436619276,"code":"def unreserveStock(sku: String, qty: Int, warehouseStock: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (qty <= 0) throw new IllegalArgumentException(\"Cannot unreserve non-positive quantity.\")\n  if (!warehouseStock.contains(sku)) throw new RuntimeException(\"SKU not present.\")\n  warehouseStock(sku) += qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_298","timestamp":1745436619276,"code":"def fetchInventoryForCategory(category: String, cats: Map[String, List[String]], inv: Map[String, Int]): Map[String, Int] = {\n  if (!cats.contains(category)) throw new RuntimeException(\"Category missing.\")\n  cats(category).map(sku => sku -> inv.getOrElse(sku, throw new RuntimeException(\"SKU missing in inventory.\")))\n    .toMap\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_299","timestamp":1745436619276,"code":"def transferStock(from: String, to: String, qty: Int,\n    stocks: scala.collection.mutable.Map[String, Int]): Unit = {\n  if (!stocks.contains(from) || !stocks.contains(to)) throw new RuntimeException(\"Warehouse not found.\")\n  if (stocks(from) < qty) throw new IllegalStateException(\"Insufficient stock.\")\n  stocks(from) -= qty\n  stocks(to) += qty\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_300","timestamp":1745436619276,"code":"def calculateAverageStock(items: Map[String, Int]): Double = {\n  if (items.isEmpty) throw new IllegalArgumentException(\"No items in inventory.\")\n  items.values.sum.toDouble / items.size\n}","category":"uses_throw","topicUsed":"Warehouse inventory tracking"}
{"id":"uses_throw_301","timestamp":1745436628415,"code":"def getUserById(id: String): User = if (id.isEmpty) throw new IllegalArgumentException(\"ID cannot be empty\") else User(id)","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_302","timestamp":1745436628415,"code":"def moderatePost(post: Post): Boolean = if (post.content == null) throw new NullPointerException(\"Content is null\") else true","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_303","timestamp":1745436628415,"code":"def parseFlag(flag: String): Boolean = flag match { case \"yes\" => true case \"no\" => false case _ => throw new Exception(\"Invalid flag\") }","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_304","timestamp":1745436628415,"code":"def fetchComment(comments: List[String], idx: Int): String = if (idx < 0 || idx >= comments.length) throw new IndexOutOfBoundsException else comments(idx)","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_305","timestamp":1745436628415,"code":"def blockUser(user: User): Unit = if (!user.active) throw new Exception(\"User already blocked\") else user.active = false","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_306","timestamp":1745436628415,"code":"def approveContent(content: Option[String]): String = content.getOrElse(throw new Exception(\"Missing content\"))","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_307","timestamp":1745436628415,"code":"def checkSpamScore(score: Int): Unit = if (score < 0) throw new IllegalArgumentException(\"Negative score\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_308","timestamp":1745436628415,"code":"def reportAbuse(postId: String, reason: String): String = if (reason.isEmpty) throw new Exception(\"No reason provided\") else \"Reported\"","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_309","timestamp":1745436628415,"code":"def reviewReport(report: Option[Report]): Report = report match { case Some(r) => r case None => throw new Exception(\"No report\") }","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_310","timestamp":1745436628415,"code":"def setContentWarning(level: Int): Unit = if (level < 1 || level > 5) throw new Exception(\"Invalid level\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_311","timestamp":1745436628415,"code":"def getUserHandle(handle: String): String = if (handle.contains(\" \")) throw new Exception(\"Handle cannot contain spaces\") else handle","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_312","timestamp":1745436628415,"code":"def checkImageForNSFW(image: Image): Boolean = if (image.data.isEmpty) throw new Exception(\"No image data\") else false","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_313","timestamp":1745436628415,"code":"def validateModerator(user: User): Boolean = if (!user.isModerator) throw new Exception(\"Not a moderator\") else true","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_314","timestamp":1745436628415,"code":"def deleteComment(comments: Map[Int, String], id: Int): Map[Int, String] = if (!comments.contains(id)) throw new Exception(\"No such comment\") else comments - id","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_315","timestamp":1745436628415,"code":"def flagUser(userId: String): Unit = if (userId == null) throw new Exception(\"userId null\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_316","timestamp":1745436628415,"code":"def filterProfanity(text: String): String = if (text == null) throw new NullPointerException else text.replaceAll(\"badword\", \"****\")","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_317","timestamp":1745436628415,"code":"def verifyEmail(email: String): Boolean = if (!email.contains(\"@\")) throw new Exception(\"Invalid email\") else true","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_318","timestamp":1745436628415,"code":"def assignRole(user: User, role: String): Unit = if (!List(\"admin\",\"mod\",\"user\").contains(role)) throw new Exception(\"Unknown role\") else user.role = role","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_319","timestamp":1745436628416,"code":"def checkQuota(quota: Int): Unit = if (quota < 0) throw new Exception(\"Quota cannot be negative\") else ()","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_320","timestamp":1745436628416,"code":"def findPostByTitle(posts: List[Post], title: String): Post = posts.find(_.title == title).getOrElse(throw new Exception(\"Post not found\"))","category":"uses_throw","topicUsed":"Social media content moderation"}
{"id":"uses_throw_321","timestamp":1745436671208,"code":"object FeedSnippet1 {\n  def getUserFeed(userId: Int): List[String] = {\n    if (userId <= 0) throw new IllegalArgumentException(\"Invalid user id\")\n    List(\"News1\", \"News2\")\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_322","timestamp":1745436671208,"code":"object FeedSnippet2 {\n  def getArticleTitle(id: String): String = {\n    if (id.isEmpty) throw new NoSuchElementException(\"Empty article id\")\n    \"Breaking News\"\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_323","timestamp":1745436671208,"code":"object FeedSnippet3 {\n  def personalizedScore(score: Int): Double = {\n    if (score < 0) throw new ArithmeticException(\"Negative score\")\n    100.0 / (score + 1)\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_324","timestamp":1745436671208,"code":"object FeedSnippet4 {\n  def fetchUserPreference(user: String): String = {\n    if (user == null) throw new NullPointerException(\"User is null\")\n    \"Tech\"\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_325","timestamp":1745436671208,"code":"object FeedSnippet5 {\n  def getPreferredPublisher(publishers: List[String]): String = {\n    if (publishers.isEmpty) throw new IllegalArgumentException(\"No publishers\")\n    publishers.head\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_326","timestamp":1745436671208,"code":"object FeedSnippet6 {\n  def getLatestNews(feed: List[String]): String = {\n    if (feed == null) throw new NullPointerException(\"Feed missing\")\n    if (feed.isEmpty) throw new NoSuchElementException(\"No news available\")\n    feed.last\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_327","timestamp":1745436671208,"code":"object FeedSnippet7 {\n  def unreadCount(read: Int, total: Int): Int = {\n    if (total < read) throw new IllegalArgumentException(\"Total less than read\")\n    total - read\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_328","timestamp":1745436671208,"code":"object FeedSnippet8 {\n  def selectTopic(topics: Seq[String], idx: Int): String = {\n    if (idx < 0 || idx >= topics.length) throw new IndexOutOfBoundsException(\"Invalid topic index\")\n    topics(idx)\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_329","timestamp":1745436671208,"code":"object FeedSnippet9 {\n  def getUserAge(age: Option[Int]): Int = {\n    age.getOrElse(throw new IllegalArgumentException(\"Age missing\"))\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_330","timestamp":1745436671208,"code":"object FeedSnippet10 {\n  def safeDivideScore(a: Int, b: Int): Int = {\n    if (b == 0) throw new ArithmeticException(\"Score division by zero\")\n    a / b\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_331","timestamp":1745436671208,"code":"object FeedSnippet11 {\n  def getUserSetting(settings: Map[String, String], key: String): String = {\n    if (!settings.contains(key)) throw new NoSuchElementException(\"Setting not found\")\n    settings(key)\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_332","timestamp":1745436671208,"code":"object FeedSnippet12 {\n  def userCountryCode(code: String): String = {\n    if (code.length != 2) throw new IllegalArgumentException(\"Country code must be 2 chars\")\n    code.toUpperCase\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_333","timestamp":1745436671208,"code":"object FeedSnippet13 {\n  def timeToNextFeed(mins: Int): Int = {\n    if (mins < 0) throw new IllegalArgumentException(\"Negative minutes\")\n    60 - mins\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_334","timestamp":1745436671208,"code":"object FeedSnippet14 {\n  def fetchBreakingNews(news: List[String]): String = {\n    if (news.isEmpty) throw new RuntimeException(\"No breaking news\")\n    news.filter(_.contains(\"Breaking\")).headOption.getOrElse(throw new NoSuchElementException(\"No breaking news\"))\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_335","timestamp":1745436671208,"code":"object FeedSnippet15 {\n  def favoriteTag(tags: Set[String]): String = {\n    if (tags.isEmpty) throw new IllegalStateException(\"No tags available\")\n    tags.head\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_336","timestamp":1745436671208,"code":"object FeedSnippet16 {\n  def getUserReputation(score: Int): String = {\n    if (score < 0) throw new IllegalArgumentException(\"Reputation must be positive\")\n    if (score > 100) throw new IllegalArgumentException(\"Reputation too high\")\n    \"Reputation: \" + score\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_337","timestamp":1745436671208,"code":"object FeedSnippet17 {\n  def updateFeedList(feed: List[String], article: String): List[String] = {\n    if (article.isEmpty) throw new IllegalArgumentException(\"Article cannot be empty\")\n    article :: feed\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_338","timestamp":1745436671208,"code":"object FeedSnippet18 {\n  def mergeFeeds(a: List[String], b: List[String]): List[String] = {\n    if (a == null || b == null) throw new NullPointerException(\"Null feed\")\n    a ++ b\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_339","timestamp":1745436671208,"code":"object FeedSnippet19 {\n  def getEditorChoice(choices: Seq[String]): String = {\n    if (choices.isEmpty) throw new RuntimeException(\"No editor choices\")\n    choices(0)\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_340","timestamp":1745436671208,"code":"object FeedSnippet20 {\n  def getFriendFeed(friendId: Int, feeds: Map[Int, List[String]]): List[String] = {\n    feeds.getOrElse(friendId, throw new NoSuchElementException(\"Friend feed not found\"))\n  }\n}","category":"uses_throw","topicUsed":"Personalized news feed"}
{"id":"uses_throw_341","timestamp":1745436685143,"code":"def findStationById(id: String): ChargingStation = if (id.isEmpty) throw new IllegalArgumentException(\"Empty id\") else ChargingStation(id)\ncase class ChargingStation(id: String)\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_342","timestamp":1745436685143,"code":"def parseLatitude(lat: String): Double = try { lat.toDouble } catch { case _: NumberFormatException => throw new Exception(\"Invalid latitude\") }\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_343","timestamp":1745436685143,"code":"def calculateRange(kWh: Double, efficiency: Double): Double = if (efficiency == 0) throw new ArithmeticException(\"Efficiency is zero\") else kWh / efficiency\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_344","timestamp":1745436685143,"code":"def nearestStation(stations: List[Station], userLat: Double, userLong: Double): Station = if (stations.isEmpty) throw new Exception(\"No stations found\") else stations.head\ncase class Station(name: String)\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_345","timestamp":1745436685143,"code":"def getConnectorType(connector: String): String = connector match { case \"CCS\" | \"Type2\" => connector; case _ => throw new Exception(\"Unknown connector\") }\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_346","timestamp":1745436685143,"code":"def verifyChargingSpeed(speed: Int): Int = if (speed < 0) throw new Exception(\"Negative speed\") else speed\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_347","timestamp":1745436685143,"code":"def choosePaymentMethod(method: String): String = if (method == \"\") throw new Exception(\"Payment method required\") else method\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_348","timestamp":1745436685143,"code":"def getCityStations(city: String, stations: Map[String, List[String]]): List[String] = stations.getOrElse(city, throw new Exception(\"City not found\"))\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_349","timestamp":1745436685143,"code":"def getPlugCount(station: Station): Int = station.plugCount match { case n if n < 0 => throw new Exception(\"Negative plug count\"); case n => n }\ncase class Station(name: String, plugCount: Int)\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_350","timestamp":1745436685143,"code":"def stationAtIndex(stations: Array[Station], idx: Int): Station = if (idx < 0 || idx >= stations.length) throw new IndexOutOfBoundsException else stations(idx)\ncase class Station(name: String)\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_351","timestamp":1745436685143,"code":"def parsePrice(priceStr: String): Double = try { priceStr.toDouble } catch { case _: Exception => throw new Exception(\"Invalid price\") }\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_352","timestamp":1745436685143,"code":"def getStationName(station: Option[Station]): String = station match { case Some(s) => s.name; case None => throw new Exception(\"No station available\") }\ncase class Station(name: String)\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_353","timestamp":1745436685143,"code":"def isStationOpen(hours: (Int, Int), currentHour: Int): Boolean = if (currentHour < hours._1 || currentHour > hours._2) throw new Exception(\"Station closed\") else true\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_354","timestamp":1745436685143,"code":"def getProviderStations(provider: String, stations: Map[String, List[String]]): List[String] = stations.getOrElse(provider, throw new Exception(\"Unknown provider\"))\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_355","timestamp":1745436685143,"code":"def findAvailableSlot(slots: List[Boolean]): Int = slots.indexWhere(_ == true) match { case -1 => throw new Exception(\"No slot available\"); case i => i }\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_356","timestamp":1745436685143,"code":"def reserveCharger(user: String): Boolean = if (user.isEmpty) throw new Exception(\"User not logged in\") else true\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_357","timestamp":1745436685143,"code":"def checkBatteryLevel(level: Int): Int = if (level < 0 || level > 100) throw new Exception(\"Invalid battery level\") else level\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_358","timestamp":1745436685143,"code":"def getStationLocation(station: Station): (Double, Double) = station.location.getOrElse(throw new Exception(\"Location not provided\"))\ncase class Station(location: Option[(Double, Double)])\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_359","timestamp":1745436685143,"code":"def getPricePerKWh(station: Station): Double = station.pricePerKWh match { case Some(p) => p; case None => throw new Exception(\"No price info\") }\ncase class Station(pricePerKWh: Option[Double])\n","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_360","timestamp":1745436685143,"code":"def pingStation(stationId: String): Unit = if (stationId == \"offline\") throw new Exception(\"Station unreachable\")","category":"uses_throw","topicUsed":"Electric vehicle charging station locator"}
{"id":"uses_throw_361","timestamp":1745436698209,"code":"object CropTemperature {\n  def averageTemperature(readings: List[Double]): Double = {\n    if (readings.isEmpty) throw new IllegalArgumentException(\"No readings provided\")\n    readings.sum / readings.size\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_362","timestamp":1745436698209,"code":"object CropMoisture {\n  def moistureLevel(level: Int): String = {\n    if (level < 0) throw new RuntimeException(\"Negative soil moisture\")\n    if (level > 100) throw new RuntimeException(\"Moisture level over 100\")\n    if (level < 30) \"Low\" else if (level < 70) \"Optimal\" else \"High\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_363","timestamp":1745436698209,"code":"object CropHealth {\n  def checkHealthIndex(index: Double): String = {\n    if (index.isNaN) throw new IllegalArgumentException(\"Invalid health index\")\n    if (index < 0.5) \"Poor health\"\n    else if (index < 0.8) \"Fair health\"\n    else \"Good health\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_364","timestamp":1745436698209,"code":"object GrowthRateCalculator {\n  def rate(days: Int, height: Double): Double = {\n    if (days == 0) throw new ArithmeticException(\"Days cannot be zero\")\n    height / days\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_365","timestamp":1745436698209,"code":"object PestDetection {\n  def pestCount(data: Map[String, Int], crop: String): Int = {\n    if (!data.contains(crop)) throw new NoSuchElementException(\"Crop not found\")\n    data(crop)\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_366","timestamp":1745436698209,"code":"object IrrigationScheduler {\n  def nextIrrigationDay(days: List[String]): String = {\n    if (days.isEmpty) throw new IllegalStateException(\"No irrigation days scheduled\")\n    days.head\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_367","timestamp":1745436698209,"code":"object CropYield {\n  def averageYield(yields: List[Double]): Double = {\n    if (yields.isEmpty) throw new Exception(\"Yield list empty\")\n    yields.sum / yields.size\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_368","timestamp":1745436698209,"code":"object RainfallPredictor {\n  def predictRainfall(region: String, data: Map[String, Double]): Double = {\n    if (!data.contains(region)) throw new RuntimeException(\"No data for region\")\n    data(region)\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_369","timestamp":1745436698209,"code":"object FertilizerRecommender {\n  def recommendFertilizer(cropType: String): String = {\n    if (cropType == \"\") throw new IllegalArgumentException(\"Crop type is empty\")\n    cropType match {\n      case \"Wheat\" => \"NPK\"\n      case \"Rice\" => \"Urea\"\n      case _ => \"Generic\"\n    }\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_370","timestamp":1745436698209,"code":"object DiseaseAlert {\n  def alertLevel(diseaseScore: Int): String = {\n    if (diseaseScore < 0 || diseaseScore > 100) throw new IllegalArgumentException(\"Invalid disease score\")\n    if (diseaseScore > 80) \"High\"\n    else if (diseaseScore > 50) \"Medium\"\n    else \"Low\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_371","timestamp":1745436698209,"code":"object FieldMonitor {\n  def getFieldStatus(fields: Map[String, String], fieldId: String): String = {\n    if (!fields.contains(fieldId)) throw new NoSuchElementException(\"Unknown field ID\")\n    fields(fieldId)\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_372","timestamp":1745436698209,"code":"object CropAnalyzer {\n  def calculateIndex(values: List[Double]): Double = {\n    if (values.contains(0.0)) throw new ArithmeticException(\"Zero in data not allowed\")\n    values.product\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_373","timestamp":1745436698209,"code":"object HarvestEstimator {\n  def estimateHarvest(acres: Int, yieldPerAcre: Double): Double = {\n    if (acres <= 0) throw new IllegalArgumentException(\"Acreage must be positive\")\n    acres * yieldPerAcre\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_374","timestamp":1745436698209,"code":"object WaterUsageCalculator {\n  def perHectareUsage(totalWater: Double, hectares: Int): Double = {\n    if (hectares == 0) throw new IllegalArgumentException(\"Number of hectares is zero\")\n    totalWater / hectares\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_375","timestamp":1745436698209,"code":"object PesticideApplicator {\n  def calculateDose(area: Double, rate: Double): Double = {\n    if (rate <= 0) throw new IllegalArgumentException(\"Invalid pesticide rate\")\n    area * rate\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_376","timestamp":1745436698209,"code":"object CropRotationPlanner {\n  def nextCrop(current: String): String = {\n    if (current != \"Corn\" && current != \"Soybean\") throw new RuntimeException(\"Unknown crop\")\n    if (current == \"Corn\") \"Soybean\" else \"Corn\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_377","timestamp":1745436698209,"code":"object YieldValidator {\n  def validateYield(y: Double): Boolean = {\n    if (y < 0) throw new IllegalArgumentException(\"Yield cannot be negative\")\n    y <= 10000\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_378","timestamp":1745436698209,"code":"object DroneDeployment {\n  def assignDrone(area: Int): String = {\n    if (area > 500) throw new UnsupportedOperationException(\"Area too large for a single drone\")\n    \"Drone assigned\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_379","timestamp":1745436698209,"code":"object TemperatureAlert {\n  def checkTemperature(temp: Double): String = {\n    if (temp > 50 || temp < -20) throw new IllegalArgumentException(\"Abnormal temperature detected\")\n    \"Temperature is normal\"\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_380","timestamp":1745436698209,"code":"object SoilNutrientChecker {\n  def nutrientPercentage(level: Double): Double = {\n    if (level < 0 || level > 1) throw new IllegalArgumentException(\"Invalid nutrient percentage\")\n    level * 100\n  }\n}","category":"uses_throw","topicUsed":"Agricultural crop monitoring"}
{"id":"uses_throw_381","timestamp":1745436718238,"code":"object SensorIdValidation {\n  def parseSensorId(id: String): Int = {\n    if (id.isEmpty) throw new IllegalArgumentException(\"Sensor ID empty\")\n    else id.toInt\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_382","timestamp":1745436718238,"code":"object AverageTemperature {\n  def computeAverage(tempReadings: List[Double]): Double = {\n    if (tempReadings.isEmpty) throw new RuntimeException(\"No temperatures to average\")\n    else tempReadings.sum / tempReadings.size\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_383","timestamp":1745436718238,"code":"object SensorData {\n  def getValueOrThrow(sensor: Map[String, Int], key: String): Int = {\n    sensor.getOrElse(key, throw new NoSuchElementException(s\"No sensor $key\"))\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_384","timestamp":1745436718238,"code":"object Divider {\n  def safeDivide(total: Int, count: Int): Int = {\n    if (count == 0) throw new ArithmeticException(\"Division by zero while aggregating data\")\n    else total / count\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_385","timestamp":1745436718238,"code":"object HumidityParser {\n  def parseHumidity(value: String): Double = {\n    if (!value.matches(\"[0-9.]+\")) throw new NumberFormatException(\"Invalid humidity format\")\n    else value.toDouble\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_386","timestamp":1745436718238,"code":"class SensorAggregator(readings: List[Int]) {\n  def maxReading: Int = {\n    if (readings.isEmpty) throw new Exception(\"No readings to aggregate\")\n    else readings.max\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_387","timestamp":1745436718238,"code":"object MovingAverage {\n  def slidingAverage(data: List[Double], window: Int): List[Double] = {\n    if (window <= 0) throw new IllegalArgumentException(\"Window must be positive\")\n    else data.sliding(window).map(_.sum / window).toList\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_388","timestamp":1745436718239,"code":"object SensorRecord {\n  def validateTimestamp(ts: Long): Long = {\n    if (ts < 0) throw new IllegalArgumentException(\"Negative timestamp in sensor data\")\n    else ts\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_389","timestamp":1745436718239,"code":"object Gateway {\n  def getSensorData(data: Map[String, Double], sensor: String): Double = {\n    data.getOrElse(sensor, throw new Exception(s\"Sensor $sensor not found at gateway\"))\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_390","timestamp":1745436718239,"code":"object AggregationLevel {\n  def requireLevel(level: String): String = {\n    if (Set(\"minute\", \"hour\", \"day\").contains(level)) level\n    else throw new Exception(\"Invalid aggregation level\")\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_391","timestamp":1745436718239,"code":"object SensorJoiner {\n  def joinOrThrow(left: Option[Int], right: Option[Int]): (Int, Int) = {\n    (left, right) match {\n      case (Some(l), Some(r)) => (l, r)\n      case _ => throw new RuntimeException(\"Missing sensor data for join\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_392","timestamp":1745436718239,"code":"object VoltageParser {\n  def parseVoltage(s: String): Int = {\n    try {\n      s.toInt\n    } catch {\n      case _: NumberFormatException => throw new Exception(\"Invalid voltage reading\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_393","timestamp":1745436718239,"code":"object SensorArray {\n  def getAtIndex(array: Array[Double], idx: Int): Double = {\n    if (idx < 0 || idx >= array.length) throw new IndexOutOfBoundsException(\"Sensor index invalid\")\n    else array(idx)\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_394","timestamp":1745436718239,"code":"object PressureValidator {\n  def validatePressure(pressure: Int): Int = {\n    if (pressure < 0) throw new Exception(\"Negative pressure reading not allowed\")\n    else pressure\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_395","timestamp":1745436718239,"code":"class Aggregator(step: Int) {\n  def groupReadings(data: Seq[Int]): Seq[Seq[Int]] = {\n    if (step <= 0) throw new Exception(\"Step must be positive\")\n    else data.grouped(step).toSeq\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_396","timestamp":1745436718239,"code":"object BatteryChecker {\n  def safeBatteryLevel(level: Option[Double]): Double = {\n    level.getOrElse(throw new Exception(\"Missing battery level from sensor\"))\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_397","timestamp":1745436718239,"code":"object SensorFilter {\n  def filterAbove(readings: Seq[Int], threshold: Int): Seq[Int] = {\n    if (readings.exists(_ < 0)) throw new Exception(\"Negative reading encountered\")\n    else readings.filter(_ > threshold)\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_398","timestamp":1745436718239,"code":"object SensorTagParser {\n  def getZoneTag(tags: Map[String, String]): String = {\n    tags.get(\"zone\").getOrElse(throw new Exception(\"Missing 'zone' tag in sensor metadata\"))\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_399","timestamp":1745436718239,"code":"object DataMerger {\n  def mergeData(a: List[Int], b: List[Int]): List[Int] = {\n    if (a.length != b.length) throw new Exception(\"Cannot merge sensor data of unequal lengths\")\n    else a.zip(b).map{ case (x, y) => x + y }\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_400","timestamp":1745436718239,"code":"class FieldAggregator(fieldName: String) {\n  def extractAndSum(data: List[Map[String, Int]]): Int = {\n    if (data.forall(_.contains(fieldName))) data.map(_(fieldName)).sum\n    else throw new Exception(s\"Field $fieldName missing in some data records\")\n  }\n}","category":"uses_throw","topicUsed":"IoT sensor data aggregation"}
{"id":"uses_throw_401","timestamp":1745436730074,"code":"def getBusRouteNumber(line: String): Int =\n  if (line.nonEmpty) line.toInt\n  else throw new IllegalArgumentException(\"Bus line must not be empty\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_402","timestamp":1745436730074,"code":"def findStationIndex(stations: List[String], station: String): Int =\n  stations.indexOf(station) match {\n    case -1 => throw new NoSuchElementException(s\"Station not found: $station\")\n    case idx => idx\n  }","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_403","timestamp":1745436730074,"code":"def getNextTrainTime(times: List[Int], current: Int): Int =\n  times.find(_ > current).getOrElse(throw new RuntimeException(\"No next train available\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_404","timestamp":1745436730074,"code":"case class Route(stops: List[String])\ndef firstStop(r: Route): String =\n  if (r.stops.nonEmpty) r.stops.head else throw new NoSuchElementException(\"No stops in route\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_405","timestamp":1745436730074,"code":"def parseFare(input: String): Double =\n  try input.toDouble\n  catch { case _: NumberFormatException => throw new NumberFormatException(s\"Invalid fare: $input\") }","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_406","timestamp":1745436730074,"code":"def validateTransfer(allowed: Boolean): Unit =\n  if (!allowed) throw new UnsupportedOperationException(\"Transfer not permitted\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_407","timestamp":1745436730074,"code":"def calculateDistance(start: Option[Int], end: Option[Int]): Int =\n  (start, end) match {\n    case (Some(s), Some(e)) if e > s => e - s\n    case _ => throw new IllegalArgumentException(\"Invalid station indices\")\n  }","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_408","timestamp":1745436730074,"code":"def getZoneFare(zone: Int): Int =\n  if (zone >= 1 && zone <= 5) zone * 2\n  else throw new IllegalArgumentException(s\"Unknown zone $zone\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_409","timestamp":1745436730074,"code":"def getLineColor(line: String): String =\n  line match {\n    case \"Red\" => \"#FF0000\"\n    case \"Blue\" => \"#0000FF\"\n    case _ => throw new Exception(\"Unknown line color\")\n  }","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_410","timestamp":1745436730074,"code":"case class Trip(route: String, duration: Int)\ndef tripDuration(trip: Trip): Int =\n  if (trip.duration >= 0) trip.duration\n  else throw new IllegalArgumentException(\"Negative duration\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_411","timestamp":1745436730074,"code":"def stationIdMap(ids: Map[String, Int], name: String): Int =\n  ids.getOrElse(name, throw new NoSuchElementException(s\"No id for station $name\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_412","timestamp":1745436730074,"code":"def getBoardingTime(times: Seq[Int]): Int =\n  if (times.nonEmpty) times.min\n  else throw new IllegalStateException(\"No boarding times available\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_413","timestamp":1745436730074,"code":"def getExpressTrain(trains: List[String]): String =\n  trains.find(_.contains(\"Express\")).getOrElse(throw new Exception(\"No express train found\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_414","timestamp":1745436730074,"code":"case class Passenger(name: String, ticketId: Option[String])\ndef getTicketId(p: Passenger): String =\n  p.ticketId.getOrElse(throw new IllegalArgumentException(\"Ticket ID missing\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_415","timestamp":1745436730074,"code":"def computeFarePerZone(fare: Int, zones: Int): Int =\n  if (zones == 0) throw new ArithmeticException(\"Cannot divide by zero zones\")\n  else fare / zones","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_416","timestamp":1745436730074,"code":"def routeName(routes: Vector[String], idx: Int): String =\n  if (idx >= 0 && idx < routes.length) routes(idx)\n  else throw new ArrayIndexOutOfBoundsException(\"Route index out of bounds\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_417","timestamp":1745436730074,"code":"def getTransferStations(stations: List[String]): String =\n  stations.find(_.contains(\"Transfer\")).getOrElse(throw new Exception(\"No transfer station available\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_418","timestamp":1745436730074,"code":"def findLastStop(stops: Seq[String]): String =\n  if (stops.nonEmpty) stops.last\n  else throw new IllegalStateException(\"Route has no stops\")","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_419","timestamp":1745436730074,"code":"def calculateAverageWait(times: List[Int]): Double =\n  if (times.isEmpty) throw new IllegalArgumentException(\"Empty times list\")\n  else times.sum.toDouble / times.length","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_420","timestamp":1745436730074,"code":"def selectPlatform(platforms: Map[String, Int], name: String): Int =\n  platforms.getOrElse(name, throw new Exception(s\"Platform not found for $name\"))","category":"uses_throw","topicUsed":"Public transit route planning"}
{"id":"uses_throw_421","timestamp":1745436745572,"code":"object PosIntegration1 {\n  def parseProductCode(code: String): Int = {\n    if (code.matches(\"\\\\d+\")) code.toInt\n    else throw new IllegalArgumentException(\"Invalid product code\")\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_422","timestamp":1745436745572,"code":"object PosIntegration2 {\n  def getDiscountAmount(discounts: Map[String, Double], id: String): Double = {\n    discounts.get(id) match {\n      case Some(d) => d\n      case None => throw new NoSuchElementException(\"No discount for given id\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_423","timestamp":1745436745572,"code":"object PosIntegration3 {\n  def applyCoupon(coupons: Set[String], coupon: String): Boolean = {\n    if (coupons.contains(coupon)) true\n    else throw new Exception(\"Coupon not recognized\")\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_424","timestamp":1745436745572,"code":"object PosIntegration4 {\n  def divideAmount(total: Double, n: Int): Double = {\n    if (n == 0) throw new ArithmeticException(\"Cannot divide by zero\")\n    total / n\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_425","timestamp":1745436745572,"code":"object PosIntegration5 {\n  def validateQuantity(qty: Int): Unit = {\n    if (qty < 1) throw new IllegalArgumentException(\"Quantity must be positive\")\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_426","timestamp":1745436745572,"code":"object PosIntegration6 {\n  class Payment(val amount: Double)\n\n  def processPayment(p: Payment): String = {\n    if (p.amount <= 0) throw new Exception(\"Payment amount must be positive\")\n    \"Processed\"\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_427","timestamp":1745436745572,"code":"object PosIntegration7 {\n  def getProductPrice(products: Map[String, Double], sku: String): Double = {\n    products.get(sku) match {\n      case Some(price) => price\n      case None => throw new Exception(\"SKU not found\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_428","timestamp":1745436745572,"code":"object PosIntegration8 {\n  def removeItem(items: List[String], item: String): List[String] = {\n    if (!items.contains(item)) throw new Exception(\"Item not found in list\")\n    items.filterNot(_ == item)\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_429","timestamp":1745436745572,"code":"object PosIntegration9 {\n  def applyTax(amount: Double, rate: Double): Double = {\n    if (rate < 0.0) throw new Exception(\"Negative tax rate invalid\")\n    amount * (1.0 + rate)\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_430","timestamp":1745436745572,"code":"object PosIntegration10 {\n  def findStore(stores: Seq[String], name: String): Int = {\n    val idx = stores.indexOf(name)\n    if (idx < 0) throw new Exception(\"Store not found\")\n    idx\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_431","timestamp":1745436745572,"code":"object PosIntegration11 {\n  def connectToTerminal(terminalId: String): Boolean = {\n    if (terminalId.isEmpty) throw new RuntimeException(\"Terminal ID required\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_432","timestamp":1745436745572,"code":"object PosIntegration12 {\n  def refund(paymentId: Option[String]): String = {\n    paymentId match {\n      case Some(id) => \"Refund initiated\"\n      case None => throw new Exception(\"No payment ID provided\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_433","timestamp":1745436745572,"code":"object PosIntegration13 {\n  def lookupEmployee(employees: Set[String], id: String): String = {\n    if (employees.contains(id)) id\n    else throw new Exception(\"Employee ID not found\")\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_434","timestamp":1745436745573,"code":"object PosIntegration14 {\n  def splitBill(amount: Double, customers: Int): Double = {\n    if (customers < 1) throw new IllegalArgumentException(\"No customers to split bill\")\n    amount / customers\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_435","timestamp":1745436745573,"code":"object PosIntegration15 {\n  def authorizeManager(roles: List[String]): String = {\n    if (!roles.contains(\"manager\")) throw new Exception(\"Manager authorization required\")\n    \"Authorized\"\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_436","timestamp":1745436745573,"code":"object PosIntegration16 {\n  def validateBarcode(barcode: String): String = {\n    if (barcode.length != 12) throw new Exception(\"Barcode must be 12 digits\")\n    barcode\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_437","timestamp":1745436745573,"code":"object PosIntegration17 {\n  def reserveStock(stock: Int, requested: Int): Int = {\n    if (requested > stock) throw new Exception(\"Insufficient stock\")\n    stock - requested\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_438","timestamp":1745436745573,"code":"object PosIntegration18 {\n  def selectPaymentMethod(methods: List[String], chosen: String): String = {\n    if (!methods.contains(chosen)) throw new Exception(\"Unsupported payment method\")\n    chosen\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_439","timestamp":1745436745573,"code":"object PosIntegration19 {\n  def connectScanner(scannerId: String): Boolean = {\n    if (scannerId == \"\") throw new Exception(\"Scanner ID missing\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_440","timestamp":1745436745573,"code":"object PosIntegration20 {\n  def cashDrawerOpen(status: Boolean): String = {\n    if (!status) throw new Exception(\"Cash drawer did not open\")\n    \"Drawer Opened\"\n  }\n}","category":"uses_throw","topicUsed":"Retail point-of-sale integration"}
{"id":"uses_throw_441","timestamp":1745436756259,"code":"def parseAmount(str: String): Double =\n  if (str.isEmpty) throw new IllegalArgumentException(\"Amount required\")\n  else str.toDouble\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_442","timestamp":1745436756259,"code":"def getInterestRate(rate: Double): Double =\n  if (rate < 0) throw new Exception(\"Negative rate not allowed\")\n  else rate\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_443","timestamp":1745436756259,"code":"def monthlyPayment(principal: Double, years: Int, rate: Double): Double =\n  if (years == 0) throw new RuntimeException(\"Years cannot be zero\")\n  val r = rate / 12 / 100\n  principal * r / (1 - math.pow(1 + r, -years * 12))\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_444","timestamp":1745436756259,"code":"def checkLoanType(loanType: String): String =\n  loanType match {\n    case \"fixed\" => loanType\n    case \"variable\" => loanType\n    case _ => throw new Exception(\"Unknown loan type\")\n  }\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_445","timestamp":1745436756259,"code":"class MortgageInput(val amount: Double, val rate: Double, val years: Int) {\n  if (amount <= 0) throw new IllegalArgumentException(\"Amount must be positive\")\n}\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_446","timestamp":1745436756259,"code":"def downpaymentPercentage(amt: Double, dp: Double): Double =\n  if (amt == 0) throw new ArithmeticException(\"Amount cannot be zero\")\n  else (dp / amt) * 100\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_447","timestamp":1745436756259,"code":"def parseYears(str: String): Int =\n  try str.toInt\n  catch { case _: NumberFormatException => throw new NumberFormatException(\"Years is not a valid number\") }\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_448","timestamp":1745436756259,"code":"def getPropertyTaxRate(zip: String): Double =\n  if (zip.length != 5) throw new Exception(\"Invalid ZIP code\")\n  else 1.2\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_449","timestamp":1745436756259,"code":"def amortizationSchedule(principal: Double, payments: Int): Seq[Double] =\n  if (payments <= 0) throw new IllegalArgumentException(\"Payments must be > 0\")\n  else Seq.fill(payments)(principal / payments)\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_450","timestamp":1745436756259,"code":"def validateInput(amount: Double, rate: Double): Boolean =\n  if (amount < 10000) throw new Exception(\"Minimum amount is 10,000\")\n  else if (rate > 15) throw new Exception(\"Rate too high\")\n  else true\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_451","timestamp":1745436756259,"code":"def extraPaymentsAllowed(term: Int): Boolean =\n  if (term < 5) throw new Exception(\"No extra payments allowed for short term\")\n  else true\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_452","timestamp":1745436756259,"code":"def calculateAPR(rate: Double, fees: Double, years: Int): Double =\n  if (fees < 0) throw new Exception(\"Fees cannot be negative\")\n  else rate + (fees / years)\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_453","timestamp":1745436756259,"code":"def lookupBank(name: String): String =\n  if (name == \"\") throw new IllegalArgumentException(\"Bank name required\")\n  else name\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_454","timestamp":1745436756259,"code":"def toDoubleOrThrow(arg: String): Double =\n  arg.toDoubleOption.getOrElse(throw new NumberFormatException(\"Not a double\"))\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_455","timestamp":1745436756259,"code":"def checkEligibility(age: Int, income: Double): Boolean =\n  if (age < 18) throw new Exception(\"Must be 18 or older\")\n  else if (income < 20000) throw new Exception(\"Income too low\")\n  else true\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_456","timestamp":1745436756259,"code":"def insuranceRequired(purchased: Boolean): Boolean =\n  if (!purchased) throw new RuntimeException(\"Insurance required\")\n  else true\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_457","timestamp":1745436756259,"code":"def rateFromString(rate: String): Double =\n  try rate.toDouble\n  catch { case _: Exception => throw new Exception(\"Invalid rate string\") }\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_458","timestamp":1745436756259,"code":"def loanOfficerApproval(score: Int): String =\n  if (score < 600) throw new Exception(\"Loan denied: low credit score\")\n  else \"approved\"\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_459","timestamp":1745436756259,"code":"def checkAddress(addr: String): String =\n  if (addr.length < 10) throw new Exception(\"Address too short\")\n  else addr\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_460","timestamp":1745436756259,"code":"def calcTotalPayment(month: Double, n: Int): Double =\n  if (n <= 0) throw new IllegalArgumentException(\"Months must be positive\")\n  else month * n\n","category":"uses_throw","topicUsed":"Online mortgage calculator"}
{"id":"uses_throw_461","timestamp":1745436768194,"code":"object TelemetryValueParser {\n  def parseTemperature(s: String): Double =\n    if (s == \"\") throw new IllegalArgumentException(\"Empty temperature\")\n    else s.toDouble\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_462","timestamp":1745436768195,"code":"object SensorReader {\n  def readSensorValue(sensorId: Int): Float =\n    if (sensorId < 0) throw new RuntimeException(\"Invalid sensor ID\")\n    else Math.random().toFloat * 100\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_463","timestamp":1745436768195,"code":"object DataNormalizer {\n  def normalizeValue(value: Double, base: Double): Double =\n    if (base == 0) throw new ArithmeticException(\"Zero base for normalization\")\n    else value / base\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_464","timestamp":1745436768195,"code":"class Machine(val id: String) {\n  def getTelemetryOrThrow: Int =\n    if (id.isEmpty) throw new Exception(\"Missing machine ID\")\n    else id.length * 10\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_465","timestamp":1745436768195,"code":"object RPMCalculator {\n  def calculateRPM(pulses: Int, duration: Int): Int =\n    if (duration <= 0) throw new IllegalArgumentException(\"Duration must be positive\")\n    else (pulses * 60)/duration\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_466","timestamp":1745436768195,"code":"object AlertManager {\n  def triggerAlert(level: String): Boolean =\n    if (level != \"CRITICAL\" && level != \"WARNING\")\n      throw new Exception(\"Unknown alert level\")\n    else true\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_467","timestamp":1745436768195,"code":"object TelemetryDispatcher {\n  def dispatchData(batch: List[Int]): Unit =\n    if (batch.isEmpty) throw new RuntimeException(\"Empty batch can't be dispatched\")\n    else batch.foreach(x => println(s\"Sent: $x\"))\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_468","timestamp":1745436768195,"code":"object VoltageProcessor {\n  def safeDivide(voltage: Double, divider: Double): Double =\n    if (divider == 0) throw new ArithmeticException(\"Divider cannot be zero\")\n    else voltage / divider\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_469","timestamp":1745436768195,"code":"object ThresholdChecker {\n  def checkThreshold(value: Double, limit: Double): Boolean =\n    if (value > limit) throw new Exception(\"Threshold exceeded\")\n    else true\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_470","timestamp":1745436768195,"code":"class SignalParser {\n  def parse(signal: String): Int =\n    if (signal == null) throw new NullPointerException(\"No signal present\")\n    else signal.length\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_471","timestamp":1745436768195,"code":"class PressureSensor(reading: Option[Double]) {\n  def getPressure: Double =\n    reading.getOrElse(throw new Exception(\"No pressure reading available\"))\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_472","timestamp":1745436768195,"code":"object TelemetryRouter {\n  def route(packet: String): String =\n    if (!packet.startsWith(\"PKT\")) throw new Exception(\"Invalid packet format\")\n    else packet.reverse\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_473","timestamp":1745436768195,"code":"object DataAggregator {\n  def aggregate(values: List[Int]): Int =\n    if (values.isEmpty) throw new Exception(\"No values to aggregate\")\n    else values.sum\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_474","timestamp":1745436768195,"code":"class SensorData(val raw: String) {\n  def toIntValue: Int =\n    try raw.toInt\n    catch {\n      case _: NumberFormatException => throw new Exception(\"Invalid sensor raw value\")\n    }\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_475","timestamp":1745436768195,"code":"object DiagnosticTool {\n  def diagnose(code: Int): String =\n    if (code < 0) throw new Exception(\"Negative diagnostic code\")\n    else \"OK\"\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_476","timestamp":1745436768195,"code":"object BatchUploader {\n  def upload(batch: Seq[String]): Boolean =\n    if (batch.contains(null)) throw new NullPointerException(\"Null batch element\")\n    else true\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_477","timestamp":1745436768195,"code":"object OutlierRemover {\n  def removeOutlier(values: Seq[Double], max: Double): Seq[Double] =\n    if (values.exists(_ > max)) throw new Exception(\"Outlier detected\")\n    else values\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_478","timestamp":1745436768195,"code":"class TelemetrySession(sessionId: Option[String]) {\n  def validate: String =\n    sessionId.getOrElse(throw new Exception(\"Session ID required\"))\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_479","timestamp":1745436768195,"code":"object HeartbeatMonitor {\n  def check(lastReceived: Long, now: Long): Boolean =\n    if (now - lastReceived > 10000) throw new Exception(\"Heartbeat missed\")\n    else true\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_480","timestamp":1745436768195,"code":"class LinearScale(factor: Double) {\n  def scale(value: Double): Double =\n    if (factor == 0) throw new Exception(\"Scale factor cannot be zero\")\n    else value * factor\n}","category":"uses_throw","topicUsed":"Telemetry for industrial machinery"}
{"id":"uses_throw_481","timestamp":1745436789569,"code":"object VRLobby1 {\n  def getPlayerName(playerId: Int): String = {\n    if (playerId < 0) throw new IllegalArgumentException(\"Invalid player ID\")\n    s\"Player$playerId\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_482","timestamp":1745436789569,"code":"object VRLobby2 {\n  def createRoom(name: String): String = {\n    if (name.trim.isEmpty) throw new Exception(\"Room name cannot be empty\")\n    s\"Room: $name\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_483","timestamp":1745436789569,"code":"object VRLobby3 {\n  def assignHeadset(userId: Int): String = {\n    if (userId == 42) throw new RuntimeException(\"User banned\")\n    \"Headset assigned\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_484","timestamp":1745436789569,"code":"object VRLobby4 {\n  def joinLobby(code: String): Boolean = {\n    if (!code.startsWith(\"VR\")) throw new Exception(\"Invalid lobby code\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_485","timestamp":1745436789569,"code":"object VRLobby5 {\n  def setLobbyCapacity(cap: Int): Unit = {\n    if (cap <= 0) throw new IllegalArgumentException(\"Capacity must be positive\")\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_486","timestamp":1745436789569,"code":"object VRLobby6 {\n  def findHost(users: List[String]): String = {\n    if (users.isEmpty) throw new Exception(\"No users to choose from\")\n    users.head\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_487","timestamp":1745436789569,"code":"object VRLobby7 {\n  def getAvatar(user: String): String = {\n    if (user.length < 3) throw new RuntimeException(\"Invalid username\")\n    s\"AvatarOf$user\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_488","timestamp":1745436789569,"code":"object VRLobby8 {\n  def selectRoom(rooms: List[String], idx: Int): String = {\n    if (idx < 0 || idx >= rooms.length) throw new Exception(\"Room index out of range\")\n    rooms(idx)\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_489","timestamp":1745436789569,"code":"object VRLobby9 {\n  def calculatePlayerLevel(exp: Int, divisor: Int): Int = {\n    if (divisor == 0) throw new ArithmeticException(\"Division by zero\")\n    exp / divisor\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_490","timestamp":1745436789569,"code":"object VRLobby10 {\n  def inviteFriend(friendName: String): Unit = {\n    if (friendName.contains(\" \")) throw new RuntimeException(\"Invalid friend name\")\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_491","timestamp":1745436789569,"code":"object VRLobby11 {\n  def removePlayer(players: List[String], name: String): List[String] = {\n    if (!players.contains(name)) throw new Exception(\"Player not found\")\n    players.filterNot(_ == name)\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_492","timestamp":1745436789569,"code":"object VRLobby12 {\n  def getLobbyByPort(port: Int): String = {\n    if (port < 1024 || port > 65535) throw new Exception(\"Port out of range\")\n    s\"Lobby on port $port\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_493","timestamp":1745436789569,"code":"object VRLobby13 {\n  def reserveSeat(lobby: Map[Int, String], seat: Int): Map[Int, String] = {\n    if (lobby.contains(seat)) throw new Exception(\"Seat already taken\")\n    lobby + (seat -> \"reserved\")\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_494","timestamp":1745436789569,"code":"object VRLobby14 {\n  def validateAccess(token: Option[String]): String = {\n    if (token.isEmpty) throw new Exception(\"Access denied\")\n    \"Access granted\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_495","timestamp":1745436789569,"code":"object VRLobby15 {\n  def startGame(players: List[String]): String = {\n    if (players.size < 2) throw new Exception(\"Not enough players to start\")\n    \"Game started\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_496","timestamp":1745436789569,"code":"object VRLobby16 {\n  def spectateLobby(user: String, lobbies: Set[String]): String = {\n    if (!lobbies.exists(_.contains(user))) throw new Exception(\"User not in any lobby\")\n    s\"Spectating $user's lobby\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_497","timestamp":1745436789569,"code":"object VRLobby17 {\n  def submitScore(score: Int): String = {\n    if (score < 0) throw new Exception(\"Negative score not allowed\")\n    s\"Score: $score submitted\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_498","timestamp":1745436789569,"code":"object VRLobby18 {\n  def setMicrophone(user: String, micOn: Boolean): String = {\n    if (user.isEmpty) throw new Exception(\"User required\")\n    if (!micOn) throw new Exception(\"Microphone must be on\")\n    \"Microphone set\"\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_499","timestamp":1745436789569,"code":"object VRLobby19 {\n  def calculateRoundTime(time: Int): Int = {\n    if (time <= 0) throw new IllegalArgumentException(\"Time must be positive\")\n    time * 2\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_500","timestamp":1745436789569,"code":"object VRLobby20 {\n  def pickTeam(teams: Vector[String], selection: Int): String = {\n    if (selection < 0 || selection >= teams.length) throw new Exception(\"Invalid team selection\")\n    teams(selection)\n  }\n}","category":"uses_throw","topicUsed":"Virtual reality gaming lobby"}
{"id":"uses_throw_501","timestamp":1745436809712,"code":"object Snippet1 {\n  def parseHours(hours: String): Int = {\n    if (hours.forall(_.isDigit)) hours.toInt\n    else throw new IllegalArgumentException(\"Invalid hours format\")\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_502","timestamp":1745436809713,"code":"object Snippet2 {\n  def calculateOvertime(hours: Int): Int = {\n    if (hours < 0) throw new RuntimeException(\"Hours cannot be negative\")\n    else if (hours > 40) hours - 40\n    else 0\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_503","timestamp":1745436809713,"code":"object Snippet3 {\n  class Employee(val id: String)\n  class TimeTracker {\n    def clockIn(e: Employee, time: String): Unit = {\n      if (time.isEmpty) throw new Exception(\"Time is required\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_504","timestamp":1745436809713,"code":"object Snippet4 {\n  def checkEmployeeActive(active: Boolean): String = {\n    if (!active) throw new Exception(\"Employee not active\")\n    else \"Proceed\"\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_505","timestamp":1745436809713,"code":"object Snippet5 {\n  def getBreakDuration(breaks: List[Int]): Int = {\n    if (breaks.isEmpty) throw new NoSuchElementException(\"No breaks found\")\n    breaks.sum\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_506","timestamp":1745436809713,"code":"object Snippet6 {\n  def percentageWorked(hours: Int, total: Int): Double = {\n    if (total == 0) throw new ArithmeticException(\"Total hours cannot be zero\")\n    else hours.toDouble / total\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_507","timestamp":1745436809713,"code":"object Snippet7 {\n  class TimeSheet\n  def saveTimeSheet(ts: Option[TimeSheet]): String = {\n    ts match {\n      case Some(sheet) => \"Saved\"\n      case None => throw new Exception(\"No TimeSheet to save\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_508","timestamp":1745436809713,"code":"object Snippet8 {\n  def findEmployeeById(id: String, employees: Map[String, String]): String = {\n    if (!employees.contains(id)) throw new Exception(\"Employee not found\")\n    employees(id)\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_509","timestamp":1745436809713,"code":"object Snippet9 {\n  def validateDate(date: String): String = {\n    if (!date.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) throw new IllegalArgumentException(\"Invalid date format\")\n    date\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_510","timestamp":1745436809713,"code":"object Snippet10 {\n  def hoursWorked(start: Int, end: Int): Int = {\n    if (end < start) throw new Exception(\"End time before start time\")\n    end - start\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_511","timestamp":1745436809713,"code":"object Snippet11 {\n  def recordShift(emp: String, in: Int, out: Int): Int = {\n    if (emp == \"\") throw new Exception(\"Employee name required\")\n    if (out <= in) throw new Exception(\"Invalid shift times\")\n    out - in\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_512","timestamp":1745436809713,"code":"object Snippet12 {\n  class Project(val name: String)\n  def assign(project: Project, emp: String): String = {\n    if (project == null) throw new Exception(\"Project is null\")\n    if (emp == null || emp.isEmpty) throw new Exception(\"Employee invalid\")\n    \"Assigned\"\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_513","timestamp":1745436809713,"code":"object Snippet13 {\n  def removeBreak(breaks: List[Int], index: Int): List[Int] = {\n    if (index < 0 || index >= breaks.length) throw new IndexOutOfBoundsException(\"Invalid break index\")\n    breaks.patch(index, Nil, 1)\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_514","timestamp":1745436809713,"code":"object Snippet14 {\n  def approveLeave(leavesLeft: Int): Boolean = {\n    if (leavesLeft <= 0) throw new Exception(\"No leaves left\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_515","timestamp":1745436809713,"code":"object Snippet15 {\n  def getFirstClockIn(times: List[Int]): Int = {\n    if (times.isEmpty) throw new Exception(\"No clock-in times recorded\")\n    times.min\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_516","timestamp":1745436809713,"code":"object Snippet16 {\n  def addWorkDay(days: Set[String], day: String): Set[String] = {\n    if (days.contains(day)) throw new Exception(\"Day already exists\")\n    days + day\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_517","timestamp":1745436809713,"code":"object Snippet17 {\n  def subtractBreaks(total: Int, breaks: Int): Int = {\n    if (breaks > total) throw new Exception(\"Breaks exceed total hours\")\n    total - breaks\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_518","timestamp":1745436809713,"code":"object Snippet18 {\n  case class TimeEntry(employee: String, duration: Int)\n  def totalForEmployee(entries: List[TimeEntry], name: String): Int = {\n    val filtered = entries.filter(_.employee == name)\n    if (filtered.isEmpty) throw new Exception(\"No entries for employee\")\n    filtered.map(_.duration).sum\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_519","timestamp":1745436809713,"code":"object Snippet19 {\n  def setHourlyRate(rate: Double): Double = {\n    if (rate <= 0) throw new Exception(\"Rate must be positive\")\n    rate\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_520","timestamp":1745436809713,"code":"object Snippet20 {\n  def parseEmployee(input: String): (String, Int) = {\n    val parts = input.split(\",\")\n    if (parts.length != 2) throw new Exception(\"Invalid input format\")\n    (parts(0), parts(1).toInt)\n  }\n}","category":"uses_throw","topicUsed":"Employee time tracking"}
{"id":"uses_throw_521","timestamp":1745436826983,"code":"object WeatherAlert1 {\n  def getTemperature(city: String): Double = {\n    if (city.isEmpty) throw new IllegalArgumentException(\"City name required\")\n    24.3\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_522","timestamp":1745436826983,"code":"object WeatherAlert2 {\n  def parseAlertLevel(level: String): Int = {\n    if (level == \"\") throw new RuntimeException(\"Empty level\")\n    else if (level == \"Severe\") 3\n    else if (level == \"Warning\") 2\n    else if (level == \"Info\") 1\n    else throw new RuntimeException(\"Unknown level\")\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_523","timestamp":1745436826983,"code":"object WeatherAlert3 {\n  def getHumidity(report: Map[String, String], key: String): Double = {\n    if (!report.contains(key)) throw new NoSuchElementException(s\"Missing key $key\")\n    report(key).toDouble\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_524","timestamp":1745436826983,"code":"object WeatherAlert4 {\n  def computeWindChill(temp: Double, windSpeed: Double): Double = {\n    if (windSpeed == 0) throw new ArithmeticException(\"Wind speed must not be zero\")\n    13.12 + 0.6215 * temp - 11.37 * Math.pow(windSpeed, 0.16)\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_525","timestamp":1745436826983,"code":"object WeatherAlert5 {\n  def sendNotification(userId: String, message: String): Unit = {\n    if (userId == null) throw new NullPointerException(\"User id is null\")\n    println(s\"Sending $message to $userId\")\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_526","timestamp":1745436826983,"code":"object WeatherAlert6 {\n  def validateAlertDuration(minutes: Int): Int = {\n    if (minutes <= 0) throw new IllegalArgumentException(\"Duration must be positive\")\n    minutes\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_527","timestamp":1745436826983,"code":"object WeatherAlert7 {\n  def fetchWeatherCode(code: String): String = {\n    if (code.length != 5) throw new Exception(\"Invalid weather code format\")\n    code.toUpperCase\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_528","timestamp":1745436826983,"code":"object WeatherAlert8 {\n  def getUserSubscription(users: Map[String, String], user: String): String = {\n    if (!users.contains(user)) throw new Exception(\"User not subscribed\")\n    users(user)\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_529","timestamp":1745436826983,"code":"object WeatherAlert9 {\n  def calculateRiskIndex(humidity: Double, temp: Double): Int = {\n    if (humidity < 0 || temp < -50) throw new Exception(\"Unrealistic input for risk calculation\")\n    (humidity + temp).toInt\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_530","timestamp":1745436826983,"code":"object WeatherAlert10 {\n  def alertMessagePrefix(level: String): String = {\n    if (level == null) throw new NullPointerException(\"Null alert level\")\n    level.toUpperCase + \": \"\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_531","timestamp":1745436826983,"code":"object WeatherAlert11 {\n  def ensureValidRecipient(recipient: String): Unit = {\n    if (recipient.trim.isEmpty) throw new Exception(\"Empty recipient\")\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_532","timestamp":1745436826983,"code":"object WeatherAlert12 {\n  def daysSinceLastStorm(days: Int): Int = {\n    if (days < 0) throw new IllegalArgumentException(\"Negative days not allowed\")\n    days\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_533","timestamp":1745436826983,"code":"object WeatherAlert13 {\n  def extractAlertId(alert: String): Int = {\n    try {\n      alert.split(\"-\")(1).toInt\n    } catch {\n      case _: Throwable => throw new RuntimeException(\"Could not parse alert id\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_534","timestamp":1745436826983,"code":"object WeatherAlert14 {\n  def getStationLocation(stations: Map[Int, String], id: Int): String = {\n    stations.getOrElse(id, throw new Exception(\"Station not found\"))\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_535","timestamp":1745436826983,"code":"object WeatherAlert15 {\n  def updateUserPreference(map: Map[String, String], key: String, value: String): Map[String, String] = {\n    if (key.isEmpty) throw new Exception(\"Preference key required\")\n    map + (key -> value)\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_536","timestamp":1745436826983,"code":"object WeatherAlert16 {\n  def checkSevereRainfall(mm: Double): Unit = {\n    if (mm > 500) throw new Exception(\"Extreme rainfall event detected\")\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_537","timestamp":1745436826983,"code":"object WeatherAlert17 {\n  def safeDivide(a: Int, b: Int): Int = {\n    if (b == 0) throw new ArithmeticException(\"Division by zero in alert calculation\")\n    a / b\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_538","timestamp":1745436826983,"code":"object WeatherAlert18 {\n  def messageForStatus(status: String): String = {\n    status match {\n      case \"active\" => \"Alert currently active.\"\n      case \"resolved\" => \"Alert has been resolved.\"\n      case _ => throw new Exception(\"Unknown status\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_539","timestamp":1745436826983,"code":"object WeatherAlert19 {\n  def alertTimes(times: List[Int], hour: Int): Int = {\n    if (!times.contains(hour)) throw new Exception(\"No alert scheduled at this hour\")\n    hour\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_540","timestamp":1745436826983,"code":"object WeatherAlert20 {\n  def setAlertType(alerts: collection.mutable.Map[Int, String], id: Int, tpe: String): Unit = {\n    if (alerts.contains(id)) throw new Exception(\"Alert id already used\")\n    alerts(id) = tpe\n  }\n}","category":"uses_throw","topicUsed":"Weather alert notification service"}
{"id":"uses_throw_541","timestamp":1745436843607,"code":"object FraudCheck1 {\n  def validateAmount(amount: Double): Double = {\n    if (amount <= 0) throw new IllegalArgumentException(\"Negative or zero amount is invalid\")\n    amount\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_542","timestamp":1745436843607,"code":"object FraudCheck2 {\n  def getCountryCode(country: String): Int = {\n    if (country.isEmpty) throw new RuntimeException(\"Country not provided\")\n    country.hashCode\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_543","timestamp":1745436843607,"code":"object FraudCheck3 {\n  def userStatus(userId: String): String = {\n    if (!userId.startsWith(\"U\")) throw new Exception(\"User ID invalid\")\n    \"active\"\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_544","timestamp":1745436843607,"code":"object FraudCheck4 {\n  def checkCurrency(currency: String): String = {\n    if (currency != \"USD\" && currency != \"EUR\") throw new Exception(\"Unsupported currency\")\n    currency\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_545","timestamp":1745436843607,"code":"object FraudCheck5 {\n  def calculateRiskScore(transactions: Int, chargebacks: Int): Double = {\n    if (transactions == 0) throw new ArithmeticException(\"Transactions cannot be zero\")\n    chargebacks.toDouble / transactions\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_546","timestamp":1745436843607,"code":"object FraudCheck6 {\n  def verifyEmail(email: String): Boolean = {\n    if (!email.contains(\"@\")) throw new Exception(\"Invalid email address\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_547","timestamp":1745436843607,"code":"object FraudCheck7 {\n  def checkBlacklistedCard(cardNumber: String): Boolean = {\n    if (cardNumber.startsWith(\"9999\")) throw new Exception(\"Blacklisted card number\")\n    false\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_548","timestamp":1745436843607,"code":"object FraudCheck8 {\n  def parseTransactionId(txn: String): Long = {\n    try {\n      txn.toLong\n    } catch {\n      case _: Exception => throw new NumberFormatException(\"Transaction ID is not numeric\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_549","timestamp":1745436843607,"code":"object FraudCheck9 {\n  def riskLevel(flag: Boolean): String = {\n    if (flag) \"high\"\n    else throw new RuntimeException(\"Risk level not determined\")\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_550","timestamp":1745436843607,"code":"object FraudCheck10 {\n  def validateIpAddress(ip: String): String = {\n    if (!ip.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) throw new IllegalArgumentException(\"Invalid IP\")\n    ip\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_551","timestamp":1745436843607,"code":"object FraudCheck11 {\n  def fetchPayment(paymentId: String): String = {\n    if (paymentId.length != 12) throw new Exception(\"Invalid payment ID\")\n    \"payment_data\"\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_552","timestamp":1745436843607,"code":"object FraudCheck12 {\n  def isRepeatTransaction(times: Int): Boolean = {\n    if (times > 3) throw new Exception(\"Suspicious repeat transaction\")\n    false\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_553","timestamp":1745436843607,"code":"object FraudCheck13 {\n  def requireMatchingNames(name1: String, name2: String): Boolean = {\n    if (name1.isEmpty || name2.isEmpty) throw new Exception(\"Names cannot be empty\")\n    if (name1 != name2) throw new Exception(\"Names do not match\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_554","timestamp":1745436843607,"code":"object FraudCheck14 {\n  def ensureNonWeekend(day: String): String = {\n    if (day == \"Saturday\" || day == \"Sunday\") throw new Exception(\"Transactions not allowed on weekends\")\n    day\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_555","timestamp":1745436843607,"code":"object FraudCheck15 {\n  def getCardType(card: String): String = {\n    card.headOption match {\n      case Some('4') => \"Visa\"\n      case Some('5') => \"MasterCard\"\n      case _ => throw new Exception(\"Unknown card type\")\n    }\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_556","timestamp":1745436843607,"code":"object FraudCheck16 {\n  def checkTransactionVelocity(hours: Int, txns: Int): Boolean = {\n    if (txns > 5 && hours < 1) throw new Exception(\"Excessive transactions in short period\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_557","timestamp":1745436843607,"code":"object FraudCheck17 {\n  def safeDivide(amount: Int, divisor: Int): Int = {\n    if (divisor == 0) throw new ArithmeticException(\"Division by zero\")\n    amount / divisor\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_558","timestamp":1745436843607,"code":"object FraudCheck18 {\n  def validateReference(ref: String): String = {\n    if (ref == null) throw new NullPointerException(\"Reference is null\")\n    ref\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_559","timestamp":1745436843607,"code":"object FraudCheck19 {\n  def getMerchantCategory(mcc: String): String = {\n    if (mcc.length != 4) throw new Exception(\"Invalid MCC\")\n    \"Retail\"\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_560","timestamp":1745436843607,"code":"object FraudCheck20 {\n  def checkAccountFrozen(status: String): String = {\n    if (status == \"frozen\") throw new Exception(\"Account is frozen\")\n    status\n  }\n}","category":"uses_throw","topicUsed":"Fraud detection in payments"}
{"id":"uses_throw_561","timestamp":1745436870195,"code":"def loadDICOM(file: String): Array[Byte] = if (file.endsWith(\".dcm\")) Array() else throw new IllegalArgumentException(\"Not a DICOM file\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_562","timestamp":1745436870195,"code":"def getSlice(volume: Array[Array[Array[Int]]], index: Int): Array[Array[Int]] = if (index >= 0 && index < volume.length) volume(index) else throw new IndexOutOfBoundsException(\"Invalid slice index\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_563","timestamp":1745436870195,"code":"def parseImageDimensions(meta: Map[String, String]): (Int, Int) = meta.get(\"Rows\").flatMap(r => meta.get(\"Columns\").map(c => (r.toInt, c.toInt))).getOrElse(throw new NoSuchElementException(\"Rows or Columns missing\"))","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_564","timestamp":1745436870195,"code":"def displayImage(img: Option[Array[Byte]]): Unit = img.map(arr => println(\"Displaying\")) .getOrElse(throw new RuntimeException(\"Image data missing\"))","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_565","timestamp":1745436870195,"code":"def getPixelValue(image: Array[Array[Int]], x: Int, y: Int): Int = if (x >= 0 && x < image.length && y >= 0 && y < image(0).length) image(x)(y) else throw new IllegalArgumentException(\"Invalid pixel coordinates\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_566","timestamp":1745436870195,"code":"def normalizePixelIntensities(values: Array[Int]): Array[Double] = {\n  val max = if (values.nonEmpty) values.max else throw new RuntimeException(\"Empty intensity array\")\n  values.map(v => v.toDouble / max)\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_567","timestamp":1745436870195,"code":"def contrastAdjust(img: Array[Array[Int]], factor: Double): Array[Array[Int]] = {\n  if (factor <= 0) throw new IllegalArgumentException(\"Contrast factor must be positive\")\n  img.map(row => row.map(v => (v * factor).toInt))\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_568","timestamp":1745436870195,"code":"case class MedicalImage(name: String, data: Array[Byte])\ndef findImage(images: Seq[MedicalImage], wanted: String): MedicalImage = {\n  images.find(_.name == wanted).getOrElse(throw new NoSuchElementException(\"Image not found\"))\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_569","timestamp":1745436870195,"code":"def setWindowLevel(level: Int): Unit = if (level < 0) throw new IllegalArgumentException(\"Window level cannot be negative\") else println(s\"Level: $level\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_570","timestamp":1745436870195,"code":"def saveAnnotatedImage(path: String, img: Array[Byte]): Unit = {\n  if (!path.endsWith(\".dcm\")) throw new RuntimeException(\"Path must have .dcm extension\")\n  println(\"Saving annotated image\")\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_571","timestamp":1745436870195,"code":"def computeMeanIntensity(pixels: Array[Int]): Double = {\n  if (pixels.isEmpty) throw new IllegalArgumentException(\"Pixel array is empty\")\n  pixels.sum.toDouble / pixels.length\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_572","timestamp":1745436870195,"code":"def rotateImage(img: Array[Array[Int]], angle: Int): Array[Array[Int]] = {\n  if (angle % 90 != 0) throw new IllegalArgumentException(\"Angle must be a multiple of 90\")\n  img.reverse\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_573","timestamp":1745436870195,"code":"def parseAnnotation(json: String): Map[String, Any] = {\n  if (!json.startsWith(\"{\")) throw new RuntimeException(\"Malformed annotation JSON\")\n  Map()\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_574","timestamp":1745436870195,"code":"def openImageViewer(images: Seq[Array[Byte]]): Array[Byte] = if (images.nonEmpty) images.head else throw new RuntimeException(\"No images to open\")","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_575","timestamp":1745436870195,"code":"def rescaleIntensity(value: Int, min: Int, max: Int): Int = {\n  if (max == min) throw new ArithmeticException(\"Min and max intensity are equal\")\n  (value - min) * 255 / (max - min)\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_576","timestamp":1745436870195,"code":"def findSeries(seriesList: Seq[String], id: String): String = seriesList.find(_ == id).getOrElse(throw new NoSuchElementException(\"Series not found\"))","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_577","timestamp":1745436870195,"code":"class SegmentationResult(val mask: Array[Array[Boolean]])\ndef getMaskValue(seg: SegmentationResult, x: Int, y: Int): Boolean = if (x < 0 || y < 0) throw new IllegalArgumentException(\"Invalid mask coordinates\") else seg.mask(x)(y)","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_578","timestamp":1745436870195,"code":"def decodePixelSpacing(meta: Map[String, String]): (Double, Double) = {\n  val spacing = meta.get(\"PixelSpacing\").getOrElse(throw new NoSuchElementException(\"PixelSpacing not found\"))\n  val arr = spacing.split(\"\\\\\\\\\")\n  if (arr.length == 2) (arr(0).toDouble, arr(1).toDouble) else throw new RuntimeException(\"PixelSpacing format\" )\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_579","timestamp":1745436870195,"code":"def flipImage(img: Array[Array[Int]], vertical: Boolean): Array[Array[Int]] = {\n  if (img.isEmpty) throw new IllegalArgumentException(\"Image is empty\")\n  if (vertical) img.reverse else img.map(_.reverse)\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_580","timestamp":1745436870195,"code":"def validateModality(mod: String): String = {\n  List(\"CT\", \"MR\").find(_ == mod).getOrElse(throw new RuntimeException(\"Unsupported modality\"))\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_581","timestamp":1745436870195,"code":"def loadPatientInfo(patientId: String): String = {\n  if (patientId.trim.isEmpty) throw new IllegalArgumentException(\"Empty patient id\")\n  s\"Loaded info for $patientId\"\n}","category":"uses_throw","topicUsed":"Medical imaging data viewer"}
{"id":"uses_throw_582","timestamp":1745436883265,"code":"case class PaymentLink(id: String, amount: Double)\ndef findPaymentLink(id: String): PaymentLink =\n  if (id.isEmpty) throw new IllegalArgumentException(\"Empty payment link id!\")\n  else PaymentLink(id, 20.0)","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_583","timestamp":1745436883265,"code":"def getPaymentLinkStatus(linkId: String): String = {\n  if (linkId != \"existingId\") throw new NoSuchElementException(\"Payment Link not found!\")\n  \"ACTIVE\"\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_584","timestamp":1745436883265,"code":"def calculateFee(amount: Double, percent: Double): Double = {\n  if (percent == 0) throw new ArithmeticException(\"Fee percentage cannot be zero!\")\n  amount * percent / 100\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_585","timestamp":1745436883265,"code":"def parseCurrency(code: String): String = {\n  if (code != \"USD\" && code != \"EUR\") throw new IllegalArgumentException(\"Unsupported currency!\")\n  code\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_586","timestamp":1745436883265,"code":"case class User(id: String)\ndef getUser(userId: String): User = {\n  if (userId == null) throw new NullPointerException(\"userId is null!\")\n  User(userId)\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_587","timestamp":1745436883265,"code":"def deletePaymentLink(linkId: String): Boolean = {\n  if (linkId == \"blocked\") throw new IllegalStateException(\"Link is protected and cannot be deleted!\")\n  true\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_588","timestamp":1745436883265,"code":"def requireNonNegative(amount: Double): Unit = {\n  if (amount < 0) throw new IllegalArgumentException(\"Amount must be non-negative!\")\n}\nrequireNonNegative(10.0)","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_589","timestamp":1745436883265,"code":"def paymentLinkUrl(domain: String, path: String): String = {\n  if (!domain.startsWith(\"https://\")) throw new IllegalArgumentException(\"Invalid domain!\")\n  domain + path\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_590","timestamp":1745436883265,"code":"case class PaymentRequest(amount: Double)\ndef processRequest(request: PaymentRequest): String = {\n  if (request.amount == 0) throw new RuntimeException(\"Zero amount not allowed!\")\n  \"REQUEST_PROCESSED\"\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_591","timestamp":1745436883265,"code":"def validatePayee(payee: Option[String]): String = {\n  if (payee.isEmpty) throw new IllegalArgumentException(\"Payee missing!\")\n  payee.get\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_592","timestamp":1745436883265,"code":"def updateLinkStatus(id: String, status: String): Unit = {\n  if (status != \"ACTIVE\" && status != \"INACTIVE\") throw new IllegalArgumentException(\"Invalid status!\")\n}\nupdateLinkStatus(\"id\", \"ACTIVE\")","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_593","timestamp":1745436883265,"code":"def parseAmount(value: String): Double = {\n  try value.toDouble\n  catch { case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid amount format!\") }\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_594","timestamp":1745436883265,"code":"def sendEmail(email: String): Boolean = {\n  if (!email.contains(\"@\")) throw new IllegalArgumentException(\"Invalid email address!\")\n  true\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_595","timestamp":1745436883265,"code":"def getPaymentAmount(link: PaymentLink): Double = {\n  if (link.amount < 1) throw new RuntimeException(\"Too low payment amount!\")\n  link.amount\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_596","timestamp":1745436883265,"code":"def extractId(input: String): String = {\n  if (input.trim.isEmpty) throw new Exception(\"ID is empty!\")\n  input.trim\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_597","timestamp":1745436883265,"code":"def confirmLink(link: PaymentLink): Boolean = {\n  if (link.id == \"pending\") throw new IllegalStateException(\"Link is pending, cannot confirm!\")\n  true\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_598","timestamp":1745436883265,"code":"def getOwnerName(linkId: String): String = {\n  if (linkId == \"anon\") throw new Exception(\"Owner anonymous!\")\n  \"TestOwner\"\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_599","timestamp":1745436883265,"code":"def verifySecret(secret: String): Boolean = {\n  if (secret.length < 8) throw new IllegalArgumentException(\"Secret too short!\")\n  true\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_600","timestamp":1745436883265,"code":"def safeDivide(total: Int, count: Int): Int = {\n  if (count == 0) throw new ArithmeticException(\"Divide by zero!\")\n  total / count\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_601","timestamp":1745436883265,"code":"def fetchLinkOrThrow(id: String): PaymentLink = {\n  val links = Map(\"A\" -> PaymentLink(\"A\", 44.0))\n  links.getOrElse(id, throw new NoSuchElementException(\"Link not found!\"))\n}","category":"uses_throw","topicUsed":"Wix backend service for managing Payment Links"}
{"id":"uses_throw_602","timestamp":1745436897144,"code":"def translateWord(word: String): String =\n  if (word.isEmpty) throw new IllegalArgumentException(\"Word cannot be empty!\")\n  else \"translated-\" + word\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_603","timestamp":1745436897144,"code":"def getSupportedLanguages(): List[String] =\n  val langs = List(\"en\", \"es\", \"fr\")\n  if (langs.isEmpty) throw new Exception(\"No supported languages!\")\n  langs\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_604","timestamp":1745436897144,"code":"def getLanguageCode(name: String): String =\n  name.toLowerCase match {\n    case \"english\" => \"en\"\n    case \"spanish\" => \"es\"\n    case _ => throw new NoSuchElementException(\"Language not found\")\n  }\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_605","timestamp":1745436897144,"code":"def validateTextLength(text: String): Unit =\n  if (text.length > 140)\n    throw new IllegalArgumentException(\"Text too long!\")\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_606","timestamp":1745436897144,"code":"def parseUserMessage(msg: String): (String, String) =\n  val arr = msg.split(\":\")\n  if (arr.length != 2) throw new Exception(\"Invalid message format\")\n  (arr(0), arr(1))\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_607","timestamp":1745436897144,"code":"def fetchTranslationApi(token: String): String =\n  if (token != \"api-token\") throw new SecurityException(\"Invalid API Token\")\n  \"Connected\"\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_608","timestamp":1745436897144,"code":"def getTranslationDirection(from: String, to: String): String =\n  if (from == to) throw new Exception(\"Source and target languages must differ\")\n  s\"$from-$to\"\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_609","timestamp":1745436897144,"code":"def lookupDictionary(word: String): String =\n  if (word == \"\") throw new Exception(\"Word is empty\")\n  \"Definition of \" + word\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_610","timestamp":1745436897144,"code":"def ensureUserIsLoggedIn(username: Option[String]): String =\n  username match {\n    case Some(u) => u\n    case None => throw new Exception(\"User not logged in\")\n  }\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_611","timestamp":1745436897144,"code":"def getChatHistory(user: String): List[String] =\n  if (user == \"\") throw new Exception(\"Invalid user!\")\n  List()\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_612","timestamp":1745436897144,"code":"def parseLanguageRequest(request: String): (String, String) =\n  val tokens = request.split(\"->\")\n  if (tokens.length != 2) throw new Exception(\"Bad request\")\n  (tokens(0).trim, tokens(1).trim)\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_613","timestamp":1745436897144,"code":"def sendChatResponse(response: String): Unit =\n  if (response == null) throw new NullPointerException(\"Null response!\")\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_614","timestamp":1745436897144,"code":"def getFirstWord(sentence: String): String =\n  val ws = sentence.split(\" \")\n  if (ws.isEmpty) throw new Exception(\"No words found\")\n  ws(0)\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_615","timestamp":1745436897144,"code":"def extractLanguageFromCommand(cmd: String): String =\n  if (!cmd.startsWith(\"/lang \")) throw new Exception(\"Command not recognized\")\n  cmd.stripPrefix(\"/lang \")\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_616","timestamp":1745436897144,"code":"def getUserTranslationRequest(userId: Int): String =\n  if (userId < 0) throw new IllegalArgumentException(\"Invalid userId\")\n  \"Translate this!\"\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_617","timestamp":1745436897144,"code":"def isValidLanguage(lang: String): Boolean =\n  if (lang.length != 2) throw new Exception(\"Language code must be 2 letters\")\n  true\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_618","timestamp":1745436897144,"code":"def deleteUserChat(user: String): Unit =\n  if (user == null) throw new NullPointerException(\"User is null\")\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_619","timestamp":1745436897144,"code":"def parseResponseCode(resp: String): Int =\n  try {\n    resp.toInt\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Response is not a number\")\n  }\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_620","timestamp":1745436897144,"code":"def uppercaseInput(text: String): String =\n  if (text eq null) throw new Exception(\"Input text is null\")\n  text.toUpperCase\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_621","timestamp":1745436897144,"code":"def getApiKey(user: String): String =\n  if (user != \"admin\") throw new SecurityException(\"Access denied\")\n  \"secret-api-key\"\n","category":"uses_throw","topicUsed":"Language translation chat bot"}
{"id":"uses_throw_622","timestamp":1745436911774,"code":"def energyConsumptionPerHour(totalEnergy: Int, hours: Int): Int = {\n  if (hours == 0) throw new ArithmeticException(\"Hours cannot be zero\")\n  totalEnergy / hours\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_623","timestamp":1745436911774,"code":"def getDeviceById(devices: Map[String, String], id: String): String = {\n  devices.get(id) match {\n    case Some(name) => name\n    case None => throw new NoSuchElementException(\"Device not found\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_624","timestamp":1745436911774,"code":"def parseEnergyValue(value: String): Int = {\n  try {\n    value.toInt\n  } catch {\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid energy value\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_625","timestamp":1745436911774,"code":"def reportEnergyForRoom(room: Option[String], energy: Int): String = {\n  room match {\n    case Some(r) => s\"$r energy: $energy\"\n    case None => throw new IllegalArgumentException(\"No room provided\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_626","timestamp":1745436911774,"code":"class User(val name: String, val email: String)\ndef getUserEmail(user: User): String = {\n  if (user.email.isEmpty) throw new RuntimeException(\"User email missing\")\n  user.email\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_627","timestamp":1745436911774,"code":"def averageConsumption(readings: List[Int]): Int = {\n  if (readings.isEmpty) throw new IllegalArgumentException(\"No readings\")\n  readings.sum / readings.size\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_628","timestamp":1745436911774,"code":"def dailyUsage(usages: Map[String, Int], day: String): Int = {\n  usages.get(day) match {\n    case Some(usage) => usage\n    case None => throw new Exception(\"Usage data not found for day\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_629","timestamp":1745436911774,"code":"def getStatus(online: Boolean): String = {\n  if (!online) throw new IllegalStateException(\"Dashboard is offline\")\n  \"Online\"\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_630","timestamp":1745436911774,"code":"def displayDeviceStatus(status: String): String = {\n  status.toLowerCase match {\n    case \"active\" => \"Device is active\"\n    case \"inactive\" => \"Device is inactive\"\n    case _ => throw new IllegalArgumentException(\"Unknown status\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_631","timestamp":1745436911774,"code":"def computeCost(energy: Int, rate: Double): Double = {\n  if (rate <= 0) throw new IllegalArgumentException(\"Invalid rate\")\n  energy * rate\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_632","timestamp":1745436911774,"code":"def maxUsage(usages: List[Int]): Int = {\n  usages.maxOption.getOrElse(throw new RuntimeException(\"No usage data\"))\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_633","timestamp":1745436911774,"code":"class Dashboard(configured: Boolean)\ndef runDashboard(d: Dashboard): String = {\n  if (!d.configured) throw new Exception(\"Dashboard not configured\")\n  \"Dashboard running\"\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_634","timestamp":1745436911774,"code":"def getReadingAt(readings: Array[Int], idx: Int): Int = {\n  if (idx < 0 || idx >= readings.length) throw new IndexOutOfBoundsException(\"Invalid index\")\n  readings(idx)\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_635","timestamp":1745436911774,"code":"def energyCategory(code: Int): String = {\n  code match {\n    case 1 => \"Low\"\n    case 2 => \"Medium\"\n    case 3 => \"High\"\n    case _ => throw new IllegalArgumentException(\"Invalid category code\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_636","timestamp":1745436911774,"code":"def removeDevice(devices: List[String], name: String): List[String] = {\n  if (!devices.contains(name)) throw new NoSuchElementException(\"No such device\")\n  devices.filterNot(_ == name)\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_637","timestamp":1745436911774,"code":"def updateThreshold(threshold: Double): Double = {\n  if (threshold < 0) throw new IllegalArgumentException(\"Threshold cannot be negative\")\n  threshold\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_638","timestamp":1745436911774,"code":"def calculateEfficiency(consumed: Double, produced: Double): Double = {\n  if (produced == 0) throw new ArithmeticException(\"Production is zero\")\n  consumed / produced\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_639","timestamp":1745436911774,"code":"def sensorValue(values: Seq[Double], idx: Int): Double = {\n  if (idx < 0 || idx >= values.length) throw new Exception(\"No such sensor reading\")\n  values(idx)\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_640","timestamp":1745436911774,"code":"def getChartType(chart: String): String = {\n  chart match {\n    case \"bar\" | \"line\" | \"pie\" => chart\n    case _ => throw new IllegalArgumentException(\"Unsupported chart type\")\n  }\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_641","timestamp":1745436911774,"code":"def verifyUserAccess(userRole: String): Boolean = {\n  if (userRole != \"admin\") throw new SecurityException(\"Access denied\")\n  true\n}","category":"uses_throw","topicUsed":"Energy consumption dashboard"}
{"id":"uses_throw_642","timestamp":1745436932730,"code":"object E1 {\n  def parseVoteCount(s: String): Int = {\n    if (s.forall(_.isDigit)) s.toInt\n    else throw new IllegalArgumentException(\"Invalid vote count string\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_643","timestamp":1745436932730,"code":"object E2 {\n  def getCandidateVotes(candidate: String, results: Map[String, Int]): Int = {\n    results.getOrElse(candidate, throw new NoSuchElementException(\"Candidate not found\"))\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_644","timestamp":1745436932730,"code":"object E3 {\n  class Ballot(val votes: List[String])\n  def getFirstVote(ballot: Ballot): String = {\n    if (ballot.votes.nonEmpty) ballot.votes.head\n    else throw new RuntimeException(\"Empty ballot\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_645","timestamp":1745436932730,"code":"object E4 {\n  def validateBallot(votes: List[String], candidates: Set[String]): Unit = {\n    if (!votes.forall(candidates.contains)) throw new Exception(\"Unknown candidate detected\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_646","timestamp":1745436932730,"code":"object E5 {\n  def computePercentage(votes: Int, total: Int): Double = {\n    if (total == 0) throw new ArithmeticException(\"Division by zero in percentage calculation\")\n    100.0 * votes / total\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_647","timestamp":1745436932730,"code":"object E6 {\n  def tally(votes: Seq[String]): Int = {\n    if (votes.isEmpty) throw new IllegalStateException(\"No votes to tally\")\n    votes.length\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_648","timestamp":1745436932730,"code":"object E7 {\n  def safeGet[T](seq: Seq[T], idx: Int): T = {\n    if (idx < 0 || idx >= seq.length) throw new IndexOutOfBoundsException(s\"Invalid index $idx\")\n    seq(idx)\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_649","timestamp":1745436932730,"code":"object E8 {\n  def majority(winner: String, votes: Map[String, Int]): Int = {\n    if (!votes.contains(winner)) throw new Exception(\"No such winner\")\n    votes(winner)\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_650","timestamp":1745436932730,"code":"object E9 {\n  def requireQuorum(totalVoters: Int, voted: Int): Unit = {\n    if (voted < totalVoters / 2) throw new Exception(\"Quorum not met\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_651","timestamp":1745436932730,"code":"object E10 {\n  def parseBoolVote(v: String): Boolean = {\n    if (v == \"yes\") true\n    else if (v == \"no\") false\n    else throw new IllegalArgumentException(\"Invalid vote value\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_652","timestamp":1745436932730,"code":"object E11 {\n  class Vote(val candidate: String, val value: Int)\n  def getVoteValue(vote: Vote): Int = {\n    if (vote.value < 0) throw new Exception(\"Negative vote value\")\n    vote.value\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_653","timestamp":1745436932730,"code":"object E12 {\n  def calculateWinner(candidates: List[String], votes: Map[String, Int]): String = {\n    if (candidates.isEmpty) throw new Exception(\"No candidates\")\n    candidates.maxBy(votes.getOrElse(_, throw new Exception(\"Candidate missing in votes map\")))\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_654","timestamp":1745436932730,"code":"object E13 {\n  def divideCounts(a: Int, b: Int): Int = {\n    if (b == 0) throw new ArithmeticException(\"Divide by zero in voting count\")\n    a / b\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_655","timestamp":1745436932730,"code":"object E14 {\n  def removeBallot(ballots: List[String], ballot: String): List[String] = {\n    if (!ballots.contains(ballot)) throw new NoSuchElementException(\"Ballot not found\")\n    ballots.filterNot(_ == ballot)\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_656","timestamp":1745436932730,"code":"object E15 {\n  class VotingSession(val ballots: Seq[String])\n  def getLastBallot(session: VotingSession): String = {\n    if (session.ballots.isEmpty) throw new Exception(\"No ballots submitted\")\n    session.ballots.last\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_657","timestamp":1745436932730,"code":"object E16 {\n  def checkUniqueVotes(votes: Seq[String]): Unit = {\n    if (votes.distinct.length != votes.length) throw new Exception(\"Duplicate votes detected\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_658","timestamp":1745436932730,"code":"object E17 {\n  def readVote(voteLine: String): (String, Int) = {\n    val parts = voteLine.split(\":\")\n    if (parts.length != 2) throw new Exception(\"Malformed vote line\")\n    (parts(0), parts(1).toInt)\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_659","timestamp":1745436932730,"code":"object E18 {\n  def transferVotes(votes: Int, from: String, to: String): String = {\n    if (votes < 0) throw new Exception(\"Cannot transfer negative votes\")\n    s\"Transferred $votes votes from $from to $to\"\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_660","timestamp":1745436932730,"code":"object E19 {\n  def assertValidVotes(count: Int): Unit = {\n    if (count < 0) throw new Exception(\"Vote count cannot be negative\")\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_661","timestamp":1745436932730,"code":"object E20 {\n  def recountBallots(ballots: List[String]): Int = {\n    if (ballots == null) throw new NullPointerException(\"Ballot list is null\")\n    ballots.length\n  }\n}","category":"uses_throw","topicUsed":"Electronic voting tallying"}
{"id":"uses_throw_662","timestamp":1745436963650,"code":"def findBookByISBN(isbn: String): Book =\n  if (isbn.isEmpty) throw new IllegalArgumentException(\"ISBN cannot be empty\")\n  else catalog.find(_.isbn == isbn).getOrElse(throw new NoSuchElementException(\"Not found\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_663","timestamp":1745436963650,"code":"def parseQuery(query: String): Query =\n  if (query == null) throw new NullPointerException(\"Query string is null\")\n  else new Query(query)\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_664","timestamp":1745436963650,"code":"def getUserById(id: Int): User =\n  users.get(id) match {\n    case Some(user) => user\n    case None => throw new RuntimeException(\"User not found\")\n  }\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_665","timestamp":1745436963650,"code":"def searchByTitle(title: String): Book =\n  val book = catalog.find(_.title == title)\n  if (book.isEmpty) throw new Exception(\"Book with given title not found\")\n  book.get\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_666","timestamp":1745436963650,"code":"def booksByAuthor(author: String): List[Book] =\n  val result = catalog.filter(_.author == author)\n  if (result.isEmpty) throw new Exception(\"No books by this author\")\n  result\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_667","timestamp":1745436963650,"code":"def checkLibraryOpen(day: String): Boolean =\n  if (day.isEmpty) throw new IllegalArgumentException(\"Day is not specified\")\n  else if (day == \"Sunday\") throw new Exception(\"Library closed on Sunday\")\n  else true\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_668","timestamp":1745436963650,"code":"def getCopyNumber(bookId: Int): Int =\n  catalogMap.get(bookId) match {\n    case Some(book) => book.copies\n    case None => throw new NoSuchElementException(\"Book not found\")\n  }\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_669","timestamp":1745436963650,"code":"def validateSearchTerm(term: String): String =\n  if (term.trim.length < 3) throw new IllegalArgumentException(\"Search term too short\")\n  else term.trim\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_670","timestamp":1745436963650,"code":"def getCatalogSection(section: String): CatalogSection =\n  sectionMap.get(section) match {\n    case Some(sec) => sec\n    case None => throw new Exception(\"Section does not exist\")\n  }\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_671","timestamp":1745436963650,"code":"def pageResults(results: List[Book], page: Int): List[Book] =\n  if (page <= 0) throw new IllegalArgumentException(\"Negative or zero page number\")\n  else results.slice((page - 1) * 10, page * 10)\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_672","timestamp":1745436963650,"code":"def isbnToInt(isbn: String): Int =\n  try isbn.toInt\n  catch {\n    case _: NumberFormatException => throw new Exception(\"Invalid ISBN format\")\n  }\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_673","timestamp":1745436963650,"code":"def keywordSearch(keywords: List[String]): List[Book] =\n  if (keywords.isEmpty) throw new IllegalArgumentException(\"No keywords provided\")\n  catalog.filter(book => keywords.exists(book.keywords.contains))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_674","timestamp":1745436963650,"code":"def getPublicationYear(book: Book): Int =\n  if (book.publicationYear <= 0) throw new Exception(\"Invalid publication year\")\n  book.publicationYear\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_675","timestamp":1745436963650,"code":"def login(username: String, password: String): User =\n  if (username == \"\" || password == \"\") throw new IllegalArgumentException(\"Missing credentials\")\n  else if (!users.exists(u => u.username == username && u.password == password))\n    throw new Exception(\"Authentication failed\")\n  users.find(u => u.username == username && u.password == password).get\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_676","timestamp":1745436963650,"code":"def reserveBook(userId: Int, bookId: Int): Reservation =\n  if (!users.exists(_.id == userId)) throw new Exception(\"User does not exist\")\n  if (!catalog.exists(_.id == bookId)) throw new Exception(\"Book does not exist\")\n  new Reservation(userId, bookId)\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_677","timestamp":1745436963650,"code":"def findRecommendation(user: User): Book =\n  val recommended = recommendations.get(user.id)\n  if (recommended.isEmpty) throw new Exception(\"No recommendations available\")\n  recommended.get\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_678","timestamp":1745436963650,"code":"def deweyToInt(code: String): Int =\n  try code.toInt\n  catch {\n    case _: Throwable => throw new Exception(\"Non-numeric Dewey code\")\n  }\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_679","timestamp":1745436963650,"code":"def ensureBookAvailable(book: Book): Unit =\n  if (book.copies < 1) throw new Exception(\"Book is not available\")\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_680","timestamp":1745436963650,"code":"def getBookOrThrow(id: Int): Book =\n  catalogById.get(id).getOrElse(throw new Exception(\"Book ID not found\"))\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_681","timestamp":1745436963650,"code":"def lastSearchResult(results: List[Book]): Book =\n  if (results.isEmpty) throw new Exception(\"No search results\")\n  else results.last\n","category":"uses_throw","topicUsed":"Digital library catalog search"}
{"id":"uses_throw_682","timestamp":1745436983974,"code":"def validateQrCode(qr: String): String =\n  if (qr.isEmpty) throw new IllegalArgumentException(\"QR code is empty\")\n  else qr.toUpperCase\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_683","timestamp":1745436983974,"code":"class Ticket(val code: String)\ndef getTicketFromCode(qr: String): Ticket =\n  if (!qr.startsWith(\"EVT\")) throw new Exception(\"Invalid QR prefix\")\n  else new Ticket(qr)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_684","timestamp":1745436983974,"code":"def ticketId(qr: String): Int =\n  try qr.drop(3).toInt\n  catch { case _: NumberFormatException => throw new RuntimeException(\"Ticket ID parse error\") }\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_685","timestamp":1745436983974,"code":"def requireValidFormat(qr: String): Unit =\n  if (!qr.matches(\"EVT-\\\\d{5}\")) throw new IllegalArgumentException(\"Malformed QR\")\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_686","timestamp":1745436983974,"code":"def scanQr(qr: Option[String]): String =\n  qr.getOrElse(throw new NoSuchElementException(\"No QR provided\"))\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_687","timestamp":1745436983974,"code":"def validateAndUse(qr: String): Boolean =\n  if (qr == null) throw new NullPointerException(\"Null QR sent\")\n  else qr.length % 2 == 0\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_688","timestamp":1745436983974,"code":"def checkEntry(ticket: Ticket): String =\n  if (ticket.code.endsWith(\"0\")) throw new Exception(\"Ticket expired\")\n  else \"Entry granted\"\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_689","timestamp":1745436983974,"code":"def fetchTicket(qr: String): String =\n  if (qr.size < 8) throw new Exception(\"QR code too short\")\n  else \"Ticket found\"\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_690","timestamp":1745436983974,"code":"def index(qr: String, idx: Int): Char =\n  if (idx < 0 || idx >= qr.length) throw new IndexOutOfBoundsException(\"Index out of bounds\")\n  else qr.charAt(idx)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_691","timestamp":1745436983974,"code":"def decodeBase64Qr(qr: String): Array[Byte] =\n  if (!qr.matches(\"[A-Za-z0-9+/=]+\")) throw new Exception(\"Non-base64 QR\")\n  else java.util.Base64.getDecoder.decode(qr)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_692","timestamp":1745436983974,"code":"def getEventId(qr: String): String =\n  val split = qr.split(\"-\")\n  if (split.length < 2) throw new Exception(\"QR missing event ID\")\n  else split(1)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_693","timestamp":1745436983974,"code":"def validateIssuer(qr: String, issuer: String): String =\n  if (!qr.contains(issuer)) throw new Exception(\"Issuer mismatch\")\n  else \"QR valid for issuer\"\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_694","timestamp":1745436983974,"code":"def parseDateFromQr(qr: String): String =\n  val parts = qr.split(\":\")\n  if (parts.length < 2) throw new RuntimeException(\"No event date in QR\")\n  else parts(1)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_695","timestamp":1745436983974,"code":"def verifyTicket(qr: String): Unit =\n  if (qr.contains(\"FAKE\")) throw new Exception(\"Fake ticket detected\")\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_696","timestamp":1745436983974,"code":"def findUserId(qr: String): Int =\n  val idx = qr.indexOf(\"U-\")\n  if (idx == -1) throw new NoSuchElementException(\"User ID missing\")\n  else qr.substring(idx + 2).takeWhile(_.isDigit).toInt\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_697","timestamp":1745436983974,"code":"def isValidEvent(qr: String): Boolean =\n  if (!qr.startsWith(\"2024\")) throw new IllegalArgumentException(\"Not a 2024 event code\")\n  else true\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_698","timestamp":1745436983974,"code":"def extractSection(qr: String): String =\n  val p = qr.split=\"#\"\n  if (p.length < 2) throw new Exception(\"Section missing in QR\")\n  else p(1)\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_699","timestamp":1745436983974,"code":"def getSeat(qr: String): Int =\n  val seatMatch = \"SEAT(\\\\d+)\".r.findFirstMatchIn(qr)\n  seatMatch.map(_.group(1).toInt).getOrElse(throw new Exception(\"Seat number not found\"))\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_700","timestamp":1745436983974,"code":"def discount(qr: String): Double =\n  val discMatch = \"DISC(\\\\d+)\".r.findFirstMatchIn(qr)\n  if (discMatch.isEmpty) throw new Exception(\"No discount in QR\")\n  discMatch.get.group(1).toDouble / 10\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_701","timestamp":1745436983974,"code":"def scanTime(qr: String): Long =\n  val idx = qr.indexOf(\"T=\")\n  if (idx == -1) throw new Exception(\"No scan time in QR\")\n  val numStr = qr.substring(idx + 2).takeWhile(_.isDigit)\n  if (numStr.isEmpty) throw new Exception(\"Malformed scan time\")\n  numStr.toLong\n","category":"uses_throw","topicUsed":"Event ticket QR validation"}
{"id":"uses_throw_702","timestamp":1745437006557,"code":"def computePathCost(dist: Double, wind: Double): Double =\n  if (dist < 0 || wind < 0) throw new IllegalArgumentException(\"Negative values\")\n  else dist * (1 + wind/10)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_703","timestamp":1745437006557,"code":"def findLandingZone(zones: List[String]): String =\n  if (zones.isEmpty) throw new NoSuchElementException(\"No zones available\")\n  zones.head","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_704","timestamp":1745437006557,"code":"def allocateDrone(drones: Seq[String], idx: Int): String =\n  if (idx < 0 || idx >= drones.length) throw new IndexOutOfBoundsException(\"Invalid index\")\n  drones(idx)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_705","timestamp":1745437006557,"code":"def scheduleDelivery(timeSlots: List[Int]): Int =\n  if (timeSlots.isEmpty) throw new RuntimeException(\"No available slots\")\n  timeSlots.min","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_706","timestamp":1745437006557,"code":"def energyRequired(distance: Double, payload: Double): Double =\n  if (payload == 0) throw new ArithmeticException(\"Payload is zero\")\n  distance / payload","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_707","timestamp":1745437006557,"code":"def getWaypoint(path: Vector[(Int, Int)], n: Int): (Int, Int) =\n  if (n < 0 || n >= path.length) throw new NoSuchElementException(\"Invalid waypoint index\")\n  path(n)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_708","timestamp":1745437006557,"code":"def updateBattery(battery: Double, used: Double): Double =\n  if (used > battery) throw new IllegalStateException(\"Insufficient battery\")\n  battery - used","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_709","timestamp":1745437006557,"code":"def parseCoordinates(coord: String): (Double, Double) =\n  val parts = coord.split(\",\")\n  if (parts.length != 2) throw new IllegalArgumentException(\"Invalid coordinate format\")\n  (parts(0).toDouble, parts(1).toDouble)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_710","timestamp":1745437006557,"code":"def selectOptimalRoute(routes: List[List[String]]): List[String] =\n  if (routes.forall(_.isEmpty)) throw new RuntimeException(\"All routes empty\")\n  routes.maxBy(_.length)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_711","timestamp":1745437006557,"code":"def safeDivide(a: Int, b: Int): Int =\n  if (b == 0) throw new ArithmeticException(\"Division by zero\")\n  a / b","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_712","timestamp":1745437006557,"code":"def checkHeight(height: Double): String =\n  if (height > 200) throw new IllegalArgumentException(\"Height exceeds limit\")\n  \"Height OK\"","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_713","timestamp":1745437006557,"code":"def refuelIfNeeded(level: Int): Int =\n  if (level < 10) throw new RuntimeException(\"Battery critically low\")\n  level","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_714","timestamp":1745437006557,"code":"def estimateArrival(speed: Double, distance: Double): Double =\n  if (speed <= 0) throw new IllegalArgumentException(\"Invalid speed\")\n  distance / speed","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_715","timestamp":1745437006557,"code":"def getDroneStatus(status: Option[String]): String =\n  if (status.isEmpty) throw new RuntimeException(\"No status found\")\n  status.get","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_716","timestamp":1745437006557,"code":"def calculateTurns(pathLength: Int, turnInterval: Int): Int =\n  if (turnInterval == 0) throw new IllegalArgumentException(\"Zero turn interval\")\n  pathLength / turnInterval","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_717","timestamp":1745437006557,"code":"def assignPackage(packages: Map[Int, String], pkgId: Int): String =\n  if (!packages.contains(pkgId)) throw new NoSuchElementException(\"Package not found\")\n  packages(pkgId)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_718","timestamp":1745437006557,"code":"def reserveAltitude(reserved: Set[Double], alt: Double): Double =\n  if (reserved.contains(alt)) throw new IllegalArgumentException(\"Altitude overlaps\")\n  alt","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_719","timestamp":1745437006557,"code":"def removeObstacle(obstacles: List[String], obs: String): List[String] =\n  if (!obstacles.contains(obs)) throw new NoSuchElementException(\"Obstacle not found\")\n  obstacles.filterNot(_ == obs)","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_720","timestamp":1745437006557,"code":"def getDepot(depots: Seq[String]): String =\n  if (depots.isEmpty) throw new RuntimeException(\"No depots defined\")\n  depots.head","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_721","timestamp":1745437006557,"code":"def computeTurnAngle(angle: Double): Double =\n  if (angle.isNaN) throw new IllegalArgumentException(\"Angle is NaN\")\n  angle","category":"uses_throw","topicUsed":"Drone delivery path optimization"}
{"id":"uses_throw_722","timestamp":1745437027872,"code":"object ClaimAmountCalculator {\n  def calculateClaimAmount(total: Double, deductible: Double): Double = {\n    if (deductible <= 0) throw new IllegalArgumentException(\"Deductible must be positive!\")\n    total - deductible\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_723","timestamp":1745437027872,"code":"object ClaimTypeVerifier {\n  def verifyType(claimType: String): String = {\n    if (claimType == \"\") throw new RuntimeException(\"Claim type cannot be empty\")\n    claimType.toUpperCase\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_724","timestamp":1745437027872,"code":"object PolicyChecker {\n  def checkPolicy(id: Int): Boolean = {\n    if (id <= 0) throw new Exception(\"Invalid policy ID\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_725","timestamp":1745437027872,"code":"object UserAuthenticator {\n  def authenticateUser(username: String, password: String): String = {\n    if (username != \"admin\") throw new IllegalAccessException(\"User not found\")\n    \"Token123\"\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_726","timestamp":1745437027872,"code":"object ClaimSubmission {\n  def submit(claimId: String): String = {\n    if (claimId.isEmpty) throw new IllegalArgumentException(\"Claim ID is required\")\n    \"Claim Submitted\"\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_727","timestamp":1745437027872,"code":"object ItemValidator {\n  def validateItem(itemCode: Option[String]): String = {\n    if (itemCode.isEmpty) throw new NoSuchElementException(\"Invalid item code\")\n    itemCode.get\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_728","timestamp":1745437027872,"code":"object PaymentProcessor {\n  def processPayment(amount: Double): String = {\n    if (amount < 0) throw new Exception(\"Negative payment not allowed\")\n    \"Payment processed\"\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_729","timestamp":1745437027872,"code":"object DocumentationChecker {\n  def checkDocs(docs: List[String]): String = {\n    if (docs.isEmpty) throw new IllegalStateException(\"No documents uploaded\")\n    \"Documentation complete\"\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_730","timestamp":1745437027872,"code":"object ClaimDateValidator {\n  def validateDate(submitDate: String): Boolean = {\n    if (submitDate == null) throw new NullPointerException(\"Submit date cannot be null\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_731","timestamp":1745437027872,"code":"object AmountDivider {\n  def divideAmount(amount: Int, divisor: Int): Int = {\n    if (divisor == 0) throw new ArithmeticException(\"Cannot divide by zero\")\n    amount / divisor\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_732","timestamp":1745437027872,"code":"object ClaimantsChecker {\n  def getClaimant(claimants: List[String], n: Int): String = {\n    if (n >= claimants.length) throw new IndexOutOfBoundsException(\"Claimant index out of bounds\")\n    claimants(n)\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_733","timestamp":1745437027872,"code":"object EmailChecker {\n  def checkEmail(email: String): String = {\n    if (!email.contains(\"@\")) throw new IllegalArgumentException(\"Invalid email format\")\n    email\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_734","timestamp":1745437027872,"code":"object ReferenceNumberValidator {\n  def validateReference(ref: String): Int = {\n    if (ref.length != 8) throw new NumberFormatException(\"Reference must be 8 characters\")\n    ref.toInt\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_735","timestamp":1745437027872,"code":"object InsuranceAmountRetriever {\n  def retrieveAmount(payoutAmounts: Map[Int, Double], policyId: Int): Double = {\n    if (!payoutAmounts.contains(policyId)) throw new NoSuchElementException(\"Policy not found\")\n    payoutAmounts(policyId)\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_736","timestamp":1745437027872,"code":"object RiskCategoryChecker {\n  def getRisk(category: String): String = {\n    if (Set(\"Low\", \"Medium\", \"High\").contains(category)) category\n    else throw new Exception(\"Unknown risk category\")\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_737","timestamp":1745437027872,"code":"object FileUploadValidator {\n  def validateUpload(fileName: String): Boolean = {\n    if (fileName.endsWith(\".exe\")) throw new Exception(\"Executable files not allowed\")\n    true\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_738","timestamp":1745437027872,"code":"object PolicyActiveChecker {\n  def checkIfActive(isActive: Boolean): Unit = {\n    if (!isActive) throw new Exception(\"Policy not active\")\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_739","timestamp":1745437027872,"code":"object BenefitLimitChecker {\n  def checkLimit(used: Double, limit: Double): Double = {\n    if (used > limit) throw new Exception(\"Benefit limit exceeded\")\n    limit - used\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_740","timestamp":1745437027872,"code":"object AddressVerifier {\n  def verifyAddress(address: String): String = {\n    if (address.trim == \"\") throw new Exception(\"Address required\")\n    address\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_741","timestamp":1745437027872,"code":"object AgentLookup {\n  def findAgent(agents: List[String], name: String): Int = {\n    val idx = agents.indexOf(name)\n    if (idx == -1) throw new NoSuchElementException(\"Agent not found\")\n    idx\n  }\n}","category":"uses_throw","topicUsed":"Insurance claim submission portal"}
{"id":"uses_throw_742","timestamp":1745437038575,"code":"def averageScore(scores: List[Int]): Double = {\n  if (scores.isEmpty) throw new IllegalArgumentException(\"No scores to average\")\n  scores.sum.toDouble / scores.size\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_743","timestamp":1745437038575,"code":"def getStudentById(id: String, students: Map[String, String]): String = {\n  students.getOrElse(id, throw new NoSuchElementException(\"Student not found\"))\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_744","timestamp":1745437038575,"code":"def calculateGrade(score: Int): String = {\n  if (score < 0 || score > 100) throw new IllegalArgumentException(\"Invalid score\")\n  if (score >= 90) \"A\"\n  else if (score >= 80) \"B\"\n  else if (score >= 70) \"C\"\n  else if (score >= 60) \"D\"\n  else \"F\"\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_745","timestamp":1745437038575,"code":"def attendancePercentage(totalClasses: Int, attended: Int): Double = {\n  if (totalClasses == 0) throw new ArithmeticException(\"No classes held\")\n  attended.toDouble / totalClasses * 100\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_746","timestamp":1745437038575,"code":"def timeSpentOnAssignment(times: List[Int]): Int = {\n  if(times.forall(_ == 0)) throw new IllegalArgumentException(\"No participation detected\")\n  times.sum\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_747","timestamp":1745437038575,"code":"def studentProgress(progress: Option[Double]): Double = {\n  progress.getOrElse(throw new Exception(\"No progress data\"))\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_748","timestamp":1745437038575,"code":"def fetchCourse(courseId: Int, courses: Map[Int,String]): String = {\n  courses.get(courseId) match {\n    case Some(c) => c\n    case None => throw new Exception(\"Course not found\")\n  }\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_749","timestamp":1745437038575,"code":"def assignmentsLeft(completed: Int, total: Int): Int = {\n  if (completed > total) throw new RuntimeException(\"Completed exceeds total assignments!\")\n  total - completed\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_750","timestamp":1745437038575,"code":"def engagementLevel(logins: Int): String = {\n  if (logins < 0) throw new IllegalArgumentException(\"Negative logins not possible\")\n  if (logins > 10) \"High\" else \"Low\"\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_751","timestamp":1745437038575,"code":"def fetchQuizScore(quizId: String, data: Map[String,Int]): Int = {\n  data.get(quizId).getOrElse(throw new Exception(\"Quiz not found\"))\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_752","timestamp":1745437038575,"code":"def calculateFinalGrade(grades: List[Int]): Double = {\n  if (grades.isEmpty) throw new Exception(\"No grades available\")\n  grades.sum.toDouble / grades.size\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_753","timestamp":1745437038575,"code":"def isPassed(score: Int, passing: Int): Boolean = {\n  if (score < 0) throw new IllegalArgumentException(\"Negative score!\")\n  score >= passing\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_754","timestamp":1745437038575,"code":"def moduleCompletion(status: String): Boolean = {\n  if (status != \"completed\" && status != \"incomplete\") throw new RuntimeException(\"Unknown module status\")\n  status == \"completed\"\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_755","timestamp":1745437038575,"code":"def fetchInstructor(name: String, instructors: List[String]): String = {\n  if (!instructors.contains(name)) throw new Exception(\"Instructor not found\")\n  name\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_756","timestamp":1745437038575,"code":"def analyzeInteraction(interactions: Int): String = {\n  if (interactions < 0) throw new IllegalArgumentException(\"Invalid interaction count\")\n  if (interactions > 20) \"Very Active\" else \"Less Active\"\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_757","timestamp":1745437038575,"code":"def questionAttempts(attempts: Int): Int = {\n  if (attempts > 3) throw new Exception(\"Maximum attempts exceeded\")\n  attempts\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_758","timestamp":1745437038575,"code":"def getAverageQuizTime(times: Seq[Int]): Double = {\n  if (times.isEmpty) throw new Exception(\"No quiz time data\")\n  times.sum.toDouble / times.size\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_759","timestamp":1745437038575,"code":"def retrieveLearningGoal(goalId: String, goals: Map[String, String]): String = {\n  goals.getOrElse(goalId, throw new NoSuchElementException(\"Goal not found\"))\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_760","timestamp":1745437038575,"code":"def peerReviewScore(scores: Seq[Int]): Int = {\n  if (scores.isEmpty) throw new Exception(\"No peer review scores\")\n  scores.sum / scores.size\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_761","timestamp":1745437038575,"code":"def submitAssignment(assignmentId: String, submitted: List[String]): Boolean = {\n  if (!submitted.contains(assignmentId)) throw new Exception(\"Assignment not submitted\")\n  true\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_762","timestamp":1745437038575,"code":"def validateSessionDuration(duration: Int): Unit = {\n  if (duration < 5) throw new IllegalArgumentException(\"Session too short\")\n}","category":"uses_throw","topicUsed":"Education learning analytics"}
{"id":"uses_throw_763","timestamp":1745437052171,"code":"def getRecipeById(id: Int): String =\n  if (id < 0) throw new IllegalArgumentException(\"Negative id\")\n  else \"Pizza\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_764","timestamp":1745437052171,"code":"def recommendRecipe(userId: String): String =\n  if (userId.isEmpty) throw new RuntimeException(\"Empty userId\")\n  else \"Pasta Carbonara\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_765","timestamp":1745437052171,"code":"def getUserPreferences(user: String): List[String] =\n  if (user == null) throw new NullPointerException(\"user is null\")\n  else List(\"vegan\", \"italian\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_766","timestamp":1745437052171,"code":"case class Recipe(name: String, ingredients: List[String])\ndef findRecipe(ingredient: String): Recipe =\n  if (!ingredient.forall(_.isLetter)) throw new Exception(\"Invalid ingredient\")\n  else Recipe(\"Salad\", List(ingredient))","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_767","timestamp":1745437052171,"code":"def calculateScore(likes: Int, dislikes: Int): Double =\n  if (dislikes == 0) throw new ArithmeticException(\"Division by zero\")\n  else likes.toDouble / dislikes","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_768","timestamp":1745437052171,"code":"def getFavoriteCuisine(userPrefs: List[String]): String =\n  if (userPrefs.isEmpty) throw new NoSuchElementException(\"No preferences found\")\n  else userPrefs.head","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_769","timestamp":1745437052171,"code":"def suggestHealthyOption(calories: Int): String =\n  if (calories < 0) throw new IllegalArgumentException(\"Negative calories\")\n  else if (calories < 300) \"Salad\"\n  else \"Chicken Wrap\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_770","timestamp":1745437052171,"code":"def fetchRecommendedRecipes(userId: Int): List[String] =\n  if (userId == 0) throw new Exception(\"User not found\")\n  else List(\"Tacos\", \"Ramen\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_771","timestamp":1745437052171,"code":"def getIngredientAmount(recipe: String, ingredient: String): Int =\n  if (recipe.isEmpty || ingredient.isEmpty) throw new IllegalArgumentException(\"Empty string input\")\n  else 2","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_772","timestamp":1745437052171,"code":"def logUserActivity(user: String, activity: String): Unit =\n  if (activity == null) throw new RuntimeException(\"Activity required\")\n  println(s\"User $user did $activity\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_773","timestamp":1745437052171,"code":"def parseRecipeJson(json: String): Recipe =\n  if (!json.startsWith(\"{\")) throw new Exception(\"Invalid JSON format\")\n  Recipe(\"Soup\", List(\"water\"))","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_774","timestamp":1745437052171,"code":"def recommendForDiet(dietType: String): String =\n  if (dietType != \"keto\" && dietType != \"vegan\") throw new Exception(\"Unknown diet type\")\n  else \"Grilled Vegetables\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_775","timestamp":1745437052171,"code":"def rateRecipe(rating: Int): String =\n  if (rating < 1 || rating > 5) throw new IllegalArgumentException(\"Rating must be 1-5\")\n  else \"Thank you for rating!\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_776","timestamp":1745437052171,"code":"def suggestNextMeal(time: String): String =\n  if (time != \"breakfast\" && time != \"lunch\" && time != \"dinner\") throw new Exception(\"Invalid meal time\")\n  else \"Sandwich\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_777","timestamp":1745437052171,"code":"def getAllergyInfo(user: String): String =\n  if (user == \"\") throw new RuntimeException(\"User is required\")\n  else \"No allergies reported\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_778","timestamp":1745437052171,"code":"def personalizeShoppingList(userPrefs: List[String]): List[String] =\n  if (userPrefs.contains(null)) throw new Exception(\"Null preference detected\")\n  else List(\"Tomatoes\", \"Rice\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_779","timestamp":1745437052171,"code":"def findRelatedRecipes(recipe: Recipe): List[Recipe] =\n  if (recipe == null) throw new NullPointerException(\"Recipe is null\")\n  else List(Recipe(\"Burger\", List(\"bun\", \"patty\")))","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_780","timestamp":1745437052171,"code":"def recommendForAllergies(allergies: Set[String]): String =\n  if (allergies.contains(\"peanut\")) throw new Exception(\"Cannot recommend due to peanut allergy\")\n  else \"Trail Mix\"","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_781","timestamp":1745437052171,"code":"def suggestPortionSize(age: Int): Int =\n  if (age <= 0) throw new IllegalArgumentException(\"Invalid age\")\n  else if (age < 12) 1 else 2","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_782","timestamp":1745437052171,"code":"def checkIngredientStock(ingredient: String, stock: Int): Unit =\n  if (stock < 0) throw new RuntimeException(\"Stock cannot be negative\")\n  println(s\"Stock for $ingredient: $stock\")","category":"uses_throw","topicUsed":"Personalized recipe recommender"}
{"id":"uses_throw_783","timestamp":1745437064617,"code":"def parseDonationAmount(input: String): Int =\n  if (input.forall(_.isDigit)) input.toInt\n  else throw new IllegalArgumentException(\"Invalid amount format\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_784","timestamp":1745437064617,"code":"def getDonorById(id: Long): String =\n  if (id > 0) s\"Donor-$id\"\n  else throw new NoSuchElementException(\"Donor not found\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_785","timestamp":1745437064617,"code":"class DonationForm(val name: String, val amount: Double)\ndef validateForm(form: DonationForm): Unit =\n  if (form.name.isEmpty || form.amount <= 0) throw new Exception(\"Invalid form data\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_786","timestamp":1745437064617,"code":"def assignGiftAid(donation: Double): Double =\n  if (donation <= 0) throw new RuntimeException(\"Donation must be positive\")\n  else donation * 1.25\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_787","timestamp":1745437064617,"code":"def findCharityByCode(code: String): String =\n  if (code.startsWith(\"CH_\")) code\n  else throw new Exception(\"Charity code invalid\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_788","timestamp":1745437064617,"code":"def getDonationHistory(userId: Int): List[Int] =\n  if (userId > 100) List(10, 20, 50)\n  else throw new Exception(\"No history for user\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_789","timestamp":1745437064617,"code":"def makePledge(userId: Int, amount: Int): String =\n  if (amount > 0) s\"Pledge of $$amount accepted\"\n  else throw new IllegalArgumentException(\"Invalid pledge amount\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_790","timestamp":1745437064617,"code":"def withdrawDonation(donationId: String): Boolean =\n  if (donationId.nonEmpty) true\n  else throw new Exception(\"Invalid donation ID\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_791","timestamp":1745437064617,"code":"def splitDonation(amount: Double, parts: Int): Double =\n  if (parts == 0) throw new ArithmeticException(\"Cannot split into zero parts\")\n  else amount / parts\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_792","timestamp":1745437064617,"code":"def getMatchFundingPercent(charity: String): Int =\n  if (charity == \"BigHeart\") 50\n  else throw new NoSuchElementException(\"Charity not in match program\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_793","timestamp":1745437064617,"code":"def verifyDonorEmail(email: String): Unit =\n  if (email.contains(\"@\")) ()\n  else throw new Exception(\"Malformed email address\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_794","timestamp":1745437064617,"code":"def fetchTopDonors(count: Int): List[String] =\n  if (count <= 0) throw new RuntimeException(\"Count must be positive\")\n  else List.fill(count)(\"DonorX\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_795","timestamp":1745437064617,"code":"def allocateDonation(amount: Double, charity: String): String =\n  if (amount < 1 || charity.isEmpty) throw new Exception(\"Allocation error\")\n  else s\"Allocated $$amount to $$charity\"\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_796","timestamp":1745437064617,"code":"def receiptForDonation(id: Long): String =\n  if (id == 42) \"Receipt-42\"\n  else throw new Exception(\"Receipt not found\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_797","timestamp":1745437064617,"code":"def declineDonation(reason: String): Nothing =\n  throw new Exception(\"Donation declined: \" + reason)\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_798","timestamp":1745437064617,"code":"def getCampaignStatus(campaign: String): String =\n  if (campaign == \"Spring2024\") \"open\"\n  else throw new IllegalArgumentException(\"Unknown campaign\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_799","timestamp":1745437064617,"code":"def validateBankAccount(account: String): Boolean =\n  if (account.length == 8) true\n  else throw new Exception(\"Invalid account number length\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_800","timestamp":1745437064617,"code":"def addCharityToPartnerList(name: String): Unit =\n  if (name.startsWith(\"Charity\")) ()\n  else throw new Exception(\"Not an approved partner\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_801","timestamp":1745437064617,"code":"def removeDonorIfExists(donor: String): Boolean =\n  if (donor == \"Donor1\") true\n  else throw new Exception(\"Donor does not exist\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_802","timestamp":1745437064617,"code":"def processRecurringDonation(userId: Int, period: String): String =\n  if (period == \"monthly\" || period == \"yearly\") \"Scheduled\"\n  else throw new Exception(\"Unsupported recurrence period\")\n","category":"uses_throw","topicUsed":"Charity donation platform"}
{"id":"uses_throw_803","timestamp":1745437078135,"code":"def parseScore(score: String): Int =\n  if (score.matches(\"[0-9]+\")) score.toInt\n  else throw new IllegalArgumentException(\"Invalid score format\")\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_804","timestamp":1745437078135,"code":"def getTeamIndex(teams: List[String], name: String): Int =\n  teams.indexOf(name) match {\n    case -1 => throw new NoSuchElementException(\"Team not found\")\n    case idx => idx\n  }\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_805","timestamp":1745437078135,"code":"def updateScore(current: Int, delta: Int): Int =\n  if (delta == 0) throw new RuntimeException(\"No update to apply\")\n  else current + delta\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_806","timestamp":1745437078135,"code":"case class Game(teamA: String, teamB: String, scoreA: Int, scoreB: Int)\ndef winner(game: Game): String =\n  if (game.scoreA > game.scoreB) game.teamA\n  else if (game.scoreB > game.scoreA) game.teamB\n  else throw new Exception(\"It's a draw!\")\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_807","timestamp":1745437078135,"code":"def getLiveScore(gameId: Int, scores: Map[Int, Int]): Int =\n  scores.get(gameId).getOrElse(throw new NoSuchElementException(\"Game not live\"))\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_808","timestamp":1745437078135,"code":"def calculateAverage(scores: List[Int]): Double =\n  if (scores.isEmpty) throw new ArithmeticException(\"No scores to average\")\n  else scores.sum.toDouble / scores.size\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_809","timestamp":1745437078135,"code":"def setScore(gameId: Int, score: Int): Unit =\n  if (score < 0) throw new IllegalArgumentException(\"Negative score\")\n  else println(s\"Score set: $gameId -> $score\")\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_810","timestamp":1745437078135,"code":"def parseTeamName(name: String): String =\n  if (name.trim.isEmpty) throw new IllegalStateException(\"Blank team name\")\n  else name.trim\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_811","timestamp":1745437078135,"code":"def fetchScoreFromFeed(url: String): Int =\n  if (!url.startsWith(\"http\")) throw new RuntimeException(\"Invalid feed URL\")\n  else 45\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_812","timestamp":1745437078135,"code":"def removeGame(games: List[Int], id: Int): List[Int] =\n  if (!games.contains(id)) throw new Exception(\"Game ID not found in list\")\n  else games.filter(_ != id)\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_813","timestamp":1745437078135,"code":"def safeDivide(points: Int, divisor: Int): Int =\n  if (divisor == 0) throw new ArithmeticException(\"Cannot divide by zero during stats update\")\n  else points / divisor\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_814","timestamp":1745437078135,"code":"def readScoreInput(input: String): Int =\n  try input.toInt\n  catch { case _: NumberFormatException => throw new Exception(\"Score must be a number\") }\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_815","timestamp":1745437078135,"code":"def ensureLiveStatus(status: String): Unit =\n  if (status != \"live\") throw new Exception(\"Game is not live right now!\")\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_816","timestamp":1745437078135,"code":"def incrementGoal(score: Int): Int =\n  if (score >= 10) throw new RuntimeException(\"Max goals reached\")\n  else score + 1\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_817","timestamp":1745437078135,"code":"def getPlayerScore(players: Map[String, Int], player: String): Int =\n  players.getOrElse(player, throw new NoSuchElementException(\"Player not found in this match\"))\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_818","timestamp":1745437078135,"code":"def setHalf(half: Int): Unit =\n  if (half != 1 && half != 2) throw new IllegalArgumentException(\"Invalid half specified\")\n  else ()\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_819","timestamp":1745437078135,"code":"def updateLiveFeed(feed: Option[String]): String =\n  feed.getOrElse(throw new RuntimeException(\"No live feed available\"))\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_820","timestamp":1745437078135,"code":"def removeScore(scores: List[Int], score: Int): List[Int] =\n  if (!scores.contains(score)) throw new Exception(\"Score not found: nothing to remove\")\n  else scores.filterNot(_ == score)\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_821","timestamp":1745437078135,"code":"def recordRedCard(cards: Int): Int =\n  if (cards >= 5) throw new Exception(\"Card limit exceeded for match recording\")\n  else cards + 1\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_822","timestamp":1745437078135,"code":"def validateGoals(goals: Int): Int =\n  if (goals < 0) throw new RuntimeException(\"Goals cannot be negative\")\n  else goals\n","category":"uses_throw","topicUsed":"Sports score live updating"}
{"id":"uses_throw_823","timestamp":1745437111100,"code":"def getCarByPlate(fleet: List[String], plate: String): String = {\n  val car = fleet.find(_ == plate)\n  if (car.isDefined) car.get\n  else throw new NoSuchElementException(\"Car not found\")\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_824","timestamp":1745437111100,"code":"def parseCarYear(yearStr: String): Int = {\n  try yearStr.toInt\n  catch { case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid year format\") }\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_825","timestamp":1745437111100,"code":"def rentCar(available: Boolean): String = {\n  if (available) \"Rented\"\n  else throw new RuntimeException(\"Car is not available\")\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_826","timestamp":1745437111100,"code":"def calculateRentalDays(start: Int, end: Int): Int = {\n  if (end >= start) end - start\n  else throw new IllegalArgumentException(\"End date before start date\")\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_827","timestamp":1745437111100,"code":"def getCustomerEmail(customers: Map[Int, String], id: Int): String = {\n  customers.get(id) match {\n    case Some(email) => email\n    case None => throw new Exception(\"Customer not found\")\n  }\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_828","timestamp":1745437111100,"code":"class Car(val model: String, val mileage: Int) {\n  def discountRate: Double = {\n    if (mileage < 0) throw new IllegalArgumentException(\"Negative mileage\")\n    else if (mileage > 100000) 0.10\n    else 0.05\n  }\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_829","timestamp":1745437111100,"code":"def removeCar(fleet: scala.collection.mutable.Set[String], plate: String): Unit = {\n  if (!fleet.contains(plate)) throw new NoSuchElementException(\"Car not in fleet\")\n  fleet.remove(plate)\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_830","timestamp":1745437111100,"code":"def getFleetSize(cars: List[String]): Int = {\n  if (cars.isEmpty) throw new Exception(\"No cars in fleet\")\n  cars.size\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_831","timestamp":1745437111100,"code":"def listRentedCars(rented: List[String]): List[String] = {\n  if (rented.isEmpty) throw new Exception(\"No cars currently rented\")\n  rented\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_832","timestamp":1745437111100,"code":"def updateMileage(mileage: Int, newMileage: Int): Int = {\n  if (newMileage < mileage) throw new IllegalArgumentException(\"New mileage less than current\")\n  newMileage\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_833","timestamp":1745437111100,"code":"def carCategory(code: String): String = code match {\n  case \"ECON\" => \"Economy\"\n  case \"SUV\" => \"SUV\"\n  case \"LUX\" => \"Luxury\"\n  case _ => throw new IllegalArgumentException(\"Unknown category\")\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_834","timestamp":1745437111100,"code":"def findCheapestCar(prices: Map[String, Double]): String = {\n  if (prices.isEmpty) throw new Exception(\"No cars to compare\")\n  prices.minBy(_._2)._1\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_835","timestamp":1745437111100,"code":"def reserveCar(reservations: Set[String], plate: String): String = {\n  if (reservations.contains(plate)) throw new Exception(\"Car already reserved\")\n  \"Reserved \" + plate\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_836","timestamp":1745437111100,"code":"def validateLicense(license: String): Boolean = {\n  if (license.isEmpty) throw new IllegalArgumentException(\"License required\")\n  true\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_837","timestamp":1745437111100,"code":"def getCarModel(fleet: Map[String, String], plate: String): String = {\n  fleet.get(plate).getOrElse(throw new NoSuchElementException(\"Plate not found\"))\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_838","timestamp":1745437111100,"code":"def calculateDailyRate(total: Double, days: Int): Double = {\n  if (days <= 0) throw new ArithmeticException(\"Days must be positive\")\n  total / days\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_839","timestamp":1745437111100,"code":"def applyDiscount(price: Double, percent: Double): Double = {\n  if (percent < 0 || percent > 100) throw new IllegalArgumentException(\"Invalid discount\")\n  price * (1 - percent / 100)\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_840","timestamp":1745437111100,"code":"def nextAvailableDate(bookedDates: List[Int]): Int = {\n  if (bookedDates.isEmpty) throw new Exception(\"No bookings found\")\n  bookedDates.max + 1\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_841","timestamp":1745437111100,"code":"def extendRental(current: Int, extension: Int): Int = {\n  if (extension < 0) throw new IllegalArgumentException(\"Invalid extension\")\n  current + extension\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
{"id":"uses_throw_842","timestamp":1745437111100,"code":"def searchByModel(fleet: List[(String, String)], model: String): String = {\n  fleet.find(_._2 == model) match {\n    case Some((plate, _)) => plate\n    case None => throw new Exception(\"No car with specified model\")\n  }\n}","category":"uses_throw","topicUsed":"Car rental fleet management"}
