{"id":"729b7b5f-b90b-4392-b040-d3ef6c27c217","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class ShoppingCartItem(productId: String, quantity: Int, pricePerUnit: Double)"}
{"id":"0104766e-1e70-4a3e-a474-7cfeeed2f66d","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class CartPaymentMethod(val paymentType: String, val transactionId: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CartPaymentMethod =>\n      this.paymentType == that.paymentType &&\n      this.transactionId == that.transactionId\n    case _ => false\n  }\n  override def hashCode(): Int =\n    31 * paymentType.hashCode + transactionId.hashCode\n}"}
{"id":"9542c4cf-71bf-4dd7-9626-f0fee10836ba","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CustomerAddress(fullName: String, street: String, city: String, zipCode: String, country: String)"}
{"id":"be90d189-582c-4e0f-b9cd-345ca6604114","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class DiscountCoupon(val code: String, val discountPercent: Int) {\n  def applyToAmount(amount: Double): Double =\n    amount - (amount * discountPercent / 100.0)\n}"}
{"id":"e351e561-9649-4cf9-8448-a59c37b2d484","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class OrderSummary(orderId: Long, itemCount: Int, subtotal: Double, total: Double)"}
{"id":"ad02d9f9-3461-4278-ad27-e74e530526d8","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class ShippingOption(val carrier: String, val cost: Double) {\n  def description: String = carrier + \" $\" + (cost formatted \"%.2f\")\n}"}
{"id":"34dccc40-f0fe-43c7-9ee9-82c096ba0c21","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CheckoutSession(sessionId: String, timestamp: Long, customerId: String)"}
{"id":"553db24b-acb2-4006-b181-c9cfed732871","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class AppliedGiftCard(val giftCardCode: String, val amountUsed: Double) {\n  override def toString: String = s\"GiftCard[$giftCardCode]: $$amountUsed\"\n}"}
{"id":"99bb328c-c219-43fd-93c0-69d1cf78497b","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class PaymentDetails(paymentType: String, maskedNumber: String, authorizedAmount: Double)"}
{"id":"8ce939a3-7b7a-427e-af9e-2a7e96191766","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class Invoice(val invoiceNumber: String, val purchaseTotal: Double)"}
{"id":"cc9ba8b4-5de8-45a3-ad0e-56881df95cd2","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class OrderDiscount(discountId: String, value: Double)"}
{"id":"701f0e8b-970b-4acd-aab7-cd41ebd14959","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class TaxBreakdown(val region: String, val taxAmount: Double, val taxPercentage: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case t: TaxBreakdown =>\n      region == t.region && taxAmount == t.taxAmount && taxPercentage == t.taxPercentage\n    case _ => false\n  }\n  override def hashCode(): Int =\n    47 * region.hashCode + taxAmount.hashCode + taxPercentage.hashCode\n}"}
{"id":"06de3f0a-5f9f-4902-8b77-ee8a9f92fda1","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class LineItemDetail(sku: String, title: String, unitPrice: Double, quantity: Int, lineTotal: Double)"}
{"id":"dbe58970-dd13-410d-8d5a-95c3cbf87705","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class LoyaltyRedemption(val programId: String, val pointsRedeemed: Int)"}
{"id":"a07a23f2-0c4e-456b-91e7-ca7d1f501804","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class ShippingAddressUpdate(existingAddressId: String, newAddress: CustomerAddress)"}
{"id":"39125b4c-cfd7-4e72-8086-0658b6dcaf4a","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class ReturnRequest(val orderNumber: String, val reason: String, val refundAmount: Double)"}
{"id":"fbf05760-2443-4ec3-9e89-4505b609a52c","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CartError(errorCode: String, errorMessage: String)"}
{"id":"c5941990-f71f-4de3-9685-7f9376f9ac5c","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class ManualOrderAdjustment(val adjustmentName: String, val value: Double)"}
{"id":"02495b9d-731b-45d3-bbdb-e4877e405b20","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CheckoutState(cart: List[ShoppingCartItem], shipping: CustomerAddress, payment: PaymentDetails)"}
{"id":"81c2bc3e-6993-4626-a2a8-aaf2155bc645","timestamp":1746101465572,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class FulfillmentPreference(val typeOfService: String, val earliestDate: String)\nobject FulfillmentPreference {\n  def unapply(pref: FulfillmentPreference): Option[(String, String)] =\n    Some((pref.typeOfService, pref.earliestDate))\n}"}
{"id":"4fa8a1c6-84cb-4dbc-a5f1-0b14b3bdcee4","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CartItem(productId: String, quantity: Int, price: BigDecimal)"}
{"id":"950b715e-63d5-464f-ae20-b41effc9e206","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class ShippingAddress(val street: String, val city: String, val postalCode: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: ShippingAddress =>\n      this.street == that.street && this.city == that.city && this.postalCode == that.postalCode\n    case _ => false\n  }\n  override def hashCode(): Int = (street, city, postalCode).##\n  override def toString: String = s\"ShippingAddress($street, $city, $postalCode)\"\n}"}
{"id":"1cba4a0f-7576-4566-b062-b10e2d66e227","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class OrderSummary(orderId: String, totalAmount: BigDecimal, itemCount: Int)"}
{"id":"e4de5598-9265-4ae6-8fae-818211d1579a","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class PaymentInformation(val cardType: String, val cardLast4: String, val billingZip: String)\n"}
{"id":"e85e9918-ffc5-471f-9a55-6a6915173390","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CheckoutSession(sessionId: String, userId: String, active: Boolean)"}
{"id":"0760f2e4-b4d7-4a85-b188-723cd97f698b","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class DiscountCode(val code: String, val discountPercent: Double) {\n  override def toString: String = s\"Discount:$code ($discountPercent%)\"\n}"}
{"id":"41691b2d-508a-467f-9025-c7cc6f929e48","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class DeliveryOption(name: String, estimatedDays: Int)"}
{"id":"ff541385-bd20-4148-8170-e9fb12abfb05","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"object CustomerEmailUnapply {\n  def unapply(obj: CustomerEmail): Option[String] = Some(obj.email)\n}\nclass CustomerEmail(val email: String)"}
{"id":"9f4931e7-7580-49a7-b275-ed0ea2a09865","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class OrderLine(productIdentifier: String, description: String, unitPrice: BigDecimal)"}
{"id":"ed878f2c-3411-43c1-b021-78932326d4a6","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class LoyaltyPoints(val user: String, val balance: Int)"}
{"id":"40ff5af9-1794-471b-972b-94366e582e6e","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class AddressValidationResult(valid: Boolean, error: Option[String])"}
{"id":"221007c6-3a8d-48d2-b83c-862bfdb0ac2e","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class GiftMessage(val recipient: String, val messageText: String) {\n  def copy(newRecipient: String = recipient, newMessageText: String = messageText) =\n    new GiftMessage(newRecipient, newMessageText)\n}\n"}
{"id":"178bd290-cec2-4a37-af55-5cbf3e79a2c9","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class PaymentTransaction(transactionId: String, amount: BigDecimal, success: Boolean)"}
{"id":"9a8e8cfa-d283-4ac9-b42a-b2a159c759f0","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class CheckoutTotals(val subtotal: BigDecimal, val taxAmount: BigDecimal, val shippingFee: BigDecimal)"}
{"id":"4c65c98a-07e1-456d-ae4f-98f784ac9f37","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class AppliedPromotion(promoCode: String, discountApplied: BigDecimal)"}
{"id":"b2f23614-b80d-4e69-8d1e-a796efb9c024","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class OrderShipment(val orderId: String, val carrier: String, val trackingNumber: String)"}
{"id":"f745bc6b-84eb-4322-bd6d-03e01945460f","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CartAdjustment(adjustmentType: String, value: BigDecimal)"}
{"id":"29ae5485-1226-4360-8f7f-5dfc5fd60e89","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class DigitalProductDownload(val downloadLink: String, val expiresAt: Long)\n"}
{"id":"df8cf463-be02-41f3-81e2-b8d1ce1d7776","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class InventoryReservation(itemId: String, reservedQuantity: Int)"}
{"id":"24c2e00c-e9e6-4217-a888-6503dd193f45","timestamp":1746101477137,"category":"classes_for_data","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class CheckoutErrorInfo(val errorCode: Int, val errorMessage: String)"}
{"id":"4cd0910c-4da8-4e43-b245-cf327d22029d","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class CustomerProfile(customerId: String, name: String, email: String, phoneNumber: String)"}
{"id":"c9e08393-2583-4e3c-a7be-1defe03eef9b","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class CustomerInfo(val customerId: String, val name: String, val email: String) {\n  override def equals(obj: Any): Boolean = {\n    obj match {\n      case that: CustomerInfo =>\n        this.customerId == that.customerId && this.name == that.name && this.email == that.email\n      case _ => false\n    }\n  }\n  override def hashCode(): Int =\n    customerId.hashCode + name.hashCode + email.hashCode\n  override def toString(): String =\n    s\"CustomerInfo($customerId, $name, $email)\"\n}"}
{"id":"5e14cad0-772b-4702-a222-382bc7150aa8","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class BankAccount(accountNumber: String, balance: BigDecimal, accountType: AccountType)\nenum AccountType {\n  case Checking, Savings, Business\n}"}
{"id":"03c796cf-2fb8-4845-88e2-67fbce1db349","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class BankAccountData(val accountNumber: String, var balance: BigDecimal)"}
{"id":"18d0f08b-b0ac-43b6-9ab3-f5a883c56735","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class TransactionHistoryEntry(transactionId: String, amount: BigDecimal, date: String, transactionType: TransactionType)\nenum TransactionType {\n  case Deposit, Withdrawal, Transfer\n}"}
{"id":"4391fa07-b747-4654-abca-3e66e38dcdd3","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class Transaction(val transactionId: String, val fromAccount: String, val toAccount: String, val amount: BigDecimal)"}
{"id":"47bbe06e-bcd0-43a1-94db-0a24870bebef","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class MobilePayment(payeeId: String, payerId: String, paymentAmount: BigDecimal, paymentDate: String)"}
{"id":"5cdc172e-3287-46af-b165-b657a8263d77","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class MobilePaymentInfo(val payeeId: String, val payerId: String, val amount: BigDecimal, val date: String)\nobject MobilePaymentInfo {\n  def unapply(p: MobilePaymentInfo): Option[(String, String, BigDecimal, String)] =\n    Some((p.payeeId, p.payerId, p.amount, p.date))\n}"}
{"id":"d6d7bb4f-2f37-40ea-96ac-eb71dc84f471","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class CardInfo(cardNumber: String, cardHolder: String, expiryDate: String, cvv: String)"}
{"id":"8ec1b6ba-feb1-4cd9-9ad7-b0ca09446653","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class DebitCard(val cardNumber: String, val cardHolder: String, val expiry: String, val cvv: String)"}
{"id":"3d4ce920-a0e3-417a-8135-b14420bbce7a","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class ScheduledTransfer(fromAccount: String, toAccount: String, scheduleDate: String, amount: BigDecimal)"}
{"id":"d72ef50f-e7c9-4f78-9c2e-90be551011a9","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class RecurringPayment(\n  val from: String,\n  val to: String,\n  val frequency: String,\n  val amount: BigDecimal\n)"}
{"id":"ceb2fc26-9f2d-4d76-ba66-a48b123eda80","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class Beneficiary(beneficiaryId: String, bankAccountNumber: String, name: String, addedOn: String)"}
{"id":"592ceb50-7a7f-4746-9a81-4c13c086e577","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class Payee(val payeeId: String, val accountNumber: String, val nickname: String)\nobject Payee {\n  def unapply(p: Payee): Option[(String, String, String)] =\n    Some((p.payeeId, p.accountNumber, p.nickname))\n}"}
{"id":"14075140-5cb9-4ea7-99a9-1fd2b84a30f1","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class LoginSession(sessionId: String, userId: String, loginTime: String, isActive: Boolean)"}
{"id":"d5046b0c-2624-4357-9e53-924f6b552506","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class UserSession(val sessionCode: String, val userCode: String, val startTime: String, val active: Boolean)"}
{"id":"fcb47b9d-bf62-47c2-aaac-89c5184bcec2","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class LoanApplication(applicationId: String, applicantId: String, amountRequested: BigDecimal, status: ApplicationStatus)\nenum ApplicationStatus {\n  case Pending, Approved, Rejected\n}"}
{"id":"538b0af7-5926-4c87-9684-48be77e7be22","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class LoanRequest(\n  val requestId: String,\n  val userId: String,\n  val principal: BigDecimal,\n  val requestStatus: String\n)"}
{"id":"398df2d5-a032-409f-bbcb-8890c62eff8e","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class Notification(notificationId: String, recipientId: String, message: String, sentTime: String)"}
{"id":"86e62292-d4db-421c-8240-dc5831e1ca29","timestamp":1746101489841,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class BankMessage(val messageId: String, val userId: String, val content: String, val timestamp: String)\nobject BankMessage {\n  def unapply(m: BankMessage): Option[(String, String, String, String)] =\n    Some((m.messageId, m.userId, m.content, m.timestamp))\n}"}
{"id":"d2c3dc83-115d-4d37-8852-26547f47c5b7","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class AccountDetails(accountNumber: String, balance: Double, accountType: String)"}
{"id":"e2b9797a-e11a-49eb-9249-9c3b66e2b200","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class TransactionRecord(val transactionId: String, val fromAccount: String, val toAccount: String, val amount: Double, val timestamp: Long) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: TransactionRecord =>\n      this.transactionId == that.transactionId &&\n      this.fromAccount == that.fromAccount &&\n      this.toAccount == that.toAccount &&\n      this.amount == that.amount &&\n      this.timestamp == that.timestamp\n    case _ => false\n  }\n  override def hashCode(): Int = transactionId.hashCode + fromAccount.hashCode + toAccount.hashCode + amount.hashCode() + timestamp.hashCode()\n  override def toString: String = s\"TransactionRecord($transactionId, $fromAccount, $toAccount, $amount, $timestamp)\"\n}"}
{"id":"660b13b2-c830-427b-a515-12f0b2ccafc7","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class UserProfile(userId: String, name: String, email: String, phone: String)"}
{"id":"d95049c2-30ed-4a31-82bc-f697184bf59b","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class PaymentRequest(val paymentId: String, val payer: String, val payee: String, val amount: Double)"}
{"id":"2ae46c03-0351-4117-aa6d-bd8f2c6fb6ce","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class Beneficiary(id: String, name: String, bankCode: String, accountNumber: String)"}
{"id":"6a9a98b6-eb14-4fd4-b4be-cd36bbb46fbf","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class MobileDevice(val deviceId: String, val osType: String, val lastLogin: Long) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: MobileDevice =>\n      this.deviceId == that.deviceId &&\n      this.osType == that.osType &&\n      this.lastLogin == that.lastLogin\n    case _ => false\n  }\n  override def hashCode(): Int = deviceId.hashCode + osType.hashCode + lastLogin.hashCode().toInt\n}"}
{"id":"b3fb4cf1-05f7-4041-930a-028d4f1bf498","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class CardInfo(cardNumber: String, expiryMonth: Int, expiryYear: Int, cardHolder: String)"}
{"id":"e1bd94c7-2f55-4c4f-8390-01e5f0ce6fbf","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class LoanApplication(val applicationId: String, val applicant: String, val amountRequested: Double, val status: String) {\n  override def toString: String = \n    s\"LoanApplication($applicationId, $applicant, $amountRequested, $status)\"\n}"}
{"id":"93b8d588-a894-4410-939b-14d65590be5a","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class Notification(notificationId: String, recipientUserId: String, message: String, timestamp: Long)"}
{"id":"a494552e-7115-4782-b0ff-deaf168fe52c","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class BankBranch(val branchId: String, val address: String, val city: String)"}
{"id":"7742e783-77a7-4ccb-9d41-3952c1176ce7","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class BillPayment(orderId: String, payeeName: String, referenceNumber: String, amount: Double)"}
{"id":"9be98640-3655-4372-9342-4c0c486051cd","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class SecurityToken(val token: String, val issuedAt: Long, val expiresAt: Long)"}
{"id":"6d56f85a-2fc3-446b-9cc2-5a87cc341f78","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class AccountStatement(statementId: String, accountNumber: String, periodFrom: Long, periodTo: Long)"}
{"id":"6e0ff824-6435-41bf-a857-ac9d0a1ba580","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class InvestmentProfile(val userIdParam: String, val riskTier: String, val investmentValue: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: InvestmentProfile =>\n      this.userIdParam == that.userIdParam && this.riskTier == that.riskTier && this.investmentValue == that.investmentValue\n    case _ => false\n  }\n  override def hashCode(): Int = userIdParam.hashCode + riskTier.hashCode + investmentValue.hashCode().toInt\n}"}
{"id":"19f683bb-98d7-47ba-b8a9-b48d83cefbb9","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class SupportTicket(ticketId: String, userId: String, category: String, status: String)"}
{"id":"938389fa-6955-4009-bef7-1410df792260","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class ScheduledPayment(val scheduleId: String, val payee: String, val amount: Double, val scheduledDate: Long) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: ScheduledPayment => this.scheduleId == that.scheduleId && this.payee == that.payee && this.amount == that.amount && this.scheduledDate == that.scheduledDate\n    case _ => false\n  }\n  override def hashCode(): Int = scheduleId.hashCode + payee.hashCode + amount.hashCode().toInt + scheduledDate.hashCode().toInt\n}"}
{"id":"d43575c8-13ec-4331-8bca-84b1c26adf87","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class TransferSummary(transferId: String, senderAccount: String, recipientAccount: String, transferredAmount: Double)"}
{"id":"47e9fb1b-3fd7-4497-ae26-cfac5d974d92","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class AuthenticationAttempt(val attemptId: String, val userAttempted: String, val success: Boolean, val attemptTime: Long)"}
{"id":"a27f6dc2-9631-4438-85f0-72d3962ecb43","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class SavingsGoal(goalId: String, userId: String, description: String, targetAmount: Double)"}
{"id":"9c88df36-f1f7-4b32-9ee4-db09194b928f","timestamp":1746101503341,"category":"classes_for_data","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class RecentContact(val contactUserId: String, val nickname: String, val lastTransferDate: Long)\nobject RecentContact {\n  def unapply(rc: RecentContact): Option[(String, String, Long)] =\n    Some((rc.contactUserId, rc.nickname, rc.lastTransferDate))\n}"}
{"id":"fc129ca3-809a-4958-84e0-8550354e8da9","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class Patient(id: Int, name: String, dateOfBirth: String)"}
{"id":"ee61ad56-99e4-4660-801d-7b4c8ab6b6bd","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class Appointment(slotId: Int, doctorId: Int, patientId: Int) {\n  def getSlotId = slotId\n  def getDoctorId = doctorId\n  def getPatientId = patientId\n  override def equals(obj: Any): Boolean = obj match {\n    case that: Appointment =>\n      this.slotId == that.slotId &&\n      this.doctorId == that.doctorId &&\n      this.patientId == that.patientId\n    case _ => false\n  }\n  override def hashCode(): Int = slotId * 31 + doctorId * 13 + patientId\n  override def toString: String =\n    s\"Appointment(slotId=$slotId, doctorId=$doctorId, patientId=$patientId)\"\n}"}
{"id":"240c72ac-e80d-440b-b030-56d0b7b9334e","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class DoctorProfile(doctorId: Int, fullName: String, specialization: String)"}
{"id":"b1598cdc-b9f2-4955-89a3-ab718d31b629","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class TelemedicineSession(sessionId: String, patientName: String, startTime: String, endTime: String) {\n  def getSessionInfo(): String = s\"Session $sessionId from $startTime to $endTime for $patientName\"\n}"}
{"id":"fd864963-8fea-4152-9c2d-5c364243034b","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AppointmentSlot(slotId: Int, startTime: String, endTime: String, isAvailable: Boolean)"}
{"id":"6847a455-ff94-434f-8703-5ff8db2ad2d1","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class AppointmentRequest(val requestId: Long, val patientId: Int, val requestedTime: String)"}
{"id":"581c5df6-6c96-4675-9a19-b1932ad19d63","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class TelemedicinePlatformUser(userId: Int, userName: String, userType: String)"}
{"id":"a0139269-c84c-4089-b49d-3c89007c2b0d","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class ConsultationSummary(visitId: Int, diagnosis: String, notes: String) {\n  def getSummary: String = s\"Diagnosis: $diagnosis; Notes: $notes\"\n}"}
{"id":"30297972-0079-4ebd-8659-dfd67f9e1c8f","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class RescheduleRequest(appointmentId: Long, oldTime: String, newTime: String, reason: String)"}
{"id":"78dee911-2b89-42b9-9a51-48fba6d52f93","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class AppointmentCancellation(cancelId: Long, appointmentId: Long, cancelReason: String) {\n  override def equals(other: Any): Boolean = other match {\n    case that: AppointmentCancellation =>\n      this.cancelId == that.cancelId && this.appointmentId == that.appointmentId\n    case _ => false\n  }\n  override def hashCode(): Int = (cancelId, appointmentId).##\n}"}
{"id":"2a5055df-029a-4386-80d5-a5e4fe82acb9","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class Prescription(prescriptionId: Int, appointmentId: Int, medication: String, dosage: String)"}
{"id":"efeea871-9f1d-4164-af18-a73226ab8839","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class DoctorAvailability(val doctorId: Int, val dayOfWeek: String, val availableSlots: List[String])"}
{"id":"532b44b1-8337-4842-b5f4-3a980604bd9c","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class ScheduledConsultation(consultationId: Long, doctorId: Int, patientId: Int, scheduledAt: String)"}
{"id":"2a61899e-ddd0-4e9a-8669-fe31af3f9174","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class PatientFeedback(feedbackId: Int, appointmentId: Int, rating: Int, comments: String) {\n  override def toString: String =\n    s\"Feedback($feedbackId): $comments with rating $rating for appointment $appointmentId\"\n}"}
{"id":"4245b429-ac97-4aae-baac-8b4886da2b84","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class VideoCallDetails(callId: String, url: String, startsAt: String, endsAt: String)"}
{"id":"1a282c0b-5e5a-4220-b2f6-5c4b6cd4e1de","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class PaymentDetails(val transactionId: Int, val amount: Double, val paidAt: String)"}
{"id":"80117087-f384-4c23-bfcf-0606796a3a0b","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class Notification(notificationId: Int, recipientId: Int, message: String, timestamp: String)"}
{"id":"7795dcad-6769-4c35-9aba-96ae488d67b7","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class Reminder(reminderId: Int, appointmentId: Int, remindAt: String)"}
{"id":"c85d6a90-331b-47ae-8d96-fc2ea0231f15","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"enum AppointmentStatus:\n  case Scheduled, Completed, Cancelled, NoShow"}
{"id":"641f21cd-3133-4edc-bf6f-bd737411f24c","timestamp":1746101521696,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class AppointmentType private(val name: String)\nobject AppointmentType {\n  val Initial = new AppointmentType(\"Initial\")\n  val FollowUp = new AppointmentType(\"FollowUp\")\n  val Emergency = new AppointmentType(\"Emergency\")\n  def unapply(arg: AppointmentType): Option[String] = Some(arg.name)\n}"}
{"id":"f1400b10-f583-4caf-89fc-3c1e3bcdd58b","timestamp":1746101538378,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class PatientProfile(patientId: String, name: String, dateOfBirth: String)"}
{"id":"d99c066e-9f3e-497c-b89b-b4135090007b","timestamp":1746101538378,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class AppointmentRequest(val patientId: String, val doctorId: String, val preferredTime: String) {\n  override def toString: String = s\"AppointmentRequest($patientId, $doctorId, $preferredTime)\"\n  override def equals(obj: Any): Boolean = obj match {\n    case that: AppointmentRequest =>\n      this.patientId == that.patientId &&\n      this.doctorId == that.doctorId &&\n      this.preferredTime == that.preferredTime\n    case _ => false\n  }\n  override def hashCode: Int =\n    (patientId, doctorId, preferredTime).##\n}"}
{"id":"92167b6e-d1d0-4de8-a51b-681c9c40b90c","timestamp":1746101538378,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class DoctorProfile(doctorId: String, fullName: String, specialization: String, licenseNumber: String)"}
{"id":"1c4ef690-4881-4090-ba3a-58c4e6c2ce53","timestamp":1746101538378,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class TelemedicineSlot(val slotId: String, val startTime: String, val endTime: String)"}
{"id":"3fd14648-1831-4917-8057-7038fb9f162c","timestamp":1746101538378,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AppointmentConfirmation(appointmentId: String, patientId: String, doctorId: String, time: String)"}
{"id":"32fac993-a8c0-4cbf-b4f6-dca47f00d538","timestamp":1746101538378,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class VideoConsultationSession(val sessionId: String, val appointmentId: String, val link: String) {\n  override def toString: String = s\"VideoConsultationSession($sessionId, $appointmentId, $link)\"\n}"}
{"id":"e81233c8-30f8-4a0e-bcbf-523d617f0df6","timestamp":1746101538378,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class TelemedicineMessage(messageId: String, senderId: String, recipientId: String, content: String, timestamp: Long)"}
{"id":"e04eeaae-9dd0-4fdc-803a-7da109b99188","timestamp":1746101538378,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class ScheduledFollowUp(val followUpId: String, val appointmentId: String, val scheduledTime: String)"}
{"id":"5759c862-7995-47a7-a5a1-4fbf8ea5f95e","timestamp":1746101538378,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class Prescription(prescriptionId: String, patientId: String, doctorId: String, medication: String, dosage: String, instructions: String)"}
{"id":"6e5310ef-0db7-472a-8895-85c4788c662d","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class PatientFeedback(val feedbackId: String, val appointmentId: String, val rating: Int, val comments: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: PatientFeedback =>\n      this.feedbackId == that.feedbackId &&\n      this.appointmentId == that.appointmentId &&\n      this.rating == that.rating &&\n      this.comments == that.comments\n    case _ => false\n  }\n  override def hashCode: Int =\n    (feedbackId, appointmentId, rating, comments).##\n}"}
{"id":"91b6912e-92b3-442c-9134-6e494e583a6a","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class PaymentRecord(paymentId: String, appointmentId: String, amount: Double, method: String, status: String)"}
{"id":"4b4a763d-f876-4ac2-a865-f60a054d8673","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class CancellationNotice(val noticeId: String, val appointmentId: String, val cancelledBy: String, val reason: String)"}
{"id":"c029fc77-7d77-4451-a591-acbf2ca53630","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AvailabilityChangeLog(logId: String, doctorId: String, oldTime: String, newTime: String, reason: String)"}
{"id":"4e2a30ac-0319-4b05-b1d1-a5a2cc6ea1bc","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class AppointmentStatus(val appointmentId: String, val status: String) {\n  def this(a: String) = this(a, \"Pending\")\n}"}
{"id":"70954e24-e089-4b15-a3af-2e5250a63e74","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class RescheduleRequest(requestId: String, appointmentId: String, requestedTime: String, patientComment: Option[String])"}
{"id":"cb78838b-5866-43d4-8f63-140ff001fff2","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class SessionSummary(val summaryId: String, val appointmentId: String, val summaryText: String)"}
{"id":"287ca3e9-91e7-42bc-a81e-c0a0cdab47ce","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class TelemedicineNotification(notificationId: String, userId: String, notificationType: String, message: String, seen: Boolean)"}
{"id":"492ce9f7-55a2-4cf8-8713-7ec27f8ee35c","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class EmergencyContact(val contactId: String, val patientId: String, val name: String, val phoneNumber: String)\nobject EmergencyContact {\n  def unapply(ec: EmergencyContact): Option[(String, String, String, String)] =\n    Some((ec.contactId, ec.patientId, ec.name, ec.phoneNumber))\n}"}
{"id":"49160765-8e56-4d8e-bbc1-5ed72518a2d1","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class InsuranceVerificationRequest(requestId: String, patientId: String, insuranceProvider: String, policyNumber: String)"}
{"id":"8175e270-7c69-4221-abc7-8f79b21ab9f3","timestamp":1746101538379,"category":"classes_for_data","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class AppointmentType(val appointmentTypeId: String, val description: String)"}
{"id":"dda5f3ee-3b0f-421f-8f00-acbfe4a4ae7b","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class HeartRateMeasurement(timestamp: Long, bpm: Int)"}
{"id":"367f79b9-f865-4aba-a8be-7c082f3d21a6","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class DailyStepCount(val date: String, val steps: Int)\noverride def equals(obj: Any): Boolean = {\n  obj match {\n    case that: DailyStepCount => this.date == that.date && this.steps == that.steps\n    case _ => false\n  }\n}\noverride def hashCode(): Int = {\n  31 * date.hashCode + steps\n}\noverride def toString: String = s\"DailyStepCount($date, $steps)\""}
{"id":"88c977a0-2679-417f-8252-f8ea2cb5271b","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class WorkoutSession(startTime: Long, endTime: Long, activityType: ActivityType)\n\nenum ActivityType {\n  case Running, Cycling, Swimming, Walking, StrengthTraining\n}"}
{"id":"2c837feb-a587-4c81-b644-5a56eeabcde7","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class SleepPeriod(val startTime: Long, val endTime: Long, val deepMinutes: Int, val lightMinutes: Int)"}
{"id":"309badf8-556d-4b05-868d-97f904f88f85","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class CalorieIntake(date: String, calories: Int, mealType: MealKind)\n\nenum MealKind { case Breakfast, Lunch, Dinner, Snack }"}
{"id":"52df9497-c96e-48e8-bb01-cae9c60caaea","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class GPSLocation(val latitude: Double, val longitude: Double)\nobject GPSLocation {\n  def unapply(loc: GPSLocation): Option[(Double, Double)] = Some((loc.latitude, loc.longitude))\n}"}
{"id":"19be34c7-b1e8-4f8d-b9a2-4d7fdcc0161d","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class BodyWeightRecord(date: String, weightKg: Double)"}
{"id":"08d35a35-32a5-4dd2-b67c-8842a9e23b83","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class ActiveMinutes(val date: String, val minutes: Int)"}
{"id":"5713c913-641f-4836-b87c-759119cb90c6","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class HydrationLog(date: String, volumeLiters: Double)"}
{"id":"762f241d-76cc-4781-b3b5-70e56afee4eb","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class StressLevelEntry(val timestamp: Long, val level: Int)"}
{"id":"3cc76cc7-8798-416b-8756-f39b86ba269d","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class HeartRateZoneEntry(zone: HeartRateZone, minutes: Int)\n\nenum HeartRateZone {\n  case Rest, Moderate, Cardio, Peak\n}"}
{"id":"8768337c-6c97-4270-98c0-7bafc37a0e05","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class BloodPressureReading(val timestamp: Long, val systolic: Int, val diastolic: Int)\ndef canAlert: Boolean = systolic > 140 || diastolic > 90"}
{"id":"f399e2e1-dda7-4d20-8035-040d60aabc37","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class DistanceRecord(date: String, kilometers: Double)"}
{"id":"47c1c88b-67c4-45a0-b474-66b234c53140","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class WeeklySummary(val weekNumber: Int, val totalSteps: Int, val caloriesBurned: Int)\nobject WeeklySummary {\n  def unapply(ws: WeeklySummary): Option[(Int, Int, Int)] = Some((ws.weekNumber, ws.totalSteps, ws.caloriesBurned))\n}"}
{"id":"520f58ad-2986-41a8-bd63-0724388917d6","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class SleepScoreEntry(date: String, score: Int)"}
{"id":"e7479b1e-9943-476a-a781-c50c6dec55ad","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class RestingHeartRate(val date: String, val bpm: Int)\ndef isNormal: Boolean = bpm >= 60 && bpm <= 100"}
{"id":"bc616636-f058-4766-8bf0-eabd3fe999a3","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class StressEvent(timestamp: Long, trigger: Option[String])"}
{"id":"a1032819-59d8-499c-8d1e-72cc30f45fd6","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class VO2MaxEstimate(val measuredDate: String, val vo2Max: Double)\noverride def toString: String = s\"VO2MaxEstimate($measuredDate, $vo2Max)\""}
{"id":"25c835c0-96f5-4aed-a27a-f9ce72f467d0","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class ActivitySegment(startTimestamp: Long, endTimestamp: Long, intensity: IntensityLevel)\n\nenum IntensityLevel { case Low, Medium, High }"}
{"id":"c4f28d16-74be-4596-9d92-48db70add8ee","timestamp":1746101553227,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class MacroNutrientEntry(val date: String, val proteinGrams: Int, val fatGrams: Int, val carbGrams: Int)"}
{"id":"fd2843b1-ed24-48bf-bc55-771eccaa0f47","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class StepCountRecord(userId: String, date: java.time.LocalDate, steps: Int)\n"}
{"id":"7462d719-1850-4e41-8b37-561ecd61a30b","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class CalorieBurnEntry(val userId: String, val timestamp: Long, val caloriesBurned: Double)\noverride def equals(obj: Any): Boolean =\n  obj match\n    case that: CalorieBurnEntry =>\n      this.userId == that.userId &&\n      this.timestamp == that.timestamp &&\n      this.caloriesBurned == that.caloriesBurned\n    case _ => false\noverride def hashCode(): Int =\n  userId.hashCode + timestamp.hashCode + caloriesBurned.hashCode.toInt\noverride def toString: String =\n  s\"CalorieBurnEntry($userId, $timestamp, $caloriesBurned)\"\n"}
{"id":"9996501e-7306-4d95-84e5-8162710e7f90","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class HeartRateSample(userId: String, bpm: Int, recordedAt: Long)\n"}
{"id":"ead75588-7458-4b15-ba48-51312dcfc95d","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class SleepSession(val userId: String, val startEpoch: Long, val endEpoch: Long)\noverride def equals(other: Any): Boolean =\n  other match\n    case that: SleepSession =>\n      this.userId == that.userId &&\n      this.startEpoch == that.startEpoch &&\n      this.endEpoch == that.endEpoch\n    case _ => false\noverride def hashCode(): Int =\n  userId.hashCode + startEpoch.hashCode + endEpoch.hashCode\n"}
{"id":"cbda5e0f-e6d3-42fc-8b6a-5ae2ebef5b58","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class DistanceMeasurement(userId: String, kilometers: Double, recordedAt: Long)\n"}
{"id":"fad97ca2-9193-4283-94ac-aa9a4d287c20","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class ExerciseEvent(val userId: String, val activityType: String, val durationMinutes: Int)\noverride def equals(a: Any): Boolean =\n  a match\n    case that: ExerciseEvent =>\n      this.userId == that.userId &&\n      this.activityType == that.activityType &&\n      this.durationMinutes == that.durationMinutes\n    case _ => false\n"}
{"id":"a9eb6101-a302-4aa5-847f-cdb977354cbd","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class ActiveMinutesRecord(userId: String, minutesActive: Int, date: java.time.LocalDate)\n"}
{"id":"4a258fc5-b0cd-4362-b44c-11a7b44cdc54","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class WaterIntakeEntry(val userId: String, val volumeMl: Int, val timeRecorded: Long)\noverride def toString: String =\n  s\"WaterIntakeEntry($userId, $volumeMl, $timeRecorded)\"\n"}
{"id":"cfb6d92e-0d03-4e97-8d39-091dc65a898c","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class WeightLog(userId: String, weightKg: Double, logDate: java.time.LocalDate)\n"}
{"id":"b826a243-b640-4b94-93ea-157a554fa98d","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class BodyFatMeasurement(val userId: String, val percentFat: Double, val measurementTime: Long)\n"}
{"id":"474b29cb-9e71-4abf-8d8e-995f20877e00","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class WorkoutSession(userId: String, activity: String, caloriesBurned: Double, sessionDate: java.time.LocalDate)\n"}
{"id":"3ef10442-9efa-49a9-8e24-0d839013a5a2","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class HydrationGoal(val userId: String, val targetLiters: Double, val date: java.time.LocalDate)\n"}
{"id":"6fcc0f34-a7a8-43ee-99a3-b297e604928c","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class SleepAnalysis(userId: String, sleepQuality: String, durationMinutes: Int, recordedAt: Long)\n"}
{"id":"1e0dec45-6dac-4203-96a7-f72d82784381","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class WorkoutPlan(val userId: String, val planName: String, val weekNumber: Int)\ndef canEqual(other: Any): Boolean =\n  other.isInstanceOf[WorkoutPlan]\noverride def equals(other: Any): Boolean =\n  other match\n    case that: WorkoutPlan =>\n      this.planName == that.planName &&\n      this.userId == that.userId\n    case _ => false\n"}
{"id":"6b95a947-b022-4d6e-bb88-4cd78b5e64f5","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class DailyGoal(userId: String, stepGoal: Int, calorieGoal: Int, targetDate: java.time.LocalDate)\n"}
{"id":"e03d5c50-c2be-4edf-ae9a-045c83d50578","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class StressLevelEntry(val userId: String, val level: Int, val timestamp: Long)\nobject StressLevelEntry:\n  def unapply(e: StressLevelEntry): Option[(String, Int, Long)] =\n    Some((e.userId, e.level, e.timestamp))\n"}
{"id":"24158381-36c9-444a-b67c-a5b7e5b05bd4","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class BodyMeasurement(userId: String, chestCm: Double, waistCm: Double, hipsCm: Double, measuredAt: java.time.LocalDate)\n"}
{"id":"83eee204-c8c7-4265-ba59-12903a30314f","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class ActivityRecognitionResult(val userId: String, val activityLabel: String, val confidence: Double)\n"}
{"id":"7456d572-a339-4f03-b7b4-7660bdc808bd","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class RestingHeartRate(userId: String, bpm: Int, recordedOn: java.time.LocalDate)\n"}
{"id":"6d74e898-88a2-4cc5-bbde-f50e04623071","timestamp":1746101576676,"category":"classes_for_data","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class AchievementBadge(val userId: String, val badgeName: String, val achievedAt: java.time.LocalDateTime)\n"}
{"id":"4b36a92a-b0fc-4c88-9f93-dc76735cd1ec","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, name: String, monthlyPrice: BigDecimal, active: Boolean)"}
{"id":"e10d20f8-b5f0-411c-a510-6bf5f4d989fd","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class SubscriptionPlan(val planId: String, val title: String, val pricePerMonth: Double, val status: Boolean)\noverride def equals(other: Any): Boolean =\n  other match\n    case that: SubscriptionPlan =>\n      this.planId == that.planId && this.title == that.title &&\n      this.pricePerMonth == that.pricePerMonth && this.status == that.status\n    case _ => false\n\noverride def hashCode(): Int =\n  (planId, title, pricePerMonth, status).##"}
{"id":"7e2f8143-4bb6-4ae4-8898-885b14732882","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class DiscountOffer(description: String, amount: Double, isPercentage: Boolean)"}
{"id":"6f69408b-a94c-425c-b9f4-444fb4e1b191","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanFeature(val featureName: String, val enabled: Boolean)\noverride def toString: String =\n  s\"PlanFeature($featureName, $enabled)\""}
{"id":"ed9229c4-6eb4-43b2-a3e5-503be9242b00","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PriceUpdateEvent(planId: String, oldPrice: BigDecimal, newPrice: BigDecimal, updatedBy: String)"}
{"id":"ca66e28e-87bd-4d41-9520-3b1056c4ff53","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class CustomerPricingPreferences(val customerId: String, val preferredCurrency: String, val notificationsEnabled: Boolean)"}
{"id":"654291bf-80e9-4672-9dac-6b479e512505","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PlanAccessLevel(planId: String, accessType: AccessType)\nenum AccessType: case Admin, Editor, Viewer"}
{"id":"7e348968-1194-45c8-aeaf-9c04db667fe5","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class BillingCycleInfo(val cycleLengthMonths: Int, val autoRenew: Boolean)\ndef equals(obj: Any): Boolean =\n  obj match\n    case that: BillingCycleInfo =>\n      this.cycleLengthMonths == that.cycleLengthMonths &&\n      this.autoRenew == that.autoRenew\n    case _ => false"}
{"id":"24431b67-31db-41b7-8351-20b40e86cf04","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PlanLimit(planId: String, maxUsers: Int, maxStorageGB: Int)"}
{"id":"cd1944b2-a7ed-4ca1-8be5-40efdf0e98fd","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanUpgradeRequest(val fromPlan: String, val toPlan: String, val approved: Boolean)"}
{"id":"d69cb44e-f590-4196-b838-13567bd71a96","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PaymentGatewaySettings(planId: String, supportedMethods: List[String])"}
{"id":"0b9e4661-5d08-42aa-9e5e-41948669e61d","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanDeprecated(val legacyId: String, val reason: String)\ndef toString: String = s\"PricingPlanDeprecated($legacyId, $reason)\""}
{"id":"615fba9e-bc82-4fd9-94c2-54eb758ffcba","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class FreeTrialPeriod(planId: String, days: Int)"}
{"id":"e97f69fb-0191-4c87-b589-982647057b43","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanInternalNote(val noteId: String, val planId: String, val content: String)"}
{"id":"627701ec-0e23-45f7-a940-19e7f0e35f84","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class ScheduledPriceIncrease(planId: String, increaseDate: java.time.LocalDate, newMonthlyPrice: BigDecimal)"}
{"id":"1fc4149d-91ee-4c2d-9880-2ed7b1b233c4","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class FeatureFlag(val name: String, val enabled: Boolean)"}
{"id":"aab68e47-d048-4fdd-82ce-220d312eca73","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PlanCurrencyInfo(planId: String, currencyCode: String, localizedPrice: BigDecimal)"}
{"id":"9ce4be6f-a0db-45da-8f24-b34479733887","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanSnapshot(val snapshotId: String, val planName: String, val takenAt: java.time.Instant)"}
{"id":"87f4daf1-ca19-4cf5-84df-5a8ca3ccf685","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PlanCustomField(planId: String, fieldName: String, fieldValue: String)"}
{"id":"af8b8052-3e0d-457e-8ad6-cd500db02ee2","timestamp":1746101587346,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanPromotion(val planId: String, val promoCode: String, val discountPercent: Int)\nobject PlanPromotion:\n  def unapply(pp: PlanPromotion): Option[(String, String, Int)] =\n    Some((pp.planId, pp.promoCode, pp.discountPercent))"}
{"id":"955cf65c-3da4-4963-95a4-1f8d5bbbfb2a","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, name: String, monthlyPrice: BigDecimal, isActive: Boolean)"}
{"id":"4901103e-bf6e-4508-99ea-61bc74cd15f2","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class SubscriptionDetails(val subscriberId: String, val planId: String, val startedOn: Long, val status: String)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: SubscriptionDetails =>\n    this.subscriberId == that.subscriberId &&\n    this.planId == that.planId &&\n    this.startedOn == that.startedOn &&\n    this.status == that.status\n  case _ => false\n}\noverride def hashCode(): Int =\n  subscriberId.hashCode ^ planId.hashCode ^ startedOn.hashCode ^ status.hashCode\noverride def toString: String = s\"SubscriptionDetails($subscriberId, $planId, $startedOn, $status)\""}
{"id":"714a7de6-e4b9-4a36-9cb1-7e9c1183a458","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class AddOnFeature(addOnId: String, description: String, fee: Double)"}
{"id":"8296bad0-7d39-4b81-b068-e3f1e5f8d972","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanUpgrade(val originalPlan: String, val newPlan: String, val upgradeDate: Long)\ndef toString: String = s\"PlanUpgrade from $originalPlan to $newPlan on $upgradeDate\""}
{"id":"b0d2e90f-ab96-4e7f-a000-8ce30d1ea30d","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PlanDiscount(discountCode: String, amount: Double, appliesTo: String)"}
{"id":"b52de13d-cef8-4e3f-8e70-9029afe32dd3","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class BillingCycle(planId: String, frequency: String, nextBillingDate: Long)"}
{"id":"ce25b2e8-d0fd-4d10-9a08-9f52965502a5","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanRestriction(val planId: String, val maxUsers: Int, val maxStorage: Int)"}
{"id":"e8fd19ba-51d8-4322-af68-42289b7094c8","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlanSummary(planName: String, totalSubscribers: Int, recurringRevenue: BigDecimal)"}
{"id":"0e78cdac-1605-4219-b56a-e627c67c36f5","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanChangeLog(val logId: String, val changedBy: String, val changeType: String, val changedAt: Long)\n  def toString: String = s\"PlanChangeLog($logId, $changedBy, $changeType, $changedAt)\""}
{"id":"422b6a75-5aa6-4201-8bf8-c1d5547cd04e","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class SubscriptionPeriod(startDate: Long, endDate: Long, renewalStatus: String)"}
{"id":"46c114a5-3f63-493b-ac50-7602fbee3d22","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingTier(val tierId: String, val tierName: String, val pricePerMonth: Double)"}
{"id":"225ee5ac-1a65-4c86-bb96-554241d79348","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PlanFeatureToggle(planId: String, featureKey: String, enabled: Boolean)"}
{"id":"92f1d5b5-1654-4d68-af2c-c4240a47598f","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanCustomField(val key: String, val value: String)\n  def canEqual(that: Any): Boolean = that.isInstanceOf[PlanCustomField]\n  override def equals(that: Any): Boolean = that match {\n    case that: PlanCustomField =>\n      that.canEqual(this) &&\n      this.key == that.key && this.value == that.value\n    case _ => false\n  }\n  override def hashCode(): Int = key.hashCode ^ value.hashCode"}
{"id":"7d39be29-d2c3-4bf5-b976-b7a6d6b90148","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlanGroup(groupId: String, groupName: String, associatedPlans: List[String])"}
{"id":"4f45fb8d-2ffe-4e29-898f-584cf784080a","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanCancellation(val cancellationId: String, val reason: String, val cancelledOn: Long)"}
{"id":"e7bdc6c9-8bc0-4f12-ba1b-55a5e781610b","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PlanBenefit(planId: String, benefitDescription: String)"}
{"id":"ba32b4fe-1228-41bb-a1f3-27a36a165052","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PlanUsageMetric(planId: String, metricKey: String, metricValue: Long)"}
{"id":"d0274e92-ddc7-4d77-85bc-c64691c80f96","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanRenewal(val renewalId: String, val planId: String, val renewalDate: Long)\n  override def equals(o: Any): Boolean = o match {\n    case that: PlanRenewal =>\n      this.renewalId == that.renewalId && this.planId == that.planId &&\n      this.renewalDate == that.renewalDate\n    case _ => false\n  }\n  override def hashCode(): Int = renewalId.hashCode ^ planId.hashCode ^ renewalDate.hashCode"}
{"id":"a0cbcb10-79ae-46a8-a840-8cd1afc1a555","timestamp":1746101604017,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanDetails(val planId: String, val planName: String, val period: String, val price: BigDecimal)\nobject PricingPlanDetails {\n  def unapply(p: PricingPlanDetails): Option[(String, String, String, BigDecimal)] =\n    Some((p.planId, p.planName, p.period, p.price))\n}"}
{"id":"ee901518-aa1d-4e2d-8f32-23809122b3af","timestamp":1746101608462,"category":"classes_for_data","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanDetails(val planId: String, val planName: String, val monthlyPrice: BigDecimal) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: PricingPlanDetails =>\n      this.planId == that.planId &&\n      this.planName == that.planName &&\n      this.monthlyPrice == that.monthlyPrice\n    case _ => false\n  }\n  override def hashCode(): Int =\n    planId.hashCode ^ planName.hashCode ^ monthlyPrice.hashCode\n  override def toString: String =\n    s\"PricingPlanDetails(planId=$planId, planName=$planName, monthlyPrice=$monthlyPrice)\"\n}\nobject PricingPlanDetails {\n  def unapply(plan: PricingPlanDetails): Option[(String, String, BigDecimal)] =\n    Some((plan.planId, plan.planName, plan.monthlyPrice))\n}"}
{"id":"41a4fab3-b61c-4b80-b1f9-b6be8ab84dc0","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class ThermostatSetting(temperature: Double, mode: String)"}
{"id":"7c9b4d27-76c1-430c-8341-c421ae4ced6e","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class LightSwitchStatus(val isOn: Boolean) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: LightSwitchStatus => this.isOn == that.isOn\n    case _ => false\n  }\n  override def hashCode(): Int = if (isOn) 1 else 0\n  override def toString: String = s\"LightSwitchStatus(isOn=$isOn)\"\n}"}
{"id":"d89cd4cc-d983-43d0-bcc6-425f55710736","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class MotionSensorEvent(room: String, detected: Boolean, timestamp: Long)"}
{"id":"a01935e4-0522-4176-8699-24ba5b95f4b0","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class WindowLock(val locked: Boolean, val windowId: String) {\n  override def toString: String = s\"WindowLock(locked=$locked, windowId=$windowId)\"\n}"}
{"id":"f272af47-c8c0-4de9-9211-a7b6ab5a07f4","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class DoorLockStatus(doorId: String, isLocked: Boolean)"}
{"id":"de7e6550-e287-4040-b979-f9abb59273b5","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class CeilingFanSpeed(val fanId: String, val speedLevel: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CeilingFanSpeed => this.fanId == that.fanId && this.speedLevel == that.speedLevel\n    case _ => false\n  }\n  override def hashCode(): Int = (fanId.hashCode * 31) + speedLevel.hashCode\n}"}
{"id":"5ce1361a-5441-499a-b726-a42e5737836e","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class SmartPlugState(plugId: String, isActive: Boolean, energyUsage: Double)"}
{"id":"e11df414-50fa-4842-a45b-3c51d1fc4be3","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SprinklerZone(val zoneName: String, val isWatering: Boolean)\nobject SprinklerZone {\n  def unapply(sz: SprinklerZone): Option[(String, Boolean)] =\n    Some((sz.zoneName, sz.isWatering))\n}"}
{"id":"bab50a8d-0bcd-47c5-8d91-762ba67cc4d7","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class BlindsPosition(room: String, positionPercent: Int)"}
{"id":"d2d80999-a1af-4c8e-bebf-d3f57e922ea1","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SecurityCameraStatus(val cameraId: String, val isRecording: Boolean)\nobject SecurityCameraStatus {\n  def unapply(c: SecurityCameraStatus): Option[(String, Boolean)] =\n    Some((c.cameraId, c.isRecording))\n}"}
{"id":"ee3dc329-af22-4645-b915-94c9a77dc41f","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class VoiceAssistantConfig(assistantName: String, voiceRecognitionEnabled: Boolean)"}
{"id":"ec56e245-43c6-435a-8b43-884557512fb6","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class ThermostatSchedule(val scheduleId: String, val enabled: Boolean) {\n  override def toString: String =\n    \"ThermostatSchedule(\" + scheduleId + \", \" + enabled + \")\"\n}"}
{"id":"f5f9a4c1-d5bd-4ffe-9a02-d498cb4aa02a","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class RoomLightingSetting(room: String, brightness: Int, color: String)"}
{"id":"dcaba7a9-51eb-4297-b077-3afd7e0ab761","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class GarageDoorState(val doorNumber: Int, val status: String)"}
{"id":"3e48d651-ecd8-46a9-bfa2-eb12b5f14e70","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class AirPurifierMode(deviceId: String, mode: String, filterLevel: Int)"}
{"id":"71c926fd-ac12-4ec3-9d62-37bf126e34a9","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class HVACZone(val zone: String, val setPoint: Double)\nobject HVACZone {\n  def unapply(z: HVACZone): Option[(String, Double)] =\n    Some((z.zone, z.setPoint))\n}"}
{"id":"d57e1fd6-9a8c-403d-a162-947257856844","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class SmartSpeakerGroup(groupName: String, volumeLevel: Int)"}
{"id":"ee98a205-c665-4d02-b46c-08ad7842ffa4","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmokeDetectorBattery(val detectorId: String, val batteryLevel: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: SmokeDetectorBattery => detectorId == that.detectorId && batteryLevel == that.batteryLevel\n    case _ => false\n  }\n  override def hashCode(): Int = detectorId.hashCode + batteryLevel\n}"}
{"id":"fe532310-169e-4956-9cb7-b8281b55f808","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class OutdoorLightSchedule(zone: String, startTime: String, endTime: String)"}
{"id":"dd6bfaac-4bd9-4a98-95a2-acdccfc966db","timestamp":1746101640492,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class RefrigeratorTemperature(val fridgeId: String, val tempCelsius: Double)\nobject RefrigeratorTemperature {\n  def unapply(rt: RefrigeratorTemperature): Option[(String, Double)] =\n    Some((rt.fridgeId, rt.tempCelsius))\n}"}
{"id":"65045221-47a4-4776-b510-8d1869881832","timestamp":1746101654168,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class SmartThermostat(id: String, currentTemp: Double, isOn: Boolean)"}
{"id":"c9532397-a8c4-4473-82bf-cef646aec494","timestamp":1746101654168,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class DoorLock(val lockId: String, val isLocked: Boolean)\noverride def equals(obj: Any): Boolean =\n  obj match\n    case that: DoorLock => this.lockId == that.lockId && this.isLocked == that.isLocked\n    case _ => false\n\noverride def hashCode(): Int =\n  (lockId, isLocked).hashCode()\n\ndef toString: String =\n  s\"DoorLock($lockId, $isLocked)\""}
{"id":"41f9cc22-9d09-45fe-94e0-76a0d1f35601","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class LightSwitch(room: String, brightness: Int, isOn: Boolean)"}
{"id":"5c82ebfb-35e7-4035-b2e2-52110b7b0a75","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmartSpeaker(val name: String, val volume: Int, val isMuted: Boolean)\ndef getName = name\ndef getVolume = volume\ndef isSpeakerMuted = isMuted"}
{"id":"abc8085a-d232-4a87-a29f-37cb6f962f04","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class WindowShade(deviceId: String, position: Int)"}
{"id":"a9205ad3-fec5-472a-b232-bba985c7206f","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SecurityCamera(val cameraId: String, val recording: Boolean)\n\ndef canRecord = recording"}
{"id":"9902bfe7-bdbb-48af-a7f4-817fde3b6121","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class WaterLeakSensor(sensorId: String, isWet: Boolean, batteryLevel: Double)"}
{"id":"21ef547b-4129-4066-9f69-da0e4ffc2184","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class SmartOutlet(outletId: String, isOn: Boolean, powerUsage: Double)\n\ndef printStatus(outlet: SmartOutlet): String = outlet.toString"}
{"id":"6dc45d78-52c9-4637-b3b4-b3c513486054","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class GarageDoorOpener(val openerId: String, val isOpen: Boolean)\n\ndef isDoorOpen = isOpen"}
{"id":"3f86080d-7d3d-4d67-a31c-5ad4ef3bda8f","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class SprinklerZone(zoneId: String, isActive: Boolean, schedule: String)"}
{"id":"5562e10b-052e-4c03-9ed3-82191a158ced","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class MotionDetector(val detectorId: String, val motion: Boolean)\noverride def equals(obj: Any): Boolean =\n  obj match\n    case m: MotionDetector => detectorId == m.detectorId && motion == m.motion\n    case _ => false\n\ndef toString: String =\n  s\"MotionDetector($detectorId, $motion)\""}
{"id":"ca72719b-c523-4903-aad2-4dbc035fb741","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class SmartPlug(plugId: String, isEnabled: Boolean, wattage: Double)"}
{"id":"aad23ec2-6ea8-4747-a73c-4cdf1522d671","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class Humidifier(val humidifierId: String, val humidity: Double)\n\ndef getHumidity: Double = humidity"}
{"id":"4c6f8590-12d0-44e3-aeaa-b5ca2507e467","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class RoomSensor(sensorId: String, temperature: Double, humidity: Double)"}
{"id":"e602b363-2d2f-46e6-b74f-16adfa3b18c1","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class CurtainController(val name: String, val state: String)\nobject CurtainController:\n  def unapply(c: CurtainController): Option[(String, String)] =\n    Some((c.name, c.state))"}
{"id":"aeba1c8a-e355-44ab-9bf0-40945f29b04d","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class CeilingFan(fanId: String, speedLevel: Int, direction: String)"}
{"id":"be5bd38c-92ab-4d6b-b096-75f5020fb1fb","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmartAlarm(val alarmId: String, val isArmed: Boolean, val lastTriggered: String)\n\ndef getAlarmStatus: String =\n  if (isArmed) s\"Alarm $alarmId is armed.\"\n  else s\"Alarm $alarmId is disarmed.\""}
{"id":"4c5bccff-8d8a-4e48-bda9-857ca69b3acb","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class GarageSensor(sensorId: String, doorState: String, batteryLow: Boolean)"}
{"id":"f39780fe-1482-430c-b465-1efc9a9e7f43","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class AirQualityMonitor(val name: String, val co2Level: Int, val pm25: Int)\nobject AirQualityMonitor:\n  def unapply(a: AirQualityMonitor): Option[(String, Int, Int)] =\n    Some((a.name, a.co2Level, a.pm25))"}
{"id":"ecbc76ba-e41d-4de1-871d-3f696d962b37","timestamp":1746101654169,"category":"classes_for_data","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class SmokeAlarm(alarmId: String, isActive: Boolean, batteryLevel: Double)"}
{"id":"decbae58-f613-4e7e-8300-c65ea898dcd2","timestamp":1746101673137,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class DriverProfile(driverId: String, name: String, vehicleType: String)"}
{"id":"4593c702-b8d9-4a90-b79b-cc994b3653a4","timestamp":1746101673137,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class RiderRequest(val requestId: Int, val passengerName: String, val pickupLocation: String, val destination: String)\n\noverride def equals(obj: Any): Boolean =\n  obj match {\n    case other: RiderRequest =>\n      requestId == other.requestId &&\n      passengerName == other.passengerName &&\n      pickupLocation == other.pickupLocation &&\n      destination == other.destination\n    case _ => false\n  }\n\noverride def hashCode(): Int =\n  (requestId, passengerName, pickupLocation, destination).##"}
{"id":"c84d3703-0b58-411f-8b83-5f3e7825431b","timestamp":1746101673137,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class DispatchOrder(orderId: Long, riderId: String, driverId: String, scheduledAt: Long)"}
{"id":"f6a6c67d-7b63-407d-af42-bb20b3fcd8d7","timestamp":1746101673137,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class Vehicle(val licensePlate: String, val driverId: String, val capacity: Int)\n\noverride def equals(obj: Any): Boolean =\n  obj match {\n    case other: Vehicle =>\n      licensePlate == other.licensePlate && driverId == other.driverId && capacity == other.capacity\n    case _ => false\n  }\n\noverride def hashCode(): Int =\n  (licensePlate, driverId, capacity).##\n\noverride def toString: String =\n  s\"Vehicle($licensePlate, $driverId, $capacity)\""}
{"id":"138ffe1b-e752-49c9-9d70-2cc50364fa1b","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class TripAssignment(tripId: String, driver: DriverProfile, riderRequest: RiderRequest)"}
{"id":"af1e3359-8274-4287-bb82-ed58f383a5f3","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class Location(val latitude: Double, val longitude: Double)\n\noverride def equals(obj: Any): Boolean =\n  obj match {\n    case that: Location => latitude == that.latitude && longitude == that.longitude\n    case _ => false\n  }\n\noverride def hashCode(): Int =\n  (latitude, longitude).##"}
{"id":"7d304788-5c68-4b99-93ef-94d1c9c9eab0","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class RideStatusUpdate(tripId: String, oldStatus: RideStatus, newStatus: RideStatus, timestamp: Long)"}
{"id":"a4a9f880-a07a-445f-a240-89fc95af5c07","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class FareEstimate(val estimateId: Int, val tripDistance: Double, val estimatedFare: BigDecimal)\n\noverride def equals(obj: Any): Boolean =\n  obj match {\n    case f: FareEstimate =>\n      estimateId == f.estimateId &&\n      tripDistance == f.tripDistance &&\n      estimatedFare == f.estimatedFare\n    case _ => false\n  }\n\noverride def hashCode(): Int =\n  (estimateId, tripDistance, estimatedFare).##\n\noverride def toString =\n  s\"FareEstimate($estimateId, $tripDistance, $estimatedFare)\""}
{"id":"8739bb80-f662-4ffd-abfe-aa81edaf8915","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class DispatchQueue(drivers: List[DriverProfile], requests: List[RiderRequest])"}
{"id":"6deb9dfe-bd16-431e-bef6-8f864f64dac4","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class ActiveTrip(val tripId: String, val driverId: String, val riderId: String, val startTime: Long)\ndef canEqual(other: Any) = other.isInstanceOf[ActiveTrip]\n\noverride def equals(obj: Any): Boolean =\n  obj match {\n    case that: ActiveTrip =>\n      tripId == that.tripId && driverId == that.driverId && riderId == that.riderId && startTime == that.startTime\n    case _ => false\n  }\n\noverride def hashCode(): Int =\n  (tripId, driverId, riderId, startTime).hashCode()\n\ndef toString: String =\n  s\"ActiveTrip($tripId, $driverId, $riderId, $startTime)\""}
{"id":"2d8598c5-98c2-48ba-83d7-b584afac3609","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class GeoCoordinate(lat: Double, lng: Double)"}
{"id":"b0a168c4-1d97-4b42-b81f-3e82b825f1af","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class Cancellation(val cancelId: Long, val tripId: String, val reason: String)\nobject Cancellation {\n  def unapply(c: Cancellation): Option[(Long, String, String)] = Some((c.cancelId, c.tripId, c.reason))\n}"}
{"id":"f4001fc7-3005-45bb-80e7-57104340ff19","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class ShiftSchedule(driverId: String, startTime: Long, endTime: Long)"}
{"id":"fc0c417e-96ce-447d-9a4a-9123fca6f791","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class PaymentReceipt(val receiptId: String, val tripId: String, val amount: BigDecimal)\nobject PaymentReceipt {\n  def unapply(r: PaymentReceipt): Option[(String, String, BigDecimal)] =\n    Some((r.receiptId, r.tripId, r.amount))\n}"}
{"id":"6952234d-82de-4106-9351-21c88d9696c2","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class RiderRating(tripId: String, riderId: String, rating: Int, feedback: Option[String])"}
{"id":"9ef9687c-8c4b-47da-918b-44387e910d35","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class SurgeMultiplier(val city: String, val multiplier: Double)\nobject SurgeMultiplier {\n  def unapply(x: SurgeMultiplier): Option[(String, Double)] = \n    Some((x.city, x.multiplier))\n}"}
{"id":"961ade86-d1d2-4b76-8002-5cbff0327212","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class DriverAvailability(driverId: String, isOnline: Boolean, location: GeoCoordinate)"}
{"id":"c7dc44a7-c18b-423e-b764-829ec5e16207","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class RideCompletion(val tripId: String, val completedAt: Long)\nobject RideCompletion {\n  def unapply(rc: RideCompletion): Option[(String, Long)] = \n    Some((rc.tripId, rc.completedAt))\n}"}
{"id":"24aafbcb-39f3-45e8-9fef-78f95721d877","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class DispatchError(errorCode: String, message: String, timestamp: Long)"}
{"id":"ff69fc1c-15c8-4563-9927-3d281bd04590","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class DriverVehicleMapping(val driverId: String, val vehiclePlate: String)\ndef canEqual(other: Any): Boolean = other.isInstanceOf[DriverVehicleMapping]\n\noverride def equals(obj: Any): Boolean = {\n  obj match {\n    case dv: DriverVehicleMapping =>\n      driverId == dv.driverId && vehiclePlate == dv.vehiclePlate\n    case _ => false\n  }\n}\noverride def hashCode(): Int = (driverId, vehiclePlate).hashCode()\noverride def toString = s\"DriverVehicleMapping($driverId, $vehiclePlate)\""}
{"id":"044994c3-2d97-41e7-910d-2484cecc04f2","timestamp":1746101673138,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"enum RideStatus {\n  case Requested, Accepted, Ongoing, Completed, Cancelled\n}"}
{"id":"eb5fab58-233d-4e3a-8daf-ce8a645cf8ac","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class DriverProfile(driverId: String, name: String, vehicleType: String)\n"}
{"id":"226cd553-da6f-41ad-b76a-12bff361383a","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class RiderRequest(val requestId: String, val riderId: String, val pickupLocation: String, val dropoffLocation: String) {\n  override def equals(obj: Any): Boolean = {\n    obj match {\n      case other: RiderRequest =>\n        requestId == other.requestId && riderId == other.riderId && pickupLocation == other.pickupLocation && dropoffLocation == other.dropoffLocation\n      case _ => false\n    }\n  }\n  override def hashCode(): Int = requestId.hashCode + riderId.hashCode\n  override def toString: String = s\"RiderRequest($requestId, $riderId, $pickupLocation, $dropoffLocation)\"\n}\n"}
{"id":"e558d5f1-e484-4d15-9927-980aac58cdf6","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class RideDispatch(rideId: String, assignedDriver: String, assignedRider: String, etaMinutes: Int)\n"}
{"id":"a567684f-b2c2-4f49-945e-c4aae30285e1","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class Vehicle(val licensePlate: String, val model: String, val color: String)\n"}
{"id":"92fdff77-5ff4-469f-8949-ce8fb45e6649","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class DispatchZone(zoneName: String, boundaryCoordinates: List[(Double, Double)])\n"}
{"id":"4f50ed4b-6857-4fb9-ba21-b28603ec5a87","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class SurgePricing(val zoneName: String, val multiplier: Double) {\n  override def equals(that: Any): Boolean = that match {\n    case other: SurgePricing =>\n      this.zoneName == other.zoneName && this.multiplier == other.multiplier\n    case _ => false\n  }\n  override def hashCode(): Int = 31 * zoneName.hashCode + multiplier.hashCode()\n}\n"}
{"id":"83da212d-8b66-4352-868e-427e11827d4d","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class RideAssignment(driverId: String, riderId: String, startLocation: String, destination: String)\n"}
{"id":"b5f54499-b8b9-476c-9377-bf1dac44aa41","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class DispatchLog(val timestamp: Long, val action: String, val involvedId: String) {\n  override def toString: String = s\"DispatchLog($timestamp, $action, $involvedId)\"\n}\n"}
{"id":"a6dccad5-57ee-4567-83f7-be608ee8b987","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class TripFeedback(tripId: String, rating: Int, comment: String)\n"}
{"id":"bdb4433c-5574-45ae-af5f-ff0196879cb0","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class DriverAvailability(val driverId: String, val isAvailable: Boolean) {\n  override def equals(other: Any): Boolean = other match {\n    case that: DriverAvailability =>\n      driverId == that.driverId && isAvailable == that.isAvailable\n    case _ => false\n  }\n  override def hashCode(): Int = driverId.hashCode + (if (isAvailable) 1 else 0)\n}\n"}
{"id":"74a1ba67-a65f-441d-b82d-4b119d470665","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class RouteCandidate(driverId: String, routePolyline: List[(Double, Double)], estimatedTimeMinutes: Int)\n"}
{"id":"b14b9784-8bac-43ca-b3b4-a1163209967d","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class ScheduledPickup(val pickupId: String, val scheduledTime: Long, val driverId: String, val riderId: String) {}\n"}
{"id":"0f5021a4-605e-4886-a309-5f416b15b707","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class FareEstimate(riderId: String, estimatedFare: BigDecimal, currency: String)\n"}
{"id":"9fe31d6d-9458-4c62-8d69-51970cde2b26","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"enum RideStatus:\n  case Requested, Accepted, InProgress, Completed, Cancelled\n"}
{"id":"6d5ac31b-f2ac-4e08-80e4-6ed6dfec97c5","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class ZoneAssignment(val driverId: String, val zone: String) {\n  override def toString: String = s\"ZoneAssignment($driverId, $zone)\"\n}\n"}
{"id":"0a58c5d0-ebfd-415a-884a-4ae3d91d4bd5","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class DriverReputation(driverId: String, rating: Double, completedRides: Int)\n"}
{"id":"bb4b83a8-0b11-446c-946a-121a4c8d0cf6","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class MatchingScore(val requestId: String, val driverId: String, val score: Double)\n"}
{"id":"7509855b-13c1-42d3-a213-a7588f8f43d0","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class VehicleLocation(driverId: String, latitude: Double, longitude: Double, timestamp: Long)\n"}
{"id":"f7aedf11-3f7e-4a9d-89ed-3f12ca0de622","timestamp":1746101690750,"category":"classes_for_data","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"object RiderRequestExtractor {\n  def unapply(r: RiderRequest): Option[(String, String, String, String)] =\n    Some((r.requestId, r.riderId, r.pickupLocation, r.dropoffLocation))\n}\n"}
{"id":"4b031e64-de2c-4ed9-bc90-0ae5a71badfc","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class PassengerRecord(passengerId: Int, name: String, passportNumber: String, frequentFlyerStatus: Option[String])"}
{"id":"c877bf68-9285-48da-8884-dd10cf0281d5","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class FlightSchedule(val flightNumber: String, val origin: String, val destination: String, val departureTime: String) { override def toString: String = s\"Flight($flightNumber from $origin to $destination at $departureTime)\" }"}
{"id":"d0d3eaf2-bb50-48a2-9e51-e9146dbf13f8","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Ticket(flightNumber: String, passengerId: Int, seatNumber: String, ticketClass: String)"}
{"id":"6cadb223-15ac-4d9b-8f39-445fb4e30225","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class BoardingPass(val barcode: String, val flightNumber: String, val seat: String) { override def equals(obj: Any): Boolean = obj match { case that: BoardingPass => this.barcode == that.barcode && this.flightNumber == that.flightNumber && this.seat == that.seat case _ => false } override def hashCode: Int = (barcode, flightNumber, seat).## }"}
{"id":"e2ff5c37-7d6b-4327-8e22-1b4db385f9be","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class BookingReference(referenceNumber: String, tickets: List[Ticket], passengerInfo: PassengerRecord, bookingStatus: String)"}
{"id":"6b2bdbf5-d16e-4d55-9679-5d0a51f6b901","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class SeatAllocation(val seatNumber: String, val ticketNumber: String) { override def toString: String = seatNumber + \"->\" + ticketNumber }"}
{"id":"d3774f1e-bf1b-4dfa-a863-e5ba6540932c","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class FlightDetails(flightNumber: String, airline: String, origin: String, destination: String, durationMinutes: Int)"}
{"id":"3af1976b-ef76-4990-8a5b-14e64e2a26c9","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class FareDetails(val ticketNumber: String, val price: BigDecimal, val currency: String)"}
{"id":"5045a8cd-2aee-484f-97bb-9689c49d5985","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class CancellationRequest(ticketNumber: String, reason: String, requestDate: String)"}
{"id":"a107fcca-b597-4b6c-97ae-868b816fa9e9","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class CheckInInfo(val passengerId: Int, val flightNumber: String, val baggageCount: Int) { override def equals(obj: Any): Boolean = obj match { case i: CheckInInfo => i.passengerId == passengerId && i.flightNumber == flightNumber && i.baggageCount == baggageCount case _ => false } override def hashCode: Int = (passengerId, flightNumber, baggageCount).## }"}
{"id":"9ab343ba-efef-4d18-93f7-0952fe2d3aa2","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class PaymentTransaction(transactionId: String, amount: BigDecimal, method: String, successful: Boolean)"}
{"id":"ef4371d7-7ecd-4a41-881d-f10e6ab88f2f","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class CrewMember(val crewId: Int, val name: String, val position: String)"}
{"id":"91bb73f9-9471-46f6-b040-fa336aaaf41e","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class LuggageTag(tagId: String, ownerPassengerId: Int, destinationAirport: String)"}
{"id":"426a3a0a-1375-4587-aba6-67a356ba0e3f","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class FlightGate(val gateNumber: String, val terminal: String)"}
{"id":"90f06a11-aac9-44be-af6c-6d75074d3a68","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Airport(airportCode: String, city: String, country: String)"}
{"id":"19384ec0-3da7-42b1-a455-5d79fc5526a7","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class LoyaltyAccount(val passengerId: Int, val pointsBalance: Long, val tierLevel: String) { override def toString: String = s\"LoyaltyAccount($passengerId, $pointsBalance, $tierLevel)\" }"}
{"id":"744aab9b-43bd-4004-9ddd-16098b7ec15d","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Seat(seatNumber: String, classType: String, extraLegroom: Boolean)"}
{"id":"003e0999-1153-4f37-8e5c-9e8ea925bd90","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class UpgradeOffer(val offerId: Int, val bookingReference: String, val newClass: String) { override def equals(obj: Any): Boolean = obj match { case o: UpgradeOffer => offerId == o.offerId && bookingReference == o.bookingReference && newClass == o.newClass case _ => false } override def hashCode: Int = (offerId, bookingReference, newClass).## }"}
{"id":"ddb0310e-fcdd-4bb8-a563-fe9fe5956055","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class FlightStatusUpdate(flightNumber: String, status: String, updatedTime: String)"}
{"id":"991ff9d1-fee2-4fa1-94b7-8298686b4741","timestamp":1746101703653,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class PilotLicense(val pilotId: Int, val licenseNumber: String, val validUntil: String) { override def toString: String = s\"PilotLicense($pilotId, $licenseNumber, $validUntil)\" }"}
{"id":"2b58a71e-ec8a-4720-b4ac-1acc783848ec","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Passenger(name: String, passportNumber: String, frequentFlyerNumber: Option[String])"}
{"id":"c00f48c8-22ef-4420-8046-25c9870229e0","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class FlightRoute(val origin: String, val destination: String, val stopOvers: List[String]){\n  override def toString: String = s\"FlightRoute(origin=$origin, destination=$destination, stopOvers=$stopOvers)\"\n}"}
{"id":"f735a4c2-9c42-4bd5-87e0-3a07cc966d32","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Ticket(flightNumber: String, seatNumber: String, passenger: Passenger, ticketPrice: Double)"}
{"id":"4852ad42-d7c6-4e7d-9034-48475a7bd55e","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class Gate(val code: String, val terminal: Int){\n  override def equals(obj: Any): Boolean = obj match {\n    case that: Gate => code == that.code && terminal == that.terminal\n    case _ => false\n  }\n  override def hashCode: Int = code.hashCode * 31 + terminal.hashCode\n}"}
{"id":"664ec2c6-e52c-43c4-a503-7f177455db9f","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class BoardingPass(ticket: Ticket, gate: String, boardingTime: String)"}
{"id":"43b41f02-da5c-4f53-a139-8801c1213052","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class Baggage(val tagNumber: String, val weightKg: Double){\n  override def toString: String = s\"Baggage(tagNumber=$tagNumber, weightKg=$weightKg)\"\n}"}
{"id":"236f590d-6337-4d31-88e8-ebf95190d3dd","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Aircraft(model: String, registrationNumber: String, seatCapacity: Int)"}
{"id":"863bb5fa-704c-4f0b-9bb5-19ee0a5374cf","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class FareClass(val code: String, val description: String){\n  // No equals/hashCode, so compared by reference\n}"}
{"id":"08b76f8a-fa8a-4f50-a77a-beb6634d30dd","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Reservation(reference: String, passenger: Passenger, ticket: Ticket)"}
{"id":"5dad8b65-3fe8-4c59-a74b-2d81a799af79","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class CabinCrew(val name: String, val employeeId: String){\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CabinCrew =>\n      name == that.name && employeeId == that.employeeId\n    case _ => false\n  }\n  override def hashCode: Int = name.hashCode * 37 + employeeId.hashCode\n}"}
{"id":"8034bc07-49cd-4107-bb11-862e1760772f","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Airport(code: String, name: String, city: String, country: String)"}
{"id":"a57218f8-accb-41a3-b345-caf8219edb84","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class CheckinCounter(val counterNumber: Int, val airportCode: String){\n  override def toString: String = s\"CheckinCounter(counterNumber=$counterNumber, airportCode=$airportCode)\"\n}"}
{"id":"68f97132-dc46-4f3d-a36f-f6f4c8e78909","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Flight(flightNumber: String, aircraft: Aircraft, departure: Airport, arrival: Airport, scheduledTime: String)"}
{"id":"97045090-0fb0-47ef-867c-6d2c8abbec92","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class LoyaltyProgram(val programName: String, val membershipId: String){\n  override def equals(obj: Any): Boolean = obj match {\n    case that: LoyaltyProgram =>\n      programName == that.programName && membershipId == that.membershipId\n    case _ => false\n  }\n  override def hashCode: Int = programName.hashCode * 41 + membershipId.hashCode\n}"}
{"id":"f8555790-4745-49b5-aa1a-9e5413e9e1b7","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Booking(bookingId: String, passengers: List[Passenger], flight: Flight)"}
{"id":"895031c7-7f8a-453b-85a6-7eef5740b072","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"enum SeatClass {\n  case Economy, Business, First\n}"}
{"id":"7492a7c7-49af-43a6-9c69-5e5636a5f7a0","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class MealOption(val description: String, val vegetarian: Boolean){\n  override def toString: String = s\"MealOption(description=$description, vegetarian=$vegetarian)\"\n}"}
{"id":"ca82846f-6830-4c34-807e-2d55d75cb223","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class InFlightService(serviceName: String, availableOnSeatClass: SeatClass)"}
{"id":"52b81728-838f-4237-9e3c-3fad0535b112","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class FlightStatus(val code: String){\n  override def toString: String = s\"FlightStatus(code=$code)\"\n}\nobject FlightStatus {\n  def unapply(fs: FlightStatus): Option[String] = Some(fs.code)\n}"}
{"id":"ec52e78a-1fce-420f-95bf-028834074e4d","timestamp":1746101715932,"category":"classes_for_data","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class RefundRequest(ticket: Ticket, reason: String, requestedDate: String)"}
{"id":"7bc685b9-0b3a-489e-81ec-ebdb6a1df366","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class GuestProfile(name: String, email: String, phone: String)"}
{"id":"28a6e9b5-46b6-49fd-973d-e619633f5764","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class ReservationDetails(val guestName: String, val roomType: String, val checkIn: String, val checkOut: String)\n{\n  override def equals(obj: Any): Boolean = obj match {\n    case that: ReservationDetails =>\n      this.guestName == that.guestName && this.roomType == that.roomType &&\n      this.checkIn == that.checkIn && this.checkOut == that.checkOut\n    case _ => false\n  }\n  override def hashCode(): Int =\n    guestName.hashCode ^ roomType.hashCode ^ checkIn.hashCode ^ checkOut.hashCode\n  override def toString: String =\n    s\"ReservationDetails($guestName, $roomType, $checkIn, $checkOut)\"\n}"}
{"id":"d5dd09bf-38ea-4dc4-bab1-65c19e15da28","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class RoomRate(roomType: String, dailyRate: BigDecimal, currency: String)"}
{"id":"bbd8f890-e138-4205-8af6-abc0b9bef378","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class HotelRoom(var number: Int, var roomType: String, var isAvailable: Boolean)\n{\n  override def toString: String = \n    \"HotelRoom(number=\" + number + \", roomType=\" + roomType + \", isAvailable=\" + isAvailable + \")\"\n}"}
{"id":"111a2167-1db6-4de9-9f47-b44f0e0a3f82","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class BookingConfirmation(reservationId: String, guestName: String, status: String)"}
{"id":"afefb18a-72a6-4343-92ae-5f662ebb5e1a","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class GuestAddress(val street: String, val city: String, val country: String)\n{\n  def canEqual(that: Any): Boolean = that.isInstanceOf[GuestAddress]\n  override def equals(obj: Any): Boolean = obj match {\n    case that: GuestAddress =>\n      this.street == that.street && this.city == that.city && this.country == that.country\n    case _ => false\n  }\n  override def hashCode(): Int =\n    street.hashCode + 37 * city.hashCode + 17 * country.hashCode\n}"}
{"id":"e82775a4-d455-478c-9460-867fa5751992","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class PaymentDetails(cardNumber: String, cardHolder: String, expiry: String)"}
{"id":"d99d8da1-72dd-45ee-b5ec-6729ba03de3a","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class RoomMaintenance(val roomNumber: Int, val scheduledDate: String)\nobject RoomMaintenance {\n  def unapply(r: RoomMaintenance): Option[(Int, String)] = Some((r.roomNumber, r.scheduledDate))\n}"}
{"id":"b564d891-2475-4105-92e8-9421d58ecfa9","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class LoyaltyMember(memberId: String, guestName: String, points: Int)"}
{"id":"55f34705-5be1-4756-b85d-7b6e3e5cca22","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class InvoiceInfo(val invoiceId: String, val amount: Double, val date: String)\n{\n  override def toString: String = \n    s\"InvoiceInfo(invoiceId=$invoiceId, amount=$amount, date=$date)\"\n}"}
{"id":"d298af79-03bf-4990-8067-c57dec5e43ff","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class SpecialRequest(requestType: String, description: String)"}
{"id":"82a24edf-f977-4b8b-878a-0edcee89fa64","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class AmenityRecord(val reservationId: String, val amenity: String)\nobject AmenityRecord {\n  def unapply(ar: AmenityRecord): Option[(String, String)] = Some((ar.reservationId, ar.amenity))\n}"}
{"id":"82f13f48-75bc-490a-97d4-9420707b5367","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class ReservationStatusUpdate(reservationId: String, status: String, timestamp: String)"}
{"id":"b5089e65-c1b3-4cfc-ae8d-3fd0066f90d4","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class CheckInEntry(val reservationId: String, val checkInTime: String)\nobject CheckInEntry {\n  def unapply(c: CheckInEntry): Option[(String, String)] = Some((c.reservationId, c.checkInTime))\n}"}
{"id":"88c011b7-067c-4d89-b736-a08dc78b99d5","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"enum RoomType:\n  case Standard, Deluxe, Suite, Family"}
{"id":"3eb8062c-7959-432d-8c26-08ff1c4b30a3","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class GuestEmergencyContact(val reservationId: String, val contactName: String, val contactNumber: String)\nobject GuestEmergencyContact {\n  def unapply(ec: GuestEmergencyContact): Option[(String, String, String)] =\n    Some((ec.reservationId, ec.contactName, ec.contactNumber))\n}"}
{"id":"4466992f-d746-4fdb-9be4-5ca29cc89be7","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class CancellationPolicy(policyId: String, refundable: Boolean, penaltyAmount: Double)"}
{"id":"6dd0e32b-aa6b-4e8a-a991-278ecc78ab89","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class UpgradeOffer(val offerId: String, val guestName: String, val upgradeType: String)\n{\n  override def equals(obj: Any): Boolean = obj match {\n    case that: UpgradeOffer =>\n      this.offerId == that.offerId && this.guestName == that.guestName && this.upgradeType == that.upgradeType\n    case _ => false\n  }\n  override def hashCode(): Int =\n    offerId.hashCode + 31 * guestName.hashCode + 11 * upgradeType.hashCode\n}"}
{"id":"d7f93ad6-2e61-42e7-8189-5e10af05bfaa","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class DailyHousekeepingRecord(roomNumber: Int, date: String, status: String)"}
{"id":"e7748769-b8e0-463f-b91c-e3b78ad374e2","timestamp":1746101731501,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class GroupReservation(val groupName: String, val roomsBooked: Int, val arrivalDate: String)\nobject GroupReservation {\n  def unapply(gr: GroupReservation): Option[(String, Int, String)] =\n    Some((gr.groupName, gr.roomsBooked, gr.arrivalDate))\n}"}
{"id":"376ebe4f-0d09-438b-88e3-abcf68a780d0","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class Room(roomNumber: Int, roomType: String, pricePerNight: Double)"}
{"id":"00942cc6-f922-43fa-a4e6-bea76027ee2a","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class Guest(val guestId: Int, val fullName: String, val email: String) {\n  override def equals(that: Any): Boolean = that match {\n    case g: Guest => guestId == g.guestId && fullName == g.fullName && email == g.email\n    case _ => false\n  }\n  override def hashCode: Int = guestId * 31 + fullName.hashCode * 17 + email.hashCode\n  override def toString: String = s\"Guest($guestId, $fullName, $email)\"\n}"}
{"id":"4f995970-0bc4-42ae-a20c-9a0f67c3d33a","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class Reservation(reservationId: Int, guest: Guest, room: Room, checkIn: String, checkOut: String)"}
{"id":"9fd4a503-3c98-4bc0-97de-2af6238a3959","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class Hotel(val hotelId: Int, val name: String, val address: String)"}
{"id":"1cdedcac-3921-42a1-a7e4-8329750edcdb","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class BookingReference(id: String, reservation: Reservation)"}
{"id":"5db26fd3-30b8-41ad-9bc7-0b1fcaace4c2","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class PaymentDetails(val cardNumber: String, val expiry: String, val guestName: String) {\n  override def toString: String = s\"Payment($cardNumber, $expiry, $guestName)\"\n}"}
{"id":"9d5bd528-36a8-4802-ae0b-74b5c791818b","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class DiscountCode(code: String, amount: Double, validUntil: String)"}
{"id":"03677665-2d6b-42b0-8068-4dc362ccb5f4","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class StayDuration(val nights: Int, val startDate: String, val endDate: String)"}
{"id":"9162f154-d0c3-4866-bc25-af2edf9a756f","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class Invoice(invoiceNumber: String, reservationId: Int, totalAmount: Double)"}
{"id":"360ecc35-1f67-411e-9b46-c4a8d38d0173","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class Address(val street: String, val city: String, val postalCode: String) {\n  override def equals(o: Any): Boolean = o match {\n    case a: Address => street == a.street && city == a.city && postalCode == a.postalCode\n    case _ => false\n  }\n  override def hashCode: Int = street.hashCode ^ city.hashCode ^ postalCode.hashCode\n}"}
{"id":"99ae46e4-e12a-4355-93fd-86703178259a","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class Amenity(name: String, isAvailable: Boolean)"}
{"id":"797f3cf7-17a8-48b8-beed-1dbf36954599","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class LoyaltyAccount(val memberId: Int, val guest: Guest, val points: Int)"}
{"id":"c04b966c-f890-4f42-86e1-64664a2a201f","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class RoomType(typeName: String, maxOccupancy: Int, description: String)"}
{"id":"461a2a07-95d1-49ba-8dc9-e2bf9c285259","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class Staff(val staffId: Int, val fullName: String, val role: String) {\n  override def toString: String = s\"Staff($staffId, $fullName, $role)\"\n}"}
{"id":"cbe79fcd-db3c-4477-b666-fef64ec9d030","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class CancellationPolicy(policyName: String, description: String, refundPercent: Double)"}
{"id":"df9a3ce8-5de8-441b-9b10-ca35d86783a5","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class SpecialRequest(val text: String, val isUrgent: Boolean)\nobject SpecialRequest {\n  def unapply(s: SpecialRequest): Option[(String, Boolean)] =\n    Some((s.text, s.isUrgent))\n}"}
{"id":"f73ea87b-9312-4e16-ab8d-84bc64b121d5","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class GuestFeedback(feedbackId: Int, guestId: Int, rating: Int, comments: String)"}
{"id":"c9534748-c85d-47b9-bdd2-8ab44bfda7cc","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class PaymentTransaction(val transactionId: String, val amount: Double)\nobject PaymentTransaction {\n  def unapply(pt: PaymentTransaction): Option[(String, Double)] =\n    Some((pt.transactionId, pt.amount))\n}"}
{"id":"7171cefe-ac54-4a4c-8128-ad594ee7f8b7","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"enum ReservationStatus:\n  case Booked, CheckedIn, CheckedOut, Cancelled"}
{"id":"4c0e7fa1-8a31-4c4f-8ba7-ddb37dfae094","timestamp":1746101742474,"category":"classes_for_data","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class RoomServiceOrder(val orderId: Int, val guest: Guest, val description: String)\nobject RoomServiceOrder {\n  def unapply(o: RoomServiceOrder): Option[(Int, Guest, String)] =\n    Some((o.orderId, o.guest, o.description))\n}"}
{"id":"24b51a34-d41a-478f-b8d5-9c21f66c1ec5","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class DeliveryAddress(street: String, city: String, postalCode: String, apartment: Option[String])"}
{"id":"5608d15f-5681-46e2-ad2f-060bf99ba14f","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Courier(val name: String, val vehicleType: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: Courier =>\n      this.name == that.name && this.vehicleType == that.vehicleType\n    case _ => false\n  }\n\n  override def hashCode(): Int ={\n    name.hashCode + 31 * vehicleType.hashCode\n  }\n}"}
{"id":"f993a5ad-2dca-4d59-b856-7bf8de077ee3","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class RestaurantMenu(itemId: Int, itemName: String, price: Double, isVeg: Boolean)"}
{"id":"a212de45-2398-4a75-8c20-c3c01abfcdc6","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Customer(val customerId: Int, val fullName: String) {\n  override def toString: String = s\"Customer($customerId, $fullName)\"\n}"}
{"id":"656ad876-842c-4b4f-8a35-5d7d210f317d","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class FoodOrder(orderId: String, customerId: Int, items: List[String], deliveryAddress: DeliveryAddress)"}
{"id":"cff2975a-82f4-4669-9ae9-99e8038019c7","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Rider(val riderId: Int, val phone: String, val currentZone: String)\n"}
{"id":"57274488-c718-4a6f-969d-d6b0948a593a","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class OrderAssignment(assignmentId: Long, riderId: Int, orderId: String, assignedAt: Long)"}
{"id":"a50cf988-fe3d-42e3-b0df-a4e2a889092c","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"object DeliveryZone {\n  def unapply(zone: DeliveryZone): Option[(String, Int)] = Some((zone.name, zone.capacity))\n}\nclass DeliveryZone(val name: String, val capacity: Int)"}
{"id":"e3b40e72-b295-4b34-8a48-aedaddcd3990","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class PaymentTransaction(transactionId: String, amount: Double, status: PaymentStatus)\n\nenum PaymentStatus:\n  case Successful, Failed, Pending"}
{"id":"acb64823-792e-4bf1-a066-5f0db84f2ca2","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliveryEstimate(val orderId: String, val etaMinutes: Int) {\n  override def equals(that: Any): Boolean = that match {\n    case x: DeliveryEstimate =>\n      orderId == x.orderId && etaMinutes == x.etaMinutes\n    case _ => false\n  }\n  override def hashCode(): Int = orderId.hashCode * 13 + etaMinutes\n}"}
{"id":"63e94904-b75c-4528-b766-20a62f21e551","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class CourierLocationUpdate(riderId: Int, latitude: Double, longitude: Double, timestamp: Long)"}
{"id":"388ff9b1-f2e6-4c20-a0c9-1f836f5fcf0d","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class MenuItem(val menuId: Int, val name: String, val description: String, val basePrice: Double)"}
{"id":"111a1263-4199-447c-9dc9-068624dc6c62","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class RouteLeg(startLocation: String, endLocation: String, distanceKm: Double, estimatedMinutes: Int)"}
{"id":"7d1d5e00-4c3d-4f08-9a3b-8e1f1599499f","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliveryFee(val baseFee: Double, val surgeMultiplier: Double) {\n  def totalFee: Double = baseFee * surgeMultiplier\n}"}
{"id":"70a5914f-a02c-4d5a-8a82-2fb1eb7f6e88","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class PrepSchedule(orderId: String, restaurantId: Int, prepStart: Long, prepEnd: Long)"}
{"id":"2a85b934-3b00-4e77-8f5a-fa9f6157a7e4","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"object RiderShift {\n  def unapply(r: RiderShift): Option[(Int, Long, Long)] =\n    Some((r.riderId, r.shiftStart, r.shiftEnd))\n}\nclass RiderShift(val riderId: Int, val shiftStart: Long, val shiftEnd: Long)"}
{"id":"a70a80ad-b9cc-453d-9f9a-e589dc25b0f5","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class ZonePerformance(zoneName: String, avgDeliveryTime: Double, completedOrders: Int)"}
{"id":"c1e60335-fee5-4aa6-b8d5-1b88c4d47266","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class OrderTracking(val trackingId: String, val orderId: String, val lastUpdate: Long)\n"}
{"id":"898e0ad8-beab-4b24-bc89-942cbcac102f","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class CustomerFeedback(orderId: String, rating: Int, comment: Option[String], submittedAt: Long)"}
{"id":"f56a47ec-1fa9-48dd-a368-e0a2a294f718","timestamp":1746101754913,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class PackedOrder(val orderId: String, val packagingTime: Long, val packedBy: String)"}
{"id":"4defbbed-0997-40ef-af9f-498ee6c3a943","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class DeliveryOrder(orderId: Int, customerName: String, address: String, items: List[String], totalCost: Double)"}
{"id":"35222c33-81a9-4b47-85b8-9ff19b1ea99a","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class FoodItem(val itemId: String, val itemName: String, val quantity: Int, val pricePerUnit: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: FoodItem =>\n      this.itemId == that.itemId &&\n      this.itemName == that.itemName &&\n      this.quantity == that.quantity &&\n      this.pricePerUnit == that.pricePerUnit\n    case _ => false\n  }\n  override def hashCode: Int = {\n    (itemId, itemName, quantity, pricePerUnit).##\n  }\n  override def toString: String =\n    s\"FoodItem($itemId, $itemName, $quantity, $pricePerUnit)\"\n}"}
{"id":"41a71855-f355-43d9-a404-fcd2904a59fe","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class DeliveryVehicle(vehicleId: String, driverName: String, capacityInKg: Double, isAvailable: Boolean)"}
{"id":"5f30a9fe-72ce-4d4e-b047-c7a0e573ce9d","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Restaurant(val restaurantId: Int, val name: String, val location: String)"}
{"id":"c28835c2-afdd-4354-af82-027e4becb27e","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class DeliveryDriver(driverId: Int, fullName: String, phoneNumber: String, assignedVehicleId: Option[String])"}
{"id":"d1bc74dc-7906-4b9f-b08b-8a2c284d3528","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Customer(val customerId: Int, val fullName: String, val email: String, val preferredPayment: String) {\n  override def toString: String = s\"Customer($customerId, $fullName, $email, $preferredPayment)\"\n}"}
{"id":"c8802e9f-8401-4272-ba8e-f8b587f563f9","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class OrderStatusUpdate(orderId: Int, status: OrderStatus, updatedTime: Long)\nenum OrderStatus {\n  case Pending, Preparing, OutForDelivery, Delivered, Cancelled\n}"}
{"id":"c627c138-9f85-4e84-9330-b0a56c571781","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliveryRoute(val routeId: String, val stops: List[String]) {\n  override def equals(obj: Any): Boolean = {\n    obj match {\n      case that: DeliveryRoute => this.routeId == that.routeId && this.stops == that.stops\n      case _ => false\n    }\n  }\n  override def hashCode: Int = (routeId, stops).##\n}"}
{"id":"f935400f-1ae3-4b84-9e32-2a8de37bf783","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class RestaurantMenu(restaurantId: Int, availableItems: List[FoodItem], lastUpdated: Long)"}
{"id":"7141a514-c515-4222-b37b-8fdf8bd705f3","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliveryAssignment(val assignmentId: Int, val driverId: Int, val orderId: Int, val assignedTime: Long)"}
{"id":"2f230a6b-3181-4010-919d-54bb61369485","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class CustomerFeedback(orderId: Int, customerId: Int, rating: Int, comments: String)\nobject FeedbackProcessor {\n  def extractRating(feedback: CustomerFeedback): Int = feedback match {\n    case CustomerFeedback(_, _, rating, _) => rating\n  }\n}"}
{"id":"05662024-66f7-4c16-a0b4-6a999810b87f","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Promotion(val promoCode: String, val discountPercent: Double, val validTill: Long)\nobject Promotion {\n  def unapply(p: Promotion): Option[(String, Double, Long)] = Some((p.promoCode, p.discountPercent, p.validTill))\n}"}
{"id":"c591c56d-49fc-4b4d-9b94-c39333e512e8","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class DeliveryWindow(startTimestamp: Long, endTimestamp: Long)\nobject DeliveryWindowLogic {\n  def overlaps(w1: DeliveryWindow, w2: DeliveryWindow): Boolean =\n    w1.endTimestamp > w2.startTimestamp && w2.endTimestamp > w1.startTimestamp\n}"}
{"id":"afe8ec03-65d0-4771-a2bf-8352883838ba","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class PartnerRestaurant(val name: String, val active: Boolean)\nobject PartnerRestaurant {\n  def unapply(r: PartnerRestaurant): Option[(String, Boolean)] = Some((r.name, r.active))\n}"}
{"id":"3051904b-d142-43e3-b40a-57d5be601cc4","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class LogisticsBatch(batchId: String, vehicleId: String, deliveryOrderIds: List[Int])"}
{"id":"5dd9c854-0bab-43eb-bec1-4675f8b07fa2","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Address(val street: String, val city: String, val zipCode: String)\nobject Address {\n  def unapply(addr: Address): Option[(String, String, String)] = Some((addr.street, addr.city, addr.zipCode))\n}"}
{"id":"cbb128d5-5e08-4843-874b-abecd3747ce6","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class CourierTracking(orderId: Int, checkpoint: String, timestamp: Long)"}
{"id":"9c0118bd-3eba-444a-9680-9cb084e64be7","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class PaymentRecord(val paymentId: Int, val orderId: Int, val amount: Double, val method: String) {\n  override def toString: String = s\"PaymentRecord($paymentId, $orderId, $amount, $method)\"\n}"}
{"id":"b90754ff-94c2-40b1-9c29-d15d05d73e3a","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class InventoryUpdate(itemId: String, quantityChange: Int, updatedBy: String, timestamp: Long)"}
{"id":"1555cfcf-0371-48e8-b17e-8309b0376ced","timestamp":1746101770191,"category":"classes_for_data","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Warehouse(val warehouseId: Int, val location: String, val capacity: Int)"}
{"id":"8fad9deb-4ee4-42b1-840a-2b93f6380112","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Track(title: String, artist: String, duration: Int)"}
{"id":"8508efd6-12e4-4ddc-95a2-574f17f0e7c7","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Album(name: String, releaseYear: Int, tracks: List[Track])"}
{"id":"95ec3769-a494-4f34-a1c1-894782da153c","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Playlist(name: String, creator: String, songs: List[Track])"}
{"id":"5a825935-f05f-4be8-851f-706be0430569","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class StreamSession(userId: String, startedAt: Long, trackPlayed: Option[Track])"}
{"id":"c62770cf-8920-43ca-8c8e-0f5835f241c2","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class UserProfile(username: String, subscriptionTier: SubscriptionType)"}
{"id":"99f8b663-36f1-49e9-8330-4df174777f43","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"enum SubscriptionType:\n  case Free, Premium, Family"}
{"id":"157cde0d-064c-41fe-9d11-d92f1d6bde94","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class ListeningHistory(userId: String, playedTracks: List[Track])"}
{"id":"ff244da8-6c02-4db2-a8df-3fc8913e845c","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class ArtistProfile(name: String, genre: String)"}
{"id":"dbcbeee0-719a-43cc-aec0-88b0093edabb","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class FavoriteTracks(userId: String, favorites: Set[Track])"}
{"id":"efb9ce7c-8dab-4be4-a085-08491eabb160","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class DownloadedAlbum(album: Album, offlineTimestamp: Long)"}
{"id":"3960f474-b6d5-41bb-9818-43efd6382a64","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class PlaylistEntry(val trackTitle: String, val artistName: String, val order: Int) {\n  def toString: String = s\"[${order}] ${artistName} - ${trackTitle}\"\n  // equals and hashCode not provided\n}"}
{"id":"1f3e8126-4841-45b0-93cb-57bd17bd40d3","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class UserAccount(val email: String, val password: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: UserAccount => this.email == that.email && this.password == that.password\n    case _ => false\n  }\n  override def hashCode(): Int = email.hashCode + password.hashCode\n}"}
{"id":"fcd027ea-e31a-4b06-91d0-c502d7937a12","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class TrackStat(val trackId: String, val playCount: Long) {\n  override def toString: String = s\"TrackStat($trackId, $playCount)\"\n}"}
{"id":"773bd6cb-ecdd-4eb5-9ab8-2415b7ce595b","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class QueueItem(val songTitle: String, val queuedBy: String, val timestamp: Long)"}
{"id":"a97fb62f-df12-4953-a1bf-51b6d2a3df17","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class StreamingEvent(val user: String, val track: String, val timestamp: Long) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: StreamingEvent =>\n      this.user == that.user &&\n      this.track == that.track &&\n      this.timestamp == that.timestamp\n    case _ => false\n  }\n  override def hashCode(): Int =\n    (user, track, timestamp).hashCode()\n}"}
{"id":"eb457b51-a2c5-45b0-93ce-5f753fe24db5","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"object ManualTrackUnapply {\n  def unapply(arg: TrackManual): Option[(String, String, Int)] =\n    Some((arg.title, arg.artist, arg.lengthSec))\n}\nclass TrackManual(val title: String, val artist: String, val lengthSec: Int)"}
{"id":"25ceb822-c580-4d70-9b0e-e2c3ff608fbe","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class PlaylistManual(val name: String, val tracks: List[String])"}
{"id":"f52569e8-0ec1-4ce9-9cbe-ec349a0dfda7","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class ArtistManual(val stageName: String, val mainGenre: String) {\n  override def toString: String = s\"ArtistManual($stageName, $mainGenre)\"\n}"}
{"id":"149f2ff6-3970-439a-815d-f8a8aec73b66","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class PremiumUser(val userId: String, val validUntil: Long)"}
{"id":"84d9169e-6032-410d-ac37-49db017397f3","timestamp":1746101781153,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class DownloadRecord(val user: String, val song: String)"}
{"id":"aeb409ac-9e95-4814-84f4-b0344ee7d9e1","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Song(title: String, artist: String, durationSeconds: Int, album: String)"}
{"id":"1884b9e0-a633-415c-8305-11d2f1903d4d","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Playlist(name: String, songs: List[Song], isPublic: Boolean)"}
{"id":"d13f5f6a-7bfb-4b63-a0c8-495d5478766c","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class UserProfile(userId: Int, username: String, premiumMember: Boolean)"}
{"id":"7fd8d3d4-f322-45ea-962b-e37f8775fd1b","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Album(name: String, releaseYear: Int, tracks: List[Song])"}
{"id":"ed3a789d-8715-41ec-a2bb-5f44a2a20740","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Device(deviceId: String, userId: Int, deviceType: String)"}
{"id":"b377ed53-59ee-435b-ba87-75a82514707c","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class StreamingSession(sessionId: String, user: UserProfile, active: Boolean)"}
{"id":"14cb0149-d87e-424d-b195-4038870674d3","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class SubscriptionUpdate(user: UserProfile, previousStatus: String, newStatus: String)"}
{"id":"1637c6e9-9fa3-42a5-bd57-b777cab82495","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Genre(name: String, description: String)"}
{"id":"33a728ab-f18a-4b61-ad3d-245c700b97d5","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"enum StreamQuality:\n  case Low, Medium, High, Ultra\n\ncase class StreamSettings(user: UserProfile, quality: StreamQuality, shuffleEnabled: Boolean)"}
{"id":"2a5fbc61-d958-4d77-9369-83564a556e3c","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class LikedSong(user: UserProfile, song: Song, likedAt: Long)"}
{"id":"9e988268-066b-4f9b-acc4-6eb9ba0987a0","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class ManualSong(t: String, a: String, d: Int, al: String):\n  val title = t\n  val artist = a\n  val durationSeconds = d\n  val album = al\n  override def equals(obj: Any): Boolean =\n    obj match\n      case s: ManualSong => title == s.title && artist == s.artist && durationSeconds == s.durationSeconds && album == s.album\n      case _ => false\n  override def hashCode(): Int =\n    title.hashCode + artist.hashCode * 31 + durationSeconds + album.hashCode * 13\n  override def toString: String = s\"ManualSong($title, $artist, $durationSeconds, $album)\""}
{"id":"9b7b5b64-5794-4591-b946-f294731288b3","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class RegularPlaylist(n: String, s: List[ManualSong], pub: Boolean):\n  var name = n\n  var songs = s\n  var isPublic = pub"}
{"id":"f20e7226-6c0d-47fa-ac2a-5b51e6b52eb6","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class AlbumRecord(n: String, y: Int, t: List[ManualSong]):\n  val name = n\n  val releaseYear = y\n  val tracks = t\n\nobject AlbumRecord:\n  def unapply(arg: AlbumRecord): Option[(String, Int, List[ManualSong])] =\n    Some((arg.name, arg.releaseYear, arg.tracks))"}
{"id":"b2fc0b94-4773-4cb7-b406-26564d6925d6","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class UserAccount(uid: Int, uname: String, premium: Boolean):\n  val userId = uid\n  val username = uname\n  val premiumMember = premium\n  override def toString: String = s\"UserAccount($userId, $username, $premiumMember)\""}
{"id":"678fbd52-d651-4acb-be86-a83e61bce24a","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class DeviceTracker(did: String, uid: Int, dtype: String):\n  var deviceId = did\n  var userId = uid\n  var deviceType = dtype"}
{"id":"9ad5c2dd-4e94-45e1-9f45-09a5a7002229","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class StreamingSessionRaw(sid: String, user: UserAccount, active: Boolean):\n  var sessionId = sid\n  var userProfile = user\n  var isActive = active\n\nobject StreamingSessionRaw:\n  def unapply(obj: StreamingSessionRaw): Option[(String, UserAccount, Boolean)] =\n    Some((obj.sessionId, obj.userProfile, obj.isActive))"}
{"id":"1cbb3c32-d8d3-4486-ba31-5722d49f3e21","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class GenreTag(n: String, desc: String):\n  val name = n\n  val description = desc\n  override def equals(other: Any): Boolean = other match\n    case g: GenreTag => name == g.name && description == g.description\n    case _ => false"}
{"id":"46d62cb2-29ad-411f-8184-511f73a34d5e","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class StreamOptions(user: UserAccount, q: String, shuffle: Boolean):\n  var userProfile = user\n  var quality = q\n  var shuffleEnabled = shuffle"}
{"id":"a09168c0-03f7-487e-a2e9-9a4cf763736a","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class UserSongLike(up: UserAccount, s: ManualSong, ts: Long):\n  var user = up\n  var song = s\n  var likedAt = ts"}
{"id":"ab30c8ed-b29c-4c07-96f9-8d0906c69cd4","timestamp":1746101795506,"category":"classes_for_data","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class SubscriptionEvent(u: UserAccount, prev: String, newS: String):\n  val user = u\n  val previousStatus = prev\n  val newStatus = newS\n  override def hashCode: Int = previousStatus.hashCode + newStatus.hashCode * 7 + user.hashCode * 9"}
{"id":"b6c81bec-2067-49f7-b1e9-2b96967a777d","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class StudentProfile(studentId: Int, name: String, email: String, enrolledCourses: List[String])"}
{"id":"91e20053-39e0-4b67-b458-a4a6f447f3a2","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class TutorAccount(val tutorId: Int, val fullName: String, val experienceYears: Int) {\n  def canTeach(course: String, qualifications: List[String]): Boolean =\n    qualifications.contains(course)\n\n  override def equals(obj: Any): Boolean = obj match {\n    case that: TutorAccount =>\n      this.tutorId == that.tutorId && this.fullName == that.fullName && this.experienceYears == that.experienceYears\n    case _ => false\n  }\n  override def hashCode(): Int =\n    tutorId.hashCode ^ fullName.hashCode ^ experienceYears.hashCode\n  override def toString: String =\n    s\"TutorAccount($tutorId, $fullName, $experienceYears)\"\n}"}
{"id":"5f54132d-4ac1-4174-b9ef-8bfcd83e8c32","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class SessionFeedback(sessionId: Int, studentName: String, tutorName: String, rating: Double, comment: String)"}
{"id":"10936524-3036-452a-89b9-83123869d90a","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class ScheduledLesson(val lessonId: Int, val courseTitle: String, val scheduledTime: String) {\n  override def equals(other: Any): Boolean = other match {\n    case that: ScheduledLesson =>\n      this.lessonId == that.lessonId && this.courseTitle == that.courseTitle && this.scheduledTime == that.scheduledTime\n    case _ => false\n  }\n  override def hashCode(): Int =\n    (lessonId.toString + courseTitle + scheduledTime).hashCode\n}"}
{"id":"56a4e335-b124-425e-b178-ca43bf37f164","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class CourseMaterial(materialId: Int, title: String, resourceLink: String, uploadedBy: String)"}
{"id":"cd672fc3-ff8b-43ef-a8b2-8e7355d8ce45","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object EnrollmentRecord {\n  def unapply(record: EnrollmentRecord): Option[(Int, String, String)] =\n    Some((record.enrollmentId, record.courseId, record.studentId))\n}\nclass EnrollmentRecord(val enrollmentId: Int, val courseId: String, val studentId: String)"}
{"id":"e2422df2-3134-43df-b7b3-aa80056cb7d1","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class LiveSession(sessionId: Int, tutor: String, student: String, startTime: String, durationMinutes: Int)"}
{"id":"bcae3302-90a1-4780-904e-cc8b6c1ae81f","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class PaymentTransaction(val paymentId: Long, val student: String, val amount: Double, val method: String) {\n  override def toString: String =\n    s\"PaymentTransaction($paymentId, $student, $amount, $method)\"\n}"}
{"id":"6c067b6e-793f-4cd0-b929-a1aef235211d","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Message(threadId: Int, sender: String, recipient: String, content: String, timestamp: Long)"}
{"id":"820727aa-9d2b-4e78-a829-9dfb688c8d8a","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class AssignmentSubmission(val assignmentId: Int, val studentId: String, val submissionDate: String, val score: Option[Double])"}
{"id":"9e469255-cb49-4ae0-8f7d-67aa9aab6730","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class TutorApplication(applicationId: Int, applicantEmail: String, skills: List[String], status: String)"}
{"id":"08891562-ad75-4985-b412-9f80b0a25198","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class SupportRequest(val requestId: Int, val student: String, val issue: String, val resolved: Boolean) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: SupportRequest =>\n      this.requestId == that.requestId && this.student == that.student && this.issue == that.issue && this.resolved == that.resolved\n    case _ => false\n  }\n  override def hashCode(): Int =\n    List(requestId, student, issue, resolved).hashCode\n}"}
{"id":"ff626ae6-decb-4077-be6d-9c9b58998d84","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class VideoCall(callId: Int, participants: List[String], startedAt: String, endedAt: Option[String])"}
{"id":"acd9de76-e51a-4e74-baf1-eb7be9e2b975","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class PlatformNotification(val notificationId: Int, val user: String, val message: String)"}
{"id":"086e31d8-eac2-439f-9739-44fd7aabe5ed","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class SessionBookingRequest(requestId: Int, student: String, requestedTime: String, preferredTutor: Option[String])"}
{"id":"70a29119-d787-4724-a06f-115d26aa68e7","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class CourseReview(val reviewId: Int, val course: String, val reviewer: String, val rating: Int, val comment: String) {\n  def reviewSummary: String =\n    s\"$reviewer rated $course $rating stars\"\n}"}
{"id":"b134baff-0b6f-44ef-a027-843345797981","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class StudentBadge(badgeId: Int, student: String, badgeType: String, awardedOn: String)"}
{"id":"d290c4a7-44bb-45d0-8ea5-21c6f3749cca","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class ResourceDownload(val downloadId: Int, val user: String, val materialId: Int, val downloadedAt: String)"}
{"id":"8c9ac218-b11d-43af-bee6-6148194043db","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class LearningGoal(goalId: Int, student: String, description: String, deadline: Option[String])"}
{"id":"a1df12e3-5eec-4de5-a9f3-7b4c8a6fef72","timestamp":1746101807077,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class ChatAttachment(val attachmentId: Int, val messageId: Int, val fileType: String, val fileName: String) {\n  override def hashCode(): Int =\n    (attachmentId, messageId, fileType, fileName).hashCode()\n}"}
{"id":"76f463f4-6e23-4b34-9141-807745a2a8d7","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class StudentProfile(id: Long, username: String, fullName: String, enrolledCourses: List[Long])"}
{"id":"187f4ec3-d025-4210-b0b5-b6432aa44808","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class TutorAccount(val tutorId: Long, val email: String, val expertise: Seq[String]){ \noverride def equals(obj: Any): Boolean = obj match {\n  case that: TutorAccount => this.tutorId == that.tutorId && this.email == that.email\n  case _ => false\n}\noverride def hashCode(): Int = 31 * tutorId.hashCode() + email.hashCode()\noverride def toString: String = s\"TutorAccount($tutorId, $email, $expertise)\"\n}"}
{"id":"c823925d-f3f9-45bb-8a6d-4a1df8862d7d","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class LessonBooking(studentId: Long, tutorId: Long, scheduledAt: java.time.LocalDateTime)"}
{"id":"2c7c8b8a-2c6f-49b9-a3f6-f41fb8108069","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class CourseDetails(val courseId: Long, val courseName: String, val subjects: List[String]) {\noverride def toString: String = s\"CourseDetails($courseId, $courseName, $subjects)\"\n}"}
{"id":"e713ad12-7ef0-45d8-80de-ffe1270525e4","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Review(studentId: Long, tutorId: Long, rating: Int, comment: String)"}
{"id":"5c0eb79d-65ce-46d9-ada7-33ff88a4544c","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class VideoSessionDetails(val sessionId: Long, val tutorId: Long, val studentId: Long, val url: String) {\ndef canJoin(userId: Long): Boolean = userId == tutorId || userId == studentId\n}"}
{"id":"119e7f76-a22b-4d2d-9146-08c01908eea2","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class PaymentReceipt(receiptId: Long, payerId: Long, amount: BigDecimal, timestamp: Long)"}
{"id":"5f8163c4-f9d0-4a7b-8519-84780c968c59","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class ScheduledQuiz(val quizId: Long, val courseId: Long, val startTime: Long)"}
{"id":"d822f202-4e46-4ae9-9bb6-d8c46d949a73","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class FeedbackSubmission(userId: Long, feedback: String, submittedAt: Long)"}
{"id":"2543a55b-9c77-43f4-a6f7-5b44e216c398","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class SessionRecording(val recordingId: Long, val sessionId: Long, val fileLink: String)\n"}
{"id":"2d50c601-4632-4607-be6a-fcdf6bbd26c7","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class TutorApplication(applicationId: Long, applicantName: String, expertiseArea: String, status: String)"}
{"id":"47fd66b6-d9a4-455b-895c-7a8974eaa71c","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class EnrollmentInfo(val enrollmentId: Long, val studentId: Long, val courseId: Long) {\noverride def equals(obj: Any): Boolean = obj match {\n  case that: EnrollmentInfo => this.enrollmentId == that.enrollmentId\n  case _ => false\n}\n}"}
{"id":"641ef276-4560-482c-97ed-4aa0567659ab","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class ResourceFile(fileId: Long, fileName: String, uploaderId: Long, visible: Boolean)"}
{"id":"a5c2b337-829d-4d64-b456-b895d078b5ef","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class StudentMessage(val messageId: Long, val fromUser: Long, val toUser: Long, val contents: String)\n"}
{"id":"0e87d9d1-f32b-4028-a2e3-dc134a876632","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class GroupSession(sessionId: Long, tutorId: Long, members: List[Long], startTime: Long)"}
{"id":"dfd230d6-1325-4380-bf90-b0908ef03af0","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class SubjectInfo(val id: Long, val name: String) {\noverride def toString: String = s\"$name ($id)\"\n}\nobject SubjectInfo {\n  def unapply(arg: SubjectInfo): Option[(Long, String)] = Some((arg.id, arg.name))\n}"}
{"id":"a8429d43-a3e6-49ae-97a3-9407188dfe0b","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class AssignmentSubmission(assignmentId: Long, studentId: Long, link: String, timestamp: Long)"}
{"id":"f01148f1-3800-4d01-ae1f-f6d8c04d247b","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class TutorSchedule(val tutorId: Long, val availableTimeSlots: List[String])\n"}
{"id":"73cb7597-9105-47c2-be71-88550403afd9","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Notification(notificationId: Long, recipientId: Long, title: String, sentAt: Long)"}
{"id":"9fa58f35-6bab-4a9c-a2aa-6034807e3c29","timestamp":1746101818648,"category":"classes_for_data","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class LessonRequest(val requestId: Long, val requestedBy: Long, val topic: String) {\ndef description: String = s\"Request from $requestedBy: $topic\"\n}"}
{"id":"0f2faa8b-3069-48ce-9f99-548b86cb3fab","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class PropertyListing(id: Int, address: String, price: BigDecimal, bedrooms: Int, bathrooms: Int, squareFeet: Int)"}
{"id":"30134d87-562c-4597-a838-ce851c3fd56f","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class RealEstateAgent(val agentId: Int, val name: String, val agency: String)\n"}
{"id":"2df8ee75-a71b-40a0-941e-1c019fdeb896","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class SearchCriteria(city: String, minPrice: Option[BigDecimal], maxPrice: Option[BigDecimal], propertyType: Option[String])"}
{"id":"5b60e3ac-db78-4c61-84bd-6c87b8eb2559","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class Neighborhood(val neighborhoodId: Int, val name: String, val city: String)"}
{"id":"5ca07034-d219-4c40-b80c-c7299f1d4a21","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class ListingPhoto(listingId: Int, url: String, isPrimary: Boolean)"}
{"id":"fa95f06e-d7e7-4a79-90a4-b0fddebc7da0","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class PriceHistory(val propertyId: Int, val listedPrice: BigDecimal, val listedDate: String)\n{\n  override def equals(obj: Any): Boolean =\n    obj match {\n      case that: PriceHistory =>\n        this.propertyId == that.propertyId && this.listedPrice == that.listedPrice && this.listedDate == that.listedDate\n      case _ => false\n    }\n  override def hashCode(): Int =\n    propertyId * 37 + listedPrice.hashCode() * 7 + listedDate.hashCode\n  override def toString: String =\n    s\"PriceHistory($propertyId, $listedPrice, $listedDate)\"\n}"}
{"id":"6b218866-af9a-4b14-842c-a7cbc4130204","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class UserSearch(userId: Int, criteria: SearchCriteria, lastAccessed: Long)"}
{"id":"f45271f7-ba2d-476a-8d73-cda060cbc401","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class PropertyAmenity(val amenityId: Int, val name: String, val description: String)\n"}
{"id":"c61e8c59-c412-4812-a611-4e6915faa044","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class OpenHouseEvent(listingId: Int, startTime: String, endTime: String, contactAgentId: Int)"}
{"id":"2e2bf86c-3d31-4b76-a6b6-17a9d5813796","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class AgentReview(val reviewerId: Int, val agentId: Int, val rating: Int, val comment: String)\n{\n  override def toString: String =\n    s\"AgentReview($reviewerId, $agentId, $rating, $comment)\"\n}"}
{"id":"a896175b-8114-4207-8209-73c64f6b0282","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class FavoriteListing(userId: Int, listingId: Int, savedAt: Long)"}
{"id":"9e7872c0-7046-4a47-b141-f175c3d901ee","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class PropertyType(val typeId: Int, val typeName: String)\nobject PropertyType {\n  def unapply(pt: PropertyType): Option[(Int, String)] =\n    Some((pt.typeId, pt.typeName))\n}"}
{"id":"8f0c5f03-61f6-4188-954d-ea5ae2ea14e6","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class ListingVisit(listingId: Int, userId: Int, viewedAt: Long)"}
{"id":"dddb4d4f-900d-49a4-a092-9cadc2268f47","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class ListingTag(val tagId: Int, val name: String)\n{\n  override def equals(obj: Any): Boolean =\n    obj match {\n      case that: ListingTag =>\n        this.tagId == that.tagId && this.name == that.name\n      case _ => false\n    }\n  override def hashCode(): Int = tagId * 41 + name.hashCode\n}\n"}
{"id":"924aa7cf-a207-4efa-a9bd-44757986a4c2","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class MortgageEstimateRequest(propertyId: Int, downPayment: BigDecimal, loanTermYears: Int)"}
{"id":"05fc6675-0a92-414f-8fa2-556ee4053221","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class Seller(val sellerId: Int, val contactName: String, val phone: String)\nobject Seller {\n  def unapply(s: Seller): Option[(Int, String, String)] =\n    Some((s.sellerId, s.contactName, s.phone))\n}"}
{"id":"fe9c11d6-2880-4d15-a2d0-ddcfc752ef8c","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class SavedSearchAlert(userId: Int, alertCriteria: SearchCriteria, frequency: String)"}
{"id":"7f8632f3-9321-4e35-bdfc-1a912c7f2744","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class ListingStatus(val statusId: Int, val description: String)\n"}
{"id":"5d5172e3-4f01-46e9-ab5f-610e95b8e3ed","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class PropertyFeature(listingId: Int, feature: String)"}
{"id":"c1b76d33-8edd-45f8-a878-320fcaf5d9cf","timestamp":1746101831755,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class ListingComparison(val leftListingId: Int, val rightListingId: Int)\n"}
{"id":"505a4110-b959-4aa5-9eb3-f2b9e7d2dfc9","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Property(id: Int, address: String, price: Double, bedrooms: Int, listed: Boolean)"}
{"id":"040c0f3f-0d06-4a97-886b-02fc0336dd56","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class Listing(val id: Int, val street: String, val zipCode: String, val available: Boolean)\noverride def toString: String = \"Listing(\" + id + \", '\" + street + \"', '\" + zipCode + \"', \" + available + \")\""}
{"id":"7fbb71ac-a1fe-4ba0-a40d-9dd745c6f760","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Agent(agentId: Int, name: String, contactNumber: String)"}
{"id":"9187d230-97d1-4e95-9ab3-07295d8885a7","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class SearchCriteria(val minPrice: Double, val maxPrice: Double, val city: String)\noverride def equals(obj: Any): Boolean =\n  obj match {\n    case c: SearchCriteria => minPrice == c.minPrice && maxPrice == c.maxPrice && city == c.city\n    case _ => false\n  }\noverride def hashCode(): Int = city.hashCode + minPrice.toInt * 13 + maxPrice.toInt * 17"}
{"id":"6bd37ae6-0671-4850-969d-6edffde6c588","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Photo(url: String, description: String, isPrimary: Boolean)"}
{"id":"83d33b66-33cc-41e1-8de4-2f67c5fd9504","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class PropertyFeatures(val hasGarage: Boolean, val numBathrooms: Int, val hasGarden: Boolean)"}
{"id":"b31ee206-e39d-4c9d-a00a-e066a200674f","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class ListingFilter(city: String, minBedrooms: Int, hasParking: Boolean)"}
{"id":"c52858c8-4005-4382-a8e4-32dd8c11a93e","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class Neighborhood(val name: String, val rating: Double) {\n  override def toString: String = s\"Neighborhood($name, $rating)\"\n}"}
{"id":"3051190f-7eb4-4496-b767-ac07ef649499","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class OpenHouse(listingId: Int, date: String, startTime: String, endTime: String)"}
{"id":"bccbc366-c245-4fe0-b6c8-c71800a51e5c","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class Landlord(val id: Int, val fullname: String, val phone: String)\noverride def equals(obj: Any): Boolean = obj match {\n  case l: Landlord => id == l.id && fullname == l.fullname && phone == l.phone\n  case _ => false\n}"}
{"id":"47749beb-e8c2-4a1b-8643-037a289a30cd","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class PropertyType(name: String, description: String)"}
{"id":"a84693a2-ce3c-4475-8ccf-88798119c756","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class FavoriteListing(val userId: Int, val propertyId: Int)\ndef canEqual(a: Any) = a.isInstanceOf[FavoriteListing]\n\noverride def equals(other: Any): Boolean = other match {\n  case that: FavoriteListing =>\n    (that canEqual this) &&\n    userId == that.userId &&\n    propertyId == that.propertyId\n  case _ => false\n}\noverride def hashCode(): Int = userId * 31 + propertyId"}
{"id":"90db6ae2-0b90-456a-93ac-3253536c1e92","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class UserPreferences(preferredCity: String, minPrice: Double, maxPrice: Double, bedrooms: Int)"}
{"id":"ad6a8aaa-2454-417a-876b-cc172e96c2fa","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class Offer(val propertyId: Int, val offeredPrice: Double, val status: String)\nobject Offer {\n  def unapply(o: Offer): Option[(Int, Double, String)] =\n    Some((o.propertyId, o.offeredPrice, o.status))\n}"}
{"id":"29537313-2465-417b-9254-08533368a9f0","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class SavedSearch(name: String, criteria: ListingFilter, notificationsEnabled: Boolean)"}
{"id":"20e7857e-f866-4229-8b8e-e250ca36a139","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class ViewingRequest(val listingId: Int, val visitorName: String, val requestDate: String)\noverride def toString: String = s\"ViewingRequest($listingId, $visitorName, $requestDate)\""}
{"id":"d9c48873-8e17-4667-9cec-505bb6ba4257","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Location(city: String, district: String, state: String, postalCode: String)"}
{"id":"fb7a58c3-36e7-4457-a9dd-aace7cae9f34","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class PropertyReview(val propertyId: Int, val author: String, val rating: Int, val comments: String)\nobject PropertyReview {\n  def unapply(r: PropertyReview): Option[(Int, String, Int, String)] =\n    Some((r.propertyId, r.author, r.rating, r.comments))\n}"}
{"id":"d96e8862-1cdc-4c86-9af1-d1a9d6ce7eb8","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class MortgageOption(optionName: String, interestRate: Double, termYears: Int)"}
{"id":"31368493-52da-4810-95b5-7e9a169beffb","timestamp":1746101846809,"category":"classes_for_data","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class PropertyManager(val managerId: String, val name: String)\noverride def equals(obj: Any): Boolean = obj match {\n  case m: PropertyManager => managerId == m.managerId && name == m.name\n  case _ => false\n}\noverride def hashCode(): Int = managerId.hashCode + name.hashCode"}
{"id":"5935ff10-dbff-45dd-8483-e5fcc8be7e83","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletAddress(address: String, blockchain: String, label: Option[String])"}
{"id":"b6e0ae06-8adf-4217-bb42-5ce70c736eb9","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class TokenBalance(val tokenSymbol: String, val amount: BigDecimal) {\n  override def equals(other: Any): Boolean = other match {\n    case that: TokenBalance =>\n      this.tokenSymbol == that.tokenSymbol && this.amount == that.amount\n    case _ => false\n  }\n  override def hashCode(): Int =\n    tokenSymbol.hashCode + amount.hashCode()\n  override def toString: String =\n    s\"TokenBalance($tokenSymbol, $amount)\"\n}"}
{"id":"99396107-1d92-4566-a68c-ce76b432e1f8","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class TransactionRecord(hash: String, from: String, to: String, amount: BigDecimal, timestamp: Long)"}
{"id":"13527a4c-b961-4318-a224-22330d4dbb0c","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class PrivateKeyInfo(val keyId: String, val encryptedKey: String)"}
{"id":"5d537b6d-5ed1-4085-ac38-b24dcc7e3813","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletMetadata(ownerName: String, creationDate: Long, walletVersion: String)"}
{"id":"f306eced-b2ac-43ef-8da7-53360ff84b23","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class CryptoNetwork(val networkName: String, val rpcUrl: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CryptoNetwork =>\n      this.networkName == that.networkName && this.rpcUrl == that.rpcUrl\n    case _ => false\n  }\n  override def hashCode(): Int = networkName.hashCode * 31 + rpcUrl.hashCode\n}"}
{"id":"7b68099c-7b32-44c0-8d95-8e56f7ea419c","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class MultiSigWallet(participants: List[String], requiredSignatures: Int, walletAddress: String)"}
{"id":"27daebb5-35a0-450b-95d9-0104f10a7933","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class FeeEstimationResult(val estimatedFee: BigDecimal, val confirmationTime: Long) {\n  override def equals(other: Any): Boolean = other match {\n    case that: FeeEstimationResult =>\n      this.estimatedFee == that.estimatedFee && this.confirmationTime == that.confirmationTime\n    case _ => false\n  }\n  override def hashCode(): Int =\n    estimatedFee.hashCode() * 17 + confirmationTime.hashCode()\n}"}
{"id":"d0d47820-f30a-4fc9-a931-5f7b57d903a3","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class BackupStatus(isBackedUp: Boolean, backupTimestamp: Option[Long])"}
{"id":"7f25790c-c9c8-4b3a-a1a8-cc69bec58e8f","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletDevice(val deviceId: String, val deviceType: String, val lastActive: Long) {\n  override def toString: String =\n    s\"WalletDevice($deviceId, $deviceType, $lastActive)\"\n}"}
{"id":"c1b97432-8896-4346-b289-139b01c5de5e","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class SigningRequest(requestId: String, transaction: String, requestedAt: Long)"}
{"id":"f5454284-94dc-4c0e-b341-cf273f757482","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class Label(val labelId: String, val value: String, val createdOn: Long)"}
{"id":"b42e6caf-61bd-457b-a1ea-975100ca8cb9","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class HardwareWallet(deviceName: String, serialNumber: String, connected: Boolean)"}
{"id":"f108dc16-ca40-48f3-823c-5335ab6e0e53","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class AddressBookEntry(val walletLabel: String, val address: String, val blockchain: String)"}
{"id":"b18215aa-3f8d-4237-9350-1ec0d2570e11","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class PendingTransaction(to: String, value: BigDecimal, nonce: Long, networkFee: BigDecimal)"}
{"id":"c9005390-ab9e-48f4-ad0a-9dd5d19c6800","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletSession(val sessionId: String, val deviceInfo: String, val startedAt: Long) {\n  override def equals(o: Any): Boolean = o match {\n    case that: WalletSession =>\n      this.sessionId == that.sessionId && this.deviceInfo == that.deviceInfo && this.startedAt == that.startedAt\n    case _ => false\n  }\n  override def hashCode(): Int =\n    sessionId.hashCode * 13 + deviceInfo.hashCode * 7 + startedAt.hashCode()\n}"}
{"id":"8594143b-20a5-4cb5-b177-701b1488e11f","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletBackup(walletId: String, backupFilePath: String, backupDate: Long)"}
{"id":"e6747205-7c14-402b-b841-dc9cccb76c98","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class DerivationPathInfo(val path: String, val candidateAddresses: List[String]) \nobject DerivationPathInfo {\n  def unapply(obj: DerivationPathInfo): Option[(String, List[String])] =\n    Some((obj.path, obj.candidateAddresses))\n}"}
{"id":"fb063f68-b04c-457f-af0a-a9b3fc7ca67b","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class MnemonicPhrase(words: List[String], language: String)"}
{"id":"ca28e870-2290-484e-ab2c-a2a503788973","timestamp":1746101861892,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class RecoveryAttempt(val phrase: String, val attemptTime: Long)\nobject RecoveryAttempt {\n  def unapply(obj: RecoveryAttempt): Option[(String, Long)] =\n    Some((obj.phrase, obj.attemptTime))\n}"}
{"id":"2de51419-61be-4a35-81b4-084547b255ab","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletAddress(address: String, network: String)"}
{"id":"0560689e-bd2c-44e5-9eed-687520aa9f0a","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletTransaction(val transactionId: String, val amount: BigDecimal, val timestamp: Long)\n{\n  override def equals(other: Any): Boolean = other match {\n    case that: WalletTransaction =>\n      transactionId == that.transactionId &&\n      amount == that.amount &&\n      timestamp == that.timestamp\n    case _ => false\n  }\n\n  override def hashCode: Int =\n    transactionId.hashCode ^ amount.hashCode ^ timestamp.hashCode\n\n  override def toString: String = s\"WalletTransaction($transactionId, $amount, $timestamp)\"\n}"}
{"id":"bb43c644-3d54-4fb2-83e6-23a9d0aa45e1","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class TokenBalance(tokenSymbol: String, balance: BigDecimal)"}
{"id":"845ad958-e9dd-47c5-afce-e7426437637b","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class Wallet(val identifier: String, val addresses: List[String])\n{\n  override def toString: String = s\"Wallet($identifier, ${addresses.mkString(\",\")})\"\n}"}
{"id":"40aab085-475f-4a08-9f10-3185370a89bc","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class CryptoTransfer(fromAddress: String, toAddress: String, amount: BigDecimal)"}
{"id":"d565626e-605a-4284-bb8b-7bb0cf8d73d6","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class SignedTransaction(val sender: String, val signature: String, val rawHex: String)"}
{"id":"617d87e7-af40-43ef-9d32-cc0726d71c9b","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class PrivateKeyExport(walletId: String, privateKey: String)"}
{"id":"0dcf564c-5175-437b-9976-a53b84d87c35","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class PaymentRequest(val payee: String, val amount: BigDecimal)\nobject PaymentRequest {\n  def unapply(pr: PaymentRequest): Option[(String, BigDecimal)] = Some((pr.payee, pr.amount))\n}"}
{"id":"5fc8f8e5-a35b-4151-a5d7-10d670f7f870","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class PublicKeyInfo(owner: String, publicKeyHex: String)"}
{"id":"efa766d0-39ea-412d-b4d6-1c8a0feea272","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletBalance(val walletId: String, val totalBalance: BigDecimal)"}
{"id":"f88d8a11-7f72-4c5c-acee-de3dd783041b","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletMetadata(name: String, createdTimestamp: Long, isActive: Boolean)"}
{"id":"3c5e7b78-1ccd-45fc-a2ae-bc36acd550aa","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class MultiSigWallet(val requiredSigners: Int, val participantKeys: List[String])"}
{"id":"2beb5784-145f-4463-ae2b-eb382f497fd4","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class UtxoEntry(txid: String, outputIndex: Int, amount: BigDecimal)"}
{"id":"0b10c62e-a5c4-483c-8824-0138b2070a6e","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class PassphraseBackup(val walletId: String, val encryptedPassphrase: Array[Byte])"}
{"id":"f37a74ea-030e-4333-b884-9ac25c3c2634","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class TransactionFee(amount: BigDecimal, feeType: String)"}
{"id":"1734e949-1a5a-478c-b67c-a95007a9cfb0","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class NetworkSettings(val networkName: String, val rpcUrl: String, val chainId: Int)\n{\n  override def toString: String = s\"NetworkSettings($networkName, $rpcUrl, $chainId)\"\n}"}
{"id":"b9aee6ef-4316-4930-9c52-7b9cbdeab2bf","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletConnectionStatus(walletId: String, isConnected: Boolean)"}
{"id":"1a492abb-b4ba-438f-9662-5c448313f514","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class TokenDetail(val symbol: String, val contractAddress: String)\nobject TokenDetail {\n  def unapply(td: TokenDetail): Option[(String, String)] = Some((td.symbol, td.contractAddress))\n}"}
{"id":"c9c908a0-f9e6-4005-bf14-3df27bc8c2bd","timestamp":1746101875943,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class MnemonicPhrase(words: List[String], language: String)"}
{"id":"a4a52b47-e5c9-4cc8-a33a-27a6ec036d7f","timestamp":1746101875944,"category":"classes_for_data","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletLabel(val walletId: String, val label: String)"}
{"id":"a1bf17be-032b-42b7-b67c-e82d64269cb4","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryItem(itemId: String, itemName: String, quantity: Int, location: String)"}
{"id":"b6e2ffa0-7205-42ad-9623-9ee0c87ad5bb","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class ProductInStock(val productCode: String, val productName: String, val stockLevel: Int, val warehouseSection: String)\n{\n  override def equals(obj: Any): Boolean = obj match {\n    case that: ProductInStock =>\n      this.productCode == that.productCode &&\n      this.productName == that.productName &&\n      this.stockLevel == that.stockLevel &&\n      this.warehouseSection == that.warehouseSection\n    case _ => false\n  }\n  override def hashCode(): Int =\n    productCode.hashCode ^ productName.hashCode ^ stockLevel.hashCode ^ warehouseSection.hashCode\n  override def toString: String = s\"ProductInStock($productCode, $productName, $stockLevel, $warehouseSection)\"\n}"}
{"id":"41410c6d-978f-44a1-a56c-0000e32badd7","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class ShipmentRecord(shipmentId: Long, items: List[InventoryItem], arrivalDate: String)"}
{"id":"cb83d998-1d75-4a28-86f8-8089a9008b0a","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class StorageBin(val binCode: String, val maxCapacity: Int, val currentLoad: Int)\nobject StorageBin {\n  def unapply(bin: StorageBin): Option[(String, Int, Int)] =\n    Some((bin.binCode, bin.maxCapacity, bin.currentLoad))\n}"}
{"id":"46f815b5-bf68-4acf-b2e9-e2c39783c510","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryAdjustment(adjustmentId: Int, item: InventoryItem, adjustment: Int, reason: String)"}
{"id":"6532320f-bdbe-4d42-aab5-2338dca7118a","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class Warehouse(val name: String, val address: String)\n{\n  override def equals(obj: Any): Boolean = obj match {\n    case that: Warehouse =>\n      this.name == that.name && this.address == that.address\n    case _ => false\n  }\n  override def hashCode(): Int = name.hashCode ^ address.hashCode\n}"}
{"id":"4f8a3f54-03ca-4377-88cd-1080a7bd57c1","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class SupplierRecord(supplierId: String, supplierName: String, contactNumber: String)"}
{"id":"16b0fe51-bda8-4be2-bbdf-700a83911802","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class Pallet(val palletNumber: Int, val location: String, val loadCount: Int)"}
{"id":"806672bc-d52b-4212-96fc-cb1ef6404713","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class StockTransfer(transferId: String, fromLocation: String, toLocation: String, itemsMoved: List[InventoryItem])"}
{"id":"f546e87c-f273-47b2-bae8-e7ba04adaa45","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class ReceivingLog(val logId: Long, val receivedBy: String, val dateReceived: String)\n{\n  override def toString: String = s\"ReceivingLog($logId, $receivedBy, $dateReceived)\"\n}"}
{"id":"a56e40c0-258c-466e-bbcf-d0de529d4949","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class BarcodeInfo(itemId: String, barcodeValue: String)"}
{"id":"a4cb07e6-8d7b-4114-953b-41c6eb95ff12","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class ExpirationBatch(val batchNumber: String, val expirationDate: String, val inventoryCount: Int)"}
{"id":"14ebcd95-b4b0-4872-be19-e0c4ceef3255","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class RestockOrder(orderNumber: String, supplier: SupplierRecord, orderDate: String, itemsOrdered: List[InventoryItem])"}
{"id":"6f507618-53ed-4e5c-b743-26ae55b6eb77","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class DamageReport(val reportId: Int, val damagedItem: String, val reportedBy: String, val reportDate: String)\n{\n  override def equals(obj: Any): Boolean = obj match {\n    case that: DamageReport =>\n      this.reportId == that.reportId &&\n      this.damagedItem == that.damagedItem &&\n      this.reportedBy == that.reportedBy &&\n      this.reportDate == that.reportDate\n    case _ => false\n  }\n  override def hashCode(): Int = reportId.hashCode ^ damagedItem.hashCode ^ reportedBy.hashCode ^ reportDate.hashCode\n}"}
{"id":"be4e7e33-1b14-4507-9caf-74941a5311b7","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class PickTicket(ticketId: String, orderReference: String, pickerName: String, itemsToPick: List[InventoryItem])"}
{"id":"16d524a2-240a-4811-9120-5e237272299c","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class InventoryCountingSession(val sessionCode: String, val startedBy: String, val countDate: String)"}
{"id":"3946c0c6-1307-4312-a1bb-f484ed6e2cd8","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class WarehouseZone(zoneId: Int, description: String)"}
{"id":"7c8d3436-fa16-42f4-ab60-7d006069807b","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class InventoryJournalEntry(val entryId: String, val action: String, val itemRef: String, val timestamp: String)\n{\n  override def toString: String = s\"InventoryJournalEntry($entryId, $action, $itemRef, $timestamp)\"\n}"}
{"id":"e0260252-3b7a-4323-a882-749f802f66e4","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class ReturnToSupplier(returnId: String, returnedItems: List[InventoryItem], returnReason: String)"}
{"id":"ffb74cd6-5488-456a-a5d4-722716b8e1a0","timestamp":1746101887871,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class DelayedShipment(val shipmentId: Long, val expectedArrival: String, val comment: String)\nobject DelayedShipment {\n  def unapply(ds: DelayedShipment): Option[(Long, String, String)] =\n    Some((ds.shipmentId, ds.expectedArrival, ds.comment))\n}"}
{"id":"bfc20a23-be96-46a5-8e7d-4d75158b92dd","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryItem(sku: String, quantity: Int, location: String)"}
{"id":"312b7edd-0906-42bb-9666-cc2e7df17a1f","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class StockRecord(val itemNumber: String, val availableUnits: Int, val aisle: String)\noverride def toString: String = s\"StockRecord($itemNumber, $availableUnits, $aisle)\""}
{"id":"ceddf53a-6ad6-47c3-bd73-77b89330d983","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class WarehouseSection(name: String, capacity: Int)"}
{"id":"eacce970-ab78-4ecf-9e05-fe8fb40fbcd9","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class Shipment(val trackingId: String, val itemCode: String, val amount: Int)\ndef canEqual(that: Any): Boolean = that.isInstanceOf[Shipment]\noverride def equals(that: Any): Boolean = that match {\n  case s: Shipment =>\n    (this eq s) || (itemCode == s.itemCode && trackingId == s.trackingId && amount == s.amount)\n  case _ => false\n}\noverride def hashCode: Int =\n  trackingId.hashCode ^ itemCode.hashCode ^ amount.hashCode"}
{"id":"39f09a7c-8aa6-46b6-839d-f7fdf7fcc51e","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class RestockOrder(orderId: String, sku: String, orderedQuantity: Int)"}
{"id":"a17b7f67-378a-4404-8b4b-3528a08f72f1","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class StorageBin(val binId: String, val description: String)\nobject StorageBin {\n  def unapply(bin: StorageBin): Option[(String, String)] = Some((bin.binId, bin.description))\n}"}
{"id":"a912d92f-63db-44e2-aaf6-4f530aa48a61","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class ItemLocation(sku: String, zone: String, shelf: String)"}
{"id":"fa8e40a8-cea8-48d1-8d74-56fd7a1009ce","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class SupplierRecord(val supplierName: String, val contactNumber: String)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: SupplierRecord => this.supplierName == that.supplierName && this.contactNumber == that.contactNumber\n  case _ => false\n}\noverride def hashCode(): Int = supplierName.hashCode ^ contactNumber.hashCode()\noverride def toString: String = s\"SupplierRecord($supplierName, $contactNumber)\""}
{"id":"e974dbb5-bc86-474e-a93e-ee40d3f5eedc","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryTransaction(transactionId: String, sku: String, change: Int, timestamp: Long)"}
{"id":"6aa59b3f-63c0-43df-954b-c7b72cad61a0","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class LostProduct(val identifier: String, val lostOnDate: String)\nobject LostProduct {\n  def unapply(lp: LostProduct): Option[(String, String)] = Some((lp.identifier, lp.lostOnDate))\n}"}
{"id":"4e995c19-c7b4-4d2f-9c7f-692914e1f73c","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class PurchaseOrder(orderNumber: String, supplierId: String, totalUnits: Int)"}
{"id":"3db21fb3-24a5-453c-9fad-cd1894dfcbae","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class WarehouseAddress(val addressLine: String, val city: String, val postalCode: String)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: WarehouseAddress => addressLine == that.addressLine && city == that.city && postalCode == that.postalCode\n  case _ => false\n}\noverride def hashCode(): Int = addressLine.hashCode ^ city.hashCode ^ postalCode.hashCode()\n"}
{"id":"49180499-cbd9-4893-a443-affc3c1fe9c7","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryAuditLog(entryId: String, reviewer: String, adjustedCount: Int, date: String)"}
{"id":"0be62c4e-276d-48aa-a65d-a6eb33240582","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class Pallet(val code: String, val itemCount: Int)\ndef canEqual(a: Any): Boolean = a.isInstanceOf[Pallet]\noverride def equals(that: Any): Boolean = that match {\n  case that: Pallet => (this eq that) || (code == that.code && itemCount == that.itemCount)\n  case _ => false\n}\noverride def hashCode: Int = code.hashCode ^ itemCount.hashCode"}
{"id":"787c75eb-54b3-4309-bf15-6169607ef14a","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class SupplierContact(supplierId: String, email: String, phone: String)"}
{"id":"d6ef8fcf-db79-4ba1-9945-de64a08fa2c3","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class ZoneAssignment(val zoneName: String, val personResponsible: String)\noverride def toString: String = s\"ZoneAssignment($zoneName, $personResponsible)\""}
{"id":"d2f05b34-d1a0-46b8-8be4-57d9789739eb","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class TemperatureLog(logId: String, sensorLocation: String, degreesCelsius: Double, logTime: Long)"}
{"id":"f9467169-53fb-408d-a3e3-6696634a01b6","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class ItemTrace(val sku: String, val movementDate: String)\nobject ItemTrace {\n  def unapply(it: ItemTrace): Option[(String, String)] = Some((it.sku, it.movementDate))\n}"}
{"id":"ef71b8a0-17e0-4bd4-8235-3dd04b1d6c1b","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class BatchDetail(batchId: String, productName: String, expirationDate: String)"}
{"id":"5a46cc74-f97d-4fae-bcdc-90bbb9f587bd","timestamp":1746101902105,"category":"classes_for_data","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class DamagedGoodsReport(val reportNumber: String, val description: String, val resolved: Boolean)"}
{"id":"d6311307-79d0-4296-bc77-d775793b1927","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ContentReport(reporterId: String, postId: String, reason: String, timestamp: Long)"}
{"id":"bda24087-97ac-4eda-b1a3-64ec160221d7","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ModerationAction(actionId: String, moderatorId: String, reportedPostId: String, actionType: String, time: Long)"}
{"id":"510969c9-02e3-41d0-886e-81cad6d9b36a","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserReputation(userId: String, trustScore: Int)"}
{"id":"325df2ac-b5fd-496a-81fa-e978108fc7db","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class FlaggedContent(postId: String, flagCount: Int, lastFlagTime: Long)"}
{"id":"25cccaff-785f-48ea-a684-f3f3327b885f","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class CommentModeration(commentId: String, reviewed: Boolean, reviewNotes: Option[String])"}
{"id":"4f14eddd-d9bf-4967-adcb-b578cc8ad766","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class BlockedUser(userId: String, blockedBy: String, dateBlocked: Long)"}
{"id":"890cbaeb-b601-4a85-8484-c7071648f9a8","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class AppealDecision(appealId: String, decision: String, resolvedBy: String, resolutionTime: Long)"}
{"id":"207621de-9ab1-4c08-955c-82bb31daed25","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ModerationRule(ruleId: String, description: String, severity: Int)"}
{"id":"8765180c-2cac-4df6-8261-c0bc360a549d","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class AutomatedDetectionResult(contentId: String, detectedLabels: List[String], likelihood: Double)"}
{"id":"713b5562-0542-4c72-8bce-ce43d253bcde","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserBan(userId: String, reason: String, durationHours: Int, imposedAt: Long)"}
{"id":"10d8b68c-1078-40f1-b37c-1198d682994a","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class AbuseReport(val reporter: String, val targetPost: String, val abuseType: String, val reportTime: Long) {\n  override def equals(obj: Any): Boolean = obj match {\n    case r: AbuseReport =>\n      reporter == r.reporter && targetPost == r.targetPost && abuseType == r.abuseType && reportTime == r.reportTime\n    case _ => false\n  }\n  override def hashCode(): Int =\n    reporter.hashCode ^ targetPost.hashCode ^ abuseType.hashCode ^ reportTime.hashCode()\n  override def toString: String =\n    \"AbuseReport(\" + reporter + \", \" + targetPost + \", \" + abuseType + \", \" + reportTime + \")\"\n}"}
{"id":"f2f9dd34-c3b9-457c-b7d4-ab573004c60c","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class ManualModerationEntry(val id: String, val moderator: String, val content: String, val note: Option[String])"}
{"id":"dafcb934-4251-4605-8db1-c539e51939c0","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class PendingReview(val postId: String, val reportedCount: Int, val created: Long)"}
{"id":"afd3228f-452d-4199-bd09-9965c4362985","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class ContentBan(val postId: String, val banReason: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case b: ContentBan =>\n      postId == b.postId && banReason == b.banReason\n    case _ => false\n  }\n  override def hashCode(): Int = postId.hashCode ^ banReason.hashCode\n}"}
{"id":"f588f236-aabe-4ee5-849c-bf7573853448","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class UserMute(val userId: String, val mutedUntil: Long)\nobject UserMute {\n  def unapply(um: UserMute): Option[(String, Long)] = Some((um.userId, um.mutedUntil))\n}"}
{"id":"1e4de2da-f176-42b4-8321-e5e3445837f0","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class TagRemoval(val contentId: String, val tag: String, val removedBy: String)"}
{"id":"1ac514f1-988c-4376-8b4b-c56debc77292","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class AppealRequest(val appealId: String, val bannedUser: String, val submittedAt: Long)"}
{"id":"e5ce0bb9-fe1d-4d24-945c-fcad0dc8b50b","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class DeletionLog(val postId: String, val deletedAt: Long, val moderatorId: String)"}
{"id":"2fa9ae6d-0a8d-45fe-acd5-d0dff7b4261d","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class SpamDetection(val messageId: String, val spamScore: Double) {\n  override def toString: String =\n    s\"SpamDetection($messageId, $spamScore)\"\n}"}
{"id":"60ab8f59-f109-4189-8fc1-732e2c6e39a6","timestamp":1746101914012,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class WarningIssuance(val warnedUser: String, val warningMessage: String)"}
{"id":"62b1cd5f-f2d9-4f70-826a-ff47c6cb102b","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserReport(reportId: String, reporterId: String, reportedUserId: String, reason: String, timestamp: Long)\n"}
{"id":"e886ecb5-a598-402a-a3ee-5a86705d8fb7","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class FilteredContent(val contentId: String, val moderatorId: String, val moderationReason: String) {\n  def canEqual(that: Any): Boolean = that.isInstanceOf[FilteredContent]\n  override def equals(other: Any): Boolean = other match {\n    case that: FilteredContent =>\n      (that canEqual this) &&\n      contentId == that.contentId &&\n      moderatorId == that.moderatorId &&\n      moderationReason == that.moderationReason\n    case _ => false\n  }\n  override def hashCode: Int =\n    contentId.hashCode ^ moderatorId.hashCode ^ moderationReason.hashCode\n  override def toString: String =\n    s\"FilteredContent($contentId, $moderatorId, $moderationReason)\"\n}\n"}
{"id":"198fc3ba-1448-46c4-9be0-8f6173482c67","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ModerationAction(actionType: String, moderatorId: String, contentId: String, timestamp: Long)\n"}
{"id":"9268c9f7-b518-4188-8914-d239e7192fea","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class SuspiciousAccount(val userId: String, val flaggedBy: String, val flagTimestamp: Long) {\n  override def toString: String =\n    \"SuspiciousAccount(\" + userId + \", \" + flaggedBy + \", \" + flagTimestamp + \")\"\n}\nobject SuspiciousAccount {\n  def unapply(acc: SuspiciousAccount): Option[(String, String, Long)] =\n    Some((acc.userId, acc.flaggedBy, acc.flagTimestamp))\n}\n"}
{"id":"78820d4d-89cd-47f9-bf6a-5127882d4e33","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ContentViolation(violationId: String, userId: String, contentId: String, description: String)\n"}
{"id":"defd7e72-471c-4a21-8b63-30a58a73d88c","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class ManualUserReport(val reportId: String, val reporterId: String, val reportedUserId: String, val reason: String) {\n  override def equals(other: Any): Boolean =\n    other match {\n      case that: ManualUserReport =>\n        (reportId == that.reportId {\n          }) && (reporterId == that.reporterId) &&\n        (reportedUserId == that.reportedUserId) && (reason == that.reason)\n      case _ => false\n    }\n  override def hashCode: Int = (\n    reportId.hashCode ^ reporterId.hashCode ^ reportedUserId.hashCode ^ reason.hashCode\n  )\n}\n"}
{"id":"5350bd14-d160-4ce6-96b4-d37537291a3e","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class CommentModeration(commentId: String, isFlagged: Boolean, moderatorNote: Option[String])\n"}
{"id":"9cba8ed0-ed0f-4c9f-a134-916abd3cc2d6","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class BlockedUser(val userId: String, val blockedBy: String, val blockedOn: Long)\n"}
{"id":"36f5f810-3b23-4299-a119-5c6687d9d46f","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class FlaggedMessage(messageId: String, flaggedByUserId: String, flagReason: String, reviewed: Boolean)\n"}
{"id":"b99977f9-e940-4efb-a02e-aecddb7c4877","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class ReviewDecision(val reviewId: String, val outcome: String, val reviewerId: String) {\n  override def toString: String = s\"ReviewDecision($reviewId, $outcome, $reviewerId)\"\n}\n"}
{"id":"d23d9ab3-5933-42fe-a1c1-1adce75f821b","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserMute(userId: String, mutedByUserId: String, muteUntil: Option[Long])\n"}
{"id":"6118442c-4e73-4ea7-b17b-ed794aba5526","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"object BlockedContent {\n  def unapply(c: BlockedContent): Option[(String, String, String)] =\n    Some((c.contentId, c.blockReason, c.blockedBy))\n}\nclass BlockedContent(val contentId: String, val blockReason: String, val blockedBy: String)\n"}
{"id":"7584b43f-ff4c-4c5d-a390-bf1521774c35","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class AuditLogEntry(entryId: String, actorId: String, action: String, eventTime: Long)\n"}
{"id":"90abdda9-94de-42a7-96f6-18c951356375","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class AdminNote(val noteId: String, val userId: String, val note: String, val createdOn: Long)\n"}
{"id":"7293d4bd-2ef2-4706-9a58-a7df2f2fa8ad","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class AppealRequest(appealId: String, originalReportId: String, userId: String, appealReason: String)\n"}
{"id":"ff67fdf1-d5c8-4a9e-ba2f-7a718a33bc99","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class ContentWarning(val warningId: String, val contentId: String, val warningDetails: String, val issuedAt: Long)\n"}
{"id":"15b5152a-0e33-4b18-9d4e-9c54468c6f3b","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class MutedTopic(topicId: String, mutedByUserId: String, unmuteOn: Option[Long])\n"}
{"id":"404416b3-dccb-4ecb-8748-d9135d8199b0","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class TemporaryBan(val banId: String, val userId: String, val bannedOn: Long, val banDuration: Long)\n"}
{"id":"d4278816-da38-4de5-b443-ad512f5c1022","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ModeratorAssignment(moderatorId: String, assignedSection: String)\n"}
{"id":"39479896-4101-4954-8d82-00e839d3bfc0","timestamp":1746101952719,"category":"classes_for_data","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class ReviewSummary(val summaryId: String, val flaggedCount: Int, val resolvedCount: Int) {\n  def unapply(r: ReviewSummary): Option[(String, Int, Int)] =\n    Some((r.summaryId, r.flaggedCount, r.resolvedCount))\n}\n"}
{"id":"53289240-2088-4fab-9f4e-94074d9027da","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class NewsArticle(title: String, content: String, author: String, topics: List[String], timestamp: Long)"}
{"id":"81ad172f-8cc1-4bea-93d8-901935fe1959","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class UserPreference(userId: String, preferredTopics: Set[String], maxFeedItems: Int)"}
{"id":"bb046d60-9918-4cb0-8e77-4c762f8c0f02","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedItem(article: NewsArticle, personalizedScore: Double)"}
{"id":"81157bf7-5aa3-42a1-89f1-1e08743a38e4","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"enum NotificationSetting:\n  case All, MentionsOnly, None\n\ncase class UserSettings(userId: String, notifications: NotificationSetting)"}
{"id":"79422a20-e81d-4e4f-a31a-f2b7ce60f275","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class UserProfile(userId: String, displayName: String, bio: String, followingSources: Set[String])"}
{"id":"c4bdf11d-68a1-43cc-9f14-39b440f7f6be","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class TopicSubscription(userId: String, topicName: String, subscribedAt: Long)"}
{"id":"6d722bda-cfb2-44e6-a46c-b67075aec741","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class ArticleReaction(articleId: String, userId: String, reactionType: String, reactedAt: Long)"}
{"id":"37fe9fee-b751-4683-8413-51509ce19a84","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedRecommendation(userId: String, recommendedArticles: List[FeedItem])"}
{"id":"8310e639-3099-438a-ba46-110a2656e6bf","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class ReadingHistory(userId: String, articleIds: List[String], lastReadTimestamp: Long)"}
{"id":"441bdd16-db69-4bc2-b66a-cfadb13ee767","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class PersonalizedBanner(userId: String, message: String, shownAt: Long)"}
{"id":"44df4f0b-4c6e-4582-b619-fd3e6f14d097","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class ArticleFeedback(val userId: String, val articleId: String, val like: Boolean, val feedbackText: String){\n  override def equals(obj: Any): Boolean = obj match {\n    case that: ArticleFeedback =>\n      userId == that.userId &&\n      articleId == that.articleId &&\n      like == that.like &&\n      feedbackText == that.feedbackText\n    case _ => false\n  }\n  override def hashCode: Int = (userId, articleId, like, feedbackText).##\n}"}
{"id":"0b742beb-4cbe-41e8-a376-52fb198fee13","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class BreakingNewsAlert(val alertId: String, val headline: String, val createdTime: Long){\n  override def toString: String = s\"BreakingNewsAlert($alertId, '$headline')\"\n}"}
{"id":"de33145a-fb26-44b8-adf2-db45662f859e","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class UserFollow(val followerId: String, val followedId: String)\nobject UserFollow {\n  def unapply(f: UserFollow): Option[(String, String)] = Some((f.followerId, f.followedId))\n}"}
{"id":"6a2b69c0-a8c1-44ec-a05c-1922f241daed","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class TopicConfig(val topicName: String, val notificationEnabled: Boolean)\n// Manual equals/hashCode omitted intentionally (reference equality only)"}
{"id":"224cf575-59be-46fc-9eea-73d6a2da7e80","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class UserMute(val userId: String, val mutedSource: String)\nobject UserMute {\n  def unapply(um: UserMute): Option[(String, String)] = Some((um.userId, um.mutedSource))\n}"}
{"id":"ca85c4d6-a4b1-46f4-bc71-b441565bd639","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class CustomFeed(val userId: String, val feedLabel: String, val filter: String)\nobject CustomFeed {\n  def unapply(f: CustomFeed): Option[(String, String, String)] = Some((f.userId, f.feedLabel, f.filter))\n}"}
{"id":"ed024d3c-d2ec-4d61-9198-048ff22df8be","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class ArticleBookmark(val userId: String, val articleId: String, val bookmarkedAt: Long){\n  override def equals(obj: Any): Boolean = obj match {\n    case ab: ArticleBookmark =>\n      userId == ab.userId &&\n      articleId == ab.articleId &&\n      bookmarkedAt == ab.bookmarkedAt\n    case _ => false\n  }\n  override def hashCode: Int = (userId, articleId, bookmarkedAt).##\n}"}
{"id":"1d0fa24f-31b3-410e-a856-9f58a1b95db9","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class TrendingTopic(val topic: String, val trendScore: Double)\nobject TrendingTopic {\n  def unapply(tt: TrendingTopic): Option[(String, Double)] = Some((tt.topic, tt.trendScore))\n}"}
{"id":"ebe6d476-4609-4583-a399-578d82434f6c","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class EditorialPick(val articleId: String, val pickedBy: String, val reason: String)\nobject EditorialPick {\n  def unapply(ep: EditorialPick): Option[(String, String, String)] = Some((ep.articleId, ep.pickedBy, ep.reason))\n}"}
{"id":"c653f3f2-b078-41a5-bd6c-fb7c06043527","timestamp":1746101970918,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class PersonalizedDigest(val userId: String, val digestArticles: List[String])\nobject PersonalizedDigest {\n  def unapply(pd: PersonalizedDigest): Option[(String, List[String])] = Some((pd.userId, pd.digestArticles))\n}"}
{"id":"b8d02104-0752-4bd6-9c59-783be7feee31","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class NewsArticle(title: String, content: String, author: String, categories: List[String], timestamp: Long)"}
{"id":"51d0d63c-da1f-4a0d-aa2a-7bf74f9fc8d3","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class UserProfile(val username: String, val preferences: List[String], val lastLogin: Long)\n{\n  override def equals(other: Any): Boolean = other match {\n    case that: UserProfile =>\n      this.username == that.username && this.preferences == that.preferences && this.lastLogin == that.lastLogin\n    case _ => false\n  }\n  override def hashCode(): Int =\n    username.hashCode + 31 * preferences.hashCode + 17 * lastLogin.hashCode()\n  override def toString: String =\n    s\"UserProfile($username, $preferences, $lastLogin)\"\n}"}
{"id":"90d07ae2-9aa2-4c08-891e-9ae518302b79","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedItem(id: String, article: NewsArticle, recommendedScore: Double)"}
{"id":"a6d36c9d-be43-4c91-a9ff-35712fa7ce4a","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class PersonalizationRule(val ruleName: String, val parameters: Map[String, String])\nobject PersonalizationRule {\n  def unapply(rule: PersonalizationRule): Option[(String, Map[String, String])] =\n    Some((rule.ruleName, rule.parameters))\n}"}
{"id":"99f0b8ab-9f62-4b6c-9be7-69295b155756","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class UserPreferences(userId: String, favoriteTopics: Set[String], notificationFrequency: String)"}
{"id":"6360e35f-fa49-4cd6-bd37-7bd5cd677244","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class SavedArticle(val articleId: String, val savedByUser: String, val savedTime: Long)\nobject SavedArticle {\n  def unapply(a: SavedArticle): Option[(String, String, Long)] =\n    Some((a.articleId, a.savedByUser, a.savedTime))\n}"}
{"id":"e9f1cb4c-adb8-4c99-9720-5ee6cf0f64d2","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedFilter(userId: String, excludedCategories: List[String], minScore: Double)"}
{"id":"6f8394c3-c838-45bc-bdb7-fa57f4cc7d35","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class ArticleSource(sourceId: String, name: String, reputation: Double)"}
{"id":"f0da598f-47f0-4315-a12d-aa1c0f1b0c1f","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class ReadingHistory(val userId: String, val articlesRead: List[String], val lastReadTime: Long)\n{\n  override def equals(other: Any): Boolean = other match {\n    case that: ReadingHistory =>\n      this.userId == that.userId && this.articlesRead == that.articlesRead && this.lastReadTime == that.lastReadTime\n    case _ => false\n  }\n  override def hashCode(): Int =\n    userId.hashCode + articlesRead.hashCode() * 59 + lastReadTime.hashCode()\n}"}
{"id":"4f7a7404-e7fd-427d-a866-97cb9e65a095","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class PersonalizedFeed(userId: String, items: List[FeedItem])"}
{"id":"80b8664e-4b7d-46be-a009-8cf575e15278","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class TopicInterest(val topic: String, val interestScore: Double)\nobject TopicInterest {\n  def unapply(t: TopicInterest): Option[(String, Double)] =\n    Some((t.topic, t.interestScore))\n}"}
{"id":"59b5fe8a-c0a6-4204-98f7-8b30e9ca3eb4","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class Category(tag: String, priority: Int)"}
{"id":"818d5d63-b44f-47d3-bc88-d26440c6b9c8","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class Comment(userId: String, articleId: String, text: String, timestamp: Long)"}
{"id":"b76f82e8-1fb4-4e12-943d-4c1660819ff4","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class ArticleRecommendation(val recommendationId: String, val forUser: String, val articleId: String, val score: Double)\nobject ArticleRecommendation {\n  def unapply(r: ArticleRecommendation): Option[(String, String, String, Double)] =\n    Some((r.recommendationId, r.forUser, r.articleId, r.score))\n}"}
{"id":"19377148-a5d0-487c-a00e-d94198dc02e3","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class Notification(val userId: String, val message: String, val sentAt: Long)\n{\n  override def toString: String =\n    s\"Notification(userId=$userId, message=$message, sentAt=$sentAt)\"\n}"}
{"id":"550b5211-ef9c-4b76-ab85-e9273449bbab","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedViewEvent(userId: String, feedId: String, viewedAt: Long)"}
{"id":"1c9b5fdc-4000-41b0-af94-6e85e73bf483","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class BlockedSource(userId: String, sourceId: String, blockedAt: Long)"}
{"id":"6063352e-1e5a-4237-a711-80767093313a","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class EditorialPreference(val editorId: String, val topicsManaged: List[String], val influenceScore: Double)"}
{"id":"64c31f20-8065-426e-93c0-d97c351099b4","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class TrendingTopic(val name: String, val score: Double)\n{\n  override def equals(other: Any): Boolean = other match {\n    case that: TrendingTopic =>\n      this.name == that.name && this.score == that.score\n    case _ => false\n  }\n  override def hashCode(): Int = name.hashCode + (score * 100).toInt\n}"}
{"id":"64cc8fb9-5cbc-4e0b-b353-14616b97b50b","timestamp":1746101986790,"category":"classes_for_data","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class SocialShare(userId: String, articleId: String, sharedAt: Long)"}
{"id":"d5f0fa43-c6d6-4f54-9b2e-d9645c4a7f4d","timestamp":1746102001330,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingStation(id: String, name: String, latitude: Double, longitude: Double, capacity: Int)"}
{"id":"92042fb4-3897-4fa0-ab41-a95274806d89","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ConnectorType(val typeId: Int, val description: String) {  \n  override def equals(obj: Any): Boolean = {\n    obj match {\n      case that: ConnectorType =>\n        this.typeId == that.typeId && this.description == that.description\n      case _ => false\n    }\n  }\n  override def hashCode(): Int =\n    31 * typeId + description.hashCode\n}"}
{"id":"bddc7c54-2604-483d-b2de-7a88f0030245","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingSession(stationId: String, startTime: Long, endTime: Long, energyDeliveredKWh: Double)"}
{"id":"9f9aed2c-ad48-40fd-b70a-48cf7b8c3aa2","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class StationLocation(val street: String, val city: String, val state: String, val postalCode: String) {\n  override def toString: String = s\"$street, $city, $state $postalCode\"\n}"}
{"id":"909c6d3c-4ae0-4cc0-af39-48fd066809f8","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class UserReview(stationId: String, userId: String, rating: Int, comment: String)"}
{"id":"6a70954e-7703-4763-b93c-f90d9993e46b","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class AvailabilitySlot(val stationId: String, val dayOfWeek: String, val startHour: Int, val endHour: Int) {\n  // No equals/hashCode means no structural equality\n}"}
{"id":"595751de-246c-4b01-b7b2-089e495137ed","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class OperatorInfo(operatorId: String, operatorName: String, phoneNumber: String)"}
{"id":"2874f4e2-1ca0-4d42-93d1-151106435981","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class PowerDetails(val kw: Double, val isFastCharging: Boolean) {\n  def canEqual(that: Any): Boolean = that.isInstanceOf[PowerDetails]\n  override def equals(obj: Any): Boolean = {\n    obj match {\n      case that: PowerDetails =>\n        that.canEqual(this) && kw == that.kw && isFastCharging == that.isFastCharging\n      case _ => false\n    }\n  }\n  override def hashCode(): Int = (kw * 31).toInt + isFastCharging.hashCode\n}"}
{"id":"bc2e2248-e042-4246-864a-db96975c39ee","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class AddressDetail(stationId: String, streetAddress: String, city: String, zipCode: String)"}
{"id":"59877c0e-76fc-47bb-9c64-c0e0749e68f8","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class StationCharger(val chargerId: String, val chargerType: String, val status: String)\n"}
{"id":"dd13f30f-bcff-43dd-b988-950640349d7c","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingRate(ratePerKWh: Double, currency: String)"}
{"id":"fa1f8565-af8b-4e9a-b68e-ec3262053064","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"object StationStatus {\n  def unapply(obj: StationStatus): Option[String] =\n    Some(obj.status)\n}\nclass StationStatus(val stationId: String, val status: String)"}
{"id":"8732f44a-1092-4033-8271-9c77474ad08b","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class Favorites(userId: String, favoriteStationIds: List[String])"}
{"id":"38aa95e1-c970-452e-9a6f-4aabcd7fbfe3","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class SessionHistory(val sessionId: String, val vehiclePlate: String, val start: Long, val end: Long) {\n  override def toString: String =\n    s\"Session[$sessionId] - $vehiclePlate: $start to $end\"\n}"}
{"id":"efe08b0a-cdfb-45ff-a436-cfded518b35f","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingNetwork(networkName: String, country: String, establishedYear: Int)"}
{"id":"32e48beb-adb7-4d24-8577-27a6125f2f9e","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargeCost(val totalAmount: Double, val durationMinutes: Int)"}
{"id":"03bcaf4c-d021-4fbd-8c29-5f0c6a1db120","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class SupportedPlugType(stationId: String, plugType: String)"}
{"id":"47cb27d6-9413-4910-a7bc-49e9a2ac7b75","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class NearbyStation(val latitude: Double, val longitude: Double, val distanceMeters: Int)\n"}
{"id":"690dcfdf-e5d2-48ac-a30f-27e999f26f0a","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class PlugAvailability(plugType: String, availableCount: Int, totalCount: Int)"}
{"id":"53d89527-c2fd-49a8-b0bd-9ce6b84d9146","timestamp":1746102001331,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargingAlert(val userId: String, val thresholdPercent: Int, val alertEnabled: Boolean)\n"}
{"id":"bc22b01d-5a8d-433a-9c2f-3a087668073c","timestamp":1746102030075,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class StationLocation(latitude: Double, longitude: Double, address: String)"}
{"id":"a8228701-3add-4e35-b766-b5ad74a2a9ee","timestamp":1746102030075,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargingStationDetail(val name: String, val stationLocation: StationLocation, val isAvailable: Boolean)\noverride def equals(obj: Any): Boolean =\n  obj match {\n    case that: ChargingStationDetail =>\n      this.name == that.name &&\n      this.stationLocation == that.stationLocation &&\n      this.isAvailable == that.isAvailable\n    case _ => false\n  }\noverride def hashCode(): Int =\n  (name, stationLocation, isAvailable).##\noverride def toString: String =\n  s\"ChargingStationDetail($name, $stationLocation, $isAvailable)\""}
{"id":"0c1baf87-2ca0-4a9c-9afe-b313f874d019","timestamp":1746102030075,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargerType(connector: String, maxPowerKW: Int)"}
{"id":"9d540e4e-57ce-445f-bdbd-4a59cb4a023b","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class PowerRating(val voltage: Int, val amps: Int)"}
{"id":"5d47233c-9c82-45a6-b843-1fe4b08a2ac7","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingSession(userId: String, stationId: String, startTime: Long, endTime: Option[Long])"}
{"id":"f97c414e-2bcf-406e-9d19-e2d9bb518473","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class EVStation(val stationId: String, val location: StationLocation, val chargerType: ChargerType)\ndef canCharge(connector: String): Boolean =\n  chargerType.connector == connector\n"}
{"id":"558f127c-930f-4e68-9bf9-cfd18ddc6127","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingStationReview(stationId: String, reviewer: String, rating: Int, comment: String)"}
{"id":"ed2a749b-78d0-429b-a6d4-836e4fd5ef11","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class UserFavoriteStation(val user: String, val favoriteStationId: String)"}
{"id":"44b9937b-fffa-4760-b671-62ee4a3db136","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class EVChargingNetwork(networkName: String, stations: List[EVStation])"}
{"id":"1b109169-2f1a-4b90-81c2-1d856004386d","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class AvailableConnector(val typeName: String, val quantity: Int)"}
{"id":"0c19530a-2eaa-4781-8062-6a388c9970d7","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingPricing(stationId: String, pricePerKWh: Double, flatFee: Option[Double])"}
{"id":"0091b2c3-c0f3-4cfb-92ba-689ffc785aae","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class RealTimeStatus(val stationId: String, val isOccupied: Boolean)"}
{"id":"6dc9798a-7907-41b3-8d1a-615f9640a994","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"enum StationStatus:\n  case Available, InUse, OutOfService, Unknown"}
{"id":"c72c254b-d074-4091-ada9-7fa44ca7c802","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargingSessionRecord(val sessionId: String, val vehicleId: String, val start: Long, val end: Option[Long])\noverride def toString: String =\n  s\"ChargingSessionRecord($sessionId, $vehicleId, $start, $end)\""}
{"id":"01055ccd-1c68-4ba9-95f2-5131b9ca59c1","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class OperatorInfo(operatorId: String, operatorName: String, contactNumber: String)"}
{"id":"0e2aa7ca-36cf-4efd-9209-1fdadd542e19","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class EVPlug(val plugId: String, val compatibleStationIds: List[String])"}
{"id":"913c3129-ab43-44cd-b2ad-d8799724e138","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class NearbyStationResult(station: StationLocation, distanceMeters: Double)"}
{"id":"12e75ce6-e933-488a-a7bf-c206aa07f170","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"object ChargingStationDetail:\n  def unapply(cs: ChargingStationDetail): Option[(String, StationLocation, Boolean)] =\n    Some((cs.name, cs.stationLocation, cs.isAvailable))"}
{"id":"2b191493-bffa-4df9-b52e-dbb3062a15ed","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class EVChargerInstallationRequest(address: String, preferredConnector: String, requestedBy: String)"}
{"id":"747993d1-eec5-41f6-a72a-324b8160f089","timestamp":1746102030076,"category":"classes_for_data","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargingStationFault(val stationId: String, val reportedTime: Long, val issueDescription: String)\noverride def equals(obj: Any): Boolean =\n  obj match\n    case that: ChargingStationFault =>\n      this.stationId == that.stationId &&\n      this.reportedTime == that.reportedTime &&\n      this.issueDescription == that.issueDescription\n    case _ => false\n  \noverride def hashCode(): Int =\n  (stationId, reportedTime, issueDescription).##\n  "}
{"id":"bcb15d37-9054-4b1a-a1e5-02ecc8a52066","timestamp":1746103024891,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class SoilSample(location: String, moisturePercent: Double, pH: Double)"}
{"id":"9455346e-1f33-44e9-89b6-ad91a009b695","timestamp":1746103024891,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class WeatherObservation(val stationId: Int, val temperatureCelsius: Double, val rainfallMm: Double) {  \n  override def toString: String = s\"Station $stationId: $temperatureCelsius°C, $rainfallMm mm rainfall\"\n}"}
{"id":"0199ccc8-c28e-4df7-a6da-3c2a59de7147","timestamp":1746103024891,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class CropField(fieldName: String, areaAcres: Double, cropType: String)"}
{"id":"72547072-5469-4d46-857c-ced07fc28db7","timestamp":1746103024891,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class PestDetection(val cropId: String, val pestType: String, val severityLevel: Int) {\n  override def hashCode(): Int = cropId.hashCode + pestType.hashCode * 31 + severityLevel\n  override def equals(obj: Any): Boolean = obj match {\n    case that: PestDetection => \n      this.cropId == that.cropId && \n      this.pestType == that.pestType && \n      this.severityLevel == that.severityLevel\n    case _ => false\n  }\n}"}
{"id":"59338672-30ec-4d61-9cb8-25281dc262c2","timestamp":1746103024891,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class CropYieldEstimate(cropType: String, fieldName: String, expectedTons: Double)"}
{"id":"66752ebb-8735-4f81-a1af-6f5f023bd24e","timestamp":1746103024891,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class IrrigationLog(val timestamp: Long, val zone: String, val litersUsed: Double) {\n  override def toString = s\"$zone at $timestamp: $litersUsed L\"\n}"}
{"id":"55b2b3ae-6cb5-4a4d-9505-e5ac44dc3212","timestamp":1746103024891,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class GrowthStageEvent(cropId: String, stage: String, observationDate: String)"}
{"id":"08067a8a-ffb9-4f7d-86bf-c8cfe4887bd3","timestamp":1746103024891,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class SensorReading(val deviceId: String, val humidityPercent: Double, val temperatureC: Double) {\n  override def hashCode(): Int = deviceId.hashCode ^ humidityPercent.toInt ^ temperatureC.toInt\n  override def equals(obj: Any): Boolean = obj match {\n    case sr: SensorReading => \n      deviceId == sr.deviceId && \n      humidityPercent == sr.humidityPercent && \n      temperatureC == sr.temperatureC\n    case _ => false\n  }\n}"}
{"id":"a600e3a2-1143-47a2-bbc6-2087172037d9","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class FertilizerApplication(fieldName: String, dateApplied: String, fertilizerType: String, amountKg: Double)"}
{"id":"00364790-386e-4a56-a970-df7305638196","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class DroneSurvey(val surveyId: Int, val flightDate: String, val fieldId: String)\nobject DroneSurvey {\n  def unapply(d: DroneSurvey): Option[(Int, String, String)] = \n    Some((d.surveyId, d.flightDate, d.fieldId))\n}"}
{"id":"db5c5046-82b8-488b-9c06-38cb28b5cfbd","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class DiseaseIncident(cropType: String, reportedDate: String, diseaseName: String, severity: String)"}
{"id":"e618419a-a74b-4c8f-bdac-baed23301c07","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class HarvestRecord(val cropType: String, val field: String, val harvestedTons: Double) {\n  override def toString = s\"Harvested $harvestedTons tons of $cropType from $field\"\n}"}
{"id":"d02d327e-bf12-49ad-aceb-e0393bbbf6fe","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class SatelliteImage(imageId: String, fieldName: String, captureDate: String, ndviIndex: Double)"}
{"id":"35abd09d-a06d-46a6-8163-5c4a3fad42ae","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class CropHealthAlert(val cropId: String, val issue: String, val alertDate: String)\nobject CropHealthAlert {\n  def unapply(alert: CropHealthAlert): Option[(String, String, String)] = \n    Some((alert.cropId, alert.issue, alert.alertDate))\n}"}
{"id":"439f6eeb-099a-45c1-959c-b20c93e85a25","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class WaterLevelSensor(sensorId: String, fieldName: String, measuredCm: Double, measurementTime: String)"}
{"id":"42f20bbd-429f-44dd-b8dc-326579b733d8","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class IrrigationSchedule(val fieldId: String, val scheduledDate: String, val waterVolumeLiters: Double)\nobject IrrigationSchedule {\n  def unapply(s: IrrigationSchedule): Option[(String, String, Double)] = \n    Some((s.fieldId, s.scheduledDate, s.waterVolumeLiters))\n}"}
{"id":"e76aa64b-22f6-491f-9a9f-d760d0ce8f6c","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class WeatherForecast(fieldName: String, forecastDate: String, expectedRainMm: Double, minTemp: Double, maxTemp: Double)"}
{"id":"4ee8a0c1-82d0-4458-a10e-69482f64ca5c","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class FieldInspection(val inspector: String, val field: String, val date: String, val notes: String)"}
{"id":"8bdc88e7-0f03-4187-9c7d-cc023f8fdee6","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class CropVariety(varietyName: String, maturityDays: Int, resistanceRating: String)"}
{"id":"e9b0c102-eaf8-4d41-a1bf-040743d6657f","timestamp":1746103024892,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class TractorUsageLog(val operatorName: String, val field: String, val hoursUsed: Double, val logDate: String)"}
{"id":"2551ef1b-3174-495e-8f17-a6f8d904ff3c","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class CropMeasurement(date: String, cropType: String, moistureLevel: Double, sunlightHours: Double)"}
{"id":"0f78c1ef-309f-4fe2-b192-c4c602e4ec49","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class SoilNutrientSample(val location: String, val nitrogen: Double, val phosphorus: Double, val potassium: Double)\n{\n  override def equals(obj: Any): Boolean =\n    obj match {\n      case that: SoilNutrientSample =>\n        this.location == that.location &&\n        this.nitrogen == that.nitrogen &&\n        this.phosphorus == that.phosphorus &&\n        this.potassium == that.potassium\n      case _ => false\n    }\n\n  override def hashCode(): Int =\n    (location, nitrogen, phosphorus, potassium).##\n}"}
{"id":"6b81c397-be40-4fa6-baa5-cb977330f57e","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class WeatherObservation(timestamp: Long, temperature: Double, rainfall: Double, windSpeed: Double)"}
{"id":"f86dfe07-4024-47e5-9037-21c325c1e98a","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class PestReport(val fieldId: Int, val pestType: String, val severity: Int)"}
{"id":"912ba745-7b8a-4f76-9759-667e896b1a1f","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class IrrigationEvent(eventId: Long, plotName: String, amountLiters: Double, eventTime: String)"}
{"id":"e13c5320-9893-4640-8b3e-0c59f8f08412","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class CropYield(val cropName: String, val yieldKg: Double, val harvestDate: String) {\n  override def toString(): String =\n    s\"CropYield(cropName=$cropName, yieldKg=$yieldKg, harvestDate=$harvestDate)\"\n}"}
{"id":"cc0669fb-70a0-47c8-9b4f-f06de7f71c40","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class DiseaseIncident(incidentId: Long, plantType: String, disease: String, detectedDate: String)"}
{"id":"df6abd4a-c18d-4d5c-85f1-72da36966a6b","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class FertilizerApplication(val areaId: String, val fertilizerType: String, val applicationDate: String)\nobject FertilizerApplication {\n  def unapply(fa: FertilizerApplication): Option[(String, String, String)] =\n    Some((fa.areaId, fa.fertilizerType, fa.applicationDate))\n}"}
{"id":"2f8ecf8e-4878-41f4-8f02-9eb9fe50944f","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class FieldSensorReading(sensorId: String, fieldSection: String, value: Double, measurementType: String)"}
{"id":"099d6c0c-7a9a-49ca-98e5-0a5636ec9add","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class GrowthStageObservation(val crop: String, val stage: String, val dayOfYear: Int)\nobject GrowthStageObservation {\n  def unapply(gso: GrowthStageObservation): Option[(String, String, Int)] =\n    Some((gso.crop, gso.stage, gso.dayOfYear))\n}"}
{"id":"83e0e8de-3cbf-4dba-ba88-706eed6ef3b5","timestamp":1746103037007,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class FieldBoundary(fieldId: Int, boundaryPoints: List[(Double, Double)])"}
{"id":"2516ecf8-8c6e-4467-8e4e-45bc60bdc22d","timestamp":1746103037008,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class DroneSurvey(val surveyId: Long, val areaCovered: Double, val imageCount: Int) {\n  override def hashCode(): Int = (surveyId, areaCovered, imageCount).hashCode()\n}"}
{"id":"904fc647-0736-479b-8d29-c354a03f6058","timestamp":1746103037008,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class CropRotationPlan(planId: Int, cropSequence: List[String], periodYears: Int)"}
{"id":"17c65ddd-b7ae-4552-b6b2-835a21f6242c","timestamp":1746103037008,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class IrrigationSchedule(val plotId: String, val scheduledTime: String)\nobject IrrigationSchedule {\n  def unapply(is: IrrigationSchedule): Option[(String, String)] =\n    Some((is.plotId, is.scheduledTime))\n}"}
{"id":"4cc5e586-c915-453f-b3b6-d3604835ed5c","timestamp":1746103037008,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class GreenhouseClimateSetting(greenhouseId: String, humidity: Double, temperature: Double, timeSet: String)"}
{"id":"11a767eb-aa49-4156-8ee5-942dbb66f9ea","timestamp":1746103037008,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class FertilityRating(val fieldSection: String, val rating: Int)"}
{"id":"b6d4718c-4181-4f8a-91ce-cd77d7af5cf9","timestamp":1746103037008,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class EquipmentUsageRecord(equipmentId: String, usageHours: Double, usageDate: String)"}
{"id":"0a891ff7-6f6b-47a0-90b7-0fce9d107dfa","timestamp":1746103037008,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class CropHealthScore(val plantId: Long, val score: Double)\nobject CropHealthScore {\n  def unapply(chs: CropHealthScore): Option[(Long, Double)] =\n    Some((chs.plantId, chs.score))\n}"}
{"id":"eacf8dd5-7476-440f-b1fa-af93ab33bf16","timestamp":1746103037008,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class PestScoutingResult(area: String, detected: Boolean, observationDate: String)"}
{"id":"d8a6bffd-ca3a-4467-a1e0-392260466e34","timestamp":1746103037008,"category":"classes_for_data","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class WaterSource(val sourceType: String, val capacityLiters: Double)"}
{"id":"dfe16f8b-7168-4b45-8d53-e7cc32a64626","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class TemperatureSensorReading(sensorId: String, timestamp: Long, temperatureCelsius: Double)"}
{"id":"348b1bc1-9883-463f-aa29-4d84ea3dc472","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class HumiditySensorAggregate(val sensorId: String, val readings: List[Double]) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: HumiditySensorAggregate =>\n      this.sensorId == that.sensorId && this.readings == that.readings\n    case _ => false\n  }\n  override def hashCode(): Int =\n    41 * sensorId.hashCode + readings.hashCode()\n  override def toString: String =\n    s\"HumiditySensorAggregate($sensorId, $readings)\"\n}"}
{"id":"b272068c-62a8-41ca-84d6-873698ffa1c7","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class PressureAggregate(deviceId: String, min: Double, max: Double, average: Double)"}
{"id":"e81e74d1-83e5-4e16-bd81-b55718421385","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class SensorDeviceSummary(val deviceId: String, val status: String)"}
{"id":"461182fa-6b47-47e4-a97c-cf7a3311f1be","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class LightLevelBatch(sensorLocation: String, readings: Vector[Int])"}
{"id":"fcce0ee4-69b6-4de8-9cef-4dabcf320f53","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"object MotionSensorSnapshot {\n  def unapply(obj: MotionSensorSnapshot): Option[(String, Int, Long)] =\n    Some(obj.sensorId, obj.motionEvents, obj.aggregationWindow)\n}\nclass MotionSensorSnapshot(val sensorId: String, val motionEvents: Int, val aggregationWindow: Long)"}
{"id":"ff792773-1393-4307-9ec9-6cb0352612ca","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class VibrationEvent(sensorUnit: String, detected: Boolean, atMillis: Long)"}
{"id":"ad816f29-86bd-4ee4-a0d8-5fa518c0244d","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class EnvironmentalMetrics(val unitLabel: String, val temperatureAvg: Double, val humidityAvg: Double)"}
{"id":"64f17aa5-0fed-46d0-895a-9e90246467a2","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class SensorUptimeReport(sensorId: String, uptimeHours: Double, sampledAt: Long)"}
{"id":"dbbf7ca6-d2a3-4ce5-bed4-47670858593a","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class CO2LevelSample(val nodeLabel: String, val ppm: Int, val sampleTime: Long) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CO2LevelSample =>\n      this.nodeLabel == that.nodeLabel && this.ppm == that.ppm &&\n      this.sampleTime == that.sampleTime\n    case _ => false\n  }\n  override def hashCode(): Int =\n    nodeLabel.hashCode * 17 + ppm * 23 + sampleTime.hashCode\n}"}
{"id":"93eca8c1-b2ec-43e8-b6cc-78d5898a9f63","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class AggregatedEnergyUsage(deviceId: String, wattHours: Double, intervalMinutes: Int)"}
{"id":"daa04082-4c37-4ab2-839d-84bfad57f3c1","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class RainGaugeAggregate(val stationId: String, val intervalMillis: Long, val rainfallMillimeters: Double)"}
{"id":"6e03fc30-7213-43c3-bff6-70e9425de384","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class NetworkPacketLossSummary(sensorAlias: String, lostPackets: Int, periodSeconds: Int)"}
{"id":"48083c85-6525-4779-9a17-3892dd322f2c","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class SoundLevelReport(val zoneName: String, val decibelAverage: Double, val recordedAt: Long)"}
{"id":"daad03f6-5fda-44d1-b372-441f3732bb42","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class SensorBatteryStatus(sensorName: String, batteryPercent: Double, recordedEpoch: Long)"}
{"id":"08f62084-3561-44e5-98d1-2ae3542ea8bb","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class GasLeakMonitor(val pipelineId: String, val leakDetected: Boolean) {\n  override def toString: String =\n    s\"GasLeakMonitor($pipelineId, $leakDetected)\"\n}"}
{"id":"11dddc0c-a515-4199-9457-7de7e7642faf","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class ParticulateMatterAggregate(region: String, pm25: Double, pm10: Double, observedAt: Long)"}
{"id":"d220b965-4e9f-4cae-9a40-8ff64a01cac1","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class AnalogInputSeries(val inputLabel: String, val samples: Array[Double])"}
{"id":"f3b1b43c-72d0-4c32-a269-ab675ba502f1","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"enum SensorState:\n  case Online, Offline, Maintenance\n"}
{"id":"19da2e26-aab8-4867-a417-549b65aaa905","timestamp":1746103053597,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class SensorGatewayInfo(val gatewayId: String, val deviceCount: Int, val isActive: Boolean)"}
{"id":"cad59042-ced4-4373-adb6-1df8354c3da9","timestamp":1746103074895,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class TemperatureReading(sensorId: String, celsius: Double, timestamp: Long)"}
{"id":"942c3901-8e7b-49eb-982e-95bb3245c55d","timestamp":1746103074895,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class HumiditySample(val deviceId: String, val percentage: Double, val epoch: Long)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: HumiditySample =>\n    this.deviceId == that.deviceId && this.percentage == that.percentage && this.epoch == that.epoch\n  case _ => false\n}\noverride def hashCode(): Int = deviceId.hashCode + percentage.hashCode + epoch.hashCode\n"}
{"id":"d14da9ff-eb6f-4d13-bfd4-1ee773f83e5e","timestamp":1746103074895,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class PressureAggregation(location: String, readings: List[Double], average: Double)"}
{"id":"ef8bf134-a8da-4c45-92bb-f8f50b51311e","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class MotionDetection(val sensorName: String, val movementDetected: Boolean, val atMillis: Long)\ndef toString: String = s\"${sensorName}: ${if (movementDetected) \"Motion\" else \"No motion\"} at $atMillis\"\n"}
{"id":"94fccf1c-4747-4978-b043-4483c4829cfd","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class LightLevelMeasurement(sensorLocation: String, lux: Int, collectedAt: Long)"}
{"id":"475c480d-359e-4429-8688-c7f74e781b06","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class CO2Concentration(val monitoringStation: String, val ppm: Int, val captured: Long)\noverride def toString: String =\n  s\"CO2Concentration(station=$monitoringStation, ppm=$ppm, captured=$captured)\"\n"}
{"id":"eee5b0dd-4e22-430d-8378-caba08881836","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class SensorStatus(deviceId: String, active: Boolean, batteryLevel: Double)"}
{"id":"61f3cf83-fdca-4932-8d69-ee57c412d6ab","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class VibrationEvent(val unitId: String, val magnitude: Double, val occurredAt: Long)\nobject VibrationEvent {\n  def unapply(ve: VibrationEvent): Option[(String, Double, Long)] =\n    Some((ve.unitId, ve.magnitude, ve.occurredAt))\n}\n"}
{"id":"60b20d53-5445-4903-978f-bbf75c8f0120","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"enum ReadingType:\n  case Temperature, Humidity, Pressure, Light, Motion"}
{"id":"4470112a-9d94-4f98-96c8-4a12609a734d","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class AggregatedSensorValues(val clusterId: String, val sum: Double, val count: Int)\n"}
{"id":"bc5f2289-38e7-4872-9b4d-08756631ff79","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class SensorCluster(clusterName: String, sensorIds: List[String])"}
{"id":"b8d9104e-952f-4e76-9ded-fdc30e05d182","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class EnvironmentalSnapshot(val siteCode: String, val temp: Double, val humid: Double)\n"}
{"id":"564ec8fc-f11b-4ee9-a2ed-0d31b01bb5e2","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class BatteryReport(sensorNode: String, voltage: Double, timestamp: Long)"}
{"id":"8e7e7225-fa50-4e11-a3b3-4f698cda79c9","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class MultiSensorPayload(val mainSensor: String, val readings: List[Double], val recordTime: Long)\n"}
{"id":"846dfca3-f35d-4f0e-8882-c5793b914b87","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class AirQualitySample(zone: String, pm25: Double, pm10: Double, timeRecorded: Long)"}
{"id":"6feed93b-05cb-4f7c-a5bf-d1530ed0b396","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class LocationAggregate(val area: String, val avgTemp: Double, val avgHumidity: Double)\nobject LocationAggregate {\n  def unapply(l: LocationAggregate): Option[(String, Double, Double)] =\n    Some((l.area, l.avgTemp, l.avgHumidity))\n}\n"}
{"id":"eacf9ca6-a1c0-4cb5-95c0-37151785ec46","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class AggregationSummary(sensorType: String, minValue: Double, maxValue: Double, total: Double)"}
{"id":"374c9e83-73bd-482b-879f-b089b3768d2d","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class SystemAlert(val message: String, val critical: Boolean, val detectedAt: Long)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: SystemAlert =>\n    this.message == that.message && this.critical == that.critical && this.detectedAt == that.detectedAt\n  case _ => false\n}\noverride def hashCode(): Int = message.hashCode + critical.hashCode + detectedAt.hashCode\n"}
{"id":"62bfca71-c7f0-400c-8fb3-1907d28d7ace","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class EnergyConsumptionMeter(sensorName: String, watts: Double, sampledAt: Long)"}
{"id":"f0f03542-43a0-43ce-8491-a01276d00fa3","timestamp":1746103074896,"category":"classes_for_data","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class DeviceMetadata(val serial: String, val firmwareVer: String, val installed: Long)\n"}
{"id":"f557b338-2222-46da-936b-9a15a95d1406","timestamp":1746103088281,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class BusStop(stopId: Int, name: String, latitude: Double, longitude: Double)"}
{"id":"f83e604e-1ed6-4b6f-b8bc-1e70061cd8fb","timestamp":1746103088281,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class TrainStation(val stationCode: String, val name: String, val platforms: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case st: TrainStation =>\n      st.stationCode == this.stationCode && st.name == this.name && st.platforms == this.platforms\n    case _ => false\n  }\n  override def hashCode(): Int = stationCode.hashCode ^ name.hashCode ^ platforms.hashCode\n  override def toString: String = s\"TrainStation($stationCode, $name, $platforms)\"\n}"}
{"id":"3843f697-c7a3-45f0-b4c5-175e47dee0f8","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class TransitRoute(routeId: String, stops: List[BusStop], isNightService: Boolean)"}
{"id":"68757225-96b2-445f-9255-f3f25cc75751","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class TramLine(val lineId: String, val lineName: String, val dailyService: Boolean)\n"}
{"id":"4932de28-6d6f-40b1-9678-80c151f2acb2","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class Passenger(name: String, ticketNumber: Long, origin: BusStop, destination: BusStop)"}
{"id":"6724ce53-8ee9-419d-8f53-0fca9e1d5cc6","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class TimetableEntry(val departureTime: String, val arrivalTime: String, val serviceNumber: String)\n"}
{"id":"a20af060-1bcb-497f-b353-e6e60f234d35","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class TransferOption(fromStop: BusStop, toStop: BusStop, waitMinutes: Int)"}
{"id":"708250aa-cbd1-4a8c-9f2d-abeb246dd876","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Schedule(val stop: BusStop, val scheduledArrival: String, val scheduledDeparture: String) {\n  override def toString: String =\n    s\"Schedule(stop=${stop.name}, scheduledArrival=$scheduledArrival, scheduledDeparture=$scheduledDeparture)\"\n}"}
{"id":"236e4b7c-cfad-4097-9d10-a2a128caac1c","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class ServiceAlert(alertId: Int, description: String, affectedRoutes: List[String])"}
{"id":"0554265b-b2b1-4892-88f4-583674853449","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class MetroConnection(val fromStation: TrainStation, val toStation: TrainStation, val travelTime: Int)\n"}
{"id":"8b9c1291-ca93-4154-bdcd-e9e2673d49e9","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class TripSegment(route: TransitRoute, boardTime: String, alightTime: String)"}
{"id":"2ff06e99-e843-4cdb-aeef-07be8141f96d","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class FareRule(val originZone: Int, val destinationZone: Int, val price: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case fr: FareRule =>\n      fr.originZone == originZone && fr.destinationZone == destinationZone && fr.price == price\n    case _ => false\n  }\n}"}
{"id":"8397402d-1a0a-4d78-b248-2390c147c182","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class RoutePlan(passenger: Passenger, segments: List[TripSegment], totalFare: Double)"}
{"id":"64307c4e-4ff9-415e-b615-bbc498d64ab9","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Bus(val vehicleNumber: String, val capacity: Int, val assignedRoute: TransitRoute) {\n  override def toString: String =\n    s\"Bus($vehicleNumber, $capacity, assignedRouteId=${assignedRoute.routeId})\"\n}"}
{"id":"5b35c4cb-2e8f-4c94-a173-e73085581e11","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class ArrivalInfo(stop: BusStop, scheduled: String, predicted: Option[String])"}
{"id":"a02c4ff6-373f-4aaf-929f-cabbfa955cb1","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Ticket(val id: Long, val trip: RoutePlan)\n"}
{"id":"bd60e96d-ef8e-4d97-bb35-d9bc38fbd149","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class RealTimeUpdate(stop: BusStop, expectedArrival: String, delayMinutes: Int)"}
{"id":"5c7c5591-3dbf-4989-8b27-b87ab54dba92","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"object TimetableUnapply {\n  def unapply(entry: TimetableEntry): Option[(String, String, String)] =\n    Some((entry.departureTime, entry.arrivalTime, entry.serviceNumber))\n}"}
{"id":"91700c3c-4cd3-496b-b5f6-7edcd75593b6","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"enum VehicleType derives CanEqual {\n  case Bus, Tram, Metro, Ferry\n}"}
{"id":"51070146-d0c5-49aa-b76a-b89c40b2d9d4","timestamp":1746103088282,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Journey(val routePlan: RoutePlan, val startedAt: String, val finishedAt: String)"}
{"id":"d91effb4-ff08-4e42-9820-cccbcb4fac4a","timestamp":1746103102068,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class BusRoute(routeId: Int, stops: List[String], operator: String)"}
{"id":"aa3ea4fc-f062-4bfe-837a-f7a4d381a1df","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class TramLine(val lineNumber: String, val stops: List[String], val color: String)\noverride def equals(obj: Any): Boolean = obj match {\n  case t: TramLine => lineNumber == t.lineNumber && stops == t.stops && color == t.color\n  case _ => false\n}\noverride def hashCode(): Int =\n  lineNumber.hashCode + 31 * stops.hashCode + 17 * color.hashCode"}
{"id":"9ad6f88f-46f7-4c12-af9c-216b2ff39a32","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class JourneySegment(fromStop: String, toStop: String, mode: TransitMode)\n\nenum TransitMode {\n  case Bus, Tram, Subway, Ferry\n}"}
{"id":"dab7bfb0-a063-487a-9829-11c001f75575","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class MetroStation(val stationName: String, val zone: Int, val accessible: Boolean)\noverride def toString: String = s\"MetroStation($stationName, $zone, $accessible)\""}
{"id":"3315dec0-340c-4b05-9a42-32717fdf56cb","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class RouteLeg(vehicleType: String, start: String, end: String, departureTime: String, arrivalTime: String)"}
{"id":"6b341387-eff3-428a-92e8-7307e1db375e","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Timetable(val stop: String, val times: List[String])"}
{"id":"2c5692a5-d320-4853-9740-d840abe509d5","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class StopTime(stopName: String, arrival: String, departure: String)"}
{"id":"17775eeb-8e54-48a0-8bc0-e3b310829133","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Connection(val origin: String, val destination: String, val minutes: Int)\noverride def equals(obj: Any): Boolean = obj match {\n  case c: Connection => origin == c.origin && destination == c.destination && minutes == c.minutes\n  case _ => false\n}\noverride def hashCode(): Int = origin.hashCode * 13 + destination.hashCode * 7 + minutes"}
{"id":"2492ab6d-291c-4a4f-bb33-1352437e8f26","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class PassengerProfile(favoriteStops: List[String], prefersLowFloor: Boolean, ticketType: TicketType)\n\nenum TicketType {\n  case Adult, Child, Senior, Student\n}"}
{"id":"4a552a64-1f1f-4240-ac9e-cd064bc1cdbb","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Transfer(val atStop: String, val waitMinutes: Int)"}
{"id":"350da1f7-78f9-4805-9175-cd18f0673d78","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class LineNetwork(lines: List[BusRoute], city: String)"}
{"id":"de1a8c6b-b4ec-471d-8956-f1db2e96e94a","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class BusStop(val stopCode: Int, val stopName: String)\noverride def toString: String = {\n  s\"BusStop($stopCode, $stopName)\"\n}"}
{"id":"13a75861-303d-4d32-a75d-940127cedc86","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class Path(sequence: List[RouteLeg], totalDuration: Int)"}
{"id":"946725ae-be48-49c9-99c4-cf3fd63a2d73","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Operator(val id: String, val displayName: String)\noverride def equals(obj: Any): Boolean = obj match {\n  case o: Operator => id == o.id && displayName == o.displayName\n  case _ => false\n}\noverride def hashCode(): Int = 29 * id.hashCode + displayName.hashCode"}
{"id":"dfe9e021-0a2b-425e-825a-d73a5d8f18f7","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class ScheduleEntry(line: String, stop: String, time: String)"}
{"id":"2814109d-a035-4ad4-8bbb-a21f81ab21a9","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Fare(val amount: Double, val currency: String)"}
{"id":"1b8acdb7-cfd2-4de8-bfed-e18256fe19eb","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class Trip(tripId: String, legs: List[RouteLeg], fare: Double, valid: Boolean)"}
{"id":"a0970ac4-6ab9-4492-ac1b-fdff09b67a30","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class StopConnection(val from: String, val to: String, val mode: String)\noverride def toString: String = s\"StopConnection($from, $to, $mode)\""}
{"id":"25836b5c-3ba0-4b43-930f-b781e476c40e","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class ZoneFare(zoneFrom: Int, zoneTo: Int, fareAmount: Double)"}
{"id":"bc10d850-279e-4d2c-9c12-f3b9b619caaa","timestamp":1746103102069,"category":"classes_for_data","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class TransferPoint(val transferAt: String, val toLine: String)\nobject TransferPoint {\n  def unapply(tp: TransferPoint): Option[(String, String)] = Some((tp.transferAt, tp.toLine))\n}"}
{"id":"c838e90b-b0d1-4d1a-995f-c5b2729badeb","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class Item(id: String, name: String, price: BigDecimal, quantity: Int)"}
{"id":"5bec29f8-74ff-4023-b3b1-634d1138d66b","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class PaymentTransaction(val transactionId: String, val amount: BigDecimal, val paymentMethod: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: PaymentTransaction =>\n      this.transactionId == that.transactionId &&\n        this.amount == that.amount &&\n        this.paymentMethod == that.paymentMethod\n    case _ => false\n  }\n  override def hashCode(): Int =\n    transactionId.hashCode ^ amount.hashCode ^ paymentMethod.hashCode\n  override def toString: String =\n    s\"PaymentTransaction($transactionId, $amount, $paymentMethod)\"\n}"}
{"id":"fc5f6e40-51e0-4949-a47e-97bb561e48fa","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class Receipt(id: String, lines: List[String], total: BigDecimal)"}
{"id":"99144f32-64c7-432f-8fd2-fcd24ede72c3","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class DiscountOffer(val offerId: String, val description: String, val percentage: Double) {\n  override def toString: String =\n    s\"DiscountOffer(id=$offerId, description=$description, percentage=$percentage)\"\n}"}
{"id":"57966d75-fdcc-4d86-b030-9caa1bd8c7eb","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class StoreLocation(locationId: String, name: String, address: String)"}
{"id":"38de305c-7fd4-419d-816a-66b33038816d","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class RegisterSession(val sessionId: String, val clerk: String, val openedAt: Long)"}
{"id":"35a3f28d-6190-4088-9281-5d0a06311b48","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class LoyaltyAccount(cardNumber: String, customerName: String, points: Int)"}
{"id":"8e33e1a1-8cda-4465-a3cb-1c150fbce902","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class InventoryAdjustment(val adjustmentId: String, val sku: String, val delta: Int) {\n  def canEqual(a: Any): Boolean = a.isInstanceOf[InventoryAdjustment]\n  override def equals(that: Any): Boolean = that match {\n    case other: InventoryAdjustment =>\n      other.canEqual(this) &&\n        this.adjustmentId == other.adjustmentId &&\n        this.sku == other.sku &&\n        this.delta == other.delta\n    case _ => false\n  }\n  override def hashCode: Int = adjustmentId.hashCode ^ sku.hashCode ^ delta\n}"}
{"id":"56ec2b30-702c-47fa-8a89-42998c67deb8","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class SalesOrder(orderId: String, items: List[Item], totalAmount: BigDecimal, status: String)"}
{"id":"a44fcc88-0598-4a1d-9a98-8ea8ac0a8d3a","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class RefundRequest(val refundId: String, val originalTransactionId: String, val amount: BigDecimal)"}
{"id":"dae34262-0373-4bd1-b24a-c2e39baee39e","timestamp":1746103117596,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class RegisterCloseout(sessionId: String, closedBy: String, closingTime: Long, cashCounted: BigDecimal)"}
{"id":"121534e6-8c4b-4256-8f72-0993112545d2","timestamp":1746103117597,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class GiftCard(val cardNumber: String, val balance: BigDecimal) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: GiftCard =>\n      this.cardNumber == that.cardNumber && this.balance == that.balance\n    case _ => false\n  }\n  override def hashCode(): Int = cardNumber.hashCode + balance.hashCode\n  override def toString: String =\n    s\"GiftCard($cardNumber, $balance)\"\n}"}
{"id":"f49462b6-aa56-4b5c-9c57-e7d9f6fbb0cb","timestamp":1746103117597,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class ProductSku(sku: String, productName: String, unitPrice: BigDecimal, category: String)"}
{"id":"0b146360-3c0d-4fd2-9d83-ac98f55eafc3","timestamp":1746103117597,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class EmployeeShift(val shiftId: String, val employeeName: String, val startTime: Long, val endTime: Long)"}
{"id":"85864ae9-d7f4-4d91-aeb8-038b1787afd9","timestamp":1746103117597,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class Promotion(promoCode: String, description: String, appliesToSku: Set[String], percentOff: Double)"}
{"id":"0753cbd9-2c09-4f17-ad83-47576b95448a","timestamp":1746103117597,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object PriceOverride {\n  def unapply(po: PriceOverride): Option[(String, BigDecimal, String)] =\n    Some((po.sku, po.newPrice, po.authorizedBy))\n}\nclass PriceOverride(val sku: String, val newPrice: BigDecimal, val authorizedBy: String)"}
{"id":"c0fc2b44-3148-454b-9154-8992d01c5643","timestamp":1746103117597,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class TaxRate(taxCode: String, location: String, rate: Double)"}
{"id":"e6233e6e-210b-4dd2-85a6-ade001ea84c0","timestamp":1746103117597,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class SalesChannel(val channelId: String, val channelName: String)"}
{"id":"ec4d17a0-dcbf-41cb-8aca-983f76c0bd9a","timestamp":1746103117597,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class CustomerProfile(customerId: String, name: String, email: String, enrolledLoyalty: Boolean)"}
{"id":"3657eb65-0bcf-48df-88aa-45c714a58c01","timestamp":1746103117597,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class PurchaseHistoryRecord(val recordId: String, val customerId: String, val itemsPurchased: List[String], val date: Long)"}
{"id":"61e86562-d4a2-449b-9aed-14678373e332","timestamp":1746103131165,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class ProductSku(skuId: String, name: String, price: BigDecimal, barcode: String)"}
{"id":"01d6cd04-07d2-4333-81ba-468b4527306d","timestamp":1746103131165,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class TransactionLine(item: ProductSku, quantity: Int, discount: Option[BigDecimal])"}
{"id":"c5213616-e339-463e-bce8-a9c071d852d2","timestamp":1746103131165,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class PaymentMethod(methodType: String, lastFourDigits: Option[String])"}
{"id":"25f9d08c-5dd3-48df-83ed-b62fb91bf348","timestamp":1746103131165,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class CustomerLoyaltyCard(cardNumber: String, tier: String)"}
{"id":"a2be139f-4354-4266-9114-3532d3282d07","timestamp":1746103131165,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class PosReceipt(receiptId: String, timestamp: Long, transactionLines: List[TransactionLine], totalAmount: BigDecimal)"}
{"id":"4ccac5af-3240-4ea3-9476-b3387cba4ca0","timestamp":1746103131165,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class StoreLocation(storeId: String, address: String, city: String)"}
{"id":"087382ca-36e7-4be4-ac28-17cf8c38cf87","timestamp":1746103131165,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class RefundRequest(originalReceipt: String, refundAmount: BigDecimal, reason: String)"}
{"id":"ec7facc3-55d7-473e-aabc-bdba1be9690c","timestamp":1746103131165,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class CheckoutEvent(eventId: String, eventType: String, occurredAt: Long)"}
{"id":"80d214f6-6fa1-46a7-8e59-5e6b9b1371d6","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class CashDrawerState(open: Boolean, openedBy: Option[String], currentAmount: BigDecimal)"}
{"id":"1a74bb64-969c-49e8-8cc3-4df3279ab0c0","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class InventoryAdjustment(product: ProductSku, adjustment: Int, note: Option[String])"}
{"id":"b5459049-1c5c-4ee1-aa80-9b87dfae0c20","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class SaleTransaction(val transactionId: String, val items: List[String], val total: Double){\n  override def equals(obj: Any): Boolean = obj match {\n    case that: SaleTransaction =>\n      this.transactionId == that.transactionId &&\n      this.items == that.items &&\n      this.total == that.total\n    case _ => false\n  }\n  override def hashCode(): Int = (transactionId, items, total).##\n  override def toString(): String =\n    s\"SaleTransaction($transactionId, $items, $total)\"\n}"}
{"id":"ba2dfee4-6fc5-4396-92c5-57887a09b930","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class LoyaltyMember(val memberId: String, val enrollmentDate: Long)\nobject LoyaltyMember {\n  def unapply(m: LoyaltyMember): Option[(String, Long)] =\n    Some((m.memberId, m.enrollmentDate))\n}"}
{"id":"c6f04abf-5d32-4e10-bbac-1f6334dfd6d1","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class TerminalOperator(val operatorId: String, val shiftStart: Long)\n// No custom equals/hashCode; reference equality only"}
{"id":"b305b6ab-d23f-42a2-be85-38105ce04552","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class ReceiptFooter(val message: String, val surveyUrl: Option[String]){\n  override def toString: String =\n    s\"Footer: $message ${surveyUrl.getOrElse(\"\")}\" \n}"}
{"id":"171d74be-2e4e-4ee8-8966-ea928a9da54d","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class InventoryRecord(val sku: String, val counted: Int, val expected: Int){\n  override def equals(that: Any): Boolean = that match {\n    case ir: InventoryRecord =>\n      this.sku == ir.sku && this.counted == ir.counted && this.expected == ir.expected\n    case _ => false\n  }\n  override def hashCode(): Int = (sku, counted, expected).##\n}"}
{"id":"0ba726e5-2531-4100-8349-f8acc001e6b0","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class Promotion(val code: String, val description: String, val active: Boolean)"}
{"id":"eae1956a-1af6-4e84-8538-5a18002f9ad1","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class PaymentConfirmation(val paymentRef: String, val approved: Boolean)"}
{"id":"d4e0fd17-e1b5-4e49-ad92-c67c817248d7","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class TaxCalculation(val subtotal: Double, val taxRate: Double){\n  def compute: Double = subtotal * taxRate / 100.0\n}"}
{"id":"48b83df5-b510-463d-9532-60267a052506","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class ShiftReport(val reportId: String, val closedBy: String, val salesTotal: Double)\nobject ShiftReport {\n  def unapply(r: ShiftReport): Option[(String, String, Double)] =\n    Some((r.reportId, r.closedBy, r.salesTotal))\n}"}
{"id":"34aad2eb-8aeb-4f80-9d9a-0c6b5c307e05","timestamp":1746103131166,"category":"classes_for_data","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class GiftCard(val cardCode: String, val balance: BigDecimal)\n// No equals/hashCode override"}
{"id":"c4d2609f-787b-479c-8770-834ab08947ef","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageTerm(years: Int)\n"}
{"id":"ac83ea31-634d-4a82-9474-9dd974b67881","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class PropertyDetails(val address: String, val homeValue: Double) {\n  override def equals(obj: Any): Boolean = {\n    obj match {\n      case that: PropertyDetails =>\n        this.address == that.address && this.homeValue == that.homeValue\n      case _ => false\n    }\n  }\n  override def hashCode(): Int =\n    31 * address.hashCode + homeValue.hashCode()\n  override def toString: String =\n    s\"PropertyDetails($address, $homeValue)\"\n}\n"}
{"id":"843b4321-9760-4cac-970d-bfd496eb5f9b","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageApplicant(name: String, annualIncome: Double)\n"}
{"id":"5a517eb6-5937-4706-a7cf-97169a88463b","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgagePayment(val principal: Double, val interest: Double, val total: Double)\n"}
{"id":"9a826c3c-5ae5-49cb-9c97-229e74c75f78","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class LoanDetails(loanAmount: Double, rate: Double, years: Int)\n"}
{"id":"5f311004-8203-4afd-9833-740b87ea342a","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class RateType(val description: String)\n"}
{"id":"068f461e-3de1-4b9b-9dc3-2f3dfa89c10d","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class AmortizationScheduleEntry(month: Int, principalPaid: Double, interestPaid: Double, balance: Double)\n"}
{"id":"9035cad9-fae6-486b-a0e3-edf989f92617","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MonthlyPaymentDetails(val month: Int, val interestPortion: Double, val principalPortion: Double, val remainingBalance: Double)\n"}
{"id":"77c7cc59-53f5-43df-812f-f7bf475f6a54","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class DownPayment(amount: Double, percentage: Double)\n"}
{"id":"f64be0b6-fb82-4ce9-8277-b2ea236d08e2","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageResult(val totalPayment: Double, val totalInterest: Double) {\n  def canEqual(a: Any): Boolean = a.isInstanceOf[MortgageResult]\n  override def equals(a: Any): Boolean = a match {\n    case that: MortgageResult =>\n      that.canEqual(this) &&\n        totalPayment == that.totalPayment &&\n        totalInterest == that.totalInterest\n    case _ => false\n  }\n  override def hashCode: Int = 41 * (41 + totalPayment.hashCode()) + totalInterest.hashCode()\n}\n"}
{"id":"8e497ae4-c7bf-42a6-9e24-3370bdd41182","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class InterestRateOption(title: String, rate: Double)\n"}
{"id":"37881a6a-9a14-41bc-920d-9184645ededa","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class ApplicantFinancialInfo(val yearlyIncome: Double, val creditScore: Int)\n"}
{"id":"fd63c317-2f15-4edc-8d93-7e27a1f93734","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class PaymentBreakdown(principal: Double, interest: Double, monthlyPayment: Double)\n"}
{"id":"998ad5cb-6cbf-47a5-9505-cd89c914dec1","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageEligibilityCriteria(val minDownPayment: Double, val minCreditScore: Int) {\n  override def toString(): String = s\"Minimum Down Payment: $$minDownPayment, Minimum Credit Score: $$minCreditScore\"\n}\n"}
{"id":"7d7c78a2-7d12-4550-ba4a-802be0767d03","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class PreApprovalResult(eligible: Boolean, maxLoanAmount: Double)\n"}
{"id":"e3ad1805-b2de-44c7-9169-fc9f86630877","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class AmortizationDetail(val period: Int, val interestPaid: Double, val principalPaid: Double, val balanceLeft: Double)\n"}
{"id":"ae868674-1448-4434-bfc0-12da639bc28d","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class ClosingCost(item: String, cost: Double)\n"}
{"id":"909a633e-c07b-4c6e-bdbc-8255759cc34d","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class FeeDetail(val feeName: String, val feeAmount: Double) {\n  override def toString: String = s\"$$feeName: $$feeAmount\"\n}\n"}
{"id":"3c2390cd-a966-4354-be80-8a6db32dfacf","timestamp":1746103149852,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class EarlyRepaymentInfo(isAllowed: Boolean, penalty: Option[Double])\n"}
{"id":"f9424a74-1a5d-485b-9e56-27a0a4be3c93","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageLoan(amount: Double, interestRate: Double, years: Int, applicant: ApplicantProfile)"}
{"id":"fccaee36-20ed-4496-8d91-c9a9a1929d80","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MonthlyPayment(val principal: Double, val interest: Double, val paymentNumber: Int) {\n  override def toString: String =\n    s\"MonthlyPayment(principal: $principal, interest: $interest, paymentNumber: $paymentNumber)\"\n}"}
{"id":"d85b11fa-2edd-4a71-b0b8-8981e967522b","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class ApplicantProfile(name: String, age: Int, annualIncome: Double, creditScore: Int)"}
{"id":"80c64a3a-423f-4c01-b26d-13ee9aac3eba","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageResult(val monthlyPayment: Double, val totalInterest: Double)"}
{"id":"2dd25023-6c4e-427f-bbe4-8e97fb7813c8","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageQuote(propertyValue: Double, downPayment: Double, insuranceIncluded: Boolean)"}
{"id":"c5c3c094-dca9-493e-9eee-0fbe69c34249","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class LoanRequest(val propertyPrice: Double, val deposit: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: LoanRequest => propertyPrice == that.propertyPrice && deposit == that.deposit\n    case _ => false\n  }\n  override def hashCode(): Int = propertyPrice.hashCode() * 31 + deposit.hashCode()\n}"}
{"id":"cb1ffc03-992b-47a8-aab6-df0d630645e6","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class PaymentSchedule(payments: Seq[MonthlyBreakdown])"}
{"id":"b1baa59c-20f1-4680-bb20-376252d22327","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class AmortizationBreakdown(val monthNum: Int, val principalPaid: Double, val interestPaid: Double)"}
{"id":"6935417a-9d7b-4975-81b6-0aee8eb2f7c4","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageInsurance(option: MortgageInsuranceType, annualFee: Double)"}
{"id":"d7a2b944-854d-40de-8e20-371c9436eed3","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class ApplicantDetails(val fullName: String, val employmentType: String, val grossIncome: Double)"}
{"id":"863a2bea-f089-4d09-8097-a4dc7dddeb58","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class RateOffer(annualRate: Double, fixedTermYears: Int, lender: String)"}
{"id":"c076c35c-bdde-4446-99fa-61433402e208","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class PaymentDetails(val scheduledDate: String, val amountPaid: Double)"}
{"id":"b7b653cb-cf06-4ee6-919b-2a6d477a3d8a","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class RefinanceScenario(currentLoan: MortgageLoan, newRate: Double, closingCosts: Double)"}
{"id":"df14d92e-b000-4c5b-8639-a6f992d1a77d","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class InterestAdjustment(val periodStart: String, val periodEnd: String, val adjustedRate: Double)"}
{"id":"249a96bf-6ad0-4cf1-8858-d5dba8f58c43","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class PrepaymentOption(allowed: Boolean, maxAmount: Double)"}
{"id":"69e42658-d028-49ff-bdf0-3c3dc3318872","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class ExtraRepayment(val repaymentAmount: Double, val occurrenceMonth: Int) {\n  override def toString: String =\n    s\"ExtraRepayment(repaymentAmount: $repaymentAmount, occurrenceMonth: $occurrenceMonth)\"\n}"}
{"id":"7d5f52b1-fcf1-42fd-b519-ba5f3b1d6e9d","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageCalculationResult(monthlyPayment: Double, totalInterest: Double, payoffYear: Int)"}
{"id":"bbfbd3a8-af69-459f-890e-b9dc06d24f47","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"object ManualPatternMatch {\n  class LoanSummary(val balance: Double, val termLeft: Int)\n  object LoanSummary {\n    def unapply(ls: LoanSummary): Option[(Double, Int)] = Some((ls.balance, ls.termLeft))\n  }\n}"}
{"id":"084f8cc2-70ad-40d8-9b00-eb53b78b9199","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MonthlyBreakdown(month: Int, principalComponent: Double, interestComponent: Double, remainingBalance: Double)"}
{"id":"866e3e90-af82-4027-8061-2ccf372fe572","timestamp":1746103162447,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class EscrowAccount(val propertyTax: Double, val homeInsurance: Double)\n"}
{"id":"86a417e4-a83b-4831-9064-0a570ad360fb","timestamp":1746103167072,"category":"classes_for_data","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageDetails(principal: Double, annualInterestRate: Double, loanTermYears: Int)\ndef monthlyPayment(mortgage: MortgageDetails): Double =\n  val monthlyRate = mortgage.annualInterestRate / 12 / 100\n  val n = mortgage.loanTermYears * 12\n  val numerator = mortgage.principal * monthlyRate * math.pow(1 + monthlyRate, n)\n  val denominator = math.pow(1 + monthlyRate, n) - 1\n  numerator / denominator\nval mortgage = MortgageDetails(300000, 3.5, 30)\nmortgage match\n  case MortgageDetails(p, r, t) => println(s\"Principal: $$p, Rate: $$r, Years: $$t\")\nprintln(f\"Monthly payment: $$${monthlyPayment(mortgage)}%.2f\")"}
{"id":"723b5cd7-9362-42bb-aab1-3fb388f762f7","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class TemperatureSensorReading(machineId: String, timestamp: Long, celsius: Double)"}
{"id":"6ca21ff7-523c-4da7-8b00-23d9b9c76bc9","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class VibrationProbeData(val equipmentSerial: String, val epochMillis: Long, val accelerationG: Float) {  \noverride def equals(obj: Any): Boolean = obj match {\n  case that: VibrationProbeData =>\n    this.equipmentSerial == that.equipmentSerial &&\n      this.epochMillis == that.epochMillis &&\n      this.accelerationG == that.accelerationG\n  case _ => false\n}\noverride def hashCode(): Int = equipmentSerial.hashCode ^ epochMillis.hashCode ^ accelerationG.hashCode()\ndef toString: String = s\"VibrationProbeData($equipmentSerial, $epochMillis, $accelerationG)\"\n}"}
{"id":"46daefb0-da68-4f43-89dc-2db726d3afb8","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class OilQualitySample(pumpId: String, measurementTime: Long, waterPpm: Int, viscosityIndex: Double)"}
{"id":"eea9a10b-2d6e-46ca-97c5-d39d12011570","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class MotorCurrentLog(val controllerId: String, val logTimestamp: Long, val rmsCurrent: Double)\n"}
{"id":"5021dc77-68e8-49cd-b9a8-8a43ea562473","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class HydraulicPressureRecord(hydraulicUnit: String, timestamp: Long, pressureBar: Double)"}
{"id":"974f74b8-693f-4461-a542-38f54bfe3166","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class MachineAlarmEvent(val machineCode: String, val eventOffset: Long, val alarmType: String) {\ndef toString: String =\n  s\"AlarmEvent[$machineCode | $eventOffset | $alarmType]\"\n}"}
{"id":"a225491c-d40a-4c53-904f-ce540ae1fa7d","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class ConveyorBeltSpeed(beltId: String, readingTime: Long, speedMps: Double)"}
{"id":"c96dffc9-be94-4213-aff9-fb8104a73484","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class PowerConsumptionSnapshot(val assetLabel: String, val timeRecorded: Long, val kilowatts: Float)"}
{"id":"65fe4d71-0aeb-4c43-94d3-82ae7fe56ff0","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class CoolingFanStatus(fanUnit: String, checkedAt: Long, isActive: Boolean)"}
{"id":"2075b9d9-b6e3-4f05-a5d3-0b4be36d4aea","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class EnvironmentalSensorMetrics(val roomZone: String, val readingMillis: Long, val humidityPct: Float, val temperatureC: Double)\n"}
{"id":"9b14f7a6-1d8e-4011-815b-0016243ec6ea","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class AxisPositionReading(axisName: String, captureTime: Long, positionMm: Double, velocityMms: Double)"}
{"id":"30b30546-75a7-4484-8695-3f230bb987fc","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class CompressorState(val compressorId: String, val lastChanged: Long, val running: Boolean, val psi: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CompressorState =>\n      this.compressorId == that.compressorId &&\n        this.lastChanged == that.lastChanged &&\n        this.running == that.running &&\n        this.psi == that.psi\n    case _ => false\n  }\n  override def hashCode(): Int = compressorId.hashCode ^ lastChanged.hashCode ^ running.hashCode ^ psi.hashCode()\n}"}
{"id":"854532f0-bf61-4baf-bbcd-448b9e6e7f2d","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class PumpCycleRecord(pumpUnit: String, cycleStartMs: Long, durationSec: Int)"}
{"id":"48dc82cf-5eaa-424b-a1b0-e4364812dc32","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class ToolWearMeasurement(val toolIdentifier: String, val measuredAt: Long, val wearDepthUm: Double)\n"}
{"id":"3250dd03-3b3e-4bba-8497-a1b9cef23a81","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class AirFilterDifferentialPressure(sensorLocation: String, readTimestamp: Long, deltaPressurePa: Double)"}
{"id":"8561a201-a00a-4e92-8a90-ff18ae530af2","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class ConveyorBeltJamEvent(val conveyorId: String, val detectedMillis: Long, val severityLevel: Int)"}
{"id":"a5ba0778-a832-45c6-9932-5bef26920def","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class PumpOperationalStatus(pumpId: String, statusTime: Long, isOnline: Boolean, warningCode: Option[String])"}
{"id":"d2e30397-f135-427a-86aa-ac3181748433","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class SystemUptimeRecord(val subsystemId: String, val recordedAt: Long, val uptimeSeconds: Long)\n"}
{"id":"cfe7d534-4938-4380-a52b-c3363c3a6461","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class PLCErrorReport(plcId: String, reportTime: Long, errorCode: String, message: String)"}
{"id":"dac6c8f4-ec4d-4ef3-82ea-bf2ec3492ecb","timestamp":1746103179933,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"object GearboxTemperatureReading {\n  def unapply(r: GearboxTemperatureReading): Option[(String, Long, Double)] =\n    Some((r.gearboxId, r.timeSample, r.tempCelsius))\n}\nclass GearboxTemperatureReading(val gearboxId: String, val timeSample: Long, val tempCelsius: Double)"}
{"id":"a00397ea-b1f8-4ab9-8d3c-382ae1f214ed","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class VibrationSensorReading(sensorId: String, timestamp: Long, acceleration: Double, velocity: Double, displacement: Double)"}
{"id":"07c814ae-b37b-4ac0-a7b2-e7aa99f29eff","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class VibrationSensorRecord(val sensorId: String, val timestamp: Long, val acceleration: Double, val velocity: Double, val displacement: Double)\n{\n  override def equals(other: Any): Boolean = other match {\n    case that: VibrationSensorRecord =>\n      sensorId == that.sensorId && timestamp == that.timestamp &&\n      acceleration == that.acceleration && velocity == that.velocity &&\n      displacement == that.displacement\n    case _ => false\n  }\n  override def hashCode: Int =\n    Seq(sensorId, timestamp, acceleration, velocity, displacement).map(_.hashCode).foldLeft(0)((a, b) => 31 * a + b)\n  override def toString: String =\n    s\"VibrationSensorRecord($sensorId, $timestamp, $acceleration, $velocity, $displacement)\"\n}"}
{"id":"ad24665f-bc22-44ff-9555-f3cfe31df409","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class MachineOperationLog(machineId: String, operationMode: String, operatorId: String, startTime: Long, endTime: Long)"}
{"id":"8b441d59-2cb9-49a7-9d6e-1b672a07a37c","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class MachineOperationEntry(val machineId: String, val operationMode: String, val operatorId: String, val startTime: Long, val endTime: Long)"}
{"id":"cc2ccbe2-ba0c-44ef-8740-a3ba4d1fa2e8","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class TemperatureSensorState(sensorId: String, temperature: Double, timestamp: Long, status: String)"}
{"id":"0ce4f733-fa1c-4d7e-ba23-229ca5c5df03","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class TemperatureProbe(val sensorId: String, val temperature: Double, val timestamp: Long, val status: String)\n{\n  override def equals(other: Any): Boolean = other match {\n    case that: TemperatureProbe =>\n      sensorId == that.sensorId && temperature == that.temperature &&\n      timestamp == that.timestamp && status == that.status\n    case _ => false\n  }\n  override def hashCode: Int =\n    (sensorId, temperature, timestamp, status).hashCode\n}"}
{"id":"ffdb20a3-4371-495f-a66d-fc62aaf66d5d","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class PressureMeasurement(sensorId: String, pressureValue: Double, timestamp: Long)"}
{"id":"655e015f-33be-446b-b296-1fcc183c4e8b","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class PressureTelemetry(val sensorId: String, val pressureValue: Double, val timestamp: Long)"}
{"id":"220fcf89-9b14-435e-a4f7-4eaabf50e744","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class PowerUsageRecord(machineId: String, consumedKWh: Double, startTimestamp: Long, endTimestamp: Long)"}
{"id":"f9001eac-c116-43c2-a755-673d1bf253cb","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class PowerUsageEntry(val machineId: String, val consumedKWh: Double, val startTimestamp: Long, val endTimestamp: Long)\n{\n  override def toString: String =\n    s\"PowerUsageEntry($machineId, $consumedKWh, $startTimestamp, $endTimestamp)\"\n}"}
{"id":"ff53d795-c027-4f60-83dd-e22517d9da67","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class OilLevelEvent(sensorId: String, oilLevel: Double, timestamp: Long, thresholdBreached: Boolean)"}
{"id":"a463c1dc-6378-4fe2-8276-a3a1e9459f4c","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class OilLevelLog(val sensorId: String, val oilLevel: Double, val timestamp: Long, val thresholdBreached: Boolean)\nobject OilLevelLog {\n  def unapply(o: OilLevelLog): Option[(String, Double, Long, Boolean)] =\n    Some((o.sensorId, o.oilLevel, o.timestamp, o.thresholdBreached))\n}"}
{"id":"abb36a32-87b6-40dd-bfe7-3174b8bfe0f3","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class AlarmNotification(machineId: String, alarmType: String, active: Boolean, triggeredAt: Long)"}
{"id":"43118249-ce07-4a80-95d8-f07720ba1fa0","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class AlarmEvent(val machineId: String, val alarmType: String, val active: Boolean, val triggeredAt: Long)\nobject AlarmEvent {\n  def unapply(a: AlarmEvent): Option[(String, String, Boolean, Long)] =\n    Some((a.machineId, a.alarmType, a.active, a.triggeredAt))\n}"}
{"id":"75aa8698-7059-4cf5-af1b-a443485b5f15","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class EnergyConsumptionReading(machineTag: String, energyJoules: Double, readingTime: Long)"}
{"id":"07c5a0c6-72a8-46cc-9529-c7b346311455","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class EnergyLogEntry(val machineTag: String, val energyJoules: Double, val readingTime: Long)\n{\n  def energyKWh: Double = energyJoules / 3_600_000d\n}"}
{"id":"ba395dd2-b633-4657-9122-c2479ea7ce60","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class CompressorCycleRecord(compressorId: String, cycleStart: Long, cycleEnd: Long, cycleCount: Int)"}
{"id":"6d987c19-675f-4a7a-a2de-2c414ba234c6","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class CompressorCycle(val compressorId: String, val cycleStart: Long, val cycleEnd: Long, val cycleCount: Int)"}
{"id":"9b6ab5ee-b30f-4350-886a-8cba21a86f20","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class FlowSensorLog(sensorLabel: String, flowRate: Double, loggedAt: Long)"}
{"id":"7cacadb2-5ff2-40a5-84f3-093a3a8638fd","timestamp":1746103195122,"category":"classes_for_data","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class FlowMeasurement(val sensorLabel: String, val flowRate: Double, val loggedAt: Long)"}
{"id":"a48b00a3-6b82-4226-8890-987c94c9ecb9","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class PlayerProfile(nickname: String, avatarUrl: String, score: Int)"}
{"id":"e628874d-53b4-4c03-b97a-fb7d2b637543","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class LobbyUser(val username: String, val avatar: String, val experiencePoints: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: LobbyUser =>\n      this.username == that.username &&\n      this.avatar == that.avatar &&\n      this.experiencePoints == that.experiencePoints\n    case _ => false\n  }\n  override def hashCode: Int =\n    username.hashCode ^ avatar.hashCode ^ experiencePoints.hashCode\n  override def toString: String =\n    s\"LobbyUser($username, $avatar, $experiencePoints)\"\n}"}
{"id":"4c01e28b-6185-40fd-8999-03b80035d5b8","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbyRoom(roomName: String, hostPlayer: PlayerProfile, maxCapacity: Int)"}
{"id":"8fa8fc19-7e43-4918-b675-6764db864a5b","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class GameSession(val sessionId: String, val players: List[String], val status: String) {\n  override def toString: String =\n    s\"GameSession($sessionId, $players, $status)\"\n}"}
{"id":"dc4529d9-c6be-4321-a94f-46d344ca3d60","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRHeadset(deviceId: String, firmwareVersion: String, batteryLevel: Double)"}
{"id":"d904e2a7-28e1-4786-97cf-f7c36d0a09e8","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class LobbyChatMessage(val sender: String, val message: String, val timestamp: Long)\n"}
{"id":"59539624-a78d-4025-9835-4051a6e0a1b3","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbyInvitation(fromPlayer: String, toPlayer: String, roomId: String, invitationTime: Long)"}
{"id":"2099d19a-5d57-4a6a-8b29-880447ed296a","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class MatchmakingCriteria(val preferredMap: String, val minPlayers: Int, val allowBots: Boolean) {\n  override def equals(that: Any): Boolean = that match {\n    case c: MatchmakingCriteria =>\n      this.preferredMap == c.preferredMap && this.minPlayers == c.minPlayers && this.allowBots == c.allowBots\n    case _ => false\n  }\n  override def hashCode: Int =\n    preferredMap.hashCode * 31 + minPlayers * 17 + (if (allowBots) 1 else 0)\n}"}
{"id":"8a2cb940-cb49-479e-8e1f-772b79f84853","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class ConnectionInfo(ipAddress: String, pingMs: Int, isStable: Boolean)"}
{"id":"6eaefb74-7e01-461e-950c-47d9bceaa157","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class LobbySettings(val allowSpectators: Boolean, val region: String)\n"}
{"id":"c74cd250-71e1-473d-92b6-1096a7a200ae","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class FriendRequest(senderId: String, receiverId: String, status: String)"}
{"id":"feb4f9de-6edc-41c6-a9a3-7131af3693b5","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class AvatarCustomization(val avatarId: String, val skinColor: String, val outfit: String) {\n  override def toString: String =\n    s\"AvatarCustomization($avatarId, $skinColor, $outfit)\"\n}"}
{"id":"e929929a-d6d5-4558-a3ef-4d7f98838ad3","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class SpectatorAccess(isAllowed: Boolean, maxSpectators: Int)"}
{"id":"81b75b59-5679-43e2-864e-649d3d977d84","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class PlayerBadge(val title: String, val achievedOn: Long)\n"}
{"id":"3a811294-67fc-4794-9d7e-eed2a1b46e63","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class PartyDetails(partyId: String, members: List[String], voiceChannelEnabled: Boolean)"}
{"id":"92a54446-cc67-410f-b619-1c5b674c41aa","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class RoomStatus(val currentPlayers: Int, val maxPlayers: Int, val isLocked: Boolean) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: RoomStatus =>\n      this.currentPlayers == that.currentPlayers &&\n      this.maxPlayers == that.maxPlayers &&\n      this.isLocked == that.isLocked\n    case _ => false\n  }\n  override def hashCode: Int = currentPlayers.hashCode ^ maxPlayers.hashCode ^ isLocked.hashCode\n}"}
{"id":"06c14473-bc95-4fca-86b8-99b02988ed56","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class GameLobbyLog(entryId: Long, eventType: String, timestamp: Long, userRef: Option[String])"}
{"id":"b4fb4523-b6bf-49d6-a2f5-b2a511d1117e","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class VRDevice(val model: String, val serialNumber: String)"}
{"id":"44a31bdb-b209-49f3-9140-a4e86c9de333","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class PlayerQueueEntry(playerNickname: String, joinedAt: Long, priorityScore: Int)"}
{"id":"499ab723-f6ef-4cf7-b003-15faf97bd1be","timestamp":1746103209649,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"object ManualRoomMatcher {\n  def unapply(room: LobbyRoom): Option[(String, PlayerProfile, Int)] =\n    Some((room.roomName, room.hostPlayer, room.maxCapacity))\n}\n"}
{"id":"2d3e9454-3270-4dcc-bb35-929a4b35f9a5","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class PlayerProfileVR(userId: String, avatarName: String, level: Int, isOnline: Boolean)"}
{"id":"7df907d3-49ea-4f19-a35c-e6ba0d86ca99","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class LobbySession(val sessionId: String, val host: PlayerProfileVR, val gameTitle: String, val participants: List[PlayerProfileVR]) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: LobbySession =>\n      this.sessionId == that.sessionId &&\n      this.host == that.host &&\n      this.gameTitle == that.gameTitle &&\n      this.participants == that.participants\n    case _ => false\n  }\n  override def hashCode: Int = sessionId.hashCode ^ host.hashCode ^ gameTitle.hashCode ^ participants.hashCode\n  override def toString: String = s\"LobbySession($sessionId, $host, $gameTitle, $participants)\"\n}"}
{"id":"71ebba3a-1c11-4f21-ab0c-75d4bf017fff","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRLobbyRoom(roomId: String, title: String, maxPlayers: Int, currentPlayers: Int)"}
{"id":"33815202-1989-4955-a1ba-bcd87c83cfb5","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class GameInvite(val inviteId: String, val fromUser: String, val toUser: String, val lobbyRoom: VRLobbyRoom) {\n  override def toString: String = s\"GameInvite($inviteId, $fromUser, $toUser, ${lobbyRoom.roomId})\"\n}"}
{"id":"ad63e096-17a4-42fd-8edf-3b4f39ce5064","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class MatchMakingRequest(player: PlayerProfileVR, preferredGame: String, experienceLevel: Int)"}
{"id":"62793a34-2768-4d34-9d1e-a53df25cb92d","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class LobbySettings(val allowGuests: Boolean, val minAge: Int)\n"}
{"id":"f33595d8-586a-44b8-8cdf-5181cdaff2f7","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRDevice(typeModel: String, firmwareVersion: String, isConnected: Boolean)"}
{"id":"5a27b791-cf45-4b60-859b-9e5b8be41a09","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class GameSessionInfo(val sessionId: String, val activePlayers: Int, val timer: Long)\n"}
{"id":"fedc2b69-5220-4cfa-b777-c126df860911","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class ReadyStatus(player: String, isReady: Boolean)"}
{"id":"114eea1d-d3e3-4068-b335-1629ee53426e","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class VoiceChannel(val channelId: String, val participants: List[String], val isMuted: Boolean) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: VoiceChannel =>\n      this.channelId == that.channelId &&\n      this.participants == that.participants &&\n      this.isMuted == that.isMuted\n    case _ => false\n  }\n}"}
{"id":"4eff9319-cc8c-47ec-85d9-d6addcab38bb","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class FriendRequestVR(requestId: String, sender: String, receiver: String, sentAt: Long)"}
{"id":"3f2e464c-703c-4aba-ac98-b65f72e2f25b","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class PlayerSeat(val seatNumber: Int, val isOccupied: Boolean)\n"}
{"id":"6f5a0d09-c15d-4562-9f35-353def3a2f7f","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbyAnnouncement(announcementId: String, message: String, timestamp: Long)"}
{"id":"55be23e3-1b97-44b9-a352-2a0d6dd46f05","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class LobbyReward(val rewardName: String, val rewardPoints: Int) {\n  override def toString: String = s\"LobbyReward($rewardName, $rewardPoints)\"\n  override def equals(obj: Any): Boolean = obj match {\n    case that: LobbyReward =>\n      (this.rewardName == that.rewardName) &&\n      (this.rewardPoints == that.rewardPoints)\n    case _ => false\n  }\n  override def hashCode: Int = rewardName.hashCode ^ rewardPoints.hashCode\n}\n"}
{"id":"8c99c0b2-b17e-4be8-b88e-9715efa1bc98","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class RoomPrivacySetting(isPrivate: Boolean, invitedUsers: List[String])"}
{"id":"11f3a2c9-3647-4585-8c3e-a551b99adb73","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class LobbyGame(val gameName: String, val genre: String, val maxLobbyPlayers: Int)\n"}
{"id":"3c17420e-e76a-46a4-9931-684f7c121793","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class AvatarSettings(selectedAvatar: String, colorScheme: String)"}
{"id":"82a47e12-d421-4623-9c21-31513319720b","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class SessionJoinInfo(val joinTime: Long, val joinMethod: String)\n"}
{"id":"726a6c50-8c1b-4aa5-acaf-858c3bb434dc","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class SpectatorData(userTag: String, watchingSession: String, canInteract: Boolean)"}
{"id":"c3019c12-0e03-4a56-9ec3-b1c4cee00790","timestamp":1746103228634,"category":"classes_for_data","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class GameMode(val modeId: String, val name: String, val description: String)\n"}
{"id":"7be7f102-fefb-4e1a-9f29-a1c9407488da","timestamp":1746103246171,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class EmployeeTimeEntry(employeeId: Int, date: String, hoursWorked: Double)"}
{"id":"98e511a6-7dd9-4419-9406-d529b848751c","timestamp":1746103246171,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class WorkLog(val userIdentifier: Int, val logDate: String, val timeSpent: Double)\n"}
{"id":"11509b97-c6c6-45f1-bd81-3a534646a8ac","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class DailyAttendance(employeeEmail: String, clockIn: String, clockOut: String)"}
{"id":"896d7149-612d-4c6c-816e-d15b0cbf70ae","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class Timesheet(val staffId: Int, val weekNumber: Int, val dailyHours: List[Double]) {\n  override def toString: String = s\"Timesheet($staffId, $weekNumber, $dailyHours)\"\n}"}
{"id":"be58cb7f-94f6-48f9-933a-2ceb9fc57e6f","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class OvertimeRecord(workerName: String, overtimeHours: Int, approvalStatus: Boolean)"}
{"id":"f979f4e3-61d6-45bd-8f13-20a7cb73cc67","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class ShiftAssignment(val employeeUsername: String, val shiftStart: String, val shiftEnd: String)\n"}
{"id":"b75d9632-bb8a-4f39-af13-654d4fdcb784","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class LeaveApplication(employeeId: Int, leaveType: String, daysRequested: Int)"}
{"id":"844fd84f-3f7a-491f-b833-afb45ec11bed","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class TimeBreak(val teamMemberId: Int, val startTime: String, val endTime: String) {\n  override def equals(other: Any): Boolean = other match {\n    case that: TimeBreak =>\n      this.teamMemberId == that.teamMemberId &&\n      this.startTime == that.startTime &&\n      this.endTime == that.endTime\n    case _ => false\n  }\n  override def hashCode(): Int =\n    31 * teamMemberId + startTime.hashCode + endTime.hashCode\n}"}
{"id":"48bb5beb-491a-4cd2-957a-a8cdd144ff8a","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class ProjectAllocation(employeeNumber: Int, projectId: Int, allocationPercent: Double)"}
{"id":"ac33cae0-2cd8-4e70-99d6-0c3b7c37436d","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class ShiftLog(val staffEmail: String, val checkedIn: String, val checkedOut: String)\n"}
{"id":"e30e708a-2f49-43c0-9a8e-4c4a0e60b700","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class BreakSession(employeeId: Int, start: String, end: String, reason: Option[String])"}
{"id":"d7687693-2fa8-43ee-b148-9f83574df0e4","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class OvertimeApproval(val staffCode: String, val approved: Boolean, val overtimeAmount: Int) {\n  override def equals(obj: Any): Boolean =\n    obj.isInstanceOf[OvertimeApproval] &&\n    obj.asInstanceOf[OvertimeApproval].staffCode == this.staffCode &&\n    obj.asInstanceOf[OvertimeApproval].approved == this.approved &&\n    obj.asInstanceOf[OvertimeApproval].overtimeAmount == this.overtimeAmount\n  override def hashCode(): Int =\n    staffCode.hashCode + (if (approved) 1 else 0) + overtimeAmount * 13\n  override def toString: String =\n    s\"OvertimeApproval($staffCode, $approved, $overtimeAmount)\"\n}"}
{"id":"20c496cb-7964-4202-a3c4-a8303f30f513","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class WorkSession(sessionId: Int, employeeId: Int, startTime: String, endTime: String)"}
{"id":"c3e9f7a8-2d90-42f0-8f91-1654b288c1d6","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class AbsenceNotice(val employeeLogin: String, val dateNotified: String, val absenceReason: String)\n"}
{"id":"dbff50ff-f03c-4c78-ac1e-3ec30fc47d13","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class AttendanceAdjustment(employeeId: Int, adjustmentMinutes: Int, reason: String)"}
{"id":"b2ab262f-7043-4aef-88e1-3a537eabefdf","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class TimeCorrection(val employeeName: String, val correctedHours: Double) {\n  override def equals(x: Any): Boolean = x match {\n    case t: TimeCorrection =>\n      t.employeeName == employeeName && t.correctedHours == correctedHours\n    case _ => false\n  }\n  override def hashCode(): Int =\n    employeeName.hashCode * 31 + correctedHours.##\n}"}
{"id":"f5c228a6-1449-4c8e-8a2f-f7ab1188ea78","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"enum AttendanceStatus:\n  case Present, Absent, Late, Excused\ncase class EmployeeAttendance(id: Int, status: AttendanceStatus)"}
{"id":"b11f9b52-b55b-405f-b36d-12d62ec6bda8","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class ForgotPunch(val staffUsername: String, val date: String) {\n  override def toString: String =\n    s\"ForgotPunch($staffUsername, $date)\"\n}\nobject ForgotPunch {\n  def unapply(fp: ForgotPunch): Option[(String, String)] =\n    Some((fp.staffUsername, fp.date))\n}"}
{"id":"eadf548c-36cb-4630-8bd0-74e79ebea9d5","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class WorkdaySummary(employeeId: Int, date: String, attended: Boolean)"}
{"id":"caba348a-68ca-4432-a486-f0eca42de751","timestamp":1746103246172,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class SupervisorApproval(val supervisorId: Int, val requestId: Int, val status: String)\n"}
{"id":"053c5534-faf2-46f7-9270-a99d780fb020","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class WorkSession(employeeId: String, startTime: Long, endTime: Long)"}
{"id":"0563c180-15fe-48c3-b82a-c414aa1095dc","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class TimeEntry(val user: String, val clockIn: Long, val clockOut: Long)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: TimeEntry =>\n    this.user == that.user &&\n    this.clockIn == that.clockIn &&\n    this.clockOut == that.clockOut\n  case _ => false\n}\noverride def hashCode(): Int = user.hashCode + clockIn.hashCode + clockOut.hashCode\noverride def toString: String = s\"TimeEntry($user, $clockIn, $clockOut)\""}
{"id":"f2c6a2f4-681f-4c08-84a9-dd5d8c4e1b45","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class AttendanceRecord(employeeId: String, date: String, hoursWorked: Double)"}
{"id":"1d2edcd3-372d-426a-a788-7fdd320cab2d","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class ShiftLog(val staffId: String, val shiftDate: String, val shiftHours: Int)\n// equals and hashCode are not implemented, so reference equality only applies"}
{"id":"94a3e5af-265f-4c7f-93f2-cf0d4b341d79","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class OvertimeRecord(employeeIdentifier: String, overtimeHours: Double)"}
{"id":"ca34e8ff-d8e8-4f09-a6ea-709f2314371f","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class WorkPeriod(val employeeName: String, val punchIn: Long, val punchOut: Long)\ndef getDuration: Long = punchOut - punchIn\noverride def toString: String = s\"WorkPeriod($employeeName, $punchIn, $punchOut)\""}
{"id":"d4486538-830b-4dab-b631-4065325c8da6","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class BreakInterval(employeeId: String, breakStart: Long, breakEnd: Long)"}
{"id":"edbdfe39-e718-4922-b5b4-05673dbec00a","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class Punch(val id: String, val moment: Long)\noverride def toString: String = s\"Punch($id, $moment)\""}
{"id":"c601be91-8065-44b9-a0b1-000072328422","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class TimesheetEntry(employeeId: String, entryDate: String, clockIn: Long, clockOut: Long)"}
{"id":"e654cd28-e484-4ef0-84ec-4869b5f6def8","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class PresenceRecord(val employeeCode: String, val day: String, val inTime: Long, val outTime: Long)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: PresenceRecord => this.employeeCode == that.employeeCode &&\n    this.day == that.day && this.inTime == that.inTime && this.outTime == that.outTime\n  case _ => false\n}\n"}
{"id":"b5363007-b36b-4695-a478-b92250eaa624","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class LeaveApplication(employeeId: String, leaveStart: String, leaveEnd: String, reason: String)"}
{"id":"aef98696-0de5-4592-9e9a-85a8e983edc9","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class DailyLog(val workerId: String, val logDate: String, val hoursOnSite: Double)\noverride def hashCode(): Int = workerId.hashCode + logDate.hashCode + hoursOnSite.##\n"}
{"id":"9bb7cc7e-60a0-4592-8758-5d50c3edb21f","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class WorkdaySummary(employeeId: String, date: String, totalMinutes: Int, breaks: Int)"}
{"id":"dd4f3ef8-1419-4e8d-a282-e757169bdd24","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class EmployeeShift(val empId: String, val shiftStart: Long, val shiftEnd: Long)\nobject EmployeeShift {\n  def unapply(s: EmployeeShift): Option[(String, Long, Long)] =\n    Some((s.empId, s.shiftStart, s.shiftEnd))\n}"}
{"id":"9f21dbef-1e5b-4fd3-9a05-0e4a39997c78","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class WeeklySchedule(employeeId: String, weekNumber: Int, daysScheduled: List[String])"}
{"id":"0246f0a7-f01d-4cfc-b9cb-c67268d1c71a","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class LoggedEvent(val eventId: String, val eventTime: Long, val eventType: String)\ndef isClockEvent: Boolean = eventType == \"CLOCK_IN\" || eventType == \"CLOCK_OUT\""}
{"id":"19b1af83-17bb-4798-a5ae-f4be9ab5605e","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class WorkedHour(employeeId: String, dayOfWeek: String, minutes: Int)"}
{"id":"52bba7ae-b7e4-4300-a279-136f559d43ed","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class TimeOffRequest(val requesterId: String, val fromDate: String, val toDate: String, val comment: String)\noverride def toString: String =\n  s\"TimeOffRequest($requesterId, $fromDate, $toDate, $comment)\""}
{"id":"c3f6f6fd-0c94-48ae-a796-c23176f145d3","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class ProjectAssignment(employeeId: String, projectCode: String, assignmentStart: String, assignmentEnd: String)"}
{"id":"929e6ee8-0e3a-4c82-afd3-f55925f91b3b","timestamp":1746103261102,"category":"classes_for_data","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class AbsenceEntry(val absentId: String, val absenceDate: String, val absenceReason: String)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: AbsenceEntry =>\n    this.absentId == that.absentId && this.absenceDate == that.absenceDate && this.absenceReason == that.absenceReason\n  case _ => false\n}"}
{"id":"8e0d3cb4-613a-40e7-8712-aa9f5c265e3d","timestamp":1746103277307,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WeatherAlert(alertType: String, severity: String, message: String, region: String)"}
{"id":"a1ff1681-fff9-4229-a71b-4e67cf98f46b","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class RainfallStats(val totalRain: Double, val region: String, val date: String)\noverride def toString: String = s\"RainfallStats($totalRain, $region, $date)\""}
{"id":"3c56cea0-ff59-4de2-96a4-8e8ded0358ab","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class Recipient(userId: Long, contactMethod: String)"}
{"id":"40b0dde9-cd90-4d41-a7da-2eb26db79205","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class NotificationMessage(val subject: String, val body: String)\n\ndef canEqual(other: Any): Boolean = other.isInstanceOf[NotificationMessage]\n\noverride def equals(other: Any): Boolean = other match {\n  case that: NotificationMessage =>\n    subject == that.subject && body == that.body\n  case _ => false\n}\n\noverride def hashCode: Int = subject.hashCode + 31 * body.hashCode"}
{"id":"921e2b93-c7d1-4923-a782-6c9f73a13f49","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class UserSubscription(subscriberId: Long, region: String, alertTypes: List[String])"}
{"id":"92555f45-3cda-4172-a606-e89a0c68dfe3","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WindEvent(val speed: Double, val direction: String)\n\noverride def toString: String = s\"WindEvent($speed, $direction)\""}
{"id":"85b40e1d-bf5f-4b77-9021-41ac11265510","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class TemperatureReading(region: String, temperatureC: Double, observationTime: String)"}
{"id":"e4cc0e5c-7312-4dd1-8003-5de5c43e8e43","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class ThunderstormAlert(val region: String, val probability: Double, val issuedAt: String)\ndef canEqual(other: Any): Boolean = other.isInstanceOf[ThunderstormAlert]\n\noverride def equals(other: Any): Boolean = other match {\n  case that: ThunderstormAlert =>\n    region == that.region && probability == that.probability && issuedAt == that.issuedAt\n  case _ => false\n}\noverride def hashCode: Int =\n  region.hashCode ^ probability.hashCode ^ issuedAt.hashCode"}
{"id":"c78062b2-0398-4568-9452-b68cafdaa67b","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class NotificationLogEntry(timestamp: String, alertId: String, recipientId: Long, status: String)"}
{"id":"93dbc1fe-2757-4764-94c2-e4ad3e6e32db","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class SevereWeatherFlag(val region: String, val flag: Boolean)\noverride def toString: String = s\"SevereWeatherFlag($region, $flag)\""}
{"id":"7ab4c440-3a13-4108-9e66-11349470b459","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class FloodWarning(region: String, waterLevel: Double, warningIssued: Boolean)"}
{"id":"b07c9e79-b9d5-42ea-90e1-ac430ebe95e0","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class SubscriberPreference(val userId: Long, val preferredAlertTypes: List[String])\noverride def toString: String = s\"SubscriberPreference($userId, $preferredAlertTypes)\""}
{"id":"556344e2-1ddc-45b6-a379-2ba7230574bb","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class AlertDeliveryAttempt(alertId: String, attemptTime: String, success: Boolean)"}
{"id":"681f55df-87fe-4aeb-b449-f14f8efcbe18","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"object StormNotification {\n  def unapply(n: StormNotification): Option[(String, Double)] =\n    Some((n.stormName, n.intensity))\n}\nclass StormNotification(val stormName: String, val intensity: Double)"}
{"id":"431cbd6a-b3e9-4b2b-b9b9-a79824bd02d5","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"enum AlertChannel {\n  case Email, SMS, PushNotification, InApp\n}"}
{"id":"90c23fec-ea18-4708-a96e-6c5b6b04499c","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class LocationWeather(val city: String, val mainCondition: String, val temp: Double)\ndef canEqual(other: Any): Boolean = other.isInstanceOf[LocationWeather]\n\noverride def equals(other: Any): Boolean = other match {\n  case that: LocationWeather =>\n    city == that.city && mainCondition == that.mainCondition && temp == that.temp\n  case _ => false\n}\noverride def hashCode: Int = city.hashCode + mainCondition.hashCode + temp.hashCode.toInt"}
{"id":"20c8d160-24c5-4f7e-8d5e-17de4d368f83","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class HeatAdvisory(region: String, temperatureF: Double, issuedAt: String)"}
{"id":"e53c3c8b-4c32-45e3-a426-885d88f83c54","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherAlertRequest(val region: String, val alertType: String, val requestedBy: Long)"}
{"id":"836377b9-229e-44e5-aa72-519f5ed56f7a","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class SnowfallReport(region: String, depthInches: Double, reportTime: String)"}
{"id":"55088d30-ae02-4463-978f-0cf927d632c8","timestamp":1746103277308,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertAcknowledgement(val alertId: String, val ackTime: String, val ackedBy: Long)\noverride def toString: String = s\"AlertAcknowledgement($alertId, $ackTime, $ackedBy)\""}
{"id":"99fcc2ac-e6d3-4ec4-b743-11e4200dcc94","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WeatherAlert(alertType: String, description: String, region: String, severity: Int)"}
{"id":"5bc95f27-d370-47db-81c6-96f056db7767","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherUpdate(val city: String, val temperature: Double, val humidity: Double)\noverride def equals(obj: Any): Boolean =\n  obj match\n    case that: WeatherUpdate =>\n      this.city == that.city && this.temperature == that.temperature && this.humidity == that.humidity\n    case _ => false\noverride def hashCode(): Int =\n  (city, temperature, humidity).hashCode()\noverride def toString: String =\n  s\"WeatherUpdate($city, $temperature, $humidity)\""}
{"id":"b911e262-046b-4a08-b3f6-e1199e7fe256","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class NotificationPreference(userId: Long, region: String, preferredChannel: String)"}
{"id":"2f85fe0c-48bf-4fb2-90e9-c3e841d0d509","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class SevereWeatherWarning(val warningType: String, val issuedAt: Long)\ndef canEqual(other: Any): Boolean = other.isInstanceOf[SevereWeatherWarning]\noverride def equals(other: Any): Boolean =\n  other match\n    case that: SevereWeatherWarning =>\n      this.warningType == that.warningType && this.issuedAt == that.issuedAt\n    case _ => false\noverride def hashCode: Int =\n  31 * warningType.hashCode + issuedAt.hashCode\noverride def toString: String =\n  s\"SevereWeatherWarning($warningType, $issuedAt)\""}
{"id":"76bc9f0a-efee-41d8-99e8-c4b4439eac1c","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class AlertSubscription(subscriptionId: Int, region: String, active: Boolean)"}
{"id":"1f6ec285-a4ff-4bff-90be-8714d21f790b","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class RegionAlert(val region: String, val activeAlerts: Int)\ndef canEqual(other: Any): Boolean = other.isInstanceOf[RegionAlert]\noverride def equals(other: Any): Boolean =\n  other match\n    case that: RegionAlert => this.region == that.region && this.activeAlerts == that.activeAlerts\n    case _ => false\noverride def hashCode: Int =\n  (region, activeAlerts).hashCode()\n"}
{"id":"7974030e-976a-4e45-bc1b-c94809ca48fc","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class UserAlertSettings(userId: Long, enabled: Boolean, channels: List[String])"}
{"id":"fd44c002-b5c5-41d1-8e38-cc91408ee29e","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class RainfallReport(val location: String, val mm: Double)\noverride def equals(object2: Any): Boolean =\n  object2 match\n    case that: RainfallReport => this.location == that.location && this.mm == that.mm\n    case _ => false\noverride def hashCode(): Int =\n  37 * location.hashCode + mm.hashCode()\n"}
{"id":"d90cbf22-9376-4c38-b2a6-9223feab1f64","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class AlertHistory(alertId: String, delivered: Boolean, deliveredAt: Option[Long])"}
{"id":"05451eda-db1d-4968-9ceb-eb4b1da4bcdc","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherNotification(val userId: Long, val alert: String)\nobject WeatherNotification:\n  def unapply(w: WeatherNotification): Option[(Long, String)] =\n    Some((w.userId, w.alert))\n"}
{"id":"f5991392-6258-447d-9a2b-7413b071ab32","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class RegionTemperature(region: String, celsius: Double)"}
{"id":"5dc69041-15af-4889-9df6-d9c2c16aeb65","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class DailyWeatherSummary(val day: String, val maxTemp: Double, val minTemp: Double)\noverride def toString: String = s\"$day: $minTemp°C - $maxTemp°C\""}
{"id":"d7c057b4-65bd-45ca-ade2-aa51477e1680","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class SnowfallAlert(region: String, expectedDepth: Double, severityLevel: Int)"}
{"id":"f6434c6b-0d04-48aa-8ad3-8de50273d648","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertStatus(val alertId: String, val isActive: Boolean)\noverride def hashCode(): Int = 41 * alertId.hashCode + isActive.hashCode()\noverride def equals(other: Any): Boolean =\n  other match\n    case that: AlertStatus => this.alertId == that.alertId && this.isActive == that.isActive\n    case _ => false\n"}
{"id":"c1779d5f-1b0e-4e11-a7b8-5e493ceb1461","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WindSpeedAlert(region: String, maxSpeed: Double, issuedAt: Long)"}
{"id":"f35b8735-1914-4dfe-9311-28efe7eb2a51","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertRecipient(val email: String)\noverride def toString: String = s\"AlertRecipient<$email>\""}
{"id":"567bd54a-898c-4a33-af1b-e1f91c394568","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class FloodRiskNotification(area: String, waterLevel: Double, issuedBy: String)"}
{"id":"c16ba712-fc56-4aba-87d0-c63e38623c8a","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertChannel(val channelName: String, val enabled: Boolean)\nobject AlertChannel:\n  def unapply(a: AlertChannel): Option[(String, Boolean)] =\n    Some((a.channelName, a.enabled))\n"}
{"id":"698e91b9-8592-4930-8be8-b6056a07df14","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class TemperatureThreshold(region: String, lower: Double, upper: Double)"}
{"id":"9e9bed39-e36a-4f15-a612-6c184b166fdf","timestamp":1746103297701,"category":"classes_for_data","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class HumidityAlert(val region: String, val percentage: Double)\ndef canEqual(other: Any): Boolean = other.isInstanceOf[HumidityAlert]\noverride def equals(other: Any): Boolean =\n  other match\n    case that: HumidityAlert => this.region == that.region && this.percentage == that.percentage\n    case _ => false\noverride def hashCode(): Int =\n  43 * region.hashCode + percentage.hashCode()\n"}
{"id":"f295655b-2cc5-4a01-a484-f49e742082bc","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class Transaction(id: String, amount: Double, timestamp: Long, merchantId: String, customerId: String)"}
{"id":"c78559e0-307a-4853-ba8c-3ecc83dabfd5","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class PaymentAttempt(val paymentId: String, val userId: String, val status: String, val device: String)\n"}
{"id":"3dc92147-791b-4965-9aa2-10a2855e83b0","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class SuspiciousActivity(customerId: String, activityType: String, timeDetected: Long)"}
{"id":"911a4c30-7d7e-4b98-a35c-9e0689bb0c62","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class RiskAssessment(val riskScore: Double, val transactionId: String, val explanation: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: RiskAssessment =>\n      this.riskScore == that.riskScore && this.transactionId == that.transactionId && this.explanation == that.explanation\n    case _ => false\n  }\n  override def hashCode(): Int =\n    (riskScore.hashCode() * 31 + transactionId.hashCode()) * 31 + explanation.hashCode()\n  override def toString: String = s\"RiskAssessment(riskScore=$riskScore, transactionId=$transactionId, explanation=$explanation)\"\n}"}
{"id":"abd5f38a-7b1a-4f80-9272-c53db45f1180","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class CardUsage(cardNumber: String, merchantCategory: String, transactionTime: Long, latitude: Double, longitude: Double)"}
{"id":"1fbb52c5-a605-49d3-bcbd-c5d52bd387cd","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class BlacklistEntry(val entityType: String, val identifier: String)\n"}
{"id":"691200c3-5225-4811-89bf-f5a31c42bdb7","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class PaymentDevice(deviceId: String, deviceType: String, osVersion: String)"}
{"id":"47a77013-bf56-4107-acf2-769c8853137d","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class FraudAlert(val alertId: String, val severity: Int, val relatedTransaction: String) {\n  override def toString: String =\n    s\"FraudAlert(alertId=$alertId, severity=$severity, relatedTransaction=$relatedTransaction)\"\n}"}
{"id":"c7886d6f-87ab-4ba7-a72e-b091d091eeeb","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class AnomalyDetectionResult(transactionId: String, isAnomalous: Boolean, reasons: List[String])"}
{"id":"91646677-0d96-439d-a9a0-8128aee71a68","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class Geolocation(val latitude: Double, val longitude: Double, val detectedCountry: String) {\n  def canEqual(other: Any): Boolean = other.isInstanceOf[Geolocation]\n}"}
{"id":"f61f4f2e-be5c-4422-b08a-6e275f842b52","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class MerchantProfile(merchantId: String, riskLevel: String, knownFrauds: Int)"}
{"id":"90919977-195d-4cc5-abfd-c541a190af19","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class ManualReview(val reviewer: String, val notes: String, val decision: String)\n"}
{"id":"fda70b0b-6bc2-4183-9ffc-94b937f1d450","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class FraudInvestigation(investigationId: String, assignedTo: String, status: String)"}
{"id":"b8a642da-574d-45a8-920d-73e532265fda","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class DeviceFingerprint(val fingerprintId: String, val browser: String, val os: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: DeviceFingerprint =>\n      this.fingerprintId == that.fingerprintId && this.browser == that.browser && this.os == that.os\n    case _ => false\n  }\n  override def hashCode(): Int =\n    (fingerprintId.hashCode() * 31 + browser.hashCode()) * 31 + os.hashCode()\n}"}
{"id":"cd4dd42b-9dd8-4116-83c0-6f1b2035f566","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class PaymentEvent(eventId: String, userId: String, eventTime: Long, location: String)"}
{"id":"93581ba2-3e77-4bc2-ac2e-c67b93fc0c94","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class Chargeback(val transactionId: String, val amount: Double, val reason: String)"}
{"id":"250a6300-3672-4050-b6fd-f7fe2c7a87b8","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class AlertRule(ruleId: String, description: String, threshold: Double)"}
{"id":"30eefa13-cc8c-4271-b73e-d40c67b2bf62","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class TransactionHistory(val customerId: String, val transactionIds: List[String])\n"}
{"id":"922387fe-2181-4bbb-9bb6-6064a0833797","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"enum FraudCategory:\n  case CardNotPresent, AccountTakeover, FriendlyFraud, Phishing, SyntheticIdentity\n"}
{"id":"1162ff91-9d43-4712-9c52-1c7e194092c7","timestamp":1746103316122,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"object PaymentAttempt {\n  def unapply(arg: PaymentAttempt): Option[(String, String, String, String)] =\n    Some((arg.paymentId, arg.userId, arg.status, arg.device))\n}"}
{"id":"e87ca83a-4780-437a-9f16-79814f023625","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class PaymentTransaction(id: String, amount: BigDecimal, merchantId: String, timestamp: Long)"}
{"id":"95749f0a-5ff0-4ba2-8085-6b7f1db94f69","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class FraudAlert(transactionId: String, riskScore: Double, triggeredByRule: String)"}
{"id":"20cbadfc-07e1-4024-b854-d6f1aca87b61","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class CardHolder(cardHolderId: String, name: String, isBlocked: Boolean)"}
{"id":"29f32283-7c19-4220-80bb-eee7d286151d","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class PaymentRule(ruleId: String, description: String, isEnabled: Boolean)"}
{"id":"963fa2b2-afd4-40bc-a926-67dab5633dd5","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class TransactionPattern(patternId: String, description: String, weight: Double)"}
{"id":"2a06682a-ea2f-4de7-bf60-b714cf60eee2","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class AccountAnomaly(accountId: String, detectionTime: Long, anomalyType: String)"}
{"id":"5c363948-fb50-4f85-97ed-a6cd028883a7","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class FraudInvestigation(caseId: String, assignedAnalystId: String, openedOn: Long)"}
{"id":"ce5d0990-2b54-41f3-a8d0-448d0998d4f5","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class MerchantBlacklistEntry(merchantId: String, reason: String, addedOn: Long)"}
{"id":"1ff66a66-3e48-426c-bd7a-cb7787d81bce","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class TransactionDeviceInfo(transactionId: String, ipAddress: String, deviceType: String)"}
{"id":"7272e242-21e6-4bce-b4ac-2d6c40d02abe","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class SuspiciousLoginAttempt(accountId: String, attemptTime: Long, geoLocation: String)"}
{"id":"36804d17-df2f-4bbf-97d2-d4936f516345","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class TransactionDetails(val transactionRef: String, val paidAmount: BigDecimal, val payeeId: String, val timeOccurred: Long) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: TransactionDetails =>\n      this.transactionRef == that.transactionRef &&\n      this.paidAmount == that.paidAmount &&\n      this.payeeId == that.payeeId &&\n      this.timeOccurred == that.timeOccurred\n    case _ => false\n  }\n  override def hashCode(): Int =\n    transactionRef.hashCode ^ paidAmount.hashCode ^ payeeId.hashCode ^ timeOccurred.hashCode()\n  override def toString: String = s\"TransactionDetails($transactionRef, $paidAmount, $payeeId, $timeOccurred)\"\n}"}
{"id":"1dbf0027-b49d-4115-a877-935ff9da850a","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class RiskSignal(val signalId: String, val riskLevel: Int, val detectedBy: String) {}\nobject RiskSignal {\n  def unapply(rs: RiskSignal): Option[(String, Int, String)] =\n    Some((rs.signalId, rs.riskLevel, rs.detectedBy))\n}"}
{"id":"dce41f95-b745-4bb3-9812-844b52de999c","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class FraudCase(val fraudCaseId: String, val status: String) {\n  def canEqual(that: Any): Boolean =\n    that.isInstanceOf[FraudCase]\n}"}
{"id":"8a92672a-b5b0-4805-8035-e6d5a2d6f240","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class ManualReview(val reviewId: String, val reviewer: String, val reviewDate: Long) {\n  // No equals/hashCode: object equality only\n}"}
{"id":"3c50b0f3-8640-4713-9899-b103efc63678","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class FraudType(val fraudTypeId: String, val severity: Int) {}\nobject FraudType {\n  def unapply(ft: FraudType): Option[(String, Int)] =\n    Some(ft.fraudTypeId, ft.severity)\n}"}
{"id":"d4d7f3cd-72ea-47a1-94f3-b3bcdce8efbd","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class PaymentSuspicion(val paymentId: String, val flaggedReason: String) { \n  override def toString: String = s\"PaymentSuspicion($paymentId, $flaggedReason)\" \n}"}
{"id":"f5a15c3d-33ef-4403-b3ee-1be247ce4b89","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class AuthChallenge(val challengeId: String, val method: String, val issuedAt: Long) {}\nobject AuthChallenge {\n  def unapply(a: AuthChallenge): Option[(String, String, Long)] =\n    Some(a.challengeId, a.method, a.issuedAt)\n}"}
{"id":"7897bb8b-e9f2-461b-acfd-ffc211682a1e","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class DeviceFingerprint(val fingerprintId: String, val userSession: String) \n// No equals/hashCode or custom methods. Structural equality not defined.\n"}
{"id":"2cc1caa0-bc31-448d-8f28-0c1ca96296b8","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class TransactionRisk(val transactionId: String, val suspiciousScore: Double) {\n  override def hashCode(): Int = suspiciousScore.hashCode() ^ transactionId.hashCode\n}"}
{"id":"129e20ac-e040-4e87-bf7a-45ab5b113517","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class FraudEvent(val eventId: String, val eventType: String) {\n  override def toString: String = s\"FraudEvent($eventId, $eventType)\"\n}"}
{"id":"3665d3a7-b8bd-420c-a081-0a2f7b4059df","timestamp":1746103344822,"category":"classes_for_data","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"enum FraudCheckStatus:\n  case Passed, Failed, ReviewNeeded\n"}
{"id":"4441868d-2cbf-489b-afc2-5cb9f1e76e6b","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class PatientMetadata(patientId: String, name: String, dob: String, gender: String)\n"}
{"id":"c9534e10-fc8f-49ce-aeb9-2b20b732456e","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class SeriesInfo(val seriesInstanceUid: String, val seriesDescription: String, val modality: String, val acquisitionDate: String)\n"}
{"id":"79d947a8-f0eb-48fc-ac0d-d00dcdcc6e4b","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class DicomSlice(instanceNumber: Int, pixelData: Array[Byte], sliceLocation: Double)\n"}
{"id":"9f5aadf1-3e3d-444a-ace4-e38b20b9b9dd","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class ImageAnnotation(val annotationId: String, val sliceNumber: Int, val label: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: ImageAnnotation =>\n      this.annotationId == that.annotationId &&\n      this.sliceNumber == that.sliceNumber &&\n      this.label == that.label\n    case _ => false\n  }\n  override def hashCode(): Int = \n    annotationId.hashCode ^ sliceNumber.hashCode ^ label.hashCode\n  override def toString: String = s\"ImageAnnotation($annotationId, $sliceNumber, $label)\"\n}\n"}
{"id":"b258ac12-72f5-4264-9de7-fc52f8b4a85c","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class Viewport(windowCenter: Int, windowWidth: Int, zoom: Double, panX: Double, panY: Double)\n"}
{"id":"ec0d13d6-0293-40b8-8af3-e6776cf666eb","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class StudyDescriptor(val studyUid: String, val studyDate: String, val referringPhysician: String)\n"}
{"id":"c300fa06-1ff1-47df-b227-ee97f7b3f350","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class ROI(regionId: String, regionType: String, coordinates: List[(Int, Int)])\n"}
{"id":"8251fb21-dc23-4cc6-82f8-b2b309274eb5","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class ScanDimensions(val width: Int, val height: Int, val depth: Int)\n"}
{"id":"af76d2e3-a95a-49b5-9d8e-41d1be267b62","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class DisplaySettings(grayscale: Boolean, showAnnotations: Boolean, overlayOpacity: Double)\n"}
{"id":"a74e477c-be07-4c75-ba4b-86f5db9af047","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class ContrastLevel(val minLevel: Int, val maxLevel: Int) {\n  override def toString: String = s\"ContrastLevel(minLevel=$minLevel, maxLevel=$maxLevel)\"\n}\n"}
{"id":"ea9bca04-5fd0-4915-a35c-5463e1a72f84","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class SegmentationMask(maskId: String, sliceIndex: Int, mask: Array[Array[Boolean]])\n"}
{"id":"1b163028-47e7-4ec7-b6fd-23c5d44cb632","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class ImageSeriesReference(val patientUid: String, val studyUid: String, val seriesUid: String)\n"}
{"id":"9c4a3429-e260-44b9-be81-697e6b04cfdc","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class SeriesOverview(seriesUid: String, seriesDescription: String, numberOfImages: Int)\n"}
{"id":"ec17507a-7572-4e25-bc35-402e0c74d3af","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class VolumetricImage(val uid: String, val slices: List[DicomSlice], val orientation: String)\n"}
{"id":"47e8afba-0553-445a-8edf-275f5000e942","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class ViewPane(paneId: String, currentSlice: Int, viewport: Viewport)\n"}
{"id":"a7a87160-5842-4826-b070-d91a4a9b06c9","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class Measurement(val measurementType: String, val value: Double, val units: String)\n"}
{"id":"abe29719-1dcf-42ba-96c7-458ecfd768d9","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class PixelSpacing(rowSpacing: Double, columnSpacing: Double)\n"}
{"id":"3308b002-7f9a-4586-9d99-a9d8a7001e91","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class CameraOrientation(val pitch: Double, val roll: Double, val yaw: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CameraOrientation =>\n      this.pitch == that.pitch && this.roll == that.roll && this.yaw == that.yaw\n    case _ => false\n  }\n}\n"}
{"id":"77005c76-f77b-4216-9adc-a428672fb978","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class WindowPreset(name: String, windowCenter: Int, windowWidth: Int)\n"}
{"id":"508d8064-6a7f-4ad9-aeb4-186830d63231","timestamp":1746103358456,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object ImageAnnotationUnapply {\n  def unapply(annotation: ImageAnnotation): Option[(String, Int, String)] = \n    Some((annotation.annotationId, annotation.sliceNumber, annotation.label))\n}\n"}
{"id":"15a909e3-4921-44f5-83da-41e6bf270b90","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class DicomSlice(sliceNumber: Int, imageMatrix: Array[Array[Int]], windowLevel: Int)\n"}
{"id":"acbb2350-6bea-46bd-a3c1-0d1f5b4a2f6f","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class VolumeElement(val index: Int, val pixelData: Array[Short], val intensity: Double)\n"}
{"id":"858d34c7-a93a-4a1b-b30f-f95d4c551943","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class ImagingAnnotation(label: String, coordinates: List[(Int, Int)], color: String)\n"}
{"id":"57c48228-0d64-4082-9300-895bc757e59f","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class PatientEntry(val patientId: String, val studyDate: String, val modality: String) {\n  override def toString: String = s\"PatientEntry: $patientId, $studyDate, $modality\"\n}\n"}
{"id":"22385a44-9b69-4879-be95-e40f9eae1bef","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class ViewerWindow(windowWidth: Int, windowCenter: Int, presetName: String)\n"}
{"id":"4c3c2068-eb1f-4449-b62c-1f7a77dd34d4","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class ImagingSeries(val seriesId: String, val description: String) {\n  def canEqual(other: Any): Boolean = other.isInstanceOf[ImagingSeries]\n  override def equals(other: Any): Boolean = other match {\n    case that: ImagingSeries => (that canEqual this) &&\n      seriesId == that.seriesId && description == that.description\n    case _ => false\n  }\n  override def hashCode: Int = (seriesId, description).##\n}\n"}
{"id":"936a3b5c-9af4-493b-9eee-37746036e3e5","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class SegmentationMask(maskMatrix: Array[Array[Boolean]], label: String)\n"}
{"id":"7acb832f-6dbc-415a-bc52-eb1c56428047","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class StudyDescriptor(val studyUid: String, val institution: String, val numImages: Int)\n"}
{"id":"53480eff-215d-4287-b57b-eb8a8b0e1e61","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class DicomHeaderInfo(studyId: String, seriesDescription: String, acquisitionTime: String)\n"}
{"id":"dd0ef21c-3b9b-4eb1-8b95-773e51334d8f","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class CursorPosition(val row: Int, val column: Int, val zIndex: Int)\n"}
{"id":"07a01377-d586-4f6c-9115-c09acfb818d9","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class ImageViewport(zoomFactor: Double, panX: Int, panY: Int)\n"}
{"id":"60bbd239-742f-443c-b0ca-e116ff4b1581","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class SeriesThumbnail(val thumbnailPixels: Array[Byte], val format: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: SeriesThumbnail =>\n      thumbnailPixels.sameElements(that.thumbnailPixels) &&\n      format == that.format\n    case _ => false\n  }\n  override def hashCode: Int =\n    java.util.Arrays.hashCode(thumbnailPixels) + 31 * format.hashCode\n}\n"}
{"id":"0124e58a-8e05-482a-9dfd-6df90bf9d033","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class ImageOverlay(overlayId: String, opacity: Double, visible: Boolean)\n"}
{"id":"b8ddc6a4-0d3a-495b-bbc3-f09211c90b1b","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"enum ImagingModality {\n  case CT, MRI, Ultrasound, XRay, PET\n}\n"}
{"id":"ca3a1d93-f1ee-4dd1-8c9b-2c6a95a76c16","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class FrameMetadata(val frameNumber: Int, val timestamp: String, val exposure: Double)\n"}
{"id":"436de51d-6b01-4e90-b97c-a2c085f22c98","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class SeriesPreview(seriesId: String, previewImage: Array[Byte], loaded: Boolean)\n"}
{"id":"d663e3d1-5c19-44f5-9ef6-27d27afecc5c","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class ImageOrientation(val orientationType: String, val degree: Double) {\n  override def toString: String = s\"ImageOrientation($orientationType, $degree)\"\n}\n"}
{"id":"27b3f2d9-80be-4ff0-a617-aa8cd464a5cc","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class MeasurementMark(start: (Int, Int), end: (Int, Int), valueMm: Double)\n"}
{"id":"0d4a2283-a60c-467a-b23e-cabaa502e655","timestamp":1746103372230,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class MarchingContour(val contourPoints: List[(Int, Int)]) {\n  def this() = this(Nil)\n}\n"}
{"id":"fded329d-2b22-4b3d-87ee-77fe75c327bb","timestamp":1746103375953,"category":"classes_for_data","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class DicomImageSlice(pixelArray: Array[Short], width: Int, height: Int, slicePosition: Double)\n\nval slice = DicomImageSlice(Array.fill(256)(100), 16, 16, 32.5)\nslice match {\n  case DicomImageSlice(pixels, w, h, z) =>\n    println(s\"Slice at position $z with size $w x $h\")\n}"}
{"id":"6c0f1b03-b14c-407c-835f-fbd6a9c24506","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLink(id: String, ownerId: String, amount: BigDecimal, currency: String, status: PaymentLinkStatus)"}
{"id":"87e6b023-32aa-4d69-b89a-58f653f48d3e","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkRequest(ownerId: String, amount: BigDecimal, currency: String, description: Option[String])"}
{"id":"a257e113-db36-4c94-b101-df3ee8798249","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkResponse(linkId: String, url: String, status: PaymentLinkStatus)"}
{"id":"44744be9-6f66-408f-afc6-7da311036fbc","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkMetadata(linkId: String, createdAt: Long, expiresAt: Option[Long])"}
{"id":"f50fa01d-a010-4088-80a3-ec5dbd7e0b3d","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkUpdate(linkId: String, newAmount: Option[BigDecimal], newCurrency: Option[String])"}
{"id":"44242d1d-49c8-4196-84db-0766f00d07d1","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class LinkExpirySettings(defaultDurationMinutes: Int, maxDurationMinutes: Int)"}
{"id":"249acded-c801-455a-9374-0eff8dd94b68","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkOwner(id: String, contactEmail: String)"}
{"id":"a4228d0c-4c1a-4a8c-8d41-4bb357f970d4","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkCancellation(linkId: String, cancelledBy: String, reason: Option[String])"}
{"id":"5063bb1d-1209-49a5-b0cb-1ffba9fe9809","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkNotification(linkId: String, recipientEmail: String, sentAt: Long)"}
{"id":"b97a3fbf-b453-4470-a3ad-1dec2dc2a6af","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"enum PaymentLinkStatus:\n  case Active, Paid, Expired, Cancelled"}
{"id":"e7afa97b-0314-4afd-a8f3-9cd9e701fce3","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkRecord(val referenceId: String, val sum: BigDecimal, val payee: String, val state: String) {\n  override def equals(obj: Any): Boolean =\n    obj match {\n      case that: PaymentLinkRecord =>\n        this.referenceId == that.referenceId &&\n        this.sum == that.sum &&\n        this.payee == that.payee &&\n        this.state == that.state\n      case _ => false\n    }\n  override def hashCode(): Int =\n    referenceId.hashCode ^ sum.hashCode ^ payee.hashCode ^ state.hashCode\n}"}
{"id":"5262f6db-cfe3-4d69-a0fc-403b29975236","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkPayload(val externalId: String, val description: String, val total: BigDecimal) {}\nobject PaymentLinkPayload {\n  def unapply(p: PaymentLinkPayload): Option[(String, String, BigDecimal)] =\n    Some((p.externalId, p.description, p.total))\n}"}
{"id":"ef6b6e83-0130-42bd-93b5-5dde434ad52a","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class LinkStatusChange(val linkId: String, val previous: String, val current: String) {\n  def canEqual(other: Any): Boolean = other.isInstanceOf[LinkStatusChange]\n  override def equals(other: Any): Boolean =\n    other match {\n      case that: LinkStatusChange =>\n        (that canEqual this) &&\n        linkId == that.linkId &&\n        previous == that.previous &&\n        current == that.current\n      case _ => false\n    }\n  override def hashCode(): Int =\n    linkId.hashCode + 31 * previous.hashCode + 17 * current.hashCode\n}"}
{"id":"cc76028c-6f3e-456d-a20a-1238c7537f0e","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkOwnerInfo(val ownerId: String, val ownerName: String) {\n  override def toString: String =\n    s\"PaymentLinkOwnerInfo($ownerId, $ownerName)\"\n}"}
{"id":"9365e801-98dd-403c-a317-5ea113acc910","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkShort(val link: String, val shortCode: String) {}\nobject PaymentLinkShort {\n  def unapply(l: PaymentLinkShort): Option[(String, String)] =\n    Some((l.link, l.shortCode))\n}"}
{"id":"6e88928f-14d1-493b-8f9a-7cccf558d7c5","timestamp":1746103395234,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkExpiry(val id: String, val expiryTimestamp: Long) {}"}
{"id":"9ed7cad4-62bd-4ac9-8764-37fba697ca3a","timestamp":1746103395235,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class CancelledPaymentLink(val linkId: String, val cancelledTime: Long) {\n  override def equals(o: Any): Boolean =\n    o match {\n      case that: CancelledPaymentLink =>\n        linkId == that.linkId && cancelledTime == that.cancelledTime\n      case _ => false\n    }\n}"}
{"id":"62a21210-12ab-4ec5-ba07-ae19962a9c6a","timestamp":1746103395235,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkChangeRequest(val linkId: String, val newAmount: BigDecimal) {}\nobject PaymentLinkChangeRequest {\n  def unapply(x: PaymentLinkChangeRequest): Option[(String, BigDecimal)] =\n    Some((x.linkId, x.newAmount))\n}"}
{"id":"e70201e3-ffe0-4381-a601-19ff9e75501f","timestamp":1746103395235,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkUserInfo(val userId: String, val userEmail: String, val userRole: String) {}"}
{"id":"22082083-0f30-4d80-95f3-1f745053e8ba","timestamp":1746103395235,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkStatusFlag(val linkId: String, val isActive: Boolean) {\n  override def toString: String =\n    \"PaymentLinkStatusFlag[linkId=\" + linkId + \", isActive=\" + isActive + \"]\"\n}"}
{"id":"356e075b-2a3d-4f9d-96c9-af4e665e3352","timestamp":1746103395235,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PendingPaymentLink(val linkId: String, val pendingAmount: BigDecimal) {}"}
{"id":"fa6a58ce-c959-4f2d-84ae-0436b863926e","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLink(id: String, url: String, status: PaymentLinkStatus, createdAt: Long)"}
{"id":"a022e4da-dc59-4d31-bec2-2d6a9e9a71a5","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentSession(val sessionId: String, val linkId: String, val expiresAt: Long) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: PaymentSession =>\n      sessionId == that.sessionId && linkId == that.linkId && expiresAt == that.expiresAt\n    case _ => false\n  }\n  override def hashCode: Int =\n    31 * sessionId.hashCode + 37 * linkId.hashCode + expiresAt.hashCode\n  override def toString: String =\n    s\"PaymentSession($sessionId, $linkId, $expiresAt)\"\n}"}
{"id":"70ca170d-97a5-4aab-a994-3dace1b3a865","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkMetadata(title: String, description: Option[String], currency: String, amount: BigDecimal)"}
{"id":"dfc783ca-8d76-4547-a73e-b578c1632a90","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkStatusField(val value: String)\nobject PaymentLinkStatusField {\n  def unapply(arg: PaymentLinkStatusField): Option[String] =\n    Some(arg.value)\n}"}
{"id":"dbdbf841-a05f-49bc-872f-6cb7a76f1664","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkRecipient(name: String, email: String, phone: Option[String])"}
{"id":"3e2ac8ca-e40d-4070-9e64-25ef97eda3c0","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkRequest(\n  val recipientEmail: String,\n  val amountCents: Int,\n  val description: String\n)"}
{"id":"00fbb626-73b9-49fa-981c-2f6b434783b5","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkCreationRequest(recipient: PaymentLinkRecipient, metadata: PaymentLinkMetadata)"}
{"id":"04a9c3cb-67f3-48da-910a-ec67a50e5dd8","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkStatistics(\n  val linkId: String,\n  val views: Int,\n  val completions: Int\n)\nobject PaymentLinkStatistics {\n  def unapply(stats: PaymentLinkStatistics): Option[(String, Int, Int)] =\n    Some((stats.linkId, stats.views, stats.completions))\n}"}
{"id":"d17dcd66-5354-4d9f-9994-e4b03c356012","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkUpdateRequest(linkId: String, newStatus: PaymentLinkStatus)"}
{"id":"a150277d-b09c-405a-893f-4fe8c478759d","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkUserToken(val userId: String, val token: String)"}
{"id":"649c9379-b245-46d6-9a1d-87dcf05f2646","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkAuditEntry(linkId: String, changedBy: String, changeType: String, timestamp: Long)"}
{"id":"aa294909-18cc-4a56-b3c7-ba3d5afb8435","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentGatewayDetails(val provider: String, val accountId: String) {\n  override def toString: String =\n    s\"PaymentGatewayDetails(provider=$provider, accountId=$accountId)\"\n}"}
{"id":"a03a21a9-1e4b-4a57-b474-b00c6b3ca683","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkExpiration(linkId: String, expiresAt: Long)"}
{"id":"45fa5679-c24f-4c48-ade4-068ee307c56f","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"enum PaymentLinkStatus:\n  case Active, Expired, Cancelled, Completed"}
{"id":"45c42dc1-d77f-4043-8dc9-7bc7f02ba42a","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkError(val code: String, val message: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: PaymentLinkError => code == that.code && message == that.message\n    case _ => false\n  }\n  override def hashCode: Int = code.hashCode + 41 * message.hashCode\n}"}
{"id":"731b83c8-bab3-4b4f-a4d7-3f9bbacd7285","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkRefundDetails(val linkId: String, val refundedAmount: BigDecimal, val refundedAt: Long)"}
{"id":"15749452-191a-4118-8755-3fe8b3ec5ecf","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkWebhookEvent(linkId: String, event: String, eventTime: Long)"}
{"id":"683a2aed-5b6e-4738-8974-264444e85a72","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkDiscount(val linkId: String, val percent: Double)"}
{"id":"0038285b-50fc-4cef-9d55-beedc0c181da","timestamp":1746103405988,"category":"classes_for_data","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkCustomField(label: String, value: String)"}
{"id":"10674044-15f0-450f-92ea-88fd449b3287","timestamp":1746103416913,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class UserMessage(sender: String, message: String, timestamp: Long)"}
{"id":"17f1247b-0424-49f0-93d7-da7a40ad8c84","timestamp":1746103416913,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class TranslationRequest(sourceLanguage: String, targetLanguage: String, text: String)"}
{"id":"5d34b2f6-85c4-4390-bd09-28dfe917a40d","timestamp":1746103416913,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class BotReply(replyText: String, detectedLanguage: String, confidence: Double)"}
{"id":"2c7c49d5-a8a8-44d9-a841-7085a5585b43","timestamp":1746103416913,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class LanguagePair(from: String, to: String)"}
{"id":"ba453e52-a2e4-49bf-b734-5964488f3af8","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class TranslationError(errorCode: Int, errorMessage: String)"}
{"id":"e489a306-998a-483a-9c2a-94c73537efde","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class ChatbotSession(userId: String, currentLanguage: String, history: List[UserMessage])"}
{"id":"b0b52fef-c7ce-4ebd-8098-d44a6d3f1c24","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class SupportedLanguage(code: String, name: String)"}
{"id":"8e85a45c-ebc6-4abc-8d50-fd7b933848c1","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class TranslationLog(entryId: Long, originalText: String, translatedText: String)"}
{"id":"63bda9f7-7cee-4081-8cb9-68ba35a6b715","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class TranslationOption(translation: String, provider: String, qualityScore: Double)"}
{"id":"165893db-4d01-4987-88c3-9e975b09ffc3","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class MessageMetadata(messageId: String, sentAt: Long, responseTimeMs: Int)"}
{"id":"b61d6ddf-1ae5-4617-9688-57b9f5a20fd7","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class UserProfile(val username: String, val preferredLanguage: String) {\n  override def toString = s\"UserProfile($username, $preferredLanguage)\"\n}"}
{"id":"04c3b5c3-19ed-45cf-a1d2-32f069f28cd7","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class TranslationJob(val id: Long, val text: String, val status: String) {\n  def canEqual(a: Any) = a.isInstanceOf[TranslationJob]\n  override def equals(obj: Any): Boolean = obj match {\n    case that: TranslationJob =>\n      (that canEqual this) &&\n      (id == that.id && text == that.text && status == that.status)\n    case _ => false\n  }\n  override def hashCode: Int = (id, text, status).hashCode()\n}"}
{"id":"75a32ee0-4917-41d3-9c46-3e0f1c2f7a8d","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class TranslationProvider(val name: String, val apiKey: String)\n"}
{"id":"57489cd1-232a-4c1f-84e0-7405bac2a098","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class DetectedLanguage(val code: String, val confidence: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: DetectedLanguage => code == that.code && confidence == that.confidence\n    case _ => false\n  }\n  override def hashCode: Int = (code, confidence).hashCode()\n  override def toString = s\"DetectedLanguage($code, $confidence)\"\n}"}
{"id":"4f498933-b1ac-4e35-b55d-6eb8b42166ec","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class TranslationFeedback(val userId: String, val translationId: Long, val rating: Int)\n"}
{"id":"87907efe-b2db-42c4-8e88-4673bebc4982","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class ChatSession(val sessionId: String, val active: Boolean) {\n  override def toString = s\"ChatSession($sessionId, $active)\"\n}"}
{"id":"1a0c0764-b679-42e7-b4ab-9bbc742cb9ba","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object ManualUnapplyMessage {\n  def unapply(msg: ManualUnapplyMessage): Option[(String, String)] =\n    Some((msg.content, msg.language))\n}\nclass ManualUnapplyMessage(val content: String, val language: String)"}
{"id":"08a40982-afd4-4b09-b692-d63011d141c0","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class TranslatedPhrase(val phrase: String, val sourceLang: String, val targetLang: String)\n"}
{"id":"c8e00ad3-dc2a-406f-8b99-ffec58de9191","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class MessageToken(val token: String, val position: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: MessageToken => token == that.token && position == that.position\n    case _ => false\n  }\n  override def hashCode: Int = (token, position).hashCode()\n}"}
{"id":"2926e03e-043d-409a-b968-c28ea182c930","timestamp":1746103416914,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class TranslationStats(val translationsCount: Int, val averageLatency: Double)\n"}
{"id":"2e0949c2-40a8-45de-91ee-4963fc2ba1d9","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class LanguageCode(value: String)\n\nval sourceLang = LanguageCode(\"en\")\nval targetLang = LanguageCode(\"fr\")"}
{"id":"7393a9ff-74a1-48f9-bcb8-a157dfa909a9","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class TranslationRequest(val inputText: String, val fromLanguage: String, val toLanguage: String)\n\nval req1 = new TranslationRequest(\"hello\", \"en\", \"es\")\nval req2 = new TranslationRequest(\"hello\", \"en\", \"es\")\n// Equality will compare references, not fields"}
{"id":"8a0e877b-a0b0-40bd-bd13-cd247e89e712","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class TranslatedMessage(original: String, translated: String, confidence: Double)\n\nval tm = TranslatedMessage(\"hello\", \"hola\", 0.92)"}
{"id":"50c24c63-1a7c-4e0e-9172-c74151285609","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class UserFeedback(val translationId: Long, val rating: Int, val comments: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: UserFeedback =>\n      this.translationId == that.translationId &&\n      this.rating == that.rating &&\n      this.comments == that.comments\n    case _ => false\n  }\n  override def hashCode(): Int =\n    translationId.hashCode + rating.hashCode + comments.hashCode\n}"}
{"id":"04b127ec-ff57-424b-b344-507712e3d6c1","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class ChatbotUserSession(userId: String, activeLanguage: String)\n\ndef switchLanguage(session: ChatbotUserSession, newLanguage: String): ChatbotUserSession =\n  session.copy(activeLanguage = newLanguage)"}
{"id":"92923951-cb93-426e-966f-d6ca65fff37b","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class PhraseSuggestion(val phrase: String, val confidence: Double)\n\ndef showSuggestion(s: PhraseSuggestion): String =\n  s\"Suggested: ${s.phrase} (${s.confidence})\""}
{"id":"31861754-d77f-41c8-8af3-43524a6f0d7f","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class SupportedLanguage(code: String, name: String)\n\nval languages = List(\n  SupportedLanguage(\"en\", \"English\"),\n  SupportedLanguage(\"fr\", \"French\"),\n  SupportedLanguage(\"de\", \"German\")\n)\nlanguages.find(_.code == \"fr\")"}
{"id":"82fdeb40-e841-4b5f-bad3-05bb39001cda","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class AlternativeTranslation(val translation: String, val probability: Double)\n\nobject AlternativeTranslation {\n  def unapply(a: AlternativeTranslation): Option[(String, Double)] =\n    Some((a.translation, a.probability))\n}\n\nval alt = new AlternativeTranslation(\"salut\", 0.8)\nalt match {\n  case AlternativeTranslation(word, prob) => word\n}"}
{"id":"3e729d4e-2aea-4b53-9259-dcd344ab8b06","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class DetectedLanguage(language: String, confidence: Double)\n\nval lang = DetectedLanguage(\"es\", 0.97)\nlang match {\n  case DetectedLanguage(code, _) if code == \"es\" => println(\"Spanish detected!\")\n  case _ => println(\"Other language\")\n}"}
{"id":"2de8e53a-c792-4da6-b852-a52a9f66eb5e","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class MessageLog(val userId: String, val messages: List[String]) {\n  override def toString: String =\n    s\"User: $userId, Messages: ${messages.mkString(\", \")}\"\n}\nval log = new MessageLog(\"user123\", List(\"Hi\", \"Translate 'car'\"))\nlog.toString"}
{"id":"9478cd6d-3ac3-48cb-a40b-5f924c921bfb","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class TranslationError(errorCode: Int, errorMessage: String)\n\nval error = TranslationError(404, \"Language not supported\")"}
{"id":"5e60e7cc-4e58-40f9-a920-ad05faafc106","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class TranslationHistory(val entries: List[String]) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: TranslationHistory =>\n      this.entries == that.entries\n    case _ => false\n  }\n  override def hashCode(): Int =\n    entries.hashCode()\n}\nval th1 = new TranslationHistory(List(\"hello\", \"bonjour\"))"}
{"id":"09f97a7f-4d28-4c23-8585-873720cf0778","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class DetectedIntent(userUtterance: String, intentName: String, score: Double)\n\ndef isGreeting(intent: DetectedIntent): Boolean =\n  intent.intentName == \"greeting\""}
{"id":"24c991ad-6cc5-494d-812c-65360556b6f6","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class ResponseTemplate(val templateText: String) {\n  override def toString: String =\n    s\"Template: $templateText\"\n}\nval template = new ResponseTemplate(\"How can I help you translate today?\")"}
{"id":"1c65d3e5-09c3-4d0c-9014-2b2bb0d0e490","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class TranslationSession(sessionId: String, active: Boolean)\n\nval newSession = TranslationSession(\"abc-123\", true)"}
{"id":"1d872140-f100-4607-94ee-40aa6e72d3ea","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class LanguagePreference(val preferred: String, val fallback: String)\n\nval pref = new LanguagePreference(\"en\", \"es\")\ndef getFallback(preference: LanguagePreference): String =\n  preference.fallback"}
{"id":"f1a3dbc0-e67f-41ef-a87e-2af9f123e48d","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class MessagePair(original: String, translated: String)\n\nval dialog = List(\n  MessagePair(\"Good morning!\", \"Guten Morgen!\"),\n  MessagePair(\"How are you?\", \"Wie geht's?\")\n)"}
{"id":"7cfc9a39-78da-4ef9-815c-f42b934ba0bf","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class QualityFeedback(val translationId: Long, val thumbsUp: Boolean)\n\nval feedback = new QualityFeedback(8902L, true)"}
{"id":"baf12c19-908a-4679-969c-6ab78cea5598","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class ChatbotPrompt(promptText: String, language: String)\n\nval prompts = List(\n  ChatbotPrompt(\"Type your message:\", \"en\"),\n  ChatbotPrompt(\"Tapez votre message:\", \"fr\")\n)"}
{"id":"0dac7d56-2f87-4bc6-b676-29147ab70d7e","timestamp":1746103441153,"category":"classes_for_data","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class ConversationSummary(val sessionId: String, val summary: String) {\n  override def toString: String =\n    s\"Summary($sessionId): $summary\"\n}\nval s = new ConversationSummary(\"sess-5\", \"User requested Spanish multiple times.\")\ns.toString"}
{"id":"598950d6-adb6-4ee3-bfab-a4f22090e4d2","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class EnergyUsageRecord(deviceId: String, timestamp: Long, kilowatts: Double)\n"}
{"id":"9fbfc2fb-e7bd-4fec-8935-00eb87d21bae","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class EnergyMeter(val meterId: String, val location: String, val isActive: Boolean) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: EnergyMeter =>\n      this.meterId == that.meterId &&\n      this.location == that.location &&\n      this.isActive == that.isActive\n    case _ => false\n  }\n  override def hashCode(): Int =\n    meterId.hashCode ^ location.hashCode ^ isActive.hashCode()\n  override def toString: String =\n    s\"EnergyMeter($meterId, $location, $isActive)\"\n}\n"}
{"id":"ad7e132e-0f6c-4acd-a0d8-44f0241382d2","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class DashboardAlert(alertId: Int, message: String, severity: String)\n"}
{"id":"b41913e2-5c75-419c-b281-b76a48f611d5","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class PowerSource(val sourceName: String, val capacityMW: Double) {\n  def canSupply(required: Double): Boolean =\n    capacityMW >= required\n}\n"}
{"id":"a64110d3-63db-4827-8783-b71d591e6f98","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ConsumptionSummary(day: String, totalKWh: Double)\n"}
{"id":"19ab9238-1b5e-45e0-a244-0657618909fb","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class DeviceProfile(val deviceName: String, val typeCode: Int, val isSmart: Boolean)\n"}
{"id":"438c2b77-663d-46e8-8546-56fdd3e9689a","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class UserPreferences(userId: String, darkMode: Boolean, notificationsEnabled: Boolean)\n"}
{"id":"ce783e77-fc4a-4f95-8a74-1ba29a26889d","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class RoomEnergy(val roomLabel: String, val weeklyKWh: List[Double]) {\n  def averageConsumption: Double =\n    if (weeklyKWh.isEmpty) 0.0 else weeklyKWh.sum / weeklyKWh.length\n}\n"}
{"id":"120c6901-95ba-4c07-8ad5-7edb273d4b2a","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class PeakDemandInterval(startTime: Long, endTime: Long, peakKWh: Double)\n"}
{"id":"8ab10f10-2349-46e2-9ffd-23a763c5ee30","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class GridStatus(val statusCode: Int, val statusDescription: String)\n"}
{"id":"41f585d7-b890-4a91-a09f-3d4b7470d8c0","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ApplianceStatus(applianceId: String, isOn: Boolean, energyRate: Double)\n"}
{"id":"4e103ac4-4378-4d79-be16-ae33e180b89b","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class BillingPeriod(val periodLabel: String, val startEpoch: Long, val endEpoch: Long)\n"}
{"id":"b9b083d8-6f3c-4494-a2d9-ec159105fa30","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class RenewableBreakdown(solarKWh: Double, windKWh: Double, hydroKWh: Double)\n"}
{"id":"c0488349-a6d3-4187-a7d9-afc9db9d784d","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class MeterReading(val id: String, val value: Double, val readAt: Long)\n"}
{"id":"685e35dc-e023-4bc9-aa22-aa50c66e5fc9","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class EnergyCostBreakdown(fixedCharge: Double, variableCharge: Double, tax: Double)\n"}
{"id":"92cebba6-5505-4b6d-89a5-d873b664b341","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class TariffBand(val bandName: String, val ratePerKWh: Double)\n"}
{"id":"776d82a4-ea37-40af-975d-2239aea5ad4c","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class HouseholdConsumption(householdId: String, monthlyKWh: Double, averageDailyKWh: Double)\n"}
{"id":"166bfb38-ddc3-481b-af41-7ab509170be3","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class NetworkEvent(val eventId: Int, val description: String, val severityLevel: String) {\n  override def toString: String =\n    s\"NetworkEvent($eventId, $description, $severityLevel)\"\n}\n"}
{"id":"d2b4a797-fe77-40ea-a690-dc59b349e366","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class EnergyGoal(goalDescription: String, targetKWh: Double, deadline: String)\n"}
{"id":"f86b2cff-a158-4d91-afe6-96b8caf5cca2","timestamp":1746103452647,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class UpsAlert(val upsId: String, val batteryLevel: Double, val isCritical: Boolean)\n"}
{"id":"98c0d77e-22f9-4019-918c-90b62d643e35","timestamp":1746103476465,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class BuildingEnergyUsage(buildingId: String, totalKWh: Double, peakKWh: Double, averageKWh: Double)"}
{"id":"8d07833d-3ec9-4061-99d4-6bbf25ab60c9","timestamp":1746103476465,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class ApplianceConsumption(val applianceId: String, val deviceType: String, val energyUsed: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: ApplianceConsumption =>\n      this.applianceId == that.applianceId &&\n      this.deviceType == that.deviceType &&\n      this.energyUsed == that.energyUsed\n    case _ => false\n  }\n  override def hashCode: Int =\n    applianceId.hashCode + deviceType.hashCode + energyUsed.hashCode()\n  override def toString: String =\n    s\"ApplianceConsumption($applianceId, $deviceType, $energyUsed)\"\n}"}
{"id":"1dd22028-72c7-4f5d-9261-cd94e42a0525","timestamp":1746103476465,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class EnergyAlert(alertType: String, timestamp: Long, threshold: Double, actualValue: Double)"}
{"id":"f1737c3b-834c-4b29-8045-f87fb591482e","timestamp":1746103476465,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class RoomEnergy(val roomName: String, val measuredKWh: Double)"}
{"id":"70c9d33b-a34d-41eb-a0b5-5b5d0dff5eef","timestamp":1746103476465,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class SolarPanelOutput(panelId: String, outputKWh: Double, timestamp: Long)"}
{"id":"a6771220-b20c-48aa-8be8-bdf1b97c318e","timestamp":1746103476465,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class MeterReading(val meterSerial: String, val reading: Double, val when: Long) {\n  override def toString: String =\n    \"MeterReading(meterSerial=\" + meterSerial + \", reading=\" + reading + \", when=\" + when + \")\"\n}"}
{"id":"04c38382-0079-4e12-af95-3d44dbbe7a05","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class TimeOfUsePeriod(periodName: String, kWhUsed: Double, startHour: Int, endHour: Int)"}
{"id":"190a4553-36ac-48e0-80e3-64ac28676019","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class HVACConsumption(val systemId: String, val dailyConsumption: Double)"}
{"id":"f65ef06f-dbd2-47c1-9a3e-2a11b056147e","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class EnergySourceBreakdown(sourceType: String, usedKWh: Double, proportion: Double)"}
{"id":"b4eb13ff-93cc-4a2b-83b4-befe1d8de943","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class EnergyGoal(val goalName: String, val targetKWh: Double, val deadlineEpoch: Long)"}
{"id":"5f0c2af6-1a98-4ef5-98aa-1385a391f13a","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class DeviceStatus(deviceId: String, isActive: Boolean, lastChecked: Long)"}
{"id":"2423131f-c227-4f79-bd78-ffa0e4183f99","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class DepartmentUsage(val department: String, val usageKWh: Double, val month: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: DepartmentUsage =>\n      this.department == that.department &&\n      this.usageKWh == that.usageKWh &&\n      this.month == that.month\n    case _ => false\n  }\n  override def hashCode: Int =\n    department.hashCode + usageKWh.hashCode() * 31 + month\n}"}
{"id":"8ccffc1a-ae93-45e8-bd08-08550c9d9273","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ConsumptionForecast(entity: String, forecastKWh: Double, date: String)"}
{"id":"5d75b2a7-02a0-451e-a8e5-7966b56ad8bf","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class TariffPlan(val planName: String, val ratePerKWh: Double)"}
{"id":"5fcdbbb4-071e-4f4e-bc14-92e89fd58efa","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class DashboardUser(userId: String, userRole: String, displayName: String)"}
{"id":"224085f7-48d1-4cd0-9f5c-ca0387af9e54","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class CarbonFootprint(val source: String, val carbonKg: Double)"}
{"id":"a9c67634-d5a9-43ef-bc54-671d5668c266","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class MaintenanceEvent(eventId: String, affectedSystem: String, scheduledAt: Long)"}
{"id":"cbeaf85d-75e1-44cf-ba68-48e0fc97b342","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class EnergyBudget(val budgetName: String, val month: String, val budgetedAmount: Double) {\n  override def toString: String =\n    s\"EnergyBudget($budgetName, $month, $budgetedAmount)\"\n}"}
{"id":"2f7bbf20-ba58-4c3c-bbc3-9840b9a82558","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class PowerOutageRecord(outageId: String, startTime: Long, durationMins: Int)"}
{"id":"54187eae-4244-45d3-9776-819e403bd3c0","timestamp":1746103476466,"category":"classes_for_data","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object EnergyConsumptionRecord {\n  def unapply(arg: EnergyConsumptionRecord): Option[(String, Double, Long)] =\n    Some((arg.siteName, arg.consumptionKWh, arg.recordedEpoch))\n}\nclass EnergyConsumptionRecord(val siteName: String, val consumptionKWh: Double, val recordedEpoch: Long)"}
{"id":"ed9c0b95-17e8-47d7-aa7b-11837fe64fac","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Ballot(candidateSelected: String, voterId: String, precinct: Int)"}
{"id":"2146ce9f-6810-4b39-b011-5e9a4ab9073c","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class VoteDetails(val voterUniqueId: String, val candidateChoice: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: VoteDetails =>\n      this.voterUniqueId == that.voterUniqueId && this.candidateChoice == that.candidateChoice\n    case _ => false\n  }\n  override def hashCode(): Int = 31 * voterUniqueId.hashCode + candidateChoice.hashCode\n  override def toString: String = s\"VoteDetails($voterUniqueId, $candidateChoice)\"\n}"}
{"id":"87e60435-974d-4336-bb3e-e5e1ce4db891","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class TallyResult(candidateName: String, votes: Int)"}
{"id":"e6424eab-04cb-4a2e-ba9d-3e224d6b718c","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class BallotInfo(val candidateName: String, val ballotId: Long)"}
{"id":"92f5d2ff-9e6a-44d2-a64f-af939e2d5a7e","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class VerifiedVoter(voterId: String, hasVoted: Boolean)"}
{"id":"fbf211c0-9ac8-4a42-9704-e4a31430b8b2","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class PrecinctTally(val precinctCode: String, val results: Map[String, Int]) {\n  override def toString: String = s\"PrecinctTally($precinctCode, $results)\"\n}"}
{"id":"524807f9-909a-4fc0-8db7-fe88cd36b49c","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class ElectionSummary(totalVoters: Int, totalBallots: Int, turnoutPercentage: Double)"}
{"id":"569e794e-659e-4fb0-979e-ba050d201f50","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class VoteRecord(val ballotNumber: Int, val candidateVoted: String)"}
{"id":"423fb0bf-3c1f-49f6-8ecc-8a6bfda066a9","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class CandidateStanding(candidate: String, precinctResults: Map[String, Int])"}
{"id":"b92b07ef-f3c4-4f79-bfac-b30594ac4291","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class IneligibleBallot(val ballotId: String, val reason: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: IneligibleBallot => this.ballotId == that.ballotId && this.reason == that.reason\n    case _ => false\n  }\n  override def hashCode(): Int = ballotId.hashCode * 17 + reason.hashCode\n}"}
{"id":"91cb38b2-e318-44c6-8661-df97af84dbbb","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class ProvisionalVote(voterId: String, reason: String)"}
{"id":"e794afce-6940-4cb9-ae43-675bd66efaa1","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class VoterParticipation(val voterId: String, val precinctNum: Int, val didVote: Boolean)\n"}
{"id":"eac4da91-1909-4b1d-ad59-77286a244188","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class PrecinctSummary(precinctCode: String, ballotsCast: Int, registeredVoters: Int)"}
{"id":"42fba98c-15af-4b8e-be13-63c47a9730c5","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class VoteAudit(val ballotId: String, val verified: Boolean, val auditor: String)\n"}
{"id":"3902c9f4-3677-4965-a55c-05e74248f61a","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class InvalidBallot(ballotId: String, invalidReason: String)"}
{"id":"80a7658a-ebd3-48de-9150-0789c1863844","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"object ResultMatcher {\n  def unapply(result: TallyResult): Option[(String, Int)] =\n    Some((result.candidateName, result.votes))\n}\nclass TallyResult(val candidateName: String, val votes: Int)"}
{"id":"f63fe2c9-6095-498a-88f5-49701d0027b6","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class RankedChoiceRanking(voterId: String, rankOrder: List[String])"}
{"id":"bb057909-52bd-4afa-8a3b-d3e7d85bc668","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class CandidateVotes(val candidate: String, val totalVotes: Int) {\n  override def toString: String = s\"CandidateVotes(candidate=$candidate, totalVotes=$totalVotes)\"\n}"}
{"id":"8dcf97e5-dfca-4a5b-936b-5ecd43a460ed","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class TieBreaker(candidateA: String, candidateB: String, votesA: Int, votesB: Int)"}
{"id":"247bcd24-f026-453f-a674-78399a44bb86","timestamp":1746103495334,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class VoterSignature(val signatureHash: String, val ballotId: String)"}
{"id":"e716f211-db8c-41e6-8904-0103bc4240c1","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Ballot(pollingStation: String, candidateId: Int, timeCast: Long)"}
{"id":"aefff755-aa61-4f0d-a0d5-3dfe0825c510","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class VoteCount(val candidateIdentifier: Int, val totalVotes: Int)\n  override def equals(obj: Any): Boolean =\n    obj match {\n      case that: VoteCount =>\n        this.candidateIdentifier == that.candidateIdentifier && this.totalVotes == that.totalVotes\n      case _ => false\n    }\n  override def hashCode(): Int =\n    31 * candidateIdentifier + totalVotes\n  override def toString: String =\n    s\"VoteCount($candidateIdentifier, $totalVotes)\""}
{"id":"24d914be-b3ee-4534-8d77-f5c6f2e717bf","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class CandidateResult(candidateName: String, votesReceived: Int)"}
{"id":"9371e72e-5807-4e08-8a45-c6422333f6be","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class PrecinctTally(val precinct: String, val candidateTotals: Map[String, Int])\n  override def toString: String =\n    \"PrecinctTally(\" + precinct + \", \" + candidateTotals.toString + \")\""}
{"id":"16c27a36-9d20-44ad-9243-aa71778e13cb","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class TallyReport(electionId: String, region: String, totalVotes: Int)"}
{"id":"0d88d1f8-ccec-43a9-b41e-3a9053beb3eb","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class ManualTally(val ballotBoxID: String, val countedVotes: Int)\n  override def equals(obj: Any): Boolean =\n    if !obj.isInstanceOf[ManualTally] then false\n    else {\n      val other = obj.asInstanceOf[ManualTally]\n      this.ballotBoxID == other.ballotBoxID && this.countedVotes == other.countedVotes\n    }"}
{"id":"101323ca-0d6f-464f-934d-0a541fd73b16","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class ScrutineerRecord(scrutineerId: Int, verifiedBallots: Int)"}
{"id":"342daa71-d08f-469b-8aae-3cb89d8683be","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class TallierResult(val tallierName: String, val ballotsProcessed: Int)\n  def canEqual(that: Any): Boolean = that.isInstanceOf[TallierResult]\n  override def equals(obj: Any): Boolean =\n    obj match {\n      case that: TallierResult =>\n        this.tallierName == that.tallierName &&\n        this.ballotsProcessed == that.ballotsProcessed &&\n        that.canEqual(this)\n      case _ => false\n    }\n  override def hashCode(): Int =\n    tallierName.hashCode * 37 + ballotsProcessed"}
{"id":"c3932373-0f56-407e-a827-a325b5e90687","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class VoteAuditLog(ballotId: String, audited: Boolean)"}
{"id":"6e3349ba-1684-4e7b-acfb-1b6772c16b9f","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class VotingMachineRecord(val serial: String, val acceptedCount: Int)\n  override def toString: String =\n    \"VotingMachineRecord(\" + serial + \", \" + acceptedCount + \")\""}
{"id":"240f3793-7ea9-4258-9ec4-60b5db7e30c0","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class PollingLocationInfo(locationName: String, totalCast: Int, spoiled: Int)"}
{"id":"062cfc97-15b0-46b7-ab56-d1fd80676139","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class InvalidVoteDetail(val reason: String, val occurrence: Int)\n  override def equals(obj: Any): Boolean =\n    obj match\n      case that: InvalidVoteDetail =>\n        this.reason == that.reason && this.occurrence == that.occurrence\n      case _ => false\n  override def hashCode(): Int =\n    reason.hashCode * 13 + occurrence\n  override def toString: String =\n    s\"InvalidVoteDetail($reason, $occurrence)\""}
{"id":"d74d7a1e-7de9-4bcc-bea2-564a2958c322","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class DistrictSummary(districtId: String, ballotsCasted: Int)"}
{"id":"1854d451-60be-43e4-9a13-c3933e7a9f2b","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class ResultCertification(val certifier: String, val certified: Boolean)"}
{"id":"e9264cc6-8244-4aea-a60e-8b5606c65034","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class SpoiledBallotRecord(ballotNumber: String, detectedReason: String)"}
{"id":"82b0f271-c93a-4e8b-b594-a6fed7de3cb1","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"object ManualTallyExtract {\n  def unapply(arg: ManualTally): Option[(String, Int)] =\n    Some((arg.ballotBoxID, arg.countedVotes))\n}"}
{"id":"82abd0ef-5097-4cd0-9174-323b2459a337","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class CertificationRecord(authority: String, timestamp: Long, valid: Boolean)"}
{"id":"65de48ef-02cc-427a-8230-f3ac0a8f5134","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"enum BallotStatus:\n  case Valid, Invalid, Challenged"}
{"id":"a54224d6-2e86-42d1-a3f1-b0dda53d7132","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class VotingError(val errorCode: Int, val details: String)\n  override def equals(obj: Any): Boolean =\n    obj match {\n      case that: VotingError =>\n        this.errorCode == that.errorCode && this.details == that.details\n      case _ => false\n    }\n  override def hashCode(): Int = errorCode + details.length"}
{"id":"8317c845-b619-487c-9906-b6e96d50d411","timestamp":1746103520795,"category":"classes_for_data","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class FinalTally(val regionId: String, val totalValid: Int, val totalInvalid: Int)"}
{"id":"b8a4b3ab-7d8b-44a8-ab38-757b2de1c29d","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class LibraryBook(isbn: String, title: String, author: String, publicationYear: Int, subjects: List[String])"}
{"id":"400ed170-9919-4b27-bc90-227c7cd4b795","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class CatalogEntry(val accessionNumber: String, val location: String, val isAvailable: Boolean)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: CatalogEntry =>\n    this.accessionNumber == that.accessionNumber &&\n    this.location == that.location &&\n    this.isAvailable == that.isAvailable\n  case _ => false\n}\noverride def hashCode: Int =\n  accessionNumber.hashCode ^ location.hashCode ^ isAvailable.hashCode\noverride def toString: String =\n  s\"CatalogEntry($accessionNumber, $location, $isAvailable)\""}
{"id":"72101205-a68f-435b-bb56-d66e6c2d0865","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class AuthorProfile(name: String, birthYear: Option[Int], booksWritten: List[String])"}
{"id":"8d5f065c-d39e-4085-afa3-8d9bf1a0066a","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class SearchQuery(val keywords: List[String], val fields: List[String], val maxResults: Int)\noverride def toString: String =\n  s\"SearchQuery([${keywords.mkString(\",\")}], [${fields.mkString(\",\")}], $maxResults)\""}
{"id":"4ca0d837-cd11-4b84-a513-44333690d3dd","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SearchResultItem(title: String, author: String, year: Int, shelfLocation: String)"}
{"id":"69bc9c89-bc88-4aba-ba1f-a9bcef16e985","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class DigitalMediaResource(val resourceId: String, val format: String)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: DigitalMediaResource =>\n    this.resourceId == that.resourceId && this.format == that.format\n  case _ => false\n}"}
{"id":"91f145d6-e369-40c5-b747-091aeab3c320","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SubjectCategory(code: String, name: String, parentCategory: Option[String])"}
{"id":"38a5d1ad-ab3d-45f6-bc02-3377231240ae","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class UserBookmark(val userId: String, val bookIsbn: String, val page: Int)\ndef canEqual(other: Any): Boolean = other.isInstanceOf[UserBookmark]\noverride def equals(obj: Any): Boolean = obj match {\n  case that: UserBookmark =>\n    this.userId == that.userId && this.bookIsbn == that.bookIsbn && this.page == that.page\n  case _ => false\n}\ndef toStringRep: String = s\"Bookmark for $userId on $bookIsbn at page $page\""}
{"id":"e77aadb8-7cdc-4197-bd4c-efcee6396b25","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class LibraryMember(memberId: String, fullName: String, joinDate: String)"}
{"id":"d1230143-f0ca-475f-aa10-040681bd20d1","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class BookHoldRequest(val requestId: String, val memberId: String, val isbn: String, val requestDate: String)\ndef thisEquals(that: BookHoldRequest): Boolean =\n  this.requestId == that.requestId && this.memberId == that.memberId &&\n  this.isbn == that.isbn && this.requestDate == that.requestDate\n\ndef showRequest: String = s\"HoldRequest: $requestId for $memberId on $isbn\""}
{"id":"e172fc38-6fe1-4757-a98d-321e1dec4f4f","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class AdvancedSearchFilter(field: String, value: String, ignoreCase: Boolean = true)"}
{"id":"a4769e71-daf0-47ae-8572-a50178865c24","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object PublisherEntry {\n  def unapply(p: PublisherEntry): Option[(String, String)] = Some((p.publisherName, p.location))\n}\nclass PublisherEntry(val publisherName: String, val location: String)\ndef getPublisherDescription: String = s\"Publisher: $publisherName located at $location\""}
{"id":"251402df-1568-41d4-b97a-576c54f443f3","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class JournalArticle(citationId: String, title: String, authors: List[String], publishedYear: Int, journalTitle: String)"}
{"id":"e2b2d8c4-ea6d-4e7d-b03f-220fee1929c1","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class ResourceTag(val tagLabel: String, val resourceId: String)\noverride def toString: String = s\"Tag '$tagLabel' for resource $resourceId\""}
{"id":"ec272cd7-875e-487b-941c-55a3e71638ee","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class LibrarySection(sectionId: String, description: String)"}
{"id":"81ee8b7e-8038-4a77-968e-4eed124b12a8","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class SearchFacet(val facetName: String, val facetValues: List[String])\ndef printFacet: String = s\"$facetName -> ${facetValues.mkString(\", \")}\""}
{"id":"e935d287-e34c-485b-b648-428dacb4842a","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class CheckoutRecord(memberId: String, itemBarcode: String, checkoutDate: String, dueDate: String)"}
{"id":"86b996b5-d166-46c8-b84f-cdbd42d93601","timestamp":1746103536308,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class LanguageMetadata(val languageCode: String, val languageName: String)\noverride def toString: String = s\"Language: $languageName ($languageCode)\""}
{"id":"86567173-32cd-4c87-8824-54659e629bc8","timestamp":1746103536309,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class LibraryLoanRecord(loanId: String, bookIsbn: String, memberId: String, loanDate: String, returnDate: Option[String])"}
{"id":"e90be850-02eb-476c-85dd-bcf39c5c0182","timestamp":1746103536309,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class KeywordSuggestion(val keyword: String, val relevanceScore: Double)\ndef isRelevant(threshold: Double): Boolean = relevanceScore > threshold"}
{"id":"ff80d9ea-c922-418a-b1a4-f033ab6fe9e2","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class CatalogBook(isbn: String, title: String, authors: List[String], year: Int)"}
{"id":"6e837c9a-ef86-4031-876e-0c5e5ccd801e","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class SearchResult(val bookId: String, val position: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: SearchResult =>\n      this.bookId == that.bookId && this.position == that.position\n    case _ => false\n  }\n  override def hashCode(): Int = {\n    31 * bookId.hashCode + position\n  }\n  override def toString: String = s\"SearchResult($bookId, $position)\"\n}"}
{"id":"dd2d2841-320c-4118-a651-ac4c65288da1","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class LibraryUser(userId: String, fullName: String, registeredAt: java.time.LocalDate)"}
{"id":"8a44c5ba-cfe0-40f8-bc4c-5ac2e536fb4b","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class AuthorProfile(val name: String, val birthYear: Int) {\n  // No equals/hashCode, so instances are not structurally compared\n}"}
{"id":"0d8fcee8-f445-4747-b1c1-203ae5dd9ee1","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SearchFilter(keyword: String, field: String, isExact: Boolean)"}
{"id":"8f5baf3c-5302-49d7-ab50-4c4c6c0cc0db","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class CatalogRequest(var query: String, var maxResults: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CatalogRequest =>\n      this.query == that.query && this.maxResults == that.maxResults\n    case _ => false\n  }\n  override def hashCode(): Int = query.hashCode * 13 + maxResults\n}"}
{"id":"460d6957-57e5-44c9-84f9-4969dd2e656c","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class DigitalMedia(mediaId: String, format: String, availability: Boolean)"}
{"id":"3dca932b-903f-487c-87d8-17d9d85605f8","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class LibrarySubject(val subjectId: String, val subjectName: String) {\n  override def toString: String = s\"Subject: $subjectName ($subjectId)\"\n}"}
{"id":"0f9798b3-37ab-4fdf-a97f-c4888cc54005","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SearchQuery(term: String, sortBy: String, limit: Int)"}
{"id":"1a357c12-2528-4cca-9d02-3a4915292ea1","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class PublisherInfo(val publisherName: String, val location: String)\nobject PublisherInfo {\n  def unapply(p: PublisherInfo): Option[(String, String)] =\n    Some((p.publisherName, p.location))\n}"}
{"id":"a7430b25-1ce5-40d3-bb63-83497738a024","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SubjectTag(tagId: String, name: String)"}
{"id":"c83e1fa3-d1c8-49b2-a28f-444648fa508a","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class CheckoutRecord(val userId: String, val bookIsbn: String, val date: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CheckoutRecord =>\n      this.userId == that.userId && this.bookIsbn == that.bookIsbn && this.date == that.date\n    case _ => false\n  }\n  override def hashCode(): Int = userId.hashCode * 7 + bookIsbn.hashCode * 3 + date.hashCode\n}"}
{"id":"b6b8d83f-a3b4-4a56-8207-16e95b0d7b43","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class CatalogSearchSession(sessionId: String, userId: String, timestamp: Long)"}
{"id":"f599136f-ee74-45a0-9904-ca869307ac4c","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class BookLoan(val loanId: String, val dueDate: java.time.LocalDate)"}
{"id":"73a07897-c090-4ff3-bdc4-7ff83220dd10","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class LibraryBranch(branchId: String, address: String, openHours: String)"}
{"id":"82ba3b3b-0dd6-42ee-8a0c-5734923719c7","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class LibraryFormat(val code: String, val description: String) {\n  def canEqual(other: Any): Boolean = other.isInstanceOf[LibraryFormat]\n  override def equals(obj: Any): Boolean = obj match {\n    case that: LibraryFormat =>\n      this.code == that.code && this.description == that.description\n    case _ => false\n  }\n  override def hashCode(): Int = code.hashCode + description.hashCode * 11\n}"}
{"id":"c053c5fe-8462-4178-a584-0bbe8fdd1747","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class CatalogEvent(eventId: String, eventType: String, details: String)"}
{"id":"923e5bef-a520-4580-be8f-52071e1b29d3","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class EBookFile(val fileId: String, val mimeType: String, val sizeInBytes: Long)"}
{"id":"78ec5a74-dc3f-4933-8657-e0d8f749d723","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"enum MaterialType:\n  case Book, Journal, DVD, EBook"}
{"id":"adc055c3-8a43-4f58-aa4a-d923fc7f0eb3","timestamp":1746103549222,"category":"classes_for_data","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class SubjectClassification(val classificationCode: String, val classificationName: String)"}
{"id":"fcb6ce00-c456-47a6-b54f-71ca14eb5f36","timestamp":1746103562301,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class TicketQR(id: String, eventId: String, issuedAt: Long)"}
{"id":"b81627a3-c4be-47df-9379-85664f8f4251","timestamp":1746103562301,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRTicketInfo(val qrContent: String, val ticketNumber: Int, val validationStatus: Boolean)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: QRTicketInfo =>\n    this.qrContent == that.qrContent &&\n    this.ticketNumber == that.ticketNumber &&\n    this.validationStatus == that.validationStatus\n  case _ => false\n}\noverride def hashCode(): Int =\n  (qrContent, ticketNumber, validationStatus).##"}
{"id":"b30985cd-4df9-4318-b1ec-ead488f740a5","timestamp":1746103562301,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QRValidationResult(ticketId: String, isValid: Boolean, checkedAt: Long)"}
{"id":"4c2bfb7e-b39c-4a72-81e6-282f216dffd2","timestamp":1746103562301,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class ManualTicketQR(val ticketId: String, val eventCode: String, val expiration: Long)\n  override def toString: String =\n    s\"ManualTicketQR(ticketId=$ticketId, eventCode=$eventCode, expiration=$expiration)\""}
{"id":"8fc6fb81-2826-4159-95e8-d7f0a6e398d7","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class EventEntryScan(qrCode: String, gateNumber: Int, scanTime: Long)"}
{"id":"56dbf85a-c88e-45d6-a980-527680d95799","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRValidationAttempt(val code: String, val timestamp: Long)\n  override def equals(obj: Any): Boolean = obj match {\n    case that: QRValidationAttempt =>\n      code == that.code && timestamp == that.timestamp\n    case _ => false\n  }\n  override def hashCode(): Int = (code, timestamp).##"}
{"id":"7d1b5e03-654c-4ffe-a0fc-b6caea2d1243","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QRCodeMetadata(format: String, version: Int, ticketType: String)"}
{"id":"51cc5af5-ddbe-44fa-8cfe-f6e76939efcf","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class AttendeeQR(\n val attendeeName: String,\n val ticketId: String,\n val qrIssued: Long\n)\nobject AttendeeQR {\n  def unapply(a: AttendeeQR): Option[(String, String, Long)] =\n    Some((a.attendeeName, a.ticketId, a.qrIssued))\n}"}
{"id":"19a0bd8c-fb71-4983-9429-3c04a8b7db1b","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class TicketHolder(name: String, ticketNumber: String, validTill: Long)"}
{"id":"79236aad-dd8d-4524-b8fe-956be261c965","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRStatus(val status: String, val checkTime: Long)\n  // No equals/hashCode implementations, so two instances with same data are not equal by default."}
{"id":"776f45bf-b571-4eb3-b265-c9e5d8e91822","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class ValidationAttemptInfo(attemptId: String, attemptTime: Long, outcome: String)"}
{"id":"6938a608-21a0-4add-b7a1-d543736b1316","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class LegacyEntryRecord(val entryCode: String, val date: Long, val success: Boolean)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: LegacyEntryRecord =>\n    this.entryCode == that.entryCode &&\n    this.date == that.date &&\n    this.success == that.success\n  case _ => false\n}\noverride def hashCode(): Int =\n  (entryCode, date, success).##"}
{"id":"da67bad3-2e7f-403b-8d9e-d2d55e788f91","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QRScanInfo(scannedBy: String, scanLocation: String, scanTimestamp: Long)"}
{"id":"95905c60-f0b5-4214-b08e-99941f6b4baa","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketValidationDetails(\n val validatedBy: String,\n val ticketRef: String,\n val valid: Boolean\n)\n// No equals or hashCode provided, object identity only."}
{"id":"68bd08fb-90ce-48d3-83aa-7d0e66403e06","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QRAuthSession(sessionId: String, userId: String, initiatedAt: Long)"}
{"id":"237c3201-936a-423b-a715-5d5b3e70a4ad","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRAttemptHistory(val ticketId: String, val attempts: Int)\n  override def toString: String =\n    s\"QRAttemptHistory(ticketId=$ticketId, attempts=$attempts)\""}
{"id":"18bfdcaa-287e-49e9-b9e1-83b6667e089f","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QRBatchValidation(batchId: String, validTickets: Int, invalidTickets: Int)"}
{"id":"be041cad-485a-4858-b943-cdbe28381bd5","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class ManualQRCodeDetails(\n val qrCodeStr: String,\n val owner: String,\n val timeCreated: Long\n)\nobject ManualQRCodeDetails {\n  def unapply(m: ManualQRCodeDetails): Option[(String, String, Long)] =\n    Some((m.qrCodeStr, m.owner, m.timeCreated))\n}"}
{"id":"e8742056-4771-4d2c-94ec-f404cffce6bc","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class EventAccessRequest(qrPayload: String, accessTime: Long, approved: Boolean)"}
{"id":"cf674373-26c3-4934-bece-44692426f419","timestamp":1746103562302,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class ScanResultInfo(val ticketNum: String, val scannedAt: Long, val status: String)\n  // No equals or hashCode, default object equality."}
{"id":"c8a35d90-d523-4149-b2ff-8ba923b158c6","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class TicketQRCode(ticketId: String, eventId: String, issuedTime: Long)"}
{"id":"ca54cf28-81f7-4246-b76d-21d99c010aee","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class AttendeeValidation(val attendeeId: String, val qrContent: String) {  \n  override def equals(obj: Any): Boolean = obj match { \n    case other: AttendeeValidation => attendeeId == other.attendeeId && qrContent == other.qrContent\n    case _ => false\n  }\n  override def hashCode(): Int = {\n    (attendeeId, qrContent).##\n  }\n  override def toString: String = s\"AttendeeValidation($attendeeId, $qrContent)\"\n}"}
{"id":"ad32add4-7177-4511-b4d5-f184170f5182","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class EventPass(eventId: String, seatNumber: String, validFrom: Long, validTo: Long)"}
{"id":"c8f231ef-6a8a-4332-83c4-77fc2cc5572b","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class EntryAttempt(val qrToken: String, val scannedAt: Long)\n"}
{"id":"56716c53-f805-4e8d-804b-cdb7b6de4225","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class TicketScanResult(ticketId: String, valid: Boolean, reason: Option[String])"}
{"id":"3e5083f7-26bb-4354-b52f-8d92fd650f00","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class ManualTicket(val code: String, val validator: String) {\n  def canEqual(a: Any): Boolean = a.isInstanceOf[ManualTicket]\n  override def equals(that: Any): Boolean = that match {\n    case mt: ManualTicket => mt.canEqual(this) && this.code == mt.code && this.validator == mt.validator\n    case _ => false\n  }\n  override def hashCode(): Int = code.hashCode + 31 * validator.hashCode\n}"}
{"id":"afafd690-4fd0-49a5-9f13-169f692cdde6","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QRValidationRequest(qrString: String, eventReference: String, attemptedAt: Long)"}
{"id":"d9d27a8c-cf70-4d74-bd8a-feb9cccc4d37","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class DeviceAuthentication(val deviceId: String, val timestamp: Long) {\n  override def toString: String =\n    s\"DeviceAuthentication(deviceId=$deviceId, timestamp=$timestamp)\"\n}"}
{"id":"5903a078-5d10-4db2-b97e-8170c1594e38","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class CheckInRecord(attendeeId: String, ticketId: String, checkInTime: Long, status: String)"}
{"id":"68015d3c-2819-4925-ae25-13855ea5eb31","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketQRScan(val scanId: String, val scanTime: Long, val location: String) {\n  def getScanInfo: String = s\"$scanId at $location on $scanTime\"\n}"}
{"id":"4ef15a94-5cad-44c3-959d-cad13e450493","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class ValidationError(code: String, message: String)"}
{"id":"f7324d6e-328b-4ef7-a6b2-6f13349d4969","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRValidationAttempt(val payload: String, val eventName: String)"}
{"id":"07dedc9b-7410-47b9-bb63-fc0c517c78b1","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class EntryDecision(isAllowed: Boolean, ticketId: String)"}
{"id":"b03cfba7-fd79-4988-80eb-d1140e04243c","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class EventGuest(val qrData: String, val guestEmail: String, val checkedIn: Boolean)"}
{"id":"e657b26d-43d0-4ebb-b9a7-7df6eff73df3","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class AccessCode(payload: String, expiresAt: Long)"}
{"id":"013e3f31-28dd-463a-8b97-f57623c380c4","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketHolder(val holderId: String, val scannedQRCode: String)"}
{"id":"ad5b8688-fd51-46d4-9976-521280397534","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class TicketQRStatus(ticketId: String, status: String)"}
{"id":"196567cd-e1ca-4c64-9dca-db811f38f9d7","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object EventCodeExtractor {\n  def unapply(code: String): Option[(String, String)] = {\n    val parts = code.split(\"-\")\n    if (parts.length == 2) Some((parts(0), parts(1))) else None\n  }\n}\nclass EventCode(val code: String)"}
{"id":"61f5035c-7c5f-4dea-919a-39e183023790","timestamp":1746103588866,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QRCodeValidationLog(validationId: String, ticketNumber: String, deviceId: String, validatedAt: Long, outcome: Boolean)"}
{"id":"9c1349fd-53fb-4539-bc24-fe461259e1e6","timestamp":1746103588867,"category":"classes_for_data","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class EventQR(val qrString: String, val creationTimestamp: Long)"}
{"id":"97b7bc21-01e6-4a4e-86c4-d0d0f5d6ba45","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DroneCoordinates(latitude: Double, longitude: Double, altitude: Double)\n"}
{"id":"a85a2ea0-5b76-48f8-854e-c3bc4ea21bbe","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class WaypointDetail(val identifier: String, val latitude: Double, val longitude: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: WaypointDetail =>\n      this.identifier == that.identifier &&\n      this.latitude == that.latitude &&\n      this.longitude == that.longitude\n    case _ => false\n  }\n  override def hashCode(): Int = {\n    identifier.hashCode() + latitude.hashCode() * 31 + longitude.hashCode() * 17\n  }\n}\n"}
{"id":"3e1fbaf8-e785-41fe-8ea1-ccf6f62ca074","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class RouteSegment(start: DroneCoordinates, end: DroneCoordinates, distanceMeters: Double)\n"}
{"id":"18551eff-131c-4b81-ba2b-d4f730e6ae72","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class PathEvaluation(val energyRequired: Double, val isNoFlyZone: Boolean) {\n  override def toString: String = \"PathEvaluation(energyRequired=\" + energyRequired + \", isNoFlyZone=\" + isNoFlyZone + \")\"\n}\n"}
{"id":"0781cf4e-7013-4859-a4d5-c62633a51b85","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DeliveryMission(missionId: String, waypoints: List[DroneCoordinates], estimatedDurationMin: Int)\n"}
{"id":"5fa9bfea-4449-4df0-b48c-c43fe50fd429","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DeliveryPoint(val pointId: String, val address: String, val latitude: Double, val longitude: Double) {\n}\n"}
{"id":"82ad85ee-ecaa-413e-b120-8ef6b06ca57e","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class BatteryStatusSnapshot(timestamp: Long, remainingPct: Double)\n"}
{"id":"9c7c8af5-f1d9-4459-b505-9d7d01cd2eac","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class WindCondition(val windSpeed: Double, val windDirection: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: WindCondition =>\n      this.windSpeed == that.windSpeed && this.windDirection == that.windDirection\n    case _ => false\n  }\n  override def hashCode(): Int = (\n    41 * windSpeed.hashCode() + windDirection.hashCode()\n  )\n}\n"}
{"id":"07051595-7233-4fe5-8ba9-e1697c73fabd","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class NoFlyZone(regionId: String, boundaryPoints: List[DroneCoordinates])\n"}
{"id":"b910c8a1-975f-42a5-bc25-ab3d95fb912b","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class ChargingStation(val name: String, val latitude: Double, val longitude: Double)\n"}
{"id":"f1785c8e-7ba7-4a26-93ca-4cd5e3860879","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DeliveryPath(pathId: String, segments: List[RouteSegment])\n"}
{"id":"18c6e3ca-bd3f-4bf7-a8e6-d38872c04ffa","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class ObstacleDetected(val position: DroneCoordinates, val radiusMeters: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: ObstacleDetected => this.position == that.position && this.radiusMeters == that.radiusMeters\n    case _ => false\n  }\n}\n"}
{"id":"1af6547b-833f-436c-8ef6-5d6ff5a0a817","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class TimeWindow(startTimestamp: Long, endTimestamp: Long)\n"}
{"id":"486b5d4e-4fb1-41ed-a446-bfd80029fa83","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DroneSpecs(val model: String, val maxRangeKm: Double, val maxPayloadKg: Double) {\n  override def toString: String = s\"DroneSpecs($model, $maxRangeKm, $maxPayloadKg)\"\n  def canCarry(weight: Double): Boolean = weight <= maxPayloadKg\n}\n"}
{"id":"af7986e8-4808-43c1-a15a-8ad5bd38f5d6","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class FlightRestriction(reason: String, effectiveFrom: Long, effectiveUntil: Long)\n"}
{"id":"c6650200-c2b8-4918-93e0-307d6d8fce1c","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DeliveryAssignment(val path: DeliveryPath, val drone: String, val priority: Int)\n{\n}\n"}
{"id":"3ff90d95-f023-4845-a34e-44459f7c77fa","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class OptimizationResult(isFeasible: Boolean, totalDistanceKm: Double, path: DeliveryPath)\n"}
{"id":"288ee474-a2e1-46f1-80fd-e8eeac1ac5f9","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class WeatherSnapshot(val temperatureC: Double, val visibilityKm: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: WeatherSnapshot => this.temperatureC == that.temperatureC && this.visibilityKm == that.visibilityKm\n    case _ => false\n  }\n  override def hashCode(): Int = temperatureC.hashCode() + visibilityKm.hashCode()\n}\n"}
{"id":"c221cda1-e8f6-4c18-b8de-51e6391036f6","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class PathDecision(nodeId: String, recommendedAction: String)\n"}
{"id":"f0f88b60-56fa-4619-8625-837c6852e54d","timestamp":1746103603486,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DroneFlightPlan(val planId: String, val route: List[DroneCoordinates])\n{\n}\n"}
{"id":"2e68756d-696c-4084-ba24-a7b9007a60c7","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DeliveryNode(id: Int, latitude: Double, longitude: Double, demand: Int)"}
{"id":"a688ef21-0b97-4355-98b4-19defc689c0c","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DeliveryPoint(val identifier: Int, val lat: Double, val lon: Double) {\n  override def toString: String =\n    \"DeliveryPoint(\" + identifier + \", \" + lat + \", \" + lon + \")\"\n}"}
{"id":"500839e2-4a68-45ac-bcb7-4d8dbb73dea9","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DroneFlightPath(points: List[DeliveryNode], totalDistance: Double)"}
{"id":"c35e110a-3cab-4dc7-991f-839ea5490aa8","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class FlightLeg(val fromLocation: String, val toLocation: String, val distance: Double) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: FlightLeg =>\n      this.fromLocation == that.fromLocation &&\n      this.toLocation == that.toLocation &&\n      this.distance == that.distance\n    case _ => false\n  }\n  override def hashCode: Int =\n    fromLocation.hashCode ^ toLocation.hashCode ^ distance.hashCode()\n}"}
{"id":"b14c0cbe-6588-4aa0-9801-3995bed955b5","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DroneBatteryStatus(level: Double, isCharging: Boolean)"}
{"id":"ccc77079-92fc-4d20-81c0-67f59a853b79","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class BatteryInfo(val remaining: Double, val charging: Boolean)"}
{"id":"7b41d8a9-5478-4d43-904b-7eacb947dbff","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class PathSegment(origin: DeliveryNode, target: DeliveryNode, cost: Double)"}
{"id":"0b416985-9ac1-4261-815e-e32df5a9dc49","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DeliveryEdge(val start: DeliveryPoint, val end: DeliveryPoint, val timeMinutes: Int) {\n  override def equals(other: Any): Boolean = other match {\n    case e: DeliveryEdge =>\n      start == e.start && end == e.end && timeMinutes == e.timeMinutes\n    case _ => false\n  }\n  override def hashCode: Int =\n    start.hashCode ^ end.hashCode ^ timeMinutes\n}"}
{"id":"91bc65d1-5e94-4129-89a9-024be6020824","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DroneDeliverySchedule(droneId: String, route: List[DeliveryNode], estimatedTime: Int)"}
{"id":"78a96f12-7bd5-46e5-933b-0b95472233a3","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DeliveryAssignment(val droneCode: String, val stops: List[DeliveryPoint], val totalMinutes: Int) {\n  override def toString: String =\n    s\"DeliveryAssignment($droneCode, $stops, $totalMinutes)\"\n}"}
{"id":"40d2bfb2-e899-4391-9cc9-b0e4b30c166d","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"enum ObstacleSeverity:\n  case Minor, Moderate, Severe"}
{"id":"c170dfe5-90c3-4d87-9f0d-6e1a47a315f1","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class ObstacleType(val category: String)"}
{"id":"780c736c-d53f-4dd2-9f8a-853f472e6509","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class NoFlyZone(centerLat: Double, centerLon: Double, radiusMeters: Double)"}
{"id":"3a4fbbac-1edd-497d-a668-7c091b23b6b5","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class RestrictedArea(val lat: Double, val lon: Double, val radius: Double)"}
{"id":"c295a04b-ec81-48d3-ac8d-048e9d82da5c","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class OptimizationResult(optimalPath: DroneFlightPath, totalEnergy: Double)"}
{"id":"c3f8c03d-1f29-4285-a573-09c12f62b841","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class PathOptimizationOutcome(val path: DroneFlightPath, val energyUsed: Double) {\n  override def equals(that: Any): Boolean = that match {\n    case o: PathOptimizationOutcome =>\n      path == o.path && energyUsed == o.energyUsed\n    case _ => false\n  }\n  override def hashCode: Int =\n    path.hashCode ^ energyUsed.hashCode()\n}"}
{"id":"b33cc7b8-4155-4cf1-8350-098fb0cae492","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class StationaryObstacle(positionLat: Double, positionLon: Double, severity: ObstacleSeverity)"}
{"id":"78f84f4d-622c-4076-9f86-431d7bda4f95","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class TemporaryBlock(val lat: Double, val lon: Double, val level: String) {\n  override def toString: String =\n    s\"TemporaryBlock($lat, $lon, $level)\"\n}"}
{"id":"e8636a0f-0871-4e0a-bfad-22dd867f9c3d","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class EnergyConsumption(distance: Double, payloadWeight: Double, batteryUsed: Double)"}
{"id":"8e639893-eac8-4392-9c3d-eaf6319d1a05","timestamp":1746103624883,"category":"classes_for_data","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class ConsumptionData(val travelled: Double, val loadKg: Double, val batterySpent: Double)"}
{"id":"4ba344fa-8616-4241-87bb-7067fb6283ac","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class PolicyHolder(id: String, fullName: String, email: String, phone: String)\n"}
{"id":"b1163950-cd15-44b8-8c58-456ff4ce4a9a","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimSubmission(\n  val referenceNumber: String,\n  val submittedAt: Long,\n  val claimType: String,\n  val policyId: String\n)\noverride def equals(obj: Any): Boolean = obj match {\n  case that: ClaimSubmission =>\n    this.referenceNumber == that.referenceNumber &&\n      this.claimType == that.claimType &&\n      this.policyId == that.policyId &&\n      this.submittedAt == that.submittedAt\n  case _ => false\n}\noverride def hashCode(): Int =\n  referenceNumber.hashCode ^ claimType.hashCode ^ policyId.hashCode ^ submittedAt.hashCode\n"}
{"id":"e7650173-be69-42d6-8c68-9e823b0a407e","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class InsuranceClaim(\n  claimId: String,\n  policyHolder: PolicyHolder,\n  submittedDate: Long,\n  amount: Double\n)\n"}
{"id":"cd0a98ae-e20e-41fb-8191-0037f5e071c4","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class PolicyDetails(\n  val policyId: String,\n  val coverageType: String,\n  val expiryDate: Long\n)\noverride def toString: String =\n  s\"PolicyDetails(policyId=$policyId, coverageType=$coverageType, expiryDate=$expiryDate)\"\n"}
{"id":"b1d5ce38-e562-4d68-9d61-753296ee63dc","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class DocumentAttachment(\n  documentId: String,\n  claimId: String,\n  fileName: String,\n  fileType: String\n)\n"}
{"id":"3ac8c1e4-ec98-4370-a9b1-57859857890b","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class Address(val street: String, val city: String, val postalCode: String, val country: String)\n"}
{"id":"ef8e483e-99f3-4193-8857-560b60c35b32","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimantDetails(\n  holderId: String,\n  address: Address,\n  contactNumber: String\n)\n"}
{"id":"9664e60e-595e-4ed0-adbf-f6353afd559b","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class Payout(val payoutId: String, val claimId: String, val amount: Double, val paidOn: Long)\n\noverride def equals(obj: Any): Boolean = obj match {\n  case x: Payout =>\n    payoutId == x.payoutId && claimId == x.claimId &&\n      amount == x.amount && paidOn == x.paidOn\n  case _ => false\n}\n"}
{"id":"86564328-4210-42ea-9c9e-5589b3ac2c9f","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimStatus(\n  status: String, // e.g., \"Pending\", \"Approved\", \"Rejected\"\n  updatedOn: Long\n)\n"}
{"id":"66eb836d-8cb6-41bf-b9e8-c63458f0a229","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimAdjustment(val adjustmentId: String, val claimId: String, val amount: Double)\n"}
{"id":"2df4a659-4e23-4cfe-86d1-d7dd0842e8ca","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ProviderInfo(\n  providerId: String,\n  providerName: String,\n  contactEmail: String\n)\n"}
{"id":"52d98849-b8c3-4694-97c0-bfaa89165255","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimInvestigation(val investigationId: String, val description: String, val resolved: Boolean)\n\noverride def hashCode(): Int =\n  (investigationId, description, resolved).hashCode()\n"}
{"id":"7f48e3fd-8a1a-48fb-a591-f4070fb5abfa","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class SupportingEvidence(\n  evidenceId: String,\n  claimId: String,\n  description: String\n)\n"}
{"id":"0f69f6b1-3213-4ae1-a8c7-239081c45c42","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class Notification(val notificationId: String, val recipientId: String, val message: String)\n\nobject Notification {\n  def unapply(n: Notification): Option[(String, String, String)] =\n    Some((n.notificationId, n.recipientId, n.message))\n}\n"}
{"id":"938fb03f-151b-490d-9a91-900f47c06dcb","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimReview(\n  reviewId: String,\n  claimId: String,\n  reviewer: String,\n  decision: String\n)\n"}
{"id":"a951b7e1-4e35-4684-868b-740da5309572","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class PaymentInstruction(\n  val instructionId: String,\n  val claimId: String,\n  val bankAccount: String,\n  val amount: Double\n)\noverride def toString: String =\n  s\"PaymentInstruction($instructionId, $claimId, $bankAccount, $amount)\"\n"}
{"id":"b01f7e28-72f7-4d7f-bd92-58ffb5e1e217","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class AdjusterAssignment(\n  assignmentId: String,\n  claimId: String,\n  adjusterName: String\n)\n"}
{"id":"0df12f50-54ee-4f46-8895-3049519f15e6","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class RejectionReason(val reasonId: String, val claimId: String, val reasonText: String)\n"}
{"id":"37b91a3e-775f-4bc1-976c-f5f438404081","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"enum ClaimType:\n  case Health, Property, Auto, Life\n\ncase class ClaimSubmissionRequest(\n  submissionId: String,\n  policyId: String,\n  claimType: ClaimType,\n  submissionDate: Long\n)\n"}
{"id":"46bf52f6-7514-46fb-b0a1-afb0e44a82f1","timestamp":1746103642792,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimApproval(val approvalId: String, val claimId: String, val approver: String, val approved: Boolean)\n"}
{"id":"4e9d8a7a-9a16-4cca-bf8e-6358f741b5cb","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimSubmission(claimId: String, policyNumber: String, claimantName: String, submissionDate: java.time.LocalDate, status: ClaimStatus)"}
{"id":"663ce62c-c1e9-46f9-b09d-5a905a3b12de","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class DocumentAttachment(documentId: Long, fileName: String, fileType: String, claimId: String, uploadedAt: java.time.Instant)"}
{"id":"e9df8d3c-defa-4aab-aad6-36c591d0ce1b","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimAddress(street: String, city: String, state: String, postalCode: String, country: String)"}
{"id":"b7948ef3-21f6-4f8e-bfad-8592c9c07804","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimItem(description: String, amount: BigDecimal, deductible: BigDecimal)"}
{"id":"4bd30bda-146b-4987-8133-ca1aeb37c26a","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimantContactInfo(fullName: String, email: String, phoneNumber: Option[String])"}
{"id":"efeaebc4-61ea-4400-bc70-b99c13f6a766","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class PolicyReference(policyNumber: String, effectiveDate: java.time.LocalDate, expiryDate: java.time.LocalDate)"}
{"id":"aa2f1c4b-53e5-4d23-b30d-60f86a3eb190","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class PaymentDetail(paymentId: String, claimId: String, paidAmount: BigDecimal, paidOn: java.time.LocalDate)"}
{"id":"7f42bf01-98a5-4f30-bf9f-732cbc55915f","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class Adjuster(assignedAdjusterId: String, name: String, contactNumber: String)"}
{"id":"0b520ba1-6bd5-4f63-937b-869bcc45bb1c","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimAuditLog(logId: Long, claimId: String, action: String, performedBy: String, timestamp: java.time.LocalDateTime)"}
{"id":"46a4dc24-f3f6-4812-895d-9d5cc22e0831","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"enum ClaimStatus:\n  case Submitted, InReview, Approved, Rejected, Paid"}
{"id":"02d3ab5e-59db-4ca7-9633-48a73183f2dd","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class PolicyHolderRecord(val holderId: String, val name: String, val dateOfBirth: java.time.LocalDate)"}
{"id":"3cfd4df1-3494-4512-8a3a-4a4e7125982a","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimInvestigator(val investigatorId: Long, val claimId: String, val investigationDate: java.time.LocalDate) {\n  override def equals(other: Any): Boolean = other match {\n    case that: ClaimInvestigator =>\n      this.investigatorId == that.investigatorId &&\n      this.claimId == that.claimId &&\n      this.investigationDate == that.investigationDate\n    case _ => false\n  }\n  override def hashCode(): Int =\n    (investigatorId, claimId, investigationDate).##\n  override def toString: String =\n    s\"ClaimInvestigator($investigatorId, $claimId, $investigationDate)\"\n}"}
{"id":"182bf9ab-13b6-4d4b-a449-4d377471d837","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class SupportingEvidence(val evidenceId: String, val description: String, val fileLink: String)"}
{"id":"c61c7c1c-665c-4fa5-9421-d13963b2f8fd","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimantBankInfo(val accountHolder: String, val bankName: String, val iban: String)"}
{"id":"ddfd2d86-95ef-437d-9629-bf985801ddf6","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class LossEventDetail(val eventType: String, val eventDate: java.time.LocalDate)\nobject LossEventDetail {\n  def unapply(obj: LossEventDetail): Option[(String, java.time.LocalDate)] =\n    Some((obj.eventType, obj.eventDate))\n}"}
{"id":"27d56811-4bf6-4b47-8480-554e0769ed6b","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimReviewEntry(val reviewer: String, val reviewTimestamp: java.time.LocalDateTime, val remarks: String) {\n  override def toString: String =\n    s\"Review by $reviewer at $reviewTimestamp: $remarks\"\n}"}
{"id":"b182f73c-7d9f-4dd8-9e33-e0a2cb84262d","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimPaymentQueue(val queueId: Int, val claimReference: String, val queuedAt: java.time.Instant)"}
{"id":"f7963593-9b4e-49af-992c-1b2e2f8bfad3","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class PolicyCoverageArea(val regionName: String, val coverageLimit: BigDecimal)\nobject PolicyCoverageArea {\n  def unapply(c: PolicyCoverageArea): Option[(String, BigDecimal)] =\n    Some((c.regionName, c.coverageLimit))\n}"}
{"id":"251b586c-30c7-4696-9f1f-0dc82f435ee2","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class EmergencyContact(val contactName: String, val phone: String)\nobject EmergencyContact {\n  def unapply(ec: EmergencyContact): Option[(String, String)] =\n    Some((ec.contactName, ec.phone))\n}"}
{"id":"72578c18-367f-448a-be1e-8beff4829e10","timestamp":1746103658577,"category":"classes_for_data","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class PartialApprovalAmount(val claimId: String, val approvedAmount: Option[BigDecimal])"}
{"id":"0c7f87d8-d1c5-4afe-bd89-0755ab4fab45","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class StudentPerformance(studentId: String, courseCode: String, grade: Double)"}
{"id":"b573821e-2b07-431c-b85f-251b65658fd1","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class CourseEngagementTracker(val userId: String, val weekNumber: Int, val activityCount: Int)\n{\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CourseEngagementTracker =>\n      this.userId == that.userId &&\n      this.weekNumber == that.weekNumber &&\n      this.activityCount == that.activityCount\n    case _ => false\n  }\n  override def hashCode(): Int =\n    (userId, weekNumber, activityCount).##\n  override def toString: String =\n    s\"CourseEngagementTracker($userId, $weekNumber, $activityCount)\"\n}"}
{"id":"d687c1e5-de16-40d9-8e1d-50a019d438f0","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class QuizAttempt(studentId: String, quizId: String, score: Double, timestamp: Long)"}
{"id":"e02265f3-b6d9-459d-902a-11b5e7d0f3d8","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class LearningResource(val resourceId: String, val title: String, val accessCount: Int) {\n  override def toString: String =\n    s\"LearningResource($resourceId, $title, $accessCount)\"\n}"}
{"id":"bb300221-6659-4f1f-a191-0b7491184418","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class SessionLog(studentId: String, sessionStart: Long, sessionEnd: Long)"}
{"id":"9f0dd49e-5546-48f1-a2c5-c0073814c9dc","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class AssignmentSubmission(val studentId: String, val assignmentId: String, val submitted: Boolean){\n  override def equals(obj: Any): Boolean = obj match {\n    case that: AssignmentSubmission =>\n      this.studentId == that.studentId && this.assignmentId == that.assignmentId && this.submitted == that.submitted\n    case _ => false\n  }\n  override def hashCode(): Int =\n    (studentId, assignmentId, submitted).##\n}"}
{"id":"7680f055-75f1-4fad-be6e-077a8604fed1","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class TimeOnTask(studentId: String, taskId: String, durationMinutes: Int)"}
{"id":"3eac3edf-aeb8-439e-9751-bfc28726559f","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class CourseFeedback(val studentId: String, val courseCode: String, val rating: Int, val feedbackText: String)"}
{"id":"221755e5-4d31-4bed-9ce1-f35af3c47592","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class AttendanceRecord(studentId: String, sessionId: String, present: Boolean)"}
{"id":"35b8bb5c-f3be-4f85-80e9-687789d015dc","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class LearningOutcome(val studentId: String, val outcomeId: String, val achieved: Boolean)\nobject LearningOutcome {\n  def unapply(lo: LearningOutcome): Option[(String, String, Boolean)] =\n    Some((lo.studentId, lo.outcomeId, lo.achieved))\n}"}
{"id":"83d9ac6c-8323-4748-b1d5-b03070eb1a13","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class ForumPost(studentId: String, threadId: String, postText: String, timestamp: Long)"}
{"id":"68daf077-8ed0-4e01-ac61-1b3a1e4a61ef","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class ResourceView(val userId: String, val resourceUrl: String, val durationSeconds: Int)"}
{"id":"3ac3602e-9f12-46ff-aa1f-7f4f435a5b10","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class LearningPath(studentId: String, moduleSequence: List[String])"}
{"id":"74fe921e-fcf1-4eb8-b806-23cac3c949da","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class ProgressCheck(val userId: String, val checkpointId: String, val passed: Boolean)\nobject ProgressCheck {\n  def unapply(pc: ProgressCheck): Option[(String, String, Boolean)] =\n    Some((pc.userId, pc.checkpointId, pc.passed))\n}"}
{"id":"7dd7a74f-7619-43a1-82c8-52b1cf4ede46","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class GradeImprovement(studentId: String, courseCode: String, oldGrade: Double, newGrade: Double)"}
{"id":"c429dbb2-6ae1-4b04-a36e-a11cca33c32a","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class GroupProject(val projectId: String, val teamMembers: List[String], val completionStatus: String)"}
{"id":"b04a1664-e2a0-482d-ae36-f18db1f9366a","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class InteractiveActivityLog(studentId: String, activityId: String, timeSpent: Int, completed: Boolean)"}
{"id":"98408e0c-d8bc-4049-b396-6260e34af342","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class FeedbackResponse(val respondentId: String, val surveyId: String, val responseValue: Int)"}
{"id":"4e56b1fc-d052-462d-82f2-b7593d07826c","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class WeeklyActivityStats(studentId: String, week: Int, videoMinutes: Int, quizAttempts: Int)"}
{"id":"81e621e6-a3e4-4867-869f-276d532e3774","timestamp":1746103675893,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class PeerAssessment(val assessorId: String, val assesseeId: String, val score: Double)"}
{"id":"6450027e-a4fb-4709-9407-47db739b6d1e","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class StudentProgression(studentId: Int, module: String, completionRate: Double)"}
{"id":"637d34f1-40b9-411e-88a3-7f4e5f61f021","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class EngagementSession(val sessionId: String, val userId: Long, val durationMinutes: Int)\n"}
{"id":"483c7da2-af97-44f6-ac8f-077fc87bd0bd","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class AssessmentScore(studentEmail: String, assessmentTitle: String, score: Double)\n"}
{"id":"e191e5c0-9317-40bf-99ea-61496639e068","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class ResourceAccessRecord(val learner: String, val resourceType: String, val accessCount: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: ResourceAccessRecord =>\n      learner == that.learner && resourceType == that.resourceType && accessCount == that.accessCount\n    case _ => false\n  }\n\n  override def hashCode(): Int = {\n    31 * learner.hashCode + 17 * resourceType.hashCode + accessCount\n  }\n}\n"}
{"id":"57cdf11c-1e9f-4d78-956b-053951b607c4","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class QuizAttempt(quizId: String, studentNumber: String, attemptNumber: Int, result: Boolean)"}
{"id":"4390f558-c4a9-4e83-af85-019630595a97","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class StudentLogEntry(val eventTimestamp: Long, val activity: String, val outcome: String) {\n  override def toString: String = s\"[${eventTimestamp}] ${activity} => ${outcome}\"\n}"}
{"id":"bbd35d7e-c21a-4fb7-8129-da1d9669ceef","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class CourseParticipation(studentName: String, courseCode: String, participated: Boolean)"}
{"id":"c6173053-1bc0-4be3-8601-be1a38c75a30","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class ModuleReview(val reviewerId: Int, val moduleName: String, val comments: String)\n"}
{"id":"131fe48e-7cff-4cf7-8fe4-08661799c21f","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class DropoutRisk(studentId: Int, semester: Int, predictedRisk: Double)"}
{"id":"faa7920d-1a9a-4661-a4e0-5522838e6225","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class FeedbackSubmission(val feedbackId: String, val studentUsername: String, val sentimentScore: Double)"}
{"id":"722d13b4-8cb2-44e5-a0eb-b1019267b39c","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class LearningObjectiveStatus(objective: String, studentIdentifier: String, status: String)"}
{"id":"450ca7c9-4976-4b93-991b-42917878d3f0","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class TimeOnTask(val userIdentifier: String, val taskId: String, val minutesSpent: Double) {\n  override def equals(other: Any): Boolean = other match {\n    case that: TimeOnTask => this.userIdentifier == that.userIdentifier && this.taskId == that.taskId && this.minutesSpent == that.minutesSpent\n    case _ => false\n  }\n\n  override def hashCode(): Int = userIdentifier.hashCode * 13 + taskId.hashCode * 29 + minutesSpent.toInt\n}"}
{"id":"45f20c62-36e2-4f0b-a763-fa706d0d80c5","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class ForumPost(studentAlias: String, topic: String, postLength: Int)"}
{"id":"74f95951-4371-4af7-8a47-99255351ec03","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class LearningPath(val learnerId: Int, val completedModules: List[String]) {\n  override def toString: String = s\"LearningPath($learnerId, $completedModules)\"\n}"}
{"id":"572dd2c2-309f-4c17-a72d-dd30a30948ce","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class AttendanceRecord(date: String, present: Boolean, studentRegNo: String)"}
{"id":"2849f10d-e777-48d7-9bd6-dfc766f51afd","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class AssignmentSubmission(val submissionId: String, val submitterEmail: String, val grade: Option[Double])\n"}
{"id":"70cce6f1-db34-4680-a2d9-86c73c15eb43","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class PeerReviewFeedback(reviewer: String, reviewee: String, feedbackText: String)"}
{"id":"ac864217-6b1d-4854-8cb1-e738522bedb8","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class ProgressAlert(val studentHandle: String, val alertLevel: String, val message: String)\n"}
{"id":"906dbace-663f-44e4-b3ba-211443dd7bf7","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class WeeklyUsageStats(week: Int, averageSessionDuration: Double, studentHandle: String)"}
{"id":"5b74d748-8039-4981-a6d8-45a42ab74ee8","timestamp":1746103689774,"category":"classes_for_data","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class CourseCompletion(val person: String, val courseTitle: String, val year: Int)\n"}
{"id":"f03bbc13-7951-4c98-b9c8-e93cf7590a2d","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Ingredient(name: String, quantity: Double, unit: String)"}
{"id":"654ebaf2-083f-4760-bd0f-cb88c2f7186a","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class UserProfile(userId: String, preferredCuisines: List[String], allergyRestrictions: List[String])"}
{"id":"c35c2980-57c8-40eb-961b-bed17a701275","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Recipe(recipeId: String, title: String, ingredients: List[Ingredient], cuisine: String)"}
{"id":"da2a7155-0b63-4444-b745-12c0381ef7ed","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Rating(userId: String, recipeId: String, score: Int, comment: Option[String])"}
{"id":"04c6dff1-20c8-4d29-b025-85d3b17fe9d3","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class DietaryPreference(vegetarian: Boolean, vegan: Boolean, glutenFree: Boolean, keto: Boolean)"}
{"id":"c03ffab4-d385-4d02-8ff1-3a7d4723f361","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class RecommendedRecipe(recipe: Recipe, matchScore: Double)"}
{"id":"f265002e-801a-4924-95d6-8498a210fdc0","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class RecipeSearchCriteria(ingredients: List[String], maxPreparationTimeMinutes: Int, excludedCuisines: List[String])"}
{"id":"6ad9b55b-3c12-4fb9-aed9-54d7a3685edf","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class UserSearchHistory(userId: String, previousSearches: List[RecipeSearchCriteria])"}
{"id":"d02d4386-2b44-4c75-834f-e429ee6c024e","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class IngredientPreference(ingredient: String, likes: Boolean)"}
{"id":"741d9118-31d4-489e-a566-009753d02456","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class CookingHistory(userId: String, cookedRecipes: List[String], lastCooked: Option[String])"}
{"id":"8a12a767-ded9-4400-ac4e-57824827ecc9","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class RecipeTag(val tagId: String, val tagName: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: RecipeTag => tagId == that.tagId && tagName == that.tagName\n    case _ => false\n  }\n  override def hashCode(): Int = (tagId, tagName).##\n  override def toString: String = s\"RecipeTag($tagId, $tagName)\"\n}"}
{"id":"51a69358-09b1-4084-b06e-2ff1ac05dad4","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class UserIngredientRestriction(val userId: String, val restrictedIngredients: List[String])"}
{"id":"7e7b7b03-911d-4e58-8810-085bbb9fa842","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class RecentRecommendation(val userId: String, val recipeId: String, val recommendedAt: Long) {\n  override def toString: String = s\"RecentRecommendation($userId, $recipeId, $recommendedAt)\"\n}"}
{"id":"6df1594a-5ee8-47bf-afc4-f2cd0b473f3a","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class CookingSession(val sessionId: String, val userId: String, val recipeId: String, val rating: Option[Int])"}
{"id":"5af3eef2-ff8d-4be7-8c92-c01da1fc6386","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class CuisinePreference(val userId: String, val cuisineType: String, val preferenceLevel: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: CuisinePreference =>\n      userId == that.userId && cuisineType == that.cuisineType && preferenceLevel == that.preferenceLevel\n    case _ => false\n  }\n  override def hashCode(): Int = (userId, cuisineType, preferenceLevel).##\n}"}
{"id":"6047869e-44dc-4f92-bf93-bd5aefe17469","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class IngredientStock(val ingredientName: String, val availableAmount: Double, val measurement: String)"}
{"id":"1541d9e7-aca4-42c0-b2a7-9a665f31a581","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class UserFeedback(val feedbackId: String, val userId: String, val recipeId: String, val message: String, val date: String) {\n  override def toString: String = s\"UserFeedback($feedbackId, $userId, $recipeId, $message, $date)\"\n}"}
{"id":"02fb07ae-03f2-48fe-8604-2d2f7ec332a6","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class FavoritedRecipe(val userId: String, val recipeId: String, val favoritedTimestamp: Long)"}
{"id":"f70f77b5-96b3-46fc-994e-5b9e4543cbc1","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class NutritionalInfo(val calories: Double, val protein: Double, val fat: Double, val carbohydrates: Double)"}
{"id":"d80e6fef-4bf0-4c4a-bbe0-d3c9798ba18c","timestamp":1746103702212,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class MealType(val name: String)\nobject MealType {\n  def unapply(mt: MealType): Option[String] = Some(mt.name)\n}"}
{"id":"25dcf714-386a-40cf-acdb-125dcae58be4","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Ingredient(name: String, quantity: Double, unit: String)"}
{"id":"356602f4-970b-4ffd-bd93-e280c2a32d62","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class UserProfile(userId: String, favoriteCuisines: List[String], allergies: Set[String])"}
{"id":"9dc02e48-e5db-42d8-8dfb-87b740547828","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Recipe(title: String, ingredients: List[Ingredient], cuisine: String, difficulty: DifficultyRating)"}
{"id":"cc07e44e-f097-40bf-9c74-8e87ec7187d6","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Rating(userId: String, recipeId: String, stars: Int, comment: Option[String])"}
{"id":"624d060c-cd18-4d47-bec9-df927f5800c2","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Recommendation(recipe: Recipe, personalizationScore: Double)"}
{"id":"0c893e5c-c3ac-46c7-bce9-6beb4ff6b319","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class SearchPreferences(includeIngredients: Set[String], excludeIngredients: Set[String], maxPrepTimeMins: Option[Int])"}
{"id":"eaf32df6-06d9-48dc-8b96-0a00d126f8c3","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"enum MealType:\n  case Breakfast, Lunch, Dinner, Snack, Dessert"}
{"id":"3eff3234-9859-4a63-806b-eff81c8accaa","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class NutritionInfo(calories: Int, protein: Double, fat: Double, carbs: Double)"}
{"id":"f872d135-ee0b-4a6b-acd0-5322ef5950df","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class RecipeCollection(ownerId: String, recipes: List[Recipe])"}
{"id":"4772962f-6df1-4fa8-9ea7-57dcfc6a52d3","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class UserFeedback(userId: String, recipeId: String, liked: Boolean, suggestion: Option[String])"}
{"id":"8bfeb833-599d-4d12-9b53-9391eb5391a1","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class ManualIngredient(val name: String, val quantity: Double, val unit: String) {\n  override def toString: String = s\"Ingredient($name, $quantity, $unit)\"\n  override def equals(other: Any): Boolean = other match {\n    case that: ManualIngredient =>\n      this.name == that.name &&\n      this.quantity == that.quantity &&\n      this.unit == that.unit\n    case _ => false\n  }\n  override def hashCode: Int = name.hashCode + quantity.hashCode + unit.hashCode\n}"}
{"id":"1ae08cee-1612-4b36-87a3-58bb000de42f","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class ManualUserProfile(val userId: String, val favoriteCuisines: List[String], val allergies: Set[String]) {\n  override def toString: String =\n    s\"ManualUserProfile($userId, $favoriteCuisines, $allergies)\"\n}"}
{"id":"b069ede7-5795-4dea-b6d3-48821968cb90","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class SimpleRecipe(val title: String, val cuisine: String)"}
{"id":"b16b086e-7c12-439b-bc29-b2d916effd13","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class RecipeRating(val userId: String, val recipeId: String, val stars: Int, val comment: Option[String])"}
{"id":"420ede61-f168-4d4f-b908-5178ffb19058","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class ManualRecommendation(val recipe: SimpleRecipe, val personalizationScore: Double) {\n  override def equals(obj: Any): Boolean = {\n    obj match {\n      case r: ManualRecommendation => recipe eq r.recipe && personalizationScore == r.personalizationScore\n      case _ => false\n    }\n  }\n  override def hashCode: Int = recipe.hashCode * 31 + personalizationScore.hashCode\n}"}
{"id":"70efb8c4-cc0f-46a1-b39a-405f05049be9","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class SearchPrefs(val includeIngredients: Set[String], val excludeIngredients: Set[String], val maxPrepTimeMins: Option[Int])"}
{"id":"c82c06bb-0682-4a2e-bcbb-60ef4a06549f","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class ManualNutritionInfo(val calories: Int, val protein: Double, val fat: Double, val carbs: Double)\nobject ManualNutritionInfo {\n  def unapply(info: ManualNutritionInfo): Option[(Int, Double, Double, Double)] =\n    Some((info.calories, info.protein, info.fat, info.carbs))\n}"}
{"id":"874bad14-7f70-411f-9d78-39b2567c56f1","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class RecipeBundle(val ownerId: String, val recipes: List[SimpleRecipe])"}
{"id":"6e3853e6-9983-4428-8b53-8d029d433e27","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class UserRecipeFeedback(val userId: String, val recipeId: String, val liked: Boolean, val suggestion: Option[String])\nobject UserRecipeFeedback {\n  def unapply(urf: UserRecipeFeedback): Option[(String, String, Boolean, Option[String])] =\n    Some((urf.userId, urf.recipeId, urf.liked, urf.suggestion))\n}"}
{"id":"e099e1de-2504-47e9-a403-b107cf653902","timestamp":1746103715534,"category":"classes_for_data","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class MealTypeEnum(val name: String)\nobject MealTypeEnum {\n  val Breakfast = new MealTypeEnum(\"Breakfast\")\n  val Lunch = new MealTypeEnum(\"Lunch\")\n  val Dinner = new MealTypeEnum(\"Dinner\")\n  val Snack = new MealTypeEnum(\"Snack\")\n  val Dessert = new MealTypeEnum(\"Dessert\")\n}"}
{"id":"d91d7ffc-b622-49aa-b7d7-a8e7bdd10b35","timestamp":1746103739375,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class DonorProfile(name: String, email: String, totalDonated: BigDecimal, isRecurring: Boolean)"}
{"id":"544247f9-7393-4f80-a641-b88303e6f33f","timestamp":1746103739375,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class Campaign(id: Int, title: String, targetAmount: BigDecimal, raisedAmount: BigDecimal)"}
{"id":"8dd4a18f-854b-425b-b96d-cdd45291b23e","timestamp":1746103739375,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class Donation(transactionId: String, donorId: Int, campaignId: Int, amount: BigDecimal, timestamp: Long)"}
{"id":"a8568704-aa37-4973-aac0-7aa4a4cbc5f9","timestamp":1746103739375,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class CharityOrganization(id: Int, name: String, registrationNumber: String, verified: Boolean)"}
{"id":"a65e2b72-671a-49a9-8228-33c36a5d8eec","timestamp":1746103739375,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class Payout(charityId: Int, campaignId: Int, payoutAmount: BigDecimal, payoutDate: String)"}
{"id":"e4b076fb-c27a-47ca-b453-f1336f9ddec5","timestamp":1746103739375,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class Fundraiser(teamName: String, leaderId: Int, campaignId: Int, members: List[Int])"}
{"id":"888f78ae-8254-4519-9ce9-5c27273ff779","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class MatchDonation(company: String, campaignId: Int, matchingLimit: BigDecimal)"}
{"id":"68fff15f-5594-4d27-8209-d78c3fbed498","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class GiftAidClaim(donationId: String, claimedAmount: BigDecimal, claimStatus: String)"}
{"id":"3ffe533c-ca3c-466b-848d-469a002d1237","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class PaymentMethod(donorId: Int, methodType: String, details: String, isPreferred: Boolean)"}
{"id":"b831b440-b8c9-44bc-b987-2b05f3e8ece5","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class ImpactReport(campaignId: Int, stories: List[String], photos: List[String], publishedDate: String)"}
{"id":"e2f30918-6f1e-40b5-b5d6-72b61afaad49","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class DonorRecord(val donorName: String, val contactEmail: String, val annualContribution: Double, val recurringDonor: Boolean) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: DonorRecord =>\n      this.donorName == that.donorName &&\n      this.contactEmail == that.contactEmail &&\n      this.annualContribution == that.annualContribution &&\n      this.recurringDonor == that.recurringDonor\n    case _ => false\n  }\n  override def hashCode(): Int =\n    donorName.hashCode + 41 * contactEmail.hashCode +\n    annualContribution.hashCode() * 13 + recurringDonor.hashCode() * 7\n  override def toString: String =\n    s\"DonorRecord($donorName, $contactEmail, $annualContribution, $recurringDonor)\"\n}"}
{"id":"f9794657-c179-432b-b0fc-ff45fccc353d","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class CharityEntity(val id: Int, val name: String, val regNum: String, val isRegistered: Boolean)"}
{"id":"6b7bea6d-c332-4fda-9155-06348c2f587c","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class DonationInfo(val id: String, val donor: Int, val campaign: Int, val sum: BigDecimal, val time: Long) {\n  override def toString: String =\n    \"DonationInfo(\" + id + \", \" + donor + \", \" + campaign + \", \" + sum + \", \" + time + \")\"\n}"}
{"id":"2a7ca3b7-9684-48bf-ae27-d88d6662b87e","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class CampaignRecord(val campaignId: Int, val campaignName: String, val goal: Double, val raised: Double) {\n  override def equals(other: Any): Boolean = other match {\n    case c: CampaignRecord =>\n      campaignId == c.campaignId && campaignName == c.campaignName && goal == c.goal && raised == c.raised\n    case _ => false\n  }\n}"}
{"id":"736af2d0-e37e-4ed6-8e36-3c070b8c218b","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class Disbursement(val orgId: Int, val campaignRef: Int, val sumSent: Double, val dateSent: String)\nobject Disbursement {\n  def unapply(d: Disbursement): Option[(Int, Int, Double, String)] =\n    Some((d.orgId, d.campaignRef, d.sumSent, d.dateSent))\n}"}
{"id":"a438abdf-5603-4211-88a5-691039e054da","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class TeamFundraiser(val groupName: String, val leadId: Int, val linkedCampaign: Int, val participantIds: List[Int])"}
{"id":"810ef4f6-4f89-472b-9db0-06aa49bbb915","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class DonationMatch(val sponsor: String, val beneficiaryCampaign: Int, val limit: Double) {\n  override def hashCode(): Int = sponsor.hashCode + beneficiaryCampaign * 31 + limit.hashCode() * 17\n}"}
{"id":"d7d02f1e-ace6-4839-ac29-709f2b4c2c43","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class GiftAidSubmission(val linkedDonation: String, val valueClaimed: Double, val status: String)\nobject GiftAidSubmission {\n  def unapply(sub: GiftAidSubmission): Option[(String, Double, String)] =\n    Some((sub.linkedDonation, sub.valueClaimed, sub.status))\n}"}
{"id":"10882456-2d26-498b-9f57-685b78f19e40","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class DonorPaymentOption(val payerId: Int, val form: String, val payDetails: String, val preferred: Boolean)\nobject DonorPaymentOption {\n  def unapply(x: DonorPaymentOption): Option[(Int, String, String, Boolean)] =\n    Some((x.payerId, x.form, x.payDetails, x.preferred))\n}"}
{"id":"815646cf-d6eb-44fc-8b7d-da2b4394dd1c","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class SuccessStory(val relevantCampaign: Int, val narrative: List[String], val images: List[String], val releaseDate: String)\nobject SuccessStory {\n  def unapply(s: SuccessStory): Option[(Int, List[String], List[String], String)] =\n    Some((s.relevantCampaign, s.narrative, s.images, s.releaseDate))\n}"}
{"id":"926fe2d4-cf84-4ae3-b01b-7786a012e519","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"enum DonationStatus:\n  case Pending, Confirmed, Failed, Refunded\ncase class CharityTransfer(transferId: Int, status: DonationStatus, transferDate: String)"}
{"id":"af3e4bda-1a51-42c3-a0bb-45eb1299b4c3","timestamp":1746103739376,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class DonationStatusEnum private (val value: String)\nobject DonationStatusEnum {\n  val Pending = DonationStatusEnum(\"Pending\")\n  val Confirmed = DonationStatusEnum(\"Confirmed\")\n  val Failed = DonationStatusEnum(\"Failed\")\n  val Refunded = DonationStatusEnum(\"Refunded\")\n  def unapply(ds: DonationStatusEnum): Option[String] = Some(ds.value)\n}\nclass PlatformTransfer(val transferNumber: Int, val status: DonationStatusEnum, val dateOfTransfer: String)\n"}
{"id":"c7dcb629-3fac-4b71-8027-69d4dfedf10b","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class DonorProfile(fullName: String, email: String, address: String, recurring: Boolean)"}
{"id":"503cf980-32e8-48be-84ad-2e35dc127722","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class DonorInfo(val name: String, val contactEmail: String, val city: String, val anonymous: Boolean)\noverride def equals(obj: Any): Boolean = obj match {\n  case other: DonorInfo =>\n    this.name == other.name &&\n    this.contactEmail == other.contactEmail &&\n    this.city == other.city &&\n    this.anonymous == other.anonymous\n  case _ => false\n}\noverride def hashCode(): Int =\n  name.hashCode ^ contactEmail.hashCode ^ city.hashCode ^ anonymous.hashCode"}
{"id":"653a2b04-7023-4aac-961f-859cfae36708","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class CharityCampaign(title: String, description: String, targetAmount: BigDecimal, isActive: Boolean)"}
{"id":"8a8fd061-e368-4f59-a548-abc5298647f8","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class Fundraiser(val eventName: String, val organizer: String, val goal: Double)\noverride def toString(): String =\n  \"Fundraiser [eventName=\" + eventName + \", organizer=\" + organizer + \", goal=\" + goal + \"]\""}
{"id":"86dbf3b9-f079-4f3f-9e39-101e7e8d1c98","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class DonationRecord(donorName: String, charity: String, amount: BigDecimal, timestamp: Long)"}
{"id":"62b2b951-bae1-48ca-83dd-018d45e83392","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class DonationEntry(val donor: String, val recipientCharity: String, val donationAmount: Double, val epochSeconds: Long)\noverride def equals(other: Any): Boolean = other match {\n  case that: DonationEntry =>\n    this.donor == that.donor &&\n    this.recipientCharity == that.recipientCharity &&\n    this.donationAmount == that.donationAmount &&\n    this.epochSeconds == that.epochSeconds\n  case _ => false\n}\noverride def hashCode(): Int =\n  donor.hashCode + recipientCharity.hashCode +\n  donationAmount.hashCode + epochSeconds.hashCode"}
{"id":"53e45cfd-a080-4afb-9913-99f625c50a1c","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class Pledge(donorEmail: String, pledgeAmount: BigDecimal, targetCharity: String)"}
{"id":"ed38c9f1-73b2-45e3-a118-d8211ce37860","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class RecurringDonation(val donorId: Int, val charityName: String, val monthlyAmount: BigDecimal, val startMonth: String)\n"}
{"id":"020a46bb-70e3-44c4-ad0d-02d3c502f1e4","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class MatchingGift(company: String, donorEmail: String, originalAmount: BigDecimal, matchFactor: Int)"}
{"id":"61f085bc-0af1-40f9-a759-5d0773af7433","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class TransactionReference(val referenceId: String, val user: String, val amount: Double)\ndef canEqual(that: Any): Boolean = that.isInstanceOf[TransactionReference]\n"}
{"id":"2551229d-2f35-4efa-b191-efeced6959dd","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class CharityEvent(eventName: String, location: String, date: String, organizerName: String)"}
{"id":"55c06432-c2c4-4bd3-911d-9ff8bbf6a932","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class CampaignSponsor(val sponsorName: String, val sponsoredCampaign: String, val sponsoredAmount: BigDecimal)\n"}
{"id":"a6dc76cc-557e-4005-96d9-35bc931717d0","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class GiftAidSubmission(donationId: String, donorTaxStatus: String, claimAmount: BigDecimal)"}
{"id":"111f6e14-70af-4cfb-bb42-86d5c3a7d79e","timestamp":1746103760214,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class CharityBeneficiary(val beneficiaryName: String, val supportedCampaign: String, val totalReceived: BigDecimal)\noverride def toString(): String = s\"Beneficiary($beneficiaryName, $supportedCampaign, $totalReceived)\"\n"}
{"id":"a3ef0142-7eb1-4321-b4b4-9a8301fbcabf","timestamp":1746103760215,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class VolunteerApplication(volunteerName: String, event: String, accepted: Boolean)"}
{"id":"574d2a63-7216-4da3-a6b4-aea638a5eee9","timestamp":1746103760215,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class WithdrawalRequest(val requestId: String, val platformAdmin: String, val withdrawalAmount: BigDecimal)\n"}
{"id":"66a86256-ae2a-4477-b43a-d4f16c1f82b2","timestamp":1746103760215,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class DonorFeedback(donorId: Int, campaignTitle: String, feedback: String, rating: Int)"}
{"id":"d8f42392-89dc-4d4b-8c46-6481923464f4","timestamp":1746103760215,"category":"classes_for_data","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class DonationTier(val tierLabel: String, val minimumAmount: BigDecimal, val rewardDescription: String)\nobject DonationTier {\n  def unapply(dt: DonationTier): Option[(String, BigDecimal, String)] =\n    Some((dt.tierLabel, dt.minimumAmount, dt.rewardDescription))\n}"}
{"id":"3c181b7a-f172-480b-b4e1-2a0ff0c46bd9","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class LiveScoreUpdate(teamName: String, currentScore: Int, time: String)"}
{"id":"60cf1031-76b6-4572-bd19-831ec72f3310","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class ScoreEntry(val teamName: String, val score: Int, val minute: Int) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: ScoreEntry =>\n      this.teamName == that.teamName && this.score == that.score && this.minute == that.minute\n    case _ => false\n  }\n  override def hashCode: Int = (teamName, score, minute).hashCode\n  override def toString: String =\n    s\"ScoreEntry(team=$teamName, score=$score, minute=$minute)\"\n}"}
{"id":"ba2d2588-026c-4780-a8f3-30fd0fbae0d0","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class MatchSummary(homeTeam: String, awayTeam: String, homeScore: Int, awayScore: Int, status: String)"}
{"id":"32bd2a47-790a-49df-b250-33a67ed5bf3e","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class GameState(val homeTeam: String, val awayTeam: String, var isLive: Boolean) {}\n"}
{"id":"448fa60b-194f-4b3b-8a25-273887c57212","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class PlayerStat(playerName: String, goals: Int, assists: Int, yellowCards: Int)"}
{"id":"fe0deea1-2b25-402b-ba89-b15a799a701c","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class LiveEvent(val eventType: String, val description: String, val timestamp: Long) {\n  override def toString: String = s\"Event[$eventType @ $timestamp]: $description\"\n}"}
{"id":"4a177de9-5765-4d0f-971c-fbac53a37e15","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class MatchEvent(minute: Int, event: String, player: String)"}
{"id":"2ab0e49f-b63e-43c5-a699-0dd90f78b400","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class ScoreBoard(val teams: List[String], val scores: scala.collection.mutable.Map[String, Int]) {\n  def getScore(team: String): Int = scores.getOrElse(team, 0)\n}"}
{"id":"bea26fc0-7e0b-4391-9666-8585a756ce64","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class GoalUpdate(team: String, timeMinute: Int, scorer: String)"}
{"id":"61d82c21-7345-4dc5-b074-dc61b0ab6365","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"object PenaltyEvent {\n  def unapply(event: PenaltyEvent): Option[(String, Boolean)] = Some((event.player, event.converted))\n}\nclass PenaltyEvent(val player: String, val converted: Boolean)"}
{"id":"3337386a-5b09-4dd0-8273-f6ad7e019674","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class SetScore(setNumber: Int, teamAScore: Int, teamBScore: Int)"}
{"id":"cc3b1480-14d4-4322-ac5d-3db70596e6e0","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class MatchTimer(val startTime: Long, var elapsedSeconds: Int)"}
{"id":"f300d351-d6cb-446e-a9aa-ca174c645562","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class TennisMatchScore(playerOne: String, playerTwo: String, sets: List[SetScore])"}
{"id":"0d96ecc5-aa03-49cf-a7a2-4448ecff1745","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class PeriodicScore(val period: Int, var home: Int, var away: Int)\n"}
{"id":"4d8422df-b763-4ea7-8a98-656de919c892","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class SubstitutionEvent(minute: Int, team: String, playerIn: String, playerOut: String)"}
{"id":"a57c0ffe-cc0a-420b-a1c4-1e1085325c29","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class LiveSpectator(val name: String, val favoriteTeam: String)\n"}
{"id":"3cb3e34f-023c-423b-83b5-10cc8f4bfe04","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class OvertimeResult(overtimePeriod: Int, homeScore: Int, awayScore: Int)"}
{"id":"d9db4378-4e43-45a6-abad-e41cfd09cb36","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class MatchOfficial(val officialName: String, val role: String)"}
{"id":"1df80b23-9948-4d1f-8176-7844c9645236","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class RedCardEvent(minute: Int, player: String, team: String)"}
{"id":"e22992ab-e708-4b22-a0fd-e0d8f1e4604e","timestamp":1746103773770,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class ScoreChange(val matchId: String, val previousScore: Int, val newScore: Int)\n"}
{"id":"af0de37d-ec59-47d8-b817-9904629a3a55","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class MatchScore(homeTeam: String, awayTeam: String, homePoints: Int, awayPoints: Int)"}
{"id":"d3701cb7-39d1-4e2c-b249-71159a820767","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class BasketballScore(val teamName: String, val points: Int)\n{\n  override def equals(obj: Any): Boolean = obj match {\n    case that: BasketballScore =>\n      this.teamName == that.teamName && this.points == that.points\n    case _ => false\n  }\n  override def hashCode(): Int =\n    31 * teamName.hashCode + points.hashCode\n  override def toString: String = s\"BasketballScore($teamName, $points)\"\n}"}
{"id":"cc8e334e-d6e6-4553-87d7-d61e2a47c5c1","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class LiveEvent(eventType: String, moment: Int, description: String)"}
{"id":"d284b449-1e64-40eb-98ce-a206f3e51a2b","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class SoccerGoal(val minute: Int, val scoringTeam: String, val player: String)\n{\n  override def toString: String =\n    s\"SoccerGoal(minute=$minute, team=$scoringTeam, player=$player)\"\n}"}
{"id":"1c72ef20-0e67-4f04-a2c0-f245c9682ab8","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class TennisSetScore(playerA: String, playerB: String, gamesA: Int, gamesB: Int)"}
{"id":"ffe64c4b-ae66-4c12-acc0-dc7d687e9b93","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class FootballUpdate(val currentMinute: Int, val teamInLead: String)\n{\n  def canEqual(that: Any): Boolean = that.isInstanceOf[FootballUpdate]\n  override def equals(obj: Any): Boolean = obj match {\n    case that: FootballUpdate =>\n      (that canEqual this) &&\n      this.currentMinute == that.currentMinute &&\n      this.teamInLead == that.teamInLead\n    case _ => false\n  }\n  override def hashCode(): Int =\n    17 * currentMinute.hashCode + teamInLead.hashCode\n}"}
{"id":"7d81a2d8-878a-4c52-ad32-f96cd21be00d","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class CricketScore(totalRuns: Int, wickets: Int, overs: Double)"}
{"id":"ac8811f8-e23b-4cf5-a58c-197b276c158f","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class PlayerStats(val name: String, val goals: Int, val assists: Int)\nobject PlayerStats {\n  def unapply(p: PlayerStats): Option[(String, Int, Int)] =\n    Some((p.name, p.goals, p.assists))\n}"}
{"id":"331b043f-18ea-41f6-932d-f57fede274eb","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class PeriodScore(period: Int, homePoints: Int, awayPoints: Int)"}
{"id":"cd387465-d15e-40a3-b131-9fbcdbe5eb93","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class VolleyballSet(val setNumber: Int, val teamAScore: Int, val teamBScore: Int)\n{\n  override def toString = s\"VolleyballSet($setNumber, $teamAScore, $teamBScore)\"\n}"}
{"id":"51fdba98-1ed0-42cc-b808-fd7400f64463","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class GoalEvent(time: Int, team: String, scorer: String)"}
{"id":"0958d7e2-22e6-49bc-9004-52f75a2b1621","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class MatchStatus(val homeName: String, val awayName: String, val status: String)\nobject MatchStatus {\n  def unapply(m: MatchStatus): Option[(String, String, String)] =\n    Some((m.homeName, m.awayName, m.status))\n}"}
{"id":"9e34875e-230a-4a51-bb5f-e749a961ec20","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class LeaderboardEntry(team: String, points: Int, lastUpdate: Long)"}
{"id":"3898d371-087c-49f9-9e33-e13d74c4112e","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class HockeyPeriod(val period: Int, val homeGoals: Int, val awayGoals: Int)\n{\n  override def equals(obj: Any): Boolean = obj match {\n    case that: HockeyPeriod =>\n      this.period == that.period && this.homeGoals == that.homeGoals && this.awayGoals == that.awayGoals\n    case _ => false\n  }\n  override def hashCode(): Int =\n    period * 41 + homeGoals * 17 + awayGoals * 23\n}"}
{"id":"5bf2cffa-72bf-4169-84c9-824f35a3f791","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class PenaltyShootoutResult(teamA: String, teamB: String, goalsA: Int, goalsB: Int)"}
{"id":"ae637b35-82f7-4a90-86af-b4541d262cd9","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class HandballUpdate(val team: String, val currentScore: Int)\nobject HandballUpdate {\n  def unapply(u: HandballUpdate): Option[(String, Int)] =\n    Some((u.team, u.currentScore))\n}"}
{"id":"87cd8ecc-da91-4ba5-806f-2c395f317a50","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class ScoreUpdate(matchId: String, timestamp: Long, details: String)"}
{"id":"30d14b3e-9c8f-43e0-8324-75545e895326","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class BaseballInning(val inningNumber: Int, val homeRuns: Int, val awayRuns: Int)\nobject BaseballInning {\n  def unapply(i: BaseballInning): Option[(Int, Int, Int)] =\n    Some((i.inningNumber, i.homeRuns, i.awayRuns))\n}"}
{"id":"12818cea-7274-4992-8e4e-e2660115c984","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class OvertimeEvent(minute: Int, team: String, action: String)"}
{"id":"05169799-1fc3-471f-aac8-12cf7c3779b6","timestamp":1746103789065,"category":"classes_for_data","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class MatchWinner(val team: String)\n{\n  override def equals(obj: Any): Boolean = obj match {\n    case that: MatchWinner => this.team == that.team\n    case _ => false\n  }\n  override def hashCode(): Int = 71 * team.hashCode\n}"}
{"id":"f163cf08-b503-44f6-804a-5ebb17e77a9a","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Vehicle(licensePlate: String, make: String, model: String, year: Int, rentalStatus: RentalStatus)"}
{"id":"380e40c7-f54b-43c6-9813-c96f722dd956","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class FleetManager(var officeLocation: String, var vehicles: List[Vehicle])"}
{"id":"4964d260-7757-444d-99e7-2f04032b50f4","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Customer(customerId: Int, fullName: String, email: String, phoneNumber: String)"}
{"id":"617cc01b-bb8a-41a9-b21a-1ff01e9c277b","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class Reservation(val reservationId: Int, val vehicle: Vehicle, val customer: Customer, val startDate: String, val endDate: String)"}
{"id":"d3486a69-f476-45c6-a15e-549a1b9b8853","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class RentalPeriod(start: String, end: String)"}
{"id":"3863598f-d854-439a-a5a4-aa5588d5e847","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class DamageReport(val vehicle: Vehicle, val description: String, val reportedBy: String) {\n  override def equals(obj: Any): Boolean = obj match {\n    case that: DamageReport =>\n      this.vehicle == that.vehicle &&\n      this.description == that.description &&\n      this.reportedBy == that.reportedBy\n    case _ => false\n  }\n  override def hashCode(): Int =\n    vehicle.hashCode() * 31 + description.hashCode() * 17 + reportedBy.hashCode()\n}"}
{"id":"1dbc412e-fe42-4e0e-8296-68e069f926ee","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class FleetSnapshot(timestamp: Long, vehicles: List[Vehicle])"}
{"id":"ee08a898-d5f9-4320-855b-da5377b1e076","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class VehiclePricing(val vehicleType: String, val baseRate: Double) {\n  override def toString: String =\n    s\"VehiclePricing($vehicleType, $baseRate)\"\n}"}
{"id":"4112e2a4-e005-4522-96dc-e11f8ca9d330","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class RentalAgreement(agreementId: String, reservation: Reservation, terms: String)"}
{"id":"107602b0-a686-4199-96e1-b04350163a5e","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class FuelLog(val vehicle: Vehicle, val filledBy: String, val liters: Double)"}
{"id":"1a5ce6a6-943c-4d71-927c-cd55f1e494ba","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class PaymentRecord(paymentId: String, amount: Double, date: String, method: PaymentMethod)"}
{"id":"0bde0029-96f0-4a54-be12-a29bddf10ed3","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class OfficeAddress(val street: String, val city: String, val country: String)"}
{"id":"0b5bf41c-b5f1-4534-9c33-b1201a60256c","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class DriverProfile(driverLicense: String, name: String, age: Int, isActive: Boolean)"}
{"id":"68b03ec4-270f-46e4-b786-4916d531c35e","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"object Reservation {\n  def unapply(r: Reservation): Option[(Int, Vehicle, Customer, String, String)] =\n    Some((r.reservationId, r.vehicle, r.customer, r.startDate, r.endDate))\n}"}
{"id":"a756dd75-37b7-45c7-8d61-1816cee15de7","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class MaintenanceRecord(recordId: Int, vehicle: Vehicle, serviceDate: String, notes: String)"}
{"id":"0044fd48-6d2e-467c-96d9-2ed69c2a6991","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class InsuranceInfo(val vehicle: Vehicle, val provider: String, val policyNumber: String)"}
{"id":"d0169c7b-8c92-468c-98ef-f51cff6c8e23","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"enum RentalStatus {\n  case Available, Rented, UnderMaintenance, Reserved\n}"}
{"id":"b25e2e74-6431-402d-b888-266aa52cd1cd","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class CarUpgrade(val oldVehicle: Vehicle, val newVehicle: Vehicle, val upgradedBy: String)"}
{"id":"5cb5b161-97fa-4a01-9a1d-0c14fdca04fa","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class FleetBranch(branchId: Int, address: OfficeAddress, manager: String)"}
{"id":"7eb2edd5-c31c-471b-8870-2a0671fcc318","timestamp":1746103800600,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"object Vehicle {\n  def unapply(v: Vehicle): Option[(String, String, String, Int, RentalStatus)] =\n    Some((v.licensePlate, v.make, v.model, v.year, v.rentalStatus))\n}"}
{"id":"9318cdb2-3af5-4c80-ad29-761fda464c47","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Vehicle(licensePlate: String, model: String, year: Int, mileage: Int)"}
{"id":"ec8a6c29-c143-4d36-b670-cc2434143bdf","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class VehicleInfo(val licensePlate: String, val model: String, val year: Int) { override def toString = s\"VehicleInfo($licensePlate, $model, $year)\" }"}
{"id":"63e39af3-ceb3-474c-af6c-f740a6a49072","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class RentalContract(contractId: String, customerId: String, vehicleId: String, startDate: String, endDate: String)"}
{"id":"805d1845-cc0b-403a-a005-b53329b58870","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class Customer(val customerId: String, val fullName: String, val driversLicense: String) { override def equals(other: Any): Boolean = other match { case that: Customer => customerId == that.customerId && fullName == that.fullName && driversLicense == that.driversLicense case _ => false } override def hashCode: Int = customerId.hashCode ^ fullName.hashCode ^ driversLicense.hashCode }"}
{"id":"96486e3c-15a4-41a1-bd93-6379a8249a17","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class FleetManager(managerId: String, name: String, officeLocation: String)"}
{"id":"e20f74a8-63ba-415e-895f-3fb3c097add4","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class Reservation(val reservationNumber: String, val customerId: String, val vehiclePlate: String, val reservedFrom: String, val reservedTo: String) { }"}
{"id":"d39e3b9b-a67b-4a5d-8365-bb38f53961c0","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class MaintenanceRecord(recordId: String, vehiclePlate: String, servicedAt: String, description: String, cost: Double)"}
{"id":"cdff556d-a057-40dd-9785-a72a6eaafb9b","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class Branch(val branchId: String, val city: String, val capacity: Int) { override def toString: String = s\"Branch($branchId, $city, $capacity)\" }"}
{"id":"6bf43e86-01bc-442c-91a9-588ecec1eb91","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class InsuranceDetails(policyNumber: String, provider: String, startDate: String, endDate: String)"}
{"id":"2732b385-9df8-4d4e-afaa-14b683742ab7","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class PricingRule(val ruleId: String, val vehicleType: String, val baseRate: Double, val weekendSurcharge: Double) { }"}
{"id":"cc837d89-ae56-4201-9a03-654c14b52189","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Payment(paymentId: String, contractId: String, amount: Double, paidAt: String)"}
{"id":"f56e3d48-64aa-4238-ad18-ee4967b7c726","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class VehicleAssignment(val assignmentId: String, val vehicleId: String, val branchId: String, val assignedDate: String) { }"}
{"id":"ab16b0c0-c261-4070-94f1-4d1004eb6c4a","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Driver(driverId: String, name: String, licenseNumber: String, yearsLicensed: Int)"}
{"id":"eda97c6d-b54c-418a-9ae2-16dc000ab6e1","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class OptionUpgrade(val upgradeId: String, val vehiclePlate: String, val featureName: String, val additionalCost: Double) { override def equals(obj: Any): Boolean = obj match { case that: OptionUpgrade => upgradeId == that.upgradeId && vehiclePlate == that.vehiclePlate && featureName == that.featureName case _ => false } override def hashCode(): Int = upgradeId.hashCode ^ vehiclePlate.hashCode ^ featureName.hashCode }"}
{"id":"8005eef7-3e68-418f-ba9b-17e73f5de4ee","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class VehicleDamageReport(reportId: String, vehiclePlate: String, reportedOn: String, description: String, repairCost: Double)"}
{"id":"d5e0d56c-5529-41e2-8852-3087078de2de","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class RentalLocation(val locationCode: String, val address: String) { override def toString = s\"RentalLocation($locationCode, $address)\" }"}
{"id":"e19b9bdf-2a7d-4e5d-b984-407eba4b21ac","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Discount(discountId: String, description: String, percentOff: Int)"}
{"id":"efccb47d-3eb8-40c3-9116-83067537fbb0","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class FleetStatus(val statusId: String, val description: String) { }"}
{"id":"828c6557-b48c-40f3-a64e-7588328b847c","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class ReservationStatus(reservationNumber: String, status: String, updated: String)"}
{"id":"d0582850-2acb-44c3-af88-6d78fd33cfdd","timestamp":1746103814518,"category":"classes_for_data","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"object StandardOptionUpgrade { def unapply(u: OptionUpgrade): Option[(String, String, String, Double)] = Some((u.upgradeId, u.vehiclePlate, u.featureName, u.additionalCost)) }"}
{"id":"6678c47d-8859-4974-b294-d2087f876784","timestamp":1746097427115,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CustomerInfo(name: String, email: String)\n\ndef fetchCustomerInfo(customerId: String): Option[CustomerInfo] = {\n  val info = DatabaseSimulator.lookupCustomer(customerId) // may return null\n  Option(info)\n}"}
{"id":"0cf02030-a7ab-4422-a200-7ced4f7357c8","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def calculateDiscount(coupon: Option[String]): Double = {\n  coupon match {\n    case Some(code) if code == \"SAVE10\" => 10.0\n    case _ => 0.0\n  }\n}"}
{"id":"95230f45-05e2-45a6-9250-3d567922dd66","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getShippingAddress(userId: String): String = {\n  val address = LegacyAddressBook.findAddress(userId)\n  if (address != null) address else \"Address not found\"\n}"}
{"id":"4f63f62b-6d11-49dc-a778-ce48763bff55","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def applyPromoCode(promo: String): Option[Double] = {\n  Some(promo).filter(_ == \"FREESHIP\").map(_ => 0.0)\n}"}
{"id":"50fd5f0b-395c-47d6-9584-5abb5b580d05","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def updateInventory(productId: String, quantity: Int): Boolean = {\n  val inventoryService = InventoryRemoteService()\n  val result = inventoryService.reserveStock(productId, quantity)\n  if (result != null) result.isSuccessful else false\n}"}
{"id":"07bb70cb-9a92-4508-9e6e-0e20826f4cde","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def safeGetCouponValue(code: String): Option[Double] = {\n  Option(CouponSystem.getValue(code)).filter(_ > 0)\n}"}
{"id":"bfe51e62-ec09-4c63-91a3-0d41f2ae7fad","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getOrderNote(orderId: String): String = {\n  val note = OrderDatabase.fetchOrderNote(orderId)\n  if (note == null) \"No note provided\"\n  else note\n}"}
{"id":"f696bbd5-f722-4372-8c44-4d644dd23c94","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class Cart(items: List[String])\n\ndef getItemCount(cart: Option[Cart]): Int = {\n  cart.map(_.items.size).getOrElse(0)\n}"}
{"id":"2df9ef09-d2f5-4ba1-b94b-de7b9d36a988","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def checkPromoEligibility(customerId: String): Option[String] = {\n  val promo = CustomerLoyaltyService.bestOffer(customerId)\n  Option(promo)\n}"}
{"id":"4fdbfbdf-38ad-428f-b6a7-0661339fe9d7","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getGiftWrapMessage(itemId: String): String = {\n  val message = GiftWrapDB.getMessage(itemId)\n  if (message != null) message else \"No gift message\"\n}"}
{"id":"c6f6f6f3-5d85-4e2f-a633-2a48e63e4cb4","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class PaymentInfo(cardNumber: String, expiry: String)\n\ndef safePaymentInfo(userId: String): Option[PaymentInfo] = {\n  Option(JavaPayAPI.retrievePayment(userId))\n}"}
{"id":"3917aa8f-b3b9-4994-a7a7-f9e68bbe4579","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def assignShippingPartner(orderId: String): String = {\n  val partner = ShippingAPI.selectPartner(orderId)\n  if (partner == null) \"DefaultCarrier\"\n  else partner\n}"}
{"id":"c461e329-2dac-4689-be26-5dcfac37d00f","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def giftNoteForOrder(order: Option[Order]): String = {\n  order.flatMap(_.giftNote).getOrElse(\"No gift note\")\n}"}
{"id":"6b3faf40-80d4-4ac6-8bb8-4c0581ee7fee","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def findOrderStatus(orderId: String): String = {\n  val status = ExternalOrderTracker.getStatus(orderId)\n  if (status != null) status else \"Unknown\"\n}"}
{"id":"973b3c0e-d24f-4c7b-9225-de174ea4c1be","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def fetchDiscount(userId: String): Option[Double] = {\n  Option(JavaDiscountService.discountForUser(userId))\n}"}
{"id":"5dc92fc0-e0c3-4bc0-a39c-d44136ff10e6","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def retrieveLoyaltyPoints(customerId: String): Int = {\n  val points = LoyaltyEngine.queryPoints(customerId)\n  if (points != null) points.toInt else 0\n}"}
{"id":"06733d59-2f9c-41a8-aaa8-5b6028be7c43","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def cartSubtotal(cart: Option[ShoppingCart]): Double = {\n  cart.flatMap(_.subtotal).getOrElse(0.0)\n}"}
{"id":"44181cab-af32-4f86-aa16-d3730ed3cce8","timestamp":1746097427117,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def refundStatus(transactionId: String): String = {\n  val status = RefundModule.checkStatus(transactionId)\n  if (status == null) \"Unavailable\" else status\n}"}
{"id":"69fe59fd-b1e2-4640-b7a4-73ffd08c3536","timestamp":1746097427117,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def defaultBillingAddress(billingOption: Option[String]): String = {\n  billingOption.fold(\"No billing address\")(identity)\n}"}
{"id":"46ac9d04-c2fe-42db-b0f9-ac8f8112db13","timestamp":1746097427117,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def resolveGiftCardBalance(cardNumber: String): java.lang.Double = {\n  val balance = JavaGiftCardService.getBalance(cardNumber)\n  if (balance == null) 0.0 else balance\n}"}
{"id":"f82d2c7e-a069-4c43-bca1-e22d06f99e4a","timestamp":1746097449329,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class OrderSummary(orderId: String, totalAmount: Double)\ndef findOrderSummary(orderId: String): Option[OrderSummary] = {\n  val orderDbResult: OrderSummary | Null = legacyOrderDbFetch(orderId)\n  Option(orderDbResult)\n}\ndef legacyOrderDbFetch(orderId: String): OrderSummary | Null =\n  if orderId == \"A100\" then OrderSummary(\"A100\", 125.0) else null"}
{"id":"a1bef7da-ca70-42eb-b650-615adc1bfdc5","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def validateCoupon(couponCode: String): String = {\n  val validCoupon = oldCouponSystemCheck(couponCode)\n  if(validCoupon != null) validCoupon else null\n}\ndef oldCouponSystemCheck(code: String): String | Null =\n  if code == \"SAVE10\" then \"Valid\" else null"}
{"id":"75977252-ce87-4c38-85ea-b511d1255d6f","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class PaymentStatus(status: String)\ndef fetchPaymentStatus(orderId: String): Option[PaymentStatus] =\n  Option(getPaymentStatusFromService(orderId))\ndef getPaymentStatusFromService(orderId: String): PaymentStatus | Null =\n  if orderId.nonEmpty then PaymentStatus(\"Paid\") else null"}
{"id":"6dd86934-4d29-4645-9bc4-fc542bfdd6f3","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getShippingProvider(orderId: String): String = {\n  val provider = fetchLegacyShippingProvider(orderId)\n  if (provider == null) \"Unknown Provider\"\n  else provider\n}\ndef fetchLegacyShippingProvider(orderId: String): String | Null =\n  if orderId == \"EXPRESS\" then \"DHL\" else null"}
{"id":"1a6e9d53-6dde-4272-b7af-3ba0a8a97507","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class Address(line1: String, city: String)\ndef toOptionAddress(line1: String | Null, city: String | Null): Option[Address] =\n  (Option(line1), Option(city)) match\n    case (Some(l), Some(c)) => Some(Address(l, c))\n    case _ => None"}
{"id":"541661ee-45be-464d-82ac-85936a7977bb","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getBillingEmail(customerId: String): String = {\n  val email = databaseEmailLookup(customerId)\n  if(email != null) email else null\n}\ndef databaseEmailLookup(id: String): String | Null =\n  if id == \"C200\" then \"customer@email.com\" else null"}
{"id":"c6f976ce-6ebe-4b5b-9b55-646c4e1232cc","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def calculateDiscount(optionalDiscount: Option[Double]): Double =\n  optionalDiscount.getOrElse(0.0)"}
{"id":"6a3dbb0a-9bcc-42a3-b452-1a15a390120d","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"case class CartItem(name: String, price: Double)\ndef legacyCartItemLookup(id: String): CartItem | Null =\n  if id == \"SKU100\" then CartItem(\"Shirt\", 29.99) else null\ndef addItemToCart(itemId: String): CartItem = {\n  val item = legacyCartItemLookup(itemId)\n  if(item != null) item else null\n}"}
{"id":"e04901b7-1ff9-4754-9f27-ecfba48c3a30","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CheckoutSession(id: String)\ndef getCheckoutSession(token: String | Null): Option[CheckoutSession] =\n  Option(token).map(CheckoutSession(_))"}
{"id":"8001ed50-9564-4ec9-b848-c3390d963861","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getGiftMessage(orderId: String): String = {\n  val msg = fetchGiftMessageFromOldSystem(orderId)\n  if(msg == null) \"\" else msg\n}\ndef fetchGiftMessageFromOldSystem(orderId: String): String | Null =\n  if orderId == \"O999\" then \"Happy Birthday!\" else null"}
{"id":"89845e67-b3cc-4101-a294-adde4c1f903a","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def safeLegacyPaymentIdFetch(ref: String): Option[String] =\n  Option(legacyPaymentReference(ref))\ndef legacyPaymentReference(ref: String): String | Null =\n  if ref.startsWith(\"PAY\") then s\"PAY-${ref}\" else null"}
{"id":"142ab3ca-1932-48f8-9e39-ff28db5a137a","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getLoyaltyPoints(userId: String): Integer = {\n  val result = oldPointsSystem(userId)\n  if(result != null) result else null\n}\ndef oldPointsSystem(id: String): Integer | Null =\n  if id == \"U888\" then Integer.valueOf(120) else null"}
{"id":"7790633a-7642-4241-b976-e32104dd9669","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def totalCartPrice(items: List[Option[Double]]): Double =\n  items.flatten.sum"}
{"id":"62050c32-0072-49cf-9c0d-b998a8b5c6de","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class Promo(description: String)\ndef matchPromoCode(code: String): Promo | Null =\n  if code == \"BIGSALE\" then Promo(\"Big Sale 50% OFF\") else null\ndef getPromoOption(code: String): Option[Promo] =\n  Option(matchPromoCode(code))"}
{"id":"9043846a-d0d6-4866-91a6-4717c209168d","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getReviewerName(reviewId: String): String = {\n  val name = fetchReviewerName(reviewId)\n  if(name == null) \"Anonymous\" else name\n}\ndef fetchReviewerName(reviewId: String): String | Null =\n  if reviewId == \"REV1\" then \"Prime Buyer\" else null"}
{"id":"2de4b4eb-f2d8-475e-b1fd-6f98665b8ecd","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def applyVoucher(code: Option[String]): String =\n  code.fold(\"No voucher applied!\")(c => s\"Voucher $c applied\")"}
{"id":"f2944c5c-d8fc-4b02-a6da-a9b9ef5dea4a","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def findContactNumber(orderId: String): String = {\n  val contact = javaStyleFindContact(orderId)\n  if (contact != null) contact else null\n}\ndef javaStyleFindContact(orderId: String): String | Null =\n  if orderId == \"Z123\" then \"+1234567890\" else null"}
{"id":"01729523-d07a-4fdf-92f2-6b29de8ab65b","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def getShippingTrackingUrl(trackingOption: Option[String]): String =\n  trackingOption.map(t => s\"https://tracking.example.com/$t\").getOrElse(\"No tracking available\")"}
{"id":"003313ac-591d-43fb-8f0f-47d6081cf10e","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getCustomerLoyaltyTier(customerId: String): String = {\n  val tier = legacyTierLookup(customerId)\n  if (tier == null) \"\" else tier\n}\ndef legacyTierLookup(id: String): String | Null =\n  if id == \"VIP\" then \"Gold\" else null"}
{"id":"dc302fef-3c41-49d1-b69c-89d3c4caefac","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def getAppliedCoupons(coupons: List[Option[String]]): List[String] =\n  coupons.flatten"}
{"id":"d72aeecd-cb3b-4fda-9d39-adf67e15cd8b","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getOrderGiftWrapStatus(orderId: String): String = {\n  val status = oldGiftWrapLookup(orderId)\n  if (status != null) status else null\n}\ndef oldGiftWrapLookup(id: String): String | Null =\n  if id == \"GIFT\" then \"Yes\" else null"}
{"id":"5de9544f-8d4f-4942-a7d6-31351f147a04","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class AccountDetails(accountNumber: String, balance: Double)\ndef findAccountDetails(accountId: String): Option[AccountDetails] = {\n  val dbResult: AccountDetails | Null = legacyFetchAccount(accountId)\n  Option(dbResult)\n}"}
{"id":"76d32f62-d5f3-4a1e-80e6-8adf615c58fc","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class TransferReceipt(val referenceId: String, val status: String)\ndef sendMoneyViaJava(toAccount: String, amount: Double): TransferReceipt = {\n  val receipt = JavaBankingSystem.initiateTransfer(toAccount, amount)\n  if (receipt == null) new TransferReceipt(\"000\", \"FAILED\") else receipt\n}"}
{"id":"82f8ca90-cda5-4d64-846b-fd661565b71a","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def getSessionToken(userId: String): Option[String] = {\n  val token: String | Null = ExternalAuth.generateSessionTokenForUser(userId)\n  Option(token)\n}"}
{"id":"7aae52f5-fee2-4ae7-9235-824872cf0e06","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class Transaction(id: String, amount: Double)\ndef latestTransaction(userId: String): Option[Transaction] = {\n  Option(fetchTransactionFromDb(userId))\n}"}
{"id":"cf659b23-859c-4505-996e-cb87918168f1","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class UserProfile(val email: String, val phone: String)\ndef getUserProfile(userId: String): UserProfile = {\n  val result = LegacyUserDb.fetchProfile(userId)\n  if (result != null) result else new UserProfile(\"\", \"\")\n}"}
{"id":"d6505b58-bc99-487b-890d-3c1becd319e4","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def accountHolderName(accountId: String): String = {\n  val value: String | Null = LegacyAccount.findName(accountId)\n  Option(value).getOrElse(\"Unknown Holder\")\n}"}
{"id":"319318d1-da9d-4f5a-9a13-6121977416c5","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def safeCardNumber(cardNumber: String | Null): Option[String] = Option(cardNumber)\ndef maskCardNumber(cardNumber: String | Null): String = {\n  safeCardNumber(cardNumber).map(_ => \"**** **** **** 1234\").getOrElse(\"No Card\")\n}"}
{"id":"3163cd69-aa0c-4685-aa12-3f671323ed5d","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def upgradeToPremium(userId: String): Boolean = {\n  val result = JavaPremium.upgradeUser(userId)\n  if (result == null) false else true\n}"}
{"id":"080977f1-75f2-4e43-bde0-14941d886f2d","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def findPayee(payeeId: String): Option[String] = {\n  Option(PayeeDirectory.findNameById(payeeId))\n}"}
{"id":"6eea6a65-275d-4c02-a88c-0902848005b1","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"case class TransactionMessage(message: String)\ndef lastTransactionMessage(accountId: String): String = {\n  val msg = LegacyTransactions.lastMessage(accountId)\n  if (msg == null) \"No recent transaction\" else msg\n}"}
{"id":"c38208d9-af31-4031-bb6d-e5e804025ce9","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def mobileDeviceId(userSession: UserSession): Option[String] = Option(userSession.deviceId)"}
{"id":"982cd16f-ec74-4078-8cfe-b5d02dbc6b50","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def getLoanStatus(applicationId: String): String = {\n  val status = JavaLoanApi.checkStatus(applicationId)\n  if (status != null) status else \"Processing\"\n}"}
{"id":"70c938d1-67d6-42ad-aa0d-0900d424f1a2","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def maybeCustomerEmail(maybeEmail: String | Null): Option[String] = Option(maybeEmail)\ndef safeUppercaseEmail(email: String | Null): String = {\n  Option(email).map(_.toUpperCase).getOrElse(\"Email Not Provided\")\n}"}
{"id":"748c0dbd-3dbb-4578-b310-43f3d1a22ade","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def fetchAccountAlias(aliasId: String): String = {\n  val alias = LegacyAliasDirectory.retrieve(aliasId)\n  if (alias != null) alias else \"Unknown Alias\"\n}"}
{"id":"f4cc76a2-c766-4677-8593-dbbc9a415cef","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def optionalBranchCode(branch: Null | String): Option[String] = Option(branch)\ndef uppercaseBranchCode(branch: String | Null): String = {\n  Option(branch).fold(\"No Branch\")(_.toUpperCase())\n}"}
{"id":"a29ddcaa-18e5-4b78-9dcd-171fbc2f0b46","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def resetDeviceBinding(userId: String): Boolean = {\n  val result = DeviceSecurity.legacyUnbind(userId)\n  if (result == null) false else result\n}"}
{"id":"28302d0e-8940-4385-9823-454992a11bf3","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def accountStatus(accountData: Null | String): Option[String] = Option(accountData).filter(_.nonEmpty)"}
{"id":"467e3ab8-a344-4675-8d44-c0ae02350beb","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def fetchOtp(phoneNumber: String): String = {\n  val code = JavaOtpService.getCode(phoneNumber)\n  if (code == null) \"OTP not available\" else code\n}"}
{"id":"163f5e10-ad66-4052-a45d-18b9150c1548","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def findTransactionById(transactionId: String): Option[Double] = {\n  val amt: java.lang.Double | Null = JavaTransactionHistory.fetchAmount(transactionId)\n  Option(amt).map(_.doubleValue)\n}"}
{"id":"936d2e9f-6274-435c-9ed1-40e05129a0e8","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def getCashbackAmount(purchaseId: String): Double = {\n  val amount = CashbackService.retrieveAmount(purchaseId)\n  if (amount == null) 0.0 else amount\n}"}
{"id":"d6bc8bfc-02a4-4cad-b80d-8ae8e723c2b8","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class CustomerProfile(id: Int, email: String)\ndef findEmailByCustomerId(customerId: Int, profiles: List[CustomerProfile]): Option[String] =\n  profiles.find(_.id == customerId).map(_.email)"}
{"id":"19613aa0-bfc4-4fc9-84a4-62b62e43444f","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class TransactionDetails(val amount: Double, val description: String)\ndef getTransactionDescription(details: TransactionDetails): String =\n  if details != null then details.description else \"No details available\""}
{"id":"052734e0-72ba-46f4-a413-52c182aa01e8","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def fetchMobileTokenFromApi(apiResponse: String | Null): Option[String] =\n  Option(apiResponse).filter(_.nonEmpty)"}
{"id":"a2ad3a0d-ab6e-4bc2-a4ba-df91e1816822","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object SessionTokenProvider {\n  def getSessionToken: String = null // Simulate token retrieval failure\n}\ndef isUserSessionValid: Boolean =\n  if SessionTokenProvider.getSessionToken != null then true else false"}
{"id":"a9e09965-4687-4e87-bbc6-8c92e858cd11","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def phoneNumberOrDefault(userPhone: String | Null): String =\n  Option(userPhone).getOrElse(\"N/A\")"}
{"id":"b789a47c-899d-408c-a913-373b787e7189","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class AccountSummary(ref: String)\ndef getSummaryReference(summary: AccountSummary): String =\n  if summary == null then \"Summary not found\" else summary.ref"}
{"id":"8ece7862-e966-4999-ab9c-a47becadaa1b","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class Beneficiary(id: Int, nickname: Option[String])\ndef displayBeneficiaryNickname(beneficiary: Beneficiary): String =\n  beneficiary.nickname.getOrElse(\"(No Nickname)\")"}
{"id":"ffe44171-362e-4e4a-a2af-d047fd62f961","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def getLoanLimitFromApi(apiReply: String): String =\n  if apiReply == null then \"Loan limit unavailable\" else apiReply"}
{"id":"d51ae117-9447-4d0f-a4f0-7f636210e407","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class UserProfile(id: Int, email: String | Null)\ndef safeEmail(profile: UserProfile): Option[String] =\n  Option(profile.email)"}
{"id":"c1cf8a5b-5a5f-488d-9816-82223f0a241f","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object CardLookup {\n  def javaCardLookup(cardNumber: String): String = null // simulate missing card\n}\ndef getCardOwner(cardNumber: String): String =\n  val owner = CardLookup.javaCardLookup(cardNumber)\n  if owner != null then owner else \"Unknown owner\""}
{"id":"3f92b15f-807d-4c67-af7e-2654b44714c6","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def transactionStatusText(status: Option[String]): String =\n  status.fold(\"Status missing!\")(_ + \" in process\")"}
{"id":"53d4568c-d747-4c4f-8ca9-6a141bc07cec","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def getBankBranchInfo(branch: String): String =\n  if branch == null then \"Branch unknown\" else s\"Branch: $branch\""}
{"id":"986a5a6f-dafe-4b39-a83e-5255b8973e2c","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class AppNotification(content: String)\ndef notificationPreview(notification: Option[AppNotification]): String =\n  notification.map(_.content).getOrElse(\"No notification to show\")"}
{"id":"42ef5907-b8ce-48b6-9af4-2595ada077f0","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def safeFindAccountNumber(account: String | Null): Option[String] =\n  Option(account).filter(_.length > 6)"}
{"id":"bf5f7da3-952d-48e9-b0d6-630c47ea5961","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class CreditScore(val value: Integer)\ndef creditScoreMessage(creditScore: CreditScore): String =\n  if creditScore != null && creditScore.value != null then s\"Score: ${creditScore.value}\" else \"No score available\""}
{"id":"bb4f0c2f-5f52-4f1b-86e9-d7ef4ec188ca","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def maybePinCode(rawPin: String | Null): Option[Int] =\n  Option(rawPin).flatMap(pin => scala.util.Try(pin.toInt).toOption)"}
{"id":"37ad4c79-a6c3-4bef-9546-bb442d38b22b","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class DeviceInfo(val platform: String)\ndef devicePlatformOrDefault(info: DeviceInfo): String =\n  if info == null then \"(unknown)\" else info.platform"}
{"id":"4d07a7e5-cccf-425a-b5dd-9042af1f6bca","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def getLoanApplicationId(rawId: String | Null): Option[String] =\n  Option(rawId).filter(_.forall(_.isDigit))"}
{"id":"5600d820-3ddb-4c2c-ad2b-e6f043e930f0","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object PushMessageService {\n  def fetchMessageForUser(userName: String): String = null\n}\ndef displayPushMessage(user: String): String =\n  val msg = PushMessageService.fetchMessageForUser(user)\n  if msg != null then msg else \"No message found\""}
{"id":"f52cebd7-409d-4b80-a7bd-614c2516a1a8","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class DocumentUpload(fileName: String | Null)\ndef describeUpload(upload: DocumentUpload): Option[String] =\n  Option(upload.fileName).map(name => s\"Uploaded: $name\")"}
{"id":"62659d22-0be6-4334-94b9-398c3cf1bc45","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class VirtualAppointment(patientId: String, doctorId: String, slot: String)\ndef findVirtualAppointmentById(appointmentId: String): Option[VirtualAppointment] =\n  Option(getJavaAppointmentById(appointmentId))\ndef getJavaAppointmentById(appointmentId: String): VirtualAppointment | Null =\n  if appointmentId == \"A100\" then VirtualAppointment(\"P157\", \"D36\", \"10AM-11AM\") else null"}
{"id":"26f3106c-855a-433a-a3f9-040e20531f61","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def findPatientNameOrEmpty(patientId: String, lookup: String => String | Null): String =\n  Option(lookup(patientId)).getOrElse(\"\")"}
{"id":"52e22ca2-17f5-4f88-92f9-0c927d98a207","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class Doctor(name: String, specialty: String)\ndef maybeDoctor(specialty: String): Option[Doctor] =\n  Option(unsafeJavaFindDoctor(specialty))\ndef unsafeJavaFindDoctor(s: String): Doctor | Null =\n  if s == \"Dermatology\" then Doctor(\"Green\", s) else null\nval result = maybeDoctor(\"Dermatology\").map(_.name).getOrElse(\"No Doctor\")"}
{"id":"98413e92-0bfc-486d-b4db-4ca5fee299bd","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def getAvailableSlots(doctorId: String): List[String] | Null =\n  if doctorId == \"D501\" then List(\"9AM\", \"10AM\") else null\ndef printFirstSlot(doctorId: String): Unit =\n  val slotsOpt = Option(getAvailableSlots(doctorId))\n  println(slotsOpt.flatMap(_.headOption).getOrElse(\"No slots\"))"}
{"id":"b29c4c44-da63-4fb9-9c73-512d4b86c1fd","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def validateAppointmentCode(code: String | Null): Option[String] =\n  Option(code).filter(_.startsWith(\"APT\"))"}
{"id":"6db222b4-6d05-42c6-9df1-1ce70e622704","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def safeRescheduleSlot(slot: String | Null): Option[String] =\n  Option(slot).filter(_.nonEmpty)"}
{"id":"108850cd-93a0-45f5-9f5e-14aaf1696ca8","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class ConsultationSummary(appointmentId: String, notes: String)\ndef safeSummaryLookup(lookup: String => ConsultationSummary | Null, appointmentId: String): Option[ConsultationSummary] =\n  Option(lookup(appointmentId))"}
{"id":"96d9b74b-c2ea-4b0b-96d8-364ed6381560","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def patientPhoneOption(phoneFromLegacy: String | Null): Option[String] =\n  Option(phoneFromLegacy).map(_.trim).filter(_.nonEmpty)"}
{"id":"8e807140-7817-464e-bfad-4708bb6ac407","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def joinTelemedicineSession(sessionCode: String | Null): Option[String] =\n  Option(sessionCode).flatMap(code =>\n    if code.startsWith(\"TM\") then Some(code) else None\n  )"}
{"id":"76a0b71c-4f7e-4ab3-8047-669577a83d54","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AppointmentSlot(time: String)\ndef selectPreferredSlot(slots: List[AppointmentSlot]): Option[AppointmentSlot] =\n  slots.find(_.time.endsWith(\"PM\"))"}
{"id":"c178a9c1-b0ce-4244-b3be-b5648433d424","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"case class Appointment(patientId: String, doctorId: String, time: String)\ndef fetchAppointment(appointmentId: String): Appointment | Null =\n  if appointmentId == \"APT123\" then Appointment(\"P123\", \"D111\", \"2PM-3PM\") else null\ndef printAppointment(appointmentId: String): Unit =\n  val appointment = fetchAppointment(appointmentId)\n  if(appointment != null)\n    println(s\"Appointment for ${appointment.patientId} at ${appointment.time}\")\n  else\n    println(\"Appointment not found\")"}
{"id":"7852d2f4-544f-48f5-a176-1ba21665e5cc","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getDoctorNote(appointmentId: String): String | Null =\n  if appointmentId == \"A567\" then \"Follow up in one week.\" else null\ndef printDoctorNote(appointmentId: String): Unit =\n  val note = getDoctorNote(appointmentId)\n  if(note == null) println(\"No doctor note available.\")\n  else println(note)"}
{"id":"3124e93d-5d04-4cb1-888d-07726710e4ab","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def checkLegacyPatientEntry(patientId: String): String | Null =\n  if patientId == \"P888\" then \"John Doe\" else null\ndef printPatientName(patientId: String): Unit =\n  if(checkLegacyPatientEntry(patientId) != null)\n    println(checkLegacyPatientEntry(patientId))\n  else\n    println(\"Unknown patient\")"}
{"id":"d99d2341-6c3f-4396-bb26-66df8b19a868","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"case class SessionLink(url: String)\ndef getSessionLinkOrNull(sessionId: String): SessionLink | Null =\n  if sessionId == \"S1001\" then SessionLink(\"https://telehealth/join/S1001\") else null\ndef showSessionLink(sessionId: String): Unit =\n  val link = getSessionLinkOrNull(sessionId)\n  if(link == null) println(\"No valid session.\")\n  else println(link.url)"}
{"id":"b3131b36-8a37-4a55-a62c-251ee57f1ea8","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def retrieveAvailableTimeSlot(doctorId: String): String | Null =\n  if doctorId == \"D215\" then \"11AM-12PM\" else null\ndef scheduleForAvailableTime(doctorId: String): String =\n  val slot = retrieveAvailableTimeSlot(doctorId)\n  if(slot != null) s\"Scheduled at $slot\" else \"No slots available\""}
{"id":"c07e156e-6c51-4b9e-a41c-ae3313db4c10","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getPatientEmailOrNull(patientId: String): String | Null =\n  if patientId == \"P404\" then null else \"someone@example.com\"\ndef emailGreeting(patientId: String): String =\n  val email = getPatientEmailOrNull(patientId)\n  if(email == null) \"No email on record\" else s\"Email: $email\""}
{"id":"1809fc1f-5454-44b7-af46-2d6aa7016b62","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def nextAvailableTelehealthSlotOrNull(doctorId: String): String | Null =\n  doctorId match\n    case \"D792\" => \"4PM\"\n    case _ => null\ndef confirmSlot(doctorId: String): Unit =\n  val slot = nextAvailableTelehealthSlotOrNull(doctorId)\n  if(slot == null) println(\"No telehealth slot\")\n  else println(s\"Slot: $slot\")"}
{"id":"da3d649c-394a-43c8-80d3-fcb813732e72","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def updateAppointmentStatusToCompleted(appointmentId: String): String | Null =\n  if appointmentId == \"A55\" then \"completed\" else null\ndef isAppointmentCompleted(appointmentId: String): Boolean =\n  val status = updateAppointmentStatusToCompleted(appointmentId)\n  status != null && status == \"completed\""}
{"id":"fc0cd61d-8e01-4a4c-96c8-0fcb5348293a","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getAppointmentDetailsFromDB(appointmentId: String): String | Null =\n  if appointmentId == \"A888\" then \"Patient: P888, Time: 5PM\" else null\ndef showDetailsIfExists(appointmentId: String): Unit =\n  val details = getAppointmentDetailsFromDB(appointmentId)\n  if(details != null) println(details) else println(\"No details found\")"}
{"id":"3db68a15-acf4-446e-9395-75c1f5a5288b","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def doctorSpecialtyOrNull(doctorId: String): String | Null =\n  if doctorId == \"D302\" then null else \"Pediatrics\"\ndef specialtyInfo(doctorId: String): String =\n  val spec = doctorSpecialtyOrNull(doctorId)\n  if(spec == null) \"Specialty not listed\" else s\"Specialty: $spec\""}
{"id":"7fa5e2d1-3285-4b78-8de4-ab9c44ce8834","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class PatientProfile(name: String, contact: String)\ndef getPatientProfile(details: String): Option[PatientProfile] =\n  Option(retrievePatientProfileJavaStyle(details))\n\ndef retrievePatientProfileJavaStyle(details: String): PatientProfile =\n  if details == \"\" then null else PatientProfile(details, \"123-456\")"}
{"id":"48533481-d089-4489-8c8c-ab342b936e23","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getNextAppointment(patientId: String): String = {\n  val appointment = fetchAppointmentFromDb(patientId)\n  if (appointment != null) appointment else \"No appointment found\"\n}\n\ndef fetchAppointmentFromDb(patientId: String): String =\n  if (patientId == \"\") null else \"2024-07-01 09:00\""}
{"id":"c1e131c8-de53-4901-892c-653372a13950","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def verifyProviderAvailability(providerId: String): Option[Boolean] =\n  Option(javaProviderAvailable(providerId)).map(_.booleanValue)\n\ndef javaProviderAvailable(id: String): java.lang.Boolean =\n  if id == \"dr42\" then java.lang.Boolean.TRUE else null"}
{"id":"1bb349fc-37ec-4a28-81fc-f7d35f0cc33d","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def checkAppointmentSlot(slotId: String): Boolean = {\n  val status = lookupSlotJavaStyle(slotId)\n  if (status != null) status.booleanValue else false\n}\n\ndef lookupSlotJavaStyle(slotId: String): java.lang.Boolean =\n  if (slotId.startsWith(\"open\")) java.lang.Boolean.TRUE else null"}
{"id":"5687d7a6-b860-4684-b321-bde0462a2260","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def lookupScheduledTime(appointmentId: String): Option[String] =\n  Option(getTimeFromJavaSystem(appointmentId))\n\ndef getTimeFromJavaSystem(appointmentId: String): String =\n  if appointmentId.isEmpty then null else \"2024-09-22T14:00\""}
{"id":"6a45ab8c-b019-48d9-892e-b29469eb84f4","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class Appointment(patient: String, time: String)\ndef scheduleAppointment(patient: String, time: String): Option[Appointment] =\n  Option(if patient.isEmpty || time.isEmpty then null else Appointment(patient, time))"}
{"id":"50f91139-2e32-4fd5-a51d-906625c26609","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def findRoomForSession(sessionId: String): String = {\n  val room = fetchRoomFromDb(sessionId)\n  if (room == null) \"No room available\" else room\n}\n\ndef fetchRoomFromDb(sessionId: String): String =\n  if (sessionId == \"123\") null else \"Room-9\""}
{"id":"23c905be-0d11-4b53-bd34-a60effafcfe5","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def getProviderSpecialty(providerId: String): Option[String] =\n  Option(hypotheticalJavaProviderSpecialty(providerId))\n\ndef hypotheticalJavaProviderSpecialty(id: String): String =\n  if id == \"\" then null else \"Cardiology\""}
{"id":"47cef92f-761b-4910-a770-f19dd28aea89","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def isUserRegistered(userId: String): Boolean = {\n  val registration = javaCheckRegistration(userId)\n  registration != null && registration\n}\n\ndef javaCheckRegistration(u: String): java.lang.Boolean =\n  if (u == \"u2\") null else java.lang.Boolean.TRUE"}
{"id":"87371ecd-6c58-43c0-b60f-6fd301642b66","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def getAppointmentStatus(appointmentId: String): Option[String] =\n  Option(retrieveStatusFromJava(appointmentId))\n\ndef retrieveStatusFromJava(id: String): String =\n  if id == \"badId\" then null else \"Confirmed\""}
{"id":"9096a561-a2ca-473e-bdd7-4cdc49e0eacf","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"class InsuranceVerifier:\n  def verifyCoverage(patientId: String): Option[String] =\n    Option(javaCoverageCheck(patientId)).filter(_.nonEmpty)\n\n  def javaCoverageCheck(id: String): String =\n    if id == \"\" then null else \"Covered\""}
{"id":"961c0132-87f7-495e-afee-1adfdcde303e","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def setNotificationPreference(userId: String, preference: String): String = {\n  val saved = savePreferenceInJava(userId, preference)\n  if (saved == null) \"Error\" else saved\n}\n\ndef savePreferenceInJava(u: String, p: String): String =\n  if (p.nonEmpty) \"Saved\" else null"}
{"id":"1ab8281c-3e38-4cdf-8d9a-1b216fe7e580","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class ScheduleSlot(time: String, available: Boolean)\ndef nextAvailableSlot(possibleSlots: List[ScheduleSlot]): Option[String] =\n  possibleSlots.find(_.available).map(_.time)"}
{"id":"2ce09cab-3375-41a8-86fa-fd91ab10a923","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getLastConsultationNote(patientId: String): String = {\n  val note = fetchConsultationNoteJava(patientId)\n  if (note != null) note else \"No notes\"\n}\n\ndef fetchConsultationNoteJava(pid: String): String =\n  if (pid == \"none\") null else \"Follow up in two weeks.\""}
{"id":"cd0e0075-215b-485a-99ee-5293424d6bf5","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def findProviderBySpecialty(specialty: String): Option[String] =\n  val provider = javaProviderLookup(specialty)\n  Option(provider)\n\ndef javaProviderLookup(s: String): String =\n  if s == \"Cardiology\" then \"Dr. Patel\" else null"}
{"id":"c0014a07-9b00-49af-a27f-63ca36c292ca","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getVideoLinkForSession(sessionId: String): String = {\n  val link = simulateJavaVideoLink(sessionId)\n  if (link == null) \"Unavailable\" else link\n}\n\ndef simulateJavaVideoLink(sid: String): String =\n  if (sid == \"abc\") null else \"https://video.telemed/sid\""}
{"id":"63a6b886-ac1b-4a1f-9f5c-12bb6d2a0a4c","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def searchAvailableAppointments(patientId: String): List[String] =\n  Option(hypotheticalJavaAvailableSlots(patientId)).map(_.toList).getOrElse(Nil)\n\ndef hypotheticalJavaAvailableSlots(pid: String): Array[String] =\n  if pid == \"\" then null else Array(\"09:00\", \"13:00\")"}
{"id":"6786647f-95cd-4146-8518-294fc3a8a116","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def checkIfSessionStarted(sessionId: String): Boolean = {\n  val started = javaSessionStarted(sessionId)\n  if (started != null) started.booleanValue else false\n}\n\ndef javaSessionStarted(sid: String): java.lang.Boolean =\n  if (sid == \"stopped\") null else java.lang.Boolean.TRUE"}
{"id":"1ecb7cc9-cfab-442b-aef6-9977c926d940","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def updateAppointmentStatus(appointmentId: String, newStatus: String): Option[String] =\n  Option(javaStatusUpdate(appointmentId, newStatus))\n\ndef javaStatusUpdate(id: String, status: String): String =\n  if id.isEmpty then null else status"}
{"id":"7875f04c-408b-471d-8855-900291dfadaf","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getAppointmentSummary(appointmentId: String): String = {\n  val summary = javaFetchSummary(appointmentId)\n  if (summary == null) \"No summary available\" else summary\n}\n\ndef javaFetchSummary(id: String): String =\n  if (id == \"bad\") null else s\"Appointment summary for $id\""}
{"id":"046b9158-d294-4b07-ae59-5e644ea99a57","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class StepRecord(userId: String, steps: Int)\ndef getActiveMinutes(record: StepRecord): Option[Int] =\n  Some(record.steps / 100)\nval record: StepRecord = StepRecord(\"alice\", 3450)\nval minutesActive = getActiveMinutes(record).getOrElse(0)"}
{"id":"68001f1a-914e-4d5e-afde-22c864c40049","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"object HeartRateAnalyzer:\n  def maxHeartRate(readings: List[Int]): Option[Int] =\n    readings match\n      case Nil => None\n      case xs => Some(xs.max)\nval peakHeart = HeartRateAnalyzer.maxHeartRate(List(72,88,110)).getOrElse(0)"}
{"id":"d34bab77-5f1a-4cb3-8539-3f0257cc3179","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def caloriesBurned(session: Option[Double]): Double =\n  session.getOrElse(0.0)\nval todayCalories = caloriesBurned(Some(532.5))"}
{"id":"57936ce2-6727-4f10-bcad-a180df1e9772","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def sleepDuration(hours: Option[Double]): String =\n  hours.fold(\"No data\") { h => s\"Slept $h hours\" }\nsleepDuration(None)"}
{"id":"abf712a5-257e-4ff2-bd07-61396e8a03e1","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class WorkoutSession(typeOfExercise: String, durationMinutes: Int)\ndef findLongestSession(sessions: List[WorkoutSession]): Option[WorkoutSession] =\n  sessions match\n    case Nil => None\n    case xs => Some(xs.maxBy(_.durationMinutes))\nval sessionOpt = findLongestSession(List())"}
{"id":"2f4b6d69-d0a2-4aff-ad29-1a157989cc45","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def getUserWeight(user: String): Option[Double] =\n  val weightDb = Map(\"carla\" -> 67.4)\n  weightDb.get(user)\nval carlaWeight = getUserWeight(\"carla\").getOrElse(0.0)"}
{"id":"caf80510-1ad0-42fd-9b2b-e25709db8754","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def safeStepCount(javaStepCount: String | Null): Option[Int] =\n  Option(javaStepCount).flatMap(str => str.toIntOption)\nsafeStepCount(null)"}
{"id":"30891cc5-1474-4415-a33e-0959aba79a89","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def restingHeartRate(hr: Option[Int]): Boolean =\n  hr.exists(_ < 60)\nrestingHeartRate(Some(55))"}
{"id":"c1a5a882-407f-4cee-babe-c9809bce0dbe","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def hasSleepGoal(sleepGoal: Option[Double]): Boolean =\n  sleepGoal.exists(_ >= 7)\nhasSleepGoal(None)"}
{"id":"3b4275a4-0a1c-45f2-848d-39d875b47c66","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def displayGoalStatus(goal: Option[Int]): String =\n  goal.map(_ => \"Goal Set!\").getOrElse(\"No goal set\")\ndisplayGoalStatus(Some(10000))"}
{"id":"f5d67ed0-2907-4cde-b64a-f37027683c74","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class HydrationTracker:\n  var ouncesDrank: java.lang.Integer = null\n  def recordDrink(ounces: Int): Unit =\n    ouncesDrank = ounces\n  def getOunces(): java.lang.Integer =\n    ouncesDrank\nval tracker = new HydrationTracker\nif (tracker.getOunces() == null) println(\"No data\")"}
{"id":"d3739925-bae0-47e1-9114-3cda47405d28","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def fetchStepGoal(userId: String): java.lang.Integer =\n  if (userId == \"steve\") 12000\n  else null\nval steveGoal = fetchStepGoal(\"john\")\nif (steveGoal != null) println(steveGoal)"}
{"id":"6670b7d9-e239-486b-8956-8f91f81cf726","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def sessionCaloriesBurned(sessionId: String): java.lang.Double =\n  if (sessionId == \"evening\") 305.0\n  else null\nval burned = sessionCaloriesBurned(\"morning\")\nif (burned == null) println(\"No result\")"}
{"id":"1f19fa93-90fe-472e-bbba-c69acfa3a7c9","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def sleepQualityFromJava(nightId: String): String =\n  if (nightId == \"bad\") null else \"Good\"\nval quality = sleepQualityFromJava(\"bad\")\nif (quality == null) println(\"No data\")"}
{"id":"aa76c835-4ab4-4824-8155-b590534b96a4","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def bestDayStepCount(javaResults: Array[Integer]): Integer =\n  if (javaResults.length > 0) javaResults.max else null\nval maxSteps = bestDayStepCount(Array())\nif (maxSteps == null) 0 else maxSteps"}
{"id":"99a56442-aebb-4a48-a6a2-c3ed477e4a68","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class FitnessDevice:\n  def lastSyncTime: String = null\nval device = new FitnessDevice\nif (device.lastSyncTime == null) println(\"Never synced\")"}
{"id":"c06aa8aa-1a1b-489e-9498-9fd92fb3dbfb","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def findUserWeightLegacy(user: String): Double =\n  if (user == \"rose\") 62.0 else null.asInstanceOf[Double]\nval weight = findUserWeightLegacy(\"jack\")"}
{"id":"b21e3383-df1c-4e32-8774-fdf761cb9efe","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class ActivityGoalDb:\n  def getGoal(userId: String): Integer =\n    if (userId == \"elaine\") 8000 else null\nval db = new ActivityGoalDb\nval elaineGoal = db.getGoal(\"bob\")\nif (elaineGoal != null) println(elaineGoal)"}
{"id":"4c06cb9a-7dc0-4840-8e49-e43434fe7a9e","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getLastActiveTime(userId: String): String =\n  if (userId == \"amy\") \"2024-05-01T12:00:00\" else null\nval lastActive = getLastActiveTime(\"steve\")\nif (lastActive == null) \"No data\" else lastActive"}
{"id":"eff74727-05f7-4fc8-9736-da1e1879020d","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def fetchHydrationLevel(userId: String): java.lang.Double =\n  if (userId == \"lucas\") 1.5 else null\nval hydration = fetchHydrationLevel(\"lucas\")\nif (hydration != null) println(hydration)"}
{"id":"df16b156-cbf7-4fef-9de0-d7227209d99c","timestamp":1746097575587,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class StepRecord(userId: String, steps: Int)\ndef getTopStepCount(stepRecords: List[StepRecord]): Option[StepRecord] = {\n  stepRecords.sortBy(-_.steps).headOption\n}"}
{"id":"399c717d-0a67-4bdb-8dba-b09eb388f743","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"object UserCalories {\n  def getActiveCalories(userId: String): java.lang.Integer = {\n    if (userId == \"unknown\") null else 275\n  }\n  def caloriesForDay(userId: String): Int = {\n    val cals = getActiveCalories(userId)\n    if (cals != null) cals else 0\n  }\n}"}
{"id":"a3402b50-b3e1-4629-9b91-557113e9656f","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def safeHeartRate(heartRate: java.lang.Integer): Option[Int] = Option(heartRate).map(_.toInt)\n\nval result: Option[Int] = safeHeartRate(null)\n"}
{"id":"0a023955-018c-4b00-864b-b2a582f1f6fa","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class SleepStats {\n  def last7DaysAverage(userSleepRecords: Array[SleepData]): Double = {\n    var sum = 0.0\n    var count = 0\n    for (rec <- userSleepRecords) {\n      if (rec != null) {\n        sum += rec.hours\n        count += 1\n      }\n    }\n    if (count == 0) 0.0 else sum / count\n  }\n}\ncase class SleepData(hours: Double)\n"}
{"id":"3c898397-4a95-4728-bb42-9f417122d317","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def findMaxDistance(distances: List[Option[Double]]): Option[Double] = {\n  distances.flatten match {\n    case Nil => None\n    case xs  => Some(xs.max)\n  }\n}"}
{"id":"961df735-8968-4541-b84b-5923540f7355","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"object FitnessAlerts {\n  def javaStyleGetNotification(userId: String): String = {\n    if (userId == \"none\") null else s\"Alert for $userId\"\n  }\n  def sendAlert(userId: String): Unit = {\n    val alertMsg = javaStyleGetNotification(userId)\n    if (alertMsg != null) println(alertMsg)\n  }\n}"}
{"id":"2654478c-3dbb-4bac-805a-3d273346928b","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def wrapJavaSleepRecord(javaSleep: JavaSleepRecord): Option[Int] = Option(javaSleep).map(_.durationMinutes)\n\nclass JavaSleepRecord(val durationMinutes: Int)\n"}
{"id":"99dc8b3b-f479-4078-81d2-cfd1fdd2e2d7","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getFirstActiveDay(dayActivities: Array[DayActivity]): DayActivity = {\n  for (i <- 0 until dayActivities.length) {\n    if (dayActivities(i) != null && dayActivities(i).isActive) return dayActivities(i)\n  }\n  null\n}\nclass DayActivity(val isActive: Boolean)\n"}
{"id":"a612a9f2-a429-411e-88c0-0a984da739f5","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def getLatestWeightEntry(entries: List[Option[Double]]): Option[Double] =\n  entries.reverse.collectFirst { case Some(weight) => weight }\n"}
{"id":"324fcd89-0490-4f3e-aad7-346a2e27cb21","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def fetchUserProfile(userId: String): UserProfile = {\n  if (userId == \"\") null else UserProfile(userId, 28)\n}\ncase class UserProfile(id: String, age: Int)\n"}
{"id":"237a7eb0-8265-4cf0-980b-29aa05823074","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def safeHydrationLevel(level: java.lang.Double): Option[Double] = Option(level).map(_.doubleValue())\n\nval optLevel = safeHydrationLevel(2.0)\n"}
{"id":"43a3b878-ec84-4a46-b33a-6cf22ef2521b","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getDistanceSummary(summary: DistanceSummary): Double = {\n  if (summary != null) summary.totalKm else 0.0\n}\nclass DistanceSummary(val totalKm: Double)\n"}
{"id":"ffb6ef7b-8f1c-4bd4-9274-b58970cc4412","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def bestHeartRateSample(samples: List[HeartRateSample]): Option[HeartRateSample] =\n  samples.filter(_.bpm > 100).headOption\ncase class HeartRateSample(bpm: Int)\n"}
{"id":"18ea7ee0-413c-4f8f-9fac-5bb5685b332e","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def dailyGoalString(userGoal: String): String = {\n  if (userGoal != null) userGoal else \"No goal set\"\n}\n"}
{"id":"570cd009-bf8a-4a3c-a076-0243038110cc","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def stepsAboveGoal(today: Option[Int], goal: Int): Boolean =\n  today.exists(steps => steps > goal)\n"}
{"id":"544fd9a1-5f35-4e64-be77-2ba56ff2e814","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def lastWorkoutTime(userId: String): java.time.LocalDateTime = {\n  if (userId == \"inactive\") null else java.time.LocalDateTime.now()\n}\n\ndef getWorkoutHour(userId: String): Int = {\n  val time = lastWorkoutTime(userId)\n  if (time != null) time.getHour else -1\n}\n"}
{"id":"0de3c939-14d5-4162-857e-8d27c964b019","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def getActiveMinutes(record: Option[MinuteRecord]): Int =\n  record.fold(0)(_.activeMinutes)\ncase class MinuteRecord(activeMinutes: Int)\n"}
{"id":"f54891cc-37ca-4270-90db-4d43c6f4d652","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def checkSleepQuality(sleep: SleepQuality): String = {\n  if (sleep == null) \"Unknown\" else sleep.quality\n}\nclass SleepQuality(val quality: String)\n"}
{"id":"9cf8f165-5ffe-486a-a4c9-ab86140b36b0","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def optionalUserDisplayName(name: String): Option[String] = Option(name)\n\nval display: String = optionalUserDisplayName(null).getOrElse(\"Anonymous\")\n"}
{"id":"8651d471-9e20-4552-9667-985bf9d7ca7c","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getLastLoggedMealRecord(records: Array[MealRecord]): MealRecord = {\n  for (i <- records.length - 1 to 0 by -1)\n    if (records(i) != null) return records(i)\n  null\n}\nclass MealRecord(val mealType: String)\n"}
{"id":"942c7532-f375-4c0a-8352-1e9b3f0fb286","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def getCaloriesBurned(record: Option[CaloriesSession]): Int =\n  record.map(_.calories).getOrElse(0)\ncase class CaloriesSession(calories: Int)\n"}
{"id":"8e622910-4166-442d-a4ae-5b6369e19217","timestamp":1746097631579,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, name: String, price: BigDecimal)\ndef getActivePlanOption(planId: String): Option[PricingPlan] = {\n  Option(fetchActivePricingPlan(planId))\n}\n\ndef fetchActivePricingPlan(planId: String): PricingPlan = {\n  if planId == \"basic\" then PricingPlan(\"basic\", \"Basic Plan\", 9.99)\n  else null\n}\n"}
{"id":"9a3fb3d0-7491-4053-b985-75206953c512","timestamp":1746097631579,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanService {\n  def getPlanById(planId: String): PricingPlan = {\n    val plan = fetchPlanFromDatabase(planId)\n    if (plan != null) plan else null\n  }\n  def fetchPlanFromDatabase(planId: String): PricingPlan = {\n    if (planId == \"premium\") new PricingPlan(planId, \"Premium\", 29.99) else null\n  }\n}\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"54137989-2bc7-4c9f-b974-bd9e383c01a4","timestamp":1746097631579,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def getPlanPriceOption(plan: PricingPlan): Option[BigDecimal] = {\n  Option(plan).map(_.price)\n}\ncase class PricingPlan(id: String, name: String, price: BigDecimal)\n"}
{"id":"8fed5c78-6b28-4d11-b22f-36a1c2872a10","timestamp":1746097631579,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getPlanNameIfNotNull(plan: PricingPlan): String = {\n  if (plan != null) plan.name else \"No Plan\"\n}\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"08697976-6d68-416b-80b8-505767005b31","timestamp":1746097631579,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, title: String, price: BigDecimal)\ndef upgradeToBusinessPlan(plan: Option[PricingPlan]): Option[PricingPlan] = {\n  plan.filter(_.title != \"Business\").map(_ => PricingPlan(\"business\", \"Business\", 49.99))\n}\n"}
{"id":"a6b4fa24-814a-4268-9a65-9aae92c47a50","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def cancelPricingPlan(planId: String): PricingPlan = {\n  val cancelledPlan = removePlanEntry(planId)\n  if (cancelledPlan != null) cancelledPlan else null\n}\ndef removePlanEntry(planId: String): PricingPlan = null\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"39c54e60-2215-43fb-ab2b-7382c88f3229","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def planPriceOrDefault(planOpt: Option[PricingPlan]): BigDecimal = {\n  planOpt.map(_.price).getOrElse(BigDecimal(0))\n}\ncase class PricingPlan(id: String, name: String, price: BigDecimal)\n"}
{"id":"4ebad7b8-e5d5-475e-be05-0800cd79b845","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getDeletedPlanName(plan: PricingPlan): String = {\n  if (plan != null) {\n    if (plan.isDeleted) plan.name else \"Not Deleted\"\n  } else {\n    \"Plan Not Found\"\n  }\n}\nclass PricingPlan(val id: String, val name: String, val price: Double, val isDeleted: Boolean)\n"}
{"id":"90256255-ee6a-4cb5-b2b4-b257969a8f85","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def safeCreatePlan(planId: String): Option[PricingPlan] = {\n  Option(javaCreatePlan(planId))\n}\ndef javaCreatePlan(planId: String): PricingPlan = null\ncase class PricingPlan(id: String, name: String, price: Double)\n"}
{"id":"3593bf29-85ae-410e-8d95-ea115e9853e9","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def findPlan(planId: String): PricingPlan = {\n  val plan = searchPlan(planId)\n  if (plan != null) plan else null\n}\ndef searchPlan(planId: String): PricingPlan = null\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"7a8549fd-ab78-40ab-9105-9cde17a50828","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, displayName: String, price: BigDecimal)\ndef getDisplayName(plan: Option[PricingPlan]): String =\n  plan.map(_.displayName).getOrElse(\"Unknown Plan\")\n"}
{"id":"02cef0bb-726c-465b-bdbe-48743df4b61a","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def isPlanUpgradable(plan: PricingPlan): Boolean = {\n  if (plan != null && plan.name == \"Starter\") true else false\n}\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"fd1a462a-2576-4e18-a47f-f5d3d898f304","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, tier: String, amount: Double)\ndef premiumPlanExists(plans: List[PricingPlan]): Boolean =\n  plans.exists(p => Option(p).exists(_.tier == \"Premium\"))\n"}
{"id":"10414961-ae27-423e-acba-0f0384e8df52","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getPlanTierOrNull(plan: PricingPlan): String = {\n  if (plan != null) plan.tier else null\n}\nclass PricingPlan(val id: String, val tier: String, val price: Double)\n"}
{"id":"80652de6-958c-4c09-812d-3898bce456c0","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, name: String, recurring: Boolean)\ndef countRecurringPlans(plans: List[PricingPlan]): Int =\n  plans.count(_.recurring)\n"}
{"id":"ed465f22-4020-4e28-a636-539e7735fbbe","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def assignNullToNonExistingPlan(planId: String): PricingPlan = {\n  val found = findPlanById(planId)\n  if (found != null) found else null\n}\ndef findPlanById(planId: String): PricingPlan = null\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"6b5685f9-1654-4a1a-96e4-cc7a15245120","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, label: String, active: Boolean)\ndef filterActivePlans(plans: Option[List[PricingPlan]]): List[PricingPlan] =\n  plans.getOrElse(Nil).filter(_.active)\n"}
{"id":"5d9d1991-b3b8-407a-8eda-348c1ada5b87","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def updatePlanPrice(plan: PricingPlan, newPrice: Double): PricingPlan = {\n  if (plan != null) new PricingPlan(plan.id, plan.name, newPrice)\n  else null\n}\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"d6d9e610-b910-4845-bed4-42234c8d6aba","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, tier: String, enabled: Boolean)\ndef enablePlan(plan: Option[PricingPlan]): Option[PricingPlan] =\n  plan.map(_.copy(enabled = true))\n"}
{"id":"5176e606-1b2b-455a-8ac9-2f1811d6e0cf","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def downgradeToFreeIfNull(plan: PricingPlan): PricingPlan = {\n  if (plan != null) plan else new PricingPlan(\"free\", \"Free\", 0.0)\n}\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"db2579bb-ab2b-4cce-b22a-637ce6285021","timestamp":1746097651260,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(name: String, price: BigDecimal)\ndef findPricingPlanById(planId: String): Option[PricingPlan] = {\n  val plan = Database.findPlanOrNull(planId)\n  Option(plan)\n}"}
{"id":"985bc021-3bc3-4bdd-bc0d-ffbf326f7ecc","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"object LegacyPricingApi {\n  def getPlanName(planId: String): String = {\n    if (planId == null) null\n    else {\n      if (planId == \"monthly\") \"Monthly Plan\" else null\n    }\n  }\n}"}
{"id":"6fad57ba-b506-4e5f-a275-5904015da110","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def getAnnualPlanPrice(planId: String): Option[BigDecimal] =\n  Option(PricingPlanService.fetchPlanPriceOrNull(planId)).filter(_ > 0)"}
{"id":"2b3ba9f6-7065-41d8-8b42-ed6f6d8cc041","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanManager {\n  def fetchPlan(planId: String): PricingPlan = {\n    val plan = LegacyDatabase.retrievePlan(planId)\n    if (plan != null) plan else null\n  }\n}"}
{"id":"f1b0374c-118f-424f-a304-61e0cc9c1047","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def safeGetDiscountForPlan(plan: PricingPlan): Option[Double] =\n  Option(PricingDiscountApi.getDiscountOrNull(plan.name))"}
{"id":"b8ab8076-b18b-4f2f-a178-2d4d50516af0","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"object PricingPlanValidator {\n  def isValid(plan: PricingPlan): Boolean = {\n    Option(plan).exists(_.price > 0)\n  }\n}"}
{"id":"1eeae4fe-9f2e-44a0-9847-e3c1398aff35","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getPlanDescription(planId: String): String = {\n  val description = JavaPlanMetadata.getDescription(planId)\n  if (description == null) \"Unknown plan\" else description\n}"}
{"id":"fae8ded8-f23c-4b23-a466-f2ab267b62e2","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def findFeaturedPlanName: Option[String] =\n  Option(LegacyPlatform.featuredPlanNameOrNull)\n    .filter(_.nonEmpty)\n    .map(_.trim)"}
{"id":"cca26de4-b709-47ec-a93c-a9e49f789c40","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def fetchPlanWithNullCheck(planId: String): PricingPlan = {\n  val result = ExternalPlanRepository.lookupPlan(planId)\n  if (result != null) result else null\n}"}
{"id":"fae29e44-931b-4d44-a705-38c11fd6429d","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def getOptionalFeaturedPlan: Option[PricingPlan] =\n  Option(LegacyDatabase.getFeaturedPlanOrNull)"}
{"id":"88b66519-e240-415b-9331-41ae8c1c93f5","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def calculatePlanDiscountedPrice(plan: PricingPlan): BigDecimal = {\n  val discount = PricingDiscountService.getDiscountOrNull(plan.name)\n  if (discount != null) plan.price - discount else plan.price\n}"}
{"id":"56238e67-2d4d-424f-92fd-dc9d866011c2","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def updatePlanStatus(plan: PricingPlan): Option[PricingPlan] =\n  Option(plan).filter(_.price > 0).map(_.copy(name = plan.name + \" [Updated]\"))"}
{"id":"9427c05e-db7f-4d61-9b99-7e9df5e76937","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getLegacyPlanOrNull(planId: String): PricingPlan = {\n  val plan = OldPlanProvider.fetchPlan(planId)\n  if (plan == null) null else plan\n}"}
{"id":"5bd64da2-19a0-4b85-b793-a87f1d672e96","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def optionalPlanPrice(plan: PricingPlan): Option[BigDecimal] =\n  Option(plan).map(_.price).filter(_ > 0)"}
{"id":"5ed81530-18a8-4644-b0a5-3977c9ef1b83","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"object DeprecatedPricingFetcher {\n  def retrievePlanPrice(planId: String): BigDecimal = {\n    val price = JavaPricingEngine.getPlanPrice(planId)\n    if (price != null) price else BigDecimal(0)\n  }\n}"}
{"id":"3048b79a-647a-40e7-b907-10b5c5ae7e8b","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def planNameFold(plan: PricingPlan): String =\n  Option(plan).map(_.name).fold(\"No plan\")(identity)"}
{"id":"20e809be-17dd-4587-b65c-95f4f40f35aa","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def planDescriptionSafely(plan: PricingPlan): Option[String] =\n  Option(LegacyPlanInfoProvider.getDescriptionOrNull(plan.name))"}
{"id":"ce723ce0-dfb0-48d9-ac86-629dfbf97974","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def discountOrZero(plan: PricingPlan): Double = {\n  val value = PricingDiscountProvider.fetchDiscount(plan.name)\n  if (value != null) value else 0.0\n}"}
{"id":"bae49869-f82f-4491-92ff-caea83828963","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getTrialPlan(planId: String): PricingPlan = {\n  val plan = JavaPlanFetcher.getTrialPlanOrNull(planId)\n  if (plan != null) plan else null\n}"}
{"id":"af8c9705-1c18-474b-91ec-64b79d6a5a9c","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def optionalTrialPlanId(plan: PricingPlan): Option[String] =\n  Option(LegacyIdResolver.getTrialPlanIdOrNull(plan.name))"}
{"id":"2b58d9a8-e3e0-4d5f-8d77-959bc5734f1f","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object LightController {\n  def turnOn(deviceName: String): Unit = {\n    println(s\"Turning on $deviceName\")\n  }\n  def turnOff(deviceName: String): Unit = {\n    println(s\"Turning off $deviceName\")\n  }\n  def getStatus(deviceName: String): String = {\n    if (deviceName == null) {\n      \"Error: No device specified\"\n    } else {\n      \"Online\"\n    }\n  }\n}\n"}
{"id":"e08dfe63-4297-4193-8897-8a515c84261d","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmartDoorLock {\n  var lockStatus: String = null\n  def setLockStatus(newStatus: String): Unit = {\n    if (newStatus != null) {\n      lockStatus = newStatus\n    }\n  }\n  def getLockStatus: String = {\n    if (lockStatus == null) \"Unknown\" else lockStatus\n  }\n}\n"}
{"id":"5a6111a6-2d0b-423e-9f18-7c333db95eab","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object Thermostat {\n  def fetchTemperature(roomId: String): java.lang.Integer = {\n    if (roomId == null) null else 22\n  }\n  def printTemperature(roomId: String): Unit = {\n    val temp = fetchTemperature(roomId)\n    if (temp != null) println(s\"Room $roomId temperature: $temp°C\")\n  }\n}\n"}
{"id":"2b45289b-d461-437a-8894-62dc9e77071e","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class CameraFeed(val deviceId: String) {\n  def captureImage(): Array[Byte] = {\n    if (deviceId == null) return null\n    Array[Byte](1,2,3,4)\n  }\n}\n"}
{"id":"5f0bae93-f4f9-4c4e-b45c-a51ffd3b8687","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object AlarmManager {\n  def getAlarmTime(device: String): String = {\n    if (device == null) return null\n    \"07:00\"\n  }\n  def triggerAlarm(device: String): Unit = {\n    val time = getAlarmTime(device)\n    if (time != null) println(s\"Alarm on $device set to $time\")\n  }\n}\n"}
{"id":"d363cba7-a916-4ea1-a652-d37022362b28","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SpeakerSystem {\n  private var lastPlayed: String = null\n  def playAudio(track: String): Unit = {\n    lastPlayed = if (track != null) track else null\n  }\n  def getLastPlayed: String = lastPlayed\n}\n"}
{"id":"c0650b51-4d67-4cd7-9e9f-bc9dca8e3245","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object SmartFan {\n  def setSpeed(level: java.lang.Integer): Unit = {\n    if (level == null) println(\"No speed set\")\n    else println(s\"Speed set to $level\")\n  }\n  def getCurrentSpeed: java.lang.Integer = null\n}\n"}
{"id":"21b5de62-0c50-4c5c-952d-d64d38220984","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class MotionSensor(val sensorId: String) {\n  var lastMotionTime: String = null\n  def updateMotionTime(time: String): Unit = {\n    if (time != null) lastMotionTime = time\n  }\n  def getLastMotionTime: String = lastMotionTime\n}\n"}
{"id":"c7b3bc9f-c68f-475a-8a73-f5fa0bb6f0c7","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object SprinklerController {\n  def activate(zone: String): Unit = {\n    if (zone == null) println(\"Sprinkler zone unknown\")\n    else println(s\"Zone $zone activated\")\n  }\n  def getZoneStatus(zone: String): String = {\n    if (zone != null) \"Active\" else null\n  }\n}\n"}
{"id":"b6d47845-85b9-4660-82a2-ff7b25b8c796","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class Doorbell(val chimeId: String) {\n  def playChime(): Unit = {\n    if (chimeId == null) {\n      println(\"No chime specified\")\n      return\n    }\n    println(s\"Playing chime $chimeId\")\n  }\n}\n"}
{"id":"54cb13c1-878f-45a4-8941-75babff6074b","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class LightSwitch(id: String)\nobject LightSwitchManager {\n  def getLightSwitch(id: String): Option[LightSwitch] =\n    Option(id).map(LightSwitch(_))\n  def safeToggle(id: String): String =\n    getLightSwitch(id).fold(\"Light switch not found\")(sw => s\"Toggled ${sw.id}\")\n}\n"}
{"id":"9dbb826d-118e-49ef-ac3a-b4f451662020","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"class ThermostatControl(val room: String) {\n  def fetchCurrentTemperature: Option[Double] = {\n    val javaTemp: java.lang.Double = if (room == \"LivingRoom\") 21.5 else null\n    Option(javaTemp).map(_.toDouble)\n  }\n  def displayTemperature(): String =\n    fetchCurrentTemperature.map(t => s\"$room: $t°C\").getOrElse(\"Temperature unavailable\")\n}\n"}
{"id":"47b58d99-ddf7-4712-9f59-3e5d896b51d0","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"object DoorSensor {\n  def getBatteryLevel(sensorId: String): Option[Int] = Option(sensorId).map(_.length * 10)\n  def needsAttention(sensorId: String): Boolean = getBatteryLevel(sensorId).exists(_ < 20)\n}\n"}
{"id":"f19ef00c-ca22-41dd-a69c-7f3e0ae65932","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class SurveillanceCamera(deviceName: String)\nobject SurveillanceSystem {\n  def fetchCamera(deviceName: String): Option[SurveillanceCamera] = Option(deviceName).map(SurveillanceCamera(_))\n  def cameraOnline(deviceName: String): Boolean =\n    fetchCamera(deviceName).isDefined\n}\n"}
{"id":"a30b38a6-4aae-4110-97e2-61fb005bd843","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"object VoiceAssistant {\n  def getRecognizedCommand(input: String): Option[String] = Option(input).filter(_.startsWith(\"turn\"))\n  def handleCommand(cmd: String): String =\n    getRecognizedCommand(cmd).getOrElse(\"Unrecognized or empty command.\")\n}\n"}
{"id":"6a4f6102-5e6c-42d0-b385-001a06ede1b5","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"class SmartCurtainController {\n  def getCurrentPosition: Option[Int] = Option(null)\n  def openIfClosed(): String =\n    getCurrentPosition.fold(\"Curtain state unknown\")(p => if (p == 0) \"Opening curtain\" else \"Already open\")\n}\n"}
{"id":"c0d7d746-f282-46d6-a2b6-20596e5f3cea","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"object HeaterControl {\n  def maybeSetTemperature(target: java.lang.Integer): Option[String] = Option(target).map(t => s\"Setting temperature to $t\")\n  def statusMessage(target: java.lang.Integer): String = maybeSetTemperature(target).getOrElse(\"No temperature provided\")\n}\n"}
{"id":"b1090eac-01fe-4002-aede-fb4e6b2fab4a","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class WindowBlind(id: String)\nobject WindowBlindManager {\n  def findBlind(id: String): Option[WindowBlind] = Option(id).map(WindowBlind(_))\n  def safeRaise(id: String): String = findBlind(id).map(blind => s\"Raised ${blind.id}\").getOrElse(\"No such blind\")\n}\n"}
{"id":"3a812309-749d-44a0-9f4a-a932d657a71f","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"object ApplianceMonitor {\n  def getLatestReading(device: String): Option[Double] = Option(device).filter(_.startsWith(\"Meter\")).map(_ => 105.5)\n}\n"}
{"id":"db17c960-609a-4fc5-80a5-a0f9e7de0b71","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"class IrrigationValve(val zone: String) {\n  def getStatus: Option[String] = Option(zone).map(z => if (z.nonEmpty) \"Open\" else \"Closed\")\n  def printStatus(): String = getStatus.getOrElse(\"Status unknown\")\n}\n"}
{"id":"478ca614-a146-4e8a-ab5b-e0bc4e7fa597","timestamp":1746097693859,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"case class Thermostat(id: String, temperature: Double)\ndef readThermostatTemp(t: Thermostat | Null): Double =\n  if (t != null) t.temperature else 0.0"}
{"id":"31106324-fab8-4a96-b4d2-81483b2e79c4","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"def getDeviceName(device: SmartDevice): String =\n  if (device != null) device.name else \"Unknown device\""}
{"id":"07b680c7-ec7a-401a-9c4a-feb725b825f8","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class LightController(val room: String)\ndef activateLight(controller: LightController): Boolean =\n  if (controller != null) {\n    // Simulate activation\n    true\n  } else false"}
{"id":"479dfb65-796f-4fc9-ad25-1d9955cb0693","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"def getDoorStatus(doorSensor: DoorSensor): String =\n  if (doorSensor != null) doorSensor.status else null"}
{"id":"11fc48dd-5c5e-45c8-9fdd-ce940cb9bcb8","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class Fan(val speed: Int)\ndef adjustFanSpeed(fan: Fan): Unit =\n  if (fan != null) {\n    // adjust speed logic\n    ()\n  }"}
{"id":"16b05b35-c537-4e66-a39c-81fa4949deec","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"def fetchCameraFeed(camera: Camera): Array[Byte] =\n  if (camera != null) camera.getFeed else null"}
{"id":"e98ad797-b720-4fa7-8b80-11a325e1eea3","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmartPlug(val state: String)\ndef togglePlug(plug: SmartPlug): String =\n  if (plug == null) null else if (plug.state == \"ON\") \"OFF\" else \"ON\""}
{"id":"6515283a-6487-451a-960f-bbfcd2234fe8","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"def getHumidity(sensor: HumiditySensor): java.lang.Double =\n  if (sensor != null) sensor.currentHumidity else null"}
{"id":"d8bc9cf3-3c3c-4bb5-8f44-3a83efa59fef","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class RobotVacuum(var batteryLevel: Int)\ndef getVacuumBattery(vacuum: RobotVacuum): Int =\n  if (vacuum != null) vacuum.batteryLevel else -1"}
{"id":"a8ec9471-dd53-494b-a55c-0abc15c2b137","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"def findActiveScene(sceneManager: SceneManager): Scene =\n  if (sceneManager != null) sceneManager.activeScene else null"}
{"id":"71611314-bb80-441d-9747-55dde1517f6f","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class LightBulb(id: String, isOn: Boolean)\ndef switchLight(light: LightBulb): LightBulb =\n  Option(light).map(lb => lb.copy(isOn = !lb.isOn)).getOrElse(LightBulb(\"unknown\", false))"}
{"id":"84056c49-86c4-4f00-a337-bffaa8c011a8","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def getSensorStatus(sensor: Sensor | Null): Option[String] =\n  Option(sensor).map(_.status)"}
{"id":"052eb644-1af5-45aa-89c3-ecd6004198cf","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def safeGetDeviceIp(device: HomeDevice | Null): Option[String] =\n  Option(device).flatMap(d => Option(d.ipAddress))"}
{"id":"0209c77f-aaf6-4d90-9394-0c1975ae9121","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def readTemperature(sensor: TemperatureSensor | Null): Double =\n  Option(sensor).map(_.temperature).getOrElse(0.0)"}
{"id":"19cada07-a1b2-47a8-9eba-dcd38c4bb0aa","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def smartLockStatus(lock: SmartLock | Null): Option[String] =\n  Option(lock).map(_.lockStatus)"}
{"id":"0a2c407b-a4cb-4ece-875e-691cfc6f3bb4","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class CurtainController(state: String)\ndef openCurtain(controller: CurtainController | Null): Option[CurtainController] =\n  Option(controller).map(_.copy(state = \"open\"))"}
{"id":"93c08320-7a6b-4719-9d93-8028e2074de9","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def activeAlarms(alarmSystem: AlarmSystem | Null): List[String] =\n  Option(alarmSystem).map(_.getActiveAlarms).getOrElse(Nil)"}
{"id":"972c0129-4cda-409f-8b51-d59198a284ce","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def backupBatteryLevel(panel: ControlPanel | Null): Option[Int] =\n  Option(panel).map(_.batteryBackupLevel)"}
{"id":"e35916cd-df4f-42aa-91da-622a189c9af2","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def changeRoomVolume(controller: AudioController | Null, delta: Int): Option[Int] =\n  Option(controller).map(ac => ac.volume += delta).map(_ => controller.volume)"}
{"id":"96155d75-9ed1-4c08-8169-79faa714dfe4","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def getIrrigationStatus(system: IrrigationSystem | Null): String =\n  Option(system).fold(\"offline\")(_.currentStatus)"}
{"id":"e5534b6b-dde5-448c-8ca9-b0602900ff91","timestamp":1746097708797,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class PassengerRequest(passengerId: String, destination: String)\ndef findDriverForRequest(request: PassengerRequest): Option[String] =\n  val drivers = List(\"alex\", \"jamal\", \"priya\")\n  drivers.find(_.nonEmpty)\n"}
{"id":"9d7111fd-d95c-4d76-94fd-50620398ce31","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getDriverName(driverId: String): String =\n  if(driverId == null) \"Unknown Driver\"\n  else driverId.toUpperCase()\n"}
{"id":"90326c05-de4d-43da-975f-10200a9304db","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def wrapNullableVehicle(vehicleId: String): Option[String] =\n  Option(vehicleId)\n"}
{"id":"29e70680-2ddc-4f42-adfc-eea594342b12","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class JavaStyleRiderService {\n  def fetchLatestRequest(riderId: String): PassengerRequest = null\n}\ndef getLatestRequestSafe(riderService: JavaStyleRiderService, riderId: String): PassengerRequest =\n  val req = riderService.fetchLatestRequest(riderId)\n  if(req != null) req else null\n"}
{"id":"c8dfd568-1833-49e7-ba05-86de4a85742a","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def assignVehicleToDriver(vehicleId: String, driverId: String): Option[String] =\n  Option(vehicleId).flatMap { vId =>\n    Option(driverId).map(dId => s\"$dId assigned $vId\")\n  }\n"}
{"id":"185e5d89-474c-4655-9b46-cb2ef7df2e3e","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"object DispatchLogger {\n  def logRideAssignment(driver: String, request: Option[PassengerRequest]): Unit =\n    request match\n      case Some(req) => println(s\"$driver assigned to ${req.passengerId}\")\n      case None => println(\"No ride assigned\")\n}\n"}
{"id":"680d31cc-7743-4f27-97ec-cc707cbe9944","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getCurrentRide(requestId: String): String =\n  val rideId = possiblyNullRideId(requestId)\n  if(rideId != null)\n    rideId\n  else\n    null\n\ndef possiblyNullRideId(requestId: String): String =\n  if(requestId == \"active\") \"ride42\" else null\n"}
{"id":"2c5a24be-7456-4084-8768-9d41b3cc2928","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class Ride(driverId: String, requestId: String)\ndef optionifyRide(ride: Ride): Option[Ride] =\n  Option(ride)\n"}
{"id":"175fd214-40a7-4319-a2a6-a4b96f1e785e","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getEstimatedPickupTime(driverId: String): Option[Int] =\n  Option(driverId).filter(_.nonEmpty).map(_ => 7)\n"}
{"id":"fafc287f-1948-4809-8c79-08a3db1dede9","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def fetchDispatchCenterOrNull(centerCode: String): String =\n  if(centerCode.startsWith(\"NY\")) centerCode else null\n"}
{"id":"3ec20a58-0de5-4498-a52f-18c61eecdb0e","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def findAvailableVehicle(passengerLocation: String): String =\n  val id = if(passengerLocation == null) null else passengerLocation.reverse\n  if(id != null) id else null\n"}
{"id":"19984d65-5b83-4eb1-aa7c-22865ef80f56","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def safeWrapAssignment(driver: String): Option[String] =\n  Option(driver).filter(_.nonEmpty)\n"}
{"id":"ffea8360-e273-453d-8494-20de86837cfd","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"object RideSharingStatus {\n  def statusForAssignment(assignment: Option[String]): String =\n    assignment.fold(\"No assignment\")(id => s\"Assigned: $id\")\n}\n"}
{"id":"b3cd7fc3-462c-4c71-a244-92be38506157","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def cancelRideIfInactive(rideStatus: String): String =\n  if(rideStatus != null && rideStatus == \"inactive\") \"canceled\" else rideStatus\n"}
{"id":"6fda6185-baa7-43c9-aa29-c5608c9fcbd6","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def updateDispatchQueue(queueId: String, dispatcher: String): String =\n  if(queueId == null || dispatcher == null) null\n  else s\"$queueId updated by $dispatcher\"\n"}
{"id":"dff7b615-fbff-406c-9756-2f42757ced1d","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getOptionalVehicle(vehicleId: String): Option[String] =\n  Option(vehicleId).filter(_.nonEmpty)\n"}
{"id":"2a4f69c6-6d58-4164-bce2-f14b7d1079a5","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def assignDriverOrReturnNone(passengerId: String, driverId: String): Option[String] =\n  for\n    pid <- Option(passengerId)\n    did <- Option(driverId)\n  yield s\"$did assigned to $pid\"\n"}
{"id":"32b0bd80-e5ff-43d8-9cec-6382d68100b1","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def fetchDriverLocation(driverId: String): String =\n  if(driverId == null) null else s\"loc-$driverId\"\n"}
{"id":"d6a98fc3-a482-4ff0-83c2-d9c4ed9f217e","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getRideFeedbackOrNull(rideId: String): String =\n  if(rideId == null)\n    null\n  else if(rideId == \"1001\")\n    \"Great driver!\"\n  else\n    null\n"}
{"id":"86a2ef75-f7fb-4094-a0e6-da6a0b2e970f","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getRequestOrElseNone(requestId: String): Option[String] =\n  Option(requestId).map(rid => s\"REQ-$rid\")\n"}
{"id":"cc923a98-752f-4f2d-8384-0c8276696545","timestamp":1746097757758,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class RideRequest(riderId: String, pickupLocation: String)\ndef getRequestOption(request: RideRequest | Null): Option[RideRequest] = Option(request)"}
{"id":"eb333a13-6a30-4a25-8ac3-29fca0b5856a","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def assignDriverOption(driverId: String | Null): Option[String] = Option(driverId).filter(_.nonEmpty)"}
{"id":"b56153ed-e9ae-4d2f-85f4-4f3cc92bd891","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class Vehicle(vehicleId: String, active: Boolean)\ndef activeVehicle(vehicle: Vehicle | Null): Option[Vehicle] = Option(vehicle).filter(_.active)"}
{"id":"2f337197-c240-4095-8bba-f47925dc5a93","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getEstimatedFareOption(fare: java.lang.Double | Null): Option[Double] = Option(fare).map(_.doubleValue)"}
{"id":"71a15308-58b8-42b2-92e7-ed7c1b47050b","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def dispatchToAvailableDriver(driverName: String | Null, request: RideRequest): Option[String] =\n  Option(driverName).map(d => s\"Dispatching request for ${request.riderId} to $d\")"}
{"id":"80ac37e1-3379-4467-b6aa-abca5321f5d4","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def tripRatingToOption(rating: java.lang.Integer | Null): Option[Int] = Option(rating).map(_.intValue)"}
{"id":"a3f1879c-5c7c-450b-b641-869bf7080da3","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def findVehicleOption(vehicleId: String | Null): Option[String] = Option(vehicleId).filter(_.startsWith(\"VEH-\"))"}
{"id":"878dc85b-73c2-4448-be1f-75ac3026b6b9","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getDispatchTimeOption(dispatchTime: Long | Null): Option[Long] = Option(dispatchTime)"}
{"id":"fffd5e48-b6ca-4573-a7f3-f0d16a880bca","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def pickFirstAvailableDriver(maybeDriver: String | Null): String =\n  Option(maybeDriver).getOrElse(\"No driver available\")"}
{"id":"e5eeca5a-3d53-4ae5-b573-d17504aed1cc","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getRiderNotesOption(notes: String | Null): Option[String] = Option(notes).filter(_.trim.nonEmpty)"}
{"id":"5e6c92aa-f4b6-404d-bfb8-313969a777c2","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def scheduleRideOption(rideTime: java.time.LocalDateTime | Null): Option[java.time.LocalDateTime] = Option(rideTime)"}
{"id":"582e8664-845d-4af0-88b3-fb19e9824854","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def updateDriverAssignmentOption(driver: String | Null, ride: RideRequest): String =\n  Option(driver).map(d => s\"Driver $d assigned to ${ride.riderId}\").getOrElse(\"No available driver\")"}
{"id":"15d6895c-5873-43ab-ad21-517f668ea90b","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def cancelReasonOption(cancelReason: String | Null): Option[String] = Option(cancelReason)"}
{"id":"026a743d-c45c-4eec-8c2a-4b3e764ad64a","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def safePickupLocation(location: String | Null): String = Option(location).getOrElse(\"Unknown Location\")"}
{"id":"ce946f49-aaad-4b71-b99b-bbf93f22f749","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def optionalSurgeMultiplier(multiplier: java.lang.Double | Null): Option[Double] = Option(multiplier).map(_.doubleValue)"}
{"id":"ebf89b48-cddb-4cf1-b693-dfbe56f65756","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def fetchActiveTripOption(tripId: String | Null): Option[String] = Option(tripId)\n\nfetchActiveTripOption(\"TRIP-024\").getOrElse(\"No Active Trip\")"}
{"id":"4c52c1a3-bf6c-4601-a897-d97eef22793a","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getRiderContactOption(contact: String | Null): Option[String] = Option(contact)"}
{"id":"02451831-4efd-4f67-9c07-d718bf6c4436","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def lookupRideStatusOption(status: String | Null): Option[String] = Option(status).filter(_ == \"Active\")"}
{"id":"1f04814c-92d3-4766-bc3a-7e5b5301df9b","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def optionToUpperCaseDriver(driver: String | Null): Option[String] = Option(driver).map(_.toUpperCase)"}
{"id":"66942df6-8bd8-4750-9081-c0096c6d6681","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def unwrapOrLogEx(dispatchId: String | Null): String = \n  Option(dispatchId).getOrElse { println(\"Missing dispatch id\"); \"DISPATCH-UNKNOWN\" }"}
{"id":"bab1c2b4-3202-440d-ac7c-8f972f67b3de","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getRideRequest(requestId: String): RideRequest =\n  val result = simulateFindRideRequest(requestId)\n  if (result == null) null else result\n\ndef simulateFindRideRequest(id: String): RideRequest | Null = if id == \"R1\" then RideRequest(\"R1\",\"Downtown\") else null"}
{"id":"fac04bf0-a416-4b12-b513-fc56895fa08b","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def assignBackupDriver(driverName: String | Null): String =\n  if (driverName != null) driverName else null"}
{"id":"ad6aed2c-05cc-44c0-aa80-9e2883dc604b","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def checkCancelledTrip(tripStatus: String | Null): Boolean =\n  if(tripStatus == null) false else tripStatus == \"Cancelled\""}
{"id":"c6adea25-e52b-4b60-92a9-fd1678c08dbd","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def unsafeGetVehicle(vehicle: Vehicle | Null): String =\n  if(vehicle == null) null else vehicle.vehicleId"}
{"id":"375e0597-db33-4adc-92e2-d7e140715130","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def findAvailableVehicle(vehicleList: Array[Vehicle] | Null): Vehicle | Null =\n  if(vehicleList != null && vehicleList.length > 0) vehicleList(0) else null"}
{"id":"9d07238e-c7a6-417f-8118-40044def61e8","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def driverContactOrNull(contact: String | Null): String =\n  if(contact != null) contact else null"}
{"id":"a26e2063-3c63-44ea-9ee1-6f89fa1e63f4","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def javaStyleGetRideStatus(rideId: String): String | Null =\n  val status = simulateJavaRideStatus(rideId)\n  if(status != null) status else null\n\ndef simulateJavaRideStatus(rideId: String): String | Null = if rideId == \"ABC\" then \"Active\" else null"}
{"id":"d56d435a-32d9-430f-b108-415e48b77992","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def dispatchVehicle(vehicleId: String | Null): Boolean =\n  if(vehicleId != null) true else false"}
{"id":"28a1b527-46ea-4f6d-b738-fa58a5a964ce","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def dispatchTimeOrNull(time: Long | Null): Long | Null =\n  if(time != null) time else null"}
{"id":"b7cd3e44-cd76-4f46-9ca7-ec20a15718b0","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def incompleteTripRating(rating: java.lang.Integer | Null): Int =\n  if(rating == null) 0 else rating.intValue"}
{"id":"64081bc3-1db1-49da-b20b-4310b41e2f60","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def setPickupLocation(location: String | Null): String =\n  if(location != null) location else \"No location\""}
{"id":"43590293-f3d2-41e9-b2e8-568f4b88f202","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def matchDriverOrNull(driver: String | Null): String | Null =\n  if(driver != null && driver.startsWith(\"DRV-\")) driver else null"}
{"id":"955d018c-2508-476b-972d-7a53c8459809","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def scheduleRiderNotification(message: String | Null): String =\n  if(message == null) \"Unable to notify.\" else message"}
{"id":"d60f77ba-3736-4b56-ac8b-c055922e244d","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def cancelDispatch(reason: String | Null): Unit =\n  if(reason != null) println(s\"Dispatch cancelled: $reason\")"}
{"id":"44ffc182-7ec6-4ad1-9942-4608fde4bf9c","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Passenger(name: String, email: Option[String])\ndef getPassengerEmail(passenger: Passenger): String =\n  passenger.email.getOrElse(\"No Email Registered\")"}
{"id":"b7329645-2393-4eca-9514-ae07ee629bcd","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def findBookingReference(ticketId: String): String =\n  null"}
{"id":"227d2106-272f-43a3-b597-e57840f882da","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Flight(gate: Option[String])\ndef getGateInfo(flight: Flight): String =\n  flight.gate.fold(\"Gate Not Assigned\")(gate => s\"Boarding Gate: $gate\")"}
{"id":"3b1ff02d-3ab1-4ec0-be10-d7e9f6aec457","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class Ticket(val number: String, val seat: String)\ndef getSeatNumber(ticket: Ticket): String =\n  if(ticket != null) ticket.seat else \"Seat Unknown\""}
{"id":"18eb5f01-dec9-46d2-852c-d567033a5f98","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def safeTicketLookup(reference: String): Option[String] =\n  val resultFromLegacySystem: String = null\n  Option(resultFromLegacySystem)"}
{"id":"a60a8c0e-e007-4998-9cd4-53a58643eb9a","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def cancelReservation(reservationId: String): Boolean =\n  if(reservationId == null) false else true"}
{"id":"6ab3c509-dfcc-4065-a694-1425038bddea","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class BoardingPass(seat: Option[String])\ndef seatDisplay(boardingPass: BoardingPass): String =\n  boardingPass.seat.getOrElse(\"Unassigned\")"}
{"id":"b53df4c8-5a7e-4415-823f-800206ef3c6b","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def updatePassengerPhone(passenger: Passenger, newPhone: String): Passenger =\n  if(newPhone != null) passenger.copy(email = Some(newPhone)) else passenger"}
{"id":"6a2e8f18-fca9-40b6-9299-5357f8df31db","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def parseLuggageCount(luggageInfo: String): Option[Int] =\n  Option(luggageInfo).flatMap(info => info.toIntOption)"}
{"id":"fd481711-4150-4c10-8148-a53fbb73f95b","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getFlightNumber(flight: Flight): String =\n  if(flight == null) \"Unknown Flight\" else flight.hashCode().toString"}
{"id":"ca2a6f9d-cfbf-4d1e-af1c-6aa079bb9066","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Reservation(ticketNumber: Option[String])\ndef ticketStatus(reservation: Reservation): String =\n  reservation.ticketNumber.fold(\"Not Issued\")(num => s\"Ticket No: $num\")"}
{"id":"54149d88-6454-401a-b960-9222ff4fc149","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def assignMealPreference(passenger: Passenger, preference: String): Unit =\n  if(passenger == null || preference == null) return\n  println(s\"Assigned $preference to ${passenger.name}\")"}
{"id":"8ef1b03d-95eb-44aa-b7c0-ad030aa87a88","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def findAvailableFlight(from: String, to: String): Option[Flight] =\n  Option(null)"}
{"id":"ea01721b-c76e-4918-bfe5-d5abee409689","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getPassengerLoyaltyTier(passenger: Passenger): String =\n  if(passenger == null) null else \"Gold\""}
{"id":"19c63dec-e968-47e2-b09c-2e094208d056","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def printBoardingZone(passenger: Passenger): Unit =\n  Option(passenger.email).flatten match\n    case Some(email) => println(s\"Zone for $email: A\")\n    case None => println(\"Unknown boarding zone\")"}
{"id":"5663d3ea-bd60-4ff4-8971-88f0797a75c2","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def checkIn(ticket: Ticket): Boolean =\n  if(ticket != null) true else false"}
{"id":"fa529136-f54f-4665-abca-dc6bdbe7e073","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def firstAvailableSeat(seats: List[String]): Option[String] =\n  seats.headOption"}
{"id":"c548acfd-308b-4f00-8120-b3f442323621","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def retrieveFlightAttendant(name: String): String =\n  if(name == null) null else s\"Attendant: $name\""}
{"id":"a27d6395-ecdc-45f7-8fe0-aa5b38cb312b","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def showCheckInCounter(flight: Flight): String =\n  Option(flight.gate).flatten.getOrElse(\"Go to Information Desk\")"}
{"id":"22833dce-2f79-44ae-bdfa-c4696d21ec45","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def findReservationByReference(reference: String): Reservation =\n  if(reference == null) null else Reservation(Some(\"TK123\"))"}
{"id":"4230d0fc-a98d-49e5-9e4a-ec7e7c6b68ed","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Passenger(name: String, passportNumber: String)\ndef findPassenger(passengerId: String): Option[Passenger] =\n  val result = javaFindPassenger(passengerId) // Simulated Java API\n  Option(result)\ndef javaFindPassenger(passengerId: String): Passenger | Null =\n  if passengerId == \"P123\" then Passenger(\"Ava Green\", \"X9999999\") else null"}
{"id":"617848d7-42f7-4713-a5a6-d498cd223855","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getBookingReference(bookingId: String): String | Null =\n  if bookingId == \"B100\" then \"BRX7890\"\n  else null\nval reference = getBookingReference(\"B404\")\nif(reference == null) println(\"Booking reference not found\")\nelse println(\"Reference: \" + reference)"}
{"id":"99b1f36e-e555-4f03-bfd9-cd2eb56c5c59","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def ticketIssueDate(ticketNumber: String): Option[String] =\n  Option(fakeJavaIssueDate(ticketNumber))\ndef fakeJavaIssueDate(ticketNumber: String): String | Null =\n  if ticketNumber == \"TK001\" then \"2024-06-20\"\n  else null"}
{"id":"6a94107f-ae84-4530-81f2-c53d94994735","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class Flight(val flightNumber: String, val departure: String, val arrival: String)\ndef findFlight(flightNumber: String): Flight | Null =\n  if flightNumber == \"AC404\" then Flight(\"AC404\", \"Toronto\", \"Paris\")\n  else null\nval fl = findFlight(\"AC404\")\nif(fl != null) println(\"Flight found: \" + fl.departure)\nelse println(\"Flight not found\")"}
{"id":"d60fae74-a63e-4983-bf58-d882623182a6","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def retrieveSeatMap(flightNo: String): Option[List[String]] =\n  Option(fakeJavaSeatMap(flightNo))\ndef fakeJavaSeatMap(flightNo: String): List[String] | Null =\n  if flightNo == \"LH123\" then List(\"1A\", \"1B\", \"2A\")\n  else null"}
{"id":"879857b0-b7e7-40f3-8021-a3f98a476aa3","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def fetchBaggageInfo(passengerId: String): String | Null =\n  if passengerId == \"P500\" then \"2 Checked Bags\"\n  else null\nval info = fetchBaggageInfo(\"P501\")\nif(info == null) println(\"No baggage information available.\")\nelse println(info)"}
{"id":"65d9247a-9e4c-49a1-b951-db052609eb62","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def getMealOption(ticketNumber: String): Option[String] =\n  Option(javaGetMeal(ticketNumber))\ndef javaGetMeal(ticketNumber: String): String | Null =\n  if ticketNumber == \"TK900\" then \"Vegetarian\"\n  else null"}
{"id":"9f3e2e24-7a17-4758-9604-060a30bdd753","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class FlightCrew(val crewName: String)\ndef assignCrewToFlight(flightNo: String): FlightCrew | Null =\n  if flightNo == \"SU205\" then FlightCrew(\"Alpha Crew\")\n  else null\nval assigned = assignCrewToFlight(\"AB321\")\nif(assigned != null) println(assigned.crewName)\nelse println(\"No crew assigned\")"}
{"id":"a0dd785d-dbe9-467a-862a-29c1186e51a1","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def findGateForFlight(flightNo: String): Option[String] =\n  Option(possiblyNullGate(flightNo))\ndef possiblyNullGate(flightNo: String): String | Null =\n  if flightNo == \"EK350\" then \"D4\"\n  else null"}
{"id":"97382aa2-a0f0-438d-8a3e-69379a6ff924","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def reservationStatus(reservationId: String): String | Null =\n  if reservationId == \"RS1000\" then \"Confirmed\"\n  else null\nval status = reservationStatus(\"RS2000\")\nif(status != null) println(\"Status: \" + status)\nelse println(\"Reservation status unknown\")"}
{"id":"40613ef3-bde6-4a2c-8179-655903e448c0","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def getFrequentFlyerPoints(cardNumber: String): Option[Int] =\n  Option(javaFrequentFlyer(cardNumber))\ndef javaFrequentFlyer(cardNumber: String): Integer | Null =\n  if cardNumber == \"FF7777\" then 14500 else null"}
{"id":"f694a35d-93e9-4223-a983-68b94089dbe4","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getLoungeAccess(passengerId: String): String | Null =\n  if passengerId == \"VIP001\" then \"Lounge A\"\n  else null\nval lounge = getLoungeAccess(\"VIP010\")\nif(lounge != null) println(\"Access: \" + lounge)\nelse println(\"No lounge access\")"}
{"id":"39caa0b3-ad9c-403f-8cbb-e4cb75d7e27c","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class BoardingPass(section: String, seat: String)\ndef getBoardingPassDetails(ticketNumber: String): Option[BoardingPass] =\n  Option(convertNullBoardingPass(javaBoardingPass(ticketNumber)))\ndef javaBoardingPass(ticketNumber: String): BoardingPass | Null =\n  if ticketNumber == \"TICK101\" then BoardingPass(\"B\", \"12C\") else null\ndef convertNullBoardingPass(bp: BoardingPass | Null): BoardingPass | Null = bp"}
{"id":"3413f43a-fbfe-4718-8176-969530a728cd","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getTravelInsuranceStatus(reservationId: String): String | Null =\n  if reservationId == \"RS333\" then \"Active\"\n  else null\nval tiStatus = getTravelInsuranceStatus(null)\nif(tiStatus == null) println(\"No insurance\")\nelse println(tiStatus)"}
{"id":"ab21673d-1325-46ed-9959-6f5cbe82b28b","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def scheduledDepartureDate(ticketNumber: String): Option[String] =\n  Option(javaDeparture(ticketNumber))\ndef javaDeparture(ticketNumber: String): String | Null =\n  if ticketNumber == \"T150\" then \"2024-07-01\"\n  else null"}
{"id":"4d6a290d-7adc-4a61-a69a-141d1f06a316","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def findPetReservation(passengerId: String): String | Null =\n  if passengerId == \"P888\" then \"Cat in Cargo\"\n  else null\nval pet = findPetReservation(\"P999\")\nif(pet == null) println(\"No pet reservation\")\nelse println(pet)"}
{"id":"552f8de4-f83d-48ec-b2b9-1ca04d50be9b","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def getSpecialAssistanceRequest(ticketNumber: String): Option[String] =\n  Option(possiblyNullAssistance(ticketNumber))\ndef possiblyNullAssistance(ticketNumber: String): String | Null =\n  if ticketNumber == \"AS101\" then \"Wheelchair\"\n  else null"}
{"id":"3da01753-b7ea-4583-851d-716061268a57","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def lookupCompanionTicket(primaryTicketNo: String): String | Null =\n  if primaryTicketNo == \"TK555\" then \"TK556\"\n  else null\nval companion = lookupCompanionTicket(\"TK000\")\nif(companion != null) println(\"Companion ticket: \" + companion)\nelse println(\"No companion ticket found\")"}
{"id":"4a10219d-eb04-418f-92d1-39b4434b85e0","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def checkUpgradeEligibility(passengerId: String): Option[Boolean] =\n  Option(javaUpgradeEligibility(passengerId)).map(_ == true)\ndef javaUpgradeEligibility(passengerId: String): java.lang.Boolean | Null =\n  if passengerId == \"PPlatinum\" then java.lang.Boolean.TRUE\n  else null"}
{"id":"b5195658-5ae0-46a6-b0ed-1f5809edc06f","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getBulkheadSeatAvailability(flightNo: String): String | Null =\n  if flightNo == \"NH12\" then \"Available\"\n  else null\nval bulkheadSeat = getBulkheadSeatAvailability(\"NH13\")\nif(bulkheadSeat == null) println(\"No bulkhead seat available\")\nelse println(\"Bulkhead seat: \" + bulkheadSeat)"}
{"id":"9c71a0a3-ed77-4bc8-84ba-a7e67fcf130f","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class Room(number: Int, name: String)\ndef findRoomByNumber(roomNumber: Int, rooms: List[Room]): Option[Room] =\n  rooms.find(_.number == roomNumber)\n"}
{"id":"51674937-ccdf-49c2-9b7f-d1f807a5829a","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def getGuestFullName(firstName: String, lastName: String): String =\n  if (firstName != null && lastName != null) firstName + \" \" + lastName else null\n"}
{"id":"45d391e0-121d-4adf-ae51-9b6c3229f448","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getReservationComment(comment: String): Option[String] =\n  Option(comment).filter(_.nonEmpty)\n"}
{"id":"dd841f36-050b-4060-a99d-20da52c49b96","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object NullHotelRoomService {\n  def getLastCheckedRoomStatus(roomService: NullRoomService): String =\n    val status = roomService.fetchRoomStatus()\n    if (status != null) status else \"Unknown\"\n}\n"}
{"id":"fec0c5ed-14e7-45f7-be0d-d48ec0db79eb","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def lookupBookingId(bookingId: String): Option[Int] =\n  Option(bookingId).flatMap(id => scala.util.Try(id.toInt).toOption)\n"}
{"id":"6971a627-d7d0-4442-9f41-1dc7f1c2e8ae","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def getDiscountCode(booking: Booking): String =\n  if (booking != null && booking.code != null) booking.code else null\n"}
{"id":"267dcf3b-f50f-47b3-b985-2fe6109e7fb0","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def safeGuestPhone(guestPhone: String): Option[String] =\n  Option(guestPhone).filter(_.matches(\"\\\\d{10}\"))\n"}
{"id":"f927fa78-7358-4cd3-bfc3-925feca267bb","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def findAvailableRoom(roomList: Array[Room]): Room =\n  for (r <- roomList) {\n    if (r != null && r.name != null && r.name.nonEmpty) return r\n  }\n  null\n"}
{"id":"effec191-de91-4b06-8868-0a04ba33a191","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class GuestProfile(email: String)\ndef getGuestEmail(profile: GuestProfile): Option[String] =\n  Option(profile.email).filter(_.contains(\"@\"))\n"}
{"id":"ce261de4-3560-4e26-90b5-fe3a8ec2e75a","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def fetchHotelRating(javaHotelService: JavaHotelService, hotelId: Int): Integer =\n  val rating = javaHotelService.getRating(hotelId)\n  if (rating != null) rating else -1\n"}
{"id":"9014aea5-931f-4e2f-9514-ad76817c9785","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def toOptionReservation(legacyReservation: LegacyReservation): Option[Reservation] =\n  Option(legacyReservation).map(lr => Reservation(lr.id, lr.guestName))\n"}
{"id":"dff0df3e-259e-4330-a0ad-4781f62e7f11","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def getCheckInDate(reservation: Reservation): String =\n  if (reservation != null && reservation.checkIn != null) reservation.checkIn else \"\"\n"}
{"id":"8d7465dd-7f0f-47ba-b7f5-9f55672913c6","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getOptionalSpecialRequest(specialRequest: String): Option[String] =\n  Option(specialRequest).filter(_.nonEmpty)\n"}
{"id":"daa1f5f8-0e3c-4287-a90f-cf4350c638ae","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def guestToUpperCase(guest: Guest): String =\n  if (guest != null && guest.fullName != null) guest.fullName.toUpperCase else \"\"\n"}
{"id":"7395d9c3-abcf-4bec-bd37-957cb600342d","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def nextAvailableRoom(floor: List[Room]): Option[Room] =\n  floor.find(_.available)\n"}
{"id":"f0bf79d0-3ad6-44e3-bd5b-75632d361ad8","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def cancelBooking(booking: HotelBooking): Boolean =\n  if (booking != null) {\n    booking.status = \"Canceled\"\n    true\n  } else {\n    false\n  }\n"}
{"id":"6712f8bb-7bd1-4415-93a3-8584e6e4cab1","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def findReservationByEmail(reservations: Seq[Reservation], email: String): Option[Reservation] =\n  reservations.find(r => Option(r.email).exists(_ == email))\n"}
{"id":"ce0e2007-633a-47ce-8f4b-2946419d4190","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def tryUpdateRoomStatus(roomService: RoomService, roomNumber: Int, status: String): Boolean =\n  val room = roomService.getRoom(roomNumber)\n  if (room != null) {\n    room.status = status\n    true\n  } else {\n    false\n  }\n"}
{"id":"4eaa2dd2-b44c-488d-afe9-d001ae11d8dc","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getLoyaltyPoints(guest: Guest): Option[Int] =\n  Option(guest).flatMap(g => Option(g.loyaltyPoints))\n"}
{"id":"69c97ce3-3b97-48d5-b776-42b741b11188","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def printReservationSummary(reservation: Reservation): Unit =\n  if (reservation != null && reservation.summary != null) {\n    println(reservation.summary)\n  }\n"}
{"id":"9480ab50-eebd-44b9-9591-bddfb8cb061a","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class GuestProfile(name: String, email: String)\ndef findGuestProfile(email: String): Option[GuestProfile] = {\n  val guest = javaGuestDatabaseFindByEmail(email) // returns null if not found\n  Option(guest)\n}"}
{"id":"b23ee68a-f8b5-42a6-8731-869ad0d2106f","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def lookupReservationById(id: Long): Reservation = {\n  val reservation = legacyReservationLookup(id) // may return null\n  if (reservation == null) null else reservation\n}"}
{"id":"ef18041d-f41f-4485-a643-a2fcc8dbff55","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getAvailableRoomNumber(roomList: List[Int]): Option[Int] =\n  roomList.headOption"}
{"id":"79eb469c-5299-4e19-b7d4-c62d7b4caab2","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def getGuestPhoneNumber(guest: GuestProfile): String = {\n  if (guest.phoneNumber == null) \"Unknown\"\n  else guest.phoneNumber\n}"}
{"id":"33fe8b2c-15f8-4be1-8af8-7aecc827b373","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def retrieveBooking(confirmationNumber: String): Option[Booking] = {\n  val booking = possibleNullBookingLookup(confirmationNumber) // may return null\n  Option(booking)\n}"}
{"id":"6b64a906-1a4a-4734-a386-cdc23ffbcf5d","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def cancelRoom(room: Room): Boolean = {\n  if (room == null) false\n  else {\n    room.status = \"Cancelled\"\n    true\n  }\n}"}
{"id":"a7b72610-ac9e-4894-beb8-bed289e88634","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def safeGuestEmail(profile: GuestProfile): Option[String] =\n  Option(profile.email)"}
{"id":"e0b37110-55ee-4a4f-a7ba-e4a0b31edbca","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def assignRoomToReservation(reservation: Reservation, room: Room): Reservation = {\n  if (reservation == null || room == null) null\n  else {\n    reservation.copy(assignedRoom = Some(room))\n  }\n}"}
{"id":"74450f16-16cd-4bd5-b4c5-588b6bd086fb","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def guestLoyaltyStatus(membershipNumber: String): Option[String] = {\n  Option(lookupLoyaltyProgram(membershipNumber)).flatMap(_.status)\n}"}
{"id":"3e530552-0dbb-4272-8460-5c4cb44c62ec","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def createBookingOrNull(guest: GuestProfile, room: Room): Booking = {\n  if (guest == null || room == null) null\n  else Booking(guest, room)\n}"}
{"id":"ffae994c-9bec-456f-996e-f8f79f720bcb","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getSpecialRequest(booking: Booking): Option[String] =\n  Option(booking.specialRequest)"}
{"id":"8dd73aeb-7b50-43d4-9e02-c447047421e5","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def checkPayment(paymentRef: String): Payment = {\n  val payment = legacyPaymentCheck(paymentRef) // could be null\n  if (payment != null) payment else null\n}"}
{"id":"2cbe884a-458b-44f3-9412-8cfc51a69132","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def wrapNullAmenity(amenity: JavaAmenity): Option[Amenity] =\n  Option(amenity)"}
{"id":"1e1a44f3-b5aa-4e3a-a358-b90a44782ae2","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def updateGuestRewardsPoints(guest: GuestProfile, points: Int): GuestProfile = {\n  if (guest != null) {\n    guest.copy(rewardsPoints = guest.rewardsPoints + points)\n  } else null\n}"}
{"id":"974fe4ef-8b3c-4367-ae49-07a06d6aee56","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def reservationNotesSummary(reservation: Reservation): String =\n  Option(reservation.notes).getOrElse(\"No notes available.\")"}
{"id":"ab56ad3f-97c9-45e7-b3ea-8d7312baf646","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def findRoomServiceById(id: Int): RoomService = {\n  val service = legacyFindService(id)\n  if (service == null) null else service\n}"}
{"id":"7a86b713-5d28-45c3-bb05-13a81047e81e","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getReservationGuestName(booking: Booking): Option[String] =\n  Option(booking.guest).map(_.name)"}
{"id":"5b029a00-3d73-4290-a298-e19e4f256cee","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def setReservationStatus(reservation: Reservation, status: String): Unit = {\n  if (reservation != null) {\n    reservation.status = status\n  }\n}"}
{"id":"98987b98-0169-40b9-8af9-a40f2c59b595","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def roomUpgradeOption(room: Room): Option[String] =\n  Option(room.upgradeAvailable).filter(_.nonEmpty)"}
{"id":"00c9dc60-fdbf-4e15-9607-17fe43406b4a","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def transferPayment(payment: Payment, toAccount: String): Boolean = {\n  if (payment == null || toAccount == null) false\n  else {\n    performTransfer(payment, toAccount)\n    true\n  }\n}"}
{"id":"a67f1949-814d-43c9-8c6f-5f8c52a0529c","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class DeliveryAddress(street: String, city: String, postalCode: String)\n\ndef findAddressByCustomerId(customerId: Int): Option[DeliveryAddress] = {\n  val address = Database.getCustomerDeliveryAddress(customerId)\n  Option(address)\n}"}
{"id":"9965bd04-1409-4e62-a5bf-8fe6189f0e42","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def calculateEstimatedArrivalTime(order: Order): Option[Int] = {\n  Option(order.pickupTime).flatMap { pickup =>\n    Option(order.estimatedTravelTime).map { travelTime =>\n      pickup + travelTime\n    }\n  }\n}"}
{"id":"88602c3a-50ff-449c-828f-52653694898e","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class Courier(name: String, currentLocation: Option[String])\n\ndef isCourierNearby(courier: Courier, location: String): Boolean = {\n  courier.currentLocation.contains(location)\n}"}
{"id":"f49fc281-039c-4d01-a166-941270cba3f5","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getOrderTipAmount(order: Order): Option[Double] = Option(order.tipAmount)\n\ndef formatTipAmount(order: Order): String = {\n  getOrderTipAmount(order).map(_.toString).getOrElse(\"No tip\")\n}"}
{"id":"d278857f-c140-42ad-9a27-521501fd5815","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def findAssignedCourier(orderId: Int): Option[Courier] = {\n  val courier = CourierDatabase.getCourierForOrder(orderId)\n  Option(courier)\n}"}
{"id":"64e59bee-bf5e-4ea4-82e4-7ae0220f5709","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def calculateDiscountCost(cost: Double, discount: Option[Double]): Double = {\n  discount.fold(cost)(d => cost - d)\n}"}
{"id":"f5254d19-5bf7-4177-a805-9d4aebd72ee4","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getDeliveryInstructions(orderId: Int): Option[String] = {\n  Option(MockJavaApis.fetchDeliveryInstructions(orderId))\n}\n\ndef showInstructions(orderId: Int): String = {\n  getDeliveryInstructions(orderId).getOrElse(\"No instructions\")\n}"}
{"id":"7a5a4a07-52c4-4942-9c1f-0bdb508e2bc7","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class FoodOrder(items: List[String], notes: Option[String])\n\ndef hasSpecialInstructions(order: FoodOrder): Boolean = {\n  order.notes.exists(_.nonEmpty)\n}"}
{"id":"154de59f-5600-4b74-bd16-d22f778f6d41","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getAvailableVehicleTypes(driverId: Int): Option[List[String]] = {\n  Option(JavaVehicleApi.getVehicleList(driverId)).map(_.toList)\n}"}
{"id":"234d6634-0b78-419c-b710-4aea8ac1e64c","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def nextDropoffAddress(route: List[DeliveryAddress]): Option[DeliveryAddress] = {\n  route.headOption\n}"}
{"id":"71ada258-ce3e-4043-b209-58b9f1d735ca","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def setOrderPickupTime(order: Order, time: Int): Order = {\n  if (order != null) {\n    order.pickupTime = time\n    order\n  } else {\n    null\n  }\n}"}
{"id":"5a82ac89-1aa5-4b43-b4a3-74c122e7d8f7","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def checkIfDriverIsAvailable(driver: Driver): Boolean = {\n  if (driver.status != null && driver.status == \"available\") {\n    true\n  } else {\n    false\n  }\n}"}
{"id":"25982cf5-bc61-4287-95c5-75ed67649e1b","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getRestaurantPhoneNumber(restaurant: Restaurant): String = {\n  if (restaurant.phoneNumber != null) {\n    restaurant.phoneNumber\n  } else {\n    null\n  }\n}"}
{"id":"2ee2116e-1a5a-42e6-bb02-380a61ad1d7e","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def assignOrderToCourier(order: Order, courier: Courier): Boolean = {\n  if (order != null && courier != null) {\n    order.assignedCourier = courier\n    true\n  } else {\n    false\n  }\n}"}
{"id":"39e46588-e70f-43b0-a125-bb943137999c","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getPaymentMethod(order: Order): PaymentMethod = {\n  if (order.payment != null) {\n    order.payment\n  } else {\n    null\n  }\n}"}
{"id":"b10053c2-dfa5-4cf1-a192-cff20786f58d","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def attemptToFetchItemFromWarehouse(itemCode: String): InventoryItem = {\n  val item = WarehouseApi.javaLikeFetchItem(itemCode)\n  if (item != null) item else null\n}"}
{"id":"07c51c0a-6f00-4a37-9df9-051f0d68588c","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getScheduledDeliveryTime(order: Order): Integer = {\n  if (order.scheduledTime != null) {\n    order.scheduledTime\n  } else {\n    null\n  }\n}"}
{"id":"dd21ff56-7328-470a-a71b-9694eecf2bda","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getDriverEmail(driver: Driver): String = {\n  if (driver != null && driver.email != null) {\n    driver.email\n  } else {\n    null\n  }\n}"}
{"id":"99cb9d1e-df63-4db3-bc13-0b66667adeb5","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def findFirstActiveOrder(orders: Array[Order]): Order = {\n  for (o <- orders) {\n    if (o != null && o.status != null && o.status == \"active\") {\n      return o\n    }\n  }\n  null\n}"}
{"id":"0cb0fd64-d774-4d14-b068-e7e4c8841935","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getLastKnownCourierLocation(courier: Courier): String = {\n  if (courier != null && courier.lastLocation != null) {\n    courier.lastLocation\n  } else {\n    null\n  }\n}"}
{"id":"c44a435a-fb86-4d1d-bac1-8b52a05e65e5","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class DeliveryVehicle(id: String, currentOrderId: Option[String])\ndef getActiveOrder(vehicle: DeliveryVehicle): Option[String] =\n  vehicle.currentOrderId"}
{"id":"aeb88fdc-cd6d-4391-af79-9160b03fa418","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def findCourierByPhone(phone: String): Courier =\n  if (phone.length == 0) null\n  else new Courier(phone)\nclass Courier(number: String)"}
{"id":"d8ce688a-5a17-4c90-9030-2f032279284d","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def fetchRestaurantPartner(name: String): Option[RestaurantPartner] =\n  Option(possibleNullRestaurantPartner(name))\nclass RestaurantPartner(val name: String)\ndef possibleNullRestaurantPartner(name: String): RestaurantPartner =\n  if (name.startsWith(\"A\")) new RestaurantPartner(name) else null"}
{"id":"6e8dc059-5a64-452b-a1bc-9028ad5c837f","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Order(val id: String, val assignedCourier: Courier)\ndef checkAssignedCourier(order: Order): String =\n  if (order.assignedCourier != null) order.assignedCourier.number\n  else \"No courier assigned\""}
{"id":"99f724e1-17e2-4ea4-a2e4-ab38c261d91a","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getDeliveryWindow(schedule: DeliverySchedule): Option[(Int, Int)] =\n  Option(schedule.windowStart).flatMap { start =>\n    Option(schedule.windowEnd).map { end => (start, end) }\n  }\nclass DeliverySchedule(val windowStart: java.lang.Integer, val windowEnd: java.lang.Integer)"}
{"id":"a62a513b-988a-4fc9-93aa-3c173cff712a","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Route(val waypoints: Array[String])\ndef getFirstWaypoint(route: Route): String =\n  if (route.waypoints != null && route.waypoints.length > 0) route.waypoints(0)\n  else null"}
{"id":"b35059be-4a45-4228-a7ee-0380486a729a","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def safeGetCustomerNote(orderNote: String): Option[String] =\n  Option(orderNote).filter(_.nonEmpty)"}
{"id":"9312f94b-9361-42e9-991d-44eb3a4d62c8","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliveryAssignment(val packageId: String, val driver: Driver)\nclass Driver(val driverName: String)\ndef getDriverName(assignment: DeliveryAssignment): String =\n  if (assignment.driver != null) assignment.driver.driverName\n  else \"Unknown\""}
{"id":"cff781aa-0b1f-4f19-a650-0ec8af918115","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def noteSummary(note: String): Option[Int] =\n  Option(note).map(_.length).filter(_ > 10)"}
{"id":"f5d9ace5-3437-4fe0-a5ec-59a96b06d93f","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getActiveSlot(slots: Array[TimeSlot]): TimeSlot =\n  if (slots != null && slots.length > 0) slots(0) else null\nclass TimeSlot(val start: Int, val end: Int)"}
{"id":"e5a89ca5-26ff-493a-af43-547049d0b9ed","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getCourierLocation(city: String): Option[Location] =\n  Option(queryDatabaseForLocation(city))\nclass Location(val latitude: Double, val longitude: Double)\ndef queryDatabaseForLocation(city: String): Location =\n  if (city == \"New York\") new Location(40.7128, -74.0060) else null"}
{"id":"61d54fd6-56d9-4f85-9200-b3804bda5a9b","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliveryRequest(var status: String)\ndef isRequestPending(request: DeliveryRequest): Boolean =\n  if (request != null && request.status != null && request.status == \"Pending\")\n    true\n  else false"}
{"id":"974a714e-4fdb-4797-b106-3cfe653f3500","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def safeDriverLicense(driver: Driver): Option[String] =\n  Option(driver.licenseNumber).map(_.toUpperCase)\nclass Driver(val licenseNumber: String)"}
{"id":"fab6f382-431b-456d-be1f-5cacb3e55229","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Package(val description: String)\ndef packageDescription(pkg: Package): String =\n  if (pkg == null || pkg.description == null) \"No description\" else pkg.description"}
{"id":"31181861-1e86-45e7-8ef6-2ab96fdc2997","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getFoodTemperature(order: Order): Option[Double] =\n  Option(order.temperature).filter(_ > 0)\nclass Order(val temperature: java.lang.Double)"}
{"id":"67f2d55b-1a1f-447f-8d49-459d15d933b1","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliveryCustomer(val rating: java.lang.Double)\ndef getRating(customer: DeliveryCustomer): Double =\n  if (customer != null && customer.rating != null) customer.rating.doubleValue()\n  else 0.0"}
{"id":"bf7bc9f4-48ff-4193-92af-a1d4e157e5c6","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getLatestDispatchId(dispatch: DispatchData): Option[String] =\n  Option(dispatch.latestId)\nclass DispatchData(val latestId: String)"}
{"id":"47d24e90-5029-4fa3-b7f6-4e25a395c1f5","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Vehicle(val registration: String)\ndef getVehicleId(vehicle: Vehicle): String =\n  if (vehicle != null) vehicle.registration else null"}
{"id":"8fe705dc-e7ee-4084-a833-0e9fb34b41a3","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getCourierBonus(courier: Courier): Option[Int] =\n  Option(courier.bonus).map(_ * 2)\nclass Courier(val bonus: java.lang.Integer)"}
{"id":"12ce169c-9c1f-4ec9-a9cc-8aa6d5fe8c19","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Restaurant(val menu: Array[String])\ndef getFirstMenuItem(restaurant: Restaurant): String =\n  if(restaurant.menu != null && restaurant.menu.length > 0) restaurant.menu(0)\n  else null"}
{"id":"f8854ffd-93f7-4147-9471-1f393d4dbfdc","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Track(title: String, duration: Int)\ndef findTrackByTitle(tracks: List[Track], title: String): Option[Track] =\n  tracks.find(_.title == title)\n\nval playlist = List(Track(\"Sunrise\", 200), Track(\"Twilight\", 180))\nval result: Option[Track] = findTrackByTitle(playlist, \"Twilight\")\nresult.map(_.duration).getOrElse(0)"}
{"id":"618fd274-fe2b-4601-afb8-68a39e03050e","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def getAlbumArtUrl(albumId: String): String =\n  null\n\nval artUrl = getAlbumArtUrl(\"al987\")\nif (artUrl != null) {\n  artUrl.length\n} else {\n  0\n}"}
{"id":"e6f0735d-340d-4d0b-9f86-9d61b59539d8","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def getCurrentListener(userId: String): String =\n  if userId == \"\" then null else \"listenerName\"\n\nval listener = getCurrentListener(\"\")\nif (listener != null) {\n  listener.toUpperCase\n} else {\n  \"Guest\"\n}"}
{"id":"dcd76179-8716-473b-9c94-6ed709440a1e","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def fetchArtistBio(name: String): Option[String] =\n  Option(javaArtistBio(name))\n\ndef javaArtistBio(artist: String): String =\n  if artist == \"Luna\" then \"Dream-pop artist.\" else null\n\nval bio = fetchArtistBio(\"Nova\").getOrElse(\"No bio available.\")"}
{"id":"e1a3b080-270a-4b68-a3c2-84bce9e4bfaf","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Playlist(id: String, tracks: List[String])\ndef playlistDuration(playlist: Option[Playlist], durationLookup: String => Int): Int =\n  playlist.map(_.tracks.map(durationLookup).sum).getOrElse(0)\nval emptyPlaylist = None\nplaylistDuration(emptyPlaylist, _ => 120)"}
{"id":"479d862a-7d73-4616-b992-c2e6784bbb6d","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def getFeaturedTrack(): String =\n  null\n\nval featured = getFeaturedTrack()\nif (featured != null) {\n  println(featured)\n} else {\n  println(\"No featured track.\")\n}"}
{"id":"9aed577d-b366-416d-81bd-7c1cf507c1fd","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def findLyrics(trackId: String): Option[String] =\n  Option(simulateJavaLyrics(trackId))\ndef simulateJavaLyrics(id: String): String = if id == \"tx123\" then \"Sing along!\" else null\nval lyricsText = findLyrics(\"tx000\").fold(\"No lyrics found.\")(_.toUpperCase)"}
{"id":"8898a240-86c6-47fc-aacf-0079ce9586e8","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class Library(val tracks: Array[String]) {\n  def getTrackByIndex(idx: Int): String =\n    if (idx >= 0 && idx < tracks.length) tracks(idx) else null\n}\nval library = new Library(Array(\"Melody\", \"Harmony\"))\nval t = library.getTrackByIndex(5)\nif (t != null) t.toLowerCase() else \"No track\""}
{"id":"25ea3990-9b7f-4713-bb0a-3f46aedff574","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"val possibleNextTrack: String = null\nval playing: Boolean = if (possibleNextTrack != null) true else false"}
{"id":"fec92fc1-d8ab-4c34-a0f9-608f23ff06fe","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def safeGetPodcastTitle(x: String): Option[String] =\n  Option(x)\nsafeGetPodcastTitle(null).getOrElse(\"Untitled Podcast\")"}
{"id":"31cc490b-28bc-460b-979c-eb65418ab3f6","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Artist(name: String, genre: String)\ndef selectArtist(name: String): Option[Artist] =\n  Option(javaArtistLookup(name))\ndef javaArtistLookup(n: String): Artist = if n == \"SkyFlow\" then Artist(\"SkyFlow\", \"Ambient\") else null\nselectArtist(\"Moon\") match\n  case Some(artist) => artist.genre\n  case None        => \"Unknown\""}
{"id":"e5c5d918-a236-445c-8a94-31ff58f482ad","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def fetchStreamUrl(songId: String): String =\n  null\nval url = fetchStreamUrl(\"track981\")\nif (url == null) println(\"Stream unavailable\")\nelse println(url)"}
{"id":"f3b25cc8-e27d-48e0-99c0-8d5b97d66110","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"val cachedAlbum: String = null\nif (cachedAlbum == null) println(\"Fetch from server\") else println(cachedAlbum)"}
{"id":"5e982199-641e-4f6b-a49c-2504849a3672","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def wrapJavaSongData(data: String): Option[String] =\n  Option(data)\nval safeData = wrapJavaSongData(null).getOrElse(\"Unavailable song data\")"}
{"id":"351ed909-7ca2-47c1-8fa0-79c6dfcb2c1e","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class UserProfile(id: String, subscription: Option[String])\ndef hasPremiumAccess(user: UserProfile): Boolean =\n  user.subscription.exists(_ == \"Premium\")\nhasPremiumAccess(UserProfile(\"u001\", None))"}
{"id":"6be2fed8-0ae3-4f6f-a318-dff7a5d200a1","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def recentPlaylist(owner: String): Option[String] =\n  val result: String = if owner == \"DJX\" then \"Late Night Mix\" else null\n  Option(result)\nrecentPlaylist(\"Alice\").getOrElse(\"No playlist found\")"}
{"id":"361ba87a-4149-4d4a-81bd-fcad5fc83543","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class Mixer {\n  def getActiveSession(id: String): String = if (id == \"MX001\") \"ActiveSession\" else null\n}\nval mixer = new Mixer\nval session = mixer.getActiveSession(\"OTHERID\")\nif (session != null) println(session) else println(\"No session\")"}
{"id":"41f1c25e-3ff3-4ea0-b36a-de4ad6097bf2","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def getUserQueue(userId: String): Array[String] = null\nval queue = getUserQueue(\"Adam\")\nif (queue != null && queue.length > 0) println(\"Queue loaded\") else println(\"Queue empty\")"}
{"id":"ae7634dd-38b4-4d41-a4ed-980f051e226b","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def playlistOwner(playlistId: String): Option[String] =\n  val result = if playlistId == \"Top100\" then \"curator89\" else null\n  Option(result).filter(_.nonEmpty)\nplaylistOwner(\"DailyMix\").getOrElse(\"Unknown Owner\")"}
{"id":"6dd9787e-cd8a-41bf-abff-a9a8fb8128a0","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def updateCurrentTrack(current: String): String =\n  if (current == null) \"Unknown Track\" else current\nupdateCurrentTrack(null)"}
{"id":"f194b176-5c7a-4d7e-9218-bcd0d7792eba","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Track(title: String, artist: String)\ndef findTrackByTitle(tracks: List[Track], title: String): Option[Track] =\n  tracks.find(_.title == title)\n\nval allTracks = List(Track(\"Dreamscape\", \"Nia Echo\"))\nval result = findTrackByTitle(allTracks, \"Dreamscape\").getOrElse(Track(\"Unknown\", \"Unknown\"))"}
{"id":"97c739df-1e2a-4adf-9273-5e6462c12db3","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def fetchPlaylistIdFromAPI(playlistName: String): String =\n  if playlistName == \"focus\" then \"pl12345\" else null\n\nval focusId = fetchPlaylistIdFromAPI(\"energy\")\nif (focusId == null) println(\"Playlist not found\") else println(s\"Playlist ID: $focusId\")"}
{"id":"de4ccd36-6839-4465-8b39-a96d472da4d8","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def getAlbumCoverOrNone(albumCover: String | Null): Option[String] =\n  Option(albumCover)\n\nval coverOption = getAlbumCoverOrNone(null)\nval coverUrl = coverOption.getOrElse(\"/images/default-cover.jpg\")"}
{"id":"9d628406-c496-48f5-ac3e-538b192851c4","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class AudioStream(var codec: String)\ndef initializeCodec(stream: AudioStream): Unit =\n  if (stream != null) stream.codec = \"AAC\"\nval brokenStream: AudioStream = null\ninitializeCodec(brokenStream)"}
{"id":"ec4c3646-7a57-4f71-990b-ddba1295f9d7","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class UserSetting(equalizer: String)\ndef userEqualizerSetting(setting: Option[UserSetting]): String =\n  setting.map(_.equalizer).getOrElse(\"flat\")\nval userSetting: Option[UserSetting] = None\nval eqValue = userEqualizerSetting(userSetting)"}
{"id":"b5ada3ed-ce47-4c5c-838c-7166198df37f","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def lookupArtistFromExternalAPI(name: String): String =\n  if name == \"Ava Pulse\" then \"Ava Pulse\" else null\nval artistRaw = lookupArtistFromExternalAPI(\"Unknown Artist\")\nif (artistRaw == null) println(\"Artist not found\") else println(artistRaw)"}
{"id":"0d9d34d7-9002-493f-bbc8-5b51d481798c","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def safeQueueTrack(potentialTrack: String | Null): Option[String] =\n  Option(potentialTrack)\nval current = safeQueueTrack(\"Shadow Dance\")\nval next = safeQueueTrack(null)"}
{"id":"d4db7e1f-23f3-4997-a013-48b3a327154b","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def extractTrackIdFromUrl(url: String): String =\n  if (url.contains(\"track/\")) \"t0019\" else null\nval trackId = extractTrackIdFromUrl(\"music.com/album/track/heatwave\")\nif (trackId != null) println(s\"ID: $trackId\")"}
{"id":"4d009c7a-5ac0-41a5-9d11-864f428002e5","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def findPremiumSubscription(user: String): Option[String] =\n  if user == \"premiumUser\" then Some(\"active\") else None\nval subStatus = findPremiumSubscription(\"casualListener\").getOrElse(\"inactive\")"}
{"id":"b7c2bf4b-719b-48ee-9a28-7f72218917d6","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def fetchLyrics(song: String): String =\n  if song == \"Silent Code\" then \"Encrypted silence...\" else null\nval lyrics = fetchLyrics(\"Silent Code\")\nif (lyrics != null) println(lyrics)"}
{"id":"a212299c-d260-44ba-88fe-71f5329d1c78","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def findRecentlyPlayedSong(recent: List[String]): Option[String] =\n  recent.headOption\nval song = findRecentlyPlayedSong(Nil).getOrElse(\"No recent tracks\")"}
{"id":"e3f7d023-35c6-40d1-a359-c11afd6a6d4a","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class StreamingSession(var currentUser: String)\ndef checkUserInSession(session: StreamingSession): Boolean =\n  if (session == null) false else session.currentUser == \"Patricia\"\nval badSession: StreamingSession = null\nval valid = checkUserInSession(badSession)"}
{"id":"a652aa4b-a7e3-4085-963b-558d2a18eef7","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def albumArtUrl(coverRaw: String | Null): String =\n  Option(coverRaw).getOrElse(\"/art/default.jpg\")\nval imageLink = albumArtUrl(null)"}
{"id":"a9a2c149-77bb-443c-a31a-65602bf24240","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def externalAdProvider(song: String): String =\n  if (song.length > 5) \"ad123\" else null\nval adId = externalAdProvider(\"Mix\")\nif (adId == null) println(\"No ad available.\")"}
{"id":"a966b11e-6578-4f87-a2bd-0db6f8b286da","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def getDeviceName(rawName: String | Null): Option[String] =\n  Option(rawName).filter(_.nonEmpty)\nval device = getDeviceName(\"\")\nval name = device.getOrElse(\"Unknown Device\")"}
{"id":"529eb73d-3974-4c85-9992-69a7f1743034","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def retrieveUserProfileFromLegacy(name: String): String =\n  if (name.startsWith(\"guest\")) null else s\"Profile for $name\"\nval profile = retrieveUserProfileFromLegacy(\"guest47\")\nif (profile == null) println(\"No profile.\")"}
{"id":"1cf736b4-328e-4978-b3c6-043e7b0aa362","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Recommendation(track: String)\ndef recommendTrack(rec: Option[Recommendation]): String =\n  rec.map(_.track).fold(\"Try Discover Weekly\")(_.toUpperCase)\nval msg = recommendTrack(Some(Recommendation(\"Chillwave Vibes\")))"}
{"id":"3927283a-ea84-46f7-b520-e718e8703f5e","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def javaSearchPlaylist(name: String): String =\n  if (name == \"focus\") \"focus-list-983\" else null\nval res = javaSearchPlaylist(\"study\")\nif (res != null && res.length > 5) println(res)"}
{"id":"d0cd84f2-f698-4297-ad9e-cc71963c551b","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def getBitrateConfig(bitrate: String | Null): Option[String] =\n  Option(bitrate)\nval setBitrate = getBitrateConfig(\"320kbps\").exists(_ == \"320kbps\")"}
{"id":"f3732c71-d3f8-46fd-a86d-320a4b74c007","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def findCollabFeatureTrack(name: String): String =\n  if (name.contains(\"feat.\")) name else null\nval track = findCollabFeatureTrack(\"Sol Resonance feat. Jade Lotus\")\nif (track != null) println(s\"Found collab: $track\")"}
{"id":"5d255bbc-7c94-4e06-9846-7e3d17725f62","timestamp":1746097922649,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class UserProfile(username: String, displayName: String)\ndef findTutorProfile(username: String): Option[UserProfile] =\n  val javaProfile: UserProfile | Null = getJavaTutorProfile(username)\n  Option(javaProfile)\ndef getJavaTutorProfile(username: String): UserProfile | Null =\n  if username == \"alice\" then\n    UserProfile(\"alice\", \"Alice Tutor\")\n  else\n    null"}
{"id":"688a24e6-1611-446c-9519-1c9958d7addf","timestamp":1746097922649,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getStudentEmail(studentId: Int): String = {\n  val email: String = fetchEmailFromExternalSystem(studentId)\n  if (email != null) email else \"no-email@notfound.com\"\n}\ndef fetchEmailFromExternalSystem(studentId: Int): String =\n  if (studentId == 42) \"bob@student.com\" else null"}
{"id":"a487e654-ea40-4c57-aa69-533ddb16cb11","timestamp":1746097922649,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Lesson(material: String, isUploaded: Boolean)\ndef getUploadedLesson(materialId: String): Option[Lesson] =\n  val lesson: Lesson | Null = legacyLessonFinder(materialId)\n  Option(lesson)\ndef legacyLessonFinder(materialId: String): Lesson | Null =\n  if materialId == \"pdf123\" then Lesson(\"Scala Basics.pdf\", true) else null"}
{"id":"d8c24fcb-5815-4a62-9cd6-27c8c964d112","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getTutorRating(tutorName: String): Int = {\n  val rating: java.lang.Integer = fetchRatingFromLegacySystem(tutorName)\n  if (rating != null) rating else 0\n}\ndef fetchRatingFromLegacySystem(tutorName: String): java.lang.Integer =\n  if (tutorName == \"Chris\") 5 else null"}
{"id":"c4d4add0-aa6f-44d5-bda5-46c91d39dddd","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def studentTokenOption(token: String | Null): Option[String] =\n  Option(token)\n\ndef logStudentActivity(token: String | Null): String =\n  studentTokenOption(token).map(t => s\"Logged in: $t\").getOrElse(\"Anonymous login\")"}
{"id":"233c8765-df37-4396-92fd-52497dab01e3","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class Course(val title: String, val instructor: String)\ndef findCourseByTitle(title: String): Course | Null =\n  if (title == \"Scala Programming\") new Course(\"Scala Programming\", \"Emma Tutor\") else null\n\ndef getInstructor(course: Course | Null): String =\n  if (course != null) course.instructor else \"No instructor assigned\""}
{"id":"51e446ff-2291-44f1-b8a2-df5b100a756f","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def parseAssignmentSubmission(submission: String | Null): Option[String] =\n  Option(submission).filter(_.length > 10).map(_.trim)\n\ndef processSubmission(submission: String | Null): String =\n  parseAssignmentSubmission(submission).getOrElse(\"Invalid submission\")"}
{"id":"8edf983f-fae0-44bb-953b-75bab6ed31ea","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getStudentSession(sessionId: String): StudentSession = {\n  val session: StudentSession = fetchSessionFromDb(sessionId)\n  if (session != null) session else null\n}\nclass StudentSession(val sid: String)\ndef fetchSessionFromDb(sessionId: String): StudentSession =\n  if (sessionId == \"sess123\") new StudentSession(\"sess123\") else null"}
{"id":"8faae714-be90-40d5-ad98-9bddd4235db2","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def maybeGetTutorBio(tutorId: Int): Option[String] =\n  Option(fetchBioFromLegacySystem(tutorId)).filter(_.nonEmpty)\ndef fetchBioFromLegacySystem(tutorId: Int): String | Null =\n  if tutorId == 1 then \"Scala specialist with 10 years experience\" else null"}
{"id":"117545a0-0cc3-4f58-9508-d3ed4d16d781","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def courseDescriptionOrFallback(courseId: String): String = {\n  val description: String = fetchCourseDescFromLegacy(courseId)\n  if (description != null) description else \"Description not available.\"\n}\ndef fetchCourseDescFromLegacy(courseId: String): String =\n  if (courseId == \"scala-course\") \"Learn Scala 3\" else null"}
{"id":"e438c4e1-01de-409a-b0f3-1527e8694470","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Feedback(content: String)\ndef getFeedback(studentId: Int): Option[Feedback] =\n  Option(legacyFeedbackService(studentId))\ndef legacyFeedbackService(studentId: Int): Feedback | Null =\n  if studentId == 100 then Feedback(\"Great lesson!\") else null"}
{"id":"68deb65d-d558-4468-82ac-9901545815cb","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getLessonMaterial(materialId: String): String = {\n  val material: String = callLegacyMaterialService(materialId)\n  if (material != null) material else \"Material not found\"\n}\ndef callLegacyMaterialService(materialId: String): String =\n  if (materialId == \"mat21\") \"Calculus.pdf\" else null"}
{"id":"d48ba323-cfc2-454d-996f-5d8088645e21","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def findMeetingLink(sessionId: String | Null): Option[String] =\n  Option(sessionId).flatMap(id => Option(getLegacyMeetingLink(id)))\ndef getLegacyMeetingLink(id: String): String | Null =\n  if id == \"s-17\" then \"https://meetings.platform.com/s-17\" else null"}
{"id":"fece6f15-8ac2-4745-938c-6add4ec45350","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getTutorAvatarOrDefault(tutorUsername: String): String = {\n  val avatarUrl: String = fetchAvatarFromLegacy(tutorUsername)\n  if (avatarUrl != null) avatarUrl else \"default-avatar.png\"\n}\ndef fetchAvatarFromLegacy(tutorUsername: String): String =\n  if (tutorUsername == \"aliceTutor\") \"avatar-alice.png\" else null"}
{"id":"55a2f0fd-aa91-47f6-8861-2a1ce890cddb","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def studentOptionalPhone(phone: String | Null): Option[String] =\n  Option(phone).filter(_.startsWith(\"+\"))\ndef displayStudentContact(phone: String | Null): String =\n  studentOptionalPhone(phone).getOrElse(\"No phone on file\")"}
{"id":"c711acfe-d85c-4ba3-acd5-7320fa946731","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class Session(val code: String)\ndef retrieveSessionOrNull(sessionCode: String): Session | Null =\n  if (sessionCode == \"A1B2\") new Session(\"A1B2\") else null\n\ndef sessionCodeOrEmpty(session: Session | Null): String =\n  if (session != null) session.code else \"\""}
{"id":"d2779667-86c6-4a74-86cf-49245fac2f9e","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def getCourseOption(courseId: String): Option[String] =\n  Option(legacyCourseLookup(courseId))\ndef legacyCourseLookup(courseId: String): String | Null =\n  if courseId == \"C-101\" then \"Intro to Machine Learning\" else null"}
{"id":"3d5d6240-5f75-45c6-b4c2-be778f2529c3","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getQuizResult(studentId: Int): java.lang.Integer = {\n  val result: java.lang.Integer = oldQuizResultRetriever(studentId)\n  if (result != null) result else 0\n}\ndef oldQuizResultRetriever(studentId: Int): java.lang.Integer =\n  if (studentId == 11) 80 else null"}
{"id":"d42f23d5-8b37-4f9e-ab7a-542ed2889b9d","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def extractOptionalRecordingUrl(meetingId: String): Option[String] =\n  Option(legacyRecordingUrlRetriever(meetingId))\ndef legacyRecordingUrlRetriever(meetingId: String): String | Null =\n  if meetingId == \"R987\" then \"https://videos.platform.com/rec987\" else null"}
{"id":"2ff4dc6b-312f-44dd-8356-13d24f8f7a9f","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def findStudentNotes(studentId: Int): String = {\n  val notes: String = getLegacyNotes(studentId)\n  if (notes != null) notes else \"No notes found\"\n}\ndef getLegacyNotes(studentId: Int): String =\n  if (studentId == 30) \"Reviewed math concepts.\" else null"}
{"id":"218026da-48d8-4f1b-a4cb-29ff10045f14","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Tutor(id: Int, fullName: String)\ndef getTutorById(id: Int): Option[Tutor] =\n  val tutor = fetchTutorFromLegacySystem(id)\n  Option(tutor)\n\ndef fetchTutorFromLegacySystem(id: Int): Tutor =\n  if id == 101 then Tutor(101, \"Emily Carter\") else null\nval maybeTutor = getTutorById(101)\nval tutorName = maybeTutor.map(_.fullName).getOrElse(\"Unknown Tutor\")"}
{"id":"6597b7c4-59c9-404a-a3f3-b2f73c4e0b07","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getStudentEmail(studentUsername: String): String = {\n  val email = fetchStudentEmail(studentUsername)\n  if (email != null) email else \"email@notfound.edu\"\n}\ndef fetchStudentEmail(studentUsername: String): String =\n  if (studentUsername == \"hayley123\") \"hayley@school.com\" else null\nval email = getStudentEmail(\"sarah88\")"}
{"id":"a6c6daa2-fe50-4d0f-9dd4-87e2b9873b3b","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Session(id: Int, tutor: String, student: String)\ndef findSessionByStudent(student: String): Option[Session] =\n  Option(legacySessionLookup(student))\n\ndef legacySessionLookup(student: String): Session =\n  if student == \"alex.duke\" then Session(42, \"nina.chen\", \"alex.duke\") else null\nfindSessionByStudent(\"alex.duke\") match\n  case Some(session) => session.tutor\n  case None => \"Session not found\""}
{"id":"0aa4afb8-7325-4ea7-9fa9-b54795c02256","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class Lesson(val topic: String, val material: String)\ndef createLessonIfMaterialAvailable(topic: String, material: String): Lesson = {\n  if (material == null) null else new Lesson(topic, material)\n}\nval lessonOption = createLessonIfMaterialAvailable(\"Physics\", null)"}
{"id":"cd0ca2cb-2585-408f-8895-a7a2b401dd1f","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def findTutorRating(tutorId: Int): Option[Double] =\n  val rating = javaTutorServiceGetRating(tutorId)\n  Option(rating)\ndef javaTutorServiceGetRating(tutorId: Int): java.lang.Double =\n  if tutorId == 55 then 4.9 else null\nval avgRating = findTutorRating(55).getOrElse(0.0)"}
{"id":"2df927ec-4456-49cd-bc96-339f7279f0e7","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getCourseMaterials(courseName: String): Array[String] = {\n  val materials = legacyMaterialsService(courseName)\n  if (materials != null) materials else Array()\n}\ndef legacyMaterialsService(courseName: String): Array[String] =\n  if (courseName == \"Algebra\") Array(\"Slides\", \"Quiz\") else null\nval materials = getCourseMaterials(\"History\")"}
{"id":"61eca121-fbee-4dc0-bc86-adec417c2bf9","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Assignment(student: String, score: Int)\ndef findHighestScore(assignments: List[Assignment]): Option[Int] =\n  assignments.map(_.score).sorted.lastOption\ndef studentAssignments = List(Assignment(\"lucy.thomas\", 92))\nval bestScore = findHighestScore(studentAssignments)"}
{"id":"3df20b05-b912-4fdb-b132-701d404b49d6","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def updateLastLoginTimestamp(userId: Int): Boolean = {\n  val user = databaseUserFetch(userId)\n  if (user != null) {\n    user.lastLogin = System.currentTimeMillis()\n    true\n  } else {\n    false\n  }\n}\nclass UserAccount(var lastLogin: Long)\ndef databaseUserFetch(userId: Int): UserAccount =\n  if (userId == 17) new UserAccount(0) else null\nupdateLastLoginTimestamp(99)"}
{"id":"b82e7e78-5286-43d0-aea3-7c7cc16320b2","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def safeStudentPhoneNumber(rawNumber: String): Option[String] =\n  Option(validatePhone(rawNumber)).filter(_.length == 10)\ndef validatePhone(rawNumber: String): String =\n  if rawNumber.forall(_.isDigit) then rawNumber else null\nval studentContact = safeStudentPhoneNumber(\"1234567890\").getOrElse(\"Invalid\")"}
{"id":"0398a896-7c9f-4408-be81-31580e83ae62","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getActiveSessionId(studentId: Int): Int = {\n  val sessionId = legacyActiveSessionIdFetch(studentId)\n  if (sessionId != null) sessionId else -1\n}\ndef legacyActiveSessionIdFetch(studentId: Int): Integer =\n  if (studentId == 76) 5512 else null\nval active = getActiveSessionId(21)"}
{"id":"ef0d1f1d-b0e7-4003-81e6-4b3064293930","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def sessionFee(sessionId: Int): Option[Double] =\n  Option(legacyFeeFinder(sessionId))\ndef legacyFeeFinder(sessionId: Int): java.lang.Double =\n  if sessionId == 88 then 35.00 else null\nval feeResult = sessionFee(88).fold(\"Not found\")(_.toString)"}
{"id":"a9eebb40-dee3-4cdd-bb19-d46682d84b58","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class TutorProfile(var bio: String)\ndef clearTutorBio(profile: TutorProfile): Unit = {\n  if (profile != null) profile.bio = \"\"\n}\nval maybeProfile = null\nclearTutorBio(maybeProfile)"}
{"id":"e96efed6-cff4-408b-830e-517db39337e3","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def fetchStudentByEmail(email: String): Option[String] =\n  Option(legacyStudentEmailLookup(email)).map(_.toUpperCase)\ndef legacyStudentEmailLookup(email: String): String =\n  if email == \"jon@school.org\" then \"Jonathan\" else null\nfetchStudentByEmail(\"jon@school.org\")"}
{"id":"1d4198ac-f3ea-4300-9f11-5787b332ccfe","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getLessonMaterialUrl(materialName: String): String = {\n  val url = legacyMaterialUrlProvider(materialName)\n  if (url == null) \"No URL\" else url\n}\ndef legacyMaterialUrlProvider(materialName: String): String =\n  if (materialName == \"IntroVideo\") \"http://video.site/intro\" else null\nval videoUrl = getLessonMaterialUrl(\"Worksheet1\")"}
{"id":"84d11ac1-205f-4a7d-81eb-83269a645606","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Classroom(id: String)\ndef findClassroomById(id: String): Option[Classroom] =\n  Option(legacyFindClassroom(id))\n\ndef legacyFindClassroom(id: String): Classroom =\n  if id == \"A101\" then Classroom(\"A101\") else null\nval classroomOpt = findClassroomById(\"B202\")"}
{"id":"3350eedf-f750-4e16-8262-5f851d8f6a5c","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def setSessionFeedback(sessionId: Int, feedback: String): Boolean = {\n  val session = fetchSession(sessionId)\n  if (session == null) false\n  else {\n    session.feedback = feedback\n    true\n  }\n}\nclass TutoringSession { var feedback: String = \"\" }\ndef fetchSession(sessionId: Int): TutoringSession =\n  if (sessionId == 900) new TutoringSession else null\nsetSessionFeedback(901, \"Great!\")"}
{"id":"b0bfdc11-46db-4b32-8a66-291e2b3a7416","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def retrieveTutorLanguage(tutorId: Int): Option[String] =\n  Option(javaFindTutorLanguage(tutorId))\ndef javaFindTutorLanguage(tutorId: Int): String =\n  if tutorId == 33 then \"French\" else null\nval language = retrieveTutorLanguage(33).getOrElse(\"English\")"}
{"id":"be6fc1e0-567a-45c5-a3d2-627fab566378","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getStudentParentContact(studentId: Int): String = {\n  val contact = legacyParentContact(studentId)\n  if (contact != null && contact.length > 0) contact else \"Unknown Parent\"\n}\ndef legacyParentContact(studentId: Int): String =\n  if (studentId == 212) \"parent123@domain.com\" else null\nval parent = getStudentParentContact(111)"}
{"id":"a59218e9-d8bf-46e6-b64c-27acc546cd4e","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def safeLessonNote(note: String): Option[String] =\n  Option(note).filter(_.nonEmpty)\nval noteContent = safeLessonNote(null).getOrElse(\"No Note Provided\")"}
{"id":"7f0fc53c-67d4-4d18-813a-34a7ef7a97ce","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getTutorSpecialties(tutorUsername: String): Array[String] = {\n  val specialties = legacySpecialtiesFetch(tutorUsername)\n  if (specialties == null) Array() else specialties\n}\ndef legacySpecialtiesFetch(tutorUsername: String): Array[String] =\n  if (tutorUsername == \"rebecca.dawson\") Array(\"Math\", \"Physics\") else null\nval list = getTutorSpecialties(\"unknown.tutor\")"}
{"id":"6a855b22-f3d9-40e3-939e-70edf4f6fba0","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(id: Int, address: String, price: Int)\ndef findListingById(listings: List[Listing], searchId: Int): Option[Listing] =\n  listings.find(_.id == searchId)"}
{"id":"478a64f6-bccb-4a4a-a4f0-9bb34c50035f","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class Agent(val name: String, val phoneNumber: String)\ndef getAgentPhoneNumber(agent: Agent): String =\n  if (agent != null) agent.phoneNumber else \"No phone available\""}
{"id":"1bad79f3-05fd-44d3-b8d4-abff709192bf","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def getCityFromLocation(location: String | Null): Option[String] =\n  Option(location).map(_.split(\",\").headOption).flatten"}
{"id":"9645efa5-4b44-418e-a471-911c62198ce8","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"object ListingSearchUtil:\n  def firstAvailableListing(listings: List[Listing]): Option[Listing] =\n    listings.headOption"}
{"id":"c016d33e-4894-43fb-9f7e-15ae65ffbbd5","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def fetchListingByMLS(mls: String): Listing =\n  if (mls != null && mls.nonEmpty) new Listing(42, \"8 Main Street, Springfield\", 450000) else null"}
{"id":"f47a3d54-f4bd-4b5c-a048-5d4e6803d91f","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def wrapNullableContact(contact: String | Null): Option[String] =\n  Option(contact)"}
{"id":"63994c73-1087-459b-82e6-49a2cf3b0e95","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getAgentEmail(agent: Agent): String =\n  if (agent == null) null else agent.name + \"@realtypro.com\""}
{"id":"1ee73bb6-495a-45fd-87d6-40a38c0bad37","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"case class PropertyFeatures(garden: Boolean, garage: Boolean)\ndef featuresDescription(features: PropertyFeatures | Null): String =\n  if (features != null)\n    s\"Garden: ${features.garden}, Garage: ${features.garage}\"\n  else\n    \"No features data\""}
{"id":"1038f362-cc0f-4446-a247-6eb0eccd8319","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def safeAddressToUpper(address: String | Null): Option[String] =\n  Option(address).map(_.toUpperCase)"}
{"id":"9645a0d9-ec44-4163-9dd9-3fbb7411cbde","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def findLuxuryListingOpt(listings: List[Listing]): Option[Listing] =\n  listings.find(_.price > 1000000)"}
{"id":"48169330-6c07-40a2-b7b1-a819d168b5f0","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getListingTitle(title: String): String =\n  if (title == null) \"Unknown title\" else title"}
{"id":"6d2d4e13-4260-45a3-8554-596682c75033","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def bedroomsAsOption(bedrooms: Integer | Null): Option[Int] =\n  Option(bedrooms).map(_.intValue)\n\ndef meetsBedroomRequirement(bedroomsOpt: Option[Int]): Boolean =\n  bedroomsOpt.exists(_ >= 3)"}
{"id":"2d76dfd0-437d-4e0b-8d9f-ef4793163c51","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def listingMLSNumber(listing: Listing | Null): String =\n  if (listing != null) listing.id.toString else \"No MLS number\""}
{"id":"ee3709a3-8ddd-4f22-b7b1-0465762357de","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def getZipCodeId(zipCode: String | Null): Option[Int] =\n  Option(zipCode).flatMap(z => scala.util.Try(z.toInt).toOption)"}
{"id":"61be9498-d28e-4d53-afd6-1b72adb6721d","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def showAgentIfPresent(agent: Agent | Null): String =\n  if (agent != null) s\"Agent: ${agent.name}\" else \"No agent found\""}
{"id":"775be92a-50ca-4b73-89cc-e1cc40a7c37b","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def selectListingWithPhoto(photoUrl: String | Null, fallback: String): String =\n  Option(photoUrl).getOrElse(fallback)"}
{"id":"3f780861-9d3b-4653-befa-ab1371eb39ed","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def propertyDescription(desc: String): String =\n  if (desc != null) desc else \"Description not available\""}
{"id":"5e40c233-f1d6-4447-866e-49769fc0b1bd","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Neighborhood(name: String, rating: Int)\ndef getTopNeighborhoodName(n: Option[Neighborhood]): String =\n  n.map(_.name).getOrElse(\"No neighborhood info\")"}
{"id":"e5629028-4eba-4809-9627-60522a1a1ef4","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def findListingByAgent(agentName: String | Null, listings: java.util.List[Listing]): Listing =\n  if (agentName == null) return null\n  val it = listings.iterator()\n  while (it.hasNext) {\n    val l = it.next()\n    if (l.address.contains(agentName)) return l\n  }\n  null"}
{"id":"99349b36-6473-4cd5-830a-382e05333958","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def filterListingsWithPool(hasPool: java.lang.Boolean | Null, listings: List[Listing]): List[Listing] =\n  Option(hasPool).filter(_ == true).map(_ => listings.filter(_.address.contains(\"Pool\"))).getOrElse(Nil)"}
{"id":"8cbb07a5-e77c-4700-a235-5ea15fbe4726","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class PropertyListing(id: String, price: Double, address: String, bedrooms: Int)\ndef findListingById(id: String, listings: List[PropertyListing]): Option[PropertyListing] =\n  listings.find(_.id == id)"}
{"id":"8738e7b2-a36f-4710-b2f2-54f0afbc60d5","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getPrimaryPhoto(listing: PropertyListing): String = \n  if (listing == null) null\n  else listing.address + \"/photo.jpg\""}
{"id":"a3c8e835-3b45-44cf-945b-78fe6dbfe769","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def extractNeighborhood(listing: PropertyListing | Null): Option[String] =\n  Option(listing).map(_.address.split(\",\").tail.headOption.getOrElse(\"\").trim).filter(_.nonEmpty)"}
{"id":"19a5d300-3576-4bf2-a2a0-81ad0feb679c","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"class JavaStyleAgentFinder {\n  def findAgentName(agentId: String): String = null // Simulates Java API\n}\ndef agentContactOption(finder: JavaStyleAgentFinder, id: String): Option[String] =\n  Option(finder.findAgentName(id))"}
{"id":"01658bbb-4f64-4ca6-9401-6de87bb9f681","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def countAvailableUnits(units: java.util.List[Integer]): Option[Int] =\n  Option(units).map(_.size)\n"}
{"id":"c1cd85b0-d3a4-4ad4-ae18-93287e0f655f","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def isPetFriendly(listing: PropertyListing): Boolean =\n  if (listing == null) false\n  else listing.bedrooms >= 2"}
{"id":"cd07453e-a249-4cc8-af18-48d6c497084d","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getListingDescription(listing: PropertyListing): String =\n  if (listing == null) \"Listing not available\" else s\"${listing.address}, ${listing.price}\""}
{"id":"628e0141-e8d9-4fb8-8b5e-ed7555121ca3","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def findFirstExpensiveListing(list: List[PropertyListing]): Option[PropertyListing] =\n  list.find(_.price > 1000000).map(listing => listing)\n"}
{"id":"cab822cb-fa02-439a-8971-db409b168749","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"class ExternalDatabase {\n  def lookupListingByMLS(mls: String): PropertyListing = null\n}\ndef safeListingFetch(db: ExternalDatabase, mls: String): Option[PropertyListing] =\n  Option(db.lookupListingByMLS(mls))"}
{"id":"4c2bcfce-ba1c-4111-a1c6-75f80d3047d2","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def displayPrice(listing: PropertyListing): String =\n  Option(listing).map(_.price.toString).getOrElse(\"No Price Available\")"}
{"id":"41925398-6c27-40ed-b089-f0e6034a642c","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def updateOwnerName(listing: PropertyListing, owner: String): PropertyListing =\n  if (listing != null) listing.copy(address = owner + \" \" + listing.address)\n  else null"}
{"id":"8fd9616d-aec1-4589-8b08-da21db231524","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getParkingInfo(listing: PropertyListing): String =\n  if (listing == null) \"Unknown\" else \"Garage Included\""}
{"id":"f02f41f5-364a-4402-8848-376d16961882","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def withGarage(listing: PropertyListing | Null): Option[PropertyListing] =\n  Option(listing).filter(_.address.toLowerCase.contains(\"garage\"))"}
{"id":"358ca503-19aa-4aec-b8ea-35618e5fa057","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def filterListingsWithMinimumBedrooms(listings: List[PropertyListing], min: Int): List[PropertyListing] =\n  listings.filter(_.bedrooms >= min)"}
{"id":"830f64b2-8045-4ade-9bbb-d9ff0f0d6015","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getAgentPhoneNumber(agent: AnyRef): String =\n  if (agent != null) agent.toString + \"-555-1234\" else null"}
{"id":"0f538890-d2c1-4eef-9907-ec6b187b815f","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def getOpenHouseDate(listing: PropertyListing | Null): Option[String] =\n  Option(listing).flatMap(l => Some(l.address.split(\" \").headOption.getOrElse(\"No Date\")))"}
{"id":"78474729-54f7-4efa-bad6-980697237f80","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def findNullSafeAddress(listing: PropertyListing): String =\n  if (listing == null) null else listing.address"}
{"id":"c30d3355-d9d2-4cc7-9a0e-6f9a6ebc1416","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getSquareFootage(listing: AnyRef): Int =\n  if (listing != null) 1000 else 0"}
{"id":"69ab1a25-544e-469e-a4e4-da504f32be89","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def propertyTypeFromJava(javaObj: AnyRef): Option[String] =\n  Option(javaObj).map(_.toString).filter(_.nonEmpty)"}
{"id":"7649b30e-ace9-4206-93f5-42bbc09d7eb7","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def nullIfNoMatchingListing(listings: List[PropertyListing], price: Double): PropertyListing =\n  val found = listings.filter(l => l.price == price)\n  if (found.isEmpty) null else found.head"}
{"id":"0c8379c1-0c71-4dd9-b25c-b8d795a2b939","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"object WalletNullCheck {\n  def getBalance(walletId: String): Double = {\n    val wallet = findWalletById(walletId)\n    if (wallet != null) wallet.balance else 0.0\n  }\n  def findWalletById(walletId: String): CryptoWallet = {\n    if (walletId == \"BTC123\") CryptoWallet(\"BTC123\", 1.6)\n    else null\n  }\n}\ncase class CryptoWallet(id: String, balance: Double)\n"}
{"id":"caee1401-feb9-4b23-8d02-752664117b2e","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"object TransactionStatusFetcher {\n  def getTransactionStatus(txHash: String): String = {\n    val status = fetchStatusFromNode(txHash)\n    if (status != null) status\n    else \"UNKNOWN\"\n  }\n  def fetchStatusFromNode(hash: String): String = null\n}\n"}
{"id":"8751403a-de29-4825-af55-2b8690a6da03","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletOwnerChecker(val owner: String) {\n  def isOwner(entered: String): Boolean = {\n    if (owner != null) owner.equals(entered)\n    else false\n  }\n}\n"}
{"id":"1647f340-c5a9-4c0f-9874-ccb952450529","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"object HardwareWalletConnector {\n  def connect(deviceName: String): HardwareWallet = {\n    val device = findDevice(deviceName)\n    if (device != null) device connect()\n    else null\n  }\n  def findDevice(name: String): HardwareDevice = null\n}\ntrait HardwareDevice {\n  def connect(): HardwareWallet\n}\nclass HardwareWallet\n"}
{"id":"0b7b99ae-0b72-48c5-8b44-b67205282f08","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletPinValidator {\n  def validatePin(pin: String): Boolean = {\n    if (pin != null && pin.length == 6) true\n    else false\n  }\n}\n"}
{"id":"1cae2eec-828a-4f81-b89e-eb3348da720d","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"object AccountRecovery {\n  def recoverSeed(phrase: String): String = {\n    if (phrase != null && phrase.split(\" \").length == 12)\n      phrase\n    else\n      null\n  }\n}\n"}
{"id":"736ee8d3-d5eb-4a2e-8dfe-6907099615b0","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class LegacyExternalService {\n  def fetchBackup(walletId: String): String = null\n}\nobject BackupRestorer {\n  def restore(walletId: String, service: LegacyExternalService): String = {\n    val backup = service.fetchBackup(walletId)\n    if (backup != null) s\"Backup restored: $backup\" else \"No backup found\"\n  }\n}\n"}
{"id":"97a6291c-bf54-4b88-be13-78ddc311c780","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletAliasSetter {\n  def setAlias(wallet: Wallet, alias: String): Boolean = {\n    if (wallet != null && alias != null) {\n      wallet.alias = alias\n      true\n    } else {\n      false\n    }\n  }\n}\nclass Wallet(var alias: String)\n"}
{"id":"ecf318ec-facd-4648-acb4-28e9b69350ec","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"object SignatureVerifier {\n  def checkSignature(signature: String): Boolean = {\n    if (signature != null && signature.nonEmpty)\n      signature.startsWith(\"SIG_\")\n    else\n      false\n  }\n}\n"}
{"id":"ef2de8f9-bf9e-42aa-96bd-69390a2bfc6b","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class FiatConversion {\n  def convertToFiat(wallet: CryptoWallet, rate: Double): Double = {\n    if (wallet != null) wallet.balance * rate else 0.0\n  }\n}\ncase class CryptoWallet(balance: Double)\n"}
{"id":"bf0ae7bd-f116-4af2-8b2a-3b29dc08795b","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class UserWallet(address: String, balance: Double)\nobject WalletBalanceOption {\n  def getBalanceOpt(wallet: Option[UserWallet]): Double =\n    wallet.map(_.balance).getOrElse(0.0)\n}\n"}
{"id":"6bc5770b-8a58-4a18-a8cc-ec918fb983a8","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object OptionAddressValidator {\n  def validateAddress(address: Option[String]): Boolean =\n    address.exists(_.length == 42)\n}\n"}
{"id":"e9523a28-71fe-43e7-87fd-9831c7dd38a9","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class Transaction(id: String, amount: Double)\nobject SafeTransactionLookup {\n  def findTransaction(id: String, txs: List[Transaction]): Option[Transaction] =\n    txs.find(_.id == id)\n}\n"}
{"id":"f1e75eb5-8c24-4d25-97bf-640454904d80","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class Mnemonic(words: List[String])\nobject MnemonicChecker {\n  def isValidMnemonic(m: Option[Mnemonic]): Boolean =\n    m.exists(_.words.size == 12)\n}\n"}
{"id":"719d3cdc-6025-406b-b7b0-2a3fc7f09ee1","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object WalletBackupRestorer {\n  def restoreBackup(backup: String | Null): Option[String] =\n    Option(backup).filter(_.nonEmpty)\n}\n"}
{"id":"bda27daf-5d1f-4bd3-80b4-d3be4f4c87f2","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object OptionWalletDemo {\n  case class Wallet(id: String, balance: Double)\n  def getWalletSafe(walletId: String): Option[Wallet] = {\n    if (walletId == \"ETH456\") Some(Wallet(\"ETH456\", 10.5))\n    else None\n  }\n}\n"}
{"id":"dd13bdaa-9738-4573-9da2-fc4994a4185b","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object HardwareWalletOptionConnector {\n  case class HardwareWallet(serial: String)\n  def tryConnect(device: String | Null): Option[HardwareWallet] =\n    Option(device).map(HardwareWallet(_))\n}\n"}
{"id":"6145a7fc-ee5d-4449-9e81-1be46c85e22d","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object AddressNormalizer {\n  def normalizeAddress(address: Option[String]): String =\n    address.map(_.toLowerCase).getOrElse(\"unknown\")\n}\n"}
{"id":"8f5a460e-ca41-464b-990c-29941b5dfa12","timestamp":1746098007616,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletPrivateKey(key: String)\nobject SafePrivateKeyExtractor {\n  def extractPrivateKey(raw: String | Null): Option[WalletPrivateKey] =\n    Option(raw).filter(_.startsWith(\"0x\")).map(WalletPrivateKey(_))\n}\n"}
{"id":"0e906ce6-e5c6-45e5-b9ee-8363ec7327e6","timestamp":1746098007616,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object WalletOptionChaining {\n  case class Wallet(address: String, balance: Double)\n  def getWalletBalance(address: Option[String]): Double =\n    address.flatMap(a => Option.when(a.startsWith(\"0x\"))(Wallet(a, 2.0))).map(_.balance).getOrElse(0.0)\n}\n"}
{"id":"a23c701d-0a8b-469e-8a92-b2c0a54538f0","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletDetails(address: String, balance: BigDecimal)\ndef findWalletByAddress(address: String): Option[WalletDetails] =\n  val dbResult: WalletDetails = null\n  Option(dbResult)"}
{"id":"7748a434-f64b-46c0-91ca-7d2f5582ebdd","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def fetchTransactionHash(transactionId: String): String =\n  null"}
{"id":"e9be266d-9a77-48b5-b719-11f058270e83","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletSeed(mnemonic: String)\ndef getWalletSeed(source: String): Option[WalletSeed] =\n  val result: WalletSeed = legacyGetSeedFromSource(source)\n  Option(result)\ndef legacyGetSeedFromSource(src: String): WalletSeed =\n  null"}
{"id":"5f30912a-5b49-44de-a407-7302e270d4de","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def getWalletLabel(walletId: String): String =\n  if (walletId eq null) null else \"Main Wallet\""}
{"id":"5061a8a4-417e-4ebb-82cf-d6a0f4e74a80","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def saveWalletToDatabase(walletRef: String): Option[String] =\n  Option(possibleNullWalletSave(walletRef))\ndef possibleNullWalletSave(ref: String): String =\n  null"}
{"id":"6acf7755-de9c-4c8a-8a05-72ee5aa6e457","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def getWalletPublicKey(walletId: String): String =\n  var pubKey: String = null\n  if (walletId.length == 0) pubKey = null else pubKey = \"pubKeyValue\"\n  pubKey"}
{"id":"8a0ed9af-76d2-4d21-bc15-ffb71b13ed6b","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def walletDescription(walletObj: AnyRef): Option[String] =\n  Option(walletObj).map(_.toString)"}
{"id":"4e853704-bb94-4e93-97d2-9607a0d10e1c","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def validatePrivateKey(privateKey: String): Boolean =\n  if (privateKey == null) false\n  else privateKey.length == 64"}
{"id":"7b31ba9d-f5e7-4fd3-b969-670ae15b4855","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class Wallet(address: String, balance: BigDecimal)\ndef findWallet(addr: String): Option[Wallet] =\n  val possibleWallet: Wallet = if addr == \"\" then null else Wallet(addr, 0.5)\n  Option(possibleWallet)"}
{"id":"f4a83d7e-da1c-4383-a8d9-cca66e55a4dc","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def getWalletPassphrase(userId: String): String =\n  val passphrase = javaStylePassphraseLookup(userId)\n  if (passphrase != null) passphrase else null\ndef javaStylePassphraseLookup(id: String): String =\n  null"}
{"id":"02789ce6-cbdc-40c6-988d-966e9308f40f","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def wrapNullTransactionSignature(signature: String): Option[String] =\n  Option(signature)"}
{"id":"56fc2de2-d3eb-4cc5-9508-2faaf195d7bf","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def checkWalletImportResult(result: String): Boolean =\n  if (result != null && result == \"SUCCESS\") true else false"}
{"id":"44864b3c-5ba2-4f74-bfad-3ccece623219","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"val importedPrivateKey: Option[String] = Option(javaKeyProvider())\ndef javaKeyProvider(): String =\n  null"}
{"id":"a5d9ef10-498a-4801-9081-2865fc62d75e","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def recoverWalletFile(fileRef: String): String =\n  val recovered = simulatedWalletFileRecovery(fileRef)\n  if (recovered == null) null else recovered\ndef simulatedWalletFileRecovery(ref: String): String =\n  null"}
{"id":"d5ec3d8d-ee40-4b9b-8b8c-f785e510cf76","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def transactionFeeEstimate(possibleFee: java.lang.Long): Option[Long] =\n  Option(possibleFee).map(_.longValue)"}
{"id":"10f84fcd-bb46-4592-9dd9-aaf423abfa2d","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def checkIfAddressValid(possibleAddress: String): Boolean =\n  if (possibleAddress != null) possibleAddress.startsWith(\"1\") else false"}
{"id":"75525f9a-6657-4253-9c2f-fcfc272cd7b4","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def parseWalletJson(json: String): Option[Map[String, String]] =\n  if (json == null || json.isEmpty) None else Some(Map(\"address\" -> \"1a2b3c\"))"}
{"id":"d05da772-bbcd-4d54-a63e-fcc7500fa6db","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class TransactionSigner {\n  def signTransaction(raw: String): String =\n    if (raw == null) null else raw.reverse\n}"}
{"id":"eae11dce-859a-4fa9-9a71-50b681644151","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def getActiveWallet(wallets: List[String]): Option[String] =\n  wallets.find(_.nonEmpty)"}
{"id":"f1648efc-76b6-4e9d-9fa4-e266f0b46a0d","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def walletBackupCode(maybeCode: String): String =\n  if (maybeCode == null) null else maybeCode.take(8)"}
{"id":"a4a37111-4bd6-42f6-8ea8-1bdc75af12b8","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class ProductStock(productId: String, quantity: Int)\ndef findStockLevel(productId: String, inventory: Map[String, ProductStock]): Option[Int] =\n  inventory.get(productId).map(_.quantity)"}
{"id":"c7af05d2-a981-4685-9f34-a9026f0cab37","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def getWarehouseLocation(zone: String | Null): Option[String] =\n  Option(zone).filter(_.nonEmpty)"}
{"id":"c7580bbc-5b27-4f5b-8cbc-10a3a16b78bc","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def findItemOrNull(itemCode: String, items: Map[String, String]): String =\n  val name = items.get(itemCode).orNull\n  name"}
{"id":"2d92956a-13a5-4cf9-b08f-205c86657c56","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class BinReference(val binId: String)\ndef getBinReference(binId: String): BinReference =\n  if (binId == null) null else new BinReference(binId)"}
{"id":"76349a45-42bf-46a7-a6ef-5c7ad85de444","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def supplierContactOrNone(supplierContact: String | Null): Option[String] =\n  Option(supplierContact)"}
{"id":"4d7a24f0-8524-42a5-8314-7d619d85d26c","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def fromLegacySystem(productCode: String): String =\n  if (productCode == \"\") null else productCode"}
{"id":"96c8adae-3f1a-4294-8146-ffd1ae0668d6","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def updateInventoryCount(productId: String, count: java.lang.Integer): Option[Int] =\n  Option(count).map(_.intValue)"}
{"id":"190f4839-55cd-4adb-9f7a-b804cfed16fe","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"object WarehouseChecker:\n  def itemExists(inventory: Map[String, Int], itemId: String): Option[Boolean] =\n    inventory.get(itemId).map(_ > 0)"}
{"id":"d098c1cc-d350-43e1-a240-0c3ef3363fc6","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getRestockDateOrNull(itemId: String, restockMap: Map[String, String]): String =\n  val result = restockMap.get(itemId)\n  if (result.isDefined) result.get else null"}
{"id":"2742450f-bd40-4757-983a-6651e487a68a","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def calculateReorderLevel(stock: java.lang.Integer): Int =\n  if (stock == null) 10 else stock"}
{"id":"d908018f-700e-4be9-a43e-fc589c7ba16d","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def shelfLabelOrNull(bin: AnyRef): String =\n  if (bin != null) bin.toString else null"}
{"id":"7f507d73-5c82-4295-b001-a5d2f31c63f6","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def wrapNullableLocation(location: String | Null): Option[String] =\n  Option(location)"}
{"id":"28167430-fd60-479e-b574-3e7e2bfb536d","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def getProductDescription(productId: String, descriptions: Map[String, String]): Option[String] =\n  descriptions.get(productId).filter(_.nonEmpty)"}
{"id":"bdc85df0-c131-4ec7-b56f-84c71b6fdcd3","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getNullIfNotFound(productSku: String, lookup: Map[String, String]): String =\n  val item = lookup.get(productSku)\n  if (item.isDefined) item.get else null"}
{"id":"95ea6ca2-67b0-4260-9600-15768f9b9182","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def findExpiredBatch(batches: List[(String, java.util.Date)]): Option[String] =\n  batches.find((_, date) => Option(date).exists(_.before(new java.util.Date))).map(_._1)"}
{"id":"5f6b8877-98f8-4c51-bc42-4e8f3ebd169a","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def supplierNameIfPresent(supplier: String | Null): String =\n  if (supplier != null) supplier else \"Unknown\""}
{"id":"77f03beb-e25d-4179-9862-bef8e6a031f5","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def findWarehouseManager(contactInfo: Map[String, String], location: String): Option[String] =\n  contactInfo.get(location)"}
{"id":"89aa7366-a443-490a-8035-8d6352637bcd","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getItemWeightOrNull(item: { def getWeight(): java.lang.Double } | Null): java.lang.Double =\n  if (item != null) item.getWeight() else null"}
{"id":"95bb035b-172e-4682-82c0-9bd723a9e460","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def boxBarcodeOption(barcode: String | Null): Option[String] =\n  Option(barcode).filter(_.matches(\"\\d{12}\"))"}
{"id":"5d550db5-1105-441b-b018-5a89a3a62a5e","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def printInventoryStatus(record: { def getStatus(): String } | Null): Unit =\n  val status = if (record != null) record.getStatus() else \"Unavailable\"\n  println(status)"}
{"id":"3c9c7e23-795b-4a0e-afcb-0d35fcdec9f2","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Product(sku: String, description: String)\ndef findProductBySku(sku: String): Option[Product] = {\n  warehouseProducts.find(_.sku == sku)\n}\nval warehouseProducts = List(\n  Product(\"A100\", \"Steel Bolts\"),\n  Product(\"B200\", \"Wooden Pallets\")\n)\nval found = findProductBySku(\"A100\").map(_.description).getOrElse(\"Product Not Found\")"}
{"id":"166f62f5-fe50-41d5-b41d-c87187d8b8e3","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getInventoryLevel(locationId: Int): java.lang.Integer = {\n  if (locationId == 10) 150\n  else null\n}\nval stock = getInventoryLevel(99)\nif (stock == null) println(\"No inventory data found.\")\nelse println(s\"Stock at location: $stock\")"}
{"id":"80644bc0-6b35-42a1-b368-f9be15ba5d12","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def safeSupplierName(rawName: String): Option[String] = Option(rawName)\nval supplierName: String = null\nval nameForReport = safeSupplierName(supplierName).getOrElse(\"Unknown Supplier\")"}
{"id":"c964be86-8e22-43d7-8b88-8bffc588f71c","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class InventoryItem(val sku: String, var currentCount: Int)\ndef updateItemCount(item: InventoryItem, count: Int): InventoryItem = {\n  if (item != null) {\n    item.currentCount = count\n    item\n  } else {\n    null\n  }\n}\nval nullItem: InventoryItem = null\nupdateItemCount(nullItem, 50)"}
{"id":"471f6b7b-6a26-4bc0-8e9a-80cc872d6f3b","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def locateBin(binCode: String): Option[String] = \n  Option(possiblyJavaBinLocator(binCode))\ndef possiblyJavaBinLocator(code: String): String = if (code == \"A-12\") \"Aisle A, Bin 12\" else null\nval binLocation = locateBin(\"A-12\").getOrElse(\"Location not found\")"}
{"id":"804b12be-a2dc-49b1-813d-b8625e7a2837","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getCategoryDescription(sku: String): String = {\n  if (sku == \"B200\") \"Bulk Goods\"\n  else null\n}\nval desc = getCategoryDescription(\"X900\")\nif (desc != null) println(desc) else println(\"No description available.\")"}
{"id":"92e291de-4113-4bce-8358-64c81c1dc821","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class StockEntry(itemSku: String, count: Int)\nval entries: List[StockEntry] = List(StockEntry(\"A100\", 55))\ndef findStockEntry(sku: String): Option[StockEntry] = entries.find(_.itemSku == sku)\nval maybeEntry = findStockEntry(\"A100\").map(_.count).getOrElse(0)"}
{"id":"4248f847-0411-47cf-845b-67e9e6b12e60","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class RestockRequest(val id: Int, val note: String)\ndef getRestockNote(request: RestockRequest): String = {\n  if (request != null) request.note else \"No note\"\n}\ngetRestockNote(null)"}
{"id":"683432d9-2ebc-49ec-a1f4-29e4c5246dbc","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Location(id: String, section: String)\ndef findLocation(section: String): Option[Location] = \n  warehouseLocations.find(_.section == section)\nval warehouseLocations = List(Location(\"L1\", \"East\"))\nval locationInfo = findLocation(\"East\").map(_.id).getOrElse(\"Unassigned\")"}
{"id":"b7575220-201d-474b-821a-6f56d8cf8974","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def javaSupplierContact(sku: String): String = if (sku == \"B200\") \"555-1234\" else null\nval contact = javaSupplierContact(\"A100\")\nif (contact != null) println(contact) else println(\"No contact available\")"}
{"id":"544118de-52a1-4115-b9ca-ab3293d77dd2","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def retrieveLastStockCheck(sku: String): Option[String] = Option(getStockCheckFromLegacy(sku))\ndef getStockCheckFromLegacy(sku: String): String = if (sku == \"A100\") \"2024-04-22\" else null\nval lastCheck = retrieveLastStockCheck(\"A100\").getOrElse(\"No data\")"}
{"id":"725ce6c4-c1cf-4a41-9ec6-f778a31ef9d8","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getShelfLabel(shelfId: Int): String = {\n  if (shelfId == 2) \"Steel Tools\"\n  else null\n}\nval result = getShelfLabel(7)\nif (result == null) println(\"No label\") else println(result)"}
{"id":"dc0aa4dd-cc8c-401c-aced-a02def3e9674","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryUpdate(sku: String, delta: Int)\nval updates = List(InventoryUpdate(\"B200\", 10))\ndef safeUpdate(sku: String): Option[Int] = updates.find(_.sku == sku).map(_.delta)\nval delta = safeUpdate(\"B200\").fold(0)(_ + 100)"}
{"id":"088fe9ab-c48f-4a64-8115-124c90062d39","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def findEmployeeBadge(employeeId: Int): String = {\n  if (employeeId == 2345) \"STAFF-002\"\n  else null\n}\nval badge = findEmployeeBadge(2121)\nif (badge != null) println(badge) else println(\"No badge found\")"}
{"id":"22982f62-0111-4e51-85b6-6b6cc5c88118","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Supplier(name: String, rating: Int)\nval suppliers = List(Supplier(\"WidgetCo\", 5))\ndef goodSupplierOption: Option[Supplier] = suppliers.find(_.rating >= 5)\ngoodSupplierOption.filter(_.name.startsWith(\"W\"))"}
{"id":"09be59a8-e325-464e-9cac-7b3e7ea4ff1c","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getPickTicket(ref: String): String = {\n  if (ref == \"PT-009\") \"Ready for pickup\"\n  else null\n}\nval ticket = getPickTicket(\"PT-000\")\nif (ticket == null) println(\"No ticket info\") else println(ticket)"}
{"id":"e969c815-ed7a-4ff0-8dd4-99690ae3d19e","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def safeGetBatch(batchId: String): Option[String] = Option(batchId)\nsafeGetBatch(null).getOrElse(\"No batch found\")"}
{"id":"5a563740-b685-45ea-bd23-133b0ee816d7","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class DamagedGoods(val id: Int, val report: String)\ndef getReport(goods: DamagedGoods): String = {\n  if (goods != null) goods.report else \"None reported\"\n}\ngetReport(null)"}
{"id":"9eb9815d-9065-4812-8e73-2c22559d2e5d","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def checkRestockNeeded(stockLevel: Int): Option[String] =\n  Option.when(stockLevel < 10)(\"Restock Needed\")\ncheckRestockNeeded(5).getOrElse(\"Stock sufficient\")"}
{"id":"a8c02101-30e6-49e3-9f59-2b3aa301fe63","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getOrderReference(orderNum: Int): String = {\n  if (orderNum == 4421) \"Delivered\"\n  else null\n}\nval status = getOrderReference(9332)\nif (status != null) println(s\"Order $status\") else println(\"Order reference missing\")"}
{"id":"21d317c2-d776-4674-b976-b69134d7635a","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserReport(reporterId: String, reportedContentId: String, reason: String)\ndef findUserReport(report: UserReport | Null): Option[UserReport] = Option(report)"}
{"id":"919524e8-686c-4663-98e7-3e7f3ff5587d","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getFlaggedContent(contentId: String): String = if (contentId == \"\") null else \"FlaggedPost\"\ndef moderateFlaggedContent(contentId: String): String = {\n  val flagged = getFlaggedContent(contentId)\n  if (flagged == null) \"Content not found\" else \"Moderating: \" + flagged\n}"}
{"id":"c7efb4c4-6b4d-4c30-9671-be606c40ff33","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def reviewContentForViolations(text: String): Option[String] =\n  Option(text).filter(txt => txt.contains(\"offensive\")).map(_ => \"Violation Found\")"}
{"id":"067dd088-a300-4502-a1ec-85d0106bcdb9","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getModeratorNote(contentId: String): String = null\ndef printModeratorNote(contentId: String): Unit = {\n  val note = getModeratorNote(contentId)\n  if (note != null) println(note)\n}"}
{"id":"83f00796-562f-4830-bc35-424a065e7444","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class Comment(content: String, userId: String)\ndef approvedComment(comment: String | Null): Option[Comment] =\n  Option(comment).map(Comment(_, \"reviewer\"))"}
{"id":"02dcc5a5-ad23-4d23-9d01-664c9d0bfb94","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getRemovedReason(contentId: String): String = null\ndef handleRemovedReason(contentId: String): String = {\n  val reason = getRemovedReason(contentId)\n  if (reason == null) \"No reason provided\" else reason\n}"}
{"id":"c18b20a4-b3a4-4e79-8e31-9d114cfb3208","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def checkPostForSpam(post: String): Option[String] =\n  Option(post).filter(_.toLowerCase.contains(\"buy now\")).map(_ => \"Spam Detected\")"}
{"id":"05280755-ba4d-4295-82a3-cba081bb7b2d","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def fetchReportedAccount(accountId: String): String = null\ndef banIfReported(accountId: String): Boolean = {\n  val account = fetchReportedAccount(accountId)\n  if (account != null) true else false\n}"}
{"id":"d47f7df4-02d1-4d59-a053-98daed55c4d2","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def wrapJavaModeratorResponse(response: String | Null): Option[String] = Option(response)\nval warningOpt = wrapJavaModeratorResponse(\"Potential hate speech\")\nval safeWarning = warningOpt.getOrElse(\"No warning issued\")"}
{"id":"a0bb3895-f27b-4872-b1b7-a449df3f4786","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getDeletedComment(commentId: String): String = null\nval res = getDeletedComment(\"abc123\")\nif (res != null) println(\"Comment: \" + res)"}
{"id":"6f92d249-e063-4d0b-9f22-c25b74653648","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def safeFetchUserWarning(userId: String): Option[String] = Option(getUserWarning(userId))\ndef getUserWarning(userId: String): String | Null = if (userId.length < 3) null else \"Warning recorded\"\nval warningMessage = safeFetchUserWarning(\"jo\") getOrElse \"No warning for user\""}
{"id":"45653f55-6e1b-471b-9a81-941c8900578e","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getModerator(username: String): String = null\nval moderator = getModerator(\"johnDoe\")\nif (moderator == null) println(\"No such moderator\")"}
{"id":"3c3e8c63-e342-4b5a-a63d-ac1fcf488d1f","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def filterReportedPosts(reports: List[String | Null]): List[String] =\n  reports.flatMap(report => Option(report)).filter(_.startsWith(\"report\"))"}
{"id":"d588e005-ffbb-44e2-8913-1cd84181bfcc","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def javaStylePostTitle(titleId: String): String = null\ndef displayTitle(titleId: String): Unit = {\n  val title = javaStylePostTitle(titleId)\n  if (title != null) println(title)\n}"}
{"id":"9d0be36a-53f7-478b-a077-b52756d0b56e","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def findContentModerator(moderatorName: String): Option[String] =\n  Option(moderatorName).filter(_.nonEmpty)\ndef assignModerator(contentId: String, modName: String): String =\n  findContentModerator(modName) match {\n    case Some(name) => s\"$contentId assigned to $name\"\n    case None => s\"No moderator available for $contentId\"\n  }"}
{"id":"3b957fc1-a76b-4101-ba36-3559c879b8f2","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getViolationIdOrNull(comment: String): String = if (comment.contains(\"profanity\")) \"V-123\" else null\ndef checkViolation(comment: String): Boolean = {\n  val id = getViolationIdOrNull(comment)\n  if (id != null) true else false\n}"}
{"id":"e9b77fa7-9d08-4ab3-9974-f8401f664cfb","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def userAppealStatus(appeal: String | Null): Option[String] = Option(appeal)\ndef processUserAppealStatus(appeal: String | Null): String =\n  userAppealStatus(appeal).fold(\"No appeal found\")(status => s\"Appeal: $status\")"}
{"id":"8a2d311d-1485-4f26-824b-f4b5828611a5","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getSuspendedAccount(accountId: String): String = null\ndef notifyOnSuspension(accountId: String): Unit = {\n  val susp = getSuspendedAccount(accountId)\n  if (susp != null) println(\"Suspended: \" + susp)\n}"}
{"id":"8e30e5b4-ef71-4175-bc5b-475296e5fd59","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def extractProfileWarning(javaProfileWarning: String | Null): Option[String] = Option(javaProfileWarning)\nval warningMsg = extractProfileWarning(null).getOrElse(\"No Profile Warning\")"}
{"id":"97ce5457-05fe-440d-b806-829475d666a1","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getAdminAction(actionId: String): String = null\nval adminAction = getAdminAction(\"A102\")\nif (adminAction == null) println(\"No action recorded\")"}
{"id":"2778a2e1-8d41-43fc-bf30-9280bcaf3b31","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ModerationResult(isFlagged: Boolean, reason: Option[String])\ndef checkContentForAbuse(text: String): Option[ModerationResult] =\n  val lower = text.toLowerCase\n  if lower.contains(\"hate\") then\n    Some(ModerationResult(true, Some(\"hate speech\")))\n  else if lower.contains(\"spam\") then\n    Some(ModerationResult(true, Some(\"spam detected\")))\n  else\n    None"}
{"id":"a31520c6-09a8-41ab-8bcc-74b4d363e535","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def fetchUserProfileFromLegacy(userId: String): String =\n  // Mimicking java method, can return null\n  if userId == \"banned_user\" then null else \"profile for \" + userId\n\ndef getUserProfileBio(userId: String): String =\n  val profile = fetchUserProfileFromLegacy(userId)\n  if (profile != null) profile else \"no profile available\""}
{"id":"1be75196-b36c-417b-9065-9b407a48c133","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def lastReportedContent(userReports: List[String]): Option[String] =\n  userReports.lastOption.map(_.trim).filter(_.nonEmpty)"}
{"id":"596822f3-c819-47eb-8512-718fcafc0e38","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class CommentModeration {\n  def checkForOffensive(comment: String): String =\n    if (comment == null)\n      \"invalid comment\"\n    else if (comment.toLowerCase.contains(\"offensive\"))\n      \"offensive\"\n    else\n      \"clean\"\n}"}
{"id":"6b524c4d-1c8e-4bd4-a8df-d249d24988af","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def normalizePost(post: String): Option[String] =\n  Option(post).map(_.trim).filter(_.nonEmpty)"}
{"id":"5e12345d-dc0d-4a28-8893-179a25ee2c5d","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getReportedPostText(postId: String): String =\n  if (postId == \"removed\")\n    null\n  else\n    s\"Content of $postId\"\n\ndef assignModeratorResponse(postId: String): String =\n  val text = getReportedPostText(postId)\n  if (text == null) \"Post not found\" else \"Moderation response for: \" + text"}
{"id":"c4d0abe4-dfdb-4137-840a-550a3b01ece0","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def wrapLegacyModeratorId(id: String): Option[String] =\n  Option(id).filter(_.matches(\"mod-\\\\d+\"))"}
{"id":"e3208315-259e-4592-834e-6ea76403d096","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def checkIfMediaAttachmentIsNull(mediaUrl: String): Boolean =\n  if (mediaUrl == null) true else false"}
{"id":"57c7a3b3-5931-4820-b79d-07e73748312b","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserFeedback(content: String, flagged: Boolean)\ndef flaggedFeedbackMessage(feedback: Option[UserFeedback]): String =\n  feedback.filter(_.flagged).map(_.content).getOrElse(\"No flagged feedback found.\")"}
{"id":"3ad4fc57-bc1a-4414-8f22-063c30c601ed","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def reviewQueueHead(queue: Array[String]): String =\n  if (queue == null || queue.isEmpty) null else queue(0)"}
{"id":"bce33677-5c1a-4bd6-8d85-2713ac5f995c","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def extractOptionalLink(text: String): Option[String] =\n  val urlPattern = \"(https?://\\\\S+)\".r\n  urlPattern.findFirstIn(text)"}
{"id":"31094e3a-2f73-4682-8128-bef244fbc403","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def processPostFlag(flagReason: String): String =\n  if (flagReason == null) \"No reason provided\" else flagReason.toUpperCase"}
{"id":"0ce689c4-f6b2-44cf-a850-8df3db1f4468","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def moderatorNoteForContent(content: String): Option[String] =\n  Option(content).filter(_.startsWith(\"Note:\"))"}
{"id":"4e1c31ab-05c4-4f71-a307-2e3c56c5d843","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getModeratorNotes(postId: String): String =\n  if (postId == null) null else s\"Notes for $postId\""}
{"id":"b572df03-9c04-479d-acc7-1ab5e61ce79f","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def maybeGetUserSettings(settings: java.util.Map[String, String]): Option[String] =\n  Option(settings).flatMap(s => Option(s.get(\"language\")))"}
{"id":"b935c25a-c2b2-4666-86f9-71eaedfb02ee","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getPostMediaUrl(mediaUrls: Array[String]): String =\n  if (mediaUrls == null || mediaUrls.length == 0) null else mediaUrls(0)"}
{"id":"ccb16497-bb6a-454e-85f3-cc6975bd941f","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def rejectedPostReason(reason: String): Option[String] =\n  Option(reason).filter(_.nonEmpty).map(_.capitalize)"}
{"id":"211193bd-a945-4f48-9412-a19b4698ee61","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def legacyFetchModerationLog(entryId: Long): String =\n  if (entryId < 0) null else \"ModerationLog: \" + entryId\n\ndef safeLogPrint(entryId: Long): Unit =\n  val log = legacyFetchModerationLog(entryId)\n  if (log != null) println(log)"}
{"id":"901a0e47-e2b1-4d89-9bd3-ce47e0509f48","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def flaggedBySystem(comment: String): Option[String] =\n  Option(comment).filter(_.contains(\"AI-flag\")).map(c => s\"System flagged: $c\")"}
{"id":"642d636d-f65c-4c89-9f10-2070a3030cf2","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getModeratorUsername(user: String): String =\n  if (user == null) \"anonymous moderator\" else user"}
{"id":"9ab9e673-c4ee-494b-b797-ea59030f035b","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class Article(id: String, title: String, content: String)\ndef getRecommendedArticles(userPreferences: String): Option[List[Article]] =\n  val articles = fetchArticlesForPreferences(userPreferences)\n  Option(articles)\n"}
{"id":"f8beb44d-6aa5-4ce4-8c3b-7b76d57d4172","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def fetchUserFeed(userId: String): List[String] =\n  val feed: List[String] = getFeedFromServer(userId)\n  if (feed != null) feed else List.empty\n"}
{"id":"b9840b49-d5be-436e-8f95-eab6d6e9a320","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def personalizedHeadline(article: Article): Option[String] =\n  Option(article.title).filter(_.nonEmpty)\n"}
{"id":"009827a7-f349-4ab9-8f00-bcfde3357d58","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getLastReadArticle(userId: String): Article =\n  val article = legacyGetLastRead(userId)\n  if (article != null) article else Article(\"0\", \"Untitled\", \"No Content\")\n"}
{"id":"dab5222c-394f-49f6-9e51-9d62e55e68b5","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def userPreferencesOption(preferences: UserPreferences): Option[UserPreferences] =\n  Option(preferences)\n"}
{"id":"a9e3442a-f411-4b99-9dd7-2511c783f353","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def fetchBreakingNewsMessage(feed: NewsFeed): String =\n  if (feed == null) \"No News Available\" else feed.latestHeadline\n"}
{"id":"97db396b-9840-4bfd-a440-eabbadda1385","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def mostReadArticleTitle(mostRead: Article): Option[String] =\n  Option(mostRead).map(_.title)\n"}
{"id":"d5379374-a74c-4745-92a7-b9c2e815928c","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getAuthorBio(authorId: String): String =\n  val bio = retrieveAuthorBioFromDb(authorId)\n  if (bio != null) bio else \"Bio not found.\"\n"}
{"id":"ace0c7a1-5c76-460f-b6d2-1c378febc416","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def recommendedTopics(user: NewsUser): Option[List[String]] =\n  Option(user).flatMap(u => Option(u.recommendedTopics))\n"}
{"id":"1670e154-3d61-4000-8121-94ecd0584f3c","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getUnreadCount(feed: PersonalizedFeed): Int =\n  if (feed == null) 0 else feed.unreadArticlesCount\n"}
{"id":"eff81da9-4acb-4e79-a881-1770351be88f","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def latestTrendOption(trend: String): Option[String] =\n  Option(trend).filter(_.nonEmpty)\n"}
{"id":"b7a2d848-b5b3-4f5c-8173-03cf0bcd717b","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def articleSummaryLegacy(article: Article): String =\n  val summary = javaApiGenerateSummary(article)\n  if (summary != null) summary else \"Summary not available.\"\n"}
{"id":"2e271b4a-7d2b-4e4f-a0c8-d66466acbad8","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def filterFavoriteTags(tag: String): Option[String] =\n  Option(tag).filter(_.toLowerCase.startsWith(\"fav\"))\n"}
{"id":"8ba70d70-f38d-4f2d-9687-07222eab0e14","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getUserInterestScore(userProfile: UserProfile): Double =\n  if (userProfile == null) 0.0 else userProfile.interestScore\n"}
{"id":"da1e742b-abb2-4a3c-bb2d-77a713504a04","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedItem(article: Article, timestamp: Long)\ndef getFeedHighlights(feedItems: List[FeedItem]): Option[FeedItem] =\n  feedItems.find(_.article.title.nonEmpty)\n"}
{"id":"f1edfdde-d202-4774-812a-824e8500151e","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getNewsDigest(digestId: String): NewsDigest =\n  val digest = legacyDigestLookup(digestId)\n  if (digest != null) digest else NewsDigest.nil\n"}
{"id":"2807cdf1-8e3c-4347-9f57-3c7dc56547a5","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def trendingTopicOption(topic: String): Option[String] =\n  Option(topic).filter(_.length > 5)\n"}
{"id":"dabcf4cd-6042-4725-8a26-9759740f8ed1","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def legacyFetchTopHeadline(): String =\n  val headline = externalHeadlineProvider()\n  if (headline != null) headline else \"No headline available\"\n"}
{"id":"8943d245-c874-4a37-90b7-8fac1d68c37e","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def safeGetArticleContent(article: Article): Option[String] =\n  Option(article.content).filter(_.nonEmpty)\n"}
{"id":"7c87a91c-2610-4616-8a0a-1e1c8ff9b717","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def removeNullLikes(likes: Array[String]): Array[String] =\n  likes.filter(like => like != null)\n"}
{"id":"167acfa1-226d-4ace-aa41-5e127f2dd96d","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class UserProfile(preferredCategories: List[String])\n\ndef getUserInterest(userId: Int): Option[List[String]] =\n  Option(Database.fetchUserPreferences(userId))\n    .map(prefs => prefs.split(\",\").toList)"}
{"id":"47b908df-f8ca-43c2-8f64-8bb2331bfcb8","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def getNewsArticleTitle(article: NewsArticle): Option[String] =\n  Option(article.title)\n    .filter(_.nonEmpty)"}
{"id":"ef3e1dee-4f1d-48e1-8a3e-ce79d0076eb0","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class NewsFeedItem(content: String, author: String)\ndef formatFeedItem(feedItem: Option[NewsFeedItem]): String =\n  feedItem.map(item => s\"${item.author}: ${item.content}\")\n    .getOrElse(\"[No Content Available]\")"}
{"id":"596e065d-d544-46d9-9388-f3bc108003c6","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def getPersonalizationScore(user: UserProfile): Option[Double] =\n  Option(user)\n    .flatMap(up => Option(up.preferredCategories))\n    .filter(_.nonEmpty)\n    .map(_.length * 1.5)"}
{"id":"101dd371-9226-4987-aaeb-b53eaa015583","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def safeArticleSummary(article: NewsArticle): Option[String] =\n  Option(article.summary).filter(_.length > 50)"}
{"id":"68879eb0-08fe-478d-aedc-771319b41fde","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def fetchUserNewsList(userId: String): Option[List[NewsArticle]] =\n  Option(JavaNewsFeed.getArticlesForUser(userId)).map(_.toList)"}
{"id":"964ebc4b-b245-4cb8-b8ea-755fb4f5caba","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class PersonalizedFeed(articles: List[NewsArticle])\ndef topArticle(feed: PersonalizedFeed): Option[NewsArticle] =\n  feed.articles.headOption"}
{"id":"035ece85-85e8-45c0-a6f0-e37ac56d64e8","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def recommendCategory(user: Option[UserProfile]): Option[String] =\n  user.flatMap(u => u.preferredCategories.headOption)"}
{"id":"4843be48-edc0-4b9f-90aa-f98e98aed976","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def highlightBreakingNews(maybeArticle: Option[NewsArticle]): String =\n  maybeArticle.map(_.title).getOrElse(\"No breaking news right now.\")"}
{"id":"b2205493-3fcd-4484-a0e4-215963ea9f24","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def userLanguagePreference(userId: Int): Option[String] =\n  Option(LegacyUserSettings.languageForUser(userId))"}
{"id":"93383c86-8847-4b64-bef3-271bae67186b","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def getTrendingKeywords(feed: List[NewsArticle]): Option[List[String]] =\n  Option(feed).filter(_.nonEmpty).map(_.flatMap(_.keywords))"}
{"id":"8f8f549c-a5ad-446d-bab9-79514feb208c","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def favoriteJournalist(user: Option[UserProfile]): Option[String] =\n  user.flatMap(profile =>\n    profile.preferredCategories.find(_ == \"journalist\")\n  )"}
{"id":"bcf01189-630b-4e24-b392-5702495a9d8a","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def previewArticle(article: NewsArticle): Option[String] =\n  Option(article.body)\n    .map(text => text.take(100))"}
{"id":"619a3a8a-c7f9-47df-b228-8c607d879eea","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def personalizedGreeting(profile: Option[UserProfile]): String =\n  profile.fold(\"Welcome!\")(user => s\"Welcome, interested in ${user.preferredCategories.mkString(\", \")}\")"}
{"id":"cea9755d-28b6-478c-bc5a-7562f5cbcf23","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def recommendFromSummary(article: Option[NewsArticle]): Option[String] =\n  article.filter(_.summary != null)\n    .flatMap(a => Option(a.summary))\n    .filter(_.length > 20)"}
{"id":"d6897a05-8051-4fa3-9ceb-66056b1da728","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def safeGetAuthorName(article: NewsArticle): Option[String] =\n  Option(article.authorName)\n    .filter(_.nonEmpty)"}
{"id":"0c4f4479-7d8e-4810-abb1-b011829ab06e","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def selectRecentFeed(feedOpt: Option[PersonalizedFeed]): Option[NewsArticle] =\n  feedOpt.flatMap(_.articles.sortBy(_.publicationDate).reverse.headOption)"}
{"id":"9294584a-bf6c-423c-bc67-16b3d473078f","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def getSubscribedTopics(user: UserProfile): List[String] =\n  Option(user.subscriptions).getOrElse(Nil)"}
{"id":"26bfc793-0bb6-45b0-aa35-7ac535c80cf8","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def extractLocation(news: NewsArticle): Option[String] =\n  Option(news.location)\n    .filter(_.nonEmpty)\n    .map(_.capitalize)"}
{"id":"f6843119-9beb-476d-bfe8-40ac7ece0597","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def getRelatedArticles(history: Option[List[NewsArticle]]): List[NewsArticle] =\n  history.getOrElse(List.empty[NewsArticle])"}
{"id":"6d691d2d-a3c0-46de-8dcc-6debede09592","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class LegacyFeedManager {\n  def getLatestNews(username: String): NewsArticle = null\n}\ndef topNewsForUser(user: String): NewsArticle = {\n  val manager = new LegacyFeedManager\n  val article = manager.getLatestNews(user)\n  if (article != null) article else new NewsArticle(\"No News\",\"\",null,null,null)\n}"}
{"id":"e7d4fa5c-6e07-42bd-b280-b7cc5ec4ad3f","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def newsCategoryOrDefault(news: NewsArticle): String = {\n  if (news.category == null) \"General\" else news.category\n}"}
{"id":"3c671e09-e947-4ac1-b3c5-00d5ffc91ae5","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def authorDisplayName(article: NewsArticle): String = {\n  if (article.authorName != null) article.authorName else \"Anonymous\"\n}"}
{"id":"be6885a2-304d-45b8-a814-c9bac9276d21","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getFirstSavedFeed(feeds: Array[PersonalizedFeed]): PersonalizedFeed = {\n  if (feeds != null && feeds.length > 0) feeds(0) else null\n}"}
{"id":"13b45987-be88-47d2-a1a6-ac1e32709a2d","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def shownSummary(article: NewsArticle): String = {\n  if (article.summary == null) \"No summary available.\" else article.summary\n}"}
{"id":"b4b652e9-5fbf-47e1-b26a-5b2fc2b9b2a9","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def findUserFavorites(user: UserProfile): List[String] = {\n  if (user.favoriteTopics != null) user.favoriteTopics else List()\n}"}
{"id":"e6ce5f69-c907-4f04-8cfb-b632bc0dae4a","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class ExternalNewsService {\n  def fetchRelevantArticle(topic: String): NewsArticle = null\n}\ndef getRelevantArticle(service: ExternalNewsService, topic: String): NewsArticle = {\n  val article = service.fetchRelevantArticle(topic)\n  if (article != null) article else new NewsArticle(\"\",\"\",null,null,null)\n}"}
{"id":"a1bf6c57-1940-41a8-a9bd-9bccd47102d3","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getJournalistBio(journalist: Journalist): String = {\n  if (journalist.bio != null) journalist.bio else \"Bio not available.\"\n}"}
{"id":"2c937de1-8dc6-45f8-a8c0-8e0c89350e08","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def preferredLanguageOrEn(profile: UserProfile): String = {\n  if (profile.language != null) profile.language else \"en\"\n}"}
{"id":"f14d2ba8-9365-45e5-80be-f56c0d730f9a","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def feedTitleOrDefault(feed: PersonalizedFeed): String = {\n  if (feed.title == null) \"My News Feed\" else feed.title\n}"}
{"id":"81b32794-0fa0-4977-a22e-6a4867411e99","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getTopicImage(topic: String): String = {\n  val img = DeprecatedTopicImageService.fetchImage(topic)\n  if (img == null) \"default.png\" else img\n}"}
{"id":"c9b2efde-f48e-4c4d-8274-dc00ca8625f4","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def safeFetchUserFeed(userService: UserAccountService, userId: Int): Feed = {\n  val feed = userService.getFeedOrNull(userId)\n  if (feed != null) feed else new Feed(List(),null)\n}"}
{"id":"e02438aa-b14e-48f3-999d-3a1517604508","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getFeedSourceName(feed: PersonalizedFeed): String = {\n  if (feed.sourceName != null) feed.sourceName else \"Unknown Source\"\n}"}
{"id":"b4781e7b-6265-4d8e-ac6e-cecadc593ac1","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getBookmarkTitleOrUntitled(bookmark: Bookmark): String = {\n  if (bookmark.title == null) \"Untitled\" else bookmark.title\n}"}
{"id":"4f5c3951-ce9d-4c57-9c14-0a2db74bccc7","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingStation(id: Int, name: String, location: String)\n\ndef findStationById(id: Int): Option[ChargingStation] =\n  val stations = List(\n    ChargingStation(1, \"Downtown FastCharge\", \"Main St\"),\n    ChargingStation(2, \"Mall EV Point\", \"Mall Road\")\n  )\n  stations.find(_.id == id)\n"}
{"id":"ae673277-f69d-4a7c-89c2-5911eaff4990","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getConnectorTypeOrNone(stationId: Int): Option[String] =\n  val connectors = Map(1 -> \"Type2\", 2 -> \"CCS\")\n  connectors.get(stationId)\n"}
{"id":"b6cd0875-9d81-429a-bb64-7b939c9e2565","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def safeFindNearestCharger(location: String): Option[String] =\n  val chargers = Map(\"Avenue Park\" -> \"FastCharge Central\")\n  Option(chargers.getOrElse(location, null))\n"}
{"id":"572417dc-2239-424c-9763-57b5b679e8b1","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def printOperatorNameIfExists(station: Option[ChargingStation]): Unit =\n  station.map(_.name).foreach(println)\n"}
{"id":"99a0b574-8d6c-48dd-af69-91914a9d4513","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getStationContact(email: String): Option[String] =\n  val contacts = Map(\"support@evhub.com\" -> \"123-456-7890\")\n  contacts.get(email)\n"}
{"id":"cce5f188-6e0f-4c34-b2f3-a00abe715847","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def isAvailable(station: Option[ChargingStation], requiredType: String): Boolean =\n  station.exists(_.name.contains(requiredType))\n"}
{"id":"3744a760-43f9-4e71-b525-b9e78d37f395","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def fallbackToDefaultStation(stationName: Option[String]): String =\n  stationName.getOrElse(\"Default Charging Hub\")\n"}
{"id":"03b469be-0eda-4292-a8d3-36d0901ceea0","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def stationLogoUrl(station: Option[ChargingStation]): Option[String] =\n  station.flatMap(s => Option(s\"/assets/${s.id}_logo.png\"))\n"}
{"id":"114a3965-656b-476c-97ae-7350dc218d6c","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def filterFastCharging(stations: List[ChargingStation]): List[ChargingStation] =\n  stations.filter(_.name.contains(\"Fast\"))\n"}
{"id":"14313469-e3ea-4148-801e-4645d8b1b5df","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getPowerRating(station: Option[ChargingStation]): Option[Int] =\n  station.map(_.id * 11)\n"}
{"id":"fe500ac4-e85f-4775-ae56-b8064044b3e0","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def javaFindStation(name: String): ChargingStation =\n  if (name == \"Sun Power\") ChargingStation(3, \"Sun Power\", \"Green Lane\") else null\n\ndef safeFindStationByJava(name: String): Option[ChargingStation] =\n  Option(javaFindStation(name))\n"}
{"id":"98010994-f31a-4e2b-a655-85f682f2daa8","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def distanceToStation(currentLocation: Option[String], stationLocation: Option[String]): Option[Double] =\n  for\n    curr <- currentLocation\n    station <- stationLocation\n  yield 1.2\n"}
{"id":"0672fd17-1fd5-425e-82d7-ba6e8a47f713","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def maybeGetStationPhone(station: Option[ChargingStation]): Option[String] =\n  station.filter(_.location == \"Main St\").map(_ => \"555-1001\")\n"}
{"id":"3b4d17ef-9ad9-4b4d-8e4b-cab71456633a","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def stationOrAlternative(station: Option[ChargingStation], alternative: ChargingStation): ChargingStation =\n  station.fold(alternative)(identity)\n"}
{"id":"9fd21d29-7437-4b68-9d12-518835cd36d1","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def displayStationDetails(station: Option[ChargingStation]): String =\n  station.map(s => s\"${s.name}@${s.location}\").getOrElse(\"No Station Found\")\n"}
{"id":"47bc8cc6-2bfe-43da-a395-1380f8087a31","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getChargerCount(station: Option[ChargingStation]): Option[Int] =\n  station.flatMap(s => Option(4))\n"}
{"id":"6ffc6de6-a4f8-4f9d-b0b2-faddcf850695","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"class StationDirectory(stations: Map[Int, String]) {\n  def getStationName(id: Int): Option[String] = stations.get(id)\n}\n"}
{"id":"604a4b03-1652-4078-924d-491ee673a204","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def maybeOperator(station: Option[ChargingStation]): Option[String] =\n  station.map(_.name.split(\" \").headOption.getOrElse(\"Unknown\"))\n"}
{"id":"a141c132-df7c-41c2-92f7-66b115072b03","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def isChargingStationNearby(location: Option[String]): Boolean =\n  location.exists(_ == \"Green Lane\")\n"}
{"id":"8a9c40a5-9ee4-48be-8147-4ef5d2a7e0fb","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getStationWebsiteOrDefault(site: Option[String]): String =\n  site.getOrElse(\"https://evcharge.com/default\")\n"}
{"id":"8276c081-b33a-412a-9a76-0508c529c797","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargingSpot(val id: Int, val name: String, val address: String)\ndef getNearestSpot(location: String): ChargingSpot =\n  if (location == \"Main St\") new ChargingSpot(1, \"Downtown EV Point\", \"Main St\") else null\n\ndef printNearestSpot(location: String): Unit = {\n  val spot = getNearestSpot(location)\n  if (spot != null) println(spot.name)\n}\n"}
{"id":"174185f3-f6a3-474f-85ef-be8ccb32b6e2","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getStationHtml(id: Int): String =\n  val stationNames = Map(5 -> null, 6 -> \"Rapid EV Station\")\n  val name = stationNames.getOrElse(id, null)\n  if (name != null) s\"<h1>$name</h1>\" else \"<h1>Not Found</h1>\"\n"}
{"id":"2ba12260-bae9-4e53-b922-9140f374f877","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def javaOperatorName(javaObj: AnyRef): String =\n  if (javaObj != null) javaObj.toString else \"Unknown Operator\"\n"}
{"id":"97293ef3-cd9c-4981-9e28-f38d40b3896a","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getChargerTypeFromLegacyDb(id: Int): String =\n  val dbResult = if (id == 7) \"CHAdeMO\" else null\n  if (dbResult != null) dbResult else \"Unknown\"\n"}
{"id":"1e6323a2-1f3f-48fb-a65c-53fcaad37746","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def lastInspected(station: ChargingStation): String =\n  if (station != null && station.id == 1) \"2024-05-20\" else null\n"}
{"id":"9a15e764-9cf6-4a11-8f0d-a2de40ed1a64","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def showContactNumber(contact: String): Unit =\n  if (contact != null) println(contact)\n"}
{"id":"f0f97970-af89-4187-8c0d-4f49f2a97b17","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def checkAvailabilityInApi(id: Int): Boolean =\n  val apiResult = if (id == 10) \"available\" else null\n  apiResult != null\n"}
{"id":"21e1f503-9a28-4335-8c83-1e7186d05c08","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class NetworkStation(val reference: String, val network: String)\ndef getNetworkInfo(network: String): NetworkStation =\n  if (network == \"ChargeNow\") new NetworkStation(\"Ref-1\", network) else null\n"}
{"id":"4f2033f1-10e4-48b6-abfc-b85af614a684","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def unsafeStationIdExtraction(station: ChargingStation): Int =\n  if (station != null) station.id else -1\n"}
{"id":"7570de9e-d15d-4b4f-9044-53246b1d37a7","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getBillingInfo(accountId: String): String =\n  val info = if (accountId == \"EV123\") \"Active\" else null\n  if (info != null) info else \"No Info\"\n"}
{"id":"d4c1d96e-5346-4800-80aa-b1094a3567bd","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def findLegacyStationByName(name: String): ChargingStation =\n  if (name == \"Green Point\") ChargingStation(4, \"Green Point\", \"Eco Lane\") else null\n"}
{"id":"f437a5e6-98a2-496d-9063-35f453acf433","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def printStationLogo(logoUrl: String): Unit =\n  if (logoUrl != null) println(logoUrl)\n"}
{"id":"946c582d-f87c-49a6-88d1-4bf45b0ba877","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingStation(id: String, name: String, location: String)\ndef findNearestStationOrNone(userLocation: String, stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.find(_.location == userLocation)\n    .orElse(stations.headOption)"}
{"id":"86b2aca0-5ed6-46ce-9338-0b18df81ea5d","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getChargerDetailsOrNone(stationId: String): Option[String] =\n  val chargerInfo = JavaChargerService.fetchChargerById(stationId)\n  Option(chargerInfo).map(_.toString)"}
{"id":"cfe45892-283a-483b-b4e3-fa6d8429a5e8","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getAvailableStationsCount(city: String, stations: List[ChargingStation]): Option[Int] =\n  val filtered = stations.filter(_.location == city)\n  Option.when(filtered.nonEmpty)(filtered.size)"}
{"id":"a65aad58-862d-4baf-b77c-689572dfd082","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def selectFastChargingStation(area: String, stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.find(_.name.contains(\"Fast Charger\"))\n    .filter(_.location == area)\n    .orElse(None)"}
{"id":"673da17f-ed0d-44c1-96c9-b4dc33f826ed","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargingNetworkFinder {\n  def findStationByIdOrNull(stations: Array[ChargingStation], soughtId: String): ChargingStation = {\n    var i = 0\n    while (i < stations.length) {\n      if (stations(i) != null && stations(i).id == soughtId) {\n        return stations(i)\n      }\n      i += 1\n    }\n    null\n  }\n}"}
{"id":"2496c0ae-c46b-48a7-9197-53aa8e045dea","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getStationLocationById(stations: List[ChargingStation], id: String): String = {\n  val s = stations.find(_.id == id).orNull\n  if (s != null) s.location else null\n}"}
{"id":"dbd7e3b6-6093-44b7-80d6-ed26e290ea56","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def checkChargerAvailability(station: ChargingStation): Boolean = {\n  if (station != null && station.name != null) {\n    station.name.contains(\"Available\")\n  } else {\n    false\n  }\n}"}
{"id":"af2ffa08-56bf-432f-bbde-21e2edf7c9f9","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def fetchStationNameFromLegacyJava(stationNumber: Int): String = {\n  val legacyName = LegacyJavaEVService.getStationName(stationNumber)\n  if (legacyName != null) legacyName else \"Unknown Station\"\n}"}
{"id":"4fec7d9f-2c06-44c9-b08e-bb0966a52365","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class CropSensorData(temperature: Double, humidity: Double)\ndef safeSensorReading(sensor: AnyRef): Option[CropSensorData] = Option(sensor).map(_.asInstanceOf[CropSensorData])"}
{"id":"013ef5d7-ecd9-4007-bb36-99bf10299095","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getSoilMoistureLevel(fieldId: String): Double = {\n  var moisture: java.lang.Double = ExternalSoilMoistureAPI.getLevel(fieldId)\n  if (moisture == null) -1.0 else moisture.doubleValue()\n}"}
{"id":"1a323256-78ef-4c56-9ef8-d8ea91f8778d","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def findCropDiseaseStatus(cropId: String): Option[String] = {\n  val diseaseStatus: String = ExternalDiseaseAPI.statusFor(cropId)\n  Option(diseaseStatus)\n}"}
{"id":"76ed209c-9a75-4563-bda2-ac14a44ee445","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def retrieveIrrigationSchedule(plotId: Int): String = {\n  val schedule = IrrigationRepository.scheduleForPlot(plotId)\n  if (schedule == null) \"Unknown\" else schedule\n}"}
{"id":"9dfd16c0-abae-4ad6-b7a6-86ac9b3743d3","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def healthyLeafCount(maybeObservation: Option[LeafObservation]): Int = {\n  maybeObservation.map(_.healthyCount).getOrElse(0)\n}"}
{"id":"c10aa703-500c-4fc2-a538-45326245bfbd","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def fetchWeatherReport(region: String): WeatherReport = {\n  val report = WeatherService.getLatest(region)\n  if (report != null) report else new WeatherReport(0.0, 0.0)\n}"}
{"id":"efbc984e-98c9-4cf4-8a97-7188e8607b43","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class FieldMonitor(id: String, lastSoilPh: Option[Double])\ndef averagePhLevel(monitors: List[FieldMonitor]): Double = {\n  val phs = monitors.flatMap(_.lastSoilPh)\n  if phs.isEmpty then 7.0 else phs.sum / phs.size\n}"}
{"id":"b81fd890-5971-40ff-8fcb-ad8d545ec6ed","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getCropHealthStatus(cropId: String): String = {\n  val status = CropDatabase.lookupHealth(cropId)\n  if (status != null) status else \"No Data\"\n}"}
{"id":"faf51095-98c8-47b5-8058-d765b008ca45","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def sensorReadingToOption(reading: java.lang.Double): Option[Double] = Option(reading).map(_.toDouble)"}
{"id":"057300da-a14b-4e63-aaa9-f0676695a9c6","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def fetchPestAlert(fieldId: String): String = {\n  val alert = PestIntegrationJavaApi.getAlertForField(fieldId)\n  if (alert == null) \"No Alert\" else alert\n}"}
{"id":"8e52c222-014a-43b3-b4b5-233777f9d9d5","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def lastHarvestTimestamp(field: FieldStatus): Option[Long] = Option(field.lastHarvestTimestamp)"}
{"id":"7551981a-055b-4f68-88f7-d49b53643b62","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def plotSupervisorName(plot: FarmPlot): Option[String] = Option(plot.supervisorName)"}
{"id":"bb816c31-d0cf-48df-8cdb-feaae3997488","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getFertilizerRecommendation(cropType: String): String = {\n  val fertilizer = FertilizerJavaAPI.recommend(cropType)\n  if (fertilizer != null) fertilizer else \"N/A\"\n}"}
{"id":"72682f82-478b-42a5-86b5-195ddf9aa27d","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def cropGrowthStage(optStage: Option[String]): String = {\n  optStage.map(_.capitalize).getOrElse(\"Unknown Stage\")\n}"}
{"id":"e03f4391-bb12-4a3b-ab83-62b2e3d332ac","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def retrieveSensorArray(serial: String): SensorArray = {\n  val result = FieldSensorDB.getArrayBySerial(serial)\n  if(result != null) result else new SensorArray(serial, Array.empty)\n}"}
{"id":"c5177b92-99a1-45b2-a79b-3c5666cc8647","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def soilSampleQuality(sample: Option[SoilSample]): String =\n  sample.map(_.quality).getOrElse(\"Unrated\")"}
{"id":"93abf342-3064-4baf-bfee-879e7c47be93","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getActiveCrop(plotName: String): Crop = {\n  val crop = CropRegistry.activeOnPlot(plotName)\n  if (crop != null) crop else new Crop(\"Unknown-Crop\")\n}"}
{"id":"9feb04cc-6efe-4e88-903f-b32dcdfc69b5","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def weatherStationStatus(maybeStatus: Option[StationStatus]): String = {\n  maybeStatus.fold(\"Unknown\")(s => s.statusDetail)\n}"}
{"id":"712288fe-d8a4-4380-9e23-a640bc6a782e","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def fetchFieldReport(fieldId: Int): FieldReport = {\n  val report = JavaMonitoringApi.getReport(fieldId)\n  if (report == null) new FieldReport(fieldId, \"No Data\") else report\n}"}
{"id":"6d21a559-4499-404c-88ba-02454e1d5217","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def latestYieldMeasurement(yieldValue: java.lang.Double): Option[Double] =\n  Option(yieldValue).map(_.toDouble)"}
{"id":"09663352-26b7-4341-8177-b8e9728e67e1","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class SoilSample(moisture: Double, temperature: Double)\ndef getSoilSampleOrNone(sample: SoilSample | Null): Option[SoilSample] =\n  Option(sample)"}
{"id":"2f37ca44-659b-4611-a71f-6d3e3517f02f","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def retrieveRainfallMeasurement(sensor: RainfallSensor): Option[Double] =\n  Option(sensor.getLatestMeasurement)\n    .filter(_ >= 0)"}
{"id":"2bc8774a-c53c-4989-80fe-16dc5963fd64","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def cropHealthStatus(status: String | Null): Option[String] =\n  Option(status).map(_.toUpperCase)"}
{"id":"50c36e3f-893b-40f0-87be-fc725f9b45be","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class CropLocation(fieldId: String, latitude: Double, longitude: Double)\ndef safeCropLocationLookup(fieldId: String): Option[CropLocation] =\n  Option(JavaCropDB.findLocation(fieldId))"}
{"id":"a24da617-99d5-4f95-b79b-2964004330c4","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def sensorBatteryLevel(sensor: FieldSensor): Option[Int] =\n  Option(sensor.batteryLevel)\n    .filter(_ > 5)"}
{"id":"00b8f749-c141-45a7-9f86-e03173d99103","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def getLatestIrrigationEvent(field: IrrigationField): Option[IrrigationEvent] =\n  Option(field.lastIrrigationEvent)\n    .filter(_.durationMinutes > 0)"}
{"id":"2761f349-782c-4582-915a-744465242884","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def safeFertilizerDosage(kg: java.lang.Double | Null): Option[Double] =\n  Option(kg).map(_.doubleValue).filter(_ > 0)"}
{"id":"38978889-9d85-49ea-a954-669b4dcf5cbe","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def safeWeatherAlert(alert: WeatherAlert | Null): Option[WeatherAlert] =\n  Option(alert)\n    .filter(a => a.severity != \"LOW\")"}
{"id":"552e2a62-fb08-4296-ba02-aa85210bd550","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def getHarvestPrediction(yieldEstimator: YieldEstimator): Option[Double] =\n  Option(yieldEstimator.predictHarvest)\n    .filter(_ > 0)"}
{"id":"9fbf1867-1bf6-4220-beec-b6693f45fe5e","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def safeCropGrowthStage(stage: CropStage | Null): Option[CropStage] =\n  Option(stage)"}
{"id":"1aafb0dc-43aa-4993-89d3-b6c275b9b479","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getSoilPhLevel(sample: SoilSample): Double =\n  if (sample != null && sample.ph != null) sample.ph.doubleValue else -1.0"}
{"id":"06eb9fa3-99ef-4136-9509-fbfa5e9e1796","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getPlantDiseaseReport(field: CropField): String =\n  val report = field.retrieveLatestDiseaseReport()\n  if (report != null) report else \"No disease report available\""}
{"id":"89ebf1d6-aaaf-4556-9178-98a23c3a6df0","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def fetchSatelliteImage(fieldId: String): SatelliteImage =\n  val img = ExternalSatelliteService.getImageOrNull(fieldId)\n  if (img != null) img else null"}
{"id":"6f3073ea-cfe0-4b68-8d52-4b481ddf9fef","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def pesticideUsageSummary(season: String): String =\n  val summary = PesticideAnalyticsService.getSummary(season)\n  if (summary == null) \"Summary unavailable\" else summary"}
{"id":"d6228f19-76e3-429f-8941-583d030af057","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def soilTemperatureValue(sensor: SoilTempSensor): java.lang.Double =\n  val temp = sensor.readTemperature\n  if (temp != null) temp else null"}
{"id":"841f3309-e376-41be-ba0c-6da22dd369f3","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def irrigationHistory(field: CropField): IrrigationRecord =\n  val history = field.getLatestIrrigationRecord\n  if (history != null) history else null"}
{"id":"f533d406-904b-4a83-8dbb-7f1472991880","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getNextCropRotation(plan: RotationPlan): CropVariety =\n  val variety = plan.suggestNextVariety\n  if (variety == null) null else variety"}
{"id":"91923eed-24d1-4ac9-afdf-d50376a09067","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def monitorSensorHealth(sensor: FieldSensor): String =\n  if (sensor == null) \"No sensor available\"\n  else if (sensor.status == null) \"Unknown status\"\n  else sensor.status"}
{"id":"634affc9-901a-4bbb-9710-5f115f3288d6","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def retrieveCropImage(cropId: String): Array[Byte] =\n  val image = CropImageRepository.getCropImageOrNull(cropId)\n  if (image != null) image else null"}
{"id":"021b8a79-6904-448f-8cbe-cfd2888c3c9b","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def lastWeatherAlert(farmId: String): WeatherAlert =\n  val alert = WeatherAlertService.getLatestAlertForFarm(farmId)\n  if (alert != null) alert else null"}
{"id":"b7968502-62c9-43c0-9bb5-17b571a48e83","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"case class TemperatureSensorReading(deviceId: String, temperature: Double)\ndef extractTemperature(reading: TemperatureSensorReading | Null): Double = {\n  if (reading != null) reading.temperature else 0.0\n}"}
{"id":"dd6f0946-ba94-4a83-87fb-31a57fda5cff","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class HumidityAggregator {\n  var lastUpdate: java.util.Date = null\n  def updateTimestamp(newTimestamp: java.util.Date): Unit = {\n    if (newTimestamp != null) {\n      lastUpdate = newTimestamp\n    }\n  }\n}"}
{"id":"68f64ce4-5f90-416c-b5e6-cb6a816c29a3","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def mergeSensorIds(primary: String, secondary: String): String = {\n  if (primary != null) primary else if (secondary != null) secondary else null\n}"}
{"id":"5b036ba0-547d-49ca-ad78-cc46c035af5f","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def averagePressure(readings: Array[Double]): java.lang.Double = {\n  if (readings != null && readings.nonEmpty) readings.sum / readings.length else null\n}"}
{"id":"4c87d909-ca7b-460b-9282-4101c37dbc87","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class LocationAggregator {\n  private var latestLocation: String = null\n  def setLocation(location: String): Unit = {\n    if (location != null) {\n      latestLocation = location\n    }\n  }\n  def getLocation: String = latestLocation\n}"}
{"id":"e368da52-8a0a-435e-b2c1-8fccda7426e2","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"object SensorBatchProcessor {\n  def firstAvailableReading(readings: Array[String]): String = {\n    if (readings != null && readings.nonEmpty) {\n      readings.find(_ != null).getOrElse(null)\n    } else null\n  }\n}"}
{"id":"d34adb83-1a2f-4345-a38a-c1f6f7c7e539","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def combineLightLevels(sensorA: java.lang.Integer, sensorB: java.lang.Integer): java.lang.Integer = {\n  if (sensorA != null && sensorB != null) sensorA + sensorB else null\n}"}
{"id":"9ff39fa6-287b-41a0-b704-66f51bff8221","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def getLatestMotion(sensorReadings: List[String]): String = {\n  if (sensorReadings != null && sensorReadings.nonEmpty) sensorReadings.last else null\n}"}
{"id":"06581ba3-b98d-4f7e-945c-51ac0a33de28","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class SensorCluster {\n  var sensorNodes: Array[String] = null\n  def addNode(nodeId: String): Unit = {\n    if (sensorNodes == null) {\n      sensorNodes = Array(nodeId)\n    } else {\n      sensorNodes = sensorNodes :+ nodeId\n    }\n  }\n}"}
{"id":"62f2a93b-799f-4ef7-baaf-595b12e5bfb8","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def retrieveAggregatedEnergy(energyRecord: AnyRef): Double = {\n  if (energyRecord != null) {\n    energyRecord.hashCode.toDouble\n  } else 0.0\n}"}
{"id":"4bafb99f-89dd-4a16-8932-cc8a3beb170f","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class TemperatureSensorReading(deviceId: String, temperature: Double)\ndef extractTemperature(reading: TemperatureSensorReading | Null): Option[Double] = {\n  Option(reading).map(_.temperature)\n}"}
{"id":"bb586e92-65d6-4af1-9ff4-22894e9a5126","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def safeHumidityAverage(values: Seq[Double] | Null): Option[Double] = {\n  Option(values).filter(_.nonEmpty).map(l => l.sum / l.size)\n}"}
{"id":"c6ac714c-4607-48d6-a413-86cce02a5b26","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def locationOption(location: String): Option[String] =\n  Option(location).filter(_.nonEmpty)"}
{"id":"9392ea61-1f8e-44e1-ae93-5fc5a737678f","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class EnergySample(sensorId: String, energy: Double)\ndef aggregateEnergy(samples: List[EnergySample]): Option[Double] = {\n  Option(samples).filter(_.nonEmpty).map(_.map(_.energy).sum)\n}"}
{"id":"3c2b42e3-243a-4677-8ecf-a0c106a9c0de","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def safeLightReading(raw: String | Null): Option[Int] = Option(raw).flatMap(l => l.toIntOption)"}
{"id":"263b7812-5b42-4ab1-8b86-85dd0595509f","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"object MotionDetector {\n  def latestMotion(sensorIds: List[String]): Option[String] = {\n    sensorIds.lastOption\n  }\n}"}
{"id":"de494c92-e995-4398-9bed-4547769a7382","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def clusterNodesOption(nodes: Array[String] | Null): Option[Array[String]] = Option(nodes)"}
{"id":"0e9e6abf-4d52-4fc3-985a-741d11715088","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def aggregatePressure(pressures: Seq[Double]): Option[Double] =\n  if pressures.isEmpty then None else Some(pressures.sum / pressures.size)"}
{"id":"0c7d8382-ad11-475b-85ce-8c11e5e3bfa4","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def latestCO2Level(levels: List[Option[Double]]): Option[Double] = {\n  levels.reverse.collectFirst { case Some(level) => level }\n}"}
{"id":"4d6142d9-9c16-46a5-8a4f-ef7bc4f2210e","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def mergedSensorIds(primary: Option[String], secondary: Option[String]): Option[String] = {\n  primary orElse secondary\n}"}
{"id":"00b5a534-e9ad-48ae-a626-2186fc50c97f","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"case class SensorReading(sensorId: String, value: Double)\ndef extractTemperature(reading: SensorReading | Null): Double = {\n  if (reading == null) -999.0 else reading.value\n}"}
{"id":"759e3bd8-6f0c-4099-acb6-d8636eca1416","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"object LegacySensorApi {\n  def fetchHumidity(sensorLocation: String): java.lang.Double = null\n}\ndef getHumidityOrDefault(sensorLocation: String): Double = {\n  val humidity = LegacySensorApi.fetchHumidity(sensorLocation)\n  if (humidity != null) humidity else 0.0\n}"}
{"id":"358d174d-fc9e-48ca-bc78-ba276bb8581b","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class SensorAggregator {\n  def findLatestReading(readings: Array[SensorReading]): SensorReading = {\n    if (readings != null && readings.nonEmpty) readings.maxBy(_.value) else null\n  }\n}"}
{"id":"d1ac3487-a12f-4ded-b27e-c19e4a657ede","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def parseMotionEvent(rawEvent: java.lang.String): MotionSensorEvent = {\n  if (rawEvent == null) null else MotionSensorEvent(rawEvent)\n}"}
{"id":"13295e46-0c55-4df6-810a-2f4c7212b194","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def getSensorData(sensorInterface: SensorInterface): SensorPacket = {\n  val packet = sensorInterface.poll()\n  if (packet == null) new SensorPacket(\"unknown\", 0L, -1.0) else packet\n}"}
{"id":"19c9749d-e2fb-4624-a2cd-a8b14afca03d","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def retrievePressure(sensorId: String): java.lang.Double = null\ndef computePressureDiff(pressure1: java.lang.Double, pressure2: java.lang.Double): Double = {\n  if (pressure1 != null && pressure2 != null) pressure1 - pressure2 else 0.0\n}"}
{"id":"1ad355fb-413c-465f-a030-d001b19a6207","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class IoTGateway {\n  def forwardReading(reading: SensorReading): String = {\n    if (reading == null) \"No Data\" else s\"Forwarded: ${reading.sensorId}\"\n  }\n}"}
{"id":"9d98b9c5-a0ed-4252-9f03-401fba156bc9","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def updateSensorMap(sensorMap: java.util.Map[String, java.lang.Double],\n                    sensorKey: String, value: java.lang.Double): Unit = {\n  if (sensorMap != null && sensorKey != null)\n    sensorMap.put(sensorKey, value)\n}"}
{"id":"667b2423-a355-4be0-ad4b-f7d7a42d0868","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def concatLocations(loc1: String, loc2: String): String = {\n  if (loc1 == null) loc2\n  else if (loc2 == null) loc1\n  else loc1 + \",\" + loc2\n}"}
{"id":"d5fd2ee3-a431-4b42-adaf-6aa0cddca806","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def calibrateReading(calibrator: Calibrator | Null, \n                     input: SensorPacket): SensorPacket | Null = {\n  if (calibrator == null) null else calibrator.calibrate(input)\n}"}
{"id":"f63919ae-afee-411e-8b62-587b6ac88a88","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class SensorPacket(sensorId: String, timestamp: Long, measurement: Double)\nobject SensorUtils:\n  def optionalReading(reading: SensorPacket | Null): Option[SensorPacket] = Option(reading)"}
{"id":"cd316cc7-5cc7-4282-9730-98097dfe0546","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def meanTemperature(readings: Seq[TemperatureSample]): Option[Double] = {\n  val valid = readings.filter(_.value != null)\n  if valid.nonEmpty then Some(valid.map(_.value).sum / valid.size)\n  else None\n}"}
{"id":"e9432abe-40e7-498c-8588-8b7a8414f5c7","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def safeHumidity(rawHumidity: java.lang.Double): Option[Double] = Option(rawHumidity)\ndef formatHumidity(reading: Option[Double]): String = {\n  reading.fold(\"No data\")(h => f\"$h%.2f%%\")\n}"}
{"id":"d3723b44-05ff-41e3-8e03-4196a11b9318","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def findMaxPressure(samples: List[PressureData]): Option[Double] =\n  samples.map(_.pressure).reduceOption(_ max _)\n"}
{"id":"400980cd-b547-4c73-b8a6-741d3f7fd6f3","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def aggregateActiveSensors(stations: Seq[StationReading]): Option[Int] =\n  Option(stations).filter(_.nonEmpty).map(_.count(_.isActive))\n"}
{"id":"27ac3dee-bcd3-48f8-b1a2-cd8d9149a7df","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def lastMotionEvent(events: Seq[MotionSensorEvent]): Option[MotionSensorEvent] = {\n  events.lastOption\n}"}
{"id":"af621aec-3177-4872-a77e-cfa5f91bb95e","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def safeSensorName(maybeName: String | Null): Option[String] = Option(maybeName)\ndef displaySensorName(optName: Option[String]): String =\n  optName.getOrElse(\"Unnamed Sensor\")"}
{"id":"08adb27e-a983-43ef-93e6-fdb75296b7e2","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def validReadingCount(values: Seq[Option[Double]]): Int =\n  values.count(_.exists(_ > 0.0))\n"}
{"id":"91f219fd-d80e-4e8a-a03c-89331f6aae24","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def mergeReadings(a: Option[SensorPacket], b: Option[SensorPacket]): Option[SensorPacket] =\n  a.orElse(b)\n"}
{"id":"6b186004-a604-4ad5-8626-799bc56ecf71","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def filterValidTemperatures(temperatures: List[Option[Double]]): List[Double] =\n  temperatures.flatten\n"}
{"id":"831aa3f9-ed3c-407b-8535-626b4293578c","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class BusStop(id: Int, name: String, connections: List[Int])\ndef findNextStop(route: List[BusStop], currentStopId: Int): Option[BusStop] =\n  route.find(_.id == currentStopId).flatMap { stop =>\n    stop.connections.headOption.flatMap(nextId => route.find(_.id == nextId))\n  }"}
{"id":"bbd5b916-d275-41d5-9c4f-ecbf81d95566","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getTrainArrivalTime(schedule: java.util.Map[String, String], station: String): String = {\n  val arrival = schedule.get(station)\n  if (arrival != null) arrival else \"No data\"\n}"}
{"id":"e875d23b-1b12-4037-a6fa-a5e596174980","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def safeTransferConnection(conn: String): Option[String] =\n  Option(conn).filter(_.startsWith(\"Transfer\"))"}
{"id":"111cd916-0c5c-43af-9ecd-b7f42c6de6b3","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def fetchBusRouteById(routeId: Int): Route = {\n  val possibleRoute = JavaRouteService.findRouteById(routeId)\n  if (possibleRoute != null) possibleRoute else null\n}"}
{"id":"034a9b5a-59ad-40b7-bc08-4ee77458188f","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def safeHeadwayValue(headway: java.lang.Integer): Option[Int] =\n  Option(headway).map(_.intValue)"}
{"id":"e1b7a2da-1d81-49b2-a3b6-6c6a85da4b59","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getStopNameIfNotNull(busStop: BusStop): String = {\n  if (busStop != null) busStop.name else \"Unknown stop\"\n}"}
{"id":"28645f35-996a-4fc7-9465-9a26c2023444","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def wrapNullableTrain(train: Train): Option[Train] =\n  Option(train).filter(_.status == \"OnTime\")"}
{"id":"9aa6cdbb-d2ef-4d05-9526-437e94c87da1","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def checkStationCode(station: Station): Boolean = {\n  if (station != null) station.code.matches(\"[A-Z]{3}\") else false\n}"}
{"id":"a7a0a76c-70ad-42d5-900d-9566e6044bd6","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def findEarliestDeparture(departures: List[Option[Departure]]): Option[Departure] =\n  departures.flatten.sortBy(_.time).headOption"}
{"id":"b2d28711-cade-4c0f-9b0a-ba9c5e1230cd","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def routeDescriptionOrNone(route: Route): Option[String] =\n  Option(route).map(_.description)"}
{"id":"33b28677-5790-47a1-8dbe-f787de2b10b5","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getFirstTransfer(stopList: java.util.List[Station]): Station = {\n  val first = if (stopList != null && !stopList.isEmpty) stopList.get(0) else null\n  if (first != null && first.isTransfer) first else null\n}"}
{"id":"4bf6ea83-1eba-45d6-926d-4ceb8d87a467","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def safeGetStationSchedule(schedule: java.util.Map[String, java.util.List[String]], station: String): Option[List[String]] =\n  Option(schedule.get(station)).map(_.toArray.toList.map(_.toString))"}
{"id":"5acfd7de-2415-4320-be6e-5c7b18074d83","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getConnectionIfPresent(connection: Connection): String = {\n  if (connection != null) connection.route else \"No connection\"\n}"}
{"id":"2053d95d-7465-431c-b940-0f33c663a1cc","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def maybeActiveBus(bus: java.lang.String): Option[String] =\n  Option(bus).filter(_.nonEmpty)"}
{"id":"bb009c93-ad43-4ca6-9fd6-d6d84b870c66","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def isTramActive(tram: Tram): Boolean = {\n  if (tram != null && tram.status == \"Active\") true else false\n}"}
{"id":"d2fff7e4-8219-4707-a053-6f79f67ba3c0","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def getBusByNumber(buses: List[Option[Bus]], number: String): Option[Bus] =\n  buses.collect { case Some(bus) if bus.number == number => bus }.headOption"}
{"id":"a82b8aee-73ff-422f-997d-eeed6067e4d2","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def displayDeparture(departure: Departure): Unit = {\n  if (departure != null) println(departure.time) else println(\"No departure info\")\n}"}
{"id":"610caeeb-af4f-4eb3-bd62-f576a99b7902","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def passengerCountOrZero(count: java.lang.Integer): Int =\n  Option(count).fold(0)(_.intValue)"}
{"id":"73715d95-556c-4be5-8074-e3218a4fef88","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def tripStatusOrDelayed(trip: Trip): String = {\n  if (trip != null && trip.status != null) trip.status else \"Delayed\"\n}"}
{"id":"c88a906d-ce0a-43db-bace-bc06cd74c318","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class StopTime(station: String, time: Option[String])\ndef formatStopTime(stopTime: StopTime): String =\n  stopTime.time.getOrElse(\"Time unavailable\")"}
{"id":"3880d100-35a2-45c2-8d8b-1454e415e9aa","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"case class Station(name: String, latitude: Double, longitude: Double)\ndef getTransferStation(connection: AnyRef): Station = {\n  if (connection != null) connection.asInstanceOf[Station]\n  else null\n}"}
{"id":"488bb0a7-7e44-477d-ba1c-e49bdc69eb05","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def findNextBus(routeSchedule: Array[String], currentTime: String): String = {\n  for (time <- routeSchedule) {\n    if (time != null && time > currentTime) return time\n  }\n  null\n}"}
{"id":"2ab7339d-417c-4f61-960b-bc43f52d291e","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Journey(val start: Station, val end: Station, val duration: Integer)\ndef totalDuration(journey: Journey): Int = {\n  if (journey != null && journey.duration != null) journey.duration\n  else 0\n}"}
{"id":"e4b69129-d715-4137-ac22-bffddd4d2f4b","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getPlatform(arrivalInfo: java.util.Map[String, String], stationName: String): String = {\n  val platform = arrivalInfo.get(stationName)\n  if (platform != null) platform\n  else \"No platform info\"\n}"}
{"id":"7ee56891-3135-429c-a913-564bc3e3fc2d","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def setLastCheckpoint(tripLog: java.util.Map[String, String], checkpoint: String): Unit = {\n  if (tripLog != null && checkpoint != null) {\n    tripLog.put(\"lastCheckpoint\", checkpoint)\n  }\n}"}
{"id":"13d46ec2-3ecb-4d6e-89d9-b213e0cef4a2","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getBusByLicense(licenseMap: java.util.Map[String, Bus], license: String): Bus = {\n  if (license != null) {\n    val bus = licenseMap.get(license)\n    if (bus != null) bus else null\n  } else null\n}"}
{"id":"b3d5cb7a-cdde-42bc-a10f-774d5b5a769a","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def printRouteName(route: TransitRoute): Unit = {\n  if (route != null && route.name != null) {\n    println(route.name)\n  }\n}"}
{"id":"79655a32-5efc-48bd-a53d-7f183dd1d626","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getArrivalTime(schedule: java.util.Map[String, String], stopId: String): String = {\n  val at = schedule.get(stopId)\n  if (at != null) at else \"Unknown\"\n}"}
{"id":"cd4af479-f302-4bcf-bc72-550326ecc68a","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Rider(val id: Int, var favoriteStation: Station)\ndef resetFavorite(rider: Rider): Unit = {\n  if (rider != null) rider.favoriteStation = null\n}"}
{"id":"8cbd1743-8d57-40c9-b08e-ac8e0587fb62","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def displayConnectionDetails(connection: Connection): Unit = {\n  if (connection != null) {\n    println(s\"From: ${connection.fromStation}\")\n    println(s\"To: ${connection.toStation}\")\n  }\n}"}
{"id":"1fc4d3eb-826b-4522-a714-9343529623d4","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class Station(name: String, latitude: Double, longitude: Double)\ndef safeStationName(station: Station): Option[String] = Option(station).map(_.name)"}
{"id":"19083b44-ea2a-47e8-9648-452a1c7804ce","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def nextDeparture(optTimes: Option[List[String]], after: String): Option[String] =\n  optTimes.flatMap(_.find(_ > after))"}
{"id":"f72ef067-0784-452a-82cb-680798bd2cc6","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class RouteSegment(routeName: String, from: Station, to: Station)\ndef firstSegmentName(route: List[RouteSegment]): Option[String] =\n  route.headOption.map(_.routeName)"}
{"id":"7b675e27-b9c4-49c4-85a9-2e7916b45d03","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def safePlatform(platform: String): Option[String] = Option(platform)\ndef platformMessage(platformOpt: Option[String]): String =\n  platformOpt.getOrElse(\"Platform info unavailable\")"}
{"id":"997a53e9-b9a6-4dce-887f-08efedc4a66c","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def lastCheckpoint(tripLog: Option[Map[String, String]]): Option[String] =\n  tripLog.flatMap(_.get(\"lastCheckpoint\"))"}
{"id":"5e784561-5672-4ba1-82af-1f18f817230c","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def findBusByLicense(licenseMap: Map[String, Bus], license: Option[String]): Option[Bus] =\n  license.flatMap(licenseMap.get)"}
{"id":"bc266d21-8602-463d-adf6-655ed71587a8","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class TransitRoute(name: String, lineColor: String)\ndef lineColorOf(route: Option[TransitRoute]): String =\n  route.map(_.lineColor).getOrElse(\"Unknown\")"}
{"id":"a63ffd88-4406-4c80-b062-6363aacb922a","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def arrivalTime(schedule: Map[String, String], stopId: Option[String]): Option[String] =\n  stopId.flatMap(schedule.get)"}
{"id":"40de1b18-63d8-4374-808a-dee2cfd118f8","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class Rider(id: Int, favoriteStation: Option[Station])\ndef favoriteExists(rider: Rider): Boolean = rider.favoriteStation.isDefined"}
{"id":"f742f4f5-d636-4a5f-8e5d-4dce598012e5","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class Connection(fromStation: String, toStation: String)\ndef displayConnection(conn: Option[Connection]) = \n  conn.fold(println(\"No connection\")) { c =>\n    println(s\"From: ${c.fromStation}, To: ${c.toStation}\")\n  }"}
{"id":"55715097-c242-4d6a-85b7-c3f746305a23","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object InventoryLookup {\n  def findProductName(barcode: String): Option[String] = {\n    val rawName = simulateLegacyProductNameLookup(barcode)\n    Option(rawName)\n  }\n  def simulateLegacyProductNameLookup(barcode: String): String = {\n    if (barcode == \"12345\") \"Milk\" else null\n  }\n}\n"}
{"id":"4f32e03d-2278-4138-aed4-32bfb14e0330","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class DiscountCalculator {\n  def calculateDiscountAmount(amount: Double, loyaltyCardId: String): Double = {\n    val discountRate = getDiscountRateFromLegacy(loyaltyCardId)\n    if (discountRate != null) amount * discountRate else 0.0\n  }\n\n  def getDiscountRateFromLegacy(cardId: String): java.lang.Double = {\n    if (cardId == \"L123\") 0.05 else null\n  }\n}\n"}
{"id":"feab547c-be6d-437d-b124-6d90d6c7f6bc","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class POSUser(id: String, name: String)\nobject UserRetriever {\n  def retrieveUser(userId: String): Option[POSUser] = {\n    Option(legacyUserFetch(userId)).map { userData =>\n      val parts = userData.split(\"-\")\n      POSUser(parts(0), parts(1))\n    }\n  }\n  def legacyUserFetch(userId: String): String = if (userId == \"U999\") null else s\"$userId-Jamie\"\n}\n"}
{"id":"280e1a5c-76d9-4985-b878-da02ab889f40","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object Storefront {\n  def getStoreManagerName(storeId: String): String = {\n    val managerName = legacyGetManagerName(storeId)\n    if (managerName == null) \"Unknown Manager\" else managerName\n  }\n  def legacyGetManagerName(id: String): String = {\n    if (id == \"S1\") \"Pat Lee\" else null\n  }\n}\n"}
{"id":"6901f8a4-02db-4df2-a40d-d19a908896d2","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object OrderCommentExtractor {\n  def orderCommentToUpper(orderId: String): Option[String] = {\n    Option(retrieveOrderCommentLegacy(orderId)).map(_.toUpperCase)\n  }\n  def retrieveOrderCommentLegacy(orderId: String): String = {\n    if (orderId == \"O357\") \"Handle with care\" else null\n  }\n}\n"}
{"id":"aa844e27-1a64-4df7-a6d2-f50a52d0d848","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object TerminalScanner {\n  def getLastScannedBarcode(terminalId: String): String = {\n    val barcode = legacyScanFetch(terminalId)\n    if (barcode == null) \"NO_BARCODE\" else barcode\n  }\n  def legacyScanFetch(terminalId: String): String = {\n    if (terminalId == \"T200\") \"9876543210\" else null\n  }\n}\n"}
{"id":"2b6583d7-8b37-4dbf-a831-2e28dff755dc","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object OptionBasedCashDrawer {\n  def openDrawerIfConnected(drawerId: String): Boolean = {\n    Option(legacyDrawerStatus(drawerId)).exists(_ == \"CONNECTED\")\n  }\n  def legacyDrawerStatus(drawerId: String): String = if (drawerId == \"CD1\") \"CONNECTED\" else null\n}\n"}
{"id":"0c39e374-0ffa-4e4a-bb5d-b57cbdaa4572","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object ReceiptPrinter {\n  def getPrinterQueue(printerId: String): String = {\n    val queue = fetchPrinterQueueLegacy(printerId)\n    if (queue != null) queue else \"DEFAULT_QUEUE\"\n  }\n  def fetchPrinterQueueLegacy(id: String): String = if (id == \"P301\") \"Q1\" else null\n}\n"}
{"id":"06fc924f-728f-4585-93b6-b73c140f63a4","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object OptionTransactionNote {\n  def fetchNoteOrDefault(transactionId: String): String = {\n    Option(legacyTransactionNote(transactionId)).getOrElse(\"No note\")\n  }\n  def legacyTransactionNote(transactionId: String): String = {\n    if (transactionId == \"T555\") \"Manual override\" else null\n  }\n}\n"}
{"id":"c1d21999-3c08-41fc-b769-90886a305eb1","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object PaymentProcessor {\n  def processPayment(amount: Double, method: String): String = {\n    val response = javaStylePaymentMethod(amount, method)\n    if (response == null) \"FAILED\" else response\n  }\n  def javaStylePaymentMethod(amount: Double, method: String): String = {\n    if (method == \"CARD\") \"APPROVED\" else null\n  }\n}\n"}
{"id":"4b6eea28-f620-413e-a8b9-a4ce2619fe36","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object SaleTimeParser {\n  def parseSaleTime(cashRegisterId: String): Option[java.time.LocalTime] = {\n    Option(legacyGetSaleTime(cashRegisterId)).map(java.time.LocalTime.parse)\n  }\n  def legacyGetSaleTime(registerId: String): String = if (registerId == \"CR12\") \"09:45:00\" else null\n}\n"}
{"id":"7724fa1c-0e40-426a-a1a9-1e52ea53135a","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class ItemDescriptionService {\n  def getItemDescription(id: String): String = {\n    val desc = fetchLegacyDescription(id)\n    if (desc == null) \"Unavailable\" else desc\n  }\n  def fetchLegacyDescription(id: String): String = if (id == \"I77\") \"Coffee Mug\" else null\n}\n"}
{"id":"b93fa943-4df1-46d8-812c-1ccf23173fa8","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class LoyaltyMember(memberId: String, points: Int)\nobject LoyaltyInfo {\n  def fetchMemberPoints(memberId: String): Option[LoyaltyMember] = {\n    Option(legacyMemberPoints(memberId)).map(points => LoyaltyMember(memberId, points))\n  }\n  def legacyMemberPoints(memberId: String): java.lang.Integer = if (memberId == \"M321\") 4000 else null\n}\n"}
{"id":"d0bf2226-85d1-48e4-8078-5e9d444f9ab9","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object GiftCardSystem {\n  def deactivateIfNull(cardId: String): Boolean = {\n    val status = legacyGiftCardStatus(cardId)\n    if (status == null) false else (status == \"ACTIVE\")\n  }\n  def legacyGiftCardStatus(cardId: String): String = {\n    if (cardId == \"GC12\") \"ACTIVE\" else null\n  }\n}\n"}
{"id":"3f1bee34-98e9-4c3e-ab1f-90b7f7b8c651","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object RefundReasonHelper {\n  def getRefundReasonUpper(orderId: String): Option[String] = {\n    Option(fromLegacySystem(orderId)).map(_.toUpperCase)\n  }\n  def fromLegacySystem(orderId: String): String = if (orderId == \"REF10\") \"customer request\" else null\n}\n"}
{"id":"df309ee8-fa47-4c10-a183-0ac8821dbdf9","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object CashierReport {\n  def assignReportNull(cashierId: String): String = {\n    if (cashierId == \"C204\") \"ReportReady\" else null\n  }\n  def isReportReady(cashierId: String): Boolean = {\n    val report = assignReportNull(cashierId)\n    if (report != null) true else false\n  }\n}\n"}
{"id":"16acdf0d-3abf-42bb-94b1-18a14cf258c1","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object OptionBarcodeLookup {\n  def findBarcodePrefix(productName: String): Option[String] = {\n    Option(legacyBarcodeFromName(productName)).filter(_.startsWith(\"A\"))\n  }\n  def legacyBarcodeFromName(name: String): String = if (name == \"Apple\") \"A111\" else null\n}\n"}
{"id":"bbee2073-440d-4bc4-9f04-6e7e246ae6da","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object LedgerUpdater {\n  def updateLedger(entryId: String): Unit = {\n    val legacyValue = fetchLegacyLedgerEntry(entryId)\n    if (legacyValue == null)\n      throw new Exception(\"Entry missing\")\n    println(s\"Ledger updated: $legacyValue\")\n  }\n  def fetchLegacyLedgerEntry(entryId: String): String = if (entryId == \"E111\") \"stockin\" else null\n}\n"}
{"id":"3cb7e205-b957-4282-ba7d-7f0db7d0893d","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object CashDrop {\n  def checkDropAmount(safeId: String): Option[Int] = {\n    Option(oldDropLookup(safeId)).map(Integer.parseInt)\n  }\n  def oldDropLookup(safeId: String): String = if (safeId == \"SAFE7\") \"250\" else null\n}\n"}
{"id":"b82d5535-901b-4b34-a054-a12679b7c535","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object ExpiredCouponRemover {\n  def removeCoupon(couponCode: String): Boolean = {\n    val flag = simulateJavaCouponRemove(couponCode)\n    if (flag == null) false else flag\n  }\n  def simulateJavaCouponRemove(couponCode: String): java.lang.Boolean = if (couponCode == \"C100\") true else null\n}\n"}
{"id":"814038c1-8702-443b-a191-1a442cb419c8","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object OptionTerminalIdChecker {\n  def validateTerminalId(terminalId: String): Boolean = {\n    Option(terminalIdFromLegacy(terminalId)).exists(_.startsWith(\"T\"))\n  }\n  def terminalIdFromLegacy(input: String): String = if (input == \"T123\") \"T123\" else null\n}\n"}
{"id":"183c1422-abec-4395-9e92-35ac58507e72","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"case class Receipt(orderTotal: Double, paymentType: String)\ndef validateReceipt(receipt: Receipt | Null): Boolean =\n  if (receipt == null) false\n  else receipt.orderTotal > 0"}
{"id":"0979d84c-61c0-4d0f-9f4b-c98014173162","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class PaymentGateway {\n  def findTransactionById(transactionId: String): String | Null =\n    if transactionId == \"T100\" then \"APPROVED-T100\" else null\n}\ndef getTransactionStatus(transactionId: String): String = {\n  val gateway = PaymentGateway()\n  val status = gateway.findTransactionById(transactionId)\n  if (status == null) \"UNKNOWN\" else status\n}"}
{"id":"d6d8c1f9-1a7e-49dd-87b0-185577cd59a0","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def lookupCashier(name: String): String | Null =\n  if name == \"Alex\" then \"C123\" else null\nval cashierCode = lookupCashier(\"Morgan\")\nif (cashierCode != null) println(\"Cashier code found: \" + cashierCode)\nelse println(\"No such cashier\")"}
{"id":"d3e8b637-fde9-4600-b887-aef8f52bb91e","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def scanBarcode(barcode: String): String | Null =\n  if barcode.length == 12 then \"ITEM-OK\" else null\nval result = scanBarcode(\"12345\")\nif (result == null) println(\"Barcode not recognized\")\nelse println(\"Scanned: \" + result)"}
{"id":"9cb9340f-e078-42e1-8d72-0c75a2eca233","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class DiscountProvider {\n  def getDiscountCode(level: Int): String | Null =\n    if level > 3 then \"DISC10\" else null\n}\nval discount = DiscountProvider().getDiscountCode(2)\nif (discount != null) println(\"Applying discount: \" + discount)\nelse println(\"No discount applied\")"}
{"id":"6af4ac4c-d45f-4ed2-8c5e-b977d06fd11c","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object StoreTerminal {\n  def connectTerminal(terminalId: String): java.lang.Boolean =\n    if terminalId == \"POS-01\" then java.lang.Boolean.TRUE else null\n}\nval isConnected = StoreTerminal.connectTerminal(\"POS-99\")\nif (isConnected == null) println(\"Connection failed\")\nelse if (isConnected) println(\"Terminal is connected\")\nelse println(\"Terminal not connected\")"}
{"id":"86ea2f3f-e5d3-4eb4-bfe5-4bfcb915ee52","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def getLoyaltyPoints(customerId: String): Integer =\n  if customerId == \"GUEST\" then null else 200\nval loyalty = getLoyaltyPoints(\"GUEST\")\nif (loyalty == null) println(\"No loyalty points available\")\nelse println(\"Loyalty points: \" + loyalty)"}
{"id":"718e8606-fa0f-4dfe-a67f-10f12f1d477a","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class VendorService {\n  def fetchVendorName(vendorCode: String): String | Null =\n    if vendorCode == \"VN-102\" then \"Best Supplies\" else null\n}\ndef printVendor(vendorCode: String) = {\n  val vendor = VendorService().fetchVendorName(vendorCode)\n  if (vendor == null) println(\"Vendor not found\")\n  else println(\"Vendor: \" + vendor)\n}\nprintVendor(\"VN-103\")"}
{"id":"fc5905e5-6e65-4788-9250-8f2c3ca23412","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def retrieveCouponByCode(coupon: String): java.lang.Double =\n  if coupon == \"SAVE5\" then 5.0 else null\nval value = retrieveCouponByCode(\"EXTRA10\")\nif (value == null) println(\"Invalid coupon\")\nelse println(\"Coupon value: $\" + value)"}
{"id":"367da2b0-ebfd-46cd-b871-7ba65318b391","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def findInventory(itemCode: String): Int =\n  if itemCode == \"STOCK-OUT\" then null else 42\nval currentStock = findInventory(\"STOCK-OUT\")\nif (currentStock == null) println(\"Out of stock\")\nelse println(\"Stock: \" + currentStock)"}
{"id":"acd39a29-4448-4099-b4ec-c85f5c7d39fc","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class Receipt(orderTotal: Double, paymentType: String)\ndef safeReceiptTotal(receipt: Receipt | Null): Option[Double] =\n  Option(receipt).map(_.orderTotal)"}
{"id":"7924aca3-5b9e-4f87-808d-acb825c00989","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def safeLookupCashier(name: String): Option[String] =\n  Option(if name == \"Alex\" then \"C123\" else null)"}
{"id":"407f7c2d-5032-42d4-8100-1909ea5870e6","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def barcodeResult(barcode: String): Option[String] =\n  Option(if barcode.length == 12 then \"ITEM-OK\" else null)\nval outcome = barcodeResult(\"123456789012\")\nprintln(outcome.getOrElse(\"Barcode not recognized\"))"}
{"id":"58724156-a143-4011-ae73-de789a4cc84e","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"class DiscountOptionProvider {\n  def getDiscountCode(level: Int): Option[String] =\n    Option(if level > 3 then \"DISC10\" else null)\n}\nval discount = DiscountOptionProvider().getDiscountCode(5)\nprintln(discount.getOrElse(\"No discount\"))"}
{"id":"e86219aa-381e-4974-92cc-d109df70cefe","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object TerminalStatus {\n  def tryConnectTerminal(terminalId: String): Option[Boolean] =\n    Option(if terminalId == \"POS-01\" then true else null)\n  def terminalMessage(id: String): String =\n    tryConnectTerminal(id).fold(\"Connection failed!\")(_ => \"Connected!\")\n}\nprintln(TerminalStatus.terminalMessage(\"POS-02\"))"}
{"id":"44413217-4a0b-4357-ab61-83e3ad7defa5","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def getSafeLoyaltyPoints(customerId: String): Option[Int] =\n  Option(if customerId == \"REGULAR\" then 200 else null)\nval points = getSafeLoyaltyPoints(\"REGULAR\")\nprintln(points.map(_ * 2).getOrElse(0))"}
{"id":"cffb741c-cc3b-48a6-9df6-10688b61d1cf","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def printVendorSafe(vendorCode: String): Unit = {\n  val vendorOption = Option(if vendorCode == \"VN-202\" then \"SuperMart\" else null)\n  vendorOption.fold(println(\"Vendor not found\"))(name => println(\"Vendor: \" + name))\n}\nprintVendorSafe(\"VN-203\")"}
{"id":"0645732b-e77d-47ff-8590-cc72b31424e4","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def findInventorySafe(itemCode: String): Option[Int] =\n  Option(if itemCode == \"IN-STOCK\" then 21 else null)\nval qtyMsg = findInventorySafe(\"IN-STOCK\") match\n  case Some(qty) => s\"Stock: $qty\"\n  case None => \"Out of stock\"\nprintln(qtyMsg)"}
{"id":"a93c318a-8e57-44b9-b41f-02edea244f57","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def retrieveCouponOption(coupon: String): Option[Double] =\n  Option(if coupon == \"SAVE10\" then 10.0 else null)\nprintln(retrieveCouponOption(\"NOPE\").getOrElse(0.0))"}
{"id":"2d16aa06-2391-4b4a-b92b-efc90953c8bb","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class LoanDetails(principal: Double, rate: Double, term: Int)\ndef safeLoadLoanDetails(input: LoanDetails | Null): Option[LoanDetails] = Option(input)"}
{"id":"db80b292-fe61-4b7a-89cd-5f1acc7b9db8","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def getInterestRateFromApi(creditScore: Int): java.lang.Double = if creditScore > 700 then 3.2 else null\nval maybeRate = Option(getInterestRateFromApi(720))\nmaybeRate.map(rate => rate * 2).getOrElse(0.0)"}
{"id":"5e95d899-e6f2-405c-93b2-e25033f28dc2","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def monthlyPayment(maybePrincipal: Option[Double], rate: Double, months: Int): Double =\n  maybePrincipal.map { principal =>\n    val monthlyRate = rate / 12 / 100\n    val denominator = 1 - math.pow(1 + monthlyRate, -months)\n    principal * monthlyRate / denominator\n  }.getOrElse(0.0)"}
{"id":"a1f729ef-68f2-4e50-8800-2835335db90d","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def applicantName(name: String | Null): Option[String] = Option(name)\napplicantName(null).getOrElse(\"Unnamed Applicant\")"}
{"id":"fddb8315-7049-4a4a-80ec-486b400b6aa3","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"val borrowerEmployment: Option[String] = Option(null)\nval employmentStatus = borrowerEmployment.fold(\"Unknown\")(_ + \" employed\")"}
{"id":"29a6f3b1-b7c0-47b4-b402-8dc5450085df","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def getCoApplicant(applicants: List[String]): Option[String] = applicants.lift(1)\nval coApp = getCoApplicant(List(\"Anna\", \"John\")).getOrElse(\"No Co-Applicant\")"}
{"id":"9a2d2a20-439f-478e-bfba-0763dbff9f76","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def validateDownPayment(payment: Double): Option[Double] = if payment > 0 then Some(payment) else None\nvalidateDownPayment(-25000).getOrElse(0.0)"}
{"id":"315755e5-74cf-4ff1-bca8-17d9afba8181","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def findMortgagePlan(plans: List[String], preferred: String): Option[String] = plans.find(_ == preferred)\nfindMortgagePlan(List(\"Fixed\", \"ARM\"), \"Jumbo\").getOrElse(\"Default Plan\")"}
{"id":"90b2d891-3652-45de-bcdb-0f03fc4f02c5","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"val maybeInsuranceQuote: Option[Double] = Option(null)\ndef finalMonthlyPayment(base: Double): Double =\n  maybeInsuranceQuote.fold(base)(insurance => base + insurance)"}
{"id":"2fc2cf92-f2a3-45d5-8f7c-c5eb8b336692","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageApplication(id: String, verified: Boolean)\ndef maybeVerify(app: Option[MortgageApplication]): Option[MortgageApplication] =\n  app.filter(_.verified)\nmaybeVerify(Some(MortgageApplication(\"abc\", false)))"}
{"id":"824dca95-8855-4260-aa55-c50aa593e960","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def legacyGetRefinanceQuote(zip: String): String = null\nval quoteOption = Option(legacyGetRefinanceQuote(\"94105\"))\nquoteOption.getOrElse(\"No Quote Available\")"}
{"id":"d450f3e6-da64-486a-987b-70d36459bffd","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def coldCallList(list: List[String]): Option[List[String]] =\n  Option(list).filter(_.nonEmpty)\ncoldCallList(Nil).getOrElse(List(\"Default Prospect\"))"}
{"id":"6f221e74-5169-47a4-934e-513ece1920b5","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def getLoanOfficer(email: String): String = null\nval officerName = Option(getLoanOfficer(\"agent@bank.com\")).getOrElse(\"Unknown Officer\")"}
{"id":"1a0b80af-3a7c-47c2-a552-ada1f876b4dc","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"val systemNote: Option[String] = None\nsystemNote.getOrElse(\"No System Notes Present\")"}
{"id":"a8668095-3241-4bcd-b899-516d413c77bb","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def applicantAnnualIncome(possibleIncome: java.lang.Double): Option[Double] = Option(possibleIncome).map(_.toDouble)\napplicantAnnualIncome(null).fold(0.0)(identity)"}
{"id":"411e795d-fe1a-4010-aaa5-78fd20a60c05","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def applicantMiddleName(name: String | Null): Option[String] = Option(name)\napplicantMiddleName(\"Maria\").exists(_.startsWith(\"M\"))"}
{"id":"738c85da-d29b-464a-89ed-0cdfef6bd573","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def insuranceProvider(maybeProvider: Option[String]): String = maybeProvider.filter(_.nonEmpty).getOrElse(\"Provider Not Specified\")"}
{"id":"7a82a14d-23dc-4210-8784-5e4faf30ceb3","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def safeLoadBank(bank: String | Null): Option[String] = Option(bank).filter(_.nonEmpty)\nsafeLoadBank(null).getOrElse(\"Unnamed Bank\")"}
{"id":"604202fe-01e2-424a-9d9d-844c203d4a92","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def preferredContact(contact: Option[String]): String = contact.fold(\"No Contact Given\")(identity)"}
{"id":"c1a8c1a7-3d9a-4c8c-a41c-188d398deb54","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def isEligibleForAutoApproval(app: Option[MortgageApplication]): Boolean =\n  app.exists(a => a.verified && a.id.startsWith(\"A\"))"}
{"id":"56bd234e-3886-4a38-9951-c2788ec0b2f4","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageApi {\n  def fetchQuote(applicantId: String): String = null\n}\nval api = new MortgageApi\nval quote = if (api.fetchQuote(\"abc\") != null) api.fetchQuote(\"abc\") else \"No Quote\""}
{"id":"bd8b46e6-8188-4721-9df3-f56c367ab39b","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def getDownPaymentAmount(input: String): java.lang.Double = if (input == \"\") null else input.toDouble\nval dp = getDownPaymentAmount(\"0\")\nif (dp != null) dp else 0.0"}
{"id":"3d40b533-26fa-4eeb-9cf8-d675df453115","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def checkApplicationStatus(status: String): String = if (status != null) status else \"Status Unknown\""}
{"id":"7c7bad7e-0696-4114-a8a8-87e67c611992","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def refiOfferOrNull(score: Int): String = if (score < 650) null else \"Refinance Available\"\nval offer = refiOfferOrNull(600)\nif (offer == null) \"Not qualified\" else offer"}
{"id":"0d5c6436-bb5b-41f3-b8d9-60b80ae87acf","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def coSignerName(names: Array[String]): String = if (names != null && names.length > 1) names(1) else null"}
{"id":"7f1e4426-a898-4e97-8f91-168af06fe7cf","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"var lenderPhone: String = null\nif (lenderPhone == null) lenderPhone = \"000-000-0000\""}
{"id":"15e88ab1-0f97-47e5-9e0d-7c0cb3ec317a","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def contactCustomerService(ticket: String): String = null\nval custRep = if (contactCustomerService(\"TICK123\") != null) contactCustomerService(\"TICK123\") else \"Service Unavailable\""}
{"id":"d88cd103-8006-4836-a07b-9bc97c408460","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def parseRate(rate: String): java.lang.Double =\n  try rate.toDouble catch case _: Exception => null"}
{"id":"587ae344-fcb5-494e-9cbf-47bf05df7121","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def getApplicantIncomeOrNull(json: String): java.lang.Double = null\nval income = getApplicantIncomeOrNull(\"{}\"); if (income != null) income else -1"}
{"id":"e67772cc-285c-4704-9d61-0a831123b700","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def legacyLoanLookup(loanNumber: String): String = if (loanNumber == null) \"No Record\" else \"Record for \" + loanNumber"}
{"id":"fd4b7fc5-b3e9-418f-92bf-7ae4b23373cf","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"val homeValue: java.lang.Double = null\nval formatted = if (homeValue != null) homeValue.toString else \"Value Missing\""}
{"id":"cd1b31d8-6e66-4683-9ee8-f7fb9d3bcadf","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def riskNoticeOrNull(profile: Map[String, String]): String = null\nval notice = if (riskNoticeOrNull(Map.empty) == null) \"No Risks\" else riskNoticeOrNull(Map.empty)"}
{"id":"eaa27506-b16a-47b8-9544-ba3b52aa073d","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def unresolvedLead(id: java.lang.Integer): String = if (id != null) s\"Lead $id resolved\" else \"Lead Unknown\""}
{"id":"a7375acb-249d-4a46-a659-2c05677bc6bf","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class LoanApplicant(name: String, annualIncome: Double)\ndef safeGetApplicantIncome(applicant: LoanApplicant): Option[Double] =\n  Option(applicant).map(_.annualIncome)"}
{"id":"52bf7652-9ad2-461d-8944-95e162cd3531","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def calculateMonthlyPayment(principal: Double, interestRate: Double, termYears: Int): Double =\n  val monthlyRate = interestRate / 12.0 / 100.0\n  val numberOfPayments = termYears * 12\n  principal * monthlyRate / (1 - Math.pow(1 + monthlyRate, -numberOfPayments))\n\ndef getMonthlyPayment(optPrincipal: Option[Double], optRate: Option[Double], optYears: Option[Int]): Option[Double] =\n  for\n    principal <- optPrincipal\n    rate <- optRate\n    years <- optYears\n  yield calculateMonthlyPayment(principal, rate, years)"}
{"id":"04e6ed5c-e409-4327-8f68-6f6d96a0ef3d","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def findPropertyValue(userInput: String): Option[Double] =\n  Option(userInput).filter(_.nonEmpty).map(_.toDoubleOption).flatten"}
{"id":"bace1497-8db9-488f-a428-11f517d42a70","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def applicantNameLength(applicant: Option[LoanApplicant]): Int =\n  applicant.map(_.name.length).getOrElse(0)"}
{"id":"d07031c8-bc75-4ad9-b6c7-0593f201835b","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageApplication(val applicantName: String, val loanAmount: Double)\n\ndef getApplicationFromLegacySystem(id: String): MortgageApplication =\n  if (id == \"\") null\n  else new MortgageApplication(\"Emily Clark\", 245000)\n\ndef printApplicantFromLegacy(id: String): Unit =\n  val app = getApplicationFromLegacySystem(id)\n  if (app != null)\n    println(app.applicantName)\n  else\n    println(\"No application found\")"}
{"id":"4be33ae7-3a59-43f8-b643-234c3e813c38","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def legacyFetchInterestRate(loanType: String): java.lang.Double =\n  if (loanType == \"fixed\") 3.9\n  else null\n\ndef showInterestRate(loanType: String): Unit =\n  val rate = legacyFetchInterestRate(loanType)\n  if (rate != null)\n    println(s\"Current rate: $rate%\")\n  else\n    println(\"Interest rate not available\")"}
{"id":"bb7bb958-3962-45a2-8e93-b2fa62b83351","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def getRepaymentSummary(mortgageId: String): String =\n  val summary = if (mortgageId == null) null else s\"Repayment details for $mortgageId\"\n  if (summary != null)\n    summary\n  else\n    \"Invalid mortgage ID\""}
{"id":"f430eb21-dbe6-4341-977c-eee8e785edee","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class SensorReading(sensorId: String, value: Double)\ndef getSensorReading(sensorId: String): Option[SensorReading] = {\n  val rawValue: java.lang.Double = retrieveSensorValue(sensorId) // might be null\n  Option(rawValue).map(v => SensorReading(sensorId, v))\n}\n\ndef retrieveSensorValue(sensorTag: String): java.lang.Double = \n  if sensorTag == \"temperature\" then 45.5 else null\n"}
{"id":"9d5f1bc2-0874-49be-afcc-03ab53667997","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def lastVibrationLevel(machineId: String): java.lang.Double = {\n  if machineId == \"mixer01\" then 0.08 else null\n}\n\nval vibration: java.lang.Double = lastVibrationLevel(\"compressor09\")\nif (vibration != null) {\n  println(\"Vibration: \" + vibration)\n} else {\n  println(\"No Data\")\n}\n"}
{"id":"0680e4a8-3797-4586-98a3-b02666ce7547","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def parseTelemetryField(field: String): Option[Int] = \n  Option(field).flatMap(f => f.toIntOption)\n\nval rpmOpt: Option[Int] = parseTelemetryField(\"1200\")\nval rpm: Int = rpmOpt.getOrElse(0)\n"}
{"id":"a843acb9-9f4d-4ec4-850e-a0c8fbd65fec","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getMachineStatus(machineTag: String): String = {\n  if (machineTag == \"drill2\") \"Running\"\n  else null\n}\n\nval status = getMachineStatus(\"press3\")\nif (status == null) {\n  println(\"Status unknown\")\n} else {\n  println(\"Status: \" + status)\n}\n"}
{"id":"edf44564-d0ce-47b5-a226-4a1a7a11a62a","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class OilLevelReading(level: Double)\n\ndef safeOilLevelReading(rawLevel: java.lang.Double): Option[OilLevelReading] =\n  Option(rawLevel).filter(_ > 0).map(OilLevelReading(_))\n\nval oilLevelOpt = safeOilLevelReading(null)\n"}
{"id":"00e2c9c9-f0f0-4093-918d-245c8e4f104a","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class TelemetryDatabase {\n  def fetchPressureValue(assetTag: String): java.lang.Double =\n    if (assetTag.startsWith(\"pump\")) 3.8 else null\n}\n\nval db = new TelemetryDatabase\nval fetchedValue = db.fetchPressureValue(\"tank12\")\nif (fetchedValue != null) println(fetchedValue)\n"}
{"id":"dca155f7-f6ae-4864-8462-610e4dbfd2f6","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def optionalTemperature(reading: java.lang.Double): Option[Double] = Option(reading)\n\nval machineTemperature = getRawTempFromDevice(\"plasmaCutter\")\nval temperature: Option[Double] = optionalTemperature(machineTemperature)\n\ndef getRawTempFromDevice(asset: String): java.lang.Double = null\n"}
{"id":"638f8576-d852-4f7b-8d0c-544a46f82d33","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def fetchMotorCurrent(phase: String): java.lang.Double = {\n  if phase == \"A\" then 14.3 else null\n}\n\nval current = fetchMotorCurrent(\"C\")\nif(current == null) println(\"Current unavailable\")\nelse println(s\"Current is $current\")\n"}
{"id":"21dda297-0917-4c69-8dce-278176ddaec7","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def extractHumidity(data: Map[String, Any]): Option[Double] =\n  data.get(\"humidity\").flatMap {\n    case v: java.lang.Double => Option(v)\n    case _ => None\n  }\n\nval result = extractHumidity(Map(\"humidity\" -> null))\n"}
{"id":"95e69688-e59d-4caa-bb7d-4c82102add02","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def retrieveAlarmMessage(machineSn: String): String =\n  if machineSn.endsWith(\"7\") then \"Overload detected\" else null\n\nval alarm = retrieveAlarmMessage(\"pressor17\")\nif (alarm != null) println(alarm)\n"}
{"id":"d5df6112-77bc-4016-8c2f-34184a9ced62","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def getValveState(signal: java.lang.Boolean): Option[Boolean] = Option(signal).map(_.booleanValue)\n\nval valveSignal: java.lang.Boolean = java.lang.Boolean.FALSE\nval state: Option[Boolean] = getValveState(valveSignal)\n"}
{"id":"cc56e3ae-f11b-44f8-a681-6131de36e6e3","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"val torqueReading: java.lang.Double = null\nif (torqueReading == null) {\n  println(\"No torque data recorded\")\n} else {\n  println(\"Torque: \" + torqueReading)\n}\n"}
{"id":"38f42f3f-b319-4123-80af-9194dde39dc3","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def parseActuatorResponse(response: String): Option[Long] = \n  Option(response).flatMap(s => s.toLongOption)\n\nval rpsCount = parseActuatorResponse(null)\n"}
{"id":"e5f01712-72ae-4961-9b61-46bb12125ddd","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def rawPowerFactor(meterId: String): java.lang.Float =\n  if meterId == \"PQ-14\" then 0.96f else null\n\nval pf = rawPowerFactor(\"BYP-8\")\nif (pf != null) println(\"Power Factor: \" + pf)\n"}
{"id":"a2e60c54-892e-473f-b976-938a69d810ad","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class MachineSerial(serial: String)\ndef wrapSerial(serial: String): Option[MachineSerial] =\n  Option(serial).filter(_.nonEmpty).map(MachineSerial(_))\n\nval wrapped = wrapSerial(null)\n"}
{"id":"ba7e24e6-d98c-4a10-8fb8-62225bdaf130","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class TelemetryArchive {\n  def findFaultTimestamp(eventCode: Int): java.lang.Long =\n    if eventCode == 900 then 1689867302000L else null\n}\n\nval archive = new TelemetryArchive\nval timestamp = archive.findFaultTimestamp(42)\nif (timestamp == null) println(\"No timestamp\")\n"}
{"id":"f79fd927-4420-4873-8243-9de4666438f8","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def lastEncoderReading(encoderValue: java.lang.Integer): Option[Int] = {\n  Option(encoderValue).map(_.toInt).filter(_ > 0)\n}\n\nval lastReading = lastEncoderReading(null)\n"}
{"id":"c0fea0be-9ead-454c-8519-8c8cb19d8dca","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def fetchPumpRuntime(pumpTag: String): java.lang.Long =\n  if pumpTag == \"AuxPump\" then 90000L else null\n\nval pumpTime = fetchPumpRuntime(\"MainPump\")\nif (pumpTime == null) {\n  println(\"Runtime not available\")\n}\n"}
{"id":"90213801-9369-45a7-bfd9-65d8fac37545","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def mapControllerStatus(rawStatus: java.lang.Integer): Option[String] =\n  Option(rawStatus).map {\n    case 1 => \"Operational\"\n    case 2 => \"Error\"\n    case _ => \"Unknown\"\n  }\n\nval status = mapControllerStatus(null)\n"}
{"id":"5b05cfdc-1c86-4082-966d-cd1a7ea1f14d","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"case class TemperatureAlert(message: String)\ndef temperatureAlertOrNull(temp: java.lang.Double): TemperatureAlert = {\n  if (temp == null) null\n  else if (temp > 95.0) TemperatureAlert(\"High Temperature\")\n  else null\n}\n\nval alert = temperatureAlertOrNull(98.1)\nif(alert != null) println(alert.message)\n"}
{"id":"64790a91-d8c5-4385-9078-720478ce7102","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class SensorReading(machineId: String, temperature: Double)\ndef safeTemperature(reading: SensorReading | Null): Double =\n  Option(reading).map(_.temperature).getOrElse(0.0)"}
{"id":"fbba7165-611a-46a3-a878-c9391bcccb06","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"object MachineStateChecker:\n  def isOperational(state: String | Null): Boolean =\n    if (state == null) false\n    else state == \"RUNNING\""}
{"id":"9529f08a-b0cb-47a3-9b48-afdaa77da35e","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def lastVibrationLevel(readings: List[VibrationRecord]): Option[Double] =\n  readings.lastOption.map(_.level)"}
{"id":"790900b8-a10e-41e0-9586-b6c070c332d6","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class ErrorLogFetcher:\n  def fetchLatestError(machineId: String): String = null"}
{"id":"bb4011c7-92c9-470d-92b2-18adee0c9004","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def wrapProductionRate(rate: java.lang.Double | Null): Option[Double] =\n  Option(rate).map(_.doubleValue)"}
{"id":"28198011-a534-4375-82b7-bde823b28091","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"object CoolingFanController:\n  def currentSpeedSetting(): Integer = null"}
{"id":"c43d37ec-9a19-44fd-8ee6-70fcf9c9a0b1","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def extractPressureValue(pressure: java.lang.Double | Null): Double =\n  Option(pressure).fold(1.0)(_.doubleValue)"}
{"id":"3cd9f087-abeb-4143-9215-e23ff62216c6","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getOilQualityLevel(sensorOutput: String | Null): String =\n  if (sensorOutput == null) \"UNKNOWN\"\n  else sensorOutput"}
{"id":"7508ff3f-3b2a-43b5-b925-69e247665289","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class MotorStatus(current: Option[Double])\ndef averageCurrent(statuses: List[MotorStatus]): Double =\n  statuses.flatMap(_.current).sum / statuses.flatMap(_.current).size"}
{"id":"0f78e8a1-69d8-47e9-a8a8-df72751a074f","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def retrieveLastAlert(log: AlertLog | Null): Alert | Null =\n  if (log != null) log.lastAlert\n  else null"}
{"id":"28130969-00d4-4d91-a96a-a68c8ea5f8cf","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def checkSensorCalibration(cal: CalibrationData | Null): Option[CalibrationData] =\n  Option(cal)"}
{"id":"5c517e08-d880-476b-9a4c-45add5a108f7","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"object MaintenanceScheduler:\n  def getNextService(machineId: String): java.time.LocalDate = null"}
{"id":"177d0ec1-d840-4bbd-8297-0ec8f753805c","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class PowerReading(voltage: Double, current: Double)\ndef safeCurrent(reading: PowerReading | Null): Option[Double] =\n  Option(reading).map(_.current)"}
{"id":"b6e56781-743f-4417-b0cf-33b4021f68f1","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getOperatorNote(notes: java.util.Map[String, String], id: String): String =\n  val note = notes.get(id)\n  if (note == null) \"No note found\"\n  else note"}
{"id":"91e305a1-0868-4bce-9cad-df7c5ce235b2","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def calculateTemperatureDelta(t1: java.lang.Double | Null, t2: java.lang.Double | Null): Option[Double] =\n  for\n    first <- Option(t1)\n    second <- Option(t2)\n  yield second - first"}
{"id":"03f3d112-c73c-4785-873b-1d514824a2a0","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class NetworkDiagnostic:\n  def pingDevice(ipAddress: String): Boolean = false\n  def lastResponseTime(): java.lang.Long = null"}
{"id":"1cedd2ad-9671-4f45-97ac-bda04128bf2a","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def summarizeVibrationReadout(readout: String | Null): Option[String] =\n  Option(readout).filter(_.nonEmpty)"}
{"id":"3f35b1b3-56ae-4f4b-935f-38f636919f99","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"case class Alarm(code: String, description: String)\ndef getCriticalAlarm(alarm: Alarm | Null): String =\n  if (alarm != null && alarm.code == \"CRIT\") alarm.description\n  else \"No critical alarm\""}
{"id":"20ded504-67cf-4683-872a-2fe7f2606de3","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def batteryVoltage(optVoltage: java.lang.Double | Null): Double =\n  Option(optVoltage).getOrElse(12.0)"}
{"id":"432b994c-13e7-49c0-a6b1-3ec2007e9018","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def fetchStatusCode(status: MachineStatus | Null): String =\n  if (status == null) null\n  else status.code"}
{"id":"71f10063-42d9-451e-9eca-399c8c6798de","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"object LobbySessionManager:\n  def findPlayerById(playerId: String): Option[VRPlayer] =\n    Option(Database.lookupPlayer(playerId))\n      .filter(_.isActive)\n"}
{"id":"32798265-757e-4268-9a9b-ff62d22f6180","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class VRDeviceService:\n  def getHeadsetForPlayer(playerUsername: String): VRHeadset =\n    val device = SystemDeviceAPI.findHeadset(playerUsername)\n    if (device == null) null else device\n"}
{"id":"aac81bfd-5571-4532-b040-40f3c8b809f0","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class GameRoom(roomCode: String, owner: VRPlayer, players: List[VRPlayer])\n\ndef addPlayerToRoom(room: GameRoom, newPlayer: VRPlayer): Option[GameRoom] =\n  Option(room).map(r => r.copy(players = newPlayer :: r.players))\n"}
{"id":"cb3da2b4-4755-4cca-870e-5d1a241aee15","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"object VirtualLobbyChat:\n  def sendMessageIfConnected(session: VRChatSession, message: String): Unit =\n    if (session != null && session.isConnected()) session.send(message)\n"}
{"id":"9bfef035-6a4e-4e0d-8ecd-21cc9d527ed9","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getActiveLobbySession(sessionLookup: String): Option[VRLobbySession] =\n  Option(GameLobbyRegistry.session(sessionLookup)).filter(_.isActive)\n"}
{"id":"58bf2698-9139-45c2-b1fd-d8437fc5bf8c","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class PlayerAvatarLoader:\n  def loadAvatar(playerHandle: String): VRAvatar =\n    val avatar = AvatarDB.getAvatar(playerHandle)\n    if (avatar == null) null else avatar\n"}
{"id":"491896b0-7985-43ab-957b-0379c98276d5","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def currentHostName(roomCode: String): Option[String] =\n  Option(LobbyDirectory.findRoom(roomCode)).map(_.owner.username)\n"}
{"id":"0edcce52-ee8d-4732-8cfa-cafe25f995d2","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"object VRLobbyInvitation:\n  def sendInviteToPlayer(targetUsername: String): Boolean =\n    val invite = InviteService.create(targetUsername)\n    if (invite == null) false else invite.deliver()\n"}
{"id":"78fe6fe5-8528-4855-9609-832f51938579","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def connectedFriendsCount(player: VRPlayer): Int =\n  Option(player.friendsList).map(_.count(_.isOnline)).getOrElse(0)\n"}
{"id":"cb609409-72a8-4285-b978-5eee02221dfd","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def getPlayerChatHistory(lobbyId: String, username: String): VRChatHistory =\n  val chat = ChatStore.fetchChat(lobbyId, username)\n  if (chat == null) VRChatHistory.empty else chat\n"}
{"id":"f9839e9c-2a2f-48fc-973f-49520be3610b","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRGameLobby(lobbyName: String, maxPlayers: Int, host: VRPlayer)\n\ndef maybeLobbyName(lobby: VRGameLobby): Option[String] =\n  Option(lobby).map(_.lobbyName)\n"}
{"id":"31e041ad-836b-48bc-b9ba-a5fe923bb8ca","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def findLobbyModerator(lobbyId: String): VRPlayer =\n  val mod = LobbyStaffLookup.getModerator(lobbyId)\n  if (mod != null) mod else null\n"}
{"id":"7aa786eb-d6e2-4eef-a7d1-27d9522db716","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def safeGetCurrentRoomPlayerList(player: VRPlayer): Option[List[VRPlayer]] =\n  Option(player.currentRoom).map(_.players)\n"}
{"id":"b12cc271-2b0a-4342-b774-f34ae746058a","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def firstOnlineFriendOrNull(player: VRPlayer): VRPlayer =\n  val friends = player.friendsList\n  if (friends != null)\n    friends.find(_.isOnline).orNull\n  else\n    null\n"}
{"id":"d77e00c1-cd45-4662-90c7-76009ecf0a65","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getOptionalActiveLobby(ownerUsername: String): Option[VRGameLobby] =\n  Option(LobbyDirectory.activeLobbyForOwner(ownerUsername))\n"}
{"id":"36918c85-6d8f-4f06-8e3d-f398ca7616d2","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def getLobbyVoiceChannelOrNull(lobbyId: String): VRVoiceChannel =\n  val channel = VoiceSystem.lookupChannel(lobbyId)\n  if (channel != null) channel else null\n"}
{"id":"8e705f46-691b-4bc9-a68f-09f118485c94","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getPlayerRoomCode(player: VRPlayer): Option[String] =\n  Option(player.currentRoom).flatMap(room => Option(room.roomCode))\n"}
{"id":"7dd09ce5-177e-43b2-8644-335be517a997","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def avatarNameOrUnknown(playerHandle: String): String =\n  val avatar = AvatarDB.getAvatar(playerHandle)\n  if (avatar == null || avatar.name == null) \"Unknown\" else avatar.name\n"}
{"id":"6c899bdf-0733-4416-9472-7244ba27b5e3","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def optionalFriendDisplayName(possibleFriend: VRPlayer): Option[String] =\n  Option(possibleFriend).flatMap(p => Option(p.displayName))\n"}
{"id":"86df3ca8-c1fe-4965-a457-293e348f1df2","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def fetchChatChannelOrNull(channelId: String): VRChatChannel =\n  val chan = NetworkSystem.getChatChannel(channelId)\n  if (chan == null) null else chan\n"}
{"id":"8fa507e8-fe43-424a-99aa-cc63d0b97c96","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRPlayerProfile(nickname: String, gear: String)\n\ndef findProfileInLobby(lobby: List[VRPlayerProfile], nickname: String): Option[VRPlayerProfile] =\n  lobby.find(_.nickname == nickname)"}
{"id":"7ab18715-2f0c-45d4-9fc2-bc404cf7ea4c","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbySeat(slot: Int, occupant: String)\n\ndef getSeatOccupant(seat: LobbySeat): Option[String] =\n  Option(seat.occupant).filter(_.nonEmpty)"}
{"id":"e23c6bfc-a4f2-41e1-a019-404c18a95491","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def invitePlayerByTag(tag: String, fetchByTag: String => VRPlayerProfile | Null): Option[VRPlayerProfile] =\n  Option(fetchByTag(tag))"}
{"id":"15534489-3dbf-4ff3-b478-55d888ea5d64","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getActiveSession(lobbyId: String, lookup: String => VRSession | Null): Option[VRSession] =\n  Option(lookup(lobbyId))"}
{"id":"9c8367ab-291a-455e-ad64-322b7fa53f09","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getSpectatorName(spectatorId: Int, idToName: Int => String | Null): Option[String] =\n  Option(idToName(spectatorId)).filter(_.nonEmpty)"}
{"id":"fa85124c-9b1e-4df6-b9c8-8b283df2a352","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class GameRoom(roomId: String, host: Option[String])\n\ndef isRoomAvailable(room: GameRoom): Boolean =\n  room.host.isEmpty"}
{"id":"e1e60346-3b3f-48b9-9462-3108b16c0b77","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def safeEquipmentListing(player: VRPlayerProfile | Null): Option[String] =\n  Option(player).map(_.gear)"}
{"id":"86f0b645-ccca-46ba-a515-6dfe03ea1fda","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getLobbyOwnerName(lobby: VRGamingLobby): Option[String] =\n  Option(lobby.ownerName).filter(_.nonEmpty)"}
{"id":"cb018fa6-6edf-45e1-9078-5a50a47bba5c","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def findReadyPlayer(lobbyPlayers: List[VRPlayerProfile]): Option[VRPlayerProfile] =\n  lobbyPlayers.find(_.gear == \"Ready\")"}
{"id":"e94ebf5a-a6a3-4a36-8a83-bcf9a00a5866","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def fetchSessionTokenOrNone(authResult: VRAuthResult): Option[String] =\n  Option(authResult.sessionToken).filter(_.nonEmpty)"}
{"id":"61a2d040-47c2-4309-b302-bb01970d41aa","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class VRFriendRequest(val sender: String, val receiver: String)\n\ndef sendFriendRequest(request: VRFriendRequest): Boolean =\n  if (request == null) false else true"}
{"id":"18e84202-fa44-49b1-97ce-36ef880a5945","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def lookupPlayerById(playerId: Int): VRPlayerProfile =\n  if (playerId == 0) null else VRPlayerProfile(\"Spectator\", \"BasicVRGear\")"}
{"id":"83542d89-e165-4ded-a21a-1a977ad49a65","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def legacyFindLobbyRoom(roomName: String): GameRoom =\n  if (roomName == \"\") null else GameRoom(roomName, null)"}
{"id":"daa74cd1-e5fb-4d44-87f1-7cbc47efa6f6","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def addSpectatorToLobby(lobby: VRGamingLobby, spectator: String): VRGamingLobby =\n  if (lobby == null || spectator == null) null else lobby.addSpectator(spectator)"}
{"id":"206752ad-19f5-4441-8e4e-50adb3b1b229","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def unsafeGetLobbyHost(lobby: VRGamingLobby): String =\n  if (lobby == null || lobby.ownerName == null) null else lobby.ownerName"}
{"id":"2230f9d9-4f3e-4170-b4ea-14237366ddac","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class VRSession(val sessionId: String, val host: String)\n\ndef getSessionHostIfExists(session: VRSession): String =\n  if (session == null) null else session.host"}
{"id":"b471dd90-5f0d-4f54-a7cd-3dd05020aec7","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def setRoomHost(room: GameRoom, host: String): GameRoom =\n  if (room == null || host == null) null else GameRoom(room.roomId, host)"}
{"id":"5503c07f-9a95-452b-982e-422e3130658e","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def joinLobbyIfPresent(lobby: VRGamingLobby, user: String): Boolean =\n  if (lobby == null || user == null) false else true"}
{"id":"88e64711-51c3-49ec-af2b-1a1a61213ef2","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def fetchPlayerNickname(playerProfile: VRPlayerProfile): String =\n  if (playerProfile == null) null else playerProfile.nickname"}
{"id":"3b362645-873e-49c0-9a8c-596581868812","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def lobbyHasSpectator(lobby: VRGamingLobby, spectator: String): Boolean =\n  if (lobby == null || spectator == null) false else lobby.spectators.contains(spectator)"}
{"id":"7609ef5f-247c-4638-bc03-a1df8b843e9b","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class EmployeeAttendance(employeeId: Int, clockInTime: Option[Long], clockOutTime: Option[Long])\n\ndef attendanceDuration(record: EmployeeAttendance): Option[Long] =\n  for\n    in <- record.clockInTime\n    out <- record.clockOutTime\n  yield out - in"}
{"id":"8c71e8b5-d503-480d-984c-e595e45a11a7","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def findEmployeeByBadge(badgeId: String): Employee = null  // returns null if not found\n\ndef printClockIn(employee: Employee): Unit =\n  if (employee != null) println(employee.toString)\n  else println(\"Employee not found\")"}
{"id":"5b8c2ead-ffe8-4a9d-9bd4-b214c8470a7e","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"object EmployeeTrackingService:\n  def fetchLastClockOut(employeeId: Int): Long = null\n\ndef getLastClockOut(employeeId: Int): Option[Long] =\n  Option(EmployeeTrackingService.fetchLastClockOut(employeeId))"}
{"id":"5e936a2d-c00b-4ce0-8e5c-fb41cb95cc4a","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class ShiftReport(val employee: Employee, val hoursWorked: java.lang.Double)\n\ndef compareHours(oldReport: ShiftReport, newReport: ShiftReport): Boolean =\n  if (oldReport.hoursWorked != null && newReport.hoursWorked != null)\n    newReport.hoursWorked > oldReport.hoursWorked\n  else false"}
{"id":"31f6c67b-1559-4d24-aa25-11fafec03c59","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def employeeStatus(lastClockOut: Option[Long]): String =\n  lastClockOut.fold(\"Never clocked out\")(_ => \"Clock-out recorded\")"}
{"id":"c1972f6c-c3d7-4bf8-85d3-a1a14f49f9af","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def fetchManagerComment(employeeId: Int): String = null\n\ndef managerCommentLength(employeeId: Int): Int =\n  val comment = fetchManagerComment(employeeId)\n  if (comment != null) comment.length else 0"}
{"id":"a4d76f34-225a-43df-88e8-9f8419ec707e","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class TimeEntry(employeeId: Int, timestamp: Long, entryType: String)\n\ndef getFirstClockIn(entries: List[TimeEntry]): Option[Long] =\n  entries.find(_.entryType == \"IN\").map(_.timestamp)"}
{"id":"c0114a8a-16c9-4cf6-b8c9-51fb32d23615","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getProjectCode(employeeId: Int): String = null // Java method imitation\n\ndef uppercaseProject(employeeId: Int): String =\n  val code = getProjectCode(employeeId)\n  if (code != null) code.toUpperCase else \"No Project\""}
{"id":"a57eb0d3-e40b-41e9-9976-1cd3e37f5bae","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def lookupShift(employeeName: String): Option[Shift] =\n  Option(findShiftByName(employeeName))\n\ndef shiftStartHour(name: String): String =\n  lookupShift(name).map(s => s.startHour.toString).getOrElse(\"Unknown\")"}
{"id":"5b557712-c5f2-4dcb-b138-7fe2b180c262","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getSupervisor(employeeId: Int): Supervisor = null\n\ndef printSupervisorName(employeeId: Int): Unit =\n  val supervisor = getSupervisor(employeeId)\n  if (supervisor != null) println(supervisor.name)\n  else println(\"Supervisor not assigned\")"}
{"id":"d8253582-b54c-478d-96ae-3353452efc73","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def locateDepartment(id: Int): Department = null\n\ndef getDepartmentName(id: Int): Option[String] =\n  Option(locateDepartment(id)).map(_.name)"}
{"id":"ef69f2d3-17c7-4f47-9e8d-49027c1f3eae","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class Team(val employees: Array[Employee])\n\ndef countNullEntries(team: Team): Int =\n  var count = 0\n  for (e <- team.employees)\n    if (e == null) count += 1\n  count"}
{"id":"ab5af79a-c5d2-423a-9023-d8a2a068e153","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def timeEntryDurationMaybe(clockIn: Long | Null, clockOut: Long | Null): Option[Long] =\n  Option(clockIn).flatMap(in => Option(clockOut).map(out => out - in))"}
{"id":"e5b4ebd6-2196-448e-a08a-9d78e75eef54","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getOvertimeHours(employeeId: Int): java.lang.Double = null\n\ndef isEligibleForBonus(employeeId: Int): Boolean =\n  val hours = getOvertimeHours(employeeId)\n  if (hours != null && hours > 10) true else false"}
{"id":"da03a032-7962-4507-9b57-98b9e62335b0","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def employeeNoteOption(note: String | Null): Option[String] =\n  Option(note).filter(_.nonEmpty)"}
{"id":"80800754-b166-4a4f-9cd4-8209efaa1ad3","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def searchForEmployeeBadge(employeeBadgeId: String): Employee = null\n\ndef checkEmployeeBadgeFound(badgeId: String): Boolean =\n  val emp = searchForEmployeeBadge(badgeId)\n  emp != null"}
{"id":"2b326f13-1dc5-47a2-ad69-5f96074efd08","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def optionalClockIn(employee: Employee): Option[Long] =\n  Option(employee.clockInTimestamp)\n\ndef clockInMillis(employee: Employee): Long =\n  optionalClockIn(employee).getOrElse(0L)"}
{"id":"535d3e36-57c8-4aba-9351-6f4a450aa512","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getDetailsOrNull(name: String): EmployeeDetails = null\n\ndef displayEmployeeEmail(name: String): String =\n  val details = getDetailsOrNull(name)\n  if (details != null) details.email else \"Email not available\""}
{"id":"d52dcaf5-71c6-4c43-8bf2-09598de64415","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class ClockRecord(employeeId: Int, clockIn: Option[Long], clockOut: Option[Long])\n\ndef isClockOutAfterIn(record: ClockRecord): Boolean =\n  record.clockIn.exists(in => record.clockOut.exists(out => out > in))"}
{"id":"299d1fb9-2362-4e46-9c70-bbac0f5a4efb","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getPayrollEntryById(entryId: Int): PayrollEntry = null\n\ndef payrollAmountOrZero(entryId: Int): Double =\n  val entry = getPayrollEntryById(entryId)\n  if (entry != null) entry.amount else 0.0"}
{"id":"5cd717fd-200c-4fbf-83c5-429acb81eeb8","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"case class TimeEntry(employeeId: Long, checkIn: Long, checkOut: Long)\ndef getOvertimeHours(entry: TimeEntry | Null): Int =\n  if entry == null then 0 else ((entry.checkOut - entry.checkIn) / 3600 - 8).toInt"}
{"id":"8e9cf43d-1b04-455e-8ba4-d49549bd7578","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class EmployeeLookup {\n  def findEmployeeByBadge(badgeCode: String): String | Null =\n    if badgeCode == \"A123\" then \"Rebecca Lloyd\" else null\n}\ndef verifyEmployeeBadge(badge: String): Boolean =\n  val emp = (new EmployeeLookup).findEmployeeByBadge(badge)\n  if emp == null then false else true"}
{"id":"a6366cc1-48e2-4048-b7ef-d180516e6fe8","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class PunchClockDatabase {\n  def lastPunchForUser(userId: Long): java.util.Date | Null =\n    if userId == 1L then new java.util.Date() else null\n}\ndef secondsSinceLastPunch(userId: Long): Long =\n  val last = (new PunchClockDatabase).lastPunchForUser(userId)\n  if last == null then -1L else (System.currentTimeMillis() - last.getTime) / 1000"}
{"id":"28b601a0-5bf4-4fbe-830a-90a08f0b3c94","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getManagerNotes(employeeId: Int): String | Null =\n  if employeeId == 101 then \"Left early on Wednesday\" else null\ndef notesSummary(employeeId: Int): String =\n  val notes = getManagerNotes(employeeId)\n  if notes != null then s\"Notes: $notes\" else \"No manager notes available\""}
{"id":"08b41729-dc03-420e-a632-a2791c6d448d","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class TimesheetApi {\n  def fetchTimesheetForDate(eid: Long, date: String): String | Null =\n    if date == \"2024-06-20\" then s\"$eid:08:30-17:00\" else null\n}\ndef printTimesheet(eid: Long, date: String): Unit =\n  val data = (new TimesheetApi).fetchTimesheetForDate(eid, date)\n  if data == null then println(\"No timesheet record found.\")\n  else println(data)"}
{"id":"70efcfc1-1c06-4c84-b69b-a8f2da3c57ba","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def calculateBreakDuration(breakStart: java.sql.Timestamp | Null, breakEnd: java.sql.Timestamp | Null): Int =\n  if breakStart != null && breakEnd != null then\n    ((breakEnd.getTime - breakStart.getTime) / 60000).toInt\n  else\n    0"}
{"id":"cbd84a3c-fcad-40d0-9eff-d14d4aa5084a","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"object HolidayService {\n  def nextHoliday(employeeId: Int): String | Null =\n    if employeeId == 42 then \"2024-07-04\" else null\n}\ndef daysUntilVacation(employeeId: Int): Int =\n  val holiday = HolidayService.nextHoliday(employeeId)\n  if holiday == null then 999 else 10"}
{"id":"a285cb3d-7585-49f0-8ce2-3507bc951a44","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def loadShiftType(shiftCode: String): String | Null =\n  if shiftCode == \"N\" then null else \"Day Shift\"\ndef showShiftInfo(employeeShift: String): String =\n  val shiftType = loadShiftType(employeeShift)\n  if shiftType == null then \"Unknown shift\" else shiftType"}
{"id":"3c3eddc4-c2b4-46fe-9d70-55ead70fbd07","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class LegacyTimeService {\n  def getScheduledStart(employee: String): java.time.LocalTime | Null =\n    if employee == \"James Lee\" then java.time.LocalTime.of(9, 0) else null\n}\ndef printScheduledStart(employee: String): Unit =\n  val start = (new LegacyTimeService).getScheduledStart(employee)\n  if start == null then println(\"No scheduled start\") else println(start)"}
{"id":"a9f0301f-6af4-4a51-ab0d-a714a2229683","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def previousAttendanceRecord(employeeId: Int): String | Null =\n  if employeeId == 76 then \"2024-06-18 09:04\" else null\ndef attendanceSummary(employeeId: Int): String =\n  val record = previousAttendanceRecord(employeeId)\n  if record != null then s\"Last attendance: $record\" else \"No previous attendance found\""}
{"id":"596e87ca-48a4-4125-9a12-b59b38d018fa","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class AttendanceDay(employeeId: Long, checkIn: Option[Long], checkOut: Option[Long])\ndef totalWorkedTime(day: AttendanceDay): Long =\n  (day.checkIn, day.checkOut) match\n    case (Some(start), Some(end)) => end - start\n    case _ => 0L"}
{"id":"97f5f301-29e5-44af-8b80-893f1c2b4215","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def fetchShiftNotes(employeeId: Long): Option[String] =\n  Option(new java.util.Random().nextInt(2)).filter(_ == 1).map(_ => \"Covered for late coworker.\")\ndef printShiftNotes(employeeId: Long): String =\n  fetchShiftNotes(employeeId).getOrElse(\"No shift notes available.\")"}
{"id":"2c5cd74d-b647-4a82-b134-15d3df18f2f8","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def safeManagerName(rawName: String | Null): Option[String] =\n  Option(rawName)\ndef managerDisplay(employeeId: Int, getManager: Int => String | Null): String =\n  safeManagerName(getManager(employeeId)).fold(\"Manager unknown\")(identity)"}
{"id":"118ad3a9-a1bc-4e5d-bd35-e2720aa4a24b","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class Punch(employeeId: Long, punchType: String)\ndef validatePunch(punch: Option[Punch]): Boolean =\n  punch.exists(_.punchType == \"OUT\")"}
{"id":"853b95a6-61ca-4a90-986d-36549057f15f","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def lookupEmployeeStartTime(employeeId: Int): Option[java.time.LocalTime] =\n  Option(if employeeId % 2 == 0 then java.time.LocalTime.of(8,0) else null)\ndef startTimeString(employeeId: Int): String =\n  lookupEmployeeStartTime(employeeId).fold(\"Unscheduled\")(t => s\"Starts at $t\")"}
{"id":"b3a6c9d4-2e38-462d-b8b5-5c92a5aafab1","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def getTimeCorrectionReason(correctionCode: String | Null): Option[String] =\n  Option(correctionCode).filter(_.nonEmpty)\ndef showCorrectionReason(code: String | Null): String =\n  getTimeCorrectionReason(code).getOrElse(\"No correction required.\")"}
{"id":"a0e7ba4f-3611-4bb5-993e-03181024ae2a","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def getAttendanceMessage(entry: Option[Long]): String =\n  entry.map(ts => s\"Employee checked in at $ts\").getOrElse(\"Check-in missing\")"}
{"id":"36e1d924-0c2a-41f0-a596-0e9202cf227b","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def findOvertimeMinutes(employeeId: Long): Option[Int] =\n  Option(employeeId).filter(_ > 0).map(_ => 45)\ndef overtimeDisplay(eid: Long): String =\n  findOvertimeMinutes(eid).map(m => s\"$m min OT\").getOrElse(\"No overtime\")"}
{"id":"ddc5f7fe-0af3-4e60-843b-2423097725a8","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def wrapJavaAttendance(attendance: java.lang.Boolean | Null): Option[Boolean] =\n  Option(attendance).map(_.booleanValue)\ndef attendanceOk(javaAttendance: java.lang.Boolean | Null): String =\n  wrapJavaAttendance(javaAttendance).fold(\"Not marked present\")(_ => \"Present\")"}
{"id":"5ec168ff-831b-4a48-921c-44ef81bbf703","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class EmployeeNote(employeeId: Int, content: String)\ndef nonEmptyNotes(notes: List[EmployeeNote | Null]): List[EmployeeNote] =\n  notes.flatMap(note => Option(note))"}
{"id":"2dccc92f-0e6a-4161-9d50-b42ee8fe74d0","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def mostRecentBreak(start: Option[Long], end: Option[Long]): Option[(Long, Long)] =\n  for\n    s <- start\n    e <- end\n  yield (s, e)"}
{"id":"390b853c-9d71-4c7f-a923-e7702ee04de3","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"case class WeatherAlert(alertType: String, message: String)\ndef findAlertMessage(alert: WeatherAlert | Null): String =\n  if (alert != null) alert.message else \"No alert available\"\n"}
{"id":"8318bd55-fca8-438e-832a-4697b23aa7de","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class NotificationSender {\n  def sendEmail(recipient: String, subject: String, content: String): Boolean = true\n  def sendWeatherAlert(alertMessage: String | Null, recipient: String): Boolean = {\n    if (alertMessage != null) {\n      sendEmail(recipient, \"Weather Alert\", alertMessage)\n    } else {\n      false\n    }\n  }\n}\n"}
{"id":"9c0e3759-c4c6-47d4-b855-9828ad233a93","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"object AlertRetriever {\n  def getCurrentWeatherAlert(): WeatherAlert | Null = null\n  def getAlertType(): String = {\n    val alert = getCurrentWeatherAlert()\n    if (alert == null) \"No Alert\" else alert.alertType\n  }\n}\n"}
{"id":"80f0bc7a-a95d-4553-8787-0e11a78fc1e8","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getSubscriberEmail(subscriberId: Int): String | Null = {\n  if (subscriberId == 101) \"user101@weatherapp.com\" else null\n}\ndef sendCriticalAlert(subscriberId: Int, alert: String): Boolean = {\n  val email = getSubscriberEmail(subscriberId)\n  if (email != null) true\n  else false\n}\n"}
{"id":"e6207c02-8dae-4cfe-b542-ee36b4f46128","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertDatabase {\n  def fetchLastAlert(city: String): WeatherAlert | Null = null\n}\ndef printLastAlertForCity(city: String, db: AlertDatabase): Unit = {\n  val alert = db.fetchLastAlert(city)\n  if (alert != null) {\n    println(s\"Alert in $city: ${alert.message}\")\n  } else {\n    println(\"No recent alerts.\")\n  }\n}\n"}
{"id":"905b1638-c1f8-4cd4-8b4d-950fb44d307f","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getPhoneNumber(user: String): String | Null =\n  if (user == \"admin\") \"+1234567890\" else null\ndef sendSmsAlert(phone: String | Null, alertText: String): Boolean =\n  if (phone != null) true else false\n"}
{"id":"334968ce-118d-4790-b09e-3121d958c38a","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class JavaLikeAlertProvider {\n  def getUrgentAlert(region: String): WeatherAlert | Null = null\n}\ndef getUrgentAlertMessage(region: String, provider: JavaLikeAlertProvider): String = {\n  val alert = provider.getUrgentAlert(region)\n  if (alert == null) \"No urgent alerts\" else alert.message\n}\n"}
{"id":"b7fb3a9b-add2-4e95-81b6-ad6119d04993","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getAlertTimestamp(alert: WeatherAlert | Null): Long =\n  if (alert != null) System.currentTimeMillis() else -1\n"}
{"id":"cdba3b3e-24f8-42c2-9504-41d51570dff7","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"object AlertChecker {\n  def isSevere(alert: WeatherAlert | Null): Boolean = {\n    if (alert != null && alert.alertType == \"Severe\") true else false\n  }\n}\n"}
{"id":"262dc85c-65e0-4e3f-b9cd-33b2fee062b3","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertLogger {\n  def log(alert: WeatherAlert | Null): Unit = {\n    if (alert != null) {\n      println(s\"Logging alert: ${alert.alertType}\")\n    } else {\n      println(\"No alert to log.\")\n    }\n  }\n}\n"}
{"id":"921a6e55-22b7-47b9-a5e7-697507e48b60","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def safeGetAlertMessage(alert: WeatherAlert | Null): Option[String] =\n  Option(alert).map(_.message)\n"}
{"id":"f152e9ef-4d34-424b-bd89-d33b633da5fd","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WeatherAlert(alertType: String, message: String)\ndef showAlert(alertOpt: Option[WeatherAlert]): String =\n  alertOpt.map(_.message).getOrElse(\"No weather alert.\")\n"}
{"id":"826da4d9-ac56-4059-bae8-133bb1cfcd94","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def sendOptionalAlert(alert: Option[WeatherAlert], recipient: String): Boolean =\n  alert.exists(a => recipient.nonEmpty)\n"}
{"id":"b535149b-0010-455c-b50b-84c25be62e35","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def wrapNullableAlert(alert: WeatherAlert | Null): Option[WeatherAlert] =\n  Option(alert)\n"}
{"id":"1b507afd-4e5e-4361-b718-d318a1e25c44","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def notifyIfAlert(alert: Option[WeatherAlert]): Unit =\n  alert.foreach(a => println(s\"Notification: ${a.message}\"))\n"}
{"id":"fd61cdd5-fc42-4d09-b18c-edc86dc59b3d","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"object RegionAlertFinder {\n  def find(region: String): Option[WeatherAlert] =\n    if (region == \"Midwest\") Some(WeatherAlert(\"Flood\", \"Rising waters detected.\")) else None\n  def printIfExist(region: String): Unit = {\n    find(region).foreach(alert => println(alert.message))\n  }\n}\n"}
{"id":"03056049-741e-4898-aac8-62f96360ce9c","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def getSubscriberContact(id: Int): Option[String] =\n  if (id == 123) Some(\"user123@weatheralert.com\") else None\ndef contactSubscriber(id: Int): String =\n  getSubscriberContact(id).getOrElse(\"Contact not found.\")\n"}
{"id":"8de4ab06-b142-4a82-b897-01229a85be16","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def sendPushAlert(alertOpt: Option[WeatherAlert], deviceId: String): String =\n  alertOpt.fold(\"No alert to push.\")(_.message)\n"}
{"id":"ee55ce75-01a8-47df-894a-9b26a91c5b12","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def currentAlertType(alert: Option[WeatherAlert]): String =\n  alert.map(_.alertType).getOrElse(\"None\")\n"}
{"id":"5f813740-b99c-4495-923c-a140bb14d386","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def filterSevere(alertOpt: Option[WeatherAlert]): Option[WeatherAlert] =\n  alertOpt.filter(_.alertType == \"Severe\")\n"}
{"id":"1dd2fdb9-c854-4b54-9d91-f2ea5858460d","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"case class AlertMessage(location: String, severity: String)\n\ndef toAlertMessageNull(raw: String): AlertMessage = {\n  if (raw == null) {\n    null\n  } else {\n    val parts = raw.split(\",\")\n    if (parts.length == 2) new AlertMessage(parts(0), parts(1)) else null\n  }\n}"}
{"id":"23948b8a-3822-4dca-b870-14eae90d23a6","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherAlertChannel(var channelName: String)\n\nval notificationService: WeatherAlertChannel = null\n\nif (notificationService != null) {\n  notificationService.channelName = \"Push\"\n}"}
{"id":"b6ad8f87-8785-421f-86cb-70fe3bf9eb52","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getAlertFromAPI(locationId: Int): String = {\n  if (locationId < 0) null else s\"Severe weather in area $locationId\"\n}\n\nval alertMsg = getAlertFromAPI(-1)\nif (alertMsg != null) {\n  println(alertMsg)\n}"}
{"id":"77998de9-2f87-4b63-b8ba-30285afcdff1","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def checkWeatherAlertSubscriber(subscriber: String): Boolean = {\n  if (subscriber == null) false else subscriber.nonEmpty\n}\n\nval result = checkWeatherAlertSubscriber(null)"}
{"id":"817c4953-1946-41df-8a04-330951d70b70","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getNotificationTime(alert: String): String =\n  if (alert == null) null else \"07:00 AM\"\n\nval nextTime = getNotificationTime(null)"}
{"id":"d15c4583-bb9b-49f6-b1f3-ee62f1f59d8a","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"object WeatherAlertResolver {\n  def getLatestNotification(): String = null\n}\n\nval notification = WeatherAlertResolver.getLatestNotification()\nif (notification != null) println(notification)"}
{"id":"3494e9c5-fd49-42f2-a603-676c5a839762","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherUser(var phone: String)\n\ndef getUserPhone(user: WeatherUser): String = {\n  if (user == null) null\n  else user.phone\n}\n\nval user = null\nval phone = getUserPhone(user)"}
{"id":"90fb2825-99f4-44e6-9daa-3fd316f2ea9f","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertSubscription(val endpoint: String)\n\ndef getSubscription(): AlertSubscription = null\n\nval subscription = getSubscription()\nif (subscription != null) {\n  println(subscription.endpoint)\n}"}
{"id":"f33a7d0e-4008-46fa-908e-7c07c5ea0044","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def nullIfSevereLevel(level: String): String =\n  if (level == \"severe\") null else level\n\nval status = nullIfSevereLevel(\"severe\")"}
{"id":"97414d47-1053-4816-83bb-ab249bc218d0","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getEmailForAlert(alertId: Int): String = {\n  if (alertId == 42) null else s\"contact$alertId@weather.com\"\n}\n\nval contact = getEmailForAlert(42)"}
{"id":"98acd91d-9479-4f88-8094-8ab32ff92fea","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class Alert(location: String, condition: String)\n\ndef parseAlert(raw: String): Option[Alert] = {\n  Option(raw).flatMap { s =>\n    val parts = s.split(\",\")\n    if parts.length == 2 then Some(Alert(parts(0), parts(1))) else None\n  }\n}\n\nval alertOpt = parseAlert(\"Seattle,Rain\")"}
{"id":"00488fe9-1b1d-4060-891b-15caf0edd92a","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def safeGetUserPreference(preference: String): Option[String] =\n  Option(preference).filter(_.nonEmpty)\n\nval pref = safeGetUserPreference(null)\nval fallback = pref.getOrElse(\"Default\")"}
{"id":"6db6e7f4-7972-4513-b96e-9ce7d8919570","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def wrapPossiblyNullAlert(alert: String): Option[String] =\n  Option(alert)\n\nval maybeAlert = wrapPossiblyNullAlert(null)\nmaybeAlert.fold(println(\"No alert received\"))(println)"}
{"id":"17b9daab-3628-4503-a1d9-46a274a73798","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class NotificationChannel(name: String)\n\ndef findNotificationChannel(name: String): Option[NotificationChannel] =\n  Option(name).map(NotificationChannel(_))\n\nval channelOpt = findNotificationChannel(\"SMS\")"}
{"id":"2104cea6-0ce0-4260-98c7-3d6ef93c817f","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def sendAlertIfSubscribed(user: Option[String], alert: String): String =\n  user.map(u => s\"Sending alert $alert to $u\").getOrElse(\"No subscriber found\")\n\nval result = sendAlertIfSubscribed(None, \"Flood warning\")"}
{"id":"a2c61f77-4b4b-45c4-b7f9-c5cfcec0bea2","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def getAlertLevel(alert: Option[String]): String =\n  alert.map(_.toUpperCase).getOrElse(\"UNKNOWN\")\n\nval alertLevel = getAlertLevel(Some(\"low\"))"}
{"id":"28ab5127-7e84-48e2-8ce3-be3a327b775d","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WeatherAlert(severity: String, area: String)\n\ndef filterSevere(alertOpt: Option[WeatherAlert]): Option[WeatherAlert] =\n  alertOpt.filter(_.severity == \"severe\")\n\nval maybeAlert = filterSevere(Some(WeatherAlert(\"moderate\", \"West\")))"}
{"id":"5231b526-4aa8-4053-988d-5eb26458874c","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def flatMapAlert(alertOpt: Option[String]): Option[Int] =\n  alertOpt.flatMap(msg => if (msg.nonEmpty) Some(msg.length) else None)\n\nval lenOpt = flatMapAlert(Some(\"Storm warning\"))"}
{"id":"d3c9119b-f00f-4349-9ef5-09b31546903b","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def alertRecipientExists(recipientOpt: Option[String]): Boolean =\n  recipientOpt.exists(_.contains(\"@\"))\n\nval valid = alertRecipientExists(Some(\"admin@weather.com\"))"}
{"id":"30b3e126-4a24-480b-a45f-a0235312fda5","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def isAlertMessageMissing(msg: Option[String]): Boolean =\n  msg.forall(_.isEmpty)\n\nval isEmpty = isAlertMessageMissing(None)"}
{"id":"f4965195-d3af-401d-9167-f18c279d3921","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class PaymentTransaction(id: String, amount: Double, country: String)\n\ndef getFraudAlertMessage(transaction: PaymentTransaction): Option[String] =\n  Option(transaction.country).filter(_ == \"HU\").map(_ => s\"High risk country: ${transaction.country}\")"}
{"id":"111bab44-6130-4919-8ae3-03aa3cccf211","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def detectSuspiciousDevice(deviceId: String): Option[String] =\n  Option(deviceId).filter(_.startsWith(\"fraud-\")).map(_ => \"Suspicious device detected\")"}
{"id":"5c2fe7ac-3faf-425b-bda9-31dacf993a02","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def wrapNullableTransaction(nullableTxn: PaymentTransaction): Option[PaymentTransaction] =\n  Option(nullableTxn)\n\ndef isTransactionPresent(txnOpt: Option[PaymentTransaction]): Boolean = txnOpt.isDefined"}
{"id":"4b62ad3e-4e49-408b-bbed-60d9562701b8","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def validateAccountHolder(email: String): Option[String] =\n  Option(email).filter(_.contains(\"@\")).map(_ => s\"Email validated: $email\")"}
{"id":"9e28d74e-e23c-4b61-a9f9-3cfba0e6c373","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def retrieveRiskScore(cardNumber: String): Option[Int] =\n  Option(cardNumber).filter(_ == \"1234567890123456\").map(_ => 95)\n\ndef isHighRisk(scoreOpt: Option[Int]): Boolean = scoreOpt.exists(_ > 90)"}
{"id":"bd77f0bd-615e-48c3-b1c2-2f6bc6761d0c","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def fetchRuleForMerchant(merchantId: String): Option[String] =\n  Option(merchantId).map(id => if id == \"MERCHANT123\" then Some(\"Blacklisted\") else None).flatten"}
{"id":"ae9a2172-c7a5-4088-8600-e3b2d23d7982","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class UserProfile(name: String, ip: String)\n\ndef getIpCountry(profile: UserProfile): Option[String] =\n  Option(profile.ip).filter(_.startsWith(\"192.168\")).map(_ => \"Internal\")"}
{"id":"f4174591-4749-4adc-bf06-65906178af6b","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def parseTransactionNote(note: String): Option[String] =\n  Option(note).filter(_.nonEmpty).map(_.trim)\n\ndef flagEmptyNote(noteOpt: Option[String]): Boolean = noteOpt.isEmpty"}
{"id":"64cf463f-4022-422a-82da-be76bac58c9f","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def getEmailDomain(email: String): Option[String] =\n  Option(email).filter(_.contains(\"@\")).map(_.split(\"@\")(1)).filter(_.endsWith(\".ru\"))"}
{"id":"6e8e6e6c-c7a0-49c9-8d03-35f8f80e6874","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class BatchPayment(transactions: List[PaymentTransaction])\n\ndef getFirstLargeTransaction(batch: BatchPayment): Option[PaymentTransaction] =\n  batch.transactions.find(_.amount > 10000)"}
{"id":"365ed0cb-ec0b-4701-9584-8a3467433121","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def findIssuerCountry(cardNumber: String): String = {\n  if (cardNumber == null) return null\n  if (cardNumber.startsWith(\"4\")) \"USA\"\n  else null\n}"}
{"id":"9cefabf3-c950-4bb9-9165-ebf946945873","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class TransactionHistory(var lastTransaction: PaymentTransaction)\ndef getLastTransactionAmount(history: TransactionHistory): Double = {\n  if (history == null || history.lastTransaction == null) return 0.0\n  history.lastTransaction.amount\n}"}
{"id":"2548c9c4-d744-4d97-81a3-5e1178d5e366","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getSuspiciousMerchant(merchantName: String): String = {\n  if (merchantName != null && merchantName.contains(\"FraudMart\")) \"Blacklisted\"\n  else null\n}"}
{"id":"155a1870-30ff-433a-928c-3d93dfedaf0b","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def oldExtractCardHolder(details: java.util.Map[String, String]): String = {\n  val holder = details.get(\"card_holder\")\n  if (holder == null) null else holder.toUpperCase()\n}"}
{"id":"a51dfc8b-9a5c-419d-9514-4bb4a095aa11","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def basicRuleCheck(ruleResult: java.lang.Boolean): Boolean = {\n  if (ruleResult == null) false\n  else ruleResult\n}"}
{"id":"c2b74a7d-38d9-438a-9aed-72a1a50ae90f","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def legacyFraudFlag(transactionId: String): String = {\n  if (transactionId == null) null\n  else if (transactionId.startsWith(\"FRAUD\")) \"Flagged\"\n  else null\n}"}
{"id":"df7de1ce-1045-4828-881b-5eb81d23fb7d","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getNullRiskScore(cardId: String): Integer = {\n  if (cardId == null) null\n  else if (cardId.length == 16) 88\n  else null\n}"}
{"id":"26c8b083-cdc4-4a32-b78e-cabc558cee95","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def riskyPaymentCountry(country: String): String = {\n  if(country == null) null\n  else if (country.equals(\"PT\")) \"HighRisk\"\n  else null\n}"}
{"id":"db4480b2-3dc3-4e96-a9e5-e82a214264b0","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def extractPaymentNoteField(noteField: java.util.Map[String, String]): String = {\n  if (noteField == null) null\n  else noteField.get(\"note\")\n}"}
{"id":"ce3237de-64ac-45e5-85f2-5675c9b8ed10","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def verifyCardBin(bin: String): String = {\n  if(bin != null && bin.startsWith(\"9999\")) \"SuspiciousBin\"\n  else null\n}"}
{"id":"74c4ab62-86fe-4a1d-baf9-382add8dac25","timestamp":1746098573675,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class TransactionRecord(cardNumber: String, amount: Double, merchant: String)\ndef findSuspiciousMerchant(transaction: TransactionRecord): Option[String] =\n  Option(transaction.merchant).filter(_.toLowerCase.contains(\"scam\"))"}
{"id":"05fa9634-0e3c-4a7d-a085-0312d8bf2b82","timestamp":1746098573675,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getCardHolderName(accountId: String): String =\n  if (accountId == null) null\n  else accountId.reverse  // fake fetch logic"}
{"id":"768b84fd-70c6-42a4-a952-6ad52cd50a32","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def parseRiskScore(rawScore: java.lang.Integer): Option[Int] =\n  Option(rawScore).filter(_ > 50).map(_.toInt)"}
{"id":"4a423002-a571-4f44-89a2-4b35948a7404","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def fetchTransactionDetails(transactionId: String): TransactionRecord =\n  if (transactionId == null)\n    null\n  else\n    TransactionRecord(transactionId, 24.99, \"trusted-merchant.com\")"}
{"id":"73681169-d9c8-4729-9c7e-f23f1eb6b5c2","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def validateDeviceFingerprint(fingerprint: String): Boolean =\n  Option(fingerprint)\n    .exists(_.matches(\"[A-F0-9]{32}\"))"}
{"id":"8f728275-4c07-471d-9497-ffbd9415fd47","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def retrievePaymentLocation(paymentId: String): String =\n  if (paymentId == null || paymentId.isEmpty)\n    null\n  else\n    \"London\""}
{"id":"8b47bca8-6bcb-4c52-a630-c2ba6af6a48a","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class UserProfile(userId: String, deviceIp: Option[String])\ndef getDeviceIp(user: UserProfile): String =\n  user.deviceIp.getOrElse(\"unknown-device-ip\")"}
{"id":"d883d100-c341-4f52-9c21-56fe509a9cd0","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getFlaggedCountryCode(userId: String): String =\n  if (userId == null)\n    null\n  else if (userId.startsWith(\"X\"))\n    \"IR\"\n  else\n    null"}
{"id":"cba96beb-32cc-48cb-8a52-5bcb08e5c75b","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def suspiciousLoginDetected(ip: String, device: String): Option[String] =\n  Option(ip).flatMap(i => Option(device).map(d => s\"Suspicious login from $i on $d\"))"}
{"id":"aa1841e7-57b9-44e4-9e43-17b3ccf52155","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def fetchPreviousFraudAlert(transactionReference: String): String =\n  if (transactionReference == null)\n    null\n  else\n    \"alert-98765\"\n"}
{"id":"8fa7f25c-5ff9-466c-b8c7-1e2a7d65dc8f","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def paymentBlacklisted(bin: String): Option[String] =\n  Option(bin).filter(_.startsWith(\"6011\")).map(_ => \"Blacklisted BIN detected\")"}
{"id":"0356d61f-d097-42ea-b56d-41c4d3ea641c","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getManualReviewComment(alertId: String): String =\n  if (alertId != null && alertId.nonEmpty)\n    \"Manual review required\"\n  else\n    null"}
{"id":"201b158b-337b-485d-955f-fa003b8aa0db","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def riskTagForTransaction(transaction: Option[TransactionRecord]): String =\n  transaction.map(tr => if (tr.amount > 500) \"high-risk\" else \"normal-risk\").getOrElse(\"unknown-risk\")"}
{"id":"5ac55492-2706-4a2d-b6e7-733269b8f824","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getPaymentSourceType(paymentRecord: String): String =\n  if (paymentRecord == null)\n    null\n  else if (paymentRecord.contains(\"online\"))\n    \"internet\"\n  else\n    null"}
{"id":"7a0268fd-df9c-4380-9abe-ac4bfb83e71d","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def backgroundCheckScore(clientProfile: String): Option[Double] =\n  Option(clientProfile).map(_.length.toDouble * 1.5)"}
{"id":"6bbe5212-c5bb-481e-8296-4c2a76b75cca","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getGeoLocationInfo(ipAddress: String): String =\n  if (ipAddress == null || ipAddress.trim == \"\")\n    null\n  else\n    \"US-California\""}
{"id":"a17dccba-5eb1-43e4-99a1-d82bc40666eb","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def recentChargebackNote(transactionId: String): Option[String] =\n  Option(transactionId).filter(_.length >= 8).map(_ => \"Chargeback potential detected.\")"}
{"id":"3a6eed9e-c53c-43cd-95b4-00a9f494468e","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def legacyScoreFromJava(customerId: String): java.lang.Double =\n  if (customerId == null)\n    null\n  else if (customerId.endsWith(\"0\"))\n    91.4\n  else\n    null"}
{"id":"93fbf28d-ffc0-4994-a2db-b2227ca3ed49","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def deviceRisk(deviceId: String): Option[String] =\n  Option(deviceId).fold(\"Unsafe device\")(id => if (id.length < 6) \"Potential risk\" else \"Safe\") match  {\n    case \"Potential risk\" => Some(\"Potential device fraud\")\n    case \"Safe\" => None\n    case _ => Some(\"Unknown device state\")\n  }"}
{"id":"5b6d851b-2718-4059-9979-bdcb0db14c32","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def fetchFraudInvestigationReport(caseNumber: String): String =\n  if (caseNumber == null)\n    null\n  else if (caseNumber == \"123-ABCF\")\n    \"Open investigation\"\n  else\n    null"}
{"id":"008e28ab-da1c-4da8-b388-249021132b92","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object LoadDicomHeader {\n  def readDicomField(header: DicomHeader, tag: String): String = {\n    val value = header.getField(tag)\n    if (value != null) value else \"Unknown\"\n  }\n}"}
{"id":"0bbeec19-a00a-4b5b-969e-81ad833c623d","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class StudyDatabase {\n  def findSeriesById(seriesId: String): Series = {\n    val seq = queryDatabase(seriesId)\n    if (seq != null) seq else null\n  }\n  def queryDatabase(id: String): Series = {\n    // returns Series or null (Java interop)\n    null\n  }\n}"}
{"id":"2a48f300-ff2c-4420-acf3-9e1201a659b5","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object ParsePatientName {\n  def extractLastName(patientName: String): String = {\n    if (patientName != null && patientName.contains(\",\")) {\n      patientName.split(\",\")(0)\n    } else {\n      null\n    }\n  }\n}"}
{"id":"c4d60c9c-11f0-4119-bbe1-ffb288296da9","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class ImagingViewer {\n  def showImage(image: MedicalImage): Unit = {\n    if (image != null) {\n      displayImage(image)\n    } else {\n      println(\"Error: No image to display.\")\n    }\n  }\n  def displayImage(image: MedicalImage): Unit = println(\"Displaying image\")\n}"}
{"id":"02b55311-2001-430a-9c78-6a5bd814de68","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object PixelSpacingParser {\n  def getPixelSpacing(metadata: Map[String, String]): Double = {\n    val valStr = metadata.getOrElse(\"PixelSpacing\", null)\n    if (valStr != null) valStr.toDouble else 1.0\n  }\n}"}
{"id":"bc1cba6c-be2d-4fd9-862a-f4294d58b845","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class StudyLoader {\n  def loadStudyFromServer(server: PACSServer, studyId: String): ImagingStudy = {\n    val study = server.fetchStudy(studyId)\n    if (study == null) {\n      null\n    } else study\n  }\n}"}
{"id":"b7cd009c-47d6-4a4c-8528-8ddd48736917","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object SliceRetriever {\n  def retrieveSlice(volume: ImagingVolume, index: Int): ImageSlice = {\n    val slice = volume.getSlice(index)\n    if (slice != null) slice else null\n  }\n}"}
{"id":"f4b8674a-6742-426b-9b16-eb57af483a45","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class SegmentationManager {\n  def addRegion(segmentation: SegmentationMask, region: ROI): SegmentationMask = {\n    if(segmentation == null){\n      null\n    } else {\n      segmentation.addRegion(region)\n      segmentation\n    }\n  }\n}"}
{"id":"4f3829b0-eb90-425f-adfe-9bbaea0342fc","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object AnnotationChecker {\n  def hasMeasurement(annotation: Annotation): Boolean = {\n    if (annotation != null && annotation.measurement != null) true\n    else false\n  }\n}"}
{"id":"83ae2e95-19f7-4c02-b7f1-2371238b366d","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object SeriesExporter {\n  def exportSeries(series: ImageSeries, path: String): Boolean = {\n    if (series != null) {\n      // Dummy export\n      true\n    } else false\n  }\n}"}
{"id":"278d7334-9f29-4673-8538-c027bed96f21","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"object PatientIdExtractor {\n  def fromHeader(header: DicomHeader): Option[String] =\n    Option(header.getField(\"PatientID\"))\n}"}
{"id":"845c3a3f-3a8c-4e6a-bf8d-23ce76b347ed","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class StudyMeta(patientName: String, modality: String)\n\ndef description(meta: Option[StudyMeta]): String =\n  meta.map(m => s\"${m.patientName}, ${m.modality}\").getOrElse(\"No metadata\")"}
{"id":"17c6a85c-6886-465b-841a-6e39b8fbf5c8","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def getSeriesCount(study: Option[ImagingStudy]): Int =\n  study.map(_.series.size).getOrElse(0)"}
{"id":"bbf613d4-5922-49e5-a7c0-1ad5ffdc0f65","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"object DicomImageFactory {\n  def fromBinary(raw: Array[Byte]): Option[DicomImage] =\n    Option(DicomParser.parseImage(raw))\n}"}
{"id":"7f99ac4e-bbb9-4112-8d06-0f603986c7eb","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def selectFirstAnnotation(series: Option[ImageSeries]): Option[Annotation] =\n  series.flatMap(_.annotations.headOption)"}
{"id":"7f8ad316-4e43-4dee-9aa3-98a091a8a12f","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def getSliceThickness(headers: Map[String, String]): Option[Double] =\n  headers.get(\"SliceThickness\").map(_.toDouble)"}
{"id":"ce0855a4-215f-4a95-a193-9f5f23805bcc","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"object RoiStats {\n  def mean(mask: Option[SegmentationMask]): Double =\n    mask.map(_.intensities).filter(_.nonEmpty).map(_.sum / _.size.toDouble).getOrElse(0.0)\n}"}
{"id":"2120e0e8-af2d-4b0f-8878-77b6b90aabd1","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def modalityIsCT(header: Option[DicomHeader]): Boolean =\n  header.exists(_.getField(\"Modality\") == \"CT\")"}
{"id":"b9c5b3c8-bda2-4ad0-8899-27a9888d5870","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"object ViewerSettings {\n  def windowCenterOrDefault(settings: Option[ViewerConfig]): Int =\n    settings.map(_.windowCenter).getOrElse(40)\n}"}
{"id":"d404f703-861a-43a7-aae1-5bec6a5db5c7","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def findPatient(studies: List[ImagingStudy], patientId: String): Option[ImagingStudy] =\n  studies.find(_.patientId == patientId)"}
{"id":"0ecd04ec-6fd3-4e40-bfb1-753fedc8e20c","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class DicomHeader(patientId: String, studyDate: String)\ndef parseDicomHeader(metadata: Map[String, String]): Option[DicomHeader] =\n  for\n    pid <- metadata.get(\"PatientID\")\n    sdt <- metadata.get(\"StudyDate\")\n  yield DicomHeader(pid, sdt)"}
{"id":"02f39313-654d-4239-9915-64eee08c7b11","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"class ScanSeries(val images: Array[MedicalImage])\ndef getFirstImage(series: ScanSeries): Option[MedicalImage] =\n  series.images.headOption"}
{"id":"bb38d19e-e891-4f61-8191-872170b3d89e","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"object VolumeCalculator:\n  def computeVolume(voxelCount: Option[Int], voxelSize: Option[Double]): Option[Double] =\n    for\n      count <- voxelCount\n      size  <- voxelSize\n    yield count * size"}
{"id":"a04ee5da-2c22-4d2a-b58b-134717316014","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def safePatientName(header: java.util.Map[String, String]): Option[String] =\n  Option(header.get(\"PatientName\"))"}
{"id":"4a12bb46-e644-4b76-82e1-aabd343bf88e","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class ImageModality(code: String)\ndef modalityOrDefault(header: Option[ImageModality]): String =\n  header.map(_.code).getOrElse(\"Unknown\")"}
{"id":"7e744194-9b0c-4703-94ea-dc48f76d95e9","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def selectValidImage(image: MedicalImage): Option[MedicalImage] =\n  Option(image).filter(_.pixels.nonEmpty)"}
{"id":"ba619d93-7811-4cb9-8b19-1ecbad9eab2e","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def displayIntensity(image: Option[MedicalImage]): String =\n  image.flatMap(_.getIntensity).map(_.toString).getOrElse(\"Not Available\")"}
{"id":"cf8cd527-5953-4ab9-b4d3-c48dfbfe0803","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def orientationLabel(matrix: Option[Array[Double]]): String =\n  matrix.fold(\"No orientation info\")(_ => \"Orientation found\")"}
{"id":"681cdc0a-6dfd-426b-9c74-5ed738735f8f","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def tryFindStudy(images: Seq[MedicalImage], studyId: String): Option[MedicalImage] =\n  images.find(_.studyId == studyId)"}
{"id":"d67a2e6a-d5e6-412d-950c-eb20e2f99fec","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def anonymizeHeader(header: Option[DicomHeader]): Option[DicomHeader] =\n  header.map(h => h.copy(patientId = \"ANON\"))"}
{"id":"5e56e981-c002-48e5-9695-f70efdfd31f6","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def javaGetDicomSlice(idx: Int): MedicalImage = null\ndef getDicomSliceOption(idx: Int): Option[MedicalImage] =\n  Option(javaGetDicomSlice(idx))"}
{"id":"69de48ab-7667-44ca-9d68-d645af563177","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def getImageContrastValue(optContrast: Option[Double]): String =\n  optContrast match\n    case Some(value) => s\"Contrast: $value\"\n    case None => \"Contrast: N/A\""}
{"id":"72c795b0-5a71-413d-8b28-561fe139ce30","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def getFirstNonEmptySeries(seriesList: Seq[ScanSeries]): Option[ScanSeries] =\n  seriesList.find(_.images.nonEmpty)"}
{"id":"84a50297-1c2c-4cb4-99a6-01c82be8e00a","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def lookupStudyDescription(metadata: Map[String, String]): Option[String] =\n  metadata.get(\"StudyDescription\")"}
{"id":"301c5669-f8c7-4978-b5ce-503282c45b65","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def calculateSliceSpacing(metadata: Option[Map[String, String]]): Option[Double] =\n  metadata.flatMap(_.get(\"SliceSpacing\")).flatMap(s => scala.util.Try(s.toDouble).toOption)"}
{"id":"73ffe5a3-7717-49b0-936d-ff1b6473eade","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def patientBirthDate(metadata: Map[String, String]): Option[String] =\n  metadata.get(\"PatientBirthDate\")"}
{"id":"66d7fb31-a6a4-45a1-aa90-76142c1f9d66","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def selectPreferredViewerConfig(configOpt: Option[ViewerConfig]): ViewerConfig =\n  configOpt.getOrElse(ViewerConfig.default)"}
{"id":"63bd7c38-867f-4d0a-ada8-48c583df6c93","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def centerPixelValue(image: Option[MedicalImage]): Option[Int] =\n  image.flatMap(_.centerPixelValue)"}
{"id":"a299914d-213f-4695-aa74-fd34aa166fc8","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def combineStudyIds(id1: Option[String], id2: Option[String]): Option[String] =\n  for\n    a <- id1\n    b <- id2\n  yield s\"$a-$b\""}
{"id":"77342ff0-5b97-44da-aabc-d585cdc9cb0b","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def seriesDescription(header: Option[DicomHeader]): String =\n  header.map(_.studyDate).getOrElse(\"Description Missing\")"}
{"id":"4a3dce3c-d289-46ca-8252-90b4e2a8a250","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getSeriesFromJava(id: String): ImagingSeries = JavaImageLibrary.findSeries(id)\nif (getSeriesFromJava(\"SR12\") != null) println(\"Found series\") else println(\"Not found\")"}
{"id":"69e132bd-b2eb-43a8-8430-3002cba56675","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"val slice: MedicalImage = JavaImageLoader.loadImageSlice(\"IMG_005\")\nif (slice == null)\n  println(\"Error: Could not load image slice.\")\nelse\n  println(\"Slice loaded: \" + slice.id)"}
{"id":"564b5aa6-ed95-4aa7-a2c0-ca16041a8ed8","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def maybeGetPatientStudy(patientId: String): DicomStudy = HospitalDbAPI.fetchStudy(patientId)\nif (maybeGetPatientStudy(\"432\") == null)\n  println(\"No study found for patient.\")"}
{"id":"b0f51eeb-2ec1-4f49-9ffe-ecaa5e608dc4","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"val anonymized: DicomHeader = null\nif (anonymized == null) println(\"Header removal failed.\")"}
{"id":"960aec54-1e7c-4822-8a37-863dc181f56a","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getSeriesUID(header: java.util.Map[String, String]): String =\n  val result = header.get(\"SeriesInstanceUID\")\n  if (result != null) result else null"}
{"id":"3997426c-d2b9-4fdc-bd9f-9986e4ca4e40","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"val proprietaryTagValue = hospitalDicomStream.readTag(\"Private1234\")\nif (proprietaryTagValue != null) println(proprietaryTagValue) else println(\"Tag missing\")"}
{"id":"2ebe4bcd-50b2-4095-ab14-6899361a844b","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getReferencedInstance(image: MedicalImage): ReferencedInstance =\n  if (image.reference != null) image.reference else null"}
{"id":"b9eaf868-3269-4403-9ac0-a5912ffbafe2","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def findModalityCode(meta: java.util.Map[String, String]): String =\n  val code = meta.get(\"Modality\")\n  if (code != null) code else null"}
{"id":"aa1faadd-87e3-4e89-b6a8-1e524afdac10","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def checkAnnotation(annotation: ImageAnnotation): Boolean =\n  if (annotation == null) false else annotation.isVisible"}
{"id":"7bedbd64-ec93-44a7-a751-7912221f1547","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def displayWindowLevel(windowLevel: ViewingParameters): String =\n  if (windowLevel == null) \"No window/level\" else s\"${windowLevel.window}/${windowLevel.level}\""}
{"id":"83140a4a-278a-4574-b486-f006f747c67b","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def extractOrientation(header: DicomHeader): String =\n  if (header.orientation != null) header.orientation else \"Unknown\""}
{"id":"e4e9f3bd-242c-42e6-b7be-d670abc13b63","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getPatientInstitution(header: java.util.Map[String, String]): String =\n  val inst = header.get(\"InstitutionName\")\n  if (inst == null) \"-\" else inst"}
{"id":"7b25791a-e0b4-4ce3-80a1-372a14c2f8bd","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"case class PaymentLink(id: String, amount: Double, status: String)\ndef getPaymentLinkOrNull(linkId: String): PaymentLink = {\n  if (linkId == \"active-123\") PaymentLink(linkId, 120.0, \"ACTIVE\")\n  else null\n}"}
{"id":"6f6d968f-80f3-46e7-88be-6d1aa2318a37","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkRepository {\n  def fetchPaymentLinkById(linkId: String): PaymentLink = {\n    if (linkId != null && linkId.startsWith(\"plk_\"))\n      PaymentLink(linkId, 99.99, \"PENDING\")\n    else\n      null\n  }\n}"}
{"id":"545d5fae-fb26-40cd-a40a-982c0b9b7962","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkJavaCaller {\n  def findPaymentLinkFromJava(id: String): PaymentLink = {\n    if (id.length > 6) PaymentLink(id, 80.0, \"CREATED\") else null\n  }\n  def getStatus(linkId: String): String = {\n    val link = findPaymentLinkFromJava(linkId)\n    if (link != null) link.status else null\n  }\n}"}
{"id":"c8b4cc1b-1cd8-4126-9fb9-846dee6af151","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def markPaymentLinkAsProcessed(link: PaymentLink): String = {\n  if (link == null) \"Cannot mark null link as processed\"\n  else \"Payment Link \" + link.id + \" processed.\"\n}"}
{"id":"97c65280-4c2c-481c-b197-4993d80c8a8d","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def cancelPaymentLink(link: PaymentLink): Boolean = {\n  if (link != null && link.status != null && link.status == \"ACTIVE\") {\n    true\n  } else {\n    false\n  }\n}"}
{"id":"be9a08bd-523b-49bd-8901-0efbcfef4140","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def getPaymentLinkStatus(link: PaymentLink): String = {\n  if (link != null && link.status != null) link.status\n  else \"UNKNOWN\"\n}"}
{"id":"bfbee0a1-884b-4635-99ec-aaa720b82f78","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def duplicatePaymentLink(link: PaymentLink): PaymentLink = {\n  if (link == null) null\n  else PaymentLink(link.id + \"-copy\", link.amount, link.status)\n}"}
{"id":"8c21147f-badc-4dbf-b716-ffb2e31a9746","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def mergePaymentLinks(primary: PaymentLink, secondary: PaymentLink): PaymentLink = {\n  if (primary == null) secondary\n  else if (secondary == null) primary\n  else PaymentLink(primary.id, primary.amount + secondary.amount, primary.status)\n}"}
{"id":"e33b4b73-5cdf-47b9-9cb7-48f77ac0130a","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def computeLinkAmountOrNull(link: PaymentLink): java.lang.Double = {\n  if (link == null) null else link.amount\n}"}
{"id":"61dda7f1-050c-4610-8f91-5f1e14e04afc","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def notifyOnPending(link: PaymentLink): String = {\n  if (link != null && link.status == \"PENDING\")\n    s\"Notification sent for Payment Link ${link.id}\"\n  else\n    null\n}"}
{"id":"de4aea7b-c758-423f-b057-d97de605f9f3","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def findPaymentLink(linkId: String): Option[PaymentLink] =\n  if linkId == \"active-123\" then Some(PaymentLink(linkId, 120.0, \"ACTIVE\")) else None"}
{"id":"87c316ba-dec4-4f75-8f5e-f0d04980ff29","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def safelyGetStatus(maybeLink: Option[PaymentLink]): String =\n  maybeLink.map(_.status).getOrElse(\"NOT_FOUND\")"}
{"id":"a0e362a0-6780-463c-ae75-f9e04f71bbb4","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def cancelActivePaymentLink(optLink: Option[PaymentLink]): Boolean =\n  optLink.exists(_.status == \"ACTIVE\")"}
{"id":"8218a062-04b7-4eb0-883a-810f6e85ce33","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def safeDuplicatePaymentLink(linkOpt: Option[PaymentLink]): Option[PaymentLink] =\n  linkOpt.map(link => PaymentLink(link.id + \"-copy\", link.amount, link.status))"}
{"id":"df686c0f-3bb3-420e-9978-de82d2577323","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def mergePaymentLinksOpt(p: Option[PaymentLink], s: Option[PaymentLink]): Option[PaymentLink] =\n  (p, s) match {\n    case (Some(primary), Some(secondary)) =>\n      Some(PaymentLink(primary.id, primary.amount + secondary.amount, primary.status))\n    case (Some(l), None) => Some(l)\n    case (None, Some(l)) => Some(l)\n    case _ => None\n  }"}
{"id":"b0826797-c776-43ba-8368-3dd44bbef397","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def wrapNullableAmount(amount: java.lang.Double): Option[Double] =\n  Option(amount).map(_.doubleValue)"}
{"id":"a916d0a6-bf3f-4dfd-a0ad-a977de1002d8","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def notifyIfPending(link: Option[PaymentLink]): Option[String] =\n  link.filter(_.status == \"PENDING\").map(l => s\"Notification sent for Payment Link ${l.id}\")"}
{"id":"a956e4a0-b367-40e8-9def-a03c11072546","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def fetchPaymentLinkFromInterop(linkId: String): Option[PaymentLink] =\n  Option(if linkId.contains(\"java\") then PaymentLink(linkId, 11.11, \"CREATED\") else null)"}
{"id":"b17dfd06-bcf5-4445-bcf6-f13a40a2df0e","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def getProcessedStatus(optLink: Option[PaymentLink]): String =\n  optLink.fold(\"No link to process.\") { link => s\"Payment Link ${link.id} processed.\" }"}
{"id":"349bc9a8-ec8a-4813-a2be-df3b2d7fd6a3","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def paymentLinkIsPending(link: Option[PaymentLink]): Boolean =\n  link.exists(_.status == \"PENDING\")"}
{"id":"c5a756c9-f003-44eb-a21f-d72ae0204567","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLink(id: String, amount: BigDecimal)\ndef getActivePaymentLinkById(linkId: String, linkRepo: PaymentLinkRepository): Option[PaymentLink] =\n  Option(linkRepo.findById(linkId)).filter(_.isActive)"}
{"id":"5dadded9-5b05-4c10-b846-aa54894db2b1","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def getPaymentLinkOwner(link: PaymentLink): Option[String] =\n  Option(link.ownerId)"}
{"id":"7cc8c2ec-88f0-4b84-8ad8-b2e73fd7d46e","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"class PaymentLinkJavaGateway {\n  def fetchLink(linkId: String): PaymentLink = null\n}\ndef retrieveLinkOption(linkId: String, gateway: PaymentLinkJavaGateway): Option[PaymentLink] =\n  Option(gateway.fetchLink(linkId))"}
{"id":"fe5dfb24-6333-4c1a-a578-ffcd13f1e4ba","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def linkTitleOrDefault(paymentLink: PaymentLink): String =\n  Option(paymentLink.title).getOrElse(\"Untitled Payment Link\")"}
{"id":"63adbba1-5461-4ba8-a311-33f109123c27","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def maybeGetLinkAmount(link: PaymentLink): Option[BigDecimal] =\n  Option(link.totalAmount)"}
{"id":"956a533d-7463-4ccd-832b-fd233bf1a7e9","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def filterValidLinks(links: List[PaymentLink]): List[PaymentLink] =\n  links.filter(link => Option(link.status).contains(\"ACTIVE\"))"}
{"id":"1cc9f1d1-6fe1-4974-ac84-bfa3f8bfb292","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def findCustomerEmail(link: PaymentLink): Option[String] =\n  Option(link.customerEmail).filter(_.contains(\"@\"))"}
{"id":"9f6b292f-8e8a-474b-aabe-6f6b353d4991","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def setOptionalDiscount(link: PaymentLink, discount: Option[BigDecimal]): PaymentLink =\n  link.copy(discountAmount = discount.getOrElse(BigDecimal(0)))"}
{"id":"6db41d6f-6c67-4317-971b-97376fc377b2","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def linkShortUrl(link: PaymentLink): Option[String] =\n  Option(link.shortUrl)"}
{"id":"246f365b-df33-435f-b16c-3b708ac7ff5d","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def paymentLinkStatus(link: PaymentLink): String =\n  Option(link.status).fold(\"UNKNOWN\")(_.toUpperCase)"}
{"id":"f655e9a9-9198-450c-bd09-51cd80d9d949","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def getPaymentLinkRecipient(linkId: String, repo: PaymentLinkRepository): String =\n  Option(repo.findById(linkId)).flatMap(l => Option(l.recipientName)).getOrElse(\"No recipient\")"}
{"id":"23d03eab-7f75-4803-8fc8-6e5a7fd8dd69","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def deleteInactiveLinkOrNone(linkId: String, repo: PaymentLinkRepository): Option[String] =\n  Option(repo.findById(linkId)).filterNot(_.isActive).map(_.id)"}
{"id":"9aa1a06b-45a5-49da-97a0-f7c37494f25a","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def getLinkDescriptionOrDefault(link: PaymentLink): String =\n  Option(link.description).filter(_.nonEmpty).getOrElse(\"No description provided\")"}
{"id":"191faba1-b547-48f0-9001-94a339f6e55e","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def safeParseLinkAmount(amount: String): Option[BigDecimal] =\n  try Some(BigDecimal(amount)) catch case _: Throwable => None"}
{"id":"da6f1ece-b38c-4c5f-8d86-435946d70e9c","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def foldOverOptionalPromo(link: PaymentLink): String =\n  Option(link.promoCode).fold(\"No Promo\")(_ => \"Promo applied!\")"}
{"id":"01f878ca-6522-4f86-8620-9ade1d69fbb8","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def getPaymentLinkWithStatus(linkId: String, repo: PaymentLinkRepository): Option[(PaymentLink, String)] =\n  Option(repo.findById(linkId)).map(link => (link, Option(link.status).getOrElse(\"UNKNOWN\")))"}
{"id":"0a1767d4-4689-4f75-b573-77216a80f250","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def isPaymentLinkForEmail(link: PaymentLink, email: String): Boolean =\n  Option(link.customerEmail).exists(_.equalsIgnoreCase(email))"}
{"id":"74d77e56-a529-41c9-b0b6-c71912f7d4af","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"class PaymentLinkNullableJavaRepo {\n  def findByRecipient(recipient: String): PaymentLink = null\n}\ndef safeFindByRecipient(recipient: String, javaRepo: PaymentLinkNullableJavaRepo): Option[PaymentLink] =\n  Option(javaRepo.findByRecipient(recipient))"}
{"id":"728e6bd5-b94b-4383-b38e-96783a153f9e","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def optionalLinkExpirationDate(paymentLink: PaymentLink): Option[java.time.LocalDate] =\n  Option(paymentLink.expirationDate)\n"}
{"id":"e9edb2a6-6b9a-451c-a2e8-8f27328ded08","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def withSafeDiscountAmount(link: PaymentLink): Option[BigDecimal] =\n  Option(link.discountAmount).filter(_ > 0)"}
{"id":"44274fd7-72a7-4603-9185-95600e3ae074","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkRepository {\n  def findById(linkId: String): PaymentLink = null\n}\ndef getActiveLink(linkId: String, repo: PaymentLinkRepository): PaymentLink =\n  val link = repo.findById(linkId)\n  if (link != null && link.isActive) link else null"}
{"id":"c897be7d-63e4-4c51-8c55-8029b3aff89a","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class CustomerInfoJavaClient {\n  def getPaymentLinkOwner(link: PaymentLink): String = null\n}\ndef getOwnerOrNull(link: PaymentLink, client: CustomerInfoJavaClient): String =\n  val owner = client.getPaymentLinkOwner(link)\n  if (owner != null) owner else null"}
{"id":"2c36fb33-cea0-4f13-ae60-b8b4415410d9","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def unsafeTitle(link: PaymentLink): String =\n  if (link.title != null) link.title else null"}
{"id":"d6dd9a84-76cd-41da-b009-cb198a22a312","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def fetchLinkStatus(link: PaymentLink): String =\n  if (link.status == null) null else link.status.toLowerCase"}
{"id":"da4fc445-06a4-4afe-9932-ca50ea95eb06","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def returnNullIfInactive(link: PaymentLink): PaymentLink =\n  if (link.isActive) link else null"}
{"id":"17f05dea-d0e2-47e8-9668-808a2d5d208e","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def assignNullEmailIfMissing(link: PaymentLink): PaymentLink =\n  if (link.customerEmail == null) link.copy(customerEmail = null) else link"}
{"id":"40b8b0e5-a390-45a1-b47a-fe9b2dfca94f","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def linkShortUrlOrNull(link: PaymentLink): String =\n  if (link.shortUrl != null) link.shortUrl else null"}
{"id":"83b0996c-8d51-4767-96bc-40373b5fd781","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class DiscountJavaApi {\n  def getActiveDiscount(linkId: String): java.math.BigDecimal = null\n}\ndef unsafeActiveDiscountAmount(linkId: String, api: DiscountJavaApi): java.math.BigDecimal =\n  val discount = api.getActiveDiscount(linkId)\n  if (discount != null) discount else null"}
{"id":"20a89ba8-24f8-4f50-a413-184b1ab38662","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def getNullablePromoCode(link: PaymentLink): String =\n  if (link.promoCode == null) null else link.promoCode"}
{"id":"1397db0b-8589-47e5-93a3-fa20eef6bc33","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def setExpirationDateOrNull(link: PaymentLink, expiration: java.time.LocalDate): PaymentLink =\n  if (expiration == null) link.copy(expirationDate = null) else link.copy(expirationDate = expiration)"}
{"id":"759b0c29-4225-410f-84ed-01556bbc2308","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def unsafeLinkDescription(link: PaymentLink): String =\n  if (link.description == null) null else link.description"}
{"id":"2af1db30-3af6-4f8e-8d69-500cdc35582d","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def getDiscountOrNull(link: PaymentLink): java.math.BigDecimal =\n  if (link.discountAmount != null) link.discountAmount else null"}
{"id":"34b33149-fe59-4e73-822e-c1ec4858c1bc","timestamp":1746098665234,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def unsafeRecipientName(link: PaymentLink): String =\n  if (link.recipientName != null) link.recipientName else null"}
{"id":"761639de-4b39-43e0-bb13-ef80b1f6b2c4","timestamp":1746098665234,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def deleteLinkOrReturnNull(linkId: String, repo: PaymentLinkRepository): PaymentLink =\n  val link = repo.findById(linkId)\n  if (link != null && !link.isActive) null else link"}
{"id":"3af5786e-15ed-4364-8aaf-4b00d4fab597","timestamp":1746098665234,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def setNullIfDescriptionEmpty(link: PaymentLink): PaymentLink =\n  if (link.description == \"\") link.copy(description = null) else link"}
{"id":"83982180-2896-49ab-a1a4-996e561e17ab","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object TranslateUserInput1:\n  def translateText(text: String, targetLang: String): String =\n    if (text == null || targetLang == null) null\n    else s\"[${targetLang}] $text\""}
{"id":"9aebf9c0-bf8c-411c-bcdb-6857ddbf87bb","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class UserProfileDatabase1:\n  def fetchUserPreferredLanguage(username: String): String =\n    if (username == null) null\n    else if (username == \"alice\") \"en\"\n    else null"}
{"id":"984e0df1-9f15-4e19-902b-50e72e3ab922","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object BotResponseGenerator1:\n  def constructResponse(translatedMessage: String): String =\n    if (translatedMessage != null) s\"Bot: $translatedMessage\"\n    else \"Bot: Sorry, translation unavailable.\""}
{"id":"1064a7b2-9c0a-419f-a8d6-7209e27c1cf0","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class ExternalTranslationService1:\n  def callJavaApiForTranslation(message: String, language: String): String =\n    if (message == null || language == null) null\n    else s\"Translated($message) to $language\""}
{"id":"6dcc1b60-49c3-497d-a725-cfaa0e0b70c4","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object LanguageValidation1:\n  def isLanguageSupported(lang: String): Boolean =\n    if (lang == null) false\n    else List(\"en\",\"es\",\"fr\").contains(lang)"}
{"id":"abc0b303-17b6-4c07-b2c2-583f289d4843","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class SessionManager1:\n  var latestUserMessage: String = null\n  def setUserMessage(msg: String): Unit =\n    if (msg != null) latestUserMessage = msg\n  def getUserMessage: String = latestUserMessage"}
{"id":"b159868c-fc5b-4ff9-89e6-c1ab7a3aa28d","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object NullSafeFormatter1:\n  def formatTranslation(original: String, translated: String): String =\n    if (original == null || translated == null) \"Invalid input\"\n    else s\"Original: $original | Translated: $translated\""}
{"id":"8b6a6a83-8d6d-442f-b541-3ef5fcb54db3","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object ChatLogAppender1:\n  def appendMessage(log: java.util.List[String], message: String): Unit =\n    if (log != null && message != null) log.add(message)"}
{"id":"623ba37b-6003-4c11-99ab-8efdcad711bc","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class JavaLanguageApiBridge1:\n  def getLanguageNameByCode(code: String): String =\n    if (code == \"en\") \"English\"\n    else if (code == \"es\") \"Spanish\"\n    else null"}
{"id":"89efc3be-2d61-4862-babc-17a328a306b1","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object UserSessionValidator1:\n  def validateActiveSession(sessionId: String): Boolean =\n    if (sessionId == null) false\n    else sessionId.matches(\"session-\\\\d+\")"}
{"id":"eb50fd60-db43-409a-a4c9-ff9a85774feb","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object TranslationOptionHandler1:\n  def safeTranslateText(text: String, targetLang: String): Option[String] =\n    Option(text).flatMap(t => Option(targetLang).map(lang => s\"[$lang] $t\"))"}
{"id":"3e8d676d-7b48-482f-b5e8-590e01589bef","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"class UserProfileRepository2:\n  def findPreferredLanguage(username: String): Option[String] =\n    Option(username).collect {\n      case \"alice\" => \"en\"\n      case \"juan\"  => \"es\"\n    }"}
{"id":"0fb690e3-87d4-4c1d-a710-7b44807e93bf","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object BotResponseGenerator2:\n  def constructOptionResponse(translatedMessage: Option[String]): String =\n    translatedMessage.getOrElse(\"Bot: Sorry, translation unavailable.\")"}
{"id":"2d397274-9d6f-4a8d-80f2-7009265065e5","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"class ExternalTranslationService2:\n  def wrapJavaApiResponse(msg: String, lang: String): Option[String] =\n    Option(msg).flatMap(m => Option(lang).map(l => s\"Translated($m) to $l\"))"}
{"id":"c68f9942-1d49-40d4-8ea0-bde3b4f7bf86","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object LanguageValidation2:\n  def isLanguageSupportedOpt(lang: Option[String]): Boolean =\n    lang.exists(List(\"en\",\"es\",\"fr\").contains)"}
{"id":"89ce74f0-dd00-42e9-8743-5c6b6518b8e2","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"class SessionManager2:\n  private var latestUserMessage: Option[String] = None\n  def setUserMessage(msg: String): Unit =\n    latestUserMessage = Option(msg)\n  def getUserMessage: Option[String] = latestUserMessage"}
{"id":"f33f8166-b77e-4b86-9114-ed1db267f749","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object NullSafeFormatter2:\n  def formatTranslation(original: Option[String], translated: Option[String]): String =\n    (original, translated) match\n      case (Some(o), Some(t)) => s\"Original: $o | Translated: $t\"\n      case _ => \"Invalid input\""}
{"id":"865c325f-ea39-4c78-9356-9fc52218cdd4","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object ChatLogAppender2:\n  def appendMessage(log: Option[java.util.List[String]], message: Option[String]): Option[java.util.List[String]] =\n    for l <- log; m <- message do l.add(m)\n    log"}
{"id":"d5428d11-3550-4d69-b64a-7b1aefc9bbd3","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"class JavaLanguageApiBridge2:\n  def getLanguageNameByCodeOpt(code: String): Option[String] =\n    Option(code).collect {\n      case \"en\" => \"English\"\n      case \"es\" => \"Spanish\"\n    }"}
{"id":"0cf55d75-dd18-4b23-a7d2-9b6d7e020b14","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object UserSessionValidator2:\n  def validateActiveSession(sessionId: Option[String]): Boolean =\n    sessionId.exists(_.matches(\"session-\\\\d+\"))"}
{"id":"9cff41d0-f287-4e1f-ab69-583bec021625","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object LanguageDetector {\n  def detect(input: String | Null): String = {\n    if (input == null) {\n      \"unknown\"\n    } else if (input.contains(\"Bonjour\")) {\n      \"French\"\n    } else if (input.contains(\"Hello\")) {\n      \"English\"\n    } else {\n      \"unknown\"\n    }\n  }\n}"}
{"id":"1062a855-d70e-42d9-a4ed-5486647872e0","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class UserSession {\n  var activeLanguage: String = null\n\n  def setActiveLanguage(language: String): Unit = {\n    if (language != null) {\n      activeLanguage = language\n    }\n  }\n  def getActiveLanguage(): String = {\n    if (activeLanguage == null) \"undetected\" else activeLanguage\n  }\n}"}
{"id":"e63acf52-cc23-4ad9-9181-e51dbbb07f3c","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object PhraseMemory {\n  def rememberPhrase(userPhrase: String): String = {\n    if (userPhrase == null) {\n      \"Phrase not remembered.\"\n    } else {\n      \"Remembered: \" + userPhrase\n    }\n  }\n}"}
{"id":"b4ffab7a-9c26-48dc-895d-7c2b83c90cb6","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object ExternalTranslator {\n  def translateWithLegacySystem(text: String, targetLang: String): String = {\n    // Hypothetical Java API that may return null\n    val translation = legacyTranslate(text, targetLang)\n    if (translation == null) {\n      \"[Translation unavailable]\"\n    } else {\n      translation\n    }\n  }\n  def legacyTranslate(input: String, lang: String): String = {\n    if (input == null || lang == null) null else s\"$input (in $lang)\"\n  }\n}"}
{"id":"eba1d09e-9a1a-4f06-94f5-f77578a5ab2d","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class ConversationHistory {\n  private var lastMessage: String = null\n  def update(message: String): Unit = {\n    if (message != null) lastMessage = message\n  }\n  def getLast(): String = lastMessage\n}"}
{"id":"ebe4215a-1bcc-48fb-8bff-92e705b7a983","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object NullLanguageFallback {\n  def getLanguage(userPreferred: String): String = {\n    if (userPreferred == null) \"English\"\n    else userPreferred\n  }\n}"}
{"id":"a1785379-862c-4066-b3ea-e8b8ddd83620","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class ChatBotName {\n  var displayName: String = null\n  def setDisplayName(name: String): Unit = {\n    if (name != null) displayName = name\n  }\n  def greet(): String = {\n    if (displayName == null) \"Hello!\" else s\"Hello, I'm $displayName!\"\n  }\n}"}
{"id":"3c882b65-d3f1-41da-b6b8-f12ea3c04d4f","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object MessageSanitizer {\n  def sanitize(input: String): String = {\n    if (input != null) input.trim else null\n  }\n}"}
{"id":"d9b0c93b-949f-4986-ae97-ddbc818782c5","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object TranslationRequestHandler {\n  def handleRequest(requestPayload: String, langCode: String): String = {\n    if (requestPayload == null || langCode == null) {\n      \"Error: Invalid request\"\n    } else {\n      s\"Translating '$requestPayload' to $langCode\"\n    }\n  }\n}"}
{"id":"1ed36edb-047e-485e-852c-f27c1f588d75","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class UserPreferredLanguage {\n  private var preferred: String = null\n  def setPreferred(lang: String): Unit = {\n    if (lang != null) preferred = lang\n  }\n  def getPreferred(): String = {\n    if (preferred != null) preferred else \"en\"\n  }\n}"}
{"id":"c7528262-a71c-41e2-930b-cce8512c5a02","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class DetectedLanguage(code: String)\nobject LanguageDetectorSafe {\n  def detect(input: String): Option[DetectedLanguage] = {\n    if input.contains(\"Bonjour\") then Some(DetectedLanguage(\"fr\"))\n    else if input.contains(\"Hello\") then Some(DetectedLanguage(\"en\"))\n    else None\n  }\n}"}
{"id":"7d80bbcc-542f-42bf-9911-0ffeea442c84","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object TranslationOptionUtil {\n  def safeTranslate(raw: String | Null, lang: String): Option[String] =\n    Option(raw).map(r => s\"$r translated to $lang\")\n}"}
{"id":"f7f9434d-0c0c-4895-b673-46b1666e6c44","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object NullSafeLanguageSelector {\n  def pickLanguage(preferred: Option[String]): String = \n    preferred.getOrElse(\"English\")\n}"}
{"id":"3c0cb93c-d1d0-4f3d-9a16-e9ac9e728c77","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class ChatMessage(content: String)\nobject MessageRetriever {\n  def getLastMessage(history: List[ChatMessage]): Option[ChatMessage] = {\n    history.lastOption\n  }\n}"}
{"id":"8171c6a8-28df-4169-978a-dc637bd48d7b","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object MessageWrapper {\n  def wrapPossiblyNull(message: String | Null): Option[String] = Option(message)\n}"}
{"id":"cc286499-4f03-45bd-9798-4e99cf19cfd2","timestamp":1746098696692,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object OptionPatternMatcher {\n  def describeLanguage(opt: Option[String]): String = opt match\n    case Some(\"fr\") => \"French\"\n    case Some(\"en\") => \"English\"\n    case _ => \"Unknown language\"\n}"}
{"id":"787fe3aa-7709-42ca-9f74-34c3ad4bc012","timestamp":1746098696692,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object SafeReplyGenerator {\n  def generateReply(userText: String | Null): Option[String] =\n    Option(userText).filter(_.nonEmpty).map(text => s\"You said: $text\")\n}"}
{"id":"5c009341-d409-474e-8429-46dd33d1733b","timestamp":1746098696692,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object OptionFoldTranslator {\n  def translateOrDefault(textOpt: Option[String], target: String): String =\n    textOpt.fold(\"[Missing text]\")(_.toUpperCase + s\" ($target)\")\n}"}
{"id":"756389d3-c23e-4d38-93e7-84d41545b301","timestamp":1746098696692,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object ChainedTranslation {\n  def chainTranslate(msg: String | Null, lang: String): Option[String] =\n    Option(msg).map(_.trim).filter(_.nonEmpty).map(m => s\"Trans: $m -> $lang\")\n}"}
{"id":"43a7599a-21dd-433e-87de-22660525b5e0","timestamp":1746098696692,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object NullableToOptionExample {\n  def fromJavaApi(text: String | Null): Option[String] = Option(text)\n}"}
{"id":"7ade0a9d-a395-467d-b40c-282e0747f848","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"case class ConsumptionRecord(timestamp: Long, kilowattHours: Double)\n\ndef fetchConsumptionFromJavaApi(deviceId: String): ConsumptionRecord = {\n  // Simulate possible Java null return\n  if deviceId == \"device-404\" then null else ConsumptionRecord(1684354310L, 15.3)\n}\n\ndef totalConsumption(deviceId: String): Double = {\n  val record = fetchConsumptionFromJavaApi(deviceId)\n  if (record != null) record.kilowattHours else 0.0\n}"}
{"id":"19d219e5-59da-450e-a478-5e507ec032f9","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class SolarPanel(val panelId: String) {\n  var lastReading: ConsumptionRecord = null\n  def updateReading(newReading: ConsumptionRecord): Unit = {\n    lastReading = newReading\n  }\n  def getMostRecentKWh(): Double = {\n    if (lastReading != null) lastReading.kilowattHours else -1.0\n  }\n}"}
{"id":"bae23ba4-2aa0-4a51-95f4-20e912380932","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object GridStatusReader {\n  def getGridStatus(buildingId: String): String = {\n    // Simulates Java code that can return null\n    if buildingId == \"unknown\" then null else \"Active\"\n  }\n  def showStatus(buildingId: String): String = {\n    val status = getGridStatus(buildingId)\n    if (status != null) status else \"Unavailable\"\n  }\n}"}
{"id":"7f923789-6cbd-49cf-a7c0-8ce769d73944","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getConsumptionAlert(messageId: String): String = {\n  if (messageId == \"ALERT_0\") null else \"Consumption threshold breached!\"\n}\n\ndef displayAlert(messageId: String): String = {\n  val alert = getConsumptionAlert(messageId)\n  if (alert != null) s\"Alert: $alert\" else \"No alert.\"\n}"}
{"id":"e04d7816-987c-4e78-a98e-a451a043561d","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object MeterReader {\n  def retrieveMeterId(userId: String): String = {\n    if (userId == \"userX\") null else s\"MTR-$userId\"\n  }\n  def getMeterDisplay(userId: String): String = {\n    val id = retrieveMeterId(userId)\n    if (id != null) s\"Meter $id Ready\" else \"Meter unavailable\"\n  }\n}"}
{"id":"d70ae824-f62b-4426-8f7b-3fdeb71c0caa","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def fetchHourlyUsageFromApi(hour: Int): ConsumptionRecord = {\n  if (hour < 0 || hour > 23) null else ConsumptionRecord(System.currentTimeMillis(), 2.4 * hour)\n}\n\ndef safeUsageKWh(hour: Int): String = {\n  val usage = fetchHourlyUsageFromApi(hour)\n  if (usage != null) f\"${usage.kilowattHours}%.2f kWh\"\n  else \"No data for this hour.\"\n}"}
{"id":"58e57928-59ab-49b0-b933-67b35546fe2d","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class DeviceEnergyInfo {\n  private var status: String = null\n  def setStatus(newStatus: String | Null): Unit = {\n    status = newStatus\n  }\n  def statusMessage(): String = {\n    if (status != null) status else \"Status unknown\"\n  }\n}"}
{"id":"20ccf1fa-afbf-44e4-9bb1-e2d30051d830","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getPeakHourFromLegacyApi(roomName: String): Integer = {\n  if roomName == \"BoilerRoom\" then null else Integer.valueOf(18)\n}\n\ndef adjustDisplayForPeak(roomName: String): String = {\n  val peakHour = getPeakHourFromLegacyApi(roomName)\n  if (peakHour != null) s\"Peak hour is ${peakHour.intValue()}\"\n  else \"No peak hour for this room.\"\n}"}
{"id":"717f498d-2440-4db8-82a3-3cf8dc3997a3","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object BillingEngine {\n  def lastBillAmount(accountId: String): java.lang.Double = {\n    if accountId == \"zero\" then null else java.lang.Double.valueOf(98.5)\n  }\n  def formattedBill(accountId: String): String = {\n    val amount = lastBillAmount(accountId)\n    if (amount != null) f\"Amount: $$${amount.doubleValue()}%.2f\" else \"No bill available.\"\n  }\n}"}
{"id":"25138e84-daef-468c-b9c0-e3f8ccd6064d","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def fetchDeviceName(deviceSerial: String): String = {\n  if deviceSerial.contains(\"ERR\") then null else s\"Device-$deviceSerial\"\n}\n\ndef uppercaseDeviceName(deviceSerial: String): String = {\n  val d = fetchDeviceName(deviceSerial)\n  if (d != null) d.toUpperCase else \"INVALID DEVICE\"\n}"}
{"id":"eb406d9b-14a1-4df0-801b-f8b52f3f53ef","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def getEnergyReading(readingId: String): Option[ConsumptionRecord] = {\n  Option(fetchConsumptionFromJavaApi(readingId))\n}\n\ndef readingKWhOrDefault(readingId: String): Double = {\n  getEnergyReading(readingId).map(_.kilowattHours).getOrElse(0.0)\n}"}
{"id":"77899dab-4ed3-4430-ac31-1800cef649ad","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class DailyUsage(hour: Int, kilowatts: Double)\n\ndef safeUsageOption(hour: Int): Option[DailyUsage] = {\n  Option(fetchHourlyUsageFromApi(hour))\n}\n\ndef safeUsageMessage(hour: Int): String = {\n  safeUsageOption(hour).map(u => f\"${u.kilowatts}%.2f kWh\").getOrElse(\"No usage recorded.\")\n}"}
{"id":"1467e9f0-a6d4-4286-9bb5-f8e3688a1d91","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def deviceStatusAsOption(deviceId: String): Option[String] = {\n  Option(GridStatusReader.getGridStatus(deviceId))\n}\n\ndef checkDeviceStatus(deviceId: String): String = {\n  deviceStatusAsOption(deviceId).fold(\"Device not found.\")(s => s\"Grid Status: $s\")\n}"}
{"id":"1b499c38-6878-41df-a591-1bc923685ed6","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def optionalAlert(alertId: String): Option[String] =\n  Option(getConsumptionAlert(alertId))\n\ndef showOptionalAlert(alertId: String): String =\n  optionalAlert(alertId).getOrElse(\"No warning present.\")"}
{"id":"36594fd4-ea2b-42b0-89f0-15545a08925f","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def retrieveMeterOption(userId: String): Option[String] =\n  Option(MeterReader.retrieveMeterId(userId))\n\ndef meterStatusText(userId: String): String = {\n  retrieveMeterOption(userId).map(id => s\"Meter attached: $id\").getOrElse(\"Meter missing\")\n}"}
{"id":"44c97560-c491-4b89-9c67-67fb3ecd3bc1","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def legacyPeakHourOption(room: String): Option[Int] =\n  Option(getPeakHourFromLegacyApi(room)).map(_.intValue)\n\ndef peakDisplay(room: String): String =\n  legacyPeakHourOption(room).map(h => s\"Peak time: $h:00\").getOrElse(\"No peak\")"}
{"id":"61016b50-2ec3-4d45-95e6-9d925d573b87","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def lastBillOption(accId: String): Option[Double] =\n  Option(BillingEngine.lastBillAmount(accId)).map(_.doubleValue())\n\ndef billTextOrZero(accId: String): String =\n  lastBillOption(accId).map(amt => f\"$$$amt%.2f\").getOrElse(\"$0.00\")"}
{"id":"a205a089-5a9e-4273-b8f3-26c0a0011f47","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def deviceNameMaybe(serial: String): Option[String] =\n  Option(fetchDeviceName(serial))\n\ndef firstLetterOfName(serial: String): Char =\n  deviceNameMaybe(serial).map(_.head).getOrElse('_')"}
{"id":"e11bfb6e-8a18-4b7c-aab2-26d2ed466743","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def safeAverage(records: Seq[ConsumptionRecord]): Option[Double] =\n  Option(records).filter(_.nonEmpty).map(_.map(_.kilowattHours).sum / _.size)\n\ndef displayAverage(records: Seq[ConsumptionRecord]): String =\n  safeAverage(records).fold(\"No records.\")(_.toString)\n"}
{"id":"b81819ca-5393-4feb-a50f-cb2bbea3a6cd","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def maybePanel(panelId: String): Option[SolarPanel] =\n  Option(new SolarPanel(panelId)).filter(_.panelId.nonEmpty)\n\ndef lastPanelReading(panelId: String): Double =\n  maybePanel(panelId).flatMap(p => Option(p.lastReading)).map(_.kilowattHours).getOrElse(-1.0)\n"}
{"id":"d94e2c15-d586-4b56-84e6-ed744980ab71","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def userConsumptionOrNone(user: String): Option[Double] =\n  Option(fetchConsumptionFromJavaApi(user)).map(_.kilowattHours)\n\ndef formattedUsage(user: String): String =\n  userConsumptionOrNone(user).map(u => f\"${u}%.4f kWh\").getOrElse(\"Unavailable\")"}
{"id":"a2a37513-bb40-4bd0-bca4-e3bb746568f2","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class EnergyMeter(id: String, location: String)\ndef findMeterById(meterId: String, meters: List[EnergyMeter]): Option[EnergyMeter] =\n  meters.find(_.id == meterId)\nval meters = List(EnergyMeter(\"001\", \"Server Room\"), EnergyMeter(\"002\", \"Lobby\"))\nval maybeMeter = findMeterById(\"002\", meters)\nmaybeMeter.map(m => s\"Meter at ${m.location}\").getOrElse(\"Meter not found\")"}
{"id":"7dbe56e5-8520-42b7-b380-08884c191655","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getLastEnergyReading(deviceId: String): java.lang.Double =\n  if (deviceId == \"meter123\") 82.5 else null\ndef averageReading(reading1: java.lang.Double, reading2: java.lang.Double): java.lang.Double =\n  if (reading1 != null && reading2 != null) (reading1 + reading2) / 2 else null\nval readingA = getLastEnergyReading(\"meter123\")\nval readingB = getLastEnergyReading(\"unknown\")\navgReading = averageReading(readingA, readingB)"}
{"id":"4be29a60-0f75-4b57-a9a0-871fbb3d12c0","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def javaStyledFindWidget(widgetId: String): EnergyWidget =\n  if (widgetId == \"W100\") EnergyWidget(\"W100\", \"Main Panel\") else null\nval widget = javaStyledFindWidget(\"no-such-widget\")\nif (widget != null) widget.display() else println(\"Widget not found\")"}
{"id":"e2315ca4-5fb6-42f8-a423-d89c6a269fee","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class UserSettings(theme: String)\ndef getUserSettings(userId: String): Option[UserSettings] =\n  Option(javaUserSettings(userId))\ndef javaUserSettings(userId: String): UserSettings =\n  if (userId == \"su-01\") UserSettings(\"dark\") else null\nval preferredTheme = getUserSettings(\"su-01\").map(_.theme).getOrElse(\"default\")"}
{"id":"b2f99dd2-244d-439b-a286-dde21ca33264","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def lastPowerOutageTimestamp(region: String): Long =\n  if (region == \"HQ\") 1683657912020L else null.asInstanceOf[Long]\nval lastOutage = lastPowerOutageTimestamp(\"Annex\")\nif (lastOutage != null) println(lastOutage) else println(\"No record\")"}
{"id":"1de0ff32-afc6-4313-8424-1433ce3ef23d","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def getConsumptionProfile(deviceId: String): Option[ConsumptionProfile] =\n  Option(callExternalJavaProfileService(deviceId))\ndef callExternalJavaProfileService(deviceId: String): ConsumptionProfile =\n  if (deviceId == \"METER1\") ConsumptionProfile(250.6) else null\nval profileOpt = getConsumptionProfile(\"METER1\")\nval usage = profileOpt.map(_.kwh).getOrElse(0.0)"}
{"id":"a9bacd74-2417-416f-be33-411a089bdfb0","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"case class EnergyAlert(id: String, message: String)\ndef getCriticalAlert(dashboardId: String): EnergyAlert =\n  if (dashboardId == \"dash-01\") EnergyAlert(\"A1\", \"Overload\") else null\nval alert = getCriticalAlert(\"unknown\")\nif (alert == null) println(\"No alert\") else println(alert.message)"}
{"id":"c0611966-1ac5-45b1-8369-323872e8b561","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def getCurrentConsumption(zone: String): Option[Double] =\n  javaGetZoneConsumption(zone) match\n    case null => None\n    case value => Some(value)\ndef javaGetZoneConsumption(zone: String): java.lang.Double =\n  if (zone == \"North\") 311.3 else null\nval consumption = getCurrentConsumption(\"North\").getOrElse(-1)\n"}
{"id":"5a7e31ff-82b6-497b-bcae-004f0184ae2d","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class MeterPoint(val id: String, val label: String)\ndef findMeterLabel(meter: MeterPoint): String =\n  if (meter != null) meter.label else \"N/A\"\nval meterObj: MeterPoint = null\nval label = findMeterLabel(meterObj)"}
{"id":"a81d90f6-d7f1-48c9-bf83-228b2e7fce01","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ApplianceStatus(device: String, isActive: Boolean)\ndef statusOrDefault(deviceId: String, statuses: Map[String, ApplianceStatus]): ApplianceStatus =\n  statuses.get(deviceId).getOrElse(ApplianceStatus(deviceId, false))\nval statuses = Map(\"A10\" -> ApplianceStatus(\"A10\", true))\nval deviceStat = statusOrDefault(\"A11\", statuses)"}
{"id":"61a900e4-c8ba-4b17-bb6f-2a6ca7c8de16","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getDashboardName(id: String): String =\n  val result = javaGetName(id)\n  if (result == null) \"Unnamed Dashboard\" else result\ndef javaGetName(id: String): String =\n  if (id == \"main\") \"Energy Master\" else null\nval dashboardLabel = getDashboardName(\"foo\")"}
{"id":"a35b56a2-e6fa-41f6-8146-e00c9c0afcfc","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class Building(name: String)\ndef getOptionalBuilding(buildingId: Int): Option[Building] =\n  Option(javaFindBuilding(buildingId))\ndef javaFindBuilding(buildingId: Int): Building =\n  if (buildingId == 5) Building(\"Innovation Tower\") else null\nval maybeBuilding = getOptionalBuilding(5)\nmaybeBuilding.foreach(b => println(b.name))"}
{"id":"29d245a9-579b-419e-b22a-3125991af2ea","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object SensorHub {\n  def getTemperature(sensorId: String): java.lang.Double =\n    if (sensorId != null && sensorId == \"T500\") 22.1 else null\n}\nval temp = SensorHub.getTemperature(null)\nif (temp != null) println(temp) else println(\"No data\")"}
{"id":"1472de98-c21d-4a3b-ba96-237469e6799e","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def meterDisplayName(meter: Option[EnergyMeter]): String =\n  meter.fold(\"Unknown Meter\")(_.location)\nval m: Option[EnergyMeter] = Some(EnergyMeter(\"085\", \"Lab\"))\nval name = meterDisplayName(m)\n"}
{"id":"6bcd237e-fdb1-49a9-81fe-9893d8d79532","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"class EnergySummary(val id: String, val kwh: Double)\ndef safeGetSummary(deviceId: String): Option[EnergySummary] =\n  Option(getSummaryFromLegacy(deviceId))\ndef getSummaryFromLegacy(deviceId: String): EnergySummary =\n  if (deviceId == \"good\") new EnergySummary(\"good\", 930) else null\nval summary = safeGetSummary(\"bad\").getOrElse(new EnergySummary(\"unknown\", 0.0))"}
{"id":"49514c6c-dee4-4243-a6cb-6c1ab6277738","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getYesterdayReport(panelName: String): ConsumptionReport =\n  if (panelName == \"EastPanel\") ConsumptionReport(1000) else null\nval report = getYesterdayReport(\"NoPanel\")\nif (report != null) println(report.kwh) else println(\"No report available\")"}
{"id":"7f7e6d58-ca24-4a40-99f6-f82992f4eb39","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def highestPowerDraw(devices: List[PowerDevice]): Option[PowerDevice] =\n  devices.sortBy(-_.draw).headOption\nval deviceList = List(PowerDevice(\"AC1\", 1.3), PowerDevice(\"OvenA\", 2.7))\nval maxDevice = highestPowerDraw(deviceList).map(_.id).getOrElse(\"none\")"}
{"id":"1128108c-e808-4072-a80c-b714174dc206","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object DashboardJavaAPI {\n  def getEnergyModule(identifier: String): EnergyModule =\n    if (identifier == \"mod-1\") new EnergyModule(\"mod-1\") else null\n}\nval module = DashboardJavaAPI.getEnergyModule(\"unknown\")\nif (module == null) println(\"Missing module\") else println(module.id)"}
{"id":"d657b7b9-4d64-495d-8b6d-e69beb3efe29","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def wrappedModule(identifier: String): Option[EnergyModule] =\n  Option(DashboardJavaAPI.getEnergyModule(identifier))\nval safeModule = wrappedModule(\"mod-1\")\nsafeModule.exists(_.id.startsWith(\"mod\"))"}
{"id":"45bd607c-0175-4fcf-92c2-37a8a567f4ad","timestamp":1746098796406,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Ballot(voterId: String, candidate: String)\ndef findBallot(ballots: List[Ballot], searchId: String): Option[Ballot] =\n  ballots.find(_.voterId == searchId)"}
{"id":"e0957c25-38ac-4988-8cd5-1763762e8252","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def getTallyReport(electionId: String): String =\n  null"}
{"id":"d3136a4f-d046-436c-8d91-680d615298d2","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def countValidVotes(possibleVotes: List[String]): Int =\n  possibleVotes.filter(_ != null).length"}
{"id":"78c51868-541d-4637-b7bc-dcb5c8a31927","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def fetchCandidateName(candidateId: String): String =\n  if (candidateId == null) null\n  else s\"Candidate: $candidateId\""}
{"id":"82da1f1c-7ed9-456f-9158-2af2fecc86f2","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def safeBallotLookup(ballotId: String): Option[String] =\n  val nativeBallot = javaBallotApiGet(ballotId) // Might be null\n  Option(nativeBallot)\n\ndef javaBallotApiGet(id: String): String =\n  if id == \"bad\" then null else \"Sample Ballot\""}
{"id":"b28f4b35-a958-4ef1-a311-e6043bcc5b26","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getDistrictResult(district: String): Option[Int] =\n  Option(getDistrictCount(district))\n\ndef getDistrictCount(district: String): Integer =\n  if district == \"unknown\" then null else 157"}
{"id":"ce7a34e8-716d-41bd-a13e-622492167bc0","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def nullifyVote(ballot: Ballot): Ballot =\n  null"}
{"id":"4526f2ef-7cc9-4c9e-b4d1-53370acdd226","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def selectWinningCandidate(result: Option[Map[String, Int]]): String =\n  result.flatMap(_.maxByOption(_._2)).map(_._1).getOrElse(\"No winner\")"}
{"id":"9419ba33-54e0-46c9-b6dd-54fad11485e0","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def totalVotes(tally: Map[String, Int]): Option[Int] =\n  Option(tally).map(_.values.sum)"}
{"id":"01025214-2a91-4a49-bb34-b590edb45006","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def isVoteValid(vote: String): Boolean =\n  vote != null && vote.startsWith(\"VOTE-\")"}
{"id":"3c77386b-4ce6-44c9-8762-beb20ad2c8d7","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getVerifiedVoterId(record: VoterRecord): Option[String] =\n  Option(record.voterId).filter(_.startsWith(\"ID-\"))\n\ncase class VoterRecord(voterId: String)"}
{"id":"93829a32-f5a4-4a36-9d81-1794b7f742dc","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def getVoterBallot(voterId: String): String =\n  val result = voteRepositoryLookup(voterId)\n  if (result != null) result else null\n\ndef voteRepositoryLookup(id: String): String =\n  if id == \"unknown\" then null else s\"ballot-$id\""}
{"id":"bc701609-9e88-4d4a-ac0e-f41469ff247a","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def countVotesSecured(maybeVotes: Option[List[Int]]): Int =\n  maybeVotes.fold(0)(_.sum)"}
{"id":"2e0e81c8-c324-44b3-89db-da6f40ee1502","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Election(name: String, ballots: List[Ballot])\ndef getFirstVoter(election: Election): Option[String] =\n  election.ballots.headOption.map(_.voterId)"}
{"id":"061e2a29-0ba8-45cf-8ee4-6e24eeb35f4a","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def nullSafeCandidateLookup(candidateId: String): Option[String] =\n  Option(candidateDbFind(candidateId))\n\ndef candidateDbFind(candidateId: String): String =\n  if candidateId == \"absent\" then null else candidateId.toUpperCase"}
{"id":"1d56ed04-9916-47a9-ad3e-284b46bf3422","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def hasSubmittedVote(voter: Voter): Boolean =\n  voter.submittedBallot != null\n\ncase class Voter(name: String, submittedBallot: String)"}
{"id":"53699691-fa07-4f54-ae6d-b8a5d92d2610","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def findLastVote(ballots: List[Ballot]): Option[Ballot] =\n  ballots.lastOption.filter(_ != null)"}
{"id":"1aaba5ec-bc01-492e-a73f-3735804f53d9","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def getElectionConfig(electionId: String): ElectionConfig =\n  null\n\ncase class ElectionConfig(rules: String)"}
{"id":"b2f06f7c-fcfc-47d7-83d6-aeac37f05a47","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def markBallotInvalid(ballot: Ballot): Ballot =\n  if (ballot == null) null else Ballot(ballot.voterId, \"INVALID\")\n\ncase class Ballot(voterId: String, candidate: String)"}
{"id":"f83db81a-3bd3-49c0-b7fe-9518ec22bd7b","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def countAbsentBallots(ballots: List[Ballot]): Int =\n  ballots.count(_ == null)\n\ncase class Ballot(voterId: String, candidate: String)"}
{"id":"588ae548-2ae0-48a9-968e-25546aea666b","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Ballot(candidate: String)\ndef ballotFromLegacySystem(input: String): Ballot = new Ballot(input)\ndef tryParseBallot(input: String): Option[Ballot] = Option(ballotFromLegacySystem(input))"}
{"id":"ccbc2e23-8713-4258-963c-b6baa4d0f343","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def tallyVotes(votes: List[Option[String]]): Map[String, Int] = votes.flatten.groupBy(identity).view.mapValues(_.size).toMap"}
{"id":"ba536fe8-f8c2-484e-924f-b9473e9a8da6","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getCandidateName(vote: Option[String]): String = vote.getOrElse(\"Invalid Candidate\")"}
{"id":"b1a317b7-a884-4436-9674-7451bd2745a1","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def safeFindVoter(voters: List[String], voterId: String): Option[String] = voters.find(_ == voterId)"}
{"id":"1ae059e6-0618-4f9d-ad9c-776201df900c","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def fetchElectionResultFromJava(id: Int): String = null\ndef safeFetchElectionResult(id: Int): Option[String] = Option(fetchElectionResultFromJava(id))"}
{"id":"97b7a0eb-7112-4c06-8312-6e33545ccd9f","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Tally(cand: String, count: Int)\ndef incrementTally(optTally: Option[Tally]): Tally = optTally.map(t => t.copy(count = t.count + 1)).getOrElse(Tally(\"Unknown\",1))"}
{"id":"31976075-a2bf-4170-aad9-24b5b14ac10c","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def printWinner(candidate: Option[String]): Unit = candidate.foreach(println)\n"}
{"id":"ed3659d0-7d8c-40c2-8a6f-63f9d7809d74","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def validateBallot(ballot: Option[BallotData]): Boolean = ballot.exists(_.isValid)"}
{"id":"e0f7ebba-9b56-49ae-b55d-5f3c7361397e","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def convertNullVote(vote: String): Option[String] = Option(vote).filter(_.nonEmpty)"}
{"id":"86c1c1b4-ded0-4825-a4be-d0c446d99987","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def countNonSpoiledVotes(ballots: List[Option[Ballot]]): Int = ballots.flatten.count(_.status == \"counted\")"}
{"id":"351e939f-5b65-4a11-ac06-8acc5c83f6f9","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getVoteOrDefault(vote: Option[String]): String = vote.fold(\"Abstain\")(identity)"}
{"id":"e257d47b-11a4-4334-9937-6f1948925572","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def findTotalVotes(votes: List[Option[Int]]): Int = votes.flatten.sum"}
{"id":"ca650f68-fd9f-4066-9a88-c79cc7b00bb7","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def candidateDisplayName(optName: Option[String]): String = optName.map(_.toUpperCase).getOrElse(\"UNSPECIFIED\")"}
{"id":"1e140c88-d905-4526-b5cd-9fcae3d3a8db","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def voteCountAboveThreshold(count: Option[Int], threshold: Int): Boolean = count.exists(_ > threshold)"}
{"id":"5e7a10bb-63d0-4afa-a690-70305e118e89","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getEligibleVoters(rawList: List[String]): List[String] = rawList.filter(_.nonEmpty).map(_.trim)"}
{"id":"ccc766dd-6f9a-494e-b637-3087e0f9b1ab","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class AuditLog(traceId: String)\ndef safeExtractLogId(log: Option[AuditLog]): String = log.map(_.traceId).getOrElse(\"no-log\")"}
{"id":"92c9b35e-94dd-40a2-8f90-e12c07c4bd60","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def safeVoteLookup(voterDatabase: Map[String, String], id: String): Option[String] = voterDatabase.get(id)"}
{"id":"c42a3e83-307b-4662-a161-85e031e63c09","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def firstValidCandidate(names: List[Option[String]]): Option[String] = names.flatten.headOption"}
{"id":"18d8ba74-7e5b-48e6-8155-9a21f0ad24d7","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def filterValidBallots(ballots: List[Option[BallotData]]): List[BallotData] = ballots.flatten.filter(_.isValid)"}
{"id":"16e6e184-e7a9-4e69-b2fc-923b2698868e","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getResultValue(res: Option[Int]): Int = res.getOrElse(-1)"}
{"id":"7d1999a1-b820-46a2-9188-441edd7fd5d2","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class LegacyBallot {\n  var candidate: String = null\n}\ndef unsafeGetCandidate(ballot: LegacyBallot): String = {\n  if (ballot.candidate != null) ballot.candidate else null\n}"}
{"id":"d2a74b45-4799-45e6-811d-83838bb0a548","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def findTallyResult(results: Array[String], name: String): String = {\n  for (res <- results) {\n    if (res != null && res == name) return res\n  }\n  null\n}"}
{"id":"447b8894-35b2-4565-92ce-7e7f6732f78e","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def retrieveVoterRegion(record: java.util.HashMap[String, String], voterId: String): String = {\n  val region = record.get(voterId)\n  if (region != null) region else null\n}"}
{"id":"08a7fd1b-a098-45d1-88ee-a5a013a8c77b","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def castBallotFromID(id: String): String = {\n  if (id == null) null else \"Accepted\"\n}"}
{"id":"537f70f8-e79f-4d32-a875-2fb087d64273","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def getFirstNonNullVote(results: List[String]): String = {\n  for (vote <- results) {\n    if (vote != null) return vote\n  }\n  null\n}"}
{"id":"0fd12d90-e033-496d-b80a-d5ef8bb601dd","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def validateTally(countStr: String): Boolean = {\n  if (countStr == null) false else true\n}"}
{"id":"d26d2501-0f8b-4be5-973a-0c3e85ec79fd","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def javaLegacyWinner(electionId: Int): String = {\n  if (electionId > 0) \"CandidateY\" else null\n}"}
{"id":"0cfc2df0-0afd-484d-8820-46312f496e77","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def fallbackToNullTally(tallies: List[Int]): Integer = {\n  if (tallies.isEmpty) null else Integer.valueOf(tallies.head)\n}"}
{"id":"54168181-aed1-4385-9ad1-cc0b44f11d92","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def nullIfInvalidResult(result: String): String = {\n  if (result.contains(\"invalid\")) null else result\n}"}
{"id":"dd74950d-561a-4c4f-baa0-6c98678e7f4f","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def checkNullBallotName(name: String): Boolean = {\n  if (name == null) false else true\n}"}
{"id":"6744e9c4-96fb-463a-914c-e52374fd272b","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def assignNullOnEmpty(candidate: String): String = {\n  if (candidate == \"\") null else candidate\n}"}
{"id":"1eed4334-5b09-4644-87ff-3575e7ba3353","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def oldSystemVoteCheck(votes: java.util.List[String]): String = {\n  var i = 0\n  while (i < votes.size()) {\n    val v = votes.get(i)\n    if (v != null) return v\n    i += 1\n  }\n  null\n}"}
{"id":"74076c5d-e300-4644-ac2f-fbbdf4962104","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def nullResultForMissingCandidate(candidates: List[String], search: String): String = {\n  if (candidates.contains(search)) search else null\n}"}
{"id":"86723eaf-02c8-476f-bf47-28fa8956f775","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class TallyCounter {\n  var total: Integer = null\n  def setTotal(newTotal: Integer): Unit = {\n    total = newTotal\n  }\n}"}
{"id":"dc271baa-5cfa-4cd1-bf94-6b3f6e4494f6","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def validateRegionName(region: String): Boolean = {\n  if (region != null && region.nonEmpty) true else false\n}"}
{"id":"181ba736-af1c-45d2-9dba-cbde8c31b707","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def javaInteropResult(): String = null"}
{"id":"fcba86ac-1e07-4a2e-9d39-2cdde2346824","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def nonIdiomaticListResult(results: Array[String]): String = {\n  if (results == null || results.isEmpty) null else results(0)\n}"}
{"id":"7eaa438d-a22b-4a3a-a367-e86f724b75bf","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def nullVoteFallback(vote: String): String = {\n  if (vote != null) vote else null\n}"}
{"id":"075dd457-30db-468a-84ec-286c01ffd0ee","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def setNullVoteIfAbstain(voteText: String): String = {\n  if (voteText == \"Abstain\") null else voteText\n}"}
{"id":"2711ff29-1e5e-4bc9-8bea-c858cb1aa1cb","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class AuthorProfile(name: String, institution: String)\ndef findAuthorByEmail(email: String, authors: List[AuthorProfile]): Option[AuthorProfile] =\n  authors.find(_.name.contains(email))"}
{"id":"fd1fb4da-4a45-48f8-b1ad-7dfc1ed135c9","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def legacyGetBookTitle(bookId: String): String =\n  if(bookId == \"B123\") \"Effective Scala\" else null\nval bookTitle = legacyGetBookTitle(\"B456\")\nif(bookTitle != null)\n  println(bookTitle)\nelse\n  println(\"Book not found.\")"}
{"id":"d1318b9b-6e87-4ad3-8c0e-570b40efa4ac","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getPublicationYearFromSource(source: AnyRef): Option[Int] =\n  Option(source).map(_.hashCode % 2023)\nval yearOpt = getPublicationYearFromSource(null)\nprintln(yearOpt.getOrElse(-1))"}
{"id":"4ebcf758-16dc-4bea-9ab2-edd357db69ce","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class CatalogEntry(val title: String, val author: String)\ndef getEntryTitle(entry: CatalogEntry): String =\n  if(entry != null) entry.title else \"Unknown Title\""}
{"id":"b30362fe-d9c5-4985-b673-63b1defa5add","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def wrapLegacyAuthorName(name: String): Option[String] =\n  Option(name).filter(_.nonEmpty)\nval maybeAuthor = wrapLegacyAuthorName(null)\nprintln(maybeAuthor.getOrElse(\"No Author\"))"}
{"id":"e44dabea-08a5-4611-9807-370b9ad8d269","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class Book(val title: String)\ndef displayBookIfExists(book: Book): Unit =\n  if(book != null)\n    println(s\"Book: ${book.title}\")\n  else\n    println(\"No book information available.\")"}
{"id":"a1f39ede-49b5-4d81-bc1f-ab224e525a33","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def findFirstAvailableCopy(copies: List[String]): Option[String] =\n  copies.find(_ != null)\ndef printAvailableCopy(copies: List[String]): Unit =\n  findFirstAvailableCopy(copies).foreach(println)"}
{"id":"bf9b0e5b-243b-410d-9149-5dbf8d75262e","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object DigitalCatalogUtils:\n  def javaStyleLookupSubject(subject: String): String =\n    if(subject == \"Scala\") \"Programming\" else null\nval subjectCategory = DigitalCatalogUtils.javaStyleLookupSubject(\"Literature\")\nif(subjectCategory == null)\n  println(\"Subject category unavailable.\")"}
{"id":"4c5b2e6e-2eeb-48bf-8815-d73a79fa24d6","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class LibraryResource(isbn: String, location: Option[String])\ndef getResourceLocation(resource: LibraryResource): String =\n  resource.location.getOrElse(\"Location unknown\")"}
{"id":"89e532df-9843-42a9-8e80-3160236c6590","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class Patron(val id: String, val preferredLanguage: String)\ndef printPatronLanguage(patron: Patron): Unit =\n  if(patron != null)\n    println(patron.preferredLanguage)\n  else\n    println(\"Patron not found.\")"}
{"id":"baf9e9a5-ac9f-47a6-a79f-96621a243b16","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getCoverImageUrl(bookId: String): Option[String] =\n  if(bookId == \"ID100\") Some(\"http://example.com/id100.jpg\") else None\ndef displayCoverImage(bookId: String): Unit =\n  getCoverImageUrl(bookId).foreach(println)"}
{"id":"599e0d34-5216-4012-af94-a31531b11ef5","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getLibrarySectionFromJavaStyle(id: Int): String =\n  if(id == 1) \"Fiction\" else null\nval section = getLibrarySectionFromJavaStyle(2)\nif(section != null) println(section)"}
{"id":"a8eb9570-af13-4fe4-b4da-f2ecab8d1fe6","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class DigitalArchive(pdfUrl: Option[String])\ndef fetchPdfUrl(archive: DigitalArchive): String =\n  archive.pdfUrl.getOrElse(\"PDF not found\")"}
{"id":"bc4c3ddd-5def-4e63-ad8b-399c3ff2e515","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class Publisher(val code: String, val name: String)\ndef getPublisherName(publisher: Publisher): String =\n  if(publisher != null && publisher.name != null)\n    publisher.name\n  else\n    \"Unknown Publisher\""}
{"id":"9ce6e99d-57d8-4b3d-aef0-0d43a9f5f58b","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def safeGetIsbn(maybeIsbn: String): Option[String] =\n  Option(maybeIsbn).filter(_.matches(\"[0-9Xx-]+\"))\nval isbnOption = safeGetIsbn(null)"}
{"id":"060c3953-7e42-495c-aa60-220736392ee9","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class Journal(val title: String, val issn: String)\ndef getJournalIssn(journal: Journal): String =\n  if(journal == null || journal.issn == null) \"Missing ISSN\" else journal.issn"}
{"id":"398ae73a-3958-450c-905f-597ca20fe1a7","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def findFullTextUrl(record: Map[String, String]): Option[String] =\n  record.get(\"fullTextUrl\").filter(_.startsWith(\"http\"))\ndef openFullText(record: Map[String, String]): String =\n  findFullTextUrl(record).getOrElse(\"URL unavailable\")"}
{"id":"beb0d8d4-e678-4410-8a0e-279ad36d1798","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def findUserByLibraryCard(id: String): String =\n  if(id == \"L12\") \"Alice Reader\" else null\nval userName = findUserByLibraryCard(\"none\")\nif(userName == null) println(\"User not found\")"}
{"id":"2b86bd3d-1f80-42ca-9284-de2ae13e020d","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SearchResult(title: String, snippet: Option[String])\ndef previewSearchResult(result: SearchResult): String =\n  result.snippet.getOrElse(\"No snippet available\")"}
{"id":"9c40cc37-8096-47e9-86fc-50745b6dc32f","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getDatabaseConnection(cfg: String): String =\n  if(cfg == \"prod\") \"Connected\" else null\nval dbStatus = getDatabaseConnection(\"test\")\nif(dbStatus == null)\n  println(\"Connection failed.\")\nelse\n  println(dbStatus)"}
{"id":"5cbe3339-f4a6-4bb8-950c-e7f27628b584","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class CatalogEntry(title: String, author: String, isbn: String)\n\ndef findEntryByIsbn(entries: List[CatalogEntry], isbn: String): Option[CatalogEntry] =\n  entries.find(_.isbn == isbn)\n\ndef getEntryTitleOrDefault(entries: List[CatalogEntry], isbn: String): String =\n  findEntryByIsbn(entries, isbn).map(_.title).getOrElse(\"Title Not Found\")"}
{"id":"48e916f6-9622-49f7-b2ff-dee8bd0b3115","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getAuthorMiddleName(authorRecord: java.util.Map[String, String]): String =\n  if (authorRecord == null) null\n  else\n    val middleName = authorRecord.get(\"middleName\")\n    if (middleName == null) null else middleName"}
{"id":"9321fc46-2dcd-4fdb-bbcc-2dd367ca81f5","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def normalizeSearchTerm(term: String): Option[String] =\n  Option(term).map(_.trim).filter(_.nonEmpty)"}
{"id":"907e90b3-234e-4711-9736-15753bd41c67","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"object LibraryUtils {\n  def safeWrapNullString(source: String): Option[String] = Option(source)\n}\n\nval publisherOption = LibraryUtils.safeWrapNullString(possiblyNullPublisher)\nval publisherDisplay = publisherOption.getOrElse(\"Unknown Publisher\")"}
{"id":"4471f534-fbf0-4e3f-8457-bebbb123368d","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class CatalogSearcher {\n  def searchTitleDeprecated(keyword: String): java.util.List[String] =\n    if (keyword == null) null\n    else new java.util.ArrayList[String]()\n}\n\nval results = (new CatalogSearcher).searchTitleDeprecated(null)\nif (results == null) println(\"No results returned\")"}
{"id":"9c14fab0-e17c-44e1-b622-f905c14bc65b","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getFirstSubjectFromEntry(entry: DigitalBookRecord): Option[String] =\n  Option(entry.subjects).flatMap(_.headOption)"}
{"id":"6ff1b2cb-26dc-4e2d-8971-344e17525a7b","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getBorrowerEmail(borrowerRecord: Map[String, String]): String =\n  val email = borrowerRecord.getOrElse(\"email\", null)\n  if (email == null) \"No Email On File\" else email"}
{"id":"7545da32-3229-4e8b-abba-f6cf14c16743","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class LibraryMember(id: String, name: String, preferredLanguage: Option[String])\n\ndef getDisplayLanguage(member: LibraryMember): String =\n  member.preferredLanguage.getOrElse(\"English\")"}
{"id":"80e5e60a-7378-46cf-9f91-f8e5288590f5","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def retrieveSummaryFromLegacyApi(catalogId: String): String =\n  val summary = LegacyApi.getSummaryById(catalogId)\n  if (summary == null) \"No summary available\"\n  else summary"}
{"id":"52032c3a-47cb-4ae0-b445-e023c22d7007","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class EbookFile(id: String, filename: String)\n\ndef safeGetFilename(ebook: EbookFile): Option[String] =\n  Option(ebook).map(_.filename)"}
{"id":"5f1687a5-d8a0-424a-bae6-e557ce661b2e","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def findOldestEdition(editions: List[LibraryBookEdition]): Option[LibraryBookEdition] =\n  editions.sortBy(_.publicationYear).headOption"}
{"id":"6cb438dd-3366-45be-967e-419c0a7263ee","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getDigitalAsset(assetId: String): DigitalAsset =\n  if (assetId == null) null\n  else findAssetById(assetId)"}
{"id":"f9759b9c-487a-4de7-880b-4bcb0e290d9a","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getOptionalPublisherName(metadata: CatalogMetadata): Option[String] =\n  Option(metadata).flatMap(m => Option(m.publisherName))"}
{"id":"6d4654a6-3260-4ff9-a813-50c456529341","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def checkEntryExists(entry: LibraryCatalogEntry): Boolean =\n  entry != null && entry.title != null"}
{"id":"9e8099e9-e2a7-4ed6-b703-fb288c888521","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"val maybeCatalogTag: Option[String] = Option(retrieveTagFromLegacySystem(catalogId))\nif maybeCatalogTag.exists(_.nonEmpty) then println(\"Tag found.\")\nelse println(\"No tag present.\")"}
{"id":"9e62ea58-b507-40e4-9b3d-e6dfcdcd01bd","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class BookMetadata(val description: String)\ndef getDescriptionUppercase(meta: BookMetadata): String =\n  if (meta == null) null\n  else\n    val desc = meta.description\n    if (desc != null) desc.toUpperCase else null"}
{"id":"f38b5b6d-87dc-4a3d-8f96-3c3ce3ff2b1a","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def findBookByTitle(title: String, catalog: List[CatalogBook]): Option[CatalogBook] =\n  catalog.find(_.title.equalsIgnoreCase(title))"}
{"id":"1bac399d-74ee-4344-80c4-2cca692442c1","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getShelfLocation(locationCode: String): String =\n  if (locationCode != null) locationCode else \"Unknown Shelf\""}
{"id":"b1e662d8-f99f-4aac-bdcd-aad424e093fa","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getAvailableMediaTypes(record: MediaCatalogRecord): Option[List[String]] =\n  Option(record.mediaTypes).filter(_.nonEmpty)"}
{"id":"36a2e3cc-f939-4dba-a0ce-d57d30e26dbc","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getPreferredFormat(reader: LibraryReader): String =\n  if (reader == null) null\n  else if (reader.preferredFormat != null) reader.preferredFormat else \"PDF\""}
{"id":"38a8cc13-8c41-4141-8ba0-34a0a654d56b","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketQRValidator {\n  def extractQRContent(qrCode: String | Null): String = {\n    if (qrCode != null) qrCode else \"\"\n  }\n}\n"}
{"id":"6667368a-1e18-42d9-9cdf-336498b6bb25","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class EventTicketScanner {\n  def scanTicket(qrPayload: String | Null): Boolean = {\n    if (qrPayload == null) false else true\n  }\n}\n"}
{"id":"e1b78181-eca2-431a-8718-393344e9a257","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketRedemption {\n  def findTicketByQR(qrValue: String): Ticket | Null = {\n    if (qrValue == \"\") null else new Ticket(qrValue, false)\n  }\n}\nclass Ticket(val code: String, var redeemed: Boolean)\n"}
{"id":"674ff98e-5ed6-4ed5-8edc-7000d80bac1f","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRContentParser {\n  def parseAttendeeId(qrString: String): String | Null = {\n    if (qrString == null) null else qrString.split(\"-\")(0)\n  }\n}\n"}
{"id":"4ee9d542-5c6f-4681-a524-09376c981a22","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object JsonQRDecoder {\n  def decodeQR(jsonPayload: String): String | Null = {\n    if (jsonPayload != null && jsonPayload.length > 10) jsonPayload else null\n  }\n}\n"}
{"id":"6121e045-0c35-41f1-aac9-6231bb2b70d0","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketValidator {\n  def validateTicketCode(ticketCode: String | Null): Boolean = {\n    if (ticketCode == null) false else ticketCode.startsWith(\"EVT-\")\n  }\n}\n"}
{"id":"1d0a19a0-f513-474d-8aad-76f25536a60b","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object JavaInteropTicketService {\n  def javaFindTicket(qr: String): Ticket | Null = {\n    if (qr == \"ABC123\") new Ticket(qr, false) else null\n  }\n}\nclass Ticket(val code: String, var redeemed: Boolean)\n"}
{"id":"c7a95a8d-7cbb-4d18-a366-14e121293963","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QREventTracker {\n  def ticketHolderName(qr: String | Null): String = {\n    if (qr == null) \"Unknown\" else \"Attendee: \" + qr.reverse.take(5)\n  }\n}\n"}
{"id":"b732c529-d3dc-4c03-a83d-66aedbccf30a","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object AttendeeIDResolver {\n  def resolveIdFromQR(qrData: String | Null): Int = {\n    if (qrData == null) -1 else qrData.hashCode\n  }\n}\n"}
{"id":"8be2ed03-1f74-4bdf-8aff-10d69321e8e4","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRCheckInHandler {\n  def checkIn(qrPayload: String): Boolean = {\n    if (qrPayload == null || qrPayload == \"\") false else true\n  }\n}\n"}
{"id":"382c61f3-9782-4443-9372-d5b17f424fa6","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QRPayload(content: String)\n\nobject OptionalTicketValidator {\n  def validateQRContent(qrContent: String): Option[QRPayload] = {\n    Option(qrContent).filter(_.nonEmpty).map(QRPayload(_))\n  }\n}\n"}
{"id":"593d986d-e5a1-4228-bda3-79aa48071d32","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object AttendeeQRExtractor {\n  def extractAttendeeInfo(qrData: String | Null): Option[String] = {\n    Option(qrData).flatMap(s => if s.contains(\"ID:\") then Some(s) else None)\n  }\n}\n"}
{"id":"272f2a23-f91d-481b-ad2f-5091804dbefb","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class TicketInfo(eventId: String, ticketId: String)\n\nobject TicketInfoParser {\n  def parseTicketInfo(qrString: String): Option[TicketInfo] = {\n    Option(qrString)\n      .map(_.split(\"-\"))\n      .collect { case Array(eid, tid) => TicketInfo(eid, tid) }\n  }\n}\n"}
{"id":"fae87c02-e5d3-4aa2-af3c-ce1dcd38c2bb","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object QRRedemptionChecker {\n  def isTicketRedeemed(ticket: Option[Ticket]): Boolean = {\n    ticket.exists(_.redeemed)\n  }\n}\ncase class Ticket(code: String, redeemed: Boolean)\n"}
{"id":"d045783f-c798-4027-a085-762675daa009","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object SecureTicketFinder {\n  def findSecureTicket(qrPayload: String | Null): Option[Ticket] = {\n    Option(qrPayload).filter(_.startsWith(\"SECURE-\")).map(Ticket(_, false))\n  }\n}\ncase class Ticket(code: String, redeemed: Boolean)\n"}
{"id":"b2060471-a1f7-4854-8756-b9413301af98","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object QRPayloadHandler {\n  def uppercaseIfPresent(qr: Option[String]): Option[String] = {\n    qr.map(_.toUpperCase)\n  }\n}\n"}
{"id":"f5df67f5-5eee-4b1c-887c-b090ac0b0b15","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object QRScannerService {\n  def getTicketCode(qr: String | Null): Option[String] = {\n    Option(qr).flatMap(s => if s.length > 5 then Some(s) else None)\n  }\n}\n"}
{"id":"64effcf4-5858-4f0a-9eeb-86e8f13315d9","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object CheckInConfirmation {\n  def confirmCheckIn(ticket: Option[Ticket]): String = {\n    ticket.fold(\"Invalid Ticket\")(_ => \"Check-in Successful\")\n  }\n}\ncase class Ticket(code: String, redeemed: Boolean)\n"}
{"id":"cbe4cc96-93fa-4267-9e2c-f17bd78f9c09","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object EventIDExtractor {\n  def extractEventId(qr: String | Null): Option[String] = {\n    Option(qr).map(_.takeWhile(_ != '-'))\n  }\n}\n"}
{"id":"e307df01-61d8-45a0-b3cf-274d09f4f3da","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object TicketCodeVerifier {\n  def verifyCode(qrCode: Option[String]): Boolean = {\n    qrCode.exists(_.startsWith(\"EVT\"))\n  }\n}\n"}
{"id":"f1a6115f-9e60-4318-9b72-669c63356e05","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class Ticket(id: String, qrData: String)\ndef validateQRCode(qrContent: String): Option[Ticket] =\n  val ticketId = parseTicketIdFromQR(qrContent)\n  ticketId.map(id => Ticket(id, qrContent))\ndef parseTicketIdFromQR(qrContent: String): Option[String] =\n  if qrContent.startsWith(\"EVT-\") then Some(qrContent.stripPrefix(\"EVT-\")) else None"}
{"id":"e40e1be8-83aa-4be7-89f5-8fb69c2b4689","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object QRCodeVerifier:\n  def decodeTicketOrNone(ticketQR: String): Option[String] =\n    Option(qrDecode(ticketQR))\n  def qrDecode(data: String): String =\n    if data.contains(\"VALID\") then data else null"}
{"id":"a7ac33ae-80bc-4ecc-b01c-54c83126e988","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def validateTicketHolderName(dataFromQR: String): Option[String] =\n  Option(dataFromQR)\n    .filter(_.nonEmpty)\n    .map(_.toUpperCase)\n    .filter(_.forall(_.isLetter))"}
{"id":"896d7e2b-5224-4cbb-945d-25fe0f8f3686","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def extractEventId(qrPayload: String): Option[Int] =\n  Option(qrPayload)\n    .filter(_.startsWith(\"event:\"))\n    .map(_.drop(6))\n    .flatMap(payload => payload.toIntOption)"}
{"id":"761befcf-9316-412e-bd6b-0e246038c755","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class ScannedTicket(eventId: Int, seat: String)\ndef parseScannedTicket(qr: String): Option[ScannedTicket] =\n  val split = qr.split(\"-\")\n  for\n    idStr <- split.lift(0)\n    seat <- split.lift(1)\n    id <- idStr.toIntOption\n  yield ScannedTicket(id, seat)"}
{"id":"6cf546ea-6da5-4e60-b16a-c235ca44fe6d","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object QRTicketUtils:\n  def safeGetTicketStatus(status: String | Null): Option[String] =\n    Option(status).filter(_ != \"\")"}
{"id":"ec16b080-cdcf-47c9-bb1b-839a3f67aaff","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def validateTicketExpiration(qrScanTime: Option[Long], expirationEpoch: Long): Boolean =\n  qrScanTime.exists(_ <= expirationEpoch)"}
{"id":"72291c78-c291-4a28-bd6e-476ae392c6ff","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def participantFromQR(qrString: String): Option[String] =\n  Option(qrString)\n    .map(_.trim)\n    .filter(_.nonEmpty)\n    .filter(_.contains(\"-\"))\n    .map(_.split(\"-\")(1))"}
{"id":"a06a9679-8fbc-469c-8153-cd1280bd6725","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class EventTicket(id: String, isActive: Boolean)\ndef checkTicketStatus(ticket: Option[EventTicket]): Boolean =\n  ticket.exists(_.isActive)"}
{"id":"9360633e-75e1-415c-825b-ab7456395b8e","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def scanAndValidateSeat(qr: String): Option[String] =\n  Option(qr)\n    .flatMap { data =>\n      val seat = data.split(\":\").lift(1)\n      seat\n    }\n    .filter(_.matches(\"[A-Z]\\d+\"))"}
{"id":"a322da28-3355-4acb-b8f0-0b9f6db0ca39","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def parseTicketIdFromJava(qrCode: String): String =\n  if (qrCode == null) {\n    null\n  } else {\n    if (qrCode.startsWith(\"TKT-\")) qrCode else null\n  }"}
{"id":"4b350641-256e-48f4-944a-75ae7739e2aa","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketValidator {\n  def isQRCodeValid(qr: String): Boolean = {\n    if (qr != null && qr.contains(\"VALID\")) {\n      true\n    } else {\n      false\n    }\n  }\n}"}
{"id":"1829ffe6-6fc2-4ad4-9c6c-3ec906203e8a","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def getEventNameFromQrScan(qrResult: String): String = {\n  if (qrResult != null && qrResult.startsWith(\"EVENT::\")) {\n    qrResult.substring(7)\n  } else {\n    null\n  }\n}"}
{"id":"0fc1b999-8fdc-4a27-870b-db5115fd855b","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketRetriever {\n  def fetchTicketFromDatabase(ticketId: String): String = {\n    if (ticketId == null) null\n    else \"TicketRecord\"\n  }\n}"}
{"id":"87c0776a-43f4-44c3-adf0-2555e8801c66","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def extractHolderName(qrValue: String): String = {\n  if (qrValue != null && qrValue.contains(\"HOLDER:\")) {\n    qrValue.split(\":\")(1)\n  } else {\n    null\n  }\n}"}
{"id":"a0a06d77-bc4d-4ead-a6d0-589c8edfd969","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QREventScanner {\n  def getTicketExpiration(epoch: java.lang.Long): java.lang.Long = {\n    if (epoch == null) 0L else epoch\n  }\n}"}
{"id":"b93880e8-1a02-4009-b9e1-13668c9d158c","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def checkIfSeatAssigned(qrInput: String): Boolean = {\n  if (qrInput != null && qrInput.nonEmpty) {\n    true\n  } else {\n    false\n  }\n}"}
{"id":"f4093134-6fd2-4e7a-976e-969f3102f200","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def parseSectionFromQR(qrString: String): String = {\n  if (qrString == null) null else qrString.split(\"-\")(0)\n}"}
{"id":"ea7ee9e6-2493-444a-9c85-23e88e72871d","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object IncompleteTicket {\n  def markAsInvalid(ticketQR: String): String = {\n    if (ticketQR == null) \"INVALID\" else ticketQR\n  }\n}"}
{"id":"84219926-8243-4c96-9545-7c2b125c1039","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def legacyJavaDecode(qrData: String): String = {\n  if (qrData == null) {\n    null\n  } else {\n    \"Decoded-\" + qrData\n  }\n}"}
{"id":"e748ed40-3197-412d-93d6-461cd0d7666a","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def optimalDronePath(start: Location, end: Location): Option[Path] =\n  val cachedPath = retrieveCachedPath(start, end)\n  Option(cachedPath)\n"}
{"id":"e7d738cc-6272-4f5c-8642-2f806f209da0","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def calculateDroneBatteryUsage(route: Path): Option[Double] =\n  Option(route).map(_.segments.foldLeft(0.0)((acc, segment) => acc + segment.distance * segment.energyRate))\n"}
{"id":"7169af10-600b-40ec-ad78-e168dd6f0663","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DeliveryRequest(destination: Location, weight: Double)\ndef validatedRequest(request: DeliveryRequest): Option[DeliveryRequest] =\n  Option(request).filter(_.weight <= 5.0)\n"}
{"id":"c161088f-c95d-4fdb-aff6-e4fd3cf85bcc","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def loadWaypoint(name: String): Option[Waypoint] =\n  Option(javaWaypointLookup(name))\n"}
{"id":"b85055aa-e355-4a9a-b8f7-2728e6bd3ff6","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def droneIdFromTracking(trackingCode: String): Option[String] =\n  Option(possiblyNullDroneId(trackingCode))\n"}
{"id":"10d3a065-7c01-42b3-b710-76fd148a83d8","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def nextStop(path: Path): Option[Location] =\n  Option(path.waypoints.headOption).flatten\n"}
{"id":"c63f66ae-9038-43a6-9214-aeabd4e2a79d","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def fallbackRoute(primary: Option[Path], backup: Option[Path]): Path =\n  primary.orElse(backup).getOrElse(Path(List.empty, 0.0))\n"}
{"id":"611e22ea-e77f-4f14-ab9f-c18850e89de4","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def extractAvailableDrone(maybeDrone: Option[Drone]): String =\n  maybeDrone.fold(\"No Drone Available\")(_.identifier)\n"}
{"id":"87acf17e-b8a6-4fb7-bda6-534db7360a32","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def chooseExpressRoute(candidate: Option[Path]): Option[Path] =\n  candidate.filter(_.totalDistance < 20)\n"}
{"id":"7b90aa1b-2d40-4928-bf22-ff3abea5f9d4","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def deliveryFee(maybePath: Option[Path]): Double =\n  maybePath.map(_.totalDistance * 0.35).getOrElse(7.0)\n"}
{"id":"5f883940-f2f4-4fdb-90e2-06a003b28696","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getLandingZoneById(id: String): LandingZone =\n  val result = externalLandingZoneById(id)\n  if (result == null) null else result\n"}
{"id":"4d84091c-3ea5-4ca6-99a7-62440f3ea397","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def selectSpareDrone(drones: Array[Drone]): Drone =\n  var i = 0\n  while (i < drones.length) {\n    if (drones(i) != null) return drones(i)\n    i += 1\n  }\n  null\n"}
{"id":"bfc71a07-bc89-436c-ad64-1c14f620685a","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def unsafePathDistance(path: Path): Double =\n  if (path == null) 0.0 else path.totalDistance\n"}
{"id":"a03df3e6-f8e0-423a-b282-70d5d8b2a391","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def assignFallbackPilot(primary: Pilot, backup: Pilot): Pilot =\n  if (primary != null) primary else backup\n"}
{"id":"cc8fef7e-f180-4471-b7ae-64c3addac198","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def preferredPickupZone(zones: List[LandingZone]): LandingZone =\n  if (zones == null) null else zones.head\n"}
{"id":"cc18d2d0-bedf-439b-b813-b85d33a3c894","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def findRouteIfAny(start: Location, end: Location): Path =\n  val p = fetchPossiblePath(start, end)\n  if (p != null) p else null\n"}
{"id":"c3aa23d4-5edf-4682-bf0a-9394f08dfbbf","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getChargingStation(name: String): ChargingStation =\n  val s = legacyChargingStationLookup(name)\n  if (s == null) null else s\n"}
{"id":"07e26f5a-4ed2-4958-ba17-5f98f72c72b4","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def safeGetDroneBySerialNumber(serial: String): Drone =\n  val drone = oldSystemDroneLookup(serial)\n  if (drone != null) drone else null\n"}
{"id":"21563af7-10db-4633-a842-c7e48501d387","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getWaypointByName(name: String): Waypoint =\n  val w = possibleNullWaypoint(name)\n  if (w == null) null else w\n"}
{"id":"516a7883-7f5c-4911-a223-762c2df9c3e3","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def deprecatedGetPackageById(pid: String): Package =\n  val pkg = legacyPackageFetch(pid)\n  if (pkg != null) pkg else null\n"}
{"id":"7282cb71-d00e-4610-9245-deb2bc7978f7","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class Waypoint(latitude: Double, longitude: Double)\ndef nextDeliveryWaypoint(route: List[Waypoint]): Option[Waypoint] =\n  route.headOption"}
{"id":"51c938c9-14c8-44a2-af0e-0438fd03d62e","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def calculateBatteryReserve(batteryPercent: Int): Option[Int] =\n  Option(batteryPercent).filter(_ > 0)"}
{"id":"39e9342c-242d-420d-97a7-1e4e00dc54b4","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def optimalPathLength(dronePath: List[Int]): Option[Int] =\n  Option(dronePath).filter(_.nonEmpty).map(_.sum)"}
{"id":"83015011-4676-46c7-9a56-2441a3a16994","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def resolveDeliveryHub(hubName: String): Option[String] =\n  Option(hubName).filter(_.nonEmpty)"}
{"id":"0b7b672c-6322-4412-b6ef-5a39a89bc3a0","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def getChargingStation(stationId: String): Option[String] =\n  Option(stationId).filter(_.startsWith(\"CS-\"))"}
{"id":"20bcb14c-763f-4f17-a0ff-91cc6d489b2b","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DeliveryTask(destination: String, payloadKg: Double)\ndef getUrgentTask(tasks: List[DeliveryTask]): Option[DeliveryTask] =\n  tasks.find(_.payloadKg > 5.0)"}
{"id":"b169368a-ed7f-4eaa-83f7-db3ff08507a9","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def safeReachableWaypoint(possible: String): Option[String] =\n  Option(possible).flatMap(s => if s.nonEmpty then Some(s) else None)"}
{"id":"06b1add2-fb1b-4994-929e-ffab483db6b1","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def safeJavaDistance(distanceObj: AnyRef): Option[Double] =\n  Option(distanceObj).map(_.toString.toDoubleOption).flatten"}
{"id":"fc5e306e-0c3c-4c9d-bd5c-028cdb429397","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def backupDrone(droneId: String | Null): Option[String] =\n  Option(droneId)"}
{"id":"b01b95c3-4c69-42d5-bfbc-7a9d6ce4e008","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def deliveryWindow(time: String): Option[String] =\n  Some(time).filter(_.matches(\"\\\\d{2}:\\\\d{2}\"))"}
{"id":"4463fdc2-8c41-4a7c-ab6c-5ae990a16daf","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def assignPrimaryDrone(droneOpt: Option[String]): String =\n  droneOpt.getOrElse(\"No drone available\")"}
{"id":"f19d4502-2c9c-4f83-92d6-5068bd8565d4","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def checkWaypointAvailability(maybe: Option[Waypoint]): Boolean =\n  maybe.exists(w => w.latitude > 0 && w.longitude > 0)"}
{"id":"12d946b9-10c6-4689-96d5-84be0734a29e","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def droneReadyForLaunch(status: Option[String]): Boolean =\n  status.exists(_ == \"Ready\")"}
{"id":"9cbb81a2-2089-46ab-908a-c85c8e51da67","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def dronePayloadSafety(payload: Option[Double]): Boolean =\n  payload.forall(_ <= 2.5)"}
{"id":"d130ff5f-58b6-49e2-862f-9ffdccd2a423","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def selectAlternateRoute(route: Option[List[Waypoint]]): List[Waypoint] =\n  route.getOrElse(Nil)"}
{"id":"736cda89-6e32-4f1b-8faa-a6a8e0aecfc8","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def fallbackHub(hub: Option[String]): String =\n  hub.fold(\"No hub assigned\")(h => h)"}
{"id":"6455653d-05a0-4b6c-bd54-eb31853ea6be","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def parseHubFromJava(hubObj: AnyRef): Option[String] =\n  Option(hubObj).map(_.toString)"}
{"id":"0f72bfe4-e263-407f-b7a8-f38af1694a99","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"class FlightPath(val waypoints: List[Waypoint])\ndef getFinalWaypoint(path: FlightPath): Option[Waypoint] =\n  Option(path).flatMap(p => p.waypoints.lastOption)"}
{"id":"5d1c592e-6eda-472e-b6cf-6d97801a3eed","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def safeBatteryValue(javaBatteryLevel: Integer): Option[Int] =\n  Option(javaBatteryLevel).map(_.intValue)\n"}
{"id":"6e812b82-2ac0-4a7e-b209-0b6645b42fba","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getActiveMissionName(mission: String): String =\n  if (mission != null) mission else \"Unknown\"\n"}
{"id":"51e19768-db3b-431d-a0ce-ca4cd4cc7402","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def unsafeBatteryReserve(battery: java.lang.Integer): Int =\n  if (battery != null) battery.intValue else -1\n"}
{"id":"2d15917a-484a-48e7-8bc9-5f735c9f1376","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def closestWaypoint(waypoints: Array[AnyRef]): AnyRef =\n  if (waypoints != null && waypoints.nonEmpty) waypoints(0) else null\n"}
{"id":"a8480a22-1a84-4479-b3e7-72c4f7443791","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def legacyHubAssignment(hubId: String): String =\n  if (hubId == null) \"DEFAULT\" else hubId\n"}
{"id":"b2b89fb3-20af-45d2-8e35-dfc0433ecffe","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def javaOptionalChargingStation(stationObj: Object): String =\n  if (stationObj != null) stationObj.toString else null\n"}
{"id":"e7390040-0823-427a-ad62-5946bb70f4fc","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def traditionalHubSearch(hubs: Array[String]): String =\n  if (hubs != null && hubs.length > 0) hubs(0) else null\n"}
{"id":"f6bf980d-7135-45ff-a4a2-7ae81c2ae09e","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def droneIDSanityCheck(id: String): String =\n  if (id != null && id.startsWith(\"DRN\")) id else null\n"}
{"id":"fd91e0e8-8cc2-41c8-af47-7ec388a81b8c","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def fallbackToFirstPayloadWeight(weights: Array[Double]): Double =\n  if (weights != null && weights.length > 0) weights(0) else 0.0\n"}
{"id":"5f856686-eabd-41bc-8e03-1b0f43ae07fa","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def invalidDistance(distance: java.lang.Double): Double =\n  if (distance != null) distance.doubleValue else -1.0\n"}
{"id":"d4a22c1f-1ae1-4fdc-8030-6ee8d882dd8e","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class FaultyFlightLog(val entries: Array[String])\ndef getLastLogEntry(log: FaultyFlightLog): String =\n  if (log != null && log.entries != null && log.entries.nonEmpty) log.entries.last else null\n"}
{"id":"f11d2c79-fcb5-44d5-9b92-5a7282f1fadd","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def traditionalMissionList(missions: java.util.List[String]): String =\n  if (missions != null && !missions.isEmpty) missions.get(0) else null\n"}
{"id":"486771c6-2f59-4e0a-ab80-f7933dcef1a5","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def checkWaypointCompletion(waypoint: AnyRef): Boolean =\n  if (waypoint != null) true else false\n"}
{"id":"13d3882c-828e-4415-956a-459b5da66311","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def unsafePayloadValue(payload: java.lang.Double): Double =\n  if (payload != null) payload.doubleValue else 0.0\n"}
{"id":"11a7cbdd-13b3-450a-88b7-08afde7c01f4","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def errorProneDroneStatus(status: String): String =\n  if (status != null) status else null\n"}
{"id":"1d7c7dc7-976d-4b90-9b65-1240eda0e47d","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def legacyRouteCheck(route: Array[AnyRef]): AnyRef =\n  if (route != null && route.nonEmpty) route.last else null\n"}
{"id":"d204d61f-071a-466b-a9c9-686b7e4d7249","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimReference(referenceNumber: String)\ndef getClaimReference(optRef: Option[String]): Option[ClaimReference] =\n  optRef.map(ClaimReference(_))\n"}
{"id":"8fda8c20-cd46-4f5e-8443-3ae08f3dbfcd","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"case class PolicyHolder(id: String, name: String)\ndef findPolicyHolderById(identifier: String): PolicyHolder =\n  if (identifier == \"\") null else PolicyHolder(identifier, \"Taylor Evans\")\n"}
{"id":"0efe76e4-56d8-43ee-bb71-9989fe6f1ddb","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def safeAdjustorEmail(javaEmail: String): Option[String] =\n  Option(javaEmail).filter(_.contains(\"@\"))\n"}
{"id":"c7dd8b28-dfd9-4425-ae6b-31e08925d29f","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimSubmissionResult(val confirmationId: String)\ndef createClaimSubmissionResult(success: Boolean): ClaimSubmissionResult =\n  if (success) new ClaimSubmissionResult(\"CNF12345\") else null\n"}
{"id":"8c3ef581-3277-4631-9a73-d4c497c8de28","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class DamageReport(photoLink: String)\ndef maybeDamageReport(photo: String | Null): Option[DamageReport] =\n  Option(photo).map(DamageReport(_))\n"}
{"id":"c33e42d1-e05e-4605-bd49-f2b2b3c7ae1e","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getPolicyDocumentNumber(document: String): String =\n  if (document == null) \"NoDocument\" else document\n"}
{"id":"c23b6b40-9d80-4598-af41-feab46b9c7ba","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def adjustorFullName(maybeFirstName: Option[String], maybeLastName: Option[String]): Option[String] =\n  for\n    firstName <- maybeFirstName\n    lastName <- maybeLastName\n  yield s\"$firstName $lastName\"\n"}
{"id":"1c7fc294-fc81-4c4d-8e7f-786e6cc53ebc","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def claimDetailsOrNull(policyId: String): String =\n  if (policyId == \"123\") \"Fire damage, Policy 123\" else null\n"}
{"id":"ced668f7-0c12-4469-b762-7932c128bb96","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class SubmissionStatus(message: String)\ndef parseStatusOrNone(status: String | Null): Option[SubmissionStatus] =\n  Option(status).map(SubmissionStatus(_))\n"}
{"id":"195c00e7-aab3-492c-8842-2e6878aaec5c","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class IncidentReport(val description: String)\ndef javaIncidentReport(input: String): IncidentReport =\n  if (input != null && input.length > 0) new IncidentReport(input) else null\n"}
{"id":"67edc7c7-b73e-4c78-a6f4-505d862aa898","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class UploadedClaimFile(fileName: String, size: Long)\ndef safeGetUploadedFile(fileName: String | Null, size: java.lang.Long | Null): Option[UploadedClaimFile] =\n  for\n    f <- Option(fileName)\n    s <- Option(size)\n  yield UploadedClaimFile(f, s)\n"}
{"id":"0ec8184d-4071-4e07-94ff-634037f257bf","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def beneficiaryNumberOrNull(beneficiary: Map[String, String], numberKey: String): String =\n  val number = beneficiary.get(numberKey)\n  if (number.isDefined) number.get else null\n"}
{"id":"0c595bbd-1239-4d94-b30d-90c3b31b7d97","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimForm(formId: String, description: String)\ndef getExistingClaimForm(formId: String | Null): Option[ClaimForm] =\n  Option(formId).map(fid => ClaimForm(fid, \"Standard accident claim\"))\n"}
{"id":"ff442e24-acac-488b-8f53-5623da65c2ad","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def insurerAddressOrFallback(insurer: String, address: String): String =\n  if (address != null) address else \"Unknown Address\"\n"}
{"id":"53b74507-eb70-4a90-a0e5-1cff4c96d1fa","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def validateAdjustorSignature(signature: String | Null): Option[Boolean] =\n  Option(signature).map(_.nonEmpty)\n"}
{"id":"6e43567a-82c1-4ea3-af34-61895b3c5a1b","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class EvidenceUploader {\n  def uploadEvidence(evidence: String): String =\n    if (evidence == null) null else s\"Uploaded $evidence\"\n}\n"}
{"id":"bea375ec-dd86-4e33-b939-9151437f25be","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def claimantMiddleName(name: String | Null): Option[String] =\n  Option(name).filter(_.nonEmpty)\n"}
{"id":"fba00dfb-900e-4d05-a1b9-55591d1dd1e8","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getRejectedReason(message: String): String =\n  if (message != null) message else \"No reason provided\"\n"}
{"id":"7283e115-fb7e-4cb2-897d-9aa85a7685d2","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimContactNumber(number: String)\ndef safeContactNumber(num: String | Null): Option[ClaimContactNumber] =\n  Option(num).map(ClaimContactNumber(_))\n"}
{"id":"ee585b32-8d11-4bed-b9fa-947bf61451ca","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def adjustorMobile(javaMobile: String): String =\n  if (javaMobile == null) \"Unknown\" else javaMobile\n"}
{"id":"4a4c995f-115c-4efa-ad96-b913aa848241","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimantProfile(name: String, email: String)\ndef findClaimantProfileByEmail(email: String): Option[ClaimantProfile] = {\n  val result: ClaimantProfile | Null = legacyClaimantLookup(email)\n  Option(result)\n}"}
{"id":"a0963f37-1e8b-487b-997c-5591900b453f","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def getPolicyNumberOrDefault(submission: InsuranceSubmission): String = {\n  Option(submission.policyNumber).getOrElse(\"UNKNOWN-POLICY\")\n}"}
{"id":"19c911b5-923e-4aaf-b894-9b4d270f8872","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimDocument(documentId: String, uploaded: Boolean)\ndef documentStatus(doc: ClaimDocument | Null): Option[String] = {\n  Option(doc).map(d => if d.uploaded then \"Uploaded\" else \"Pending\")\n}"}
{"id":"865f3b07-0413-4237-98f4-80f1298f5e26","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def safeGetClaimAmount(claimDetails: ClaimDetails | Null): Option[Double] = {\n  Option(claimDetails).flatMap(details => Option(details.amount))\n}"}
{"id":"32200d2f-3d53-43a7-aa36-e8feb8ce1737","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def claimantFullName(maybeClaimant: Option[ClaimantInfo]): String = {\n  maybeClaimant.map(_.fullName).getOrElse(\"Unknown Claimant\")\n}"}
{"id":"73d53877-7b91-4290-a5be-6353dec6cc6c","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def validateContactNumber(maybeContact: Option[String]): Boolean = {\n  maybeContact.exists(number => number.length == 10)\n}"}
{"id":"cee1b04f-1c73-40ad-ab64-4d7a5a4ddaa8","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def claimantEmail(claimInfo: ClaimSubmission | Null): Option[String] = {\n  Option(claimInfo).flatMap(c => Option(c.email))\n}"}
{"id":"ea827e63-2a72-4354-9bed-fb7adc6a2a57","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def updateClaimStatus(claim: Option[InsuranceClaim], newStatus: String): Option[InsuranceClaim] = {\n  claim.map(c => c.copy(status = newStatus))\n}"}
{"id":"87ed725b-f985-4003-8953-ec6210dd885b","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def getAdjusterPhoneNumber(submission: InsuranceSubmission): Option[String] = {\n  Option(submission.adjusterPhone)\n}"}
{"id":"a1fca1cc-0ee2-4ccf-8ce0-9e65ee4c985f","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class BankDetails(account: String, ifsc: String)\ndef retrieveBankDetails(claim: Option[ClaimRequest]): Option[BankDetails] = {\n  claim.flatMap(c => Option(c.bankDetails))\n}"}
{"id":"0b600a68-46f9-4e22-a1db-289ca65a6a82","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def isAttachmentPresent(attachment: Attachment | Null): Boolean = {\n  if (attachment != null) true else false\n}"}
{"id":"6d519d23-8f9a-4cf2-936d-64d9182e5465","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getClaimIdLegacy(claim: InsuranceClaim): String = {\n  val claimId = legacyClaimIdFetcher(claim)\n  if (claimId == null) \"MISSING-ID\" else claimId\n}"}
{"id":"4f76df4b-3b53-44fa-9fbf-12ce5501bfa4","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def fetchClaimEvaluator(submission: InsuranceSubmission): Adjuster = {\n  val evaluator = legacyFetchAdjuster(submission.id)\n  if (evaluator != null) evaluator else DefaultAdjuster\n}"}
{"id":"6cf3a3dd-5a4a-4386-80c9-aacac858ae6b","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def printClaimantMobile(claimant: Claimant | Null): Unit = {\n  if(claimant != null) println(claimant.mobile)\n}"}
{"id":"20998225-40a6-4b02-856a-ed4b45a5d3c9","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def claimAmountOrZero(details: ClaimDetails | Null): Double = {\n  if (details != null) details.amount else 0.0\n}"}
{"id":"f70f0479-fd3d-4db7-84ef-ccd6fb0b5de2","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def riskAssessment(maybeRisk: RiskScore | Null): String = {\n  if (maybeRisk == null) \"Not Assessed\" else maybeRisk.score.toString\n}"}
{"id":"83e8f77c-e77a-46c8-abe6-1f8b387e7b2d","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getPolicyholderAddress(policy: InsurancePolicy | Null): String = {\n  if (policy == null) \"Address Not Found\" else policy.address\n}"}
{"id":"56193f43-d20b-464b-aa39-d6a708337974","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def failIfClaimTypeInvalid(claimType: String | Null): Unit = {\n  if(claimType == null) throw IllegalArgumentException(\"Claim type required\")\n}"}
{"id":"49c1fe83-c4cf-4bf9-8a51-821ff834e965","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def markClaimReviewed(claim: InsuranceClaim | Null): InsuranceClaim | Null = {\n  if (claim != null) claim.copy(reviewed = true) else null\n}"}
{"id":"f6be3485-2c9f-4846-a1e3-bd9aee199e09","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getSubmissionReferenceNo(submission: InsuranceSubmission | Null): String = {\n  if (submission != null) submission.referenceNo else null\n}"}
{"id":"4262032c-c2e2-431e-8eda-1fece10c3112","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"object QuizScoreAnalyzer:\n  def getStudentScore(studentId: String): Option[Int] =\n    val scoreFromDatabase: Integer = fetchQuizScoreFromJavaDb(studentId)\n    Option(scoreFromDatabase).map(_.toInt)\n\ndef fetchQuizScoreFromJavaDb(studentId: String): Integer =\n  if studentId == \"S100\" then 88 else null\n\nval scoreOpt = QuizScoreAnalyzer.getStudentScore(\"S100\")\nval displayedScore = scoreOpt.getOrElse(0)"}
{"id":"d68a791c-2b82-427a-b66f-09b3c0b6f3c6","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"class AssignmentSubmission(val timestamp: String)\nobject SubmissionChecker:\n  def submissionTime(option: Option[AssignmentSubmission]): String =\n    option.map(_.timestamp).getOrElse(\"No submission\")\n\nval submission = Option(new AssignmentSubmission(\"2024-05-31T10:30\"))\nval msg = SubmissionChecker.submissionTime(submission)"}
{"id":"45910b03-b30c-436b-af27-60015dc53f8b","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def filterActiveEnrollment(enrollmentStatus: String | Null): Option[String] =\n  Option(enrollmentStatus).filter(_ == \"Active\")\n\nval result = filterActiveEnrollment(null)\nval output = result.getOrElse(\"No active enrollment\")"}
{"id":"c3ab88a3-fe08-4d10-a7b0-f99737b771a6","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def safeRetrieveFeedback(jFeedback: String | Null): Option[String] =\n  Option(jFeedback).map(_.trim).filter(_.nonEmpty)\n\nval cleaned = safeRetrieveFeedback(\"  Needs Improvement  \").getOrElse(\"No Feedback\")"}
{"id":"e3fba0a0-4f49-4f5c-913b-fe090804a3af","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def courseRatingIfProvided(input: java.lang.Integer): Option[Int] =\n  Option(input).map(_.toInt)\n\nval ratingOpt = courseRatingIfProvided(null).getOrElse(0)"}
{"id":"c3768ac2-3b5e-45c9-8219-87e4bb2c25d9","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class AttendanceRecord(studentId: String, daysPresent: Int)\ndef firstAttendance(records: List[AttendanceRecord] | Null): Option[AttendanceRecord] =\n  Option(records).flatMap(_.headOption)\n\nval attendance = firstAttendance(null)\nval result = attendance.getOrElse(AttendanceRecord(\"N/A\", 0))"}
{"id":"2b9687ac-e2d1-48fb-9046-b5c24144d3ff","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def finalExamResult(score: java.lang.Double): Option[Double] =\n  Option(score).filter(_ >= 60.0).map(_.toDouble)\n\nval resultOpt = finalExamResult(null)\nval passed = resultOpt.exists(_ >= 70.0)"}
{"id":"55f24246-2a7e-4756-99f9-7157d3b6efd9","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"object FeedbackUtils:\n  def wordCount(feedback: Option[String]): Int =\n    feedback.map(_.split(\" \").length).getOrElse(0)\n\nval count = FeedbackUtils.wordCount(Some(\"Great learning material\"))"}
{"id":"ef7c298f-0a2a-45fc-9060-cf7f9caf1a16","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def extractStudentEmail(javaEmail: String | Null): Option[String] =\n  Option(javaEmail).filter(_.contains(\"@\"))\n\nval email = extractStudentEmail(\"student@uni.edu\")\nval fallback = email.getOrElse(\"anonymous@unknown\")"}
{"id":"64542382-36ce-4ea3-b34b-02020785e509","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def safeAccessPeerReview(peerReview: String | Null): Option[String] =\n  Option(peerReview).filter(_.nonEmpty)\n\nval reviewOpt = safeAccessPeerReview(null)\nval displayed = reviewOpt.getOrElse(\"No review submitted\")"}
{"id":"5abbbba6-724f-4769-b1f2-a798b19ca44d","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"object GradeRetriever:\n  def getStudentGrade(studentName: String): java.lang.Double =\n    if studentName == \"Oliver\" then 92.0 else null\n\ndef retrieveGrade(studentName: String): Double =\n  val grade = GradeRetriever.getStudentGrade(studentName)\n  if grade != null then grade else -1.0\n\nval oliverGrade = retrieveGrade(\"Oliver\")"}
{"id":"ae693825-74f9-47ab-8408-636a45378af4","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def enrollmentCountJava(courseId: String): Integer =\n  if courseId == \"MATH101\" then 43 else null\n\ndef handleEnrollmentCount(courseId: String): Int =\n  val count = enrollmentCountJava(courseId)\n  if count == null then 0 else count\n\nval mathEnrollment = handleEnrollmentCount(\"MATH101\")"}
{"id":"81b0b397-58b2-4fc6-8662-71790767434c","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class StudentProgress(val level: String)\ndef fetchProgressFromLegacy(studentId: String): StudentProgress =\n  if studentId == \"STU100\" then new StudentProgress(\"Intermediate\") else null\n\ndef getProgressLevel(studentId: String): String =\n  val progress = fetchProgressFromLegacy(studentId)\n  if progress != null then progress.level else \"Unknown\"\n\nval progressLevel = getProgressLevel(\"STU100\")"}
{"id":"a1073c6c-819a-4dfb-a3fa-1c1683abc8d6","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def checkAssignmentTitle(assignmentTitle: String): Boolean =\n  if assignmentTitle == null then false\n  else assignmentTitle.nonEmpty\n\nval titleValid = checkAssignmentTitle(null)"}
{"id":"80443860-f764-4cc2-aa10-8640be33460b","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getSurveyAnswerLegacy(answerId: Int): String =\n  if answerId == 200 then \"Yes\" else null\n\ndef processSurveyAnswer(answerId: Int): String =\n  val answer = getSurveyAnswerLegacy(answerId)\n  if answer != null then answer else \"No answer provided\"\n\nval answerString = processSurveyAnswer(100)"}
{"id":"7de13ada-b0da-4ed6-86be-9f7d6a1229f1","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class ResourceDownload(val fileName: String)\ndef latestDownloadLegacy(studentId: String): ResourceDownload =\n  if studentId == \"A201\" then new ResourceDownload(\"lecture1.pdf\")\n  else null\n\ndef getDownloadedResourceName(studentId: String): String =\n  val download = latestDownloadLegacy(studentId)\n  if download == null then \"No download\" else download.fileName\n\nval file = getDownloadedResourceName(\"A201\")"}
{"id":"4d0f7a85-aab2-4f28-873d-6d851b2fbcef","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def retrieveForumPostText(jForumPost: String): String =\n  if jForumPost != null then jForumPost.toUpperCase else \"No post\"\n\nval upperText = retrieveForumPostText(null)"}
{"id":"890adcd8-431a-4d41-abe8-1c539ca8e2df","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getSessionDurationJava(sessionId: String): Integer =\n  if sessionId == \"S50\" then 120 else null\n\ndef getSessionMinutes(sessionId: String): Int =\n  val duration = getSessionDurationJava(sessionId)\n  if duration != null then duration else -1\n\nval durationMinutes = getSessionMinutes(\"X100\")"}
{"id":"2b3a6739-02d8-4842-a5b5-20bb229cefce","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def lookupQuizAttempt(jQuizResult: java.lang.String): String =\n  if jQuizResult == null then \"No attempt recorded\" else jQuizResult\n\nval attempt = lookupQuizAttempt(null)"}
{"id":"c9faeb7b-bb4e-4ec9-97ee-7bc914ebb4e1","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getStudentDashboardURL(jDashboardURL: String): String =\n  if jDashboardURL != null then jDashboardURL else \"Unavailable\"\n\nval dashboard = getStudentDashboardURL(null)"}
{"id":"7ed13132-c764-4972-8923-7128c8676bc7","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getInactiveStudentsLegacy(courseCode: String): Array[String] =\n  if courseCode == \"CS101\" then Array(\"stu1\", \"stu2\") else null\n\ndef countInactive(courseCode: String): Int =\n  val arr = getInactiveStudentsLegacy(courseCode)\n  if arr != null then arr.length else 0\n\nval inactiveCount = countInactive(\"CS101\")"}
{"id":"3b51f5d1-da6f-42c5-a266-19e5c0212221","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class StudentAssessment(score: Double, feedback: String)\ndef getStudentAssessment(name: String): Option[StudentAssessment] = {\n  val rawAssessment = javaStyleAssessmentLookup(name)\n  Option(rawAssessment)\n}\ndef javaStyleAssessmentLookup(name: String): StudentAssessment | Null =\n  if name == \"Ada\" then StudentAssessment(92.0, \"Excellent\") else null"}
{"id":"e2d6ffe4-c8ce-48f9-b7f9-bbe88be9cd34","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def calculateAverageGrade(grades: List[Int]): Option[Double] =\n  if grades.nonEmpty then Some(grades.sum.toDouble / grades.length) else None"}
{"id":"8375b02e-bbb4-46e5-bd4d-c783911582c5","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getLatestQuizScore(studentId: String): Int = {\n  val score = databaseFetchQuizScore(studentId)\n  if (score != null) {\n    score\n  } else {\n    -1\n  }\n}\ndef databaseFetchQuizScore(studentId: String): Integer | Null = if (studentId == \"s100\") 85 else null"}
{"id":"6ce78eab-09bf-42c8-95c2-7c5a9d1c20fd","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class CourseProgress(unitsCompleted: Int)\ndef findCourseProgress(studentId: String): Option[CourseProgress] =\n  Option(fetchProgressFromExternalSystem(studentId))\ndef fetchProgressFromExternalSystem(studentId: String): CourseProgress | Null =\n  if studentId == \"s99\" then CourseProgress(10) else null"}
{"id":"46786488-c061-49e1-ba0f-8cd36fd0ce1d","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def printSemesterGPA(studentName: String): Unit = {\n  val gpa = lookupGPAViaLegacySystem(studentName)\n  if (gpa != null) {\n    println(s\"GPA: $gpa\")\n  } else {\n    println(\"No GPA available.\")\n  }\n}\ndef lookupGPAViaLegacySystem(studentName: String): java.lang.Double | Null =\n  if (studentName == \"Aiden\") 3.7 else null"}
{"id":"b6ffcec5-3584-4c47-8211-2fb0c906caeb","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def getLearningPathway(studentEmail: String): Option[String] =\n  Option(legacyLearningPathwaySystem(studentEmail))\ndef legacyLearningPathwaySystem(studentEmail: String): String | Null =\n  if studentEmail.endsWith(\"@school.edu\") then \"STEM Pathway\" else null"}
{"id":"fbac8af0-4d47-407b-8f2b-0d35d12e2cb2","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def markAsInactiveIfNoSubmission(report: StudentSubmissionReport | Null): String =\n  if(report == null) \"Inactive\" else \"Active\"\nclass StudentSubmissionReport(val submittedAssignments: Int)"}
{"id":"0ee82897-46ba-4f90-9519-27624cc7ac41","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def fetchStudentAttendance(studentId: String): Option[Int] =\n  Option(attendanceSystem(studentId))\ndef attendanceSystem(studentId: String): Integer | Null =\n  if studentId == \"110045\" then 12 else null"}
{"id":"e47c6436-6b51-405c-876c-3c0f8cb46c17","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def countCompletedModules(modules: List[String]): Option[Int] =\n  Option(modules)\n    .filter(_.nonEmpty)\n    .map(_.length)"}
{"id":"ee545654-3174-4381-a74a-62e4785e5ba6","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def calculateFeedbackLength(feedback: String | Null): Int =\n  if (feedback != null) feedback.length else 0"}
{"id":"85b4117b-eb4b-4173-af35-91f19632d6da","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def updateStudentProfile(studentId: String, newEmail: String): String | Null =\n  if(newEmail.endsWith(\"@alumni.edu\")) null else newEmail"}
{"id":"61f55383-f46c-4c89-9f04-3595bba999bc","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def getCourseRecommendation(studentYear: Int): Option[String] =\n  Option(recommendationLookup(studentYear))\ndef recommendationLookup(studentYear: Int): String | Null =\n  if studentYear == 3 then \"Advanced Analytics\" else null"}
{"id":"bd443912-49a3-4de9-9820-d88d45e96cb9","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def fetchSessionNotes(sessionId: String): String = {\n  val notes = legacyNotesProvider(sessionId)\n  if(notes == null) \"No notes found.\" else notes\n}\ndef legacyNotesProvider(sessionId: String): String | Null = if(sessionId == \"S01\") \"Session began at 9:00\" else null"}
{"id":"5b8278df-a47b-4498-b2e7-0e6185a417cc","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def getTimeOnTask(activity: String): Option[Int] =\n  Option(legacyActivityTracker(activity))\ndef legacyActivityTracker(activity: String): Integer | Null =\n  if activity == \"quiz\" then 29 else null"}
{"id":"146e2a09-806d-4d11-ac64-87eca4941d8e","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getPeerReviewScore(reviewerId: String): java.lang.Double | Null =\n  if(reviewerId == \"peer42\") 4.5 else null"}
{"id":"495aff0c-8205-447f-b796-379209fe0450","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def extractLearningObjective(topic: String): Option[String] =\n  Option(null)\n    .orElse(Some(s\"Understand $topic effectively\"))\n    .filter(_.contains(\"Understand\"))"}
{"id":"b67b7260-286c-4248-8669-065dd17f5153","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class EngagementMetrics(videosWatched: Int)\ndef wrapNullToOption(metrics: EngagementMetrics | Null): Option[EngagementMetrics] =\n  Option(metrics)"}
{"id":"82343f1a-555b-4e3a-9ce4-2ef325d9ae31","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def fetchDiscussionReplyCount(threadId: String): Integer | Null =\n  if(threadId.startsWith(\"T\")) 14 else null\n\ndef showDiscussionReplyCount(threadId: String): String = {\n  val replyCount = fetchDiscussionReplyCount(threadId)\n  if(replyCount != null) replyCount.toString else \"No replies\"\n}"}
{"id":"31a88584-a9dd-4fd0-94a1-f6c487abae05","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getResourceCompletion(studentId: String): Integer | Null =\n  if(studentId == \"stu42\") null else 5"}
{"id":"0189ad60-0d82-46ab-80e5-16e78b21782d","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Recipe(name: String, ingredients: List[String])\ndef getRecipeById(id: String): Option[Recipe] =\n  recipesDatabase.find(_.id == id)\nval userFavorite: Option[Recipe] = getRecipeById(\"r42\")\nval favoriteName = userFavorite.map(_.name).getOrElse(\"No favorite recipe\")"}
{"id":"e1c815b0-1e0d-4c65-a25a-7ead1932b00a","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def fetchNutritionInfo(recipeName: String): String =\n  if (recipeName == null) null\n  else {\n    // Simulate fetching nutrition info\n    \"Calories: 250\"\n  }\nval nutrition = fetchNutritionInfo(null)\nif (nutrition != null) println(nutrition)"}
{"id":"b51f14d7-a0d2-4354-a444-3ffbd426204c","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recommendRecipe(preferences: Option[List[String]]): Option[String] =\n  preferences.flatMap(_.headOption).map(pref => s\"We recommend $pref Delight!\")\nval recommendation = recommendRecipe(Some(List(\"Quinoa\", \"Avocado\")))\nprintln(recommendation.getOrElse(\"No recommendation available\"))"}
{"id":"582e568f-4e15-47ab-8bc6-2a3f9f94e34d","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def lookupUserRestrictions(username: String): String =\n  if (username == null) return null\n  if (username == \"alice\") \"nuts\"\n  else null\nval restriction = lookupUserRestrictions(null)\nif (restriction != null) println(s\"Allergy: $restriction\") else println(\"No allergy info\")"}
{"id":"cb9217b1-fd60-4133-a8af-4409fa186c42","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeJavaRecipeTitle(javaTitle: String): Option[String] =\n  Option(javaTitle)\nval titleOption = safeJavaRecipeTitle(null)\nprintln(titleOption.getOrElse(\"Untitled Recipe\"))"}
{"id":"6f8c0ca1-a1ff-4b0f-a2cb-ec857f794b1f","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def fetchRecipeTags(recipeId: String): Array[String] =\n  if (recipeId == null) null\n  else Array(\"vegan\", \"gluten-free\")\nval tags = fetchRecipeTags(null)\nif (tags != null) println(tags.mkString(\", \"))"}
{"id":"dd605139-4847-40d1-b401-e7f0a304d2f1","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def personalizedGroceryList(userIngredients: Option[List[String]]): List[String] =\n  userIngredients.getOrElse(List(\"Milk\", \"Bread\"))\nval groceryList = personalizedGroceryList(None)\ngroceryList.foreach(println)"}
{"id":"935c7b32-64d6-4dcd-a351-c01e3224f792","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class UserPreferencesDatabase {\n  def findDietType(username: String): String = {\n    if (username == null) return null\n    if (username == \"ben\") \"vegetarian\" else null\n  }\n}\nval db = new UserPreferencesDatabase()\nval diet = db.findDietType(null)\nif (diet != null) println(diet) else println(\"Unknown diet\")"}
{"id":"27e40465-0ca8-4109-9f4b-d2ce863b1c67","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safelyGetIngredient(ingredient: String): Option[String] =\n  Option(ingredient).filter(_.nonEmpty)\nval maybeIngredient = safelyGetIngredient(\"\")\nprintln(maybeIngredient.getOrElse(\"No ingredient provided\"))"}
{"id":"da5daa8c-2d5b-447f-8757-0f508079439b","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def getAlternateRecipe(recipe: String): String =\n  if (recipe == null) null\n  else s\"$recipe (Low-Sodium)\"\nval alt = getAlternateRecipe(null)\nif (alt != null) println(alt)"}
{"id":"37599a56-79b7-4dc5-9576-22ec334cdec7","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def extractDietaryInfo(recipeNotes: Option[String]): String =\n  recipeNotes.filter(_.contains(\"gluten-free\")).getOrElse(\"No dietary info\")\nval info = extractDietaryInfo(Some(\"This is a gluten-free meal.\"))\nprintln(info)"}
{"id":"9d459a63-55b3-43a6-90b4-a5f6f70ca452","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class JavaRecipeBook {\n  def searchRecipeByName(name: String): String =\n    if (name == null) null else \"Tomato Soup\"\n}\nval book = new JavaRecipeBook()\nval foundRecipe = book.searchRecipeByName(null)\nif (foundRecipe != null) println(foundRecipe) else println(\"Recipe not found\")"}
{"id":"a0557e8a-7675-4420-9720-3627e75dada3","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def getUserLastCooked(userId: String): Option[String] =\n  if userId == \"eve\" then Some(\"Spinach Pie\") else None\nval lastCooked = getUserLastCooked(\"alice\").getOrElse(\"Never cooked before\")\nprintln(lastCooked)"}
{"id":"c3d8b144-1eb2-48ee-bbe9-784690eef6df","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def fetchFavoriteCuisine(userEmail: String): String =\n  if (userEmail == null) null\n  else if (userEmail.contains(\"@spice.com\")) \"Indian\" else null\nval favCuisine = fetchFavoriteCuisine(null)\nif (favCuisine != null) println(favCuisine)"}
{"id":"4899ed04-9148-4318-9048-9f7c35110898","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def applyUserDietPreference(recipe: String, dietOption: Option[String]): String =\n  dietOption match\n    case Some(diet) => s\"$recipe ($diet friendly)\"\n    case None => recipe\nval result = applyUserDietPreference(\"Pasta\", Some(\"Vegan\"))\nprintln(result)"}
{"id":"95e9bf22-f559-4db5-ba56-12ebe962c0b7","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class PersonalizedRecommendationSystem {\n  def nextRecommendation(previous: String): String =\n    if (previous == null) null else \"Quiche Lorraine\"\n}\nval recommender = new PersonalizedRecommendationSystem()\nval next = recommender.nextRecommendation(null)\nif (next != null) println(next) else println(\"No recommendation\")"}
{"id":"20b747ef-fbb9-4f0e-a409-de52395583d0","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeGetCalorieCount(calorieStr: String): Option[Int] =\n  Option(calorieStr).flatMap(s => scala.util.Try(s.toInt).toOption)\nval calories = safeGetCalorieCount(\"300\").getOrElse(0)\nprintln(calories)"}
{"id":"fd4575d8-5622-4019-a571-a087160acc4d","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def getUserSavedRecipes(username: String): Array[String] =\n  if (username == null) null\n  else Array(\"Ratatouille\", \"Minestrone\")\nval saved = getUserSavedRecipes(null)\nif (saved != null) saved.foreach(println)"}
{"id":"6cd8cf4d-3849-4e04-aa5b-ab1448f274da","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recommendVeganOption(recipe: Option[String]): Option[String] =\n  recipe.filter(_.toLowerCase.contains(\"vegan\"))\nval veganRec = recommendVeganOption(Some(\"Vegan Curry\"))\nprintln(veganRec.getOrElse(\"No vegan recommendation\"))"}
{"id":"f0c4032f-3dcb-4c5d-a0a4-5dd3de232d88","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def findRecipeRating(recipeId: String): java.lang.Integer =\n  if (recipeId == null) null\n  else 5\nval rating = findRecipeRating(null)\nif (rating != null) println(s\"Rating: $rating stars\") else println(\"No rating\")"}
{"id":"e96b6973-7dab-45f2-a864-b7feedb8e0d9","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"case class RecipeDetails(name: String, ingredients: List[String], instructions: String)\ndef fetchRecipeFromJavaApi(recipeId: String): RecipeDetails = {\n  // simulate Java API call that might return null\n  if (recipeId == \"42\") null else RecipeDetails(\"Pasta Primavera\", List(\"pasta\", \"vegetables\"), \"Boil pasta. Add veggies.\")\n}\ndef getSafeRecipe(recipeId: String): RecipeDetails = {\n  val recipe = fetchRecipeFromJavaApi(recipeId)\n  if (recipe == null) RecipeDetails(\"Unknown Recipe\", List(), \"No instructions available.\")\n  else recipe\n}"}
{"id":"d0da93d4-0886-4f04-a56f-e10136993999","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def recommendRecipeBasedOnPreferences(preferences: Array[String]): String = {\n  if (preferences == null) {\n    return null\n  }\n  if (preferences.contains(\"vegan\")) {\n    \"Vegan Quinoa Bowl\"\n  } else {\n    null\n  }\n}"}
{"id":"98060785-c812-414c-9796-381d0612d0f8","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"object IngredientChecker {\n  def checkAllergicIngredient(ingredient: String): Boolean = {\n    if (ingredient == null) false\n    else ingredient.equalsIgnoreCase(\"peanut\")\n  }\n}"}
{"id":"7959a55d-7b20-47d3-a6de-3531166414fd","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class UserProfile(val favoriteCuisine: String) {\n  def isVegetarian: java.lang.Boolean = {\n    if (favoriteCuisine == null)\n      null\n    else\n      favoriteCuisine.equalsIgnoreCase(\"Vegetarian\")\n  }\n}"}
{"id":"90367bd8-d0ff-438a-a5a9-38158afeac58","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def getRatingFromLegacyDb(recipeName: String): java.lang.Integer = {\n  if (recipeName == null) null\n  else if (recipeName == \"Lentil Soup\") 5 else null\n}"}
{"id":"90275174-1635-4698-8ee9-198c17bcd2cc","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def findRecipeById(recipeId: String): String = {\n  if (recipeId != null && recipeId == \"100\") {\n    \"Spicy Tofu Bowl\"\n  } else {\n    null\n  }\n}"}
{"id":"cca14c48-30e2-4462-92a9-67740d7d5bf8","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def userPreferredRecipes(userPreferences: java.util.List[String]): String = {\n  if (userPreferences == null) {\n    return null\n  }\n  if (userPreferences.contains(\"gluten-free\")) {\n    \"Chickpea Salad\"\n  } else {\n    null\n  }\n}"}
{"id":"3dc13a2f-37ac-47a6-87da-0ddc8a571c31","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def getLastViewedRecipe(lastViewed: String): String = {\n  if (lastViewed == null)\n    null\n  else\n    lastViewed\n}"}
{"id":"621dac3c-d50d-419f-85fb-46c95ede97f0","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class RecipeIngredientFinder {\n  def findIngredient(recipeName: String, ingredient: String): String = {\n    if (recipeName == null || ingredient == null)\n      null\n    else if (recipeName == \"Fruit Parfait\" && ingredient == \"Yogurt\")\n      \"Yogurt\"\n    else\n      null\n  }\n}"}
{"id":"bab0089b-c55e-4b37-9fba-cb5033f9848d","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def fetchAlternativeRecipe(mainIngredient: String): String = {\n  if(mainIngredient == null) {\n    null\n  } else if(mainIngredient == \"eggplant\") {\n    \"Eggplant Parmesan\"\n  } else {\n    null\n  }\n}"}
{"id":"fb5cfe1d-aaf7-461d-8bd8-5f512b221df1","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Recipe(title: String, ingredients: List[String])\ndef safeRecipeLookup(recipeTitle: String): Option[Recipe] = {\n  Option(recipeTitle).filter(_.nonEmpty).map(title => Recipe(title, List(\"tomato\", \"onion\")))\n}"}
{"id":"2d18ba65-5315-4852-8d73-a3203c02875d","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def veganSubstituteOption(ingredient: String): Option[String] = {\n  Option(ingredient).flatMap {\n    case \"cheese\" => Some(\"vegan cheese\")\n    case \"milk\" => Some(\"soy milk\")\n    case _ => None\n  }\n}"}
{"id":"74a514ca-9e8c-4218-b00d-40cd373f87d2","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def userFavoriteRecipeOption(favorite: String): Option[String] = Option(favorite).filter(_.nonEmpty)"}
{"id":"bd2c3e73-66a0-4534-884b-6feb10c7b4a5","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def getPersonalizedRecipeSuggestion(userId: String): Option[String] = {\n  Option(userId).flatMap {\n    case \"user_123\" => Some(\"Grilled Portobello Burger\")\n    case \"user_456\" => Some(\"Moroccan Couscous\")\n    case _ => None\n  }\n}"}
{"id":"09994a4b-8795-483b-8020-2fd6586e8fb4","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recipeRatingOption(recipeName: String): Option[Int] = {\n  Option(recipeName).flatMap(name => if (name == \"Stir Fry\") Some(5) else None)\n}"}
{"id":"bbf237bb-00c4-4654-8c5f-b2566620982e","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def getCalorieInfo(recipe: String): Option[Int] = {\n  Option(recipe).map(_.toLowerCase) match {\n    case Some(\"fruit smoothie\") => Some(220)\n    case Some(\"caesar salad\") => Some(360)\n    case _ => None\n  }\n}"}
{"id":"3756b362-be95-469d-8c11-e7658a0b78de","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def getRecommendedIngredient(ingredient: String): Option[String] = {\n  Option(ingredient).filter(_.nonEmpty).map(_.capitalize)\n}"}
{"id":"f78545fb-fe2e-4fe6-a82f-619c23dd792c","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recommendDairyAlternative(ingredient: String): Option[String] = {\n  Option(ingredient).collect {\n    case \"milk\" => \"almond milk\"\n    case \"butter\" => \"coconut oil\"\n  }\n}"}
{"id":"9b04fb99-a5e0-499e-bd39-2b0ad3af9817","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeParseUserSubmittedRecipe(recipeJson: String): Option[String] = {\n  Option(recipeJson).filter(_.contains(\"name\")).map(_ => \"Valid Recipe\")\n}"}
{"id":"a015a697-7a36-4dd1-83fb-8d45492c3b22","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def suggestBasedOnAllergies(allergy: String): Option[String] = {\n  Option(allergy).map(_.toLowerCase).filter(_ == \"walnut\").map(_ => \"Recommend nut-free desserts\")\n}"}
{"id":"f597a24c-e16c-4dff-98e3-e413ba4b396e","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class DonorProfile(donorId: String, name: String)\ndef findDonorProfile(id: String): Option[DonorProfile] = Option(queryDatabaseForDonor(id))\ndef queryDatabaseForDonor(id: String): DonorProfile = if id.nonEmpty then DonorProfile(id, \"Priya\") else null\nval donorOpt = findDonorProfile(\"D100\")\nval donorName = donorOpt.map(_.name).getOrElse(\"Guest\")"}
{"id":"b8d7c51c-2f7b-440f-8080-36fa6ea847a1","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getDonationAmount(campaignId: String): java.lang.Integer = if campaignId == \"C202\" then 2500 else null\nval donationOpt = Option(getDonationAmount(\"C202\")).map(_.toInt)\nval amt = donationOpt.fold(0)(_ + 500)"}
{"id":"efd6317a-8820-4436-b7fe-96c1cbd9273d","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def legacyFindCharityById(charityId: String): String = if charityId == \"CHARITABLE123\" then \"Water Relief\" else null\nval charity: String = legacyFindCharityById(\"UNKNOWN\")\nif (charity == null) println(\"Charity not found\") else println(s\"Charity: $charity\")"}
{"id":"06a2b3eb-5a41-466b-8b3b-2e61062c8098","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"case class Campaign(title: String, description: String)\ndef getCampaignFromExternalSource(code: String): Campaign =\n  if code == \"FOOD2024\" then Campaign(\"Food Supplies\", \"Helping the needy\") else null\nval result = getCampaignFromExternalSource(\"MED2023\")\nif (result != null) println(result.title) else println(\"No campaign found\")"}
{"id":"9b0bfcc6-b3f3-42b3-b7e3-61c7b667ab02","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def safeGetDonorEmail(donor: AnyRef): Option[String] = Option(donor).collect { case d: Donor => d.email }\nclass Donor(val name: String, val email: String)\nval emailOpt = safeGetDonorEmail(new Donor(\"Lena\", \"lena@example.com\"))\nval email = emailOpt.getOrElse(\"not_provided@charity.org\")"}
{"id":"e7a551db-3d97-4813-a2ed-e6999af9b425","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"val legacyContact: String = null\nval message = if (legacyContact == null) \"No contact provided\" else s\"Contact: $legacyContact\"\nprintln(message)"}
{"id":"bcc5d893-3484-4011-93b6-d433400b5b0c","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def fetchBeneficiaryReference(ref: String): String = if ref == \"BEN102\" then \"Sarah J\" else null\nval name = fetchBeneficiaryReference(\"BEN101\")\nif (name == null) println(\"Beneficiary not found\") else println(name)"}
{"id":"d5819fd4-90f5-4398-961a-79087e9cbb10","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def updateCampaignGoal(goal: java.lang.Integer): Option[Int] = Option(goal).map(_.toInt)\nval adjustedGoal = updateCampaignGoal(null).getOrElse(10000)"}
{"id":"cdeb4e8a-ba5e-4e57-ab0f-a52467456a1b","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getDonationReceipt(donationId: Long): Option[String] = Option(callJavaReceiptSystem(donationId))\ndef callJavaReceiptSystem(donationId: Long): String = if donationId > 0 then s\"RCT$donationId\" else null\nval receipt = getDonationReceipt(200L).getOrElse(\"Pending\")"}
{"id":"b0d8412f-da29-454a-8cf3-85267ff63b43","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def assignCharityEventCoordinator(event: String): String = if event == \"FUNDRAISE2024\" then \"Nicole\" else null\nval coordinator = assignCharityEventCoordinator(\"VOLUNTEERDAY\")\nif (coordinator != null) println(s\"Coordinator assigned: $coordinator\") else println(\"No coordinator assigned\")"}
{"id":"8743ca79-6c34-4a77-abe1-f0619c753ea0","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"val possibleOrganization: String = null\nval org = Option(possibleOrganization).getOrElse(\"Unknown Organization\")"}
{"id":"4b413b3e-b414-40b1-9330-f4081a6983b5","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def javaLegacyGetPledge(status: String): DonorPledge = if status == \"confirmed\" then DonorPledge(\"Alice\", 450) else null\ncase class DonorPledge(name: String, amount: Int)\nval pledgeOpt = Option(javaLegacyGetPledge(\"pending\"))\nval donor = pledgeOpt.map(_.name).getOrElse(\"No donor found\")"}
{"id":"900c4b62-2e6a-4979-8401-1d63271d56a4","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def findVolunteerByUsername(username: String): Volunteer = if username == \"james22\" then new Volunteer(\"James\",\"james@email.com\") else null\nclass Volunteer(val name: String, val email: String)\nval volunteer = findVolunteerByUsername(\"unknown99\")\nif (volunteer == null) println(\"Volunteer not found\") else println(volunteer.name)"}
{"id":"d090c6ea-11f5-4266-8f7e-cdd1b4bc8ff4","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def getApprovedGrantOrNull(grantId: String): Grant = if grantId == \"2023-HEAL01\" then Grant(\"2023-HEAL01\", 6000) else null\ncase class Grant(grantId: String, amount: Int)\nval grant = getApprovedGrantOrNull(\"X\")\nif (grant != null) println(grant.amount) else println(0)"}
{"id":"1b94e8f4-e309-4601-bfc7-764e0f991c71","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def legacyFindDonationCampaign(id: String): String = if id == \"ENV-2304\" then \"Clean Up River\" else null\nval campaign = legacyFindDonationCampaign(\"FOOD-1002\")\nif (campaign == null) println(\"Campaign not found\")\nelse println(campaign)"}
{"id":"cd2518b7-2f45-49ec-a253-cc73ea960662","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def optionSafeDonorPhone(phoneNumber: String | Null): Option[String] = Option(phoneNumber)\nval contactOpt = optionSafeDonorPhone(null)\nval displayPhone = contactOpt.fold(\"N/A\")(_.reverse)"}
{"id":"9c419546-db2c-41e3-8ac4-37dee462396d","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def recentDonationAmountOrNull(memberId: Int): java.lang.Double = if memberId == 42 then 105.55 else null\ndef latestDonationOpt(memberId: Int): Option[Double] = Option(recentDonationAmountOrNull(memberId)).map(_.toDouble)\nval resultAmount = latestDonationOpt(7).getOrElse(0.0)"}
{"id":"58e53663-24e7-41c8-a514-6814535c62b4","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def retrieveFundraiserByTag(tag: String): Fundraiser = if tag == \"HELPCHILDREN\" then Fundraiser(\"Kids Fund\", true) else null\ncase class Fundraiser(name: String, active: Boolean)\nval fundraiser = retrieveFundraiserByTag(\"\")\nif (fundraiser != null) println(fundraiser.name) else println(\"No fundraiser found\")"}
{"id":"fcbc1269-6c28-4b50-a77e-ab31ae1b764d","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def getDonorAliasOrNull(userId: String): String = if userId == \"U789\" then \"GenerousSoul\" else null\nval donorAlias = getDonorAliasOrNull(\"U123\")\nif (donorAlias != null) println(donorAlias) else println(\"Alias not set\")"}
{"id":"936531ee-1a06-48b0-9e29-8e6c0ad672c2","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getEventTicketIdFromLegacy(eventName: String): String = if eventName == \"Gala Night\" then \"T1055\" else null\nval eventTicketOpt = Option(getEventTicketIdFromLegacy(\"Volunteer Meet\"))\nval ticketId = eventTicketOpt.getOrElse(\"No Ticket\")"}
{"id":"5a960c81-50e9-47a5-beb1-869b9862a7d4","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def safeLookupCharityCode(database: Map[String, String], code: String): Option[String] = database.get(code)\nval codeOpt = safeLookupCharityCode(Map(\"AC01\" -> \"Animal Care\"), \"AC01\")\nval label = codeOpt.filter(_.contains(\"Animal\")).getOrElse(\"Unknown\")"}
{"id":"28f26805-0f13-4bc0-9914-acbcc7a0ecd1","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class DonorProfile(name: String, email: String)\ndef findDonorById(id: Long): Option[DonorProfile] =\n  val donor = JavaDonorRepository.getDonorProfile(id)\n  Option(donor)"}
{"id":"fe95b10f-6b03-45bc-9cfc-1335d66dbef1","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getRecentDonationAmount(donor: DonorAccount): Option[Double] =\n  Option(donor.getLastDonationAmount)"}
{"id":"9cf8649e-a006-4ab9-b886-ac047b49319a","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def increaseTarget(goalAmount: Option[Double], increment: Double): Option[Double] =\n  goalAmount.map(_ + increment)"}
{"id":"0baacacf-0a84-47d3-acec-9179717409e2","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def charityEmailOrDefault(charityId: Long): String =\n  val emailOpt = Option(CharityDirectory.findEmailByCharityId(charityId))\n  emailOpt.getOrElse(\"info@charityhub.org\")"}
{"id":"07f3ad8a-00a4-4773-bf9e-c4b84ce389d8","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def totalDonationsAbove(amount: Double, donorAmounts: List[Double]): Boolean =\n  donorAmounts.forall(_ > amount)"}
{"id":"3b51d8a4-57f1-4f12-a1a8-2433c7c493d0","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def charityLocation(charityName: String): Option[String] =\n  Option(JavaCharityService.getLocationByName(charityName))"}
{"id":"7c02a6b6-41c1-48d4-a8a2-4f1fcd24d984","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getFundById(fundId: Long): Option[Fund] =\n  Option(LegacyFundSystem.lookupFund(fundId))"}
{"id":"72b87ee3-dad4-4dbf-9a02-4bff0a578026","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def donorNicknameLength(donor: DonorProfile): Int =\n  Option(donor.name).map(_.length).getOrElse(0)"}
{"id":"e20ac933-b73e-4836-9821-0f01cc72ac02","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def isMatchingDonationEligible(donor: Option[DonorProfile]): Boolean =\n  donor.exists(_.email.endsWith(\"@charitycorp.com\"))"}
{"id":"9bc0c06c-2303-48cc-b226-5e4aa2e1fce9","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def lastDonationSummary(donor: DonorProfile): String =\n  Option(donor.email).filter(_.nonEmpty).fold(\"Email unavailable\") { email =>\n    s\"Donor email: $email\"\n  }"}
{"id":"65d9604d-c8ac-4d93-b419-dddbaa8d2e9a","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def sendThankYouEmail(donor: LegacyDonor): Unit =\n  if (donor != null && donor.email != null) {\n    EmailService.sendThankYou(donor.email)\n  }"}
{"id":"14325b1b-2916-42f5-bf20-d98388c5e36f","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def createAnonymousDonor(): DonorAccount =\n  val donor = new DonorAccount(\"Anonymous\", null)\n  donor"}
{"id":"7091f811-d766-4860-88cd-458687c8dacb","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def getFundNameUpper(fund: LegacyFund): String =\n  if (fund != null && fund.name != null)\n    fund.name.toUpperCase\n  else\n    null"}
{"id":"efabf6ac-39df-4566-b7fa-4d6fcf6dc5d4","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def setCharityMission(charity: Charity, mission: String): Unit =\n  if (charity != null)\n    charity.mission = mission\n  else\n    ()"}
{"id":"479910ef-d28f-4cbd-94dd-62031d74cc5d","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def getCharityManagerEmail(charity: LegacyCharity): String =\n  if (charity != null && charity.managerEmail != null)\n    charity.managerEmail\n  else\n    null"}
{"id":"7d7aeb7b-fcab-4b60-8e39-6d9e53d5d9f0","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def tryFindActiveEvent(eventId: Long): LegacyEvent =\n  val ev = EventRegistry.findEventById(eventId)\n  if (ev != null && ev.active)\n    ev\n  else\n    null"}
{"id":"e1ec2698-b8ec-4296-b5cb-e6e58c212d8b","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def assignSponsorToEvent(event: Event, sponsor: Sponsor): Boolean =\n  if (event != null && sponsor != null)\n    event.sponsor = sponsor\n    true\n  else\n    false"}
{"id":"b9e5cc9c-9d05-42bb-b160-9fb263773d58","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def initializeFundraiser(title: String): Fundraiser =\n  if (title != null)\n    new Fundraiser(title)\n  else\n    null"}
{"id":"89030feb-274b-4869-9b02-d2b0caa57344","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def addNoteToDonation(donation: Donation, note: String): Unit =\n  if (donation != null)\n    donation.note = note\n  else\n    ()"}
{"id":"64aa51d9-0c2d-4179-a075-a1904b5fbb7e","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class LiveScoreUpdate(teamName: String, points: Int)\ndef updateScore(existing: Option[LiveScoreUpdate], newPoints: Int): Option[LiveScoreUpdate] =\n  existing.map(lsu => lsu.copy(points = newPoints))"}
{"id":"8b116b7d-7570-43fd-b59d-e9d0d0eea655","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getCurrentGameScore(gameId: String): String = {\n    val score: String = null\n    if (score != null) score else \"Score unavailable\"\n}"}
{"id":"b92e2ec8-537f-485c-a590-c61d52cfe650","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safePlayerStats(playerId: String): Option[Int] =\n  val points: Integer = javaPlayerServicePoints(playerId) // may be null\n  Option(points).map(_.toInt)"}
{"id":"305a92b7-443c-43d5-aeee-441855a39315","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"object ScoreBoard {\n  def findMatchScoreById(matchId: String): Option[Int] =\n    val dbScore: java.lang.Integer = oldScoreDbFetch(matchId)\n    Option(dbScore).map(_.toInt)\n}"}
{"id":"2d8bd82a-35ad-40bf-b3aa-2bb8727a546e","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def setPenalty(teamName: String, penaltyPoints: Int): Unit = {\n    var existingEntry: LiveScoreEntry = getScoreEntry(teamName)\n    if (existingEntry == null) {\n        existingEntry = new LiveScoreEntry(teamName, 0)\n    }\n    existingEntry.points -= penaltyPoints\n    updateScoreEntry(existingEntry)\n}"}
{"id":"728dee6b-2cae-4752-a2b4-24ab4c284b85","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def updateLiveFeed(scoreOpt: Option[Int]): String =\n  scoreOpt.fold(\"Awaiting score...\")(score => s\"Live score: $score\")"}
{"id":"8f440f27-8ca2-4ee1-8cd0-0fed90ebe7f7","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class TeamScore(val team: String, var score: Integer) {\n    def addPoints(points: Integer): Unit = {\n        if (score == null) {\n            score = points\n        } else {\n            score = score + points\n        }\n    }\n}"}
{"id":"32fd6403-074a-418d-9ec7-649a903411ac","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def showTopScorerName(playerName: String): String = {\n    if (playerName == null) \"Name not available\" else playerName.toUpperCase()\n}"}
{"id":"e02d7d09-3435-42ea-80eb-93c07da1decf","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def findWinningTeam(scoreA: Option[Int], scoreB: Option[Int]): Option[String] =\n  for\n    a <- scoreA\n    b <- scoreB\n  yield if a > b then \"Team A\" else if b > a then \"Team B\" else \"Draw\""}
{"id":"99e0bc72-98dc-454d-9b6b-1d363ed99026","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getLiveEventStatus(eventId: String): String = {\n    val status = fetchEventStatusFromSystem(eventId) // might be null\n    if (status == null) \"Status unknown\" else status\n}"}
{"id":"e4b9735c-6e41-47bf-afe0-5600843911b8","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def fetchLiveResult(maybeScore: Option[Int]): String =\n  maybeScore.map(score => s\"Current score: $score\").getOrElse(\"No live result\")"}
{"id":"f35c50ea-f75c-44c7-b867-410fc9e97306","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def incrementScore(entry: Option[LiveScoreEntry]): Option[LiveScoreEntry] =\n  entry.map(e => e.copy(points = e.points + 1))"}
{"id":"9e57a622-1fe7-4711-bb18-88131dfbe9bc","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def nullHandlingForCoach(coachName: String): String = {\n    if (coachName == null) {\n        \"Coach info not present\"\n    } else {\n        s\"Coach: $coachName\"\n    }\n}"}
{"id":"82081b40-5e8f-4a14-a52b-0b56fccfcf40","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class ScoreUpdate(team: String, score: Int)\ndef fromLegacyApi(apiTeam: String, apiScore: Integer): Option[ScoreUpdate] =\n  Option(apiTeam).flatMap(tn => Option(apiScore).map(s => ScoreUpdate(tn, s)))"}
{"id":"e8df09fa-2f41-4d68-837b-628236177476","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getMatchWinner(teamAScore: Int, teamBScore: Int): String = {\n    var winner: String = null\n    if (teamAScore > teamBScore) {\n        winner = \"Team A\"\n    } else if (teamBScore > teamAScore) {\n        winner = \"Team B\"\n    }\n    winner\n}"}
{"id":"de466a9b-3873-4f7f-8377-5f60bb4a235d","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def maybeLatestScore(score: java.lang.Integer): Option[Int] =\n  Option(score).map(_.toInt)"}
{"id":"11ea4483-ebd8-4cb6-b565-8185a99de81f","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def teamPenaltyMessage(penalty: Integer): String = {\n    if (penalty != null && penalty > 0) {\n        s\"Team penalized by $penalty points\"\n    } else {\n        \"No penalty issued\"\n    }\n}"}
{"id":"b17761a9-2f0f-4f7d-b142-a3fc15801848","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def getActiveMatchId(possibleId: String): Option[String] =\n  Option(possibleId).filter(_.nonEmpty)"}
{"id":"c951eb44-2d26-4552-b888-df67364d7fa6","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def manualNullCheckScore(score: java.lang.Integer): Int = {\n    if (score == null) 0 else score.toInt\n}"}
{"id":"9e62b7f8-8333-4d36-af93-30991b3b69a9","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def playerScoreSummary(optScore: Option[Int]): String =\n  optScore match\n    case Some(sc) if sc > 0 => s\"Player score: $sc\"\n    case _                  => \"Player has no score recorded\""}
{"id":"288f4f96-217f-46af-99bd-84a700eda3e8","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class MatchScore(home: Int, away: Int)\ndef fetchLiveScore(matchId: String): Option[MatchScore] = {\n  // simulate possible absence\n  if matchId == \"M123\" then Some(MatchScore(2, 3)) else None\n}\ndef getScoreSummary(matchId: String): String = {\n  fetchLiveScore(matchId)\n    .map(ms => s\"Home: ${ms.home}, Away: ${ms.away}\")\n    .getOrElse(\"Score unavailable.\")\n}"}
{"id":"0242e371-debd-4ce4-838d-b408f4b68e86","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class GoalUpdate {\n  var latestGoalScorer: String = null\n  def updateGoal(scorer: String): Unit = {\n    latestGoalScorer = scorer\n  }\n  def displayLastScorer(): String = {\n    if(latestGoalScorer != null) latestGoalScorer\n    else \"No goals yet.\"\n  }\n}"}
{"id":"0ebbb007-12a2-496b-84e3-7275f3633313","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def wrapJavaApiScore(score: String): Option[Int] = {\n  Option(score).flatMap(s => s.toIntOption)\n}"}
{"id":"f94ac3d4-1150-4d21-abf1-e5202d69d158","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getPlayerRatingApi(playerId: Int): Integer = {\n  if(playerId == 42) Integer.valueOf(7) else null\n}\ndef displayPlayerRating(playerId: Int): String = {\n  val rating = getPlayerRatingApi(playerId)\n  if(rating != null) s\"Rating: $rating\" else \"Unavailable\"\n}"}
{"id":"5ec63e4b-e3ab-4e0a-bb37-80849f286969","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeFetchTeamLogo(teamCode: String): Option[String] = Option(fetchTeamLogoFromJava(teamCode))\ndef fetchTeamLogoFromJava(teamCode: String): String = {\n  if teamCode == \"ABC\" then \"logo_url_abc\" else null\n}\ndef displayTeamLogo(teamCode: String): String = {\n  safeFetchTeamLogo(teamCode).getOrElse(\"Logo not found\")\n}"}
{"id":"1de8d181-ab8c-4733-b157-d7c7c6a2beae","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def lastScoringEvent(gameId: Long): String = {\n  val scoringEvent = getScoringEventFromLegacy(gameId)\n  if(scoringEvent != null) scoringEvent else \"No recent event\"\n}\ndef getScoringEventFromLegacy(gameId: Long): String = {\n  if(gameId == 1001L) \"Penalty by Smith\" else null\n}"}
{"id":"77b9e9fe-bdf6-458f-bd12-750336d3bfce","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def fetchLiveCommentary(eventId: Int): Option[String] = {\n  Option(javaFetchCommentary(eventId))\n}\ndef javaFetchCommentary(eventId: Int): String = {\n  if eventId == 77 then \"Corner for Home team\" else null\n}"}
{"id":"bb872912-1f5a-4eb5-9e8b-e8e2004bac5e","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def updateCurrentSetScore(currentScore: String): String = {\n  if(currentScore != null) s\"Set score: $currentScore\"\n  else \"Score data unavailable\"\n}\nval latestSetScore: String = null\nval setStatus = updateCurrentSetScore(latestSetScore)"}
{"id":"ed82ee76-8e7b-4d3d-969e-6713ec001d1c","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeFindPlayer(playerName: String): Option[Int] = {\n  players.find(_._1 == playerName).map(_._2)\n}\nval players = List((\"Jordan\", 24), (\"Kobe\", 8))\nval maybeNumber = safeFindPlayer(\"LeBron\")\nval result = maybeNumber.fold(\"Player not found\")(n => s\"Number: $n\")"}
{"id":"1fc5df36-43c4-4ffd-819b-cdc9ac53d7bf","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"object LeagueLiveFeed {\n  var updateTimestamp: java.sql.Timestamp = null\n  def setTimestamp(ts: java.sql.Timestamp): Unit = updateTimestamp = ts\n  def getLastUpdateTime: String = {\n    if(updateTimestamp != null) updateTimestamp.toString\n    else \"No updates yet\"\n  }\n}"}
{"id":"fcdc0232-36af-4926-a5c2-ad1071b74918","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeTopScorer(team: String): Option[String] = {\n  val scores = Map(\"Wolves\" -> \"Jimenez\", \"Arsenal\" -> \"Saka\")\n  scores.get(team)\n}\nval gs = safeTopScorer(\"Chelsea\").getOrElse(\"Unknown\")"}
{"id":"871fe9ab-518c-4896-9bbd-991bc624a61b","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getCurrentQuarterScore(gameId: Int): String = {\n  val qScore: String = fetchQuarterScore(gameId)\n  if(qScore != null) qScore else \"No score found\"\n}\ndef fetchQuarterScore(gameId: Int): String = if(gameId == 888) \"20-18\" else null\nval displayQuarter = getCurrentQuarterScore(888)"}
{"id":"811a9831-4848-4cb4-81fa-09c9102f10e6","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def maybeAssistLeader(team: String): Option[String] = teamStats.get(team).flatMap(_.get(\"assists\"))\nval teamStats = Map(\"Heat\" -> Map(\"assists\" -> \"Lowry\"))\nval assistLeaderDisplay = maybeAssistLeader(\"Celtics\").getOrElse(\"No leader data\")"}
{"id":"f3909746-9616-4732-be95-50a3203bde40","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getScoreFromExternal(matchCode: String): String = {\n  val score = externalAPIScore(matchCode)\n  if(score != null) score else \"No external data\"\n}\ndef externalAPIScore(matchCode: String): String = if(matchCode == \"BB32\") \"4-0\" else null"}
{"id":"7c2aa8e3-79c7-4b75-a5ee-350e57496632","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeUpdateScore(score: String): Option[Int] = Option(score).flatMap(_.toIntOption)\nval livePointsOpt = safeUpdateScore(null)\nval defaultPoints = livePointsOpt.getOrElse(0)"}
{"id":"6efa6c4b-3327-403b-8a8b-86788ec3bf83","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class FanNotification {\n  var notification: String = null\n  def setNotification(msg: String): Unit = notification = msg\n  def getNotification: String = {\n    if (notification != null) notification\n    else \"No news to display\"\n  }\n}"}
{"id":"05dedc74-4356-4e96-adb6-9e7b675afa04","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def getTeamStandings(team: String): Option[Int] = {\n  standings.get(team)\n}\nval standings = Map(\"Sharks\" -> 1, \"Kings\" -> 4)\nval description = getTeamStandings(\"Penguins\").fold(\"No standing info\")(p => s\"Standing: $p\")"}
{"id":"a69c570b-d001-428c-9c19-edb86fbb29ca","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def displayFinalWhistle(msg: String): String = {\n  if(msg != null) s\"Final: $msg\" else \"No final information available.\"\n}\nval endMessage: String = null\ndisplayFinalWhistle(endMessage)"}
{"id":"2c429d11-9881-4df1-8760-2314946c415e","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeFetchLiveFeed(feedId: Int): Option[String] = Option(javaLiveFeed(feedId))\ndef javaLiveFeed(feedId: Int): String = if(feedId == 7) \"Live: Kick-off\" else null\nval status = safeFetchLiveFeed(14).getOrElse(\"No live updates\")"}
{"id":"36d73054-90a0-48d7-81bb-b780a75ab141","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def updatePlayerInjuryStatus(name: String): String = {\n  val status: String = getInjuryStatusFromJava(name)\n  if(status != null) s\"Injury: $status\" else \"No info\"\n}\ndef getInjuryStatusFromJava(name: String): String = if(name == \"Messi\") \"Hamstring\" else null"}
{"id":"0788dc43-de75-4c07-8d49-6d843cfd772c","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Vehicle(id: String, model: String, year: Int)\ndef findVehicleById(id: String): Option[Vehicle] =\n  fleet.find(_.id == id)\ndef getVehicleModel(id: String): String =\n  findVehicleById(id).map(_.model).getOrElse(\"Unknown\")"}
{"id":"977d8545-cc21-43d4-8e65-c545fc3537af","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getPickupLocationOrNull(reservationId: String): String =\n  val loc = legacyFindPickupLocation(reservationId)\n  if (loc == null) null else loc\ndef legacyFindPickupLocation(id: String): String =\n  if (id == \"0\") null else \"Downtown Lot\""}
{"id":"06dab5d6-2136-456c-8a0a-56464ce400f4","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Customer(id: String, name: String)\ndef getCustomerEmail(customer: Customer): Option[String] =\n  val email = legacyCustomerEmailService(customer.id)\n  Option(email)\ndef legacyCustomerEmailService(id: String): String =\n  if (id == \"guest\") null else s\"$id@email.com\""}
{"id":"ef0e1f86-5083-4e43-98ee-1e35de9e1bea","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class RentalAgent(var name: String)\ndef updateRentalAgentName(agent: RentalAgent, newName: String): Unit =\n  if (agent != null) agent.name = newName"}
{"id":"6d9c0eef-098d-4eb9-88f4-6bab55420b1b","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def findCurrentRental(vehicleId: String): Option[String] =\n  Option(legacyCurrentRental(vehicleId))\ndef legacyCurrentRental(id: String): String =\n  if (id == \"unavailable\") null else \"RNT12345\""}
{"id":"d9a6a5b4-557b-480a-a364-2d9ba74fd924","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def cancelReservationOrNull(reservationId: String): String =\n  val result = legacyCancelReservation(reservationId)\n  if (result == null) null else result\ndef legacyCancelReservation(id: String): String =\n  if (id == \"none\") null else \"Canceled\""}
{"id":"90817c3c-b34d-43e8-a6b5-1e4800dffa48","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class RentalContract(contractId: String)\ndef safeGetRentalContract(id: String): Option[RentalContract] =\n  Option(findRentalContractOrNull(id))\ndef findRentalContractOrNull(id: String): RentalContract =\n  if (id.isEmpty) null else RentalContract(id)"}
{"id":"3f4a6d34-4e7c-465a-9c6b-f36a28196ead","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def isVehicleRegistered(vehicle: Vehicle): Boolean =\n  if (vehicle != null && vehicle.id != null) true else false"}
{"id":"03cba127-3511-4033-a854-20629b75921d","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getOptionalInsurance(customerId: String): Option[String] =\n  Option(legacyInsuranceLookup(customerId))\ndef legacyInsuranceLookup(id: String): String =\n  if (id == \"no_insurance\") null else \"FullCoverage\""}
{"id":"fcad77fd-d263-4ffd-9780-13ca9fac51e2","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def assignVehicleToCustomer(vehicle: Vehicle, customer: Customer): Unit =\n  if (vehicle == null || customer == null) ()\n  else println(s\"Assigned ${vehicle.model} to ${customer.name}\")"}
{"id":"401c57c5-aebb-4e78-988d-867dc60829f1","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getReservationStatus(reservationId: String): Option[String] =\n  Option(simulateReservationStatusApi(reservationId))\ndef simulateReservationStatusApi(id: String): String =\n  if (id == \"expired\") null else \"Active\""}
{"id":"f573d4c7-8068-46ac-b5fa-7da7f4a25119","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def updateFleetLocation(vehicle: Vehicle, location: String): Unit =\n  if (vehicle != null) vehicleToLocation.update(vehicle.id, location)\nval vehicleToLocation = scala.collection.mutable.Map[String, String]()"}
{"id":"95dd7969-40bd-4b4b-939b-c3bb93b429c5","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getFleetManagerContact(fleetId: String): Option[String] =\n  Option(javaLikeManagerContactGetter(fleetId))\ndef javaLikeManagerContactGetter(id: String): String =\n  if (id == \"not_found\") null else \"manager@carrental.com\""}
{"id":"f6ac0010-915d-453e-b8ff-5daff7c025a2","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def recordRentalEndDate(rentalId: String, endDate: String): Unit =\n  if (rentalId != null && endDate != null)\n    println(s\"Ending rental $rentalId at $endDate\")"}
{"id":"cc008719-3e91-4970-a6b7-0c0c8cb514e1","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getAvailableUpgrade(vehicleClass: String): Option[String] =\n  Option(checkUpgradeAvailability(vehicleClass))\ndef checkUpgradeAvailability(cls: String): String =\n  if (cls == \"Luxury\") null else \"SUV\""}
{"id":"4ea4dbb8-12f0-4b43-bd90-7cf41128df37","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getBillingAddressOrNull(customer: Customer): String =\n  val addr = findBillingAddress(customer.id)\n  if (addr == null) null else addr\ndef findBillingAddress(customerId: String): String =\n  if (customerId == \"missing\") null else \"123 Main St\""}
{"id":"87197555-8b44-40aa-a949-6247eb5014aa","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def notifyCustomerAboutMaintenance(vehicleId: String): Option[String] =\n  Option(getNotificationMessage(vehicleId)).map(msg => s\"Notify: $msg\")\ndef getNotificationMessage(id: String): String =\n  if (id == \"no_notify\") null else s\"Maintenance scheduled for $id\""}
{"id":"135a173c-af00-4969-8a65-0f2c5063f866","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def setContractExpiration(contract: RentalContract, date: String): Unit =\n  if (contract != null) println(s\"Set expiration to $date for ${contract.contractId}\")"}
{"id":"1778df46-d6a2-4eed-91b3-66ad705994f6","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def validateDriverLicense(licenseId: String): Option[String] =\n  Option(legacyLicenseValidator(licenseId)).filter(_.nonEmpty)\ndef legacyLicenseValidator(id: String): String =\n  if (id == \"bad\") null else \"VALID\""}
{"id":"57e62a36-90f5-4b13-bf0d-c8863b6b0b67","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def increaseLoyaltyPoints(customer: Customer, points: Integer): Unit =\n  if (customer != null && points != null) loyaltyPoints.update(customer.id, points)\nval loyaltyPoints = scala.collection.mutable.Map[String, Integer]()"}
{"id":"dd17b758-30d2-42b8-a725-0a18a1196651","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class RentalCar(licensePlate: String, make: String, model: String)\ndef getFleetCarOption(cars: List[RentalCar], plate: String): Option[RentalCar] =\n  cars.find(_.licensePlate == plate)"}
{"id":"8e5f4c0e-b83f-4e96-bdbe-b9dce37341e8","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"object ReservationUtils:\n  def extractCustomerId(reservation: Reservation): Option[String] =\n    Option(reservation.customer).flatMap(customer => Option(customer.id))\nclass Customer(val id: String)\nclass Reservation(val customer: Customer)"}
{"id":"f0c724bb-ecb7-45bb-a6b1-798dbc97a578","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def fetchAvailableCar(carId: String): Car =\n  val carDb = Map(\"C123\" -> new Car(\"C123\", \"Tesla\"))\n  if (carDb.contains(carId)) carDb(carId)\n  else null\nclass Car(val id: String, val brand: String)"}
{"id":"1eb7f53c-a8d4-4ebd-8826-cf844d3e9979","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class Booking(val car: Car)\ndef getCarMake(booking: Booking): String =\n  if (booking != null && booking.car != null) booking.car.brand\n  else \"Unknown\""}
{"id":"7ae9983f-b9d3-4b0d-97c1-db8c3a72c8ce","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def findFleetLocation(car: RentalCar): Option[String] =\n  Option(car.parkingSpot)"}
{"id":"75e4f4f3-bdf6-4657-b392-2f4ced91657c","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getInsuranceDetails(rentalAgreement: RentalAgreement): Option[Insurance] =\n  Option(rentalAgreement.insurance)\nclass Insurance(val policyNumber: String)\nclass RentalAgreement(val insurance: Insurance)"}
{"id":"634f79b3-dbff-4e3d-baaa-cd1ddc3c0b6f","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class Staff(val name: String)\ndef getAssignedManager(branch: Branch): Staff =\n  if (branch.manager != null) branch.manager\n  else null\nclass Branch(val manager: Staff)"}
{"id":"9657a7bc-d640-41f1-876f-87bab2b3ee01","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def returnOdometerReading(car: RentalCar): java.lang.Integer =\n  if (car.odometer == null) null\n  else car.odometer\nclass RentalCar(val odometer: java.lang.Integer)"}
{"id":"87f8bf46-71d3-469d-9fc7-1c639d88d454","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getFleetVehicleOption(fleet: List[Car], requiredType: String): Option[Car] =\n  fleet.find(_.carType == requiredType)\nclass Car(val carType: String)"}
{"id":"d8d03d02-4690-4613-a2fb-4b672a42a05f","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getRentalStartDate(rental: Rental): Option[java.time.LocalDate] =\n  Option(rental.startDate)\nclass Rental(val startDate: java.time.LocalDate)"}
{"id":"254bfbac-8c5b-41b4-8590-130699cd4080","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def cancelReservation(reservation: Reservation): Boolean =\n  if (reservation == null) false\n  else\n    reservation.cancelled = true\n    true\nclass Reservation(var cancelled: Boolean)"}
{"id":"cd9597b3-8e99-49f8-9701-b61ab49d1ebe","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getLatestDriver(assignment: DriverAssignment): Option[Driver] =\n  Option(assignment.driver)\nclass Driver(val name: String)\nclass DriverAssignment(val driver: Driver)"}
{"id":"155ae519-832b-4f70-b8d5-b42193ec0593","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getPromotionDetails(promoCode: String): Promotion =\n  if (promoCode == null) null\n  else\n    new Promotion(promoCode, 10)\nclass Promotion(val code: String, val discount: Int)"}
{"id":"4574a708-d35d-4835-b516-eaf98f4ba23c","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def extractLicensePlate(car: RentalCar): Option[String] =\n  Option(car.licensePlate)\nclass RentalCar(val licensePlate: String)"}
{"id":"4787efd8-4253-4a96-9a74-0723b0e71ba4","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def findReservationHolder(reservation: Reservation): Staff =\n  if (reservation.staff != null) reservation.staff\n  else null\nclass Reservation(val staff: Staff)\nclass Staff(val name: String)"}
{"id":"1239e773-70b5-404a-bd66-cc25914939af","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getActiveReservationOption(rentals: List[Reservation]): Option[Reservation] =\n  rentals.find(_.status == \"Active\")\nclass Reservation(val status: String)"}
{"id":"37872fdf-ff91-46ae-8b12-92801e1a106b","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def lastServiceDate(vehicle: FleetCar): java.time.LocalDate =\n  if (vehicle == null || vehicle.lastService == null) null\n  else vehicle.lastService\nclass FleetCar(val lastService: java.time.LocalDate)"}
{"id":"282e626a-f6b0-4c3d-9857-692800aeb964","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getBranchLocation(branch: Branch): Option[String] =\n  Option(branch.address)\nclass Branch(val address: String)"}
{"id":"b0a4c33b-fca0-4b1c-bd33-145875694673","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getRentalPrice(rate: RentalRate): java.lang.Double =\n  if (rate.price == null) null else rate.price\nclass RentalRate(val price: java.lang.Double)"}
{"id":"8e4f0133-dbbc-4b4d-b058-d10c17cc225e","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getOptionalLoyaltyId(customer: Customer): Option[String] =\n  Option(customer.loyaltyId)\nclass Customer(val loyaltyId: String)"}
{"id":"901729ef-0a51-478d-b2fe-5f4c17607f38","timestamp":1746099233449,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class OrderId(value: String)\ncase class PaymentToken(value: String)\nsealed trait CheckoutError\ncase object InvalidOrder extends CheckoutError\ncase object PaymentFailed extends CheckoutError\n\ndef authorizeOrder(orderId: OrderId): Either[CheckoutError, OrderId] =\n  if (orderId.value.nonEmpty) Right(orderId) else Left(InvalidOrder)\n\ndef processPayment(token: PaymentToken): Either[CheckoutError, String] =\n  if (token.value == \"ok\") Right(\"Payment processed\") else Left(PaymentFailed)\n\nval result = for {\n  authorized <- authorizeOrder(OrderId(\"123\"))\n  status     <- processPayment(PaymentToken(\"ok\"))\n} yield status"}
{"id":"74008bba-5bc4-4c87-ab57-41b2b161603c","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class PaymentException(msg: String) extends Exception(msg)\n\nobject CheckoutHandler {\n  def process(items: List[String], paymentToken: String): String = {\n    if (items.isEmpty)\n      throw new PaymentException(\"No items to checkout\")\n    if (paymentToken != \"valid-token\")\n      throw new PaymentException(\"Invalid payment token\")\n    \"Checkout successful\"\n  }\n\n  def safeProcess(items: List[String], paymentToken: String): String = {\n    try {\n      process(items, paymentToken)\n    } catch {\n      case e: Exception => \"Checkout error: \" + e.getMessage\n    }\n  }\n}"}
{"id":"f3349241-f806-49f2-8bec-bef07e89e898","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait PromoCodeError\ncase object InvalidPromo extends PromoCodeError\ncase object ExpiredPromo extends PromoCodeError\n\ndef applyPromoCode(code: String): Either[PromoCodeError, Double] =\n  if (code == \"SUMMER21\") Right(10.0)\n  else if (code == \"OLD\") Left(ExpiredPromo)\n  else Left(InvalidPromo)\n\nval discount = applyPromoCode(\"SUMMER21\").fold(_ => 0.0, d => d)"}
{"id":"a107bd79-524a-4289-8478-5d62a5f4d6dd","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class StockUnavailableException extends Exception(\"Stock unavailable\")\n\ndef reserveProduct(productId: String, quantity: Int): Boolean = {\n  if (quantity <= 0) throw new StockUnavailableException\n  true\n}\n\nobject StockChecker {\n  def tryReserve(productId: String, quantity: Int): String = {\n    try {\n      val ok = reserveProduct(productId, quantity)\n      \"Reserved\"\n    } catch {\n      case _: StockUnavailableException => \"Could not reserve stock\"\n    }\n  }\n}"}
{"id":"bcf4a769-7a99-4c9e-8b58-69b243d8848e","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseShippingAddress(raw: String): Option[String] =\n  if (raw.contains(\",\")) Some(raw) else None\n\ndef calculateShippingCost(address: String): Try[Double] = Try {\n  if (address.contains(\"Express\")) 15.99 else 4.99\n}\n\nval cost = parseShippingAddress(\"1 Main St, Express City\")\n  .flatMap(addr => calculateShippingCost(addr).toOption)"}
{"id":"3b46334d-9925-44a8-98aa-b8e8684f0dd4","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getCartTotal(amounts: List[Double]): Double = {\n  if (amounts.exists(_ < 0)) {\n    throw new IllegalArgumentException(\"Negative amount in cart\")\n  }\n  amounts.sum\n}\n\nval total = try {\n  getCartTotal(List(5.0, -1.2, 3.5))\n} catch {\n  case e: IllegalArgumentException => 0.0\n}"}
{"id":"bd529fd2-33f9-4a88-8832-6c4796d70d8b","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait CheckoutValidationError\ncase object EmptyCart extends CheckoutValidationError\ncase object InvalidCoupon extends CheckoutValidationError\n\ndef validateCart(items: List[String], coupon: String): Either[CheckoutValidationError, List[String]] =\n  if (items.isEmpty) Left(EmptyCart)\n  else if (coupon != \"SAVE10\" && coupon.nonEmpty) Left(InvalidCoupon)\n  else Right(items)\n\nval checkedCart = validateCart(List(\"T-shirt\"), \"\")"}
{"id":"57c8c77f-f816-4f16-b389-3e6fd174a5aa","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"object PaymentApplier {\n  def applyPayment(amount: Double, paymentMethod: String): String = {\n    try {\n      if (amount <= 0) {\n        throw new RuntimeException(\"Invalid amount\")\n      }\n      if (paymentMethod != \"CreditCard\") {\n        throw new RuntimeException(\"Unsupported payment method\")\n      }\n      \"Payment accepted\"\n    } catch {\n      case e: RuntimeException => s\"Error: ${e.getMessage}\"\n    }\n  }\n}\nPaymentApplier.applyPayment(0.0, \"Paypal\")"}
{"id":"52383db6-7358-40b2-b8e0-c5834270d3c2","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait InventoryError\ncase object ProductOutOfStock extends InventoryError\n\ncase class Product(sku: String, available: Int)\n\ndef checkInventory(product: Product, requested: Int): Either[InventoryError, Product] =\n  if (product.available >= requested) Right(product)\n  else Left(ProductOutOfStock)\n\nval available = checkInventory(Product(\"TSH123\", 8), 10)"}
{"id":"4ed23e95-8928-4e08-8d3c-d4f1c2e55fe6","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class ShippingAddressException extends Exception(\"Invalid shipping address\")\n\ndef validateShippingAddress(address: String): Boolean = {\n  if (address.length < 10) throw new ShippingAddressException\n  true\n}\n\nval result = try {\n  validateShippingAddress(\"London\")\n} catch {\n  case _: ShippingAddressException => false\n}"}
{"id":"b30a914f-90fc-45f8-99e4-ae98873f7014","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait PaymentValidationError\ncase object CardDeclined extends PaymentValidationError\ncase object InvalidCardNumber extends PaymentValidationError\n\ndef validateCard(cardNum: String): Either[PaymentValidationError, String] =\n  if (cardNum.length != 16) Left(InvalidCardNumber)\n  else if (cardNum.forall(_.isDigit)) Right(cardNum)\n  else Left(CardDeclined)\n\nval cardStatus = validateCard(\"1234567812345678\")"}
{"id":"c272db50-6067-4b57-b57c-c5a08d913448","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class CouponException(msg: String) extends Exception(msg)\n\ndef redeemCoupon(code: String): Double = {\n  if (code == \"DEAL20\") 20.0\n  else throw new CouponException(\"Coupon invalid\")\n}\n\nval discount = try {\n  redeemCoupon(\"WRONG\")\n} catch {\n  case e: CouponException => 0.0\n}"}
{"id":"d602dfb2-0d66-49bb-8832-a74fb62f3364","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryParseOrderId(raw: String): Option[String] =\n  Option.when(raw.matches(\"ORD[0-9]+\"))(raw)\n\ndef fetchOrderDetails(orderId: String): Try[String] = Try {\n  if (orderId.startsWith(\"ORD\")) s\"Order: $orderId\"\n  else throw new Exception(\"Order not found\")\n}\n\nval details = tryParseOrderId(\"ORD1337\").flatMap(id => fetchOrderDetails(id).toOption)"}
{"id":"5a457835-fdf3-4a0e-8283-f878d409b893","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"object OrderConfirmer {\n  def confirmOrderStatus(id: String): String = {\n    try {\n      if (id.isEmpty) throw new Exception(\"No order ID\")\n      \"Order confirmed\"\n    } catch {\n      case e: Exception => \"Confirmation failed\"\n    }\n  }\n}"}
{"id":"fbb161bd-81aa-43a4-ab06-5bb805182c3c","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait UpdateCartError\ncase object ProductUnavailable extends UpdateCartError\n\ncase class Cart(items: List[String])\n\ndef addProductToCart(cart: Cart, prod: String, available: Boolean): Either[UpdateCartError, Cart] =\n  if (available) Right(cart.copy(items = prod :: cart.items))\n  else Left(ProductUnavailable)\n\nval updatedCart = addProductToCart(Cart(List(\"Pants\")), \"Socks\", false)"}
{"id":"13b56c6a-0968-4396-aa1d-87192c639d66","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def applyDelayedCharge(amount: Double): Double = {\n  if (amount < 0) throw new ArithmeticException(\"Negative charge amount\")\n  amount + 2.0\n}\n\nval charged = try {\n  applyDelayedCharge(-30)\n} catch {\n  case _: ArithmeticException => 0.0\n}"}
{"id":"0baf4951-b5ce-42bb-8bfd-c7dc5ab8161c","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait EmailNotificationError\ncase object EmailAddressInvalid extends EmailNotificationError\n\ncase class Customer(email: String)\n\ndef sendOrderConfirmation(customer: Customer): Either[EmailNotificationError, String] =\n  if (customer.email.contains(\"@\")) Right(\"Sent\")\n  else Left(EmailAddressInvalid)\n\nval notice = sendOrderConfirmation(Customer(\"user@host.com\"))"}
{"id":"b8211ebc-da4d-4782-a3ae-96c6120b53a1","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class OrderNotFoundException(msg: String) extends Exception(msg)\n\ndef getOrderStatus(orderNo: Int): String = {\n  if (orderNo < 1000) throw new OrderNotFoundException(\"Order missing\")\n  \"Status: Dispatched\"\n}\n\nval status = try {\n  getOrderStatus(12)\n} catch {\n  case e: OrderNotFoundException => \"Order not found\"\n}"}
{"id":"ab93d130-ba8e-4b70-a5c8-4f8ad4f929d5","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePaymentAmount(raw: String): Try[Double] = Try {\n  raw.toDouble\n}\n\nval paymentTry = parsePaymentAmount(\"12.34\").recover {\n  case _ => 0.0\n}"}
{"id":"fd93e1a3-e6bd-4f56-8e31-17fc7ef10aa3","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def applyExpressFee(selected: Boolean): Double = {\n  if (!selected) throw new Exception(\"Express shipping not chosen\")\n  8.95\n}\n\nval fee = try {\n  applyExpressFee(false)\n} catch {\n  case _: Exception => 0.0\n}"}
{"id":"4627a2d5-b26d-422c-9f12-304c7e77a076","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"case class CartItem(productId: String, quantity: Int)\nclass PaymentDeclinedException(msg: String) extends Exception(msg)\nobject CartCheckout {\n  def authorizePayment(cardNumber: String, amount: Double): Boolean = {\n    if cardNumber.nonEmpty && amount > 0 then true\n    else throw new PaymentDeclinedException(\"Payment was declined.\")\n  }\n  def checkout(items: List[CartItem], cardNumber: String): String = {\n    try {\n      val total = items.map(_.quantity * 10).sum\n      if (authorizePayment(cardNumber, total)) \"Checkout completed.\"\n      else throw new Exception(\"Unexpected failure.\")\n    } catch {\n      case e: PaymentDeclinedException => \"Checkout failed: \" + e.getMessage\n      case e: Exception => \"Unknown error: \" + e.getMessage\n    }\n  }\n}"}
{"id":"bb5cc302-9f11-4301-a68d-c2f6dd4ea9d7","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait CheckoutError\ncase object EmptyCartError extends CheckoutError\ncase object InvalidShippingInfo extends CheckoutError\ncase class PaymentError(message: String) extends CheckoutError\ncase class CheckoutSummary(orderId: String, total: Double)\ndef processCheckout(cartItems: List[String], shippingAddress: String, paymentToken: String): Either[CheckoutError, CheckoutSummary] = {\n  if cartItems.isEmpty then Left(EmptyCartError)\n  else if shippingAddress.isBlank then Left(InvalidShippingInfo)\n  else if paymentToken.length < 12 then Left(PaymentError(\"Payment token invalid.\"))\n  else Right(CheckoutSummary(\"ORD-98214\", cartItems.length * 55.0))\n}"}
{"id":"f27e9dd8-0288-4950-8822-c5efc0afb6eb","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class AddressValidationException(msg: String) extends Exception(msg)\ndef validateAddress(address: String): Boolean = {\n  if address.length < 10 then throw new AddressValidationException(\"Address too short.\")\n  address.matches(\".*\\d+.*\")\n}\ndef startShipping(address: String): String = {\n  try {\n    if validateAddress(address) then \"Shipping started.\"\n    else throw new Exception(\"Address validation failed.\")\n  } catch {\n    case e: AddressValidationException => \"Shipping failed: \" + e.getMessage\n  }\n}"}
{"id":"bdbe8573-66e0-49c1-ad85-ecd56cb62362","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait PaymentResult\ncase object PaymentApproved extends PaymentResult\ncase class PaymentRejected(reason: String) extends PaymentResult\ndef processPayment(amount: Double, creditCard: String): Either[PaymentRejected, PaymentApproved.type] = {\n  if amount <= 0 then Left(PaymentRejected(\"Amount must be positive.\"))\n  else if !creditCard.forall(_.isDigit) then Left(PaymentRejected(\"Invalid card number.\"))\n  else Right(PaymentApproved)\n}"}
{"id":"36bc9bee-889b-4c54-8d7f-2fd48ff4e4e9","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class InventoryException(msg: String) extends Exception(msg)\ndef reserveInventory(productId: String, quantity: Int): Boolean = {\n  if quantity <= 0 then throw new InventoryException(\"Quantity must be positive.\")\n  if productId == \"out-of-stock\" then throw new InventoryException(\"Item out of stock.\")\n  true\n}\ndef handleInventory(productId: String, quantity: Int): String = {\n  try {\n    reserveInventory(productId, quantity)\n    \"Inventory reserved.\"\n  } catch {\n    case e: InventoryException => s\"Failure: ${e.getMessage}\"\n  }\n}"}
{"id":"6b90c1e3-7e38-4f79-8ad9-c87e9f15eae7","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait PromotionError\ntype Discount = Double\ncase object PromotionNotFound extends PromotionError\ncase class PromotionApplied(discount: Discount)\ndef applyPromoCode(promo: String, total: Double): Either[PromotionError, PromotionApplied] = {\n  if promo == \"\" then Left(PromotionNotFound)\n  else if total < 100 then Left(PromotionNotFound)\n  else Right(PromotionApplied(20.0))\n}"}
{"id":"35a8b1db-b772-4601-addb-aaf5eacc2c0c","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class CouponInvalidException(msg: String) extends Exception(msg)\ndef applyCouponCode(code: String, cartTotal: Double): Double = {\n  if code.isEmpty then throw new CouponInvalidException(\"Coupon code cannot be empty.\")\n  if cartTotal < 50 then throw new CouponInvalidException(\"Minimum cart total not met.\")\n  cartTotal - 5.0\n}\ndef checkoutWithCoupon(code: String, total: Double): String = {\n  try {\n    val newTotal = applyCouponCode(code, total)\n    s\"Discount applied. Total: $$newTotal\"\n  } catch {\n    case e: CouponInvalidException => \"Error: \" + e.getMessage\n  }\n}"}
{"id":"41a97a08-51a7-45d3-abaa-799e67245db8","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait ShippingError\ncase object AddressNotFound extends ShippingError\ncase object ShippingProviderUnavailable extends ShippingError\ncase class ShippingLabel(trackingId: String)\ndef requestShippingLabel(address: String, provider: String): Either[ShippingError, ShippingLabel] = {\n  if address.isEmpty then Left(AddressNotFound)\n  else if provider != \"FastShip\" then Left(ShippingProviderUnavailable)\n  else Right(ShippingLabel(\"1Z99XYZ123\"))\n}"}
{"id":"66d41aff-c2f7-4cac-9b98-24b6b1622c8e","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class InsufficientBalanceException(msg: String) extends Exception(msg)\ndef debitWallet(customerId: String, amount: Double): Unit = {\n  if amount > 1000 then throw new InsufficientBalanceException(\"Insufficient funds.\")\n}\ndef walletPayment(customerId: String, amount: Double): String = {\n  try {\n    debitWallet(customerId, amount)\n    \"Wallet charged.\"\n  } catch {\n    case e: InsufficientBalanceException => s\"Error: ${e.getMessage}\"\n  }\n}"}
{"id":"0e0c962b-40c6-489c-8214-242aef3ed0c6","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait OrderValidationError\ncase object MissingBillingInfo extends OrderValidationError\ncase object CartEmptyError extends OrderValidationError\ncase class Order(id: String)\ndef validateOrder(cart: List[Int], billingInfo: Option[String]): Either[OrderValidationError, Order] = {\n  if cart.isEmpty then Left(CartEmptyError)\n  else if billingInfo.isEmpty then Left(MissingBillingInfo)\n  else Right(Order(\"ORDER345\"))\n}"}
{"id":"f19d5d76-16c3-40f7-b97a-f6e17412ba77","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class PaymentGatewayTimeoutException(msg: String) extends Exception(msg)\ndef performPayment(amount: Double): String = {\n  if amount > 5000 then throw new PaymentGatewayTimeoutException(\"Timeout contacting Gateway\")\n  \"Payment Successful\"\n}\ndef safePay(amount: Double): String = {\n  try {\n    performPayment(amount)\n  } catch {\n    case e: PaymentGatewayTimeoutException => \"Gateway timed out: \" + e.getMessage\n  }\n}"}
{"id":"1b2b8418-83eb-4d90-a7e5-beb694653ef0","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef submitOrder(payment: Double): Try[String] = {\n  Try {\n    if payment < 20 then sys.error(\"Minimum order amount is 20.\")\n    else \"Order placed successfully.\"\n  }\n}"}
{"id":"d1ac762f-ce61-4aee-983c-f3b1417d10a7","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class InvalidOrderIdException(msg: String) extends Exception(msg)\ndef fetchOrderDetails(orderId: String): String = {\n  if !orderId.startsWith(\"ORD-\") then throw new InvalidOrderIdException(\"Invalid order ID.\")\n  s\"Order details for $orderId\"\n}\ndef orderSummary(orderId: String): String = {\n  try fetchOrderDetails(orderId)\n  catch case e: InvalidOrderIdException => \"Could not fetch: \" + e.getMessage\n}"}
{"id":"35e0976b-0592-4c2b-9775-06119b30effc","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait CartUpdateError\ncase object ItemNotFoundInCatalog extends CartUpdateError\ncase class Cart(items: List[String])\ndef addToCart(cart: Cart, itemId: String): Either[CartUpdateError, Cart] = {\n  if itemId.startsWith(\"SKU-\") then Right(Cart(cart.items :+ itemId))\n  else Left(ItemNotFoundInCatalog)\n}"}
{"id":"995abf6c-402d-4ee2-9a69-f2f12739694c","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class CheckoutLimitExceededException(msg: String) extends Exception(msg)\ndef setCartLimit(limit: Int): Unit = {\n  if limit > 100 then throw new CheckoutLimitExceededException(\"Cart item limit exceeded.\")\n}\ndef safeCartLimit(limit: Int): Unit = {\n  try setCartLimit(limit)\n  catch case e: CheckoutLimitExceededException => println(\"Limit error: \" + e.getMessage)\n}"}
{"id":"611640dd-017c-4332-a709-80db802133c8","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait StockError\ncase object ItemSoldOut extends StockError\ndef checkStockLevel(productSku: String, requestQty: Int): Option[Int] = {\n  if productSku.endsWith(\"1\") && requestQty > 2 then None\n  else Some(requestQty)\n}"}
{"id":"6fc71e90-6b52-4d12-854a-23d6a6d0ecd0","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class MissingCustomerDetailsException(msg: String) extends Exception(msg)\ndef getCustomerEmail(customerId: String): String = {\n  if customerId.isEmpty then throw new MissingCustomerDetailsException(\"No customer ID provided.\")\n  \"customer@mail.com\"\n}\ndef sendInvoiceEmail(customerId: String): Boolean = {\n  try\n    getCustomerEmail(customerId)\n    true\n  catch\n    case e: MissingCustomerDetailsException => false\n}"}
{"id":"047be800-5e86-4cd6-805b-d6df87b02cc9","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"import scala.util.Try\ncase class LoyaltyPoints(total: Int)\ndef awardLoyaltyPoints(orderId: String, value: Double): Try[LoyaltyPoints] = {\n  Try {\n    if !orderId.startsWith(\"ORD-\") then sys.error(\"Invalid order for points.\")\n    else LoyaltyPoints((value / 10).toInt)\n  }\n}"}
{"id":"711cc621-a544-42d0-890f-8dc3eed68c7d","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class NegativeBasketSizeException(msg: String) extends Exception(msg)\ndef createBasket(items: Int): Unit = {\n  if items < 0 then throw new NegativeBasketSizeException(\"Basket size cannot be negative.\")\n}\ndef newBasket(items: Int): String = {\n  try {\n    createBasket(items)\n    \"Basket created.\"\n  } catch {\n    case e: NegativeBasketSizeException => \"Failure: \" + e.getMessage\n  }\n}"}
{"id":"77009cda-a6d5-4d94-8db3-18e6c2fe7597","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait RefundError\ncase object InvalidRefundAmount extends RefundError\ncase object OrderNotRefundable extends RefundError\ncase class RefundReceipt(refundId: String)\ndef attemptRefund(orderId: String, amount: Double, refundable: Boolean): Either[RefundError, RefundReceipt] = {\n  if amount <= 0 then Left(InvalidRefundAmount)\n  else if !refundable then Left(OrderNotRefundable)\n  else Right(RefundReceipt(\"REFUND123\"))\n}"}
{"id":"665150e7-587c-4a67-8b03-5725489b66db","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"case class InsufficientFundsException(message: String) extends Exception(message)\ndef withdrawFromAccount(accountId: String, amount: BigDecimal): BigDecimal = {\n  val balance = 50.0\n  if (amount > balance) throw new InsufficientFundsException(\"Not enough money in account.\")\n  balance - amount\n}"}
{"id":"4fe1a74c-a883-4bc5-98cf-5967ac84d8e5","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def transferBetweenAccounts(from: String, to: String, amount: BigDecimal): Unit = {\n  if (amount <= 0) throw new IllegalArgumentException(\"Transfer amount must be positive.\")\n  val fromBalance = 100.0\n  if (fromBalance < amount) throw new RuntimeException(\"Insufficient balance.\")\n  // simulated transfer logic\n}"}
{"id":"adbbf8ff-11d7-46d2-a60c-f6bd33e728ec","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def authenticateUser(token: String): String = {\n  if (token != \"valid-token\") throw new SecurityException(\"Invalid authentication token.\")\n  \"User123\"\n}\n"}
{"id":"ef64815e-52e2-457c-aede-feea53b66b4f","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def parsePaymentReference(ref: String): Int = {\n  try ref.toInt\n  catch {\n    case ex: NumberFormatException => throw new RuntimeException(\"Invalid payment reference ID.\")\n  }\n}"}
{"id":"89b6813a-c8bd-4aef-8a74-e701c20daca0","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def getAccountStatement(userId: String): String = {\n  try {\n    if (userId.isEmpty) throw new NullPointerException(\"User ID required.\")\n    \"Statement: ...\"\n  } catch {\n    case e: Exception => \"Could not fetch statement. Reason: \" + e.getMessage\n  }\n}"}
{"id":"a81bdfde-77b3-4b1b-8563-161865d6ce40","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def performMobileDeposit(accountNumber: String, amount: BigDecimal): String = {\n  try {\n    if (amount <= 0) throw new IllegalArgumentException(\"Deposit must be positive.\")\n    s\"Deposit of $$amount to $$accountNumber successful.\"\n  } catch {\n    case e: Exception => s\"Deposit failed: $${e.getMessage}\"\n  }\n}"}
{"id":"f94e7050-e9ae-4d0f-b8f9-9ae614071d80","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class TransactionException(message: String) extends Exception(message)\ndef updateTransactionStatus(transactionId: String, success: Boolean): Unit = {\n  if (!success) throw new TransactionException(\"Transaction failed to complete.\")\n}\n"}
{"id":"6648fd0c-c7f8-4dce-908a-37ac046d5fea","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def resetPassword(userEmail: String): Boolean = {\n  if (!userEmail.contains(\"@\")) throw new IllegalArgumentException(\"Invalid email address.\")\n  true\n}\n"}
{"id":"91de032d-6269-480a-b758-d0134f96f0b9","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def fetchTransactionById(transactionId: String): String = {\n  try {\n    if (transactionId == \"not_found\") throw new Exception(\"Transaction not found.\")\n    \"Transaction details found.\"\n  } catch {\n    case e: Exception => \"Could not retrieve: \" + e.getMessage\n  }\n}"}
{"id":"b3da6f40-1c09-4598-9f49-412426508e74","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class MobileBankingAccessException(msg: String) extends Exception(msg)\ndef changeUserPin(userId: String, newPin: String): Unit = {\n  if (newPin.length < 4) throw new MobileBankingAccessException(\"PIN too short.\")\n}"}
{"id":"9818dc01-2d86-4b1d-a5e0-60652f126639","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait MobileBankingError\ncase object AccountNotFound extends MobileBankingError\ncase object InsufficientAccountBalance extends MobileBankingError\n\ndef debitAccount(accountId: String, amount: BigDecimal): Either[MobileBankingError, BigDecimal] = {\n  val balance = 200.0\n  if (accountId != \"existing-id\") Left(AccountNotFound)\n  else if (amount > balance) Left(InsufficientAccountBalance)\n  else Right(balance - amount)\n}"}
{"id":"39582c55-536e-43bd-9a53-786adaaeb30e","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait LoginError\ncase object InvalidCredentials extends LoginError\ncase object LockedAccount extends LoginError\n\ndef loginUser(email: String, password: String): Either[LoginError, String] = {\n  if (email != \"user@bank.com\") Left(InvalidCredentials)\n  else if (password == \"locked\") Left(LockedAccount)\n  else Right(\"session-token-12345\")\n}"}
{"id":"09f73b70-6b9c-428e-8afb-33839180de06","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def getCustomerMobileNumber(customerId: String): Option[String] = {\n  if (customerId == \"abc\") Some(\"+1234567890\")\n  else None\n}"}
{"id":"ab1b094e-8e10-4220-8861-79a88c91ba84","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"import scala.util.Try\ndef parseAccountNumber(raw: String): Try[Long] = Try {\n  raw.toLong\n}\n"}
{"id":"4d588350-a1fe-4822-bd11-3c253eb645a8","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object ExceedsLimit extends PaymentError\ncase object CardInactive extends PaymentError\n\ndef processCardPayment(cardId: String, amount: BigDecimal): Either[PaymentError, String] = {\n  if (amount > 1000) Left(ExceedsLimit)\n  else if (cardId == \"deactivated\") Left(CardInactive)\n  else Right(\"Payment processed successfully\")\n}"}
{"id":"7d999101-9c30-47bf-ac3b-cab0d6b2206b","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def safeGetAvailableBalance(accountId: String): Option[BigDecimal] = {\n  if (accountId == \"active-123\") Some(450.25)\n  else None\n}"}
{"id":"d4ce52fd-84fb-4226-9f76-af63cec1b6e9","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef mobilePinChange(oldPin: String, newPin: String): Try[String] = Try {\n  if (newPin.length != 4) throw new RuntimeException(\"PIN must be 4 digits.\")\n  \"PIN updated\"\n}"}
{"id":"7bacb84d-6e1d-41c9-ad14-5e93616e843a","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait TransactionFetchError\ncase object TransactionIdMissing extends TransactionFetchError\n\ndef fetchRecentTransaction(transactionId: String): Either[TransactionFetchError, String] = {\n  if (transactionId.isEmpty) Left(TransactionIdMissing)\n  else Right(\"Transaction details for \" + transactionId)\n}"}
{"id":"1d576f2f-023b-4951-9a23-85896bf3a6d8","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def verifyMobileDevice(deviceId: Option[String]): Either[String, String] = {\n  deviceId match {\n    case Some(id) => Right(s\"Device $id verified.\")\n    case None => Left(\"Device ID required.\")\n  }\n}"}
{"id":"ca2a134d-ad69-494a-888e-6facbb91d6bb","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"import scala.util.Try\ndef calculateInstallment(principal: BigDecimal, period: Int): Try[BigDecimal] = Try {\n  if (period <= 0) throw new IllegalArgumentException(\"Period must be positive.\")\n  principal / period\n}"}
{"id":"549f81d8-4c93-445d-abea-2f72fe79b534","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait AccountUpdateError\ncase object InvalidContactInfo extends AccountUpdateError\n\ndef updateContactDetails(userId: String, phone: String): Either[AccountUpdateError, String] = {\n  if (!phone.forall(_.isDigit)) Left(InvalidContactInfo)\n  else Right(\"Contact details updated.\")\n}"}
{"id":"67b8e12d-f53f-4889-ab3e-5e3ad740c5e0","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"object LoginService:\n  def login(username: String, password: String): Option[String] =\n    if username == \"mobileUser\" && password == \"securePass\" then Some(\"token123\")\n    else None"}
{"id":"94220d53-d113-456d-bf92-d32164914fec","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class InvalidAccountException(msg: String) extends Exception(msg)\nobject FundTransfer:\n  def transferFunds(fromAccount: String, toAccount: String, amount: Double): String =\n    if amount <= 0 then throw new IllegalArgumentException(\"Amount must be positive\")\n    if fromAccount == toAccount then throw new InvalidAccountException(\"Cannot transfer to same account\")\n    s\"Transferred $$amount from $$fromAccount to $$toAccount\""}
{"id":"46a6deda-4fa7-4698-8cfe-1e1c232268aa","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"object NotificationService:\n  def sendPushNotification(userId: String, message: String): Either[String, Unit] =\n    if message.isEmpty then Left(\"Notification message is empty\")\n    else Right(())"}
{"id":"863b967c-fcb0-4cec-a707-f29685a4d0dd","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object BalanceChecker:\n  def getBalance(accountNumber: String): Double =\n    try\n      if accountNumber.isEmpty then throw new NoSuchElementException(\"Account number is empty\")\n      2050.75\n    catch\n      case e: Exception => 0.0"}
{"id":"50aca98b-6c2d-468f-be29-802487dfa349","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait TransactionError\ncase object InsufficientFunds extends TransactionError\ncase object ExceedsLimit extends TransactionError\nobject TransactionValidation:\n  def validateWithdrawal(balance: Double, withdrawal: Double): Either[TransactionError, Double] =\n    if withdrawal > balance then Left(InsufficientFunds)\n    else if withdrawal > 5000 then Left(ExceedsLimit)\n    else Right(balance - withdrawal)"}
{"id":"38fab955-272b-4001-ac3c-13eff040d079","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class InvalidCredentialException extends Exception(\"Incorrect username or password\")\nobject UserAuthenticator:\n  def authenticateUser(loginId: String, pwd: String): String =\n    if loginId == \"user1\" && pwd == \"pass1\" then \"sessionToken\"\n    else throw new InvalidCredentialException"}
{"id":"7612c251-b4f2-4072-ae9a-9fe4c8029baa","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"import scala.util.Try\nobject MobileDeposit:\n  def scanCheck(imageBytes: Array[Byte]): Try[String] =\n    Try {\n      if imageBytes.length < 100 then throw new Exception(\"Image too small\")\n      \"Deposit Accepted\"\n    }"}
{"id":"5400bdc6-8ee8-4645-944f-7d495516191b","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object BillPayment:\n  def payUtilityBill(accountId: String, billerId: String, amount: Double): String =\n    try\n      if amount <= 0 then throw new ArithmeticException(\"Bill amount must be positive\")\n      s\"Paid $$amount to biller $$billerId from account $$accountId\"\n    catch\n      case ex: Exception => ex.getMessage"}
{"id":"309df9d9-0826-4c99-8154-ff82959b5494","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait AccountError\ncase object AccountLocked extends AccountError\ncase object AccountNotFound extends AccountError\nobject AccountRepository:\n  def fetchAccount(userId: String): Either[AccountError, String] =\n    if userId == \"lockedUser\" then Left(AccountLocked)\n    else if userId == \"unknown\" then Left(AccountNotFound)\n    else Right(\"ActiveAccount123\")"}
{"id":"bb8b4646-cabf-47ce-b22e-c4ca7493ef3b","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class PaymentError(message: String) extends Exception(message)\nobject CardPayment:\n  def processCard(cardNumber: String, amount: Double): String =\n    if cardNumber.length != 16 then throw new PaymentError(\"Invalid card number\")\n    if amount > 10000 then throw new PaymentError(\"Transaction limit exceeded\")\n    \"Payment Successful\""}
{"id":"cd546113-20ea-41d6-af0f-431ca328e37d","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"object CustomerSupport:\n  def resolveTicket(ticketId: String): Option[String] =\n    if ticketId.startsWith(\"open-\") then Some(\"Resolved\") else None"}
{"id":"6e3c84bd-1f03-4158-b12a-739c3d53f3f7","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object TransactionHistory:\n  def getRecentTransactions(userId: String): List[String] =\n    try\n      if userId == \"\" then throw new Exception(\"No userId provided\")\n      List(\"txn521\",\"txn522\")\n    catch\n      case _: Exception => Nil"}
{"id":"01db9987-acc1-4929-9744-a7292b4e2b42","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"import scala.util.Try\nobject BiometricAuthenticator:\n  def authenticateBiometric(profileData: Array[Byte]): Try[String] =\n    Try {\n      if profileData.isEmpty then throw new Exception(\"No biometric data\")\n      \"Biometric Authenticated\"\n    }"}
{"id":"a31e303f-5e1b-4204-9943-84688e123c51","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object AccountBlocker:\n  def blockAccount(accountId: String): String =\n    try\n      if accountId.contains(\"999\") then throw new Exception(\"Suspicious account\")\n      \"Account blocked successfully\"\n    catch\n      case ex: Exception => s\"Unable to block: $ex\""}
{"id":"e3c36985-f40b-46c6-a3dc-8c5479dfb598","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait MobileAppError\ncase object SmsNotSent extends MobileAppError\ncase object InvalidOtp extends MobileAppError\nobject OtpService:\n  def sendOtp(mobileNumber: String): Either[MobileAppError, String] =\n    if mobileNumber.startsWith(\"123\") then Left(SmsNotSent)\n    else Right(\"otp1234\")"}
{"id":"e2f59869-42f5-4b18-824b-47e43922ccd4","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class OverdrawnException extends Exception(\"Account overdrawn\")\nobject WithdrawalService:\n  def withdrawMoney(balance: Double, amount: Double): Double =\n    if amount > balance then throw new OverdrawnException\n    balance - amount"}
{"id":"3bd9700b-dc61-40a8-a06a-6af9c2908d87","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"object DeviceRegistration:\n  def registerDevice(deviceId: String): Option[String] =\n    if deviceId.nonEmpty then Some(\"DeviceRegistered\") else None"}
{"id":"8d907d71-60b0-4ed5-a95e-e52857769636","timestamp":1746099304361,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object CheckBalance:\n  def printBalance(accountNumber: String): String =\n    try\n      val bal = if accountNumber == \"0001\" then 2000.0 else throw new Exception(\"Invalid Account\")\n      s\"Your balance is $$bal\"\n    catch\n      case ex: Exception => ex.getMessage"}
{"id":"d54f11a0-1757-41cf-bffe-82416dff272a","timestamp":1746099304361,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"object BeneficiaryAdder:\n  def addBeneficiary(accountOwner: String, beneficiary: String): Either[String, String] =\n    if beneficiary == \"\" then Left(\"Beneficiary cannot be blank\")\n    else Right(\"Beneficiary added successfully\")"}
{"id":"ae266fa9-ac6c-4e03-9df2-642945ef85a3","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class PatientId(value: String)\ncase class AppointmentSlot(id: Int, isAvailable: Boolean)\ncase class SlotUnavailableError(slotId: Int)\ndef reserveAppointmentSlot(slot: AppointmentSlot): Either[SlotUnavailableError, AppointmentSlot] =\n  if slot.isAvailable then Right(slot.copy(isAvailable = false))\n  else Left(SlotUnavailableError(slot.id))"}
{"id":"26461231-e523-4f66-9548-e5e13c13b701","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"case class DoctorUsername(name: String)\nclass DoctorNotAvailableException(doctor: DoctorUsername) extends Exception(\n  s\"Doctor ${doctor.name} is not available for appointment.\")\ndef checkDoctorAvailability(doctor: DoctorUsername, available: Boolean): Unit =\n  if !available then\n    throw new DoctorNotAvailableException(doctor)\n  else ()"}
{"id":"bd1a7190-a8de-4853-a899-96ea8c6699c4","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait SchedulingError\ncase object PatientNotRegistered extends SchedulingError\ncase object TimeSlotConflict extends SchedulingError\ndef scheduleTelemedicineAppointment(patientId: String, slotTime: String, registered: Boolean, available: Boolean): Either[SchedulingError, String] =\n  if !registered then Left(PatientNotRegistered)\n  else if !available then Left(TimeSlotConflict)\n  else Right(s\"Appointment scheduled for $patientId at $slotTime\")"}
{"id":"a4e2a8da-46f8-4361-9043-a03542b91e46","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class InvalidAppointmentTimeException(time: String) extends Exception(s\"$time is not valid for appointment\")\ndef setAppointmentTime(time: String): Unit = {\n  if time == \"\" then throw new InvalidAppointmentTimeException(time)\n  else ()\n}"}
{"id":"417d47f3-2d14-4c1d-99d6-a1597ebc7fb2","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AppointmentId(id: Int)\ncase object AppointmentNotFound\ncase class Appointment(patient: String, time: String)\nval appointments: Map[AppointmentId, Appointment] = Map(AppointmentId(1) -> Appointment(\"Mark\", \"2024-06-23T09:00\"))\ndef findAppointment(id: AppointmentId): Option[Appointment] =\n  appointments.get(id)"}
{"id":"3c1730d0-50c2-4965-84f6-773c1ac34682","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"case class DuplicateAppointmentException(patient: String) extends Exception(s\"Duplicate appointment for $patient\")\ndef createAppointment(patient: String, existing: Boolean): String = {\n  if existing then throw new DuplicateAppointmentException(patient)\n  else s\"Appointment created for $patient\"\n}"}
{"id":"0e55752b-9a78-4e9f-bd3e-ea896aa9b5c4","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait LoginError\ncase object UnknownPatientId extends LoginError\ndef validateLogin(patientId: String, registeredIds: Set[String]): Either[LoginError, String] =\n  if registeredIds.contains(patientId) then Right(\"Login successful\")\n  else Left(UnknownPatientId)"}
{"id":"242f434a-7c87-42ec-b9ec-59afc68bbb23","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class InvalidPatientIdException(patientId: String) extends Exception(s\"$patientId is not a valid patient ID\")\ndef patientDetails(patientId: String, isValid: Boolean): String = {\n  if isValid then s\"Details for: $patientId\"\n  else throw new InvalidPatientIdException(patientId)\n}"}
{"id":"d3736bed-34af-422d-88b6-c0b56b44f62d","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"import scala.util.Try\ncase class AppointmentDetails(patientId: String, date: String)\ndef tryParseAppointment(details: String): Try[AppointmentDetails] =\n  Try {\n    val parts = details.split(\",\")\n    AppointmentDetails(parts(0), parts(1))\n  }"}
{"id":"ed02f770-6ff2-4c35-8453-a9f22b0e8f33","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class ConnectionTimeoutException() extends Exception(\"Telemedicine server connection timed out.\")\ndef connectToTelemedicineServer(timeout: Boolean): Unit =\n  if timeout then throw new ConnectionTimeoutException()\n  else ()"}
{"id":"74b36979-d4e7-40fa-872b-2867c2c9ef5d","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait VideoSessionError\ncase object InvalidMeetingUrl extends VideoSessionError\ndef startVideoSession(meetingUrl: String): Either[VideoSessionError, String] =\n  if meetingUrl.startsWith(\"https://\") then Right(\"Session started\")\n  else Left(InvalidMeetingUrl)"}
{"id":"841b6a6f-55b3-4e4b-9b82-9c45bd37212f","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class PastDateException(date: String) extends Exception(s\"Cannot schedule appointment in the past: $date\")\ndef scheduleForDate(date: String, isFuture: Boolean): String =\n  if !isFuture then throw new PastDateException(date)\n  else s\"Appointment set for $date\""}
{"id":"203f22d6-6f81-4842-b54e-3195c9b8d922","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class Doctor(id: String, available: Boolean)\ndef assignAvailableDoctor(doctors: List[Doctor]): Option[Doctor] =\n  doctors.find(_.available)"}
{"id":"c4aedb24-ad33-4159-ae6a-44c2937ab572","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getRoomToken(patientId: String): String = {\n  try {\n    if patientId == \"\" then throw new Exception(\"Missing patient ID.\")\n    else \"token_\" + patientId\n  } catch {\n    case e: Exception => \"\"\n  }\n}"}
{"id":"dd70f48c-b539-4fb9-a327-c354337eee2d","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait CancellationError\ncase object AppointmentDoesNotExist extends CancellationError\ndef cancelAppointment(id: Int, scheduled: Set[Int]): Either[CancellationError, String] =\n  if scheduled.contains(id) then Right(\"Appointment canceled\")\n  else Left(AppointmentDoesNotExist)"}
{"id":"8950af91-10d7-4b21-8e0a-967224d49e40","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def confirmAppointment(slot: Int): String = {\n  try {\n    if slot < 0 then throw new Exception(\"Invalid slot number.\")\n    else \"Appointment confirmed.\"\n  } catch {\n    case e: Exception => \"Confirmation failed.\"\n  }\n}"}
{"id":"e47c6fe9-e1d1-48f7-bdad-1ec35a5c8dbb","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class NetworkError(message: String)\ndef attemptScheduling(networkReachable: Boolean): Either[NetworkError, String] =\n  if networkReachable then Right(\"Scheduled successfully\")\n  else Left(NetworkError(\"Network is unreachable\"))"}
{"id":"ae247e49-cef1-49a5-8014-8a1654b10328","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def bookSession(slotId: Int, isFree: Boolean): String = {\n  try {\n    if !isFree then throw new Exception(\"Time slot not free!\")\n    else \"Session booked.\"\n  } catch {\n    case e: Exception => \"Booking failed.\"\n  }\n}"}
{"id":"336001dc-b84f-42d3-be22-4a2062a85d28","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class ReschedulingError(reason: String)\ndef reschedule(slotAvailable: Boolean): Option[String] =\n  if slotAvailable then Some(\"Rescheduled successfully\")\n  else None"}
{"id":"fff32350-a985-4fd6-a39c-1800ab9ed33c","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def updatePatientInfo(patientId: String, info: String, valid: Boolean): String = {\n  try {\n    if !valid then throw new Exception(\"Invalid update data.\")\n    else s\"Updated $patientId\"\n  } catch {\n    case _: Exception => \"Update failed.\"\n  }\n}"}
{"id":"f2c800d5-cf8d-4e20-8c42-73b3dff346e4","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AppointmentRequest(patientId: String, scheduledTime: String)\ncase class Appointment(id: String, patientId: String, scheduledTime: String)\nsealed trait AppointmentError\ncase object AppointmentConflict extends AppointmentError\ncase object InvalidAppointmentTime extends AppointmentError\n\ndef createAppointment(request: AppointmentRequest): Either[AppointmentError, Appointment] =\n  if request.scheduledTime.isEmpty then Left(InvalidAppointmentTime)\n  else if request.scheduledTime == \"2024-08-04T10:00\" then Left(AppointmentConflict)\n  else Right(Appointment(\"apt-001\", request.patientId, request.scheduledTime))\n"}
{"id":"87b3922e-5d4a-4ef0-a367-e6943ac5061f","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def findDoctorAvailability(doctorId: String, time: String): Option[String] =\n  if doctorId == \"dr-456\" && time == \"2024-08-04T15:00\" then Some(time)\n  else None\n"}
{"id":"c8e4395b-7dd7-4565-a119-f3fd5ad68aff","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseAppointmentTime(timeStr: String): Try[java.time.LocalDateTime] =\n  Try(java.time.LocalDateTime.parse(timeStr))\n"}
{"id":"7e33ca63-aadc-4e67-ac17-217b0f93a3c9","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait SchedulingError\ncase object DoctorUnavailable extends SchedulingError\ncase object PatientBlocked extends SchedulingError\ncase class BookingSuccess(appointmentId: String)\n\ndef bookAppointment(patientId: String, doctorId: String, time: String): Either[SchedulingError, BookingSuccess] =\n  if patientId == \"blk-100\" then Left(PatientBlocked)\n  else if doctorId == \"dr-123\" then Left(DoctorUnavailable)\n  else Right(BookingSuccess(\"apt-678\"))\n"}
{"id":"984dbb14-b70e-40ed-9ca5-44a2b7ae28b6","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def lookupPatientRecord(patientId: String): Option[String] =\n  if patientId == \"patient-xyz\" then Some(\"John Doe\")\n  else None\n"}
{"id":"6d7f6645-c6a6-4772-8031-db51d6e84566","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"import scala.util.Try\n\ndef cancelAppointment(appointmentId: String): Try[String] =\n  Try {\n    if appointmentId.nonEmpty then \"Cancelled\"\n    else throw new IllegalArgumentException(\"Invalid id\")\n  }\n"}
{"id":"43c02d61-be49-4bf4-8543-03410864e837","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait VerificationError\ncase object PatientNotFound extends VerificationError\n\ncase class Patient(id: String, email: String)\ndef verifyPatient(patientId: String): Either[VerificationError, Patient] =\n  if patientId == \"\" then Left(PatientNotFound)\n  else Right(Patient(patientId, \"jane@telemed.com\"))\n"}
{"id":"b3393bc4-7a78-450f-809d-763a7798e70e","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def rescheduleTime(current: String, requested: String): Option[String] =\n  if current == requested then None\n  else Some(requested)\n"}
{"id":"9aff34d8-fc1d-4cbc-a32d-d35ba70e89a7","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AppointmentError(message: String)\ndef confirmSlot(doctorId: String, slot: String): Either[AppointmentError, String] =\n  if doctorId == \"dr-222\" then Left(AppointmentError(\"Doctor unavailable\"))\n  else Right(\"Slot confirmed for \" + slot)\n"}
{"id":"53cf871a-75ba-49b2-b31f-ec2af3cfd2d6","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeContactNotify(appointmentId: String): Try[String] =\n  Try {\n    if appointmentId == \"\" then throw new Exception(\"Missing Appointment Id\")\n    else \"Notified\"\n  }\n"}
{"id":"3badf718-a8ad-4ef1-8de4-fdb1bab30da7","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class SchedulingException(msg: String) extends Exception(msg)\n\ndef assignDoctor(patientId: String, doctorId: String): String =\n  if doctorId == \"dr-busy\" then throw new SchedulingException(\"Doctor busy\")\n  else \"Doctor assigned\"\n"}
{"id":"9ce72936-e9c5-4393-92b2-7279e454e1e5","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getAppointmentDetails(appointmentId: String): String =\n  try {\n    if appointmentId == \"\" then throw new IllegalArgumentException(\"No id\")\n    else s\"Details for $appointmentId\"\n  } catch {\n    case e: Exception => s\"Error: ${e.getMessage}\"\n  }\n"}
{"id":"b0884645-6203-4855-a6e9-1ae2986ff13c","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def notifyPatient(patientId: String, message: String): Unit =\n  if patientId == null then throw new NullPointerException(\"PatientId required\")\n  // else normally send notification\n"}
{"id":"01d614d2-74f9-4ded-9517-00f6bf95b503","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class TelemedicineDatabaseException(msg: String) extends RuntimeException(msg)\n\ndef fetchPastAppointments(patientId: String): List[String] = {\n  if patientId == \"blocked\" then throw new TelemedicineDatabaseException(\"Blocked patient\")\n  List(\"2024-07-10\", \"2024-07-17\")\n}\n"}
{"id":"7f8e04bd-1920-4a36-84c1-6c45935d0f44","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def recordDoctorAbsence(doctorId: String): Unit =\n  if doctorId.isEmpty then throw new IllegalArgumentException(\"Missing doctor id\")\n  // else record in database\n"}
{"id":"a97acae3-6e35-4659-94af-282957a81f7f","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def updateAppointmentStatus(appointmentId: String, status: String): String =\n  try {\n    if status != \"confirmed\" && status != \"cancelled\" then throw new Exception(\"Unknown status\")\n    \"Status updated\"\n  } catch {\n    case e: Exception => \"Failure: \" + e.getMessage\n  }\n"}
{"id":"af77489a-b48d-486e-b4ed-2b8100e5c195","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class PatientNotRegisteredException(msg: String) extends Exception(msg)\n\ndef sendAppointmentLink(patientId: String): String =\n  if patientId == \"guest\" then throw new PatientNotRegisteredException(\"Registration required\")\n  \"Link sent\"\n"}
{"id":"b8e0614f-c936-4c57-b97b-9781ff6a96d8","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def doctorAvailability(doctorId: String, date: String): String =\n  try {\n    if doctorId == \"dr-none\" then throw new RuntimeException(\"No such doctor\")\n    s\"Doctor $doctorId is available on $date\"\n  } catch {\n    case e: Exception => s\"Error: $date not available\"\n  }\n"}
{"id":"29639e5d-7381-41e3-bb88-aace3c25b695","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def removeAppointment(appointmentId: String): Boolean =\n  try {\n    if appointmentId.length != 10 then throw new Exception(\"Invalid format\")\n    true\n  } catch {\n    case _: Exception => false\n  }\n"}
{"id":"3a401935-ec86-4be8-8e30-785565b3807d","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def paymentAuthorization(patientId: String, token: String): String =\n  if token.isEmpty then throw new IllegalStateException(\"Missing payment token\")\n  \"Payment authorized\"\n"}
{"id":"a4cf638d-a92e-4e0f-9a2f-6554d7488fd9","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"object UserStepParser:\n  def parseStepCount(input: String): Either[String, Int] =\n    try input.toIntOption match\n      case Some(steps) if steps >= 0 => Right(steps)\n      case Some(_) => Left(\"Step count cannot be negative\")\n      case None => Left(\"Invalid step count format\")\n    catch case ex: Exception => Left(ex.getMessage)"}
{"id":"8878d1f2-79ac-46f7-842f-9c895fb4d6bd","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def parseHeartRate(input: String): Int = {\n  try {\n    val hr = input.toInt\n    if (hr < 0) throw new IllegalArgumentException(\"Heart rate must be positive\")\n    hr\n  } catch {\n    case e: NumberFormatException => throw new RuntimeException(\"Invalid heart rate format\")\n  }\n}"}
{"id":"a5342936-54bf-464e-8486-dac40d08e18b","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class WorkoutSession(durationMinutes: Int, caloriesBurned: Int)\n\nenum WorkoutParsingError:\n  case InvalidFormat, NegativeDuration, NegativeCalories\n\ndef parseWorkoutSession(str: String): Either[WorkoutParsingError, WorkoutSession] =\n  str.split(\",\") match\n    case Array(dm, cb) =>\n      for\n        d <- dm.toIntOption.toRight(WorkoutParsingError.InvalidFormat)\n        c <- cb.toIntOption.toRight(WorkoutParsingError.InvalidFormat)\n        _ <- if d >= 0 then Right(()) else Left(WorkoutParsingError.NegativeDuration)\n        _ <- if c >= 0 then Right(()) else Left(WorkoutParsingError.NegativeCalories)\n      yield WorkoutSession(d, c)\n    case _ => Left(WorkoutParsingError.InvalidFormat)"}
{"id":"80afb6f4-123d-4c4e-b486-d27ebb909ff4","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getActiveMinutesFromRecord(record: Map[String, String]): Int = {\n  try {\n    val minutes = record(\"activeMinutes\").toInt\n    if (minutes < 0) throw new IllegalArgumentException(\"Negative active minutes\")\n    minutes\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Failed to extract active minutes\")\n  }\n}"}
{"id":"6c9fc491-2533-43bf-bf3c-8d86b9e5b8d9","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait DistanceError\ncase object NotNumberDistance extends DistanceError\ncase object NegativeDistance extends DistanceError\n\ndef parseDistanceLog(meters: String): Either[DistanceError, Double] =\n  meters.toDoubleOption match\n    case Some(m) if m >= 0 => Right(m)\n    case Some(_) => Left(NegativeDistance)\n    case None => Left(NotNumberDistance)"}
{"id":"ceb7bb19-7b3f-4591-abcc-c86833d329de","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class FitnessRecord(val steps: String, val heartRate: String)\n\nobject FitnessRecordProcessor {\n  def calculateStepHeartProduct(record: FitnessRecord): Int = {\n    try {\n      val steps = record.steps.toInt\n      val hr = record.heartRate.toInt\n      steps * hr\n    } catch { case e: Exception => throw new RuntimeException(\"Record processing failure\") }\n  }\n}"}
{"id":"4e5919e8-3cc3-412b-a566-da133c1a3e84","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait GoalCheckError\ncase object InvalidGoalFormat extends GoalCheckError\ncase object GoalTooLow extends GoalCheckError\n\ndef validateDailyGoal(goalStr: String): Option[Int] =\n  goalStr.toIntOption match\n    case Some(g) if g > 0 => Some(g)\n    case _ => None"}
{"id":"7c2b55f8-3e9f-457a-817d-eeab46392763","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def caloriesBurnedForSession(calories: String): Int = {\n  try {\n    val cals = calories.toInt\n    if (cals < 0) throw new ArithmeticException(\"Calories cannot be negative\")\n    cals\n  } catch {\n    case _: Exception => throw new IllegalArgumentException(\"Calories value error\")\n  }\n}"}
{"id":"5e1083e9-d765-4308-a606-6489e19a0590","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryToParseFloorsClimbed(input: String): Try[Int] =\n  scala.util.Try(input.toInt).filter(_ >= 0)"}
{"id":"7e134663-d05f-4d5f-bc91-4a5205d095dc","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def extractSleepDuration(sleepData: Map[String, String]): Int = {\n  try {\n    val duration = sleepData(\"durationMinutes\").toInt\n    if (duration < 0) throw new Exception(\"Negative sleep duration\")\n    duration\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Malformed sleep duration in data\")\n  }\n}"}
{"id":"b6697bc4-a61b-4f21-a791-4caaf25916aa","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"enum ProgressCalculationError:\n  case InvalidSteps, InvalidGoal\n\ndef calculateProgress(stepsStr: String, goalStr: String): Either[ProgressCalculationError, Double] =\n  for\n    steps <- stepsStr.toIntOption.toRight(ProgressCalculationError.InvalidSteps)\n    goal <- goalStr.toIntOption.toRight(ProgressCalculationError.InvalidGoal)\n    if goal > 0\n  yield steps.toDouble / goal"}
{"id":"2c51d9b8-b733-4801-b417-6adde9998e4a","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getDistanceOrCrash(track: Map[String, String]): Double = {\n  try {\n    val d = track(\"distanceKm\").toDouble\n    if (d < 0) throw new IllegalStateException(\"Negative distance\")\n    d\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Distance parse failed\")\n  }\n}"}
{"id":"961bf619-2afd-4d4a-9f5b-74590369c857","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait SleepParsingError\ncase object SleepMissingField extends SleepParsingError\ncase object SleepNotANumber extends SleepParsingError\ncase object SleepNegativeDuration extends SleepParsingError\n\ndef parseSleepMinutes(raw: Option[String]): Either[SleepParsingError, Int] =\n  raw match\n    case None => Left(SleepMissingField)\n    case Some(v) => v.toIntOption\n      .toRight(SleepNotANumber)\n      .flatMap(m => if m >= 0 then Right(m) else Left(SleepNegativeDuration))"}
{"id":"30fc9bdd-360e-441e-ba26-0ceb9382cc15","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def parseActiveZoneMinutes(rawActive: String): Int = {\n  try {\n    val azm = rawActive.toInt\n    if (azm < 0) throw new Exception(\"Active zone minutes negative\")\n    azm\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Failed to extract active zone minutes\")\n  }\n}"}
{"id":"476c255c-fc23-4f04-80c8-b8c997e11ea6","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class HydrationRecord(liters: Double)\nsealed trait HydrationValidationError\ncase object InvalidLitersFormat extends HydrationValidationError\ncase object NegativeLiters extends HydrationValidationError\n\ndef validateHydrationEntry(str: String): Either[HydrationValidationError, HydrationRecord] =\n  for\n    value <- str.toDoubleOption.toRight(InvalidLitersFormat)\n    _ <- if value >= 0 then Right(()) else Left(NegativeLiters)\n  yield HydrationRecord(value)"}
{"id":"54607654-b115-42ab-9235-72745b3de7cd","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def calculateAvgHeartRate(heartRates: List[String]): Double = {\n  try {\n    val hr = heartRates.map(_.toInt)\n    hr.sum.toDouble / hr.size\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Invalid heart rate in list\")\n  }\n}"}
{"id":"0d2d3d02-1a9f-4d8f-a6cc-397247dd9e08","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeCaloriesPerMinute(calories: String, minutes: String): Try[Double] =\n  Try {\n    val cal = calories.toInt\n    val min = minutes.toInt\n    require(min > 0, \"Minutes must be > 0\")\n    cal.toDouble / min\n  }"}
{"id":"54b50069-ab78-4623-8447-264caba035e9","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def parseStepGoalOrThrow(goal: String): Int = {\n  try {\n    val g = goal.toInt\n    if (g < 1000) throw new IllegalArgumentException(\"Goal too low\")\n    g\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Invalid goal value\")\n  }\n}"}
{"id":"12b8f297-0582-4594-b6d2-9469cdc97fe5","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait ActivityLoadError\ncase object EmptyLoadField extends ActivityLoadError\ncase object NonNumericLoad extends ActivityLoadError\ncase object NegativeActivityLoad extends ActivityLoadError\n\ndef parseActivityLoad(load: String): Either[ActivityLoadError, Int] =\n  if load.trim.isEmpty then Left(EmptyLoadField)\n  else load.toIntOption match\n    case Some(v) if v >= 0 => Right(v)\n    case Some(_) => Left(NegativeActivityLoad)\n    case None => Left(NonNumericLoad)"}
{"id":"fa8c576d-e44e-43b4-be3e-515bee6493ac","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def convertMeterToMileOrThrow(meters: String): Double = {\n  try {\n    val m = meters.toDouble\n    if (m < 0) throw new Exception(\"Meters negative\")\n    m * 0.000621371\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Failed to convert meters\")\n  }\n}"}
{"id":"70080df5-6144-41b7-a092-9eacb2938bbf","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class HeartRateRecord(timestamp: Long, bpm: Int)\ndef averageHeartRate(records: List[HeartRateRecord]): Either[String, Double] =\n  if records.isEmpty then Left(\"No heart rate records available.\")\n  else Right(records.map(_.bpm).sum.toDouble / records.size)"}
{"id":"20240289-1c5b-4999-a969-063c509a7d19","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"object WorkoutAnalyzer:\n  def caloriesBurned(durationMinutes: Int, caloriesPerMinute: Option[Int]): Option[Int] =\n    caloriesPerMinute.map(_ * durationMinutes)"}
{"id":"88695ec2-00cb-4ec9-bc69-9cfdfef1f2be","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait SleepAnalysisError\ncase object InsufficientData extends SleepAnalysisError\ncase class InvalidSleepPeriod(msg: String) extends SleepAnalysisError\n\ndef calculateSleepQuality(hours: Int): Either[SleepAnalysisError, String] =\n  if hours <= 0 then Left(InsufficientData)\n  else if hours < 3 then Left(InvalidSleepPeriod(\"Too short\"))\n  else Right(\"Good\")"}
{"id":"6afe1ea6-c2ff-492a-aba2-4148653edeef","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def safeParseSteps(input: String): Option[Int] =\n  try Option(input.toInt) catch case _: Throwable => None"}
{"id":"75466750-6adc-4f66-bc4f-b0645b50b123","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseActiveMinutes(stat: String): Try[Int] =\n  Try(stat.toInt)"}
{"id":"ada56698-9f22-4472-9117-e8724fcecefc","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def validateGoalCompletion(goal: Int, achieved: Int): Either[String, Boolean] =\n  if goal <= 0 then Left(\"Invalid goal value\")\n  else Right(achieved >= goal)"}
{"id":"baf98045-3eb2-44d5-a737-58bc33d4b74d","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def lookupUserProfile(id: String, profiles: Map[String, String]): Option[String] =\n  profiles.get(id)"}
{"id":"c2963698-0e5a-4600-8167-ccfda24d723d","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait ActivitySummaryError\ncase object ActivityMissing extends ActivitySummaryError\n\ndef getActivityDuration(\n  name: String,\n  sessions: Map[String, Int]\n): Either[ActivitySummaryError, Int] =\n  sessions.get(name).toRight(ActivityMissing)"}
{"id":"6928d5eb-9677-4669-af1b-da0aab5b27f3","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def calculateDailyStepDelta(today: Int, yesterday: Int): Option[Int] =\n  if today >= 0 && yesterday >= 0 then Some(today - yesterday)\n  else None"}
{"id":"e6605a56-7e78-4cb8-b60f-15b0ab09b01a","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDistanceParsed(km: String): Try[Double] =\n  Try(km.toDouble)"}
{"id":"63adffd3-df8d-4ddf-9a5f-899c6a3dd079","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getStepCount(record: Map[String, Int], user: String): Int =\n  try {\n    record(user)\n  } catch {\n    case e: NoSuchElementException => throw new RuntimeException(\"User step count not found\", e)\n  }"}
{"id":"d61e8008-fd84-4ae6-b16d-bfb5e7336c58","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class SleepDataMissingException(msg: String) extends Exception(msg)\n\ndef computeSleepEfficiency(hours: Int): Double =\n  if hours < 0 then throw new SleepDataMissingException(\"Negative hours detected.\")\n  else hours.toDouble / 8.0 * 100"}
{"id":"36c42a29-b44b-4614-a31a-2471697740fc","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def caloriesBurnedRaw(minutes: Int, burnRate: Int): Int =\n  if burnRate <= 0 then throw new IllegalArgumentException(\"Burn rate cannot be zero or negative.\")\n  minutes * burnRate"}
{"id":"c3ee9f84-1f7d-48d5-adfd-26cb1b990358","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def parseSteps(steps: String): Int =\n  try steps.toInt catch case _: NumberFormatException => throw new RuntimeException(\"Invalid steps format\")"}
{"id":"a20a7b2b-514a-4827-855d-bdbd6604f1fe","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"object UserProfileAccess:\n  def getUserWeight(userId: String, weights: Map[String, Double]): Double =\n    try weights(userId)\n    catch case _: Throwable => throw new Exception(\"Could not retrieve weight.\")"}
{"id":"0d459976-26ef-41fd-ad00-2251fbfd4a36","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def timeInHeartZone(zone: String, records: Map[String, Int]): Int =\n  if !records.contains(zone) then throw new NoSuchElementException(\"Zone data missing.\")\n  else records(zone)"}
{"id":"824c8604-c3f5-4f44-bfb3-35af42140738","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def fetchActivityDuration(name: String, logs: Map[String, Int]): Int =\n  try logs(name) catch case _: NoSuchElementException => throw new Exception(\"Activity log not found\")"}
{"id":"fa148bdd-aaac-4d72-ac08-cb10787efaa3","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class InvalidHydrationLevel(message: String) extends Exception(message)\n\ndef validateHydration(level: Double): Boolean =\n  if level < 0.0 then throw new InvalidHydrationLevel(\"Hydration level cannot be negative.\")\n  else true"}
{"id":"d791ca80-702e-4bf0-ba2e-be45644bf7a1","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"object HeartRateValidator:\n  def checkHeartRate(bpm: Int): Unit =\n    if bpm < 40 || bpm > 220 then throw new IllegalStateException(\"Unrealistic heart rate value.\")"}
{"id":"738a5d4e-b0a2-41dc-8c77-ffe9a8745be5","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def assertStepGoalAchieved(target: Int, actual: Int): Unit =\n  if actual < target then throw new Exception(\"Step goal not achieved.\")"}
{"id":"5202b8eb-c1fa-4df3-92cb-d2428764e798","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlanId(value: String)\ncase class PricingPlan(price: Double)\n\ndef getPricingPlan(planId: PricingPlanId): Option[PricingPlan] = {\n  if planId.value == \"plan-basic\" then Some(PricingPlan(10.0))\n  else None\n}"}
{"id":"e3318971-08ef-4993-8584-eb46d36553ce","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlanUpdateError(message: String)\ncase class UpdateDetails(price: Double)\n\ndef updatePricingPlanPrice(planId: String, details: UpdateDetails): Either[PricingPlanUpdateError, Double] = {\n  if details.price <= 0 then Left(PricingPlanUpdateError(\"Invalid price: must be positive\"))\n  else Right(details.price)\n}"}
{"id":"1ff8eb4c-1321-43d8-a7e4-045e7452477c","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait PricingPlanValidationError\ncase object PlanNameMissing extends PricingPlanValidationError\ncase object PriceInvalid extends PricingPlanValidationError\n\ncase class NewPricingPlan(name: String, price: Double)\n\ndef validateNewPricingPlan(plan: NewPricingPlan): Either[PricingPlanValidationError, NewPricingPlan] = {\n  if plan.name.trim.isEmpty then Left(PlanNameMissing)\n  else if plan.price < 0 then Left(PriceInvalid)\n  else Right(plan)\n}"}
{"id":"96145475-7348-4c99-9382-27c7966a24e0","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePricingPlanPrice(input: String): Try[Double] = Try {\n  input.toDouble\n}"}
{"id":"0fd054d1-4504-4b02-8850-5364db1fc029","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, price: Double)\n\ndef getDiscountedPlan(plan: PricingPlan, discount: Double): Option[PricingPlan] = {\n  if discount < 0 || discount >= 100 then None\n  else Some(plan.copy(price = plan.price * (1 - discount / 100)))\n}"}
{"id":"53f454d6-1545-4d86-b19a-9d94ad38f9f0","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait PricingPlanRetrievalError\ncase object PlanNotFound extends PricingPlanRetrievalError\ncase object PlanDatabaseUnavailable extends PricingPlanRetrievalError\n\ncase class PricingPlan(planId: String, price: Double)\n\ndef findPricingPlan(planId: String): Either[PricingPlanRetrievalError, PricingPlan] = {\n  if planId == \"premium\" then Right(PricingPlan(planId, 50.0))\n  else Left(PlanNotFound)\n}"}
{"id":"0fa3e908-85bf-408a-a3c2-c50faaa9487b","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def tryUpdatePricingPlanPrice(price: Double): Option[Double] = {\n  if price <= 0 then None else Some(price * 1.05)\n}"}
{"id":"77a2d5d3-76c7-4ce6-a21b-c1ab92f93fa3","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, price: Double)\ncase class CreatePlanError(msg: String)\ndef createPricingPlan(plan: PricingPlan): Either[CreatePlanError, String] = {\n  if plan.price < 0 then Left(CreatePlanError(\"Price cannot be negative\"))\n  else Right(plan.id)\n}"}
{"id":"33f6b237-851a-4df3-9804-b96b3612ea85","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, active: Boolean)\n\ndef deactivatePricingPlan(plan: PricingPlan): Either[String, PricingPlan] = {\n  if !plan.active then Left(\"Plan already inactive\")\n  else Right(plan.copy(active = false))\n}"}
{"id":"db44d4ec-03f3-406e-a9b8-5a918b50764a","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"import scala.util.Try\ncase class PricingPlan(id: String, name: String)\n\ndef safeGetPlanName(plan: PricingPlan): Try[String] = Try {\n  if plan.name.isEmpty then throw new RuntimeException(\"Name missing\")\n  else plan.name\n}"}
{"id":"c0e5cc8c-20a8-4cbc-b026-a8e0d2d4d43f","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class InvalidPricingPlanIdException(msg: String) extends Exception(msg)\ndef fetchPricingPlan(planId: String): String = {\n  if planId.isEmpty then throw new InvalidPricingPlanIdException(\"Empty plan id\")\n  else \"Basic Plan\"\n}"}
{"id":"c5e616d1-7c33-47e6-a5d4-216185680734","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanNotFoundException extends Exception\n\ndef getPricingPlanPrice(planId: String): Double = {\n  if planId == \"invalid\" then throw new PricingPlanNotFoundException\n  else 19.99\n}"}
{"id":"cd477c5f-a5dd-4256-9e82-8292e73dac74","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def parsePlanPrice(planPrice: String): Double = {\n  try {\n    planPrice.toDouble\n  } catch {\n    case _: NumberFormatException => throw new RuntimeException(\"Invalid plan price format\")\n  }\n}"}
{"id":"a0fd7bae-0f84-4f70-899d-6133b84d6441","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanDatabaseException extends Exception\n\nobject PricingPlanDatabase {\n  def findPlanById(planId: String): String = {\n    try {\n      if planId == \"error\" then throw new PricingPlanDatabaseException\n      else \"Standard\"\n    } catch {\n      case _: PricingPlanDatabaseException => \"Unknown\"\n    }\n  }\n}"}
{"id":"dc04b8fd-f89a-4043-94c9-858c08467c66","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanActivationException(msg: String) extends Exception(msg)\ndef activatePlan(planId: String): Boolean = {\n  if planId == \"deprecated\" then throw new PlanActivationException(\"Cannot activate deprecated plan\")\n  else true\n}"}
{"id":"af6fe693-0bdc-4b62-96b1-b22b6f3bafd5","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class InvalidDiscountCode(code: String) extends Exception(s\"Invalid discount: $code\")\ndef applyDiscountCodeToPlan(code: String, planPrice: Double): Double = {\n  if code == \"WINTER10\" then planPrice * 0.9\n  else throw new InvalidDiscountCode(code)\n}"}
{"id":"0a28cc3b-f661-4e45-977f-bf1ef7f9dbe0","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def planPriceFromString(raw: String): Double = {\n  try {\n    raw.trim.toDouble\n  } catch {\n    case _: Exception => throw new IllegalArgumentException(\"Price input is invalid\")\n  }\n}"}
{"id":"77a81d34-7c55-4ada-9c5e-9142e626e51d","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanRemovalException extends Exception\n\ndef removePricingPlan(planId: String): String = {\n  if planId == \"locked-plan\" then throw new PlanRemovalException\n  else \"Removed successfully\"\n}"}
{"id":"93b9ee2e-e531-446d-8cf0-5dbc2e1bc103","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def safeExecutePricingOperation(): String = {\n  try {\n    throw new RuntimeException(\"Pricing operation failed\")\n  } catch {\n    case e: Exception => \"Failure: \" + e.getMessage\n  }\n}"}
{"id":"7d23e68c-b7b2-41a2-ab68-dfc99a99ba62","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def setPlanPrice(planId: String, newPrice: Double): String = {\n  if newPrice < 0 then throw new IllegalArgumentException(\"Negative price is not allowed\")\n  else s\"Price set to $$newPrice\"\n}"}
{"id":"0a88bff5-13bd-4826-876e-401308237414","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, name: String, monthlyPrice: BigDecimal)\n\nsealed trait PricingPlanError\ncase object PricingPlanNotFound extends PricingPlanError\n\nobject PricingPlanRepository {\n  val plans = List(PricingPlan(\"basic\", \"Basic\", 10), PricingPlan(\"pro\", \"Pro\", 30))\n  def findPlanById(planId: String): Either[PricingPlanError, PricingPlan] =\n    plans.find(_.id == planId).toRight(PricingPlanNotFound)\n}"}
{"id":"b4e1d341-75c9-484a-b954-489a5a303881","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanServiceException(msg: String) extends RuntimeException(msg)\n\nobject PricingPlanService {\n  val plans = scala.collection.mutable.Map(\"basic\" -> 10, \"pro\" -> 30)\n  def getPlanMonthlyPrice(planId: String): BigDecimal = {\n    if (plans.contains(planId)) plans(planId)\n    else throw new PricingPlanServiceException(s\"Plan $planId does not exist\")\n  }\n}"}
{"id":"e20181ae-f8fc-46ed-8cd3-c53a7908a91f","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait PlanUpdateError\ncase object InvalidPriceUpdate extends PlanUpdateError\n\ncase class UpdatePriceRequest(planId: String, newPrice: BigDecimal)\n\ndef updatePlanPrice(request: UpdatePriceRequest): Either[PlanUpdateError, Boolean] =\n  if (request.newPrice < 0) Left(InvalidPriceUpdate)\n  else Right(true)"}
{"id":"cf965461-3494-4601-a21f-066e9f180d40","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanUpdateFailure(msg: String) extends Exception(msg)\n\ndef changePricingPlanPrice(planId: String, price: BigDecimal): Boolean = {\n  if (price < 0) throw new PlanUpdateFailure(\"Negative price is not allowed\")\n  true\n}"}
{"id":"f5f52e89-182c-4b97-b109-54cbedab24c0","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePriceInput(input: String): Try[BigDecimal] = Try(BigDecimal(input))"}
{"id":"873e1493-dce7-454d-9b7b-3144d883534f","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getPricingPlanName(planId: String): String = {\n  try {\n    val plans = Map(\"basic\" -> \"Basic Plan\", \"vip\" -> \"VIP Plan\")\n    plans(planId)\n  } catch {\n    case _: NoSuchElementException => throw new RuntimeException(\"Unknown plan id\")\n  }\n}"}
{"id":"0bb2bd25-15c0-4a0c-be43-760bd1c313a9","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait PricingPlanValidationError\ncase class MissingField(field: String) extends PricingPlanValidationError\ncase object InvalidAmount extends PricingPlanValidationError\n\ndef validateCreatePlanInput(name: String, price: BigDecimal): Either[PricingPlanValidationError, (String, BigDecimal)] =\n  if (name.isEmpty) Left(MissingField(\"name\"))\n  else if (price <= 0) Left(InvalidAmount)\n  else Right((name, price))"}
{"id":"fc4f5b68-db52-423c-bac4-fa865d1cd5bf","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def createPricingPlan(planName: String, planPrice: BigDecimal): String = {\n  if (planName == \"\") throw new IllegalArgumentException(\"Plan name required\")\n  if (planPrice < 0) throw new IllegalArgumentException(\"Invalid plan price\")\n  java.util.UUID.randomUUID.toString\n}"}
{"id":"698a647e-e3af-4828-bb53-6f5ce726b857","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"import scala.util.Try\n\ndef loadPlanDiscount(planId: String): Try[Double] = Try {\n  val discounts = Map(\"basic\" -> 0.1, \"pro\" -> 0.2)\n  discounts(planId)\n}"}
{"id":"9d1eb735-3704-4381-a67e-d8feb613ce70","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"object PlanRemovalService {\n  def removePricingPlanById(planId: String): Unit = {\n    try {\n      if (planId == \"test\") throw new IllegalStateException(\"Removal not allowed\")\n      // removal logic\n    } catch {\n      case e: Exception => throw new RuntimeException(\"Failed to remove plan: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"55f128a3-1a06-403f-ad8b-651216bb49f1","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait SubscriptionError\ncase object PlanNotActive extends SubscriptionError\ncase object PlanExpired extends SubscriptionError\n\ndef checkUserActiveSubscription(userId: String, planId: String): Either[SubscriptionError, Boolean] =\n  if (planId == \"expired\") Left(PlanExpired)\n  else if (planId == \"inactive\") Left(PlanNotActive)\n  else Right(true)"}
{"id":"e967dde1-40fd-4b86-a7c7-4065ff426b6c","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def enforcePlanUpgrade(userTier: String): Unit = {\n  if (userTier != \"premium\") throw new RuntimeException(\"Upgrade required for this feature\")\n}"}
{"id":"a3441624-ad56-4a44-91ae-e7f96c53f152","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDivideDiscount(total: Double, divisor: Double): Try[Double] = Try {\n  total / divisor\n}"}
{"id":"967ad583-dfca-4e94-9028-f033701f68b1","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def decreasePlanPrice(planId: String, decreaseAmount: BigDecimal): Unit = {\n  try {\n    val minPrice: BigDecimal = 5\n    if (decreaseAmount < 0) throw new IllegalArgumentException(\"Decrease amount < 0\")\n    if (decreaseAmount > 50) throw new IllegalArgumentException(\"Decrease too large\")\n    // price calculation logic\n  } catch {\n    case ex: Throwable =>\n      println(\"Error in decreasing price: \" + ex.getMessage)\n  }\n}"}
{"id":"5dfb6572-3aea-4af6-a0c1-eeb38c467e40","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait PlanRetrievalError\ncase object PlanDatabaseUnavailable extends PlanRetrievalError\ncase object PlanUnknown extends PlanRetrievalError\n\ndef fetchPlanById(planId: String): Either[PlanRetrievalError, String] =\n  if (planId == \"fail\") Left(PlanDatabaseUnavailable)\n  else if (planId.nonEmpty) Right(planId)\n  else Left(PlanUnknown)"}
{"id":"75dd0eb9-9825-452b-bb1b-21ad70d584aa","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def addNewPricingPlan(name: String, monthlyFee: BigDecimal): String = {\n  if (name == null) throw new NullPointerException(\"Plan name required\")\n  if (monthlyFee <= 0) throw new IllegalArgumentException(\"Fee must be positive\")\n  \"PlanCreated\"\n}"}
{"id":"804fd4b7-d693-4e11-a100-c2da4fcfa306","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait FeatureError\ncase class FeatureUnavailable(feature: String) extends FeatureError\n\ncase class FeatureAccessResult(granted: Boolean)\n\ndef checkFeatureAccess(planId: String, feature: String): Either[FeatureError, FeatureAccessResult] =\n  if (feature == \"beta\") Left(FeatureUnavailable(feature))\n  else Right(FeatureAccessResult(true))"}
{"id":"85dcdbef-ab44-4f14-a0d2-8151f6c23d00","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def setTrialDays(planId: String, days: Int): Unit = {\n  if (days < 0) throw new IllegalArgumentException(\"Trial days cannot be negative\")\n  // persist logic\n}"}
{"id":"2990c927-5271-4eb8-abfa-f14934242844","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait BillingCycleError\ncase object CycleAmountNegative extends BillingCycleError\n\ndef setBillingCycle(planId: String, months: Int): Either[BillingCycleError, Int] =\n  if (months <= 0) Left(CycleAmountNegative)\n  else Right(months)"}
{"id":"34c9e9ff-884e-423b-a68d-7fac8dd9d546","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def activateExclusivePlan(planId: String): Unit = {\n  if (planId == \"exclusive\") throw new IllegalStateException(\"Exclusive plan activation not allowed\")\n}"}
{"id":"f6a0afca-20bd-42f5-b120-6fc26cabab16","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class DeviceConnectionError(message: String)\ncase class SmartBulb(name: String, isOnline: Boolean)\ndef turnOnBulb(bulb: SmartBulb): Either[DeviceConnectionError, String] =\n  if bulb.isOnline then Right(s\"${bulb.name} is now ON\")\n  else Left(DeviceConnectionError(s\"${bulb.name} is offline\"))"}
{"id":"1cee0f90-3000-4a5f-9c0c-850023b01742","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class ThermostatOfflineException(msg: String) extends Exception(msg)\nclass Thermostat(val id: String, var connected: Boolean) {\n  def setTemperature(degrees: Int): Unit = {\n    if (!connected) throw new ThermostatOfflineException(\"Thermostat is offline.\")\n  }\n}\ndef updateThermostat(t: Thermostat, temp: Int): Unit = {\n  try t.setTemperature(temp)\n  catch case e: ThermostatOfflineException => println(e.getMessage)\n}"}
{"id":"6fe32969-6628-453a-b618-ecfcf3420775","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"import scala.util.Try\ncase class SecuritySystem(armed: Boolean)\ndef disarmSystem(system: SecuritySystem): Try[SecuritySystem] =\n  Try {\n    if !system.armed then throw new Exception(\"System already disarmed.\")\n    system.copy(armed = false)\n  }"}
{"id":"a965622a-5e6d-4fdc-8351-8b45b9899dab","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class DoorLockJamException(msg: String) extends Exception(msg)\nclass DoorLock(var locked: Boolean) {\n  def unlock(): Unit = {\n    if (!locked) throw new DoorLockJamException(\"Lock is already unlocked!\")\n    locked = false\n  }\n}\ndef unlockFrontDoor(lock: DoorLock): Unit =\n  try lock.unlock()\n  catch case ex: DoorLockJamException => println(ex.getMessage)"}
{"id":"34943091-1294-4224-970d-c8a7923e64f7","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait LightControlError\ncase object LightOffline extends LightControlError\ncase class UnknownLight(name: String) extends LightControlError\ncase class Light(name: String, online: Boolean)\ndef switchOffLight(light: Option[Light]): Either[LightControlError, String] =\n  light match\n    case None => Left(UnknownLight(\"Unknown\"))\n    case Some(l) if !l.online => Left(LightOffline)\n    case Some(l) => Right(s\"${l.name} switched off\")"}
{"id":"fbcf0482-0a86-45d8-8e13-840ac531f457","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SceneNotFoundException(msg: String) extends Exception(msg)\nclass SceneController(scenes: Map[String, List[String]]) {\n  def activate(scene: String): Unit = {\n    if (!scenes.contains(scene))\n      throw new SceneNotFoundException(s\"Scene $scene does not exist\")\n  }\n}\ndef activateMorningScene(controller: SceneController): Unit = {\n  try controller.activate(\"Morning Routine\")\n  catch case e: Exception => println(e.getMessage)\n}"}
{"id":"a21c5b9c-0650-4335-80a4-f57755205dd3","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"import scala.util.Try\ncase class Heater(state: String)\ndef startHeater(heater: Heater): Try[Heater] =\n  Try {\n    if heater.state == \"on\" then throw new Exception(\"Heater already on.\")\n    heater.copy(state = \"on\")\n  }"}
{"id":"a5a94602-aac6-4a5c-a8b2-4d89537b439d","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class InvalidScheduleTimeException(msg: String) extends Exception(msg)\nobject Scheduler {\n  def scheduleDevice(deviceId: String, time: Int): Unit = {\n    if (time < 0 || time > 23)\n      throw new InvalidScheduleTimeException(\"Invalid time for scheduling.\")\n  }\n}\ndef attemptSchedule(): Unit =\n  try Scheduler.scheduleDevice(\"blind1\", 25)\n  catch case ex: InvalidScheduleTimeException => println(\"Error: \" + ex.getMessage)"}
{"id":"9a7a58fe-d356-4662-b485-7d8ae95e40f4","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait DeviceOperationError\ncase object DeviceNotFound extends DeviceOperationError\ncase class PermissionDenied(user: String) extends DeviceOperationError\ncase class Device(id: String)\ndef performOperation(device: Option[Device], user: String): Either[DeviceOperationError, String] =\n  device match\n    case None => Left(DeviceNotFound)\n    case Some(_) if user != \"admin\" => Left(PermissionDenied(user))\n    case Some(d) => Right(s\"Operation on ${d.id} successful.\")"}
{"id":"0286db67-b0ad-467d-8ff5-9a0d0772fac7","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class CameraUnavailableException(msg: String) extends Exception(msg)\nclass SecurityCamera(val available: Boolean) {\n  def record(): Unit = {\n    if (!available) throw new CameraUnavailableException(\"Camera is unavailable.\")\n  }\n}\ndef startCameraRecording(cam: SecurityCamera): Unit =\n  try cam.record()\n  catch case e: CameraUnavailableException => println(\"Failed: \" + e.getMessage)"}
{"id":"e1a9f59b-6aee-4c1e-a36a-fe58a389a5af","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"import scala.util.Try\ncase class MotionSensor(battery: Int)\ndef checkSensorBattery(sensor: MotionSensor): Try[String] =\n  Try {\n    if sensor.battery < 10 then throw new RuntimeException(\"Low battery!\")\n    \"Battery level is sufficient.\"\n  }"}
{"id":"fea6e148-c4a5-4e3e-8888-747fb920299b","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class LightIntensityException(msg: String) extends Exception(msg)\nclass AdjustableLight(var intensity: Int) {\n  def setIntensity(level: Int): Unit = {\n    if (level < 0 || level > 100)\n      throw new LightIntensityException(\"Intensity must be 0-100\")\n    intensity = level\n  }\n}\ndef adjustKitchenLight(light: AdjustableLight): Unit = {\n  try light.setIntensity(120)\n  catch case e: Exception => println(e.getMessage)\n}"}
{"id":"645d7b61-b18d-4cf6-8cb9-832d8d35e5e0","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait ThermostatError\ncase object ThermostatDisconnected extends ThermostatError\ncase class ThermostatDevice(id: String, connected: Boolean)\ndef setThermostat(device: ThermostatDevice, temp: Int): Either[ThermostatError, String] =\n  if device.connected then Right(s\"Thermostat set to $temp °C\")\n  else Left(ThermostatDisconnected)"}
{"id":"2022f01a-cff9-4a8f-a38b-2f3611e15f40","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class PlugOverloadException(msg: String) extends Exception(msg)\nclass SmartPlug(var wattage: Int) {\n  def plugIn(deviceWatts: Int): Unit = {\n    if (deviceWatts > 1800)\n      throw new PlugOverloadException(\"Plug overload!\")\n    wattage += deviceWatts\n  }\n}\ndef connectToPlug(plug: SmartPlug, wattage: Int): Unit = {\n  try plug.plugIn(wattage)\n  catch case e: PlugOverloadException => println(e.getMessage)\n}"}
{"id":"cf97ea2d-a0a4-4dd1-8188-1dd3c0ac8b44","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class Blind(id: String, position: Int)\ndef setBlindPosition(blind: Blind, position: Int): Option[Blind] =\n  if position >= 0 && position <= 100 then Some(blind.copy(position = position))\n  else None"}
{"id":"f3a5b2d2-781b-4da3-a8c5-aa906f93de64","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class GarageDoorBlockedException(msg: String) extends Exception(msg)\nclass GarageDoor(var obstructed: Boolean) {\n  def open(): Unit = {\n    if (obstructed) throw new GarageDoorBlockedException(\"Garage door blocked!\")\n  }\n}\ndef openGarageDoor(door: GarageDoor): Unit = {\n  try door.open()\n  catch case e: GarageDoorBlockedException => println(\"Garage failed: \" + e.getMessage)\n}"}
{"id":"14609ef8-bbae-4c4d-8e18-f29431c91a6c","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait SwitchError\ncase object SwitchNotResponding extends SwitchError\ncase class Switch(id: String, responsive: Boolean)\ndef toggleSwitch(s: Switch): Either[SwitchError, String] =\n  if s.responsive then Right(s\"Switch ${s.id} toggled.\")\n  else Left(SwitchNotResponding)"}
{"id":"27669333-cda9-47e6-be04-041a22353b1f","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class AlarmAlreadyArmedException(msg: String) extends Exception(msg)\nclass Alarm(var armed: Boolean) {\n  def arm(): Unit = {\n    if (armed) throw new AlarmAlreadyArmedException(\"Alarm already armed.\")\n    armed = true\n  }\n}\ndef safeArm(alarm: Alarm): Unit =\n  try alarm.arm()\n  catch case e: AlarmAlreadyArmedException => println(\"Alarm: \" + e.getMessage)"}
{"id":"7e5a96b6-6665-4416-8a51-5bc3aacad251","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class Speaker(id: String, connected: Boolean)\ndef playAlarmSound(speaker: Speaker): Option[String] =\n  if speaker.connected then Some(\"Alarm sound played.\")\n  else None"}
{"id":"2138ed93-4a8e-4570-9dba-4dbad5266b9b","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SensorReadException(msg: String) extends Exception(msg)\nclass TemperatureSensor(val id: String, val available: Boolean) {\n  def readTemperature(): Int = {\n    if (!available) throw new SensorReadException(\"Cannot read temperature.\")\n    25\n  }\n}\ndef fetchTemperature(sensor: TemperatureSensor): Option[Int] = {\n  try Some(sensor.readTemperature())\n  catch case _: SensorReadException => None\n}"}
{"id":"4dc45189-fb70-439a-8ffd-cd86283e66e5","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object ThermostatController {\n  def setTemperature(target: Int): Unit = {\n    if (target < 10 || target > 30) {\n      throw new IllegalArgumentException(\"Temperature out of range\")\n    }\n    // code to communicate with device\n  }\n  def main(args: Array[String]): Unit = {\n    try {\n      setTemperature(40)\n    } catch {\n      case e: IllegalArgumentException => println(\"Error: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"02705d71-9033-407e-b4c4-d4d0d5318e40","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class LightSwitch {\n  def turnOn(): Unit = {\n    if (math.random() < 0.2) throw new RuntimeException(\"LightBulbFailure\")\n    println(\"Light turned ON\")\n  }\n}\nobject HomeLighting {\n  def main(args: Array[String]): Unit = {\n    val switch = new LightSwitch\n    try {\n      switch.turnOn()\n    } catch {\n      case e: Exception => println(\"Could not turn on light: \" + e)\n    }\n  }\n}"}
{"id":"00aca86d-a31b-429b-bbc9-a74166ea56e6","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object DoorLock {\n  def unlock(code: String): Unit = {\n    if (code != \"1234\") throw new SecurityException(\"Invalid code\")\n    println(\"Door unlocked\")\n  }\n}\nobject LockApp {\n  def main(args: Array[String]): Unit = {\n    try {\n      DoorLock.unlock(\"0000\")\n    } catch {\n      case e: SecurityException => println(\"Unlock failed: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"8d78c53a-cf88-4aa1-9237-c9073d5b5c5a","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmartPlug {\n  def activate(outletId: Int): Unit = {\n    if (outletId < 0) throw new IllegalArgumentException(\"Invalid outletId\")\n    println(s\"Outlet $outletId activated\")\n  }\n}\nobject PlugControl {\n  def activatePlug(): Unit = {\n    val plug = new SmartPlug\n    try {\n      plug.activate(-3)\n    } catch {\n      case e: IllegalArgumentException => println(e.getMessage)\n    }\n  }\n}"}
{"id":"6f7a1155-2d4a-4996-9a09-c59a72e16331","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object CameraController {\n  def captureSnapshot(): String = {\n    if (math.random() < 0.5)\n      throw new RuntimeException(\"CameraUnavailableException\")\n    \"SnapshotCaptured\"\n  }\n  def main(args: Array[String]): Unit = {\n    try {\n      println(captureSnapshot())\n    } catch {\n      case e: RuntimeException => println(\"Error: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"c9f2e383-a2bb-4ebd-b0a9-4b44950e7d3a","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class TemperatureSensor {\n  def readTemperature(): Double = {\n    if (math.random() > 0.7) throw new Exception(\"SensorNotResponding\")\n    22.0 + math.random() * 5.0\n  }\n}\nobject SensorApp {\n  def main(args: Array[String]): Unit = {\n    val sensor = new TemperatureSensor\n    try {\n      println(sensor.readTemperature())\n    } catch {\n      case e: Exception => println(\"Sensor error\")\n    }\n  }\n}"}
{"id":"45169d1d-20f0-4786-a471-1a8fc7340dd1","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object GarageDoorOpener {\n  def open(garageId: String): Unit = {\n    if (garageId.isBlank()) throw new Exception(\"GarageIdMissingException\")\n    println(s\"Garage $garageId opened\")\n  }\n  def main(args: Array[String]): Unit = {\n    try {\n      open(\"\")\n    } catch {\n      case e: Exception => println(\"Failed to open garage: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"224919e1-363f-4b4d-bb21-61cf5aae06b9","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SprinklerValve {\n  def startZone(zone: Int): Unit = {\n    if (zone < 1 || zone > 8)\n      throw new RuntimeException(\"ZoneOutOfBounds\")\n    println(s\"Sprinkler zone $zone running\")\n  }\n}\nobject Irrigation {\n  def main(args: Array[String]): Unit = {\n    val valve = new SprinklerValve\n    try {\n      valve.startZone(0)\n    } catch {\n      case e: Exception => println(\"Sprinkler error: \" + e)\n    }\n  }\n}"}
{"id":"fb07a3c0-b8a8-49c0-866f-92e1578f2ccf","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object SmartVacuum {\n  def startCleaning(room: String): Unit = {\n    if (room.trim.isEmpty) throw new Exception(\"NoRoomSpecified\")\n    println(s\"Cleaning started in $room\")\n  }\n  def tryCleaning(): Unit = {\n    try {\n      startCleaning(\"\")\n    } catch {\n      case e: Exception => println(e.getMessage)\n    }\n  }\n}"}
{"id":"cf550a51-c6f5-4972-b61e-f1166249e0fb","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmartCurtain {\n  def closeCurtain(): Unit = {\n    throw new RuntimeException(\"Curtain motor stuck\")\n  }\n}\nobject CurtainControl {\n  def main(args: Array[String]): Unit = {\n    val curtain = new SmartCurtain\n    try {\n      curtain.closeCurtain()\n    } catch {\n      case e: RuntimeException => println(\"Curtain error occurred\")\n    }\n  }\n}"}
{"id":"38dbad43-705a-4f4a-a887-48bb28c07d92","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait DeviceCommandError\ncase object InvalidStateError extends DeviceCommandError\ncase object TimeoutError extends DeviceCommandError\n\ndef setLightBrightness(level: Int): Either[DeviceCommandError, String] =\n  if (level < 0 || level > 100) Left(InvalidStateError)\n  else Right(s\"Brightness set to $level\")"}
{"id":"710cb1ee-c785-4998-a55a-a4e6e62098c8","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait ThermostatError\ncase object RangeError extends ThermostatError\ncase object DeviceUnreachable extends ThermostatError\nimport scala.util.Try\n\ndef updateThermostat(temp: Int): Try[String] =\n  Try {\n    if (temp < 5 || temp > 35) throw new Exception(\"OutOfRange\")\n    s\"Thermostat set to $temp\"\n  }"}
{"id":"1688c8e6-b418-4009-b32b-0dccad9d592f","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait LockActionError\ncase object WrongPin extends LockActionError\ncase object LockMalfunction extends LockActionError\n\ndef tryUnlock(pin: String): Either[LockActionError, String] =\n  if (pin == \"0000\") Right(\"Unlocked\")\n  else Left(WrongPin)"}
{"id":"0712868c-e659-429c-a665-adb153281488","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait DeviceConnectError\ncase object ConnectionLost extends DeviceConnectError\ncase object DeviceBusy extends DeviceConnectError\n\ndef connectDevice(ip: String): Either[DeviceConnectError, String] =\n  if (ip == \"\") Left(ConnectionLost)\n  else Right(s\"Device at $ip connected\")"}
{"id":"d8f61fce-c32b-4f18-9c23-6f531a97ab96","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait CameraCaptureError\ncase object CameraOffline extends CameraCaptureError\n\ndef captureImage(isOnline: Boolean): Option[String] =\n  if (isOnline) Some(\"ImageCaptured\")\n  else None"}
{"id":"c0ce2140-7193-4641-9bc3-2eed25672cc9","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait SensorError\ncase object NoReading extends SensorError\ncase object FaultySensor extends SensorError\n\ndef getHumidity(reading: Option[Double]): Either[SensorError, Double] =\n  reading.toRight(NoReading)"}
{"id":"877a1d7b-1de1-4950-9d1a-f7e18dd917d4","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait PlugError\ncase object PlugNotFound extends PlugError\ncase object OutletBusy extends PlugError\n\ndef activateSmartPlug(plugId: String): Either[PlugError, String] =\n  if (plugId == \"ABC123\") Right(\"Plug activated\")\n  else Left(PlugNotFound)"}
{"id":"91899c3c-dd71-4469-aa33-461f9c0dbe3d","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait GarageError\ncase object GarageObstructed extends GarageError\ncase object GarageNotFound extends GarageError\n\ndef openGarage(garageNumber: Int): Either[GarageError, String] =\n  if (garageNumber < 1) Left(GarageNotFound)\n  else Right(\"Garage opened\")"}
{"id":"6375cbdd-45d7-44e0-9ee2-d399cec36610","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait VacuumError\ncase object BatteryLow extends VacuumError\ncase object RoomUnknown extends VacuumError\n\ndef callVacuum(room: String): Either[VacuumError, String] =\n  if (room.toLowerCase == \"kitchen\") Right(\"Vacuum is on its way\")\n  else Left(RoomUnknown)"}
{"id":"412cec2a-4a90-40f7-a9f0-7f1fb3d432b1","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait CurtainError\ncase object MotorFailure extends CurtainError\ncase object CurtainJammed extends CurtainError\nimport scala.util.Try\n\ndef safeCloseCurtain(isJammed: Boolean): Try[String] =\n  Try {\n    if (isJammed) throw new Exception(\"Curtain is jammed\")\n    \"Curtain closed\"\n  }"}
{"id":"15cd0a87-e133-4658-81e4-c0aa856d2857","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class Driver(id: String, available: Boolean)\ncase class RiderRequest(id: String, location: String)\n\ndef assignDriver(request: RiderRequest, drivers: List[Driver]): Option[Driver] =\n  drivers.find(_.available)\n"}
{"id":"6412c823-fa4a-40cd-aa9f-9ae281f41aec","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"case class RideRequest(id: String)\nclass NoDriverAvailableException(msg: String) extends Exception(msg)\n\ndef assignDriverException(request: RideRequest, drivers: List[String]): String =\n  if drivers.isEmpty then throw new NoDriverAvailableException(\"No drivers available\")\n  else drivers.head\n"}
{"id":"27395bac-6857-49dd-b4ee-d0ffa04f17d5","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait DispatchError\ncase object NoDriversNearby extends DispatchError\ncase class RideAssignment(driverId: String)\n\ndef dispatchRide(location: String, availableDrivers: List[String]): Either[DispatchError, RideAssignment] =\n  availableDrivers.headOption\n    .map(id => Right(RideAssignment(id)))\n    .getOrElse(Left(NoDriversNearby))\n"}
{"id":"4de2eec4-7ead-4e64-838d-5f6993e08220","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class AssignmentError(msg: String) extends RuntimeException(msg)\n\ndef matchRiders(driverId: String, riderIds: List[String]): String =\n  try {\n    if riderIds.isEmpty then throw new AssignmentError(\"No riders to match\")\n    s\"Driver $driverId assigned to rider ${riderIds.head}\"\n  } catch {\n    case e: AssignmentError => \"Assignment failed: \" + e.getMessage\n  }\n"}
{"id":"a201301e-9ef4-47ae-9bcf-39c01913ecfe","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"import scala.util.Try\ncase class Dispatch(driverId: String, riderId: String)\n\ndef safeDispatch(driver: Option[String], rider: Option[String]): Try[Dispatch] =\n  Try {\n    val d = driver.get\n    val r = rider.get\n    Dispatch(d, r)\n  }\n"}
{"id":"828cc6d5-32e2-4f0f-9654-2edc304b041d","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class RiderNotFoundException extends Exception(\"Rider not found\")\n\ndef fetchRiderInfo(riderId: String): String =\n  if riderId == \"\" then throw new RiderNotFoundException\n  else \"Rider Info\"\n"}
{"id":"3f139b98-2b67-4650-86f6-5eaf9deda6e6","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait RideOfferError\ncase object RequestTimedOut extends RideOfferError\ncase class Offer(driverId: String)\n\ndef makeRideOffer(driverId: Option[String]): Either[RideOfferError, Offer] =\n  driverId.map(id => Right(Offer(id))).getOrElse(Left(RequestTimedOut))\n"}
{"id":"25b2d0d7-ba58-4c70-b002-5b3b847d5602","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def computeFare(distance: Double): Double =\n  if distance < 0 then throw new IllegalArgumentException(\"Negative distance\")\n  else 2.0 + distance * 1.2\n"}
{"id":"b2b14bab-e603-4d16-bd9d-a1dfe4278766","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait RiderAssignmentError\ncase object InvalidPickupLocation extends RiderAssignmentError\ncase class DriverAssigned(driverId: String)\n\ndef assignRider(pickup: String, driver: Option[String]): Either[RiderAssignmentError, DriverAssigned] =\n  if pickup.isEmpty then Left(InvalidPickupLocation)\n  else driver match\n    case Some(id) => Right(DriverAssigned(id))\n    case None => Left(InvalidPickupLocation)\n"}
{"id":"13f054f4-0a5d-4f6b-964f-c6c4b137147b","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class SurgePricingException extends Exception(\"Surge pricing error\")\n\ndef getSurgeMultiplier(zone: String): Double =\n  zone match {\n    case \"busy\" => 2.0\n    case \"normal\" => 1.0\n    case _ => throw new SurgePricingException\n  }\n"}
{"id":"2211c169-4459-4650-8a6a-5d98f5d0ee63","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"import scala.util.Try\ndef parseVehicleType(vehicle: String): Try[String] =\n  Try {\n    if vehicle == \"\" then throw new IllegalArgumentException(\"Vehicle type required\")\n    vehicle.capitalize\n  }\n"}
{"id":"24bdf1d0-bd75-44d2-b726-6f9d8785b9c1","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def scheduleRide(time: Int): String =\n  try {\n    if time < 0 then throw new IllegalArgumentException(\"Time cannot be negative\")\n    s\"Ride scheduled at $time\"\n  } catch {\n    case e: IllegalArgumentException => \"Scheduling error: \" + e.getMessage\n  }\n"}
{"id":"217fea8f-fadc-4160-9a86-6e16c1949a47","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait CancelError\ncase object RideAlreadyStarted extends CancelError\ncase object CancellationSuccess\n\ndef cancelRide(status: String): Either[CancelError, CancellationSuccess.type] =\n  if status == \"ongoing\" then Left(RideAlreadyStarted)\n  else Right(CancellationSuccess)\n"}
{"id":"3de6cdbd-eacf-41aa-a5bb-cad429a1e95b","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def findNearestDriver(location: String, driverIds: List[String]): String =\n  if driverIds.isEmpty then throw new RuntimeException(\"No drivers near $location\")\n  else driverIds.head\n"}
{"id":"284ee58c-3141-47f4-8d21-099704b10d76","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"import scala.util.Try\ncase class Matching(drivers: List[String], rider: String)\ndef tryMatch(drivers: List[String], rider: String): Try[Matching] =\n  Try {\n    require(drivers.nonEmpty, \"Drivers pool empty\")\n    Matching(drivers, rider)\n  }\n"}
{"id":"89b1e5aa-9731-48e7-9534-e5868128ad8f","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class DriverUnavailable extends Exception(\"Driver unavailable\")\ndef assignDriverOrFail(driverAvailable: Boolean): String =\n  if !driverAvailable then throw new DriverUnavailable\n  else \"Driver assigned\"\n"}
{"id":"cfe758d0-b8e6-4ab8-89c9-0f7649ebda48","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class PaymentError(reason: String)\ncase object PaymentProcessed\n\ndef processPayment(fare: Double): Either[PaymentError, PaymentProcessed.type] =\n  if fare <= 0 then Left(PaymentError(\"Invalid fare\"))\n  else Right(PaymentProcessed)\n"}
{"id":"69a9b4af-7a74-43a9-b237-cc0cc0ca16fc","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getDispatchInfo(dispatchId: String): String =\n  try {\n    if dispatchId.isEmpty then throw new NullPointerException(\"Missing dispatchId\")\n    s\"Dispatch Info for $dispatchId\"\n  } catch {\n    case e: Exception => s\"Error: ${e.getMessage}\"\n  }\n"}
{"id":"82a0c7b5-5455-4911-978f-cffbf8876665","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait StatusError\ncase object UnknownStatus extends StatusError\n\ndef updateRideStatus(status: String): Either[StatusError, String] =\n  status match\n    case \"started\" | \"completed\" => Right(status)\n    case _ => Left(UnknownStatus)\n"}
{"id":"55442d5f-cc52-46f6-8838-3e9e7177fe60","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getRouteDistance(routeId: String): Double =\n  if routeId == \"invalid\" then throw new IllegalArgumentException(\"Invalid route\")\n  10.5\n"}
{"id":"b87251b1-a6bb-4212-b25d-f247c5d19e0d","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"case class DriverUnavailableException(driverId: String) extends Exception(s\"Driver $driverId is unavailable\")\ndef findAvailableDriver(drivers: List[String]): String =\n  if drivers.nonEmpty then drivers.head\n  else throw new DriverUnavailableException(\"unknown\")"}
{"id":"8796c906-10a9-472e-9385-a86375c2aba3","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def assignRiderToDriver(riderId: String, driverId: String): Unit =\n  try\n    if driverId.isEmpty then throw new Exception(\"Driver ID cannot be empty\")\n    println(s\"Rider $riderId assigned to driver $driverId\")\n  catch\n    case e: Exception =>\n      println(\"Assignment failed: \" + e.getMessage)"}
{"id":"09b30769-41ac-46c7-a21e-473973b9d427","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class RideNotFoundException(rideId: String) extends Exception(s\"Ride $rideId not found\")\ndef fetchRideStatus(rideId: String): String =\n  if rideId == \"ride123\" then \"InProgress\"\n  else throw new RideNotFoundException(rideId)"}
{"id":"c3e9da35-1d7d-432c-a1de-8cf39fa909b8","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"object DispatchService:\n  def completeDispatch(dispatchId: String): Unit =\n    try\n      if dispatchId == \"\" then throw new Exception(\"Invalid dispatch id\")\n      println(s\"Dispatch $dispatchId completed\")\n    catch case e: Exception => println(e.getMessage)"}
{"id":"ae1fb283-acee-4990-be30-54d679112270","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def calculateFare(distance: Double): Double =\n  if distance < 0 then throw new IllegalArgumentException(\"Distance cannot be negative\")\n  else 2.0 + distance * 1.5"}
{"id":"28d695a2-c4d0-4dd0-9066-2ca78b09427c","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"object CancellationHandler:\n  def cancelRide(rideId: String): Boolean =\n    try\n      if rideId.length < 5 then throw new Exception(\"Ride ID invalid\")\n      println(s\"Ride $rideId cancelled\")\n      true\n    catch case _: Exception => false"}
{"id":"46cbb41d-00eb-4402-96ea-0fc20039b226","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class InvalidLocationException(msg: String) extends Exception(msg)\ndef verifyPickupLocation(location: String): Unit =\n  if location.trim.isEmpty then throw new InvalidLocationException(\"Pickup location required\")"}
{"id":"ae46edd4-c8c7-4cf2-9805-c66f60b774c3","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"object PaymentProcessor:\n  def processPayment(riderId: String, amount: Double): String =\n    try\n      if amount <= 0 then throw new Exception(\"Invalid payment amount\")\n      s\"Payment of $$amount successful for rider $riderId\"\n    catch\n      case e: Exception => \"Payment failed: \" + e.getMessage"}
{"id":"3b0d64bf-4564-4476-bfbb-29c906aa4967","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def updateDriverStatus(driverId: String, status: String): Unit =\n  try\n    if status != \"available\" && status != \"busy\" then throw new Exception(\"Unknown status\")\n    println(s\"Driver $driverId is now $status\")\n  catch case e: Exception => println(e.getMessage)"}
{"id":"c368084e-2970-47c4-bc20-d23256738eaf","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def requestRide(riderId: String, location: String): String =\n  if location == \"blocked\" then throw new RuntimeException(\"Service not available at this location\")\n  else s\"Ride requested by $riderId at $location\""}
{"id":"350649a1-420e-4c49-ab8f-70d4556a450f","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait DispatchError\ncase object NoDriversAvailable extends DispatchError\ncase object InvalidPickup extends DispatchError\n\ndef assignDispatch(pickup: String, drivers: List[String]): Either[DispatchError, String] =\n  if !drivers.exists(_.nonEmpty) then Left(NoDriversAvailable)\n  else if pickup.isEmpty then Left(InvalidPickup)\n  else Right(drivers.head)"}
{"id":"eb3153d8-aa71-4dc3-8314-743dbe395de6","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class RiderNotFoundError(riderId: String)\ndef getRiderInfo(riderId: String): Option[String] =\n  val db = Map(\"r100\" -> \"Alice\", \"r101\" -> \"Marc\")\n  db.get(riderId)"}
{"id":"0b25ac6f-54b3-4767-856e-675bca4787b5","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef connectToDispatchService(url: String): Try[String] =\n  Try {\n    if url == \"down\" then throw new Exception(\"Service unavailable\")\n    else s\"Connected to $url\"\n  }"}
{"id":"672461ea-247b-41d4-9d02-aff27c8610ae","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait RideStatusError\ncase object RideNotActive extends RideStatusError\n\ndef getRideStatus(rideId: String, activeRides: Set[String]): Either[RideStatusError, String] =\n  if activeRides.contains(rideId) then Right(\"Active\")\n  else Left(RideNotActive)"}
{"id":"cd07b703-e104-4279-800e-8196d589c333","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class PaymentError(msg: String)\ndef validatePaymentAmount(amount: Double): Either[PaymentError, Double] =\n  if amount <= 0 then Left(PaymentError(\"Amount must be positive\"))\n  else Right(amount)"}
{"id":"13ea935d-0326-40a8-87a9-cd48fff44778","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class LocationError(reason: String)\ndef safeParseLocation(input: String): Either[LocationError, (Double, Double)] =\n  input.split(\",\") match\n    case Array(lat, lng) =>\n      Right((lat.toDouble, lng.toDouble))\n    case _ =>\n      Left(LocationError(\"Invalid input format\"))"}
{"id":"22e63af7-590c-468b-afc4-7674c103c31e","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def findBestDriver(drivers: List[String]): Option[String] =\n  drivers.find(_.startsWith(\"driver_\"))"}
{"id":"817fcc54-daa4-4ca3-b52d-3c400fd52f93","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def safeCalculateFare(distance: Double): Option[Double] =\n  Option.when(distance >= 0)(2.5 + distance * 1.2)"}
{"id":"e2db6df0-f827-4e58-a132-3d9ae5213773","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait CancelError\ncase object CancelNotAllowed extends CancelError\n\ndef tryCancelRide(status: String): Either[CancelError, String] =\n  if status == \"in_progress\" then Left(CancelNotAllowed)\n  else Right(\"Ride cancelled successfully\")"}
{"id":"e0dd8e2b-6678-49c9-84e7-d73172709ed3","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"import scala.util.Try\ndef scheduleDispatch(time: String): Try[String] =\n  Try {\n    if time.isEmpty then throw new Exception(\"No time specified\")\n    else s\"Dispatch scheduled at $time\"\n  }"}
{"id":"01fc3013-8250-4874-ae6b-0a6a8b2ed957","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"case class FlightNotFoundException(flightNumber: String) extends Exception(s\"Flight $flightNumber not found.\")\n\ndef findFlight(flightNumber: String): Flight = {\n  if flightNumber != \"AB123\" then throw new FlightNotFoundException(flightNumber)\n  Flight(\"AB123\", \"NYC\", \"LAX\")\n}"}
{"id":"286dead6-d769-4c02-aa56-52a40c63a2d9","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def parsePassengerAge(ageString: String): Int = {\n  try {\n    ageString.toInt\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Invalid age format.\")\n  }\n}"}
{"id":"aa7eb5b9-5a2e-4401-9f01-8e63cd630229","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"object BookingService {\n  def cancelBooking(bookingId: String): Unit = {\n    try {\n      if bookingId.isEmpty then throw new Exception(\"Booking ID is required.\")\n      // perform cancellation\n    } catch {\n      case e: Exception => println(\"Cancellation failed: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"03905d31-c939-410f-8012-516183bd0c20","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class TicketPriceCalculator {\n  def calculatePrice(age: Int): Double = {\n    if age < 0 then throw new IllegalArgumentException(\"Age cannot be negative.\")\n    else if age < 12 then 100.0\n    else 200.0\n  }\n}"}
{"id":"c54ac807-8967-4557-aede-527915df5da0","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getPassengerByEmail(email: String): Passenger = {\n  if email == \"\" then throw new Exception(\"Email not specified.\")\n  Passenger(\"John Doe\", email)\n}"}
{"id":"b283b410-94bd-4d57-b007-bf7cf07a791f","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"object PaymentProcessor {\n  def processPayment(amount: Double): Unit = {\n    if amount <= 0 then throw new RuntimeException(\"Payment amount must be positive.\")\n    // process payment\n  }\n}"}
{"id":"0c044e83-a9da-4ce7-b4b4-202327a3c637","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def issueTicket(flight: Flight, seat: String): Ticket = {\n  try {\n    if seat == \"\" then throw new Exception(\"Seat selection required.\")\n    Ticket(flight, seat)\n  } catch {\n    case e: Exception => throw e\n  }\n}"}
{"id":"05f4bd1d-4595-4e56-a7ed-08491fa8636b","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class BoardingPassPrinter {\n  def printPass(ticket: Ticket): Unit = {\n    try {\n      if ticket.seat == \"\" then throw new Exception(\"Seat missing on ticket.\")\n      println(s\"Boarding pass for seat ${ticket.seat}\")\n    } catch {\n      case e: Exception => println(\"Printing failed: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"64597b37-b226-4e86-b9d9-4e81ded7fd5a","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def updateFlightStatus(flightId: String, status: String): Unit = {\n  if !(Set(\"OnTime\", \"Delayed\", \"Cancelled\").contains(status)) then\n    throw new IllegalArgumentException(\"Invalid status.\")\n  // update logic\n}"}
{"id":"a4e7cf6d-ef17-489c-a75a-749d4a3eb6bf","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def checkInPassenger(passenger: Passenger, flight: Flight): Unit = {\n  try {\n    if flight.status == \"Departed\" then throw new Exception(\"Check-in closed.\")\n    println(s\"Check-in successful for ${passenger.name}\")\n  } catch {\n    case e: Exception => println(\"Check-in error: \" + e.getMessage)\n  }\n}"}
{"id":"70f7d464-5b87-4af9-bb69-1d758e4b9892","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait TicketingError\ncase object FlightDoesNotExist extends TicketingError\ncase object SeatUnavailable extends TicketingError\n\ncase class Flight(num: String, origin: String, dest: String)\n\n def bookSeat(flightNumber: String, seat: String): Either[TicketingError, String] = {\n  if flightNumber != \"AB123\" then Left(FlightDoesNotExist)\n  else if seat != \"12A\" then Left(SeatUnavailable)\n  else Right(\"Seat booked\")\n}"}
{"id":"a5d27d5e-0ce4-4828-adbb-b5bfb7995736","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait PassengerValidationError\ncase object EmailInvalid extends PassengerValidationError\n\ncase class Passenger(name: String, email: String)\n\ndef validatePassengerEmail(email: String): Either[PassengerValidationError, Passenger] = {\n  if email.contains(\"@\") then Right(Passenger(\"Alice\", email))\n  else Left(EmailInvalid)\n}"}
{"id":"ca77d9c3-03a7-44ad-bf6a-dccc7145ac46","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def calculateFareOptional(discountCode: Option[String]): Option[Double] = {\n  discountCode match {\n    case Some(\"SAVE10\") => Some(180.0)\n    case Some(_)        => Some(200.0)\n    case None           => None\n  }\n}"}
{"id":"8ae32003-e7d2-41a6-8f6b-9c2b9bbe4fb8","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef issueTicketSafe(flight: Flight, seat: String): Try[Ticket] = {\n  Try {\n    require(seat.nonEmpty, \"Seat required\")\n    Ticket(flight, seat)\n  }\n}"}
{"id":"6351106c-4273-4320-9267-0163631fa997","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\n\ncase class Payment(amount: Double)\n\ndef processPaymentEither(amount: Double): Either[PaymentError, Payment] = {\n  if amount < 100 then Left(InsufficientFunds)\n  else Right(Payment(amount))\n}"}
{"id":"26345bcd-e3dc-47d0-bd22-6c2d2ed3ef1e","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def findBooking(reference: String): Option[String] = {\n  Some(\"BOOK123\").filter(_ == reference)\n}"}
{"id":"e247a7ad-f11b-43c7-a027-1be2ed2267af","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def safePassengerAge(ageString: String): Option[Int] =\n  scala.util.Try(ageString.toInt).toOption.filter(_ > 0)"}
{"id":"9c6c1c6f-f8a6-4a4f-b0b8-2d4ea37a30fb","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait BoardingError\ncase object AlreadyBoarded extends BoardingError\n\ncase class Passenger(name: String, hasBoarded: Boolean)\n\ndef boardPassenger(passenger: Passenger): Either[BoardingError, String] =\n  if passenger.hasBoarded then Left(AlreadyBoarded)\n  else Right(\"Boarded successfully\")"}
{"id":"883012fc-0684-459d-a909-aeead7a20469","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def updateFlightStatusTry(status: String): scala.util.Try[String] =\n  scala.util.Try {\n    require(Set(\"OnTime\", \"Delayed\", \"Cancelled\").contains(status), \"Invalid status\")\n    \"Status updated\"\n  }"}
{"id":"c1e9bba1-9d9a-4b81-b100-12b9a918afc6","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def checkSeatAvailability(seatNumber: String): Option[String] =\n  if seatNumber == \"1A\" then Some(\"Available\") else None"}
{"id":"5466807c-96cf-49e8-8a55-faa605eaef27","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"case class PassengerNotFoundException(passengerId: String) extends Exception(s\"Passenger $passengerId not found\")\n\ndef findPassengerById(passengerId: String): Passenger = {\n  if (passengerId != \"P001\") throw new PassengerNotFoundException(passengerId)\n  Passenger(\"P001\", \"Alice Smith\")\n}"}
{"id":"437daaf6-f027-4b82-8a3a-fdc2240285f5","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"object FlightCancellationHandler {\n  def cancelFlight(flightNumber: String): Unit = {\n    if (flightNumber.isEmpty) throw new IllegalArgumentException(\"Flight number cannot be empty\")\n    println(s\"Flight $flightNumber cancelled.\")\n  }\n}"}
{"id":"5dbd7ed7-667e-45e7-bda5-02d0e0ea66e1","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def issueTicket(passengerId: String, flightCode: String): Ticket = {\n  try {\n    if (passengerId.isBlank || flightCode.isBlank) {\n      throw new Exception(\"Missing passenger or flight information\")\n    }\n    Ticket(passengerId, flightCode, \"A1\")\n  } catch {\n    case ex: Exception =>\n      println(s\"Error issuing ticket: ${ex.getMessage}\")\n      null\n  }\n}"}
{"id":"692b9cbf-3528-40bb-81df-3fe72c5abed6","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class InvalidBookingReferenceException(ref: String)\n  extends Exception(s\"Invalid booking reference: $ref\")\n\ndef validateBookingReference(ref: String): Boolean = {\n  if (ref.length != 8) throw new InvalidBookingReferenceException(ref)\n  true\n}"}
{"id":"413560f9-2cf2-4d01-9297-1219b0a5f76f","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"object PaymentProcessor {\n  def chargeCard(cardNumber: String, amount: Double): Boolean = {\n    if (amount <= 0)\n      throw new Exception(\"Amount must be positive\")\n    if (cardNumber.length != 16)\n      throw new Exception(\"Invalid credit card number\")\n    true\n  }\n}"}
{"id":"f4f656ba-6093-489f-ab40-ec6c6eca066a","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def assignSeat(ticket: Ticket, seatNumber: String): Ticket = {\n  try {\n    if (seatNumber == \"\") throw new Exception(\"Seat number required\")\n    ticket.copy(seat = seatNumber)\n  } catch {\n    case _: Exception =>\n      Ticket(ticket.passengerId, ticket.flightCode, \"Unassigned\")\n  }\n}"}
{"id":"8ed0a9f1-b4d1-48cf-8dcc-1d809b9454d4","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"object CheckInValidator {\n  def checkIn(passengerId: String, flightCode: String): Boolean = {\n    if (passengerId == \"blocked\")\n      throw new Exception(\"Passenger blacklisted\")\n    true\n  }\n}"}
{"id":"ab6872f4-6c17-47a1-be3a-417e5745e480","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getFlightStatus(flightNumber: String): String = {\n  try {\n    if (flightNumber == \"\") throw new RuntimeException(\"No flight number provided\")\n    \"On Time\"\n  } catch {\n    case ex: Exception => \"Unknown status\"\n  }\n}"}
{"id":"d58cefcf-512a-4701-b9d8-dbf1ac5fbd77","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class OverbookingException(flight: String) extends Exception(s\"Flight $flight is overbooked\")\n\ndef bookSeat(flightCode: String, seatsAvailable: Int): String = {\n  if (seatsAvailable <= 0)\n    throw new OverbookingException(flightCode)\n  \"Seat booked successfully\"\n}"}
{"id":"151bfee8-4103-422c-b898-1d5fab731083","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def updatePassengerDetails(passenger: Passenger, field: String, value: String): Passenger = {\n  if (field != \"name\") {\n    throw new Exception(\"Only 'name' field can be updated\")\n  }\n  passenger.copy(name = value)\n}"}
{"id":"77822351-8dad-47b8-8e4c-82c6ce7d2058","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait TicketingError\ncase object NoSeatsAvailable extends TicketingError\ncase object PaymentFailed extends TicketingError\n\ncase class Ticket(passengerId: String, flightCode: String, seat: String)\n\ndef bookTicket(passengerId: String, flightCode: String, seatsLeft: Int, paymentOk: Boolean): Either[TicketingError, Ticket] = {\n  if (seatsLeft < 1) Left(NoSeatsAvailable)\n  else if (!paymentOk) Left(PaymentFailed)\n  else Right(Ticket(passengerId, flightCode, \"12C\"))\n}"}
{"id":"1d0fb10a-031e-4c1a-8c5c-abad4c818468","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait CheckInError\ncase object InvalidBoardingPass extends CheckInError\ncase object SecurityAlert extends CheckInError\n\ndef performCheckIn(boardingPass: Option[String], securityPassed: Boolean): Either[CheckInError, String] = {\n  boardingPass match {\n    case None => Left(InvalidBoardingPass)\n    case Some(_) if !securityPassed => Left(SecurityAlert)\n    case Some(bp) => Right(s\"Checked in with boarding pass $bp\")\n  }\n}"}
{"id":"cc63bd43-fdf9-4681-a6dd-fc17eb21f6b4","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def calculateFare(base: Double, discount: Option[Double]): Option[Double] = {\n  discount match {\n    case Some(d) if d >= 0 && d <= 1 => Some(base * (1 - d))\n    case None => Some(base)\n    case _ => None\n  }\n}"}
{"id":"e09f6b2b-f1b2-4fcf-9831-0981598e6c28","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait PassengerLookupError\ncase object PassengerRecordNotFound extends PassengerLookupError\n\ncase class Passenger(passengerId: String, name: String)\n\ndef findPassenger(passengerId: String): Either[PassengerLookupError, Passenger] = {\n  if (passengerId == \"P123\") Right(Passenger(\"P123\", \"John Doe\"))\n  else Left(PassengerRecordNotFound)\n}"}
{"id":"6f1e4177-e952-48bb-a756-6cbb800dd2af","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseFlightTime(time: String): Try[Int] = Try {\n  time.split(\":\").toList match {\n    case h :: m :: Nil => h.toInt * 60 + m.toInt\n    case _ => throw new IllegalArgumentException(\"Time format should be HH:MM\")\n  }\n}"}
{"id":"c6e47c5f-6f62-406a-8de0-5eb481178672","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait UpgradeError\ncase object NoUpgradeAvailable extends UpgradeError\n\ncase class UpgradeInfo(level: String)\n\ndef requestUpgrade(frequencyPoints: Int): Either[UpgradeError, UpgradeInfo] = {\n  if (frequencyPoints >= 10000) Right(UpgradeInfo(\"Business\"))\n  else Left(NoUpgradeAvailable)\n}"}
{"id":"798f4409-b2ec-4f6c-89b7-7ecd57a559c4","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def validateSeat(seat: String): Option[String] = {\n  if (seat.matches(\"[A-Z][0-9]{1,2}\")) Some(seat)\n  else None\n}"}
{"id":"ddd7bb56-6885-4410-b9ba-fabf38d7750b","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"import scala.util.Try\n\ncase class Refund(amount: Double)\n\ndef processRefund(requested: Double): Try[Refund] = Try {\n  require(requested > 0, \"Requested refund must be positive\")\n  Refund(requested)\n}"}
{"id":"1a52d829-4d55-40d5-84a6-631dbf327ec6","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object CardDeclined extends PaymentError\ncase object InsufficientBalance extends PaymentError\n\ncase class Receipt(amount: Double)\n\ndef makePayment(cardOk: Boolean, fundsOk: Boolean): Either[PaymentError, Receipt] = {\n  if (!cardOk) Left(CardDeclined)\n  else if (!fundsOk) Left(InsufficientBalance)\n  else Right(Receipt(200.0))\n}"}
{"id":"933098cb-dd2f-4c06-b4f1-3663b859a10a","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def findFlightByCode(code: String): Option[String] = {\n  List(\"AA101\", \"UA456\").find(_ == code)\n}"}
{"id":"a5be47f5-80b8-4304-9765-647b11d5bd84","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Ticket(passengerId: String, flightCode: String, seat: String)\ncase class Passenger(passengerId: String, name: String)"}
{"id":"9afb6139-0004-4bda-8981-6ff7a150ecec","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"case class ReservationId(value: String)\ncase class ReservationNotFound(id: String) extends Exception(s\"Reservation $id not found\")\nobject ReservationService {\n  private val reservations = Map(\"ABC123\" -> \"Room101\")\n  def getRoomNumberByReservation(id: ReservationId): String = {\n    reservations.get(id.value).getOrElse(throw new ReservationNotFound(id.value))\n  }\n}\nval roomNumber = ReservationService.getRoomNumberByReservation(ReservationId(\"XYZ999\"))"}
{"id":"04946e59-122f-4843-9d54-375683d3b67f","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object PaymentProcessor {\n  def chargeCard(cardNumber: String, amount: Double): Boolean = {\n    if (cardNumber.length != 16)\n      throw new IllegalArgumentException(\"Invalid card number\")\n    else if (amount <= 0)\n      throw new IllegalArgumentException(\"Charge amount must be positive\")\n    else\n      true\n  }\n}\ntry {\n  PaymentProcessor.chargeCard(\"1234567890123456\", -50)\n} catch {\n  case e: IllegalArgumentException => println(e.getMessage)\n}"}
{"id":"029f7db0-7766-42b2-a9d8-05118e255ca8","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class HotelFullException(message: String) extends Exception(message)\nobject BookingSystem {\n  def reserveRoom(date: String, guestName: String): String = {\n    if (date == \"2024-12-25\") throw new HotelFullException(\"No rooms available on Christmas\")\n    s\"Room reserved for $guestName on $date\"\n  }\n}\ntry {\n  BookingSystem.reserveRoom(\"2024-12-25\", \"Sophie Turner\")\n} catch {\n  case ex: HotelFullException => println(s\"Booking failed: ${ex.getMessage}\")\n}"}
{"id":"c4a7b36f-2452-4b36-90c3-aa66261840f1","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object RoomService {\n  def getRoomInfo(roomNumber: Int): String = {\n    if (roomNumber < 100 || roomNumber > 999)\n      throw new RuntimeException(\"Room number out of range\")\n    else\n      s\"Room $roomNumber infos\"\n  }\n}\nval info = RoomService.getRoomInfo(42)"}
{"id":"41746926-18aa-4397-a64b-cf0c73adae1d","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object EmailNotificationSender {\n  def sendConfirmation(email: String, reservationId: String): Unit = {\n    if (!email.contains(\"@\")) throw new Exception(\"Invalid email address!\")\n    println(s\"Confirmation sent to $email for reservation $reservationId\")\n  }\n}\ntry {\n  EmailNotificationSender.sendConfirmation(\"userexample.com\", \"ABC123\")\n} catch {\n  case e: Exception => println(\"Failed to send confirmation: \" + e.getMessage)\n}"}
{"id":"c3470489-6228-43f4-bfc1-6e35b12b603e","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"case class Guest(name: String)\ncase class InvalidGuestException(reason: String) extends Exception(reason)\nobject GuestRegistry {\n  def registerGuest(guest: Guest): Boolean = {\n    if (guest.name.isBlank) throw new InvalidGuestException(\"Guest name cannot be blank\")\n    true\n  }\n}\ntry {\n  GuestRegistry.registerGuest(Guest(\"\"))\n} catch {\n  case ex: InvalidGuestException => println(ex.reason)\n}"}
{"id":"0760c6ba-1bd3-4841-9fed-c1f27ed15245","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object InvoiceCalculator {\n  def calculateInvoice(nights: Int, nightlyRate: Double): Double = {\n    if (nights <= 0) throw new IllegalStateException(\"Nights must be positive\")\n    if (nightlyRate <= 0) throw new IllegalStateException(\"Nightly rate must be positive\")\n    nights * nightlyRate\n  }\n}\ntry {\n  val invoice = InvoiceCalculator.calculateInvoice(0, 150.0)\n} catch {\n  case ex: Exception => println(ex.getMessage)\n}"}
{"id":"49f61dfc-22e5-4937-ad99-e18033b8a6ac","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object LoyaltyPointsManager {\n  def addPoints(guestId: String, points: Int): Int = {\n    if (points < 0) throw new Exception(\"Points must be non-negative\")\n    points + 100\n  }\n}\nval updated = try {\n  LoyaltyPointsManager.addPoints(\"G123\", -5)\n} catch {\n  case e: Exception => println(e.getMessage); 0\n}"}
{"id":"fceb89af-18c9-4315-bc1e-86d01c2dda52","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object CancellationPolicy {\n  def applyCancellationFee(daysBefore: Int): Double = {\n    if (daysBefore < 0)\n      throw new IllegalArgumentException(\"Invalid number of days before arrival\")\n    else if (daysBefore < 2)\n      200\n    else\n      50\n  }\n}\nval fee = CancellationPolicy.applyCancellationFee(-1)"}
{"id":"52187611-0625-42da-84f5-dbcc87216136","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object RoomAllocation {\n  def allocate(roomCategory: String): Int = {\n    if (roomCategory.isEmpty)\n      throw new Exception(\"Room category must be provided!\")\n    101\n  }\n}\ntry {\n  val room = RoomAllocation.allocate(\"\")\n} catch {\n  case ex: Exception => println(ex.getMessage)\n}"}
{"id":"0601a090-1be9-4afd-b299-7454e83e321b","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait ReservationError\ncase object ReservationAlreadyExists extends ReservationError\ncase object InvalidReservationDates extends ReservationError\ncase class ReservationDetails(guestName: String, from: String, to: String)\nobject FunctionalReservationEngine {\n  def createReservation(details: ReservationDetails): Either[ReservationError, String] =\n    if (details.from == details.to) Left(InvalidReservationDates)\n    else if (details.guestName == \"Taken\") Left(ReservationAlreadyExists)\n    else Right(s\"Reservation confirmed for ${details.guestName}\")\n}\nval res = FunctionalReservationEngine.createReservation(ReservationDetails(\"Alice\",\"2024-06-10\",\"2024-06-10\"))"}
{"id":"b5688de5-709f-4d5a-bcc3-b2a7b26ab85c","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object CardDeclined extends PaymentError\ncase object InvalidCardInfo extends PaymentError\nobject SafePaymentProcessor {\n  def process(card: String, amount: Double): Either[PaymentError, String] =\n    if (card.length != 16) Left(InvalidCardInfo)\n    else if (amount > 10000) Left(CardDeclined)\n    else Right(\"Payment accepted\")\n}\nval paymentResult = SafePaymentProcessor.process(\"123456789012345\", 150.0)"}
{"id":"301c3e9d-813a-4f8a-88fd-5ba874898428","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.Try\nobject TryRoomIdParsing {\n  def parseRoomId(text: String): Try[Int] = Try(text.toInt)\n}\nval parsedRoom = TryRoomIdParsing.parseRoomId(\"ABC123\").recover{\n  case _ => -1\n}"}
{"id":"6d0aad65-f082-43e4-87fa-3ade615cead2","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"object EmailValidation {\n  def validateEmail(email: String): Option[String] =\n    if (email.contains(\"@\")) Some(email)\n    else None\n}\nval validEmail = EmailValidation.validateEmail(\"manager@hotel.com\")\nval invalidEmail = EmailValidation.validateEmail(\"oops.com\")"}
{"id":"7f167138-d889-4008-9647-c558fee0495b","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait BookingError\ncase object HotelIsFull extends BookingError\ncase class BookingRequest(guest: String, date: String)\nobject ComposedBookingService {\n  def checkAvailability(date: String): Either[BookingError, Unit] =\n    if (date == \"2024-12-25\") Left(HotelIsFull) else Right(())\n  def createBooking(req: BookingRequest): Either[BookingError, String] =\n    checkAvailability(req.date).map(_ => s\"Booking for ${req.guest} on ${req.date}\")\n}\nval bookingStatus = ComposedBookingService.createBooking(BookingRequest(\"Bob\", \"2024-12-25\"))"}
{"id":"5accc600-1115-43d8-8e0e-1a6ffda89475","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"object GuestOptionFinder {\n  private val guests = Map(101 -> \"Elena\", 102 -> \"David\")\n  def findGuestByRoom(room: Int): Option[String] = guests.get(room)\n}\nval found = GuestOptionFinder.findGuestByRoom(203).getOrElse(\"Empty Room\")"}
{"id":"d369efa8-4c75-4e63-8da0-5f3b9b13a8c3","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\nobject TryInvoiceCalculator {\n  def calc(nights: Int, rate: Double): Try[Double] = Try(nights * rate)\n}\nval inv = TryInvoiceCalculator.calc(2, 200.0).fold(_ => 0.0, x => x)"}
{"id":"388043e4-28b0-489f-a282-4febd5c62bef","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait LoyaltyError\ncase object NegativePoints extends LoyaltyError\nobject SafeLoyaltyPointsManager {\n  def add(points: Int): Either[LoyaltyError, Int] =\n    if (points < 0) Left(NegativePoints)\n    else Right(points + 100)\n}\nval result = SafeLoyaltyPointsManager.add(-20).fold(_ => \"Error\", pts => pts.toString)"}
{"id":"747c191c-5aa2-4261-a7e8-e1699aa1a521","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"object PolicySafeCalculator {\n  def cancellationFee(days: Int): Option[Double] =\n    if (days < 0) None\n    else if (days < 1) Some(250.0)\n    else Some(50.0)\n}\nval fee = PolicySafeCalculator.cancellationFee(0).getOrElse(999.0)"}
{"id":"25483fba-2b39-408e-98f9-f996d9e974e6","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait AllocationError\ncase object NoCategoryProvided extends AllocationError\nobject SafeRoomAllocator {\n  def allocateRoom(category: String): Either[AllocationError, Int] =\n    if (category.nonEmpty) Right(101)\n    else Left(NoCategoryProvided)\n}\nval allocation = SafeRoomAllocator.allocateRoom(\"\")"}
{"id":"7459416e-f4e5-42e1-9f76-225068d779c6","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class BookingRequest(guestId: String, roomType: String, date: String)\ncase class BookingConfirmation(confirmationNumber: String)\n\nsealed trait BookingError\ncase object RoomUnavailable extends BookingError\ncase object InvalidGuestInfo extends BookingError\n\ndef processBooking(request: BookingRequest): Either[BookingError, BookingConfirmation] = {\n  if(request.guestId.isEmpty) Left(InvalidGuestInfo)\n  else if(request.roomType == \"Suite\" && request.date == \"2023-12-31\") Left(RoomUnavailable)\n  else Right(BookingConfirmation(\"CONF12345\"))\n}"}
{"id":"c54b6d8c-110c-453c-b3d9-901e42cfbe39","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class RoomNotFoundException(roomNumber: Int) extends Exception(s\"Room $roomNumber not found.\")\n\nobject RoomService {\n  private val availableRooms = Set(101, 102, 103)\n  def fetchRoom(roomNumber: Int): String = {\n    if (!availableRooms.contains(roomNumber)) {\n      throw new RoomNotFoundException(roomNumber)\n    } else {\n      s\"Room $roomNumber details\"\n    }\n  }\n}"}
{"id":"b221adfd-74ea-48db-99e6-1c61bdd9a859","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef parseReservationId(reservationId: String): Try[Int] = Try {\n  reservationId.toInt\n}"}
{"id":"499d54f9-735b-4ba3-9b91-8e1f1eec5b6e","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object ReservationManager {\n  def cancelReservation(reservationId: String): Unit = {\n    if (reservationId.isEmpty) throw new IllegalArgumentException(\"Missing reservation id\")\n    // Pretend to cancel\n    println(s\"Reservation $reservationId cancelled.\")\n  }\n}"}
{"id":"e6c85bc6-9b97-417f-9969-a9d723a3d364","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InvalidCard extends PaymentError\ncase object PaymentDeclined extends PaymentError\n\ncase class Invoice(amount: Double)\n\ndef chargeCard(cardNumber: String, amount: Double): Either[PaymentError, Invoice] =\n  if (!cardNumber.matches(\"\\\\d{16}\")) Left(InvalidCard)\n  else if (amount > 1000) Left(PaymentDeclined)\n  else Right(Invoice(amount))"}
{"id":"ea334ff5-c5be-4eeb-bd2e-8c421086004f","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object GuestRegistrar {\n  def registerGuest(guestName: String, age: Int): Boolean = {\n    try {\n      if (guestName.isEmpty) throw new NoSuchElementException(\"Guest name required\")\n      if (age < 18) throw new IllegalArgumentException(\"Too young to register\")\n      true\n    } catch {\n      case _: Exception => false\n    }\n  }\n}"}
{"id":"431b0ab4-19bd-4358-916b-5b341a1a8f9b","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeCheckOut(roomNumber: Int): Try[String] = Try {\n  require(roomNumber > 100, \"Invalid room number\")\n  s\"Checkout for room $roomNumber successful.\"\n}"}
{"id":"64a02ff5-b8e9-43ca-a630-bb2e94784f61","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class InvalidBookingException(msg: String) extends Exception(msg)\n\ndef reserveRoom(roomId: Int): String = {\n  if (roomId <= 0) throw new InvalidBookingException(\"Invalid room id\")\n  s\"Room $roomId reserved!\"\n}"}
{"id":"e1ed2761-925b-474a-896a-e69ac5886945","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait AvailabilityError\ncase object NoVacancy extends AvailabilityError\n\ndef isRoomAvailable(date: String, roomType: String): Either[AvailabilityError, Boolean] =\n  if (date == \"2023-12-31\" && roomType == \"Deluxe\") Left(NoVacancy)\n  else Right(true)"}
{"id":"7f3d6290-c3c3-47c8-9a7a-f4e074ce1a99","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def fetchCustomerProfile(customerId: String): String = {\n  try {\n    if(customerId.length < 4) throw new Exception(\"Invalid customer ID\")\n    s\"Profile: $customerId\"\n  } catch {\n    case e: Exception => s\"Error: ${e.getMessage}\"\n  }\n}"}
{"id":"c702026b-a85a-4410-b7ea-ffe512ba3c94","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def lookupReservation(code: String): Option[String] =\n  if(code == \"R123\") Some(\"Reservation details for R123\")\n  else None"}
{"id":"22e65abe-8c6e-43e8-ae03-fc6c45b24b24","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object MaintenanceChecker {\n  def ensureRoomCleaned(roomNum: Int): Unit = {\n    if (roomNum == 404) throw new RuntimeException(\"Room under maintenance\")\n  }\n}"}
{"id":"0d469428-f2dd-4b6d-a612-906dd35b830c","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait CancellationError\ncase object AlreadyCheckedOut extends CancellationError\ncase object ReservationNotFound extends CancellationError\n\ndef attemptCancellation(reservationCode: String): Either[CancellationError, String] =\n  reservationCode match {\n    case \"CXL001\" => Left(AlreadyCheckedOut)\n    case \"\" => Left(ReservationNotFound)\n    case code => Right(s\"Reservation $code cancelled.\")\n  }"}
{"id":"4a32a7ab-b1be-414a-ac34-95ad99802ba0","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def removeGuest(guestList: List[String], guest: String): List[String] = {\n  try {\n    if (!guestList.contains(guest)) throw new IllegalArgumentException(\"Nonexistent guest\")\n    guestList.filterNot(_ == guest)\n  } catch {\n    case _: Exception => guestList\n  }\n}"}
{"id":"bb77951e-5321-4d6f-9418-7d539294887c","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseRoomRate(rateText: String): Try[Double] = Try {\n  rateText.toDouble\n}"}
{"id":"1947d4a2-884c-49e4-83f4-4aa1510583dd","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def setRoomStatus(roomId: Int, status: String): String = {\n  try {\n    if (status != \"Clean\" && status != \"Dirty\")\n      throw new Exception(\"Invalid status value\")\n    s\"Room $roomId marked as $status.\"\n  } catch {\n    case e: Exception => \"Failed: \" + e.getMessage\n  }\n}"}
{"id":"460673ab-848e-4ea7-9993-d13db51e8496","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait EmailError\ncase object InvalidEmailAddress extends EmailError\n\ndef sendConfirmationEmail(email: String): Either[EmailError, String] =\n  if (email.contains(\"@\")) Right(s\"Confirmation sent to $email\")\n  else Left(InvalidEmailAddress)"}
{"id":"b12004fc-66d3-4771-8a78-978eca57e87a","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def getArrivalDate(arrivalString: String): String = {\n  if (arrivalString.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {\n    arrivalString\n  } else {\n    throw new IllegalArgumentException(\"Invalid arrival date format\")\n  }\n}"}
{"id":"5fd760d0-071c-4c50-bfa2-a52bb7cfd7d3","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef safeAllocateRoom(roomNumber: String): Try[Int] = Try {\n  roomNumber.toInt\n}"}
{"id":"fc2c33e5-6836-4bd2-b796-19db6782c60d","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class PaymentException(msg: String) extends Exception(msg)\n\ndef processRefund(amount: Double): Double = {\n  if (amount < 0) throw new PaymentException(\"Negative refund not allowed\")\n  amount * 0.95\n}"}
{"id":"321b27de-5fda-47b5-9724-abefd364ec7e","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"object DriverLocationService:\n  def getDriverLocation(driverId: String): Option[(Double, Double)] =\n    if driverId == \"driver123\" then Some((40.7128, -74.0060))\n    else None\n\nsealed trait LocationError\ncase object DriverNotFound extends LocationError\n\ndef fetchDriverCoordinates(driverId: String): Either[LocationError, (Double, Double)] =\n  DriverLocationService.getDriverLocation(driverId) match\n    case Some(coords) => Right(coords)\n    case None => Left(DriverNotFound)\n"}
{"id":"d4a87d0b-76e9-43ca-8895-c885585c4ca5","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class PaymentException(msg: String) extends Exception(msg)\n\ndef processRiderPayment(riderId: String, total: Double): Boolean =\n  if total <= 0 then throw new PaymentException(\"Invalid payment amount\")\n  if riderId.isEmpty then throw new PaymentException(\"Missing rider ID\")\n  true\n\ntry\n  processRiderPayment(\"\", 25.50)\ncatch\n  case e: PaymentException => println(\"Payment failed: \" + e.getMessage)\n"}
{"id":"494c1b94-bb0a-435b-bfd6-b369933df2b6","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait OrderError\ncase object OrderAlreadyAssigned extends OrderError\ncase object RiderUnavailable extends OrderError\n\ncase class Order(id: String, assigned: Boolean)\n\ndef assignOrderToRider(order: Order, riderAvailable: Boolean): Either[OrderError, Order] =\n  if !riderAvailable then Left(RiderUnavailable)\n  else if order.assigned then Left(OrderAlreadyAssigned)\n  else Right(order.copy(assigned = true))\n"}
{"id":"07195d9f-ac6f-43af-bcbf-173d87f4bd8d","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"object RestaurantMenuService:\n  def findMenuItem(itemId: String): String =\n    if itemId == \"pasta\" then \"Spaghetti Carbonara\"\n    else throw new NoSuchElementException(\"Menu item not found\")\n\ntry\n  val menuItem = RestaurantMenuService.findMenuItem(\"burger\")\n  println(menuItem)\ncatch\n  case _: NoSuchElementException => println(\"The item is not available\")\n"}
{"id":"1d1a0832-9cb9-4ba5-b052-9a2230358d06","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait DeliveryError\ncase object AddressInvalid extends DeliveryError\ncase object DriverBusy extends DeliveryError\n\ndef scheduleDelivery(address: String, driverFree: Boolean): Either[DeliveryError, String] =\n  if address.trim.isEmpty then Left(AddressInvalid)\n  else if !driverFree then Left(DriverBusy)\n  else Right(\"Delivery scheduled successfully\")\n"}
{"id":"38f68a2f-4754-4c0c-8e00-220e93f9f62b","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class InventoryException(message: String) extends Exception(message)\n\ncase class Restaurant(id: String, hasInventory: Boolean)\n\ndef reserveInventory(restaurant: Restaurant): Boolean =\n  if !restaurant.hasInventory then throw new InventoryException(\"Insufficient inventory\")\n  true\n\ntry\n  reserveInventory(Restaurant(\"r-101\", false))\ncatch\n  case e: InventoryException => println(\"Reservation failed: \" + e.getMessage)\n"}
{"id":"0198b477-6239-4063-bf64-d4bc8cf3cbcd","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseOrderTotal(total: String): Try[Double] =\n  Try(total.toDouble)\n\nval amount = parseOrderTotal(\"12.75\").getOrElse(0.0)"}
{"id":"cc3cae01-2208-49e2-9909-57cd0b9ec9c9","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getRiderByName(name: String): String =\n  if name == \"John\" then \"active\"\n  else throw new Exception(\"Rider not found\")\n\ntry\n  getRiderByName(\"Tom\")\ncatch\n  case e: Exception => println(e.getMessage)\n"}
{"id":"f900ab8e-1880-441a-95bf-f9809369191d","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait SchedulingError\ncase object TimeSlotUnavailable extends SchedulingError\ncase object DeliveryWindowTooShort extends SchedulingError\n\ndef bookDeliverySlot(slot: String, minutesAvailable: Int): Either[SchedulingError, String] =\n  if minutesAvailable < 15 then Left(DeliveryWindowTooShort)\n  else if slot == \"\" then Left(TimeSlotUnavailable)\n  else Right(\"Slot booked: \" + slot)\n"}
{"id":"2e3ea5a0-47fe-46b0-bf94-34d9067e0242","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class TrackingException(msg: String) extends Exception(msg)\n\ncase class Package(id: String, delivered: Boolean)\n\ndef confirmPackageDelivery(pkg: Package): Unit =\n  if !pkg.delivered then throw new TrackingException(\"Package has not arrived yet\")\n\ntry\n  confirmPackageDelivery(Package(\"PK-15\", false))\ncatch\n  case e: TrackingException => println(e.getMessage)\n"}
{"id":"01a80913-b986-46a4-abaa-e7321b62a29c","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def findAvailableDeliveryZone(address: String): Option[String] =\n  if address.contains(\"New York\") then Some(\"ZoneA\")\n  else None\n\nval result = findAvailableDeliveryZone(\"123 Main St, New York\") match\n  case Some(zone) => s\"Delivery to $zone\"\n  case None => \"No delivery zone found\"\n"}
{"id":"7e2fc23e-e603-4888-89ca-b251d7d34288","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def checkOrderStatus(orderId: String): String =\n  if orderId != \"order999\" then throw new RuntimeException(\"Unknown order ID\")\n  else \"dispatched\"\n\ntry\n  val status = checkOrderStatus(\"order123\")\ncatch\n  case e: RuntimeException => println(\"Order status error: \" + e.getMessage)\n"}
{"id":"76c6ec18-b717-475c-b04c-15fb7aca61ea","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object CardDeclined extends PaymentError\ncase object PaymentGatewayError extends PaymentError\n\ndef chargeCustomer(cardValid: Boolean): Either[PaymentError, String] =\n  if !cardValid then Left(CardDeclined)\n  else Right(\"Charged successfully\")\n"}
{"id":"57984e08-bc8a-4295-88f3-df4f72747725","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getDriverRating(driverId: String): Int =\n  if driverId == \"abc\" then 5\n  else throw new IllegalArgumentException(\"Driver rating unavailable\")\n\ntry\n  val rating = getDriverRating(\"xyz\")\ncatch\n  case e: IllegalArgumentException => println(\"Could not get rating: \" + e.getMessage)\n"}
{"id":"d55ae90f-e344-41cf-b34d-4f88b48b5c1b","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def findOrder(orderId: String): Option[String] =\n  if orderId == \"ORD1001\" then Some(\"Ready for delivery\")\n  else None\n\nval orderStatus = findOrder(\"ORD1001\").getOrElse(\"Order not found\")\n"}
{"id":"3b776ac4-c034-485e-b7d5-f82e61fa2848","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class RiderBlockedException extends Exception(\"Rider is blocked from accepting orders\")\n\ndef acceptOrder(riderStatus: String): Boolean =\n  if riderStatus == \"blocked\" then throw new RiderBlockedException\n  true\n\ntry\n  acceptOrder(\"blocked\")\ncatch\n  case e: RiderBlockedException => println(e.getMessage)\n"}
{"id":"f20ba5f0-5980-46b1-a1eb-fe14e500fd5a","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait CancellationError\ncase object TooLateToCancel extends CancellationError\ncase object OrderAlreadyOutForDelivery extends CancellationError\n\ndef cancelOrder(status: String, minutesElapsed: Int): Either[CancellationError, String] =\n  if minutesElapsed > 30 then Left(TooLateToCancel)\n  else if status == \"dispatched\" then Left(OrderAlreadyOutForDelivery)\n  else Right(\"Order cancelled successfully\")\n"}
{"id":"dd0dd70c-f893-4af5-a525-6f8d3aa3f69f","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def restaurantStatus(name: String): String =\n  if name == \"PastaHouse\" then \"open\"\n  else throw new Exception(\"Restaurant not found\")\n\ntry\n  restaurantStatus(\"BurgerBarn\")\ncatch\n  case e: Exception => println(\"Error: \" + e.getMessage)\n"}
{"id":"ccbc61ed-4b80-40ee-8d37-e8bb30796e4e","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef updateOrderETA(orderId: String, newEta: Int): Try[Int] =\n  Try {\n    if newEta < 0 then throw new IllegalStateException(\"Negative ETA not allowed\")\n    newEta\n  }\n\nupdateOrderETA(\"order321\", -5).recover { case _ => 0 }.get\n"}
{"id":"ddc2db92-912f-4592-b896-b4c4d3724461","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliverySlotException(msg: String) extends Exception(msg)\n\nval availableSlots = Set(\"9am-10am\", \"10am-11am\")\n\ndef reserveSlot(slot: String): Boolean =\n  if !availableSlots.contains(slot) then throw new DeliverySlotException(\"Slot unavailable\")\n  true\n\ntry\n  reserveSlot(\"8am-9am\")\ncatch\n  case e: DeliverySlotException => println(\"Failed: \" + e.getMessage)\n"}
{"id":"a50b6121-329e-4d2b-816f-9c3e3a5b23ef","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class Order(id: Int, address: String)\nsealed trait DeliveryError\ncase object InvalidAddress extends DeliveryError\ncase object OrderNotFound extends DeliveryError\ndef validateOrder(order: Order): Either[DeliveryError, Order] =\n  if (order.address.isEmpty) Left(InvalidAddress)\n  else Right(order)"}
{"id":"28c5a870-2cf9-4da1-9858-05d61667fb6d","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Dispatcher\nobject CourierFinder {\n  def findCourier(area: String): String = {\n    if (area == \"\")\n      throw new IllegalArgumentException(\"Area cannot be empty\")\n    else\n      \"Courier123\"\n  }\n}\nval courier =\n  try {\n    CourierFinder.findCourier(\"\")\n  } catch {\n    case e: IllegalArgumentException => \"NoCourier\"\n  }"}
{"id":"c7c4d078-4c9d-4653-84de-aa006b48bac1","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\ncase object CardDeclined extends PaymentError\ndef validatePayment(cardNumber: String, amount: Double): Either[PaymentError, String] =\n  if (amount > 100) Left(InsufficientFunds)\n  else Right(\"PaymentApproved\")"}
{"id":"11cd44b1-082c-421a-b4ae-8120bc9e3e6d","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def allocateDriver(orderId: Int): String =\n  if (orderId < 0) throw new RuntimeException(\"Invalid Order\")\n  else s\"DriverFor$orderId\"\nval driverName = try {\n  allocateDriver(-1)\n} catch {\n  case ex: RuntimeException => \"NoDriverAvailable\"\n}"}
{"id":"55672b43-41e6-4aa3-9524-8c826d11062e","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class FoodItem(name: String, quantity: Int)\ndef findFoodItem(menu: List[FoodItem], name: String): Option[FoodItem] =\n  menu.find(_.name == name)"}
{"id":"d3dcac95-c8fc-4950-bde7-58e29c6e7ce9","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getRouteDistance(start: String, end: String): Double =\n  if (start == end) throw new IllegalStateException(\"Pickup and delivery points are the same\")\n  else 5.4"}
{"id":"5c894927-9761-4cbc-9211-52c7bca3ad00","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"import scala.util.Try\ndef parseDeliveryTime(timeString: String): Try[Int] =\n  Try(timeString.toInt)"}
{"id":"6e0ef695-35bf-4cdf-91c6-a36a8a675721","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"object PriceCalculator {\n  def calculateTotalPrice(items: List[(String, Double)]): Double = {\n    if (items.isEmpty) throw new NoSuchElementException(\"No items to price\")\n    items.map(_._2).sum\n  }\n}\ntry {\n  PriceCalculator.calculateTotalPrice(List())\n} catch {\n  case _: NoSuchElementException => 0.0\n}"}
{"id":"76632668-21c3-4d4d-9c1d-6d93e2775202","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait DeliverySlotError\ncase object SlotUnavailable extends DeliverySlotError\ndef reserveDeliverySlot(availableSlots: List[String], desired: String): Either[DeliverySlotError, String] =\n  if (availableSlots.contains(desired)) Right(desired)\n  else Left(SlotUnavailable)"}
{"id":"33ba2f37-1dda-4799-9059-655a492980f3","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def lookupCustomer(email: String): Int =\n  if (!email.contains(\"@\")) throw new IllegalArgumentException(\"Invalid email\")\n  else 12345\nval customerId = try {\n  lookupCustomer(\"bademail\")\n} catch {\n  case _: IllegalArgumentException => 0\n}"}
{"id":"164e9003-b25a-4d78-81f0-9fbb80ceac99","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"import scala.util.Try\ndef safeDivideDeliveryFee(totalFee: Double, numPackages: Int): Try[Double] =\n  Try(totalFee / numPackages)"}
{"id":"6ae17cd9-ed31-45f6-a9d2-f43d034537a9","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"case class Vehicle(id: String)\ndef findVehicle(vehicles: List[Vehicle], id: String): Vehicle =\n  vehicles.find(_.id == id).getOrElse(throw new NoSuchElementException(\"Vehicle not found\"))\nval res = try { findVehicle(List(), \"V3\") } catch { case _: Throwable => Vehicle(\"default\") }"}
{"id":"5d5fa4fd-ba48-4462-b47e-bead7b50882a","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class Courier(id: Int, area: String)\ndef assignCourierToOrder(couriers: List[Courier], orderArea: String): Option[Courier] =\n  couriers.find(_.area == orderArea)"}
{"id":"566dd2e8-e4a4-4885-812b-837cdd9fe760","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class RestaurantOperationalException(msg: String) extends Exception(msg)\ndef checkRestaurantStatus(isOpen: Boolean): Unit =\n  if (!isOpen) throw new RestaurantOperationalException(\"Restaurant closed\")\nval status = try {\n  checkRestaurantStatus(false)\n  \"Open\"\n} catch {\n  case _: RestaurantOperationalException => \"Closed\"\n}"}
{"id":"8c2c34da-77f8-4b7a-9c8f-583de56e90c4","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait InventoryError\ncase object InventoryShortage extends InventoryError\ndef reserveInventory(requested: Int, available: Int): Either[InventoryError, Int] =\n  if (requested > available) Left(InventoryShortage)\n  else Right(available - requested)"}
{"id":"1e1c10fa-bea7-46d8-9a31-13b08b0e5cab","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def fetchDeliveryZone(zipCode: String): String =\n  if (zipCode.length != 5) throw new Exception(\"Invalid zip code\")\n  else \"ZoneA\"\nval zone = try { fetchDeliveryZone(\"123\") } catch { case _: Throwable => \"UnknownZone\" }"}
{"id":"aea07c0a-817e-459c-8867-ccbf7575abdc","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"import scala.util.Try\ndef safeTrackOrderStatus(statusCode: String): Try[String] =\n  Try {\n    statusCode match {\n      case \"SUCCESS\" => \"Delivered\"\n      case \"FAIL\"    => throw new IllegalStateException(\"Delivery failed\")\n      case _         => throw new Exception(\"Unknown status\")\n    }\n  }"}
{"id":"d82d50c1-f64b-4d52-81dd-17447e451671","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def cancelOrder(orderId: Int): String =\n  if (orderId < 0) throw new IllegalArgumentException(\"Negative orderId\")\n  else \"Order cancelled\"\nval cancelResult = try {\n  cancelOrder(-42)\n} catch {\n  case _: IllegalArgumentException => \"Failed to cancel\"\n}"}
{"id":"675f894c-76a6-442c-a441-a4c60a9a7344","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait AddressValidationError\ncase object EmptyAddressField extends AddressValidationError\ndef validateAddress(street: String): Either[AddressValidationError, String] =\n  if (street.trim == \"\") Left(EmptyAddressField)\n  else Right(street)"}
{"id":"802f1132-13fa-43bd-9e28-231e5d10d6f5","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def splitOrder(order: String): List[String] =\n  if (order.isEmpty) throw new IllegalArgumentException(\"Order data missing\")\n  else order.grouped(2).toList\nval spl = try { splitOrder(\"\") } catch { case _: Throwable => List(\"Empty\") }"}
{"id":"b0b3f266-d0e3-459a-b182-5012a7a3e0c2","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Track(id: String, title: String, duration: Int)\n\ndef findTrackById(tracks: List[Track], tid: String): Option[Track] =\n  tracks.find(_.id == tid)"}
{"id":"a26178e0-20ac-4a82-8cd2-988b1d6b1673","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Playlist(id: String, name: String, tracks: List[Track])\ndef addTrackToPlaylist(playlist: Playlist, track: Track): Option[Playlist] =\n  if playlist.tracks.contains(track) then None\n  else Some(playlist.copy(tracks = playlist.tracks :+ track))"}
{"id":"b06abfef-7a49-4285-9301-9e0d3dbc0c40","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait StreamingError\ncase object TrackUnavailable extends StreamingError\ncase object InvalidSubscription extends StreamingError\n\ndef streamTrack(isPremium: Boolean, available: Boolean): Either[StreamingError, String] =\n  if !isPremium then Left(InvalidSubscription)\n  else if !available then Left(TrackUnavailable)\n  else Right(\"Streaming started\")"}
{"id":"c062ccb0-d653-4eeb-beba-0b2084e92b24","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePlaybackPosition(position: String): Try[Int] =\n  Try(position.toInt)"}
{"id":"d476c1b3-c617-42e2-b48d-6635f0342fcc","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait SubscriptionError\ncase object NoPlanSelected extends SubscriptionError\ncase object PaymentDeclined extends SubscriptionError\n\ndef subscribeUser(hasPlan: Boolean, paymentValid: Boolean): Either[SubscriptionError, String] =\n  if !hasPlan then Left(NoPlanSelected)\n  else if !paymentValid then Left(PaymentDeclined)\n  else Right(\"Subscription successful\")"}
{"id":"42e75244-1c4b-4e1d-89ec-d0e3e171420e","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class User(id: String, name: String)\ndef findUserById(users: List[User], userId: String): Either[String, User] =\n  users.find(_.id == userId).toRight(s\"User $userId not found\")"}
{"id":"98719a0e-6bea-41a5-9f0c-73ee69cae3a5","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait PlaybackError\ncase object TrackNotInPlaylist extends PlaybackError\n\ndef playTrackFromPlaylist(playlist: Playlist, trackId: String): Either[PlaybackError, Track] =\n  playlist.tracks.find(_.id == trackId)\n    .toRight(TrackNotInPlaylist)"}
{"id":"48baadab-0015-4a38-a89c-f22aa28d1be1","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait RecommendationError\ncase object NotEnoughListeningHistory extends RecommendationError\n\ndef getRecommendations(historyCount: Int): Either[RecommendationError, List[Track]] =\n  if historyCount < 3 then Left(NotEnoughListeningHistory)\n  else Right(List(Track(\"t1\", \"Recommended\", 240)))"}
{"id":"8c748206-ca84-4c31-a62a-aba091337bc1","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"import scala.util.Try\n\ndef savePlaylist(name: String): Try[String] =\n  Try {\n    if name.isBlank then throw new IllegalArgumentException(\"Playlist name cannot be empty\")\n    else s\"Playlist '$name' saved\"\n  }"}
{"id":"4255b4b7-cb22-4bbf-a59e-1fa26cc56c5f","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class SongRequest(trackId: String)\nsealed trait SongRequestError\ncase object TrackIdMissing extends SongRequestError\n\ndef validateSongRequest(request: SongRequest): Either[SongRequestError, String] =\n  if request.trackId.isEmpty then Left(TrackIdMissing)\n  else Right(\"Valid request\")"}
{"id":"f1525056-da04-487d-b056-456a25ba7851","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class SongNotAvailableException(msg: String) extends Exception(msg)\n\ndef fetchSong(songId: String): String =\n  if songId == \"\" then throw new SongNotAvailableException(\"Song ID required\")\n  // mock return value\n  \"songData\""}
{"id":"64a77bda-5023-4457-b343-05e1f4939f07","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def likeAlbum(albumId: String, albums: Map[String, Int]): Int = {\n  if (!albums.contains(albumId)) throw new Exception(\"Album not found\")\n  albums(albumId) + 1\n}"}
{"id":"8c903c19-86eb-44bd-b55a-6b2d9c63a5fd","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def getAlbumCover(albumId: String): String = {\n  try {\n    if (albumId.isEmpty) throw new IllegalArgumentException(\"Album ID is empty\")\n    \"coverImageContent\"\n  } catch {\n    case _: IllegalArgumentException => \"defaultCover\"\n  }\n}"}
{"id":"70a78468-6ca1-42f0-b22f-584dab295b5b","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class InvalidPlaybackState(msg: String) extends Exception(msg)\ndef resumePlayback(state: String): Boolean =\n  if state != \"paused\" then throw new InvalidPlaybackState(\"Playback not paused\")\n  true"}
{"id":"dbfa2e0b-fbd0-48e7-85fc-c88512109280","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def removeTrack(tracks: List[Track], tid: String): List[Track] = {\n  if (!tracks.exists(_.id == tid)) throw new IllegalStateException(\"Track not found in list\")\n  tracks.filterNot(_.id == tid)\n}"}
{"id":"c92a0737-8fea-4ae6-964a-80b561609b69","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def fetchRecommendedTrack(userAge: Int): String = {\n  try {\n    if (userAge < 13) throw new Exception(\"Parental controls enabled\")\n    \"RecommendedTrackInfo\"\n  } catch {\n    case _: Exception => \"NoRecommendation\"\n  }\n}"}
{"id":"45f36a34-6b85-42f7-9bd6-872bc8172565","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def seekToPosition(current: Int, desired: Int): Int =\n  if (desired < 0 || desired > 3600) throw new Exception(\"Seek position out of bounds\")\n  desired"}
{"id":"d0d14e25-2dcc-406d-a227-4235121a9767","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class PlaylistLocked extends Exception\n\ndef addToLockedPlaylist(locked: Boolean): String = {\n  if (locked) throw new PlaylistLocked\n  \"Added to playlist\"\n}"}
{"id":"40e19af1-6852-414e-874b-1cc3c7b93b0f","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def verifyUserToken(token: String): Boolean =\n  try {\n    if (token != \"valid-token\") throw new Exception(\"Invalid token\")\n    true\n  } catch {\n    case _: Exception => false\n  }"}
{"id":"fd4b2626-4cdb-4238-9608-80ec985e7881","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def addDeviceToProfile(devices: Set[String], deviceId: String): Set[String] = {\n  if (devices.size >= 3) throw new Exception(\"Device limit exceeded\")\n  devices + deviceId\n}"}
{"id":"103ce6c0-8c60-4672-b76d-a0c710ba0da4","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class PlaybackError(message: String)\ncase class PlaybackInstance(songId: String)\n\ndef startPlayback(songId: String): Either[PlaybackError, PlaybackInstance] =\n  if songId.nonEmpty then Right(PlaybackInstance(songId))\n  else Left(PlaybackError(\"Song ID is empty, cannot start playback\"))"}
{"id":"0edb5da6-2bfe-4de2-9b3e-90ca8d0878ab","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"case class UserNotFound(userName: String) extends Exception\n\ndef findUserPlaylists(userName: String): List[String] =\n  if userName == \"admin\" then List(\"Favorites\", \"Chill Beats\")\n  else throw new UserNotFound(userName)"}
{"id":"d61a188c-d510-48f8-bb0b-69d3253a320c","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait StreamingError\ncase class NetworkUnavailable(details: String) extends StreamingError\ncase class TrackNotAvailable(trackName: String) extends StreamingError\n\ncase class Track(id: String, name: String)\n\ndef fetchTrack(trackId: String): Either[StreamingError, Track] =\n  if trackId == \"offline\" then Left(NetworkUnavailable(\"No internet connection\"))\n  else if trackId == \"missing\" then Left(TrackNotAvailable(\"Unknown song\"))\n  else Right(Track(trackId, \"Imagine\"))"}
{"id":"357c2b60-fa0a-42c9-9cfa-d7c922e18af0","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def skipToNextTrack(playlist: List[String]): String =\n  if playlist.nonEmpty then playlist.head\n  else throw new NoSuchElementException(\"Playlist is empty, can't skip to next track\")"}
{"id":"32d2bbf9-343c-4b74-a85f-e2f7206b953c","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def getBitrateFormat(streamBitrate: Int): Option[String] =\n  streamBitrate match\n    case 320 => Some(\"High Quality\")\n    case 128 => Some(\"Standard Quality\")\n    case _   => None"}
{"id":"4084b788-9f26-4b99-b750-fc56967aaea5","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def authenticateUser(token: String): String =\n  if token == \"valid-token\" then \"UserId1234\"\n  else throw new SecurityException(\"Invalid authentication token\")"}
{"id":"2dda7fe2-36e7-497e-9e5c-25ab334fb6f2","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseDuration(durationStr: String): Try[Int] =\n  Try(durationStr.toInt)"}
{"id":"bb81a288-fc02-45f8-a25b-50d97b75daf3","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def deletePlaylist(playlistId: String): Unit =\n  if playlistId == \"protected\" then\n    throw new UnsupportedOperationException(\"Cannot delete default playlists\")\n  else\n    ()"}
{"id":"1deedc6f-70c0-45cc-91ee-e421274fa5d5","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait LibraryError\ncase object PlaylistNotFound extends LibraryError\ncase object TrackNotInPlaylist extends LibraryError\n\ndef removeTrackFromPlaylist(trackId: String, playlist: Map[String, List[String]]): Either[LibraryError, Map[String, List[String]]] =\n  playlist.get(\"Favorites\") match\n    case Some(songs) if songs.contains(trackId) =>\n      Right(playlist.updated(\"Favorites\", songs.filterNot(_ == trackId)))\n    case Some(_) =>\n      Left(TrackNotInPlaylist)\n    case None =>\n      Left(PlaylistNotFound)"}
{"id":"6f59f76a-986f-4630-b994-4d114aa70d00","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def processSubscriptionPayment(userId: String, amount: Double): String =\n  if amount < 0 then throw new IllegalArgumentException(\"Negative payment amount\")\n  else s\"Processed $$amount for $$userId\""}
{"id":"0a30a1e9-aaf9-412b-b10d-bd4d6bbbde27","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait UploadError\ncase class FileTooLarge(size: Int) extends UploadError\ncase object UnsupportedFormat extends UploadError\n\ncase class UploadedTrack(id: String)\n\ndef uploadAudioFile(size: Int, format: String): Either[UploadError, UploadedTrack] =\n  if size > 10_000 then Left(FileTooLarge(size))\n  else if format != \"mp3\" then Left(UnsupportedFormat)\n  else Right(UploadedTrack(\"track-xyz\"))"}
{"id":"64e1876a-3b0b-4a67-abe8-d87fb32119e4","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def addTrackToQueue(queue: List[String], trackId: String): List[String] =\n  if queue.contains(trackId) then throw new RuntimeException(\"Track already in queue\")\n  else queue :+ trackId"}
{"id":"e8d83b13-4623-4da1-ba4d-8b9c5cf58a43","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Artist(name: String)\ndef findArtist(name: String): Option[Artist] =\n  if name.toLowerCase == \"the beatles\" then Some(Artist(\"The Beatles\"))\n  else None"}
{"id":"9c7c4169-fa45-40c7-a30c-eb66d303081e","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def fetchUserProfile(userId: String): Map[String, String] =\n  if userId == \"unknown\" then throw new Exception(\"User profile not found\")\n  else Map(\"id\" -> userId, \"premium\" -> \"true\")"}
{"id":"105971e0-2a4e-40bc-9cfb-b2864d28e834","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"import scala.util.Try\n\ndef formatSongUrl(songId: String): Try[String] =\n  Try(\n    require(songId.startsWith(\"track-\"), \"Invalid track ID format\")\n    s\"https://streaming.com/song/$$songId\"\n  )"}
{"id":"80efd453-75bf-474b-8617-771160153ea7","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def removeUserAccount(userId: String): Unit =\n  try\n    if userId == \"owner\" then throw new IllegalStateException(\"Cannot remove account owner\")\n    else ()\n  catch\n    case e: Exception => println(\"Removal error: \" + e.getMessage)"}
{"id":"944ea956-e4fb-4b6f-8c42-99882c0648e9","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def searchSongByTitle(library: List[String], keyword: String): Option[String] =\n  library.find(_.toLowerCase.contains(keyword.toLowerCase))"}
{"id":"de41242a-85b0-4868-8ca0-0d2ad8f7f790","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def downloadAlbum(albumId: String): String =\n  try\n    if albumId.isEmpty then throw new Exception(\"Missing album ID\")\n    else s\"Downloading album $$albumId\"\n  catch\n    case e: Exception => \"Download failed: \" + e.getMessage"}
{"id":"df50ecc3-f999-471b-86d5-baafb1c6861d","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait PlaylistCreationError\ncase object PlaylistNameTaken extends PlaylistCreationError\ncase class InvalidPlaylistName(reason: String) extends PlaylistCreationError\n\ncase class Playlist(name: String)\ndef createPlaylist(existing: Set[String], newName: String): Either[PlaylistCreationError, Playlist] =\n  if existing.contains(newName) then Left(PlaylistNameTaken)\n  else if newName.length < 3 then Left(InvalidPlaylistName(\"Name too short\"))\n  else Right(Playlist(newName))"}
{"id":"afd2c79f-fb7f-4cbd-af8e-086ded754f38","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def shareTrackWithUser(trackId: String, recipientEmail: String): String =\n  if !recipientEmail.contains(\"@\") then throw new IllegalArgumentException(\"Email is invalid\")\n  else s\"Shared $$trackId with $$recipientEmail\""}
{"id":"e2a73473-a16d-4571-a9c9-3e8503ede66c","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"object ScheduleValidator:\n  def validateSessionDuration(durationMinutes: Int): Either[String, Int] =\n    if durationMinutes >= 15 && durationMinutes <= 180 then Right(durationMinutes)\n    else Left(\"Session duration must be between 15 and 180 minutes\")\n"}
{"id":"e56894cb-e75b-4926-9941-084172ba0cf8","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"case class Lesson(sessionId: String, topic: String, tutorId: Int)\nclass SessionNotFoundException(id: String) extends Exception(s\"Session $id not found\")\nobject LessonFetcher:\n  def fetchLessonById(id: String): Lesson =\n    if id == \"validSession\" then Lesson(id, \"Algebra\", 101)\n    else throw new SessionNotFoundException(id)\n"}
{"id":"a3a850de-bf18-4aca-b811-5371c3a7a55e","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\ncase object InvalidCardDetails extends PaymentError\nobject PaymentProcessor:\n  def processPayment(userId: Int, amount: Double): Either[PaymentError, String] =\n    if amount <= 0 then Left(InvalidCardDetails)\n    else if userId == 0 then Left(InsufficientFunds)\n    else Right(\"Payment processed successfully\")\n"}
{"id":"2335ad8f-d19f-40f8-8898-8ac23a1dec93","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"case class Student(id: Int, name: String)\nobject StudentRepository:\n  def getStudentById(id: Int): Student = {\n    if id == 100 then Student(100, \"John Doe\")\n    else throw new Exception(\"Student not found\")\n  }\n"}
{"id":"dff9041e-eae8-4f4c-8437-d29d8afd2f7f","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"object TutorCredentials:\n  def validateCredentials(email: String, password: String): Option[String] =\n    if email.endsWith(\"@tutors.com\") && password.nonEmpty then Some(\"Valid credentials\")\n    else None\n"}
{"id":"fe88c6cb-b72f-42ec-8988-3b3f95e10872","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object EnrollmentManager:\n  def enrollStudent(sessionId: String): String =\n    try {\n      if sessionId.nonEmpty then \"Student successfully enrolled\"\n      else throw new Exception(\"Invalid session ID\")\n    } catch {\n      case _: Exception => \"Enrollment failed due to invalid session\"\n    }\n"}
{"id":"5a1fe9bf-b73a-47ea-b8e7-029865638aa4","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Feedback(rating: Int, comment: String)\nobject FeedbackHandler:\n  def submitFeedback(feedback: Feedback): Either[String, Feedback] =\n    if feedback.rating < 1 || feedback.rating > 5 then Left(\"Rating must be from 1 to 5\")\n    else Right(feedback)\n"}
{"id":"2fd81265-cc7f-4059-b31d-aeae39b8a330","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object LessonMaterialDownloader:\n  def downloadMaterial(materialId: String): String = {\n    try {\n      if materialId == \"mat101\" then \"Material Content\"\n      else throw new Exception(\"Material not found\")\n    } catch {\n      case _: Exception => \"Download error: Material missing\"\n    }\n  }\n"}
{"id":"c2cd5e77-f238-4c13-b113-06a5a976cb2e","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"object BookingService:\n  def isTimeSlotAvailable(slot: Int): Option[Int] =\n    if slot >= 9 && slot <= 17 then Some(slot)\n    else None\n"}
{"id":"4b667462-69e5-434d-8cb5-bb08874176e3","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"case class Tutor(id: Int, subject: String)\nobject TutorService:\n  def findTutorOrFail(subject: String): Tutor =\n    if subject == \"Math\" then Tutor(5, \"Math\")\n    else throw new RuntimeException(\"Tutor for subject not found\")\n"}
{"id":"0927db38-4101-4162-879c-d93af2f133b5","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait LoginError\ncase object UserNotFound extends LoginError\ncase object IncorrectPassword extends LoginError\nobject Authentication:\n  def login(username: String, pwd: String): Either[LoginError, String] =\n    if username != \"student1\" then Left(UserNotFound)\n    else if pwd != \"pass123\" then Left(IncorrectPassword)\n    else Right(\"Login Successful\")\n"}
{"id":"0d65c78e-fc1e-455c-881d-ca96c491dcfa","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object TutorRegistration:\n  def registerTutor(name: String, email: String): String = {\n    try {\n      if email.nonEmpty && name.nonEmpty then \"Registration completed.\"\n      else throw new IllegalArgumentException(\"Missing registration info\")\n    } catch {\n      case e: Exception => s\"Registration error: ${e.getMessage}\"\n    }\n  }\n"}
{"id":"f5deaaa9-3ddf-4db5-b582-1d361287f078","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"import scala.util.Try\nobject ResourceManager:\n  def openResource(path: String): Try[String] =\n    Try {\n      if path.contains(\"courses\") then \"Resource opened\"\n      else throw new Exception(\"Unavailable resource\")\n    }\n"}
{"id":"c5ed7041-3b05-42e4-be34-4da939c6b870","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class SessionBookingException(msg: String) extends Exception(msg)\nobject SessionBooker:\n  def bookSession(studentId: Int, slot: Int): String = {\n    if studentId <= 0 then throw new SessionBookingException(\"Invalid student ID\")\n    if slot < 9 || slot > 17 then throw new SessionBookingException(\"Slot unavailable\")\n    \"Booking successful\"\n  }\n"}
{"id":"3eb53dc0-b727-4da9-8643-c5432da5ba67","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"object QuizSubmission:\n  def submitAnswer(answer: String): Option[String] =\n    if answer.nonEmpty then Some(\"Answer submitted successfully\")\n    else None\n"}
{"id":"ec0cd4da-a5be-4647-a494-d926eff926d0","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"case class Course(id: Int, title: String)\nobject CourseFinder:\n  def findCourseOrThrow(title: String): Course =\n    if title == \"Scala Programming\" then Course(101, title)\n    else throw new NoSuchElementException(\"Course not found\")\n"}
{"id":"a1005dab-d629-417b-a2a6-c287023e9514","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait SessionError\ncase object InvalidSessionTime extends SessionError\ncase object SessionClash extends SessionError\nobject SessionScheduler:\n  def scheduleSession(time: Int): Either[SessionError, Int] =\n    if time < 8 || time > 20 then Left(InvalidSessionTime)\n    else if time == 15 then Left(SessionClash)\n    else Right(time)\n"}
{"id":"c9e9ccbd-a045-4c0d-a8e7-4a372c3e6a6a","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object CalendarUpdater:\n  def updateCalendar(tutorId: Int, slot: Int): String = {\n    try {\n      if slot >= 9 && slot <= 17 then \"Calendar updated\"\n      else throw new Exception(\"Chosen slot unavailable\")\n    } catch {\n      case ex: Exception => ex.getMessage\n    }\n  }\n"}
{"id":"c71f8283-7fe0-4ccf-b00c-59576e1c65db","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"import scala.util.Try\nobject LessonReviewRetriever:\n  def getReviewSummary(sessionId: String): Try[String] =\n    Try {\n      if sessionId == \"S123\" then \"Excellent session reviews\"\n      else throw new Exception(\"No reviews found\")\n    }\n"}
{"id":"1699086b-a013-4607-adbf-8be6186ed17f","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object VideoCallLauncher:\n  def launchCall(roomId: String): String = {\n    try {\n      if roomId.startsWith(\"room\") then \"Call started\"\n      else throw new Exception(\"Invalid room ID\")\n    } catch {\n      case e: Exception => s\"Call failed: ${e.getMessage}\"\n    }\n  }\n"}
{"id":"1b1e5c13-4b88-45e0-9917-55030d75f83a","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class StudentProfile(id: Int, name: String)\ncase object ProfileNotFound\n\ndef getStudentProfile(profileId: Int): Option[StudentProfile] = \n  if profileId == 12 then Some(StudentProfile(12, \"Sara\"))\n  else None\n\nval profileOpt = getStudentProfile(99)\nprofileOpt match\n  case Some(p) => println(\"Profile loaded: \" + p.name)\n  case None => println(\"Student not found.\")"}
{"id":"591d4058-93d8-49c3-891b-879cce7ea26b","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class ScheduleConflictException(msg: String) extends Exception(msg)\n\ndef bookSession(teacherId: Int, start: Int, end: Int): Unit = {\n  if (start >= end) throw new ScheduleConflictException(\"Invalid session times\")\n  println(\"Session booked!\")\n}\n\ntry {\n  bookSession(4, 15, 10)\n} catch {\n  case e: ScheduleConflictException =>\n    println(\"Error: \" + e.getMessage)\n}"}
{"id":"17b83425-5e53-4bec-bf26-c12f66c0969e","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait SessionBookingError\ncase object NoTutorAvailable extends SessionBookingError\ncase object InvalidSessionDetails extends SessionBookingError\ncase class BookingSuccess(sessionId: Int)\n\ndef createSession(tutorId: Int, timeSlot: Int): Either[SessionBookingError, BookingSuccess] =\n  if tutorId <= 0 then Left(NoTutorAvailable)\n  else if timeSlot <= 0 then Left(InvalidSessionDetails)\n  else Right(BookingSuccess(sessionId = 321))\n\nval sessionResult = createSession(0, 11)\nsessionResult match\n  case Right(s) => println(\"Session confirmed: \" + s.sessionId)\n  case Left(e) => println(e)"}
{"id":"1e863509-3393-46ef-8d2b-8eb543461ba5","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class InvalidReviewException(msg: String) extends RuntimeException(msg)\n\ndef addTutorReview(tutorId: Int, rating: Int): Unit = {\n  if (rating < 1 || rating > 5) throw new InvalidReviewException(\"Rating should be 1 to 5.\")\n  println(\"Review submitted.\")\n}\n\ntry {\n  addTutorReview(89, 0)\n} catch {\n  case e: InvalidReviewException => println(\"Invalid rating!\")\n}"}
{"id":"06f05986-9e3c-46a0-a444-2cb7bd6b0b8d","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseLessonDuration(input: String): Try[Int] = \n  Try(input.toInt)\n\nval durationTry = parseLessonDuration(\"45\")\ndurationTry.foreach(d => println(s\"Duration: $d min\"))"}
{"id":"a6a10097-d5d7-46a4-b38a-2cf70197f1c8","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def findTutorByName(name: String): String = {\n  if (name == \"\") throw new IllegalArgumentException(\"Name must not be empty\")\n  \"Dr. Jane\"\n}\n\ntry {\n  val tutor = findTutorByName(\"\")\n  println(tutor)\n} catch {\n  case _: IllegalArgumentException => println(\"Invalid tutor name.\")\n}"}
{"id":"31dc701d-4072-413b-8b34-9c00eef60cfb","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait FeedbackValidationError\ncase object FeedbackTooShort extends FeedbackValidationError\ncase object FeedbackSuccess\n\ndef validateFeedback(feedback: String): Either[FeedbackValidationError, FeedbackSuccess.type] =\n  if feedback.length < 10 then Left(FeedbackTooShort)\n  else Right(FeedbackSuccess)\n\nval result = validateFeedback(\"Good.\")\nprintln(result.fold(_ => \"Feedback too short.\", _ => \"Thanks for your feedback!\"))"}
{"id":"df8c29e8-c4ce-4a60-b226-ec2b29de86f4","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class SessionNotFoundException(msg: String) extends Exception(msg)\n\ndef getSessionDetails(sessionId: Int): String = {\n  if (sessionId != 1001) throw new SessionNotFoundException(\"Session not found.\")\n  \"Mathematics - Algebra I\"\n}\n\ntry {\n  val session = getSessionDetails(1002)\n  println(session)\n} catch {\n  case e: SessionNotFoundException => println(e.getMessage)\n}"}
{"id":"0b2287cd-5ea7-4daf-8f3a-0cd087784b82","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def safeLessonPrice(input: String): Either[String, Double] =\n  try\n    Right(input.toDouble)\n  catch\n    case _: NumberFormatException => Left(\"Invalid price format.\")\n\nval priceResult = safeLessonPrice(\"19.99\")\nprintln(priceResult)"}
{"id":"3ebfc06b-9224-4b42-a264-3a41c88f31cd","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def enrollInCourse(courseCode: String): String = {\n  if (courseCode.isEmpty) throw new Exception(\"Course code required\")\n  \"Enrolled in course\"\n}\n\ntry {\n  val s = enrollInCourse(\"\")\n  println(s)\n} catch {\n  case e: Exception => println(\"Enrollment failed: \" + e.getMessage)\n}"}
{"id":"7af25142-8485-41e0-b1f1-98b6029e0902","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait PasswordChangeError\ncase object WeakPassword extends PasswordChangeError\ncase object PasswordChangeSuccess\n\ndef changePassword(studentId: Int, password: String): Either[PasswordChangeError, PasswordChangeSuccess.type] =\n  if password.length < 6 then Left(WeakPassword)\n  else Right(PasswordChangeSuccess)\n\nprintln(changePassword(200, \"cat12\"))"}
{"id":"998ee396-7f45-4d67-8e1a-0e2624bd6e41","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class UnauthorizedAccessException(msg: String) extends Exception(msg)\n\ndef accessReport(userRole: String): String = {\n  if (userRole != \"admin\") throw new UnauthorizedAccessException(\"Access denied\")\n  \"Report Data\"\n}\n\ntry {\n  println(accessReport(\"student\"))\n} catch {\n  case e: UnauthorizedAccessException => println(e.getMessage)\n}"}
{"id":"10f10557-75e7-4dc3-9862-25585d1c34e4","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseStudentAge(ageStr: String): Try[Int] = Try(ageStr.toInt)\n\nval parsedAge = parseStudentAge(\"seventeen\").recover {\n  case _ => 18\n}\nprintln(parsedAge.get)"}
{"id":"a40aa655-3ca0-48c5-bc9e-cab38e7feeb2","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def submitAssignment(studentId: Int, fileContent: String): String = {\n  if (studentId <= 0) throw new Exception(\"Invalid student ID\")\n  if (fileContent.isEmpty) throw new Exception(\"File is empty\")\n  \"Assignment submitted\"\n}\n\ntry {\n  submitAssignment(-1, \"My Answers\")\n} catch {\n  case e: Exception => println(\"Submission failed: \" + e.getMessage)\n}"}
{"id":"b6d47dab-d7c2-4ac2-a9b3-dd22bedcd505","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait SessionCancelError\ncase object SessionAlreadyStarted extends SessionCancelError\ncase object CancelSuccess\n\ndef cancelSession(sessionId: Int, started: Boolean): Either[SessionCancelError, CancelSuccess.type] =\n  if started then Left(SessionAlreadyStarted)\n  else Right(CancelSuccess)\n\nprintln(cancelSession(104, started = true))"}
{"id":"b36e81dd-f370-4450-ac4d-7199391d1506","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getTutorRating(tutorId: Int): Double = {\n  if (tutorId < 10) throw new RuntimeException(\"Tutor not found\")\n  4.8\n}\n\ntry {\n  println(getTutorRating(5))\n} catch {\n  case e: RuntimeException => println(\"Problem: \" + e.getMessage)\n}"}
{"id":"c4327057-ba0c-4d47-a1da-fc2d64ba1775","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class TutorNotFound(name: String)\n\ndef lookupTutor(name: String): Either[TutorNotFound, String] =\n  if name == \"\" then Left(TutorNotFound(\"No tutor\"))\n  else Right(\"Tutor profile available\")\n\nlookupTutor(\"\") match\n  case Left(TutorNotFound(msg)) => println(msg)\n  case Right(profile) => println(profile)"}
{"id":"ef47d3b1-63bd-4921-8e85-8e38010ec63c","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def updateCourseSchedule(courseId: Int, date: String): String = {\n  if (courseId <= 0) throw new Exception(\"Invalid course ID\")\n  if (date == \"\") throw new Exception(\"Date required\")\n  \"Schedule updated\"\n}\n\ntry {\n  updateCourseSchedule(0, \"2024-06-01\")\n} catch {\n  case e: Exception => println(\"Schedule update failed\")\n}"}
{"id":"9b9847d6-93f5-47e7-9f5a-50963b462f2d","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class PaymentError(reason: String)\n\ndef processPayment(amount: Double): Either[PaymentError, String] =\n  if amount <= 0 then Left(PaymentError(\"Non-positive amount\"))\n  else Right(\"Payment processed successfully\")\n\nval paymentResult = processPayment(-8.0)\npaymentResult.fold(err => println(err.reason), msg => println(msg))"}
{"id":"68e6d4bb-6d8d-4faf-aab4-12018fda22b7","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def sendNotification(studentEmail: String): Unit = {\n  if (!studentEmail.contains(\"@\")) throw new Exception(\"Not a valid email\")\n  println(s\"Notification sent to $studentEmail\")\n}\n\ntry {\n  sendNotification(\"noemail\")\n} catch {\n  case e: Exception => println(\"Notification failed.\")\n}"}
{"id":"4310e253-75d2-40c1-938c-83e9823b8a21","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(id: Int, price: Double)\nsealed trait ListingSearchError\ncase object ListingNotFound extends ListingSearchError\n\ndef findListingById(id: Int, listings: List[Listing]): Either[ListingSearchError, Listing] =\n  listings.find(_.id == id).toRight(ListingNotFound)"}
{"id":"a8ff9d8d-9c4d-4682-aafc-434773f107e0","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(id: Int, bedrooms: Int)\n\ndef filterByBedrooms(bedrooms: Int, listings: List[Listing]): Option[List[Listing]] =\n  val filtered = listings.filter(_.bedrooms == bedrooms)\n  Option.when(filtered.nonEmpty)(filtered)"}
{"id":"5d39c9cb-11e4-4fcb-a1c4-751702e031cb","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Location(lat: Double, lon: Double)\ncase class GeoError(message: String)\n\ndef validateLocation(location: Location): Either[GeoError, Location] =\n  if location.lat >= -90 && location.lat <= 90 && location.lon >= -180 && location.lon <= 180 then\n    Right(location)\n  else\n    Left(GeoError(\"Invalid coordinates\"))"}
{"id":"af63f2af-6cfa-443b-a75e-04c2566afffb","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseListingId(str: String): Try[Int] =\n  Try(str.toInt)"}
{"id":"5368aafe-7352-4453-a8bb-2b5011ea2a55","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(title: String, description: String)\n\ndef findListingByKeyword(keyword: String, listings: List[Listing]): Option[Listing] =\n  listings.find(l => l.title.contains(keyword) || l.description.contains(keyword))"}
{"id":"7b63d744-de15-4172-8ce1-91cf84c82c6e","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait PriceValidationError\ncase class PriceBelowMinimum(min: Double) extends PriceValidationError\ncase object PriceNotPositive extends PriceValidationError\n\ndef checkPrice(price: Double): Either[PriceValidationError, Double] =\n  if price <= 0 then Left(PriceNotPositive)\n  else if price < 50000 then Left(PriceBelowMinimum(50000))\n  else Right(price)"}
{"id":"ba45d80a-18a8-4eb9-b48c-052c0273f363","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\ncase class Listing(id: Int, name: String)\n\ndef safeGetListingName(listing: Option[Listing]): Try[String] =\n  Try(listing.get.name)"}
{"id":"36ffe878-429e-47b3-a4b5-1fe062caef79","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def parsePrice(price: String): Option[Double] =\n  scala.util.Try(price.toDouble).toOption"}
{"id":"b2c2021a-40ba-4746-85cd-713429290c73","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait ListingSearchError\ncase class CityNotFound(city: String) extends ListingSearchError\ncase class InvalidCityName(name: String) extends ListingSearchError\n\ncase class Listing(city: String, price: Double)\n\ndef listingsForCity(city: String, listings: List[Listing]): Either[ListingSearchError, List[Listing]] =\n  if city.trim.isEmpty then Left(InvalidCityName(city))\n  else\n    val filtered = listings.filter(_.city == city)\n    if filtered.isEmpty then Left(CityNotFound(city))\n    else Right(filtered)"}
{"id":"0411d285-cb70-404d-8741-c31da9803a30","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(id: Int, sqft: Int)\n\ndef validateSquareFootage(sqft: Int): Option[Int] =\n  Option.when(sqft >= 200)(sqft)"}
{"id":"d5cb5014-c1a5-4238-b00e-faa2aa846128","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class ListingNotFoundException(msg: String) extends Exception(msg)\n\ncase class Listing(id: Int)\n\ndef getListingByIdOrThrow(id: Int, listings: List[Listing]): Listing =\n  listings.find(_.id == id).getOrElse(throw new ListingNotFoundException(s\"Listing $id not found\"))"}
{"id":"5ccf0fe0-ba36-412f-b4ba-478e3b292960","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def priceToDouble(price: String): Double =\n  try {\n    price.toDouble\n  } catch {\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Price must be numeric\")\n  }"}
{"id":"b70381ba-ac21-4cb6-bc2a-2e928e1dc441","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class InvalidSearchCriteriaException(msg: String) extends Exception(msg)\n\ncase class SearchCriteria(minPrice: Double)\n\ndef checkCriteria(criteria: SearchCriteria): SearchCriteria =\n  if criteria.minPrice < 0 then throw new InvalidSearchCriteriaException(\"Negative price not allowed\")\n  else criteria"}
{"id":"83493a5b-44c6-415e-8a56-a66d9c085a71","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def parseBedrooms(strBedrooms: String): Int =\n  try {\n    strBedrooms.toInt\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Unable to parse number of bedrooms\")\n  }"}
{"id":"89d10126-bb04-48f7-b19b-849a53dd1706","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getListingsByZip(zip: String, listings: List[(String, String)]): List[(String, String)] =\n  try {\n    listings.filter(l => l._2 == zip)\n  } catch {\n    case _: Exception => throw new Exception(\"Listing search by zip failed\")\n  }"}
{"id":"b7ba4f8a-891b-47d2-a583-ff68acd11fe5","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def safeGetFirstListing(listings: List[String]): String =\n  try {\n    listings.head\n  } catch {\n    case _: NoSuchElementException => throw new IllegalStateException(\"No listings available\")\n  }"}
{"id":"0342317b-f759-4205-a64f-560719fc1cd7","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def ensureLocationIsNotEmpty(location: String): String =\n  if location.isEmpty then throw new IllegalArgumentException(\"Location cannot be empty\")\n  else location"}
{"id":"97913a66-0bff-41a6-acc6-da8df5df8559","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class ListingStatusException(msg: String) extends Exception(msg)\n\ndef checkListingStatus(status: String): Unit =\n  if status != \"active\" && status != \"pending\" then\n    throw new ListingStatusException(\"Invalid listing status\")"}
{"id":"4a3df02a-7e8f-4fc1-9b83-13e518ae94e5","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getListingOrThrow(listings: Map[Int, String], id: Int): String =\n  listings.get(id) match {\n    case Some(title) => title\n    case None => throw new NoSuchElementException(s\"Listing $id not found\")\n  }"}
{"id":"49c59320-1016-4df5-9a77-9d2bfff66bf0","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def searchListingByCity(listings: List[(String, String)], city: String): String =\n  try {\n    listings.find(_._2 == city).map(_._1).get\n  } catch {\n    case _: NoSuchElementException => throw new Exception(\"No listings in city\")\n  }"}
{"id":"50295eb8-3713-4bb2-89e4-9d61fdef2a83","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def validatePriceRange(min: Double, max: Double): Unit =\n  if min < 0 || max < 0 then throw new IllegalArgumentException(\"Price range must be non-negative\")\n  if min > max then throw new Exception(\"Minimum price cannot be greater than maximum price\")"}
{"id":"c92f883d-e7b8-4f91-893d-d0b4eeea9ddc","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(id: Int, address: String, price: Double)\nsealed trait ListingSearchError\ncase object ListingNotFound extends ListingSearchError\ncase object InvalidListingId extends ListingSearchError\n\ndef findListingById(listings: List[Listing], id: Int): Either[ListingSearchError, Listing] =\n  if id < 0 then Left(InvalidListingId)\n  else listings.find(_.id == id).toRight(ListingNotFound)"}
{"id":"58804194-2c03-4c17-9952-1300d3ec824b","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class ListingNotFoundException(message: String) extends Exception(message)\ndef getListingByIdUnsafe(listings: List[Listing], id: Int): Listing = {\n  val listing = listings.find(_.id == id)\n  if (listing.isDefined) listing.get\n  else throw new ListingNotFoundException(s\"Listing with id $id not found.\")\n}"}
{"id":"e240f517-b3a5-4297-bf81-1a252b922193","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait SearchValidationError\ncase object EmptyLocationQuery extends SearchValidationError\ncase object PriceRangeInvalid extends SearchValidationError\n\ndef validateSearchParams(location: String, minPrice: Double, maxPrice: Double): Option[SearchValidationError] =\n  if location.trim.isEmpty then Some(EmptyLocationQuery)\n  else if minPrice > maxPrice then Some(PriceRangeInvalid)\n  else None"}
{"id":"09dc2eda-0f05-4ed4-bb7b-57e345de410d","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def parseListingPrice(priceStr: String): Double = {\n  try {\n    priceStr.toDouble\n  } catch {\n    case _: NumberFormatException =>\n      throw new IllegalArgumentException(\"Invalid price value.\")\n  }\n}"}
{"id":"0839480a-f668-4832-96b9-e84ca63c3f9c","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\ndef safeParsePrice(priceStr: String): Option[Double] =\n  Try(priceStr.toDouble).toOption"}
{"id":"0bdc3984-9be2-4126-9945-f5a478da53ba","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def searchListings(location: String, listings: List[Listing]): List[Listing] = {\n  try {\n    val trimmed = location.trim\n    if (trimmed.isEmpty) throw new Exception(\"Location must not be empty.\")\n    listings.filter(_.address.contains(trimmed))\n  } catch {\n    case e: Exception => Nil\n  }\n}"}
{"id":"a55567c2-dc5e-4cd8-aac9-b40df2dec807","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\ndef filterListingByMinArea(area: String, min: Double): Try[Double] =\n  Try(area.toDouble).filter(_ >= min)"}
{"id":"89c25e76-0e38-4aae-bf7b-c296863c9300","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def unsafeGetFirstListing(listings: List[Listing]): Listing = {\n  try {\n    listings.head\n  } catch {\n    case _: NoSuchElementException =>\n      throw new RuntimeException(\"No listings available.\")\n  }\n}"}
{"id":"c0c1d553-dd4a-45b5-af5f-5ac368955047","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait QueryParamError\ncase object InvalidBedrooms extends QueryParamError\n\ndef validateBedroomQuery(bedrooms: Int): Either[QueryParamError, Int] =\n  if bedrooms >= 0 then Right(bedrooms)\n  else Left(InvalidBedrooms)"}
{"id":"a68ea394-55c5-4224-ac95-75ba6e6a835b","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getListingPriceOrFail(listing: Listing): Double = {\n  if (listing.price <= 0) throw new IllegalArgumentException(\"Listing price must be positive.\")\n  listing.price\n}"}
{"id":"efe81342-cfd9-4dab-ad9d-03fd2073bb80","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeGetFirstAddress(listings: List[Listing]): Option[String] =\n  listings.headOption.map(_.address)"}
{"id":"9830a75d-6f7f-4e2b-a959-399dd60a08eb","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def parseAreaInput(areaStr: String): Double = {\n  try {\n    areaStr.toDouble\n  } catch {\n    case _: Exception => throw new IllegalArgumentException(\"Cannot parse area value.\")\n  }\n}"}
{"id":"49fb1665-d7c2-4d26-a432-4d890bd49516","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait ListingFilterError\ncase object NegativeRoomCount extends ListingFilterError\ncase object ExceedsMaxRooms extends ListingFilterError\n\ndef filterByRoomCount(roomCount: Int, maxRooms: Int): Either[ListingFilterError, Int] =\n  if roomCount < 0 then Left(NegativeRoomCount)\n  else if roomCount > maxRooms then Left(ExceedsMaxRooms)\n  else Right(roomCount)"}
{"id":"456a0263-54ad-4b17-87b8-7501a72b3409","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def parseZipCode(zipStr: String): Int = {\n  try {\n    zipStr.toInt\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Invalid ZipCode format.\")\n  }\n}"}
{"id":"90b7fdf6-ebd9-4049-b371-644b2036bfb3","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def safeFindListingsByType(listings: List[Listing], listingType: String): Option[List[Listing]] =\n  Option.when(listings.nonEmpty && listingType.nonEmpty) {\n    listings.filter(_.address.contains(listingType))\n  }"}
{"id":"dab84a66-8175-4ed6-bcd1-f355f5aa3126","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def validateBathrooms(bathrooms: Int): Int = {\n  if (bathrooms < 0) {\n    throw new IllegalArgumentException(\"Bathroom count cannot be negative.\")\n  }\n  bathrooms\n}"}
{"id":"c6784eb0-fdd8-468f-9cb1-b7a8a47c4836","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait PriceValidationError\ncase object TooLow extends PriceValidationError\ncase object TooHigh extends PriceValidationError\n\ndef validateListingPrice(price: Double): Either[PriceValidationError, Double] =\n  if price < 50000 then Left(TooLow)\n  else if price > 5000000 then Left(TooHigh)\n  else Right(price)"}
{"id":"0e83eea5-6bdd-4f4a-9d08-0a01496070d8","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getSellerContact(listing: Listing): String = {\n  if (listing.address == \"\") throw new Exception(\"Listing address missing, cannot fetch contact.\")\n  \"contact@example.com\"\n}"}
{"id":"f351aa77-9dfd-47ce-898c-7ecd34acc909","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safelyFilterByPrice(listings: List[Listing], min: Double): Try[List[Listing]] =\n  Try(listings.filter(_.price >= min))"}
{"id":"60934826-6071-4af1-b56a-f9c67c7d7de1","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class TransactionId(value: String)\ncase class WalletBalance(amount: BigDecimal)\ndef getWalletBalance(walletId: String): Either[String, WalletBalance] = {\n  if walletId.startsWith(\"0x\") then\n    Right(WalletBalance(BigDecimal(42)))\n  else\n    Left(\"Invalid wallet address format\")\n}"}
{"id":"3f8eb04f-408f-4bd5-a8dc-3913ceb17871","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def getWalletAddress(userId: Int): String = {\n  if userId < 0 then throw new IllegalArgumentException(\"User ID cannot be negative\")\n  \"0xC0ffeeUser\" + userId\n}\n\ndef safeGetWalletAddress(userId: Int): String = {\n  try getWalletAddress(userId)\n  catch {\n    case e: IllegalArgumentException => \"INVALID\"\n  }\n}"}
{"id":"855dfcdd-8f93-44bd-9e95-3fd5820311f4","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait WalletError\ncase object InsufficientFunds extends WalletError\ncase class InvalidRecipient(recipient: String) extends WalletError\n\ndef sendCoins(sender: String, recipient: String, amount: BigDecimal): Either[WalletError, String] = {\n  if recipient.isEmpty then Left(InvalidRecipient(recipient))\n  else if amount > 100 then Left(InsufficientFunds)\n  else Right(\"TransactionHash123abc\")\n}"}
{"id":"b92a9767-6094-485f-a690-6afa4377b110","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class FundsLockedException(walletId: String) extends Exception(s\"Funds locked for wallet $walletId\")\n\ndef withdrawAll(walletId: String): BigDecimal = {\n  throw new FundsLockedException(walletId)\n}\n\ntry withdrawAll(\"0xLocked\")\ncatch {\n  case e: FundsLockedException => 0\n}"}
{"id":"b189ebb4-0b93-455d-a17b-5976a74113d9","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"import scala.util.Try\n\ndef decodePrivateKey(encodedKey: String): Try[Array[Byte]] = Try {\n  java.util.Base64.getDecoder.decode(encodedKey)\n}"}
{"id":"fb9e4850-f8b6-48bb-88de-7db416ea18ad","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def fetchTransaction(transactionHash: String): String = {\n  if transactionHash.length != 64 then throw new RuntimeException(\"Invalid transaction hash format\")\n  \"TransactionDataFor:\" + transactionHash\n}\n\ndef safeFetchTransaction(hash: String): String = {\n  try fetchTransaction(hash) \n  catch {\n    case _: RuntimeException => \"INVALID_HASH\"\n  }\n}"}
{"id":"039d1239-f209-4a5e-b4a7-4209dfe88ae3","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait AddressValidationError\ncase object EmptyAddress extends AddressValidationError\ncase object InvalidChecksum extends AddressValidationError\n\ndef validateWalletAddress(address: String): Either[AddressValidationError, String] = {\n  if address.isEmpty then Left(EmptyAddress)\n  else if !address.startsWith(\"0x\") then Left(InvalidChecksum)\n  else Right(address)\n}"}
{"id":"c8fa7ffd-dbdc-4b31-b115-3f9dd01c4c6c","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class PrivateKeyFormatException(msg: String) extends Exception(msg)\n\ndef importPrivateKey(privKey: String): Array[Byte] = {\n  if privKey.length < 64 then \n    throw new PrivateKeyFormatException(\"Private key too short\")\n  privKey.getBytes\n}\n\ntry importPrivateKey(\"deadbeef\")\ncatch {\n  case e: PrivateKeyFormatException => \n    Array.emptyByteArray\n}"}
{"id":"7976be2c-653e-4cde-be27-580df44a88dd","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def getMnemonicSeed(phrase: String): Option[Array[Byte]] = {\n  if phrase.split(\" \").length >= 12 then Some(phrase.getBytes)\n  else None\n}"}
{"id":"6fae97ac-a61c-4074-a8c2-d94758fcd5b1","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def unlockWallet(walletPass: String): String = {\n  if walletPass.isEmpty then throw new Exception(\"Password required\")\n  \"WalletUnlocked\"\n}\n\ndef tryUnlockWallet(walletPass: String): String = {\n  try unlockWallet(walletPass)\n  catch {\n    case _: Exception => \"FAILED\"\n  }\n}"}
{"id":"4eb816f3-b1fb-4ef6-8986-f73c834bfd17","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseTransactionAmount(amountStr: String): Try[BigDecimal] = Try {\n  BigDecimal(amountStr)\n}"}
{"id":"a0bd2009-cc68-4009-a32d-56b7d5136354","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def signTransaction(transaction: String, privateKey: String): String = {\n  if privateKey.length != 64 then throw new RuntimeException(\"Invalid private key length\")\n  sSIGNED:${transaction}:${privateKey}\n}\n\ndef guardedSignTransaction(transaction: String, privateKey: String): String = {\n  try signTransaction(transaction, privateKey)\n  catch {\n    case _: RuntimeException => \"SIGNING_FAILED\"\n  }\n}"}
{"id":"212304ec-0f2e-4c77-b942-0fb75918ee77","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait DecryptError\ncase object EmptyCipherText extends DecryptError\ncase object WrongPassphrase extends DecryptError\n\ndef decryptWalletBackup(cipher: String, passphrase: String): Either[DecryptError, String] = {\n  if cipher.isEmpty then Left(EmptyCipherText)\n  else if passphrase != \"correct horse battery staple\" then Left(WrongPassphrase)\n  else Right(\"DecryptedWalletData\")\n}"}
{"id":"e953ac8e-5fef-4695-8610-26217d026d48","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletMigrationException(reason: String) extends Exception(reason)\n\ndef migrateWallet(walletId: String, targetFormat: String): String = {\n  if targetFormat != \"v2\" then throw new WalletMigrationException(\"Target format not supported\")\n  \"MigrationSuccessful\"\n}\n\ntry migrateWallet(\"0xAbe\", \"v1\")\ncatch {\n  case e: WalletMigrationException => \"MIGRATION_FAILED\"\n}"}
{"id":"d885c67d-38b7-4a5c-b10f-22bbbaa38b56","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait RestoreError\ncase object InvalidSeedPhrase extends RestoreError\ncase object WalletAlreadyExists extends RestoreError\n\ndef restoreFromSeed(seedPhrase: String): Either[RestoreError, String] = {\n  if seedPhrase.trim.isEmpty then Left(InvalidSeedPhrase)\n  else if seedPhrase == \"already used\" then Left(WalletAlreadyExists)\n  else Right(\"WalletRestored\")\n}"}
{"id":"f13c74a9-d84d-446a-a73d-46b990d38488","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def deleteWallet(walletId: String): Boolean = {\n  if walletId.contains(\"bad\") then throw new Exception(\"Deletion not allowed\")\n  true\n}\n\ndef softDeleteWallet(walletId: String): Boolean = {\n  try deleteWallet(walletId)\n  catch {\n    case _: Exception => false\n  }\n}"}
{"id":"d4b511a9-3ad7-4c61-b594-e20d2bf3630d","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseWalletBackup(backup: String): Try[Array[Byte]] = Try {\n  if backup.nonEmpty then backup.getBytes else throw new Exception(\"Backup empty\")\n}"}
{"id":"9636645d-24f9-4ec6-aa7b-aadc78823bf4","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class InvalidSignatureException(sig: String) extends Exception(s\"Invalid signature: $sig\")\n\ndef verifySignature(transaction: String, signature: String): Boolean = {\n  if signature != \"VALIDSIG\" then throw new InvalidSignatureException(signature)\n  true\n}\n\ntry verifySignature(\"tx123\", \"BADSIG\")\ncatch {\n  case e: InvalidSignatureException => false\n}"}
{"id":"103db914-0312-4e7a-834e-9b7d1221d67d","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait NetworkError\ncase object ConnectionTimeout extends NetworkError\ncase object NodeNotReachable extends NetworkError\n\ncase class Node(host: String)\ndef connectToNode(node: Node): Either[NetworkError, String] = {\n  if node.host == \"timeout\" then Left(ConnectionTimeout)\n  else if node.host == \"unreachable\" then Left(NodeNotReachable)\n  else Right(\"Connected\")\n}"}
{"id":"d3adf537-cc16-46e6-a0b6-b5e030964135","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def fetchWalletLabel(walletId: String): String = {\n  if walletId == \"\" then throw new Exception(\"Wallet ID missing\")\n  \"Personal Wallet\"\n}\n\ndef getLabelOrDefault(walletId: String, fallback: String): String = {\n  try fetchWalletLabel(walletId)\n  catch {\n    case _: Exception => fallback\n  }\n}"}
{"id":"0f1b520b-38c7-4462-a25d-d47541e23dcd","timestamp":1746100299033,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletNotFound(walletId: String)\nsealed trait TransactionError\ncase class InvalidAmount(amount: BigDecimal) extends TransactionError\ncase class InsufficientFunds(balance: BigDecimal) extends TransactionError\ncase class Wallet(walletId: String, balance: BigDecimal)\ndef sendCrypto(sender: Wallet, recipient: Wallet, amount: BigDecimal): Either[TransactionError, (Wallet, Wallet)] = \n  if amount <= 0 then Left(InvalidAmount(amount))\n  else if sender.balance < amount then Left(InsufficientFunds(sender.balance))\n  else Right(\n    (sender.copy(balance = sender.balance - amount), recipient.copy(balance = recipient.balance + amount))\n  )"}
{"id":"dc217fbf-1f16-4004-8b65-ded9a9f49be8","timestamp":1746100299033,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class InvalidPrivateKeyFormat(privateKey: String)\ndef validatePrivateKey(privateKey: String): Either[InvalidPrivateKeyFormat, String] =\n  if privateKey.matches(\"[a-fA-F0-9]{64}\") then Right(privateKey)\n  else Left(InvalidPrivateKeyFormat(privateKey))"}
{"id":"98064933-caa8-42b1-b652-e9c13b82f449","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletLockedException extends Exception(\"Wallet is locked\")\nclass NotEnoughBalanceException extends Exception(\"Not enough balance\")\ncase class Wallet(balance: BigDecimal, locked: Boolean)\ndef withdrawFunds(wallet: Wallet, amount: BigDecimal): Wallet = {\n  if (wallet.locked) throw new WalletLockedException\n  if (wallet.balance < amount) throw new NotEnoughBalanceException\n  wallet.copy(balance = wallet.balance - amount)\n}"}
{"id":"ff7822c5-36ad-4b38-89ea-386cd5a6ec61","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def loadWallet(address: String): Option[String] =\n  if address.startsWith(\"0x\") && address.length == 42 then Some(address)\n  else None"}
{"id":"7e68f8af-3802-4f0b-ac22-8a93aef6f0f9","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait KeyDerivationError\ncase object MnemonicRequired extends KeyDerivationError\ndef getSeedFromMnemonic(mnemonicOpt: Option[String]): Either[KeyDerivationError, Array[Byte]] =\n  mnemonicOpt match\n    case Some(phrase) => Right(phrase.getBytes(\"UTF-8\"))\n    case None => Left(MnemonicRequired)"}
{"id":"a7eb850f-4973-4279-9dda-0120a63ad52a","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class CorruptedWalletFileException(path: String) extends Exception(s\"Corrupted wallet file at $path\")\ndef readWalletFile(path: String): String = {\n  if (path.endsWith(\".wallet\")) \"walletdata\"\n  else throw new CorruptedWalletFileException(path)\n}"}
{"id":"0e8e6e87-73f0-434e-a6a7-c5fd9d5b46f7","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def parseAmount(input: String): Option[BigDecimal] =\n  try Some(BigDecimal(input))\n  catch case _: NumberFormatException => None"}
{"id":"69df8dc7-69bb-4fd4-95e2-6a258bc992da","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class AddressFormatError(address: String)\ndef validateAddress(address: String): Either[AddressFormatError, String] =\n  if address.matches(\"0x[a-fA-F0-9]{40}\") then Right(address)\n  else Left(AddressFormatError(address))"}
{"id":"dd337131-0f0d-40f5-b8aa-deb0fe94b867","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class NetworkUnavailableException extends Exception(\"Network error occurred\")\ndef broadcastTransaction(rawTx: String): String = {\n  if (rawTx.nonEmpty) \"txid123\"\n  else throw new NetworkUnavailableException\n}"}
{"id":"82b7251d-b23b-4353-a954-1ab8a92331b0","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"case class Wallet(balance: BigDecimal)\nclass InsufficientFundsException(msg: String) extends Exception(msg)\ndef sendMaxAmount(wallet: Wallet): BigDecimal = {\n  if (wallet.balance <= 0) throw new InsufficientFundsException(\"No funds to send.\")\n  wallet.balance\n}"}
{"id":"21c5f693-4afc-44ae-a78a-4b3fa6b805cc","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class Wallet(address: String, unlocked: Boolean)\ndef unlockWallet(wallet: Wallet, passphrase: String): Option[Wallet] =\n  if passphrase == \"correct-horse-battery-staple\" then Some(wallet.copy(unlocked = true))\n  else None"}
{"id":"a7b8186f-ee61-4e6e-9fc5-0923689416cf","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class AddressNotFoundException(address: String) extends Exception(s\"Address $address not found\")\ndef removeAddress(addresses: List[String], target: String): List[String] = {\n  if (!addresses.contains(target)) throw new AddressNotFoundException(target)\n  addresses.filterNot(_ == target)\n}"}
{"id":"bbdcc7b0-4407-482e-84ad-b42b0aee15ba","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait RecoveryPhraseError\ncase object PhraseTooShort extends RecoveryPhraseError\ndef checkRecoveryPhraseLength(phrase: List[String]): Either[RecoveryPhraseError, List[String]] =\n  if phrase.length >= 12 then Right(phrase)\n  else Left(PhraseTooShort)"}
{"id":"31b8fda3-794e-4faa-9fcc-7495dd10d611","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def decodeHex(str: String): Option[Array[Byte]] =\n  scala.util.Try(\n    BigInt(str, 16).toByteArray\n  ).toOption"}
{"id":"52af9c1a-4771-4e71-a53f-b6afbdcefc71","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class InvalidTransactionException(message: String) extends Exception(message)\ndef getTransactionFee(sizeInBytes: Int): Long = {\n  if (sizeInBytes <= 0) throw new InvalidTransactionException(\"Transaction size must be positive.\")\n  sizeInBytes * 10L\n}"}
{"id":"6128725c-7bfa-4b68-93d8-4c6dcecf8b20","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"case class Transaction(id: String, valid: Boolean)\nclass TransactionInvalidException extends Exception(\"Transaction validation failed.\")\ndef broadcastIfValid(tx: Transaction): String = {\n  if (!tx.valid) throw new TransactionInvalidException\n  s\"Broadcasted: ${tx.id}\"\n}"}
{"id":"a8c11e49-e851-4edd-849a-44990760fa8b","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class Wallet(address: String, balance: BigDecimal)\nsealed trait TransferError\ncase class AmountTooLow(amount: BigDecimal) extends TransferError\ncase class BalanceTooLow(balance: BigDecimal) extends TransferError\ndef transferTokens(sender: Wallet, receiver: Wallet, amount: BigDecimal): Either[TransferError, (Wallet, Wallet)] =\n  if amount < 0.0001 then Left(AmountTooLow(amount))\n  else if sender.balance < amount then Left(BalanceTooLow(sender.balance))\n  else Right(\n    (sender.copy(balance = sender.balance - amount), receiver.copy(balance = receiver.balance + amount))\n  )"}
{"id":"3eee9b46-057c-4fb4-af9d-d3bb066ccef9","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def getWalletNickname(walletId: String): Option[String] =\n  val nicknames = Map(\"1\" -> \"Main Wallet\", \"2\" -> \"Cold Storage\")\n  nicknames.get(walletId)"}
{"id":"c6199875-5b02-4e9a-853a-ea2c061ae1b8","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class UnsupportedCurrencyException(currency: String) extends Exception(s\"Unsupported currency: $currency\")\ndef getExchangeRate(currency: String): BigDecimal = {\n  currency match {\n    case \"BTC\" => BigDecimal(27000)\n    case \"ETH\" => BigDecimal(1900)\n    case _ => throw new UnsupportedCurrencyException(currency)\n  }\n}"}
{"id":"cde46167-c267-4aa2-a7b2-38310dfa132d","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def safeDecryptPrivateKey(encrypted: String, pass: String): scala.util.Try[String] =\n  scala.util.Try {\n    if (pass == \"letmein\") encrypted.reverse\n    else throw new Exception(\"Decryption failed\")\n  }"}
{"id":"0f4db888-ad97-402d-b36f-b4c53ad219da","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Product(identifier: String, stock: Int)\nsealed trait InventoryError\ncase object ProductNotFound extends InventoryError\ncase object InsufficientStock extends InventoryError\n\ndef withdrawStock(products: List[Product], id: String, qty: Int): Either[InventoryError, Product] =\n  products.find(_.identifier == id) match\n    case Some(product) if product.stock >= qty =>\n      Right(product.copy(stock = product.stock - qty))\n    case Some(_) =>\n      Left(InsufficientStock)\n    case None =>\n      Left(ProductNotFound)\n"}
{"id":"93b018da-67a4-45ee-9f6a-bc8989fb642a","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class InventorySystemException(message: String) extends Exception(message)\nclass ProductMissingException extends InventorySystemException(\"Product missing\")\n\nobject InventoryManager {\n  def findProduct(products: List[Product], id: String): Product = {\n    products.find(_.identifier == id) match {\n      case Some(prod) => prod\n      case None => throw new ProductMissingException\n    }\n  }\n}"}
{"id":"f071cf39-197f-4048-8762-47884f9f4289","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait TransactionError\ndeficit: Int)\ncase object InvalidTransactionAmount extends TransactionError\ncase class NotEnoughInventory(deficit: Int) extends TransactionError\n\ndef reserveProduct(stock: Int, amount: Int): Either[TransactionError, Int] =\n  if amount <= 0 then Left(InvalidTransactionAmount)\n  else if stock >= amount then Right(stock - amount)\n  else Left(NotEnoughInventory(amount - stock))\n"}
{"id":"c219806f-943c-4313-a8e0-57e6fdcb2966","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"object InventoryAlerts {\n  def notifyLowStock(stockLevel: Int): Unit = {\n    if (stockLevel < 10) throw new RuntimeException(\"Critical low stock level!\")\n  }\n  def monitorStock(stockLevel: Int): String = {\n    try {\n      notifyLowStock(stockLevel)\n      \"Stock sufficient\"\n    } catch {\n      case e: RuntimeException => \"Low stock warning issued\"\n    }\n  }\n}"}
{"id":"ca51a649-a998-4da4-942e-db4edefcde16","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait ValidationError\ncase object EmptySKUCode extends ValidationError\ncase object NegativeQuantity extends ValidationError\n\ndef validateStockUpdate(sku: String, qty: Int): Option[ValidationError] =\n  if sku.isEmpty then Some(EmptySKUCode)\n  else if qty < 0 then Some(NegativeQuantity)\n  else None\n"}
{"id":"2b5b2c34-ea0d-4830-bfb6-78847d836d54","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class OutOfWarehouseSpaceException extends Exception(\"Warehouse is full\")\n\nclass WarehouseSpaceManager(var availableSpace: Int) {\n  def addShipment(size: Int): Unit = {\n    if(size > availableSpace)\n      throw new OutOfWarehouseSpaceException\n    else\n      availableSpace -= size\n  }\n}\n"}
{"id":"6e2df4ab-0d81-4853-8651-3d0fcb15f1a3","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef updateInventoryCount(current: Int, incoming: Int): Try[Int] =\n  Try {\n    if incoming < 0 then throw new IllegalArgumentException(\"Negative incoming shipment\")\n    else current + incoming\n  }\n"}
{"id":"9251f5cd-39be-4391-9ac9-6bb011ace39c","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def parseProductCode(code: String): Int = {\n  try {\n    code.toInt\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Invalid product code format\")\n  }\n}"}
{"id":"a8040652-e1c5-417b-b40b-206616b4e487","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait LocationError\ncase object MissingLocationLabel extends LocationError\n\ndef findLocation(label: String): Either[LocationError, String] =\n  if label.trim.isEmpty then Left(MissingLocationLabel)\n  else Right(s\"Shelf-${label.toUpperCase}\")\n"}
{"id":"3c636b14-26f6-4485-8220-dd4add4b699d","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def checkItemRemoval(stock: Int, qty: Int): Int = {\n  if(stock < qty) {\n    throw new RuntimeException(\"Not enough stock\")\n  } else {\n    stock - qty\n  }\n}"}
{"id":"b4584a42-a990-4cf9-9909-4fbefb4a3e53","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryLogError(reason: String)\n\ndef logInventoryChange(event: String): Either[InventoryLogError, String] =\n  if event.isBlank then Left(InventoryLogError(\"Empty event\"))\n  else Right(s\"Logged: $event\")\n"}
{"id":"47686125-c79e-4d9f-87dd-11e2ec240ba3","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class InvalidWarehouseSection extends Exception(\"Invalid warehouse section\")\n\nobject SectionValidator {\n  def validateSection(section: String): Unit = {\n    if (!section.matches(\"[A-Z]-\\d+\")) {\n      throw new InvalidWarehouseSection\n    }\n  }\n}\n"}
{"id":"35d0eec4-2183-4c9e-92e6-f97f4186bf8d","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"import scala.util.Try\ndef safeDecrement(stock: Int): Try[Int] =\n  Try {\n    require(stock > 0, \"Stock already zero\")\n    stock - 1\n  }\n"}
{"id":"d52ff6f7-c758-4e4d-94cc-41e63e734cb2","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class TransactionFailed(reason: String) extends Exception(reason)\n\ndef completeInventoryTransaction(inStock: Int, requested: Int): Int = {\n  if (requested > inStock) throw new TransactionFailed(\"Insufficient items\")\n  inStock - requested\n}\n"}
{"id":"34d58a45-99e0-45c4-97c3-18123600b8a0","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait RestockError\ncase object InvalidRestockAmount extends RestockError\ncase object Overstock extends RestockError\n\ndef processRestock(current: Int, add: Int, max: Int): Either[RestockError, Int] =\n  if add <= 0 then Left(InvalidRestockAmount)\n  else if current + add > max then Left(Overstock)\n  else Right(current + add)\n"}
{"id":"ccabb790-a1b6-466e-a241-2a9d00b956af","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"object DeleteProductOp {\n  def deleteProduct(products: List[Product], id: String): List[Product] = {\n    try {\n      if(products.exists(_.identifier == id)) {\n        products.filterNot(_.identifier == id)\n      } else {\n        throw new NoSuchElementException(\"Product not found\")\n      }\n    } catch {\n      case _: NoSuchElementException => products\n    }\n  }\n}"}
{"id":"b5726313-622f-4012-83d5-e3897ae838bf","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def safeLookupBySKU(skus: Map[String, Int], sku: String): Option[Int] =\n  skus.get(sku)\n"}
{"id":"b342c96f-a90e-4430-8d08-e7acfd609329","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def computeInventoryRatio(total: Int, defective: Int): Double = {\n  if (total == 0) throw new ArithmeticException(\"Total inventory cannot be zero\")\n  defective.toDouble / total\n}"}
{"id":"68c94c74-04f1-4c41-b374-f73a923d77a8","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class AllocationError(reason: String)\n\ndef allocateGoods(stock: Int, demand: Int): Either[AllocationError, Int] =\n  if demand > stock then Left(AllocationError(\"Demand exceeds stock\"))\n  else Right(stock - demand)\n"}
{"id":"0dce65a5-ceef-4e64-bcf2-9aac6810e38b","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"object BatchShipping {\n  def shipBatch(outbound: Int, available: Int): Int = {\n    try {\n      if (outbound > available) throw new Exception(\"Batch size exceeds inventory\")\n      available - outbound\n    } catch {\n      case e: Exception => 0\n    }\n  }\n}"}
{"id":"8ba4fd2a-35c7-45ce-b4c8-781d6a71cba8","timestamp":1746100350330,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Item(id: String, name: String, quantity: Int)\n\nsealed trait StockError\ncase object OutOfStock extends StockError\ncase object ItemNotFound extends StockError\n\ndef reserveItem(inventory: Map[String, Item], itemId: String, qty: Int): Either[StockError, Item] =\n  inventory.get(itemId) match\n    case None => Left(ItemNotFound)\n    case Some(item) if item.quantity < qty => Left(OutOfStock)\n    case Some(item) => Right(item.copy(quantity = item.quantity - qty))"}
{"id":"41b7e977-6b42-48b4-bf60-6595db744354","timestamp":1746100350330,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class InventoryException(msg: String) extends Exception(msg)\n\ndef reduceStock(inventory: Map[String, Int], itemId: String, amount: Int): Map[String, Int] =\n  if (!inventory.contains(itemId)) throw new InventoryException(\"Item not present.\")\n  else if (inventory(itemId) < amount) throw new InventoryException(\"Insufficient stock.\")\n  else inventory.updated(itemId, inventory(itemId) - amount)"}
{"id":"ce41cc91-18fd-46f5-af63-70140a57e358","timestamp":1746100350330,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait TransferError\ncase object NegativeQuantity extends TransferError\ncase object ItemNotInWarehouse extends TransferError\n\ndef transferStock(inventory: Map[String, Int], itemId: String, qty: Int): Either[TransferError, Map[String, Int]] =\n  if qty < 0 then Left(NegativeQuantity)\n  else if !inventory.contains(itemId) then Left(ItemNotInWarehouse)\n  else Right(inventory.updated(itemId, inventory(itemId) + qty))"}
{"id":"7c01ef34-7007-49d6-b8e1-f42e0f0b4980","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def fetchItemBySku(inventory: Map[String, Int], sku: String): Int =\n  if (!inventory.contains(sku)) throw new NoSuchElementException(\"SKU does not exist.\")\n  inventory(sku)"}
{"id":"102c16fb-5011-4c0b-aa6e-5ef033f1ae1e","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"import scala.util.Try\n\ncase class Warehouse(id: Int, stock: Map[String, Int])\n\ndef safeAddStock(warehouse: Warehouse, sku: String, qty: Int): Try[Warehouse] =\n  Try {\n    if qty <= 0 then throw new IllegalArgumentException(\"Quantity must be positive.\")\n    warehouse.copy(stock = warehouse.stock.updatedWith(sku) {\n      case Some(q) => Some(q + qty)\n      case None => Some(qty)\n    })\n  }"}
{"id":"ffe85206-34ad-4ee0-b51a-3e32bb0914eb","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def updateLocationMap(itemLocations: Map[String, String], itemId: String, newLoc: String): Map[String, String] =\n  try {\n    if (!itemLocations.contains(itemId)) throw new IllegalStateException(\"Item not found.\")\n    itemLocations.updated(itemId, newLoc)\n  } catch {\n    case _: Exception => itemLocations\n  }"}
{"id":"81f1f120-4968-40e8-be67-aff504072679","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait LocationError\ncase object LocationInvalid extends LocationError\ncase object ItemMissing extends LocationError\n\ndef moveInventory(itemLocations: Map[String, String], itemId: String, target: String): Either[LocationError, Map[String, String]] =\n  if !itemLocations.contains(itemId) then Left(ItemMissing)\n  else if target.isEmpty then Left(LocationInvalid)\n  else Right(itemLocations.updated(itemId, target))"}
{"id":"fe8c47c9-b5d1-458c-9272-29ca352ae5fb","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def removeItemOrThrow(warehouse: Map[String, Int], itemSku: String): Map[String, Int] =\n  if (!warehouse.contains(itemSku)) throw new RuntimeException(\"SKU missing in warehouse.\")\n  warehouse.removed(itemSku)"}
{"id":"047d7642-cb66-4ce7-8162-7d909ef72dd7","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class StockItem(sku: String, count: Int)\n\nsealed trait StockDecrementError\ncase object StockDecrementOutOfBounds extends StockDecrementError\ncase object StockDecrementNotPresent extends StockDecrementError\n\ndef decrementStock(item: StockItem, amount: Int): Either[StockDecrementError, StockItem] =\n  if amount < 0 then Left(StockDecrementOutOfBounds)\n  else if item.count < amount then Left(StockDecrementOutOfBounds)\n  else Right(item.copy(count = item.count - amount))"}
{"id":"97469f84-037b-4105-bcef-743ad97ba5d3","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def markItemDamaged(inventory: Map[String, Boolean], itemId: String): Map[String, Boolean] =\n  if (!inventory.contains(itemId)) throw new IllegalArgumentException(\"Unknown item code.\")\n  inventory.updated(itemId, true)"}
{"id":"c2dfdc7d-998d-42eb-85c0-f495303344c0","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def findSkuOrNone(inventory: Map[String, Int], sku: String): Option[Int] =\n  inventory.get(sku)"}
{"id":"be1a9f96-1c2f-46c2-94a7-84ff59f9eb89","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def moveStockWithLog(warehouse: Map[String, Int], sku: String, qty: Int): Map[String, Int] =\n  try {\n    if (!warehouse.contains(sku)) throw new Exception(\"No such SKU.\")\n    if (qty <= 0) throw new IllegalArgumentException(\"Quantity must be positive.\")\n    warehouse.updated(sku, warehouse(sku) + qty)\n  } catch {\n    case e: Exception =>\n      println(\"Error moving stock: \" + e.getMessage)\n      warehouse\n  }"}
{"id":"38b21dbb-7d9f-4c75-b219-78da020fac15","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class ItemRecord(id: String, available: Int)\nsealed trait RetrievalError\ncase object RetrievalNotFound extends RetrievalError\ncase object RetrievalInsufficient extends RetrievalError\n\ndef retrieveItems(records: List[ItemRecord], id: String, amount: Int): Either[RetrievalError, ItemRecord] =\n  records.find(_.id == id) match\n    case None => Left(RetrievalNotFound)\n    case Some(it) if it.available < amount => Left(RetrievalInsufficient)\n    case Some(it) => Right(it.copy(available = it.available - amount))"}
{"id":"134c41fd-90bf-4f29-8c7e-5e7a6d464140","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def setThresholdOrFail(thresholds: Map[String, Int], sku: String, newValue: Int): Map[String, Int] =\n  if (newValue < 1) throw new IllegalArgumentException(\"Threshold must be at least 1.\")\n  thresholds.updated(sku, newValue)"}
{"id":"f93ef7bc-b382-4c02-82b2-52f33314dbfd","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class RemovalResult(status: String)\n\nsealed trait RemovalError\ncase object RemovalNotFound extends RemovalError\n\ndef removeItem(inventory: Map[String, Int], sku: String): Either[RemovalError, RemovalResult] =\n  if !inventory.contains(sku) then Left(RemovalNotFound)\n  else Right(RemovalResult(\"Removed: \" + sku))"}
{"id":"03ecf5ca-62c0-4df5-aeb4-d246b58aaf95","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def allocateSlot(inventorySlots: Map[Int, String], slot: Int, item: String): Map[Int, String] =\n  if (inventorySlots.contains(slot)) throw new Exception(\"Slot already occupied.\")\n  inventorySlots.updated(slot, item)"}
{"id":"d85a2e5f-a175-4f83-9423-8856fc0de7b3","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class ReceivedBatch(items: List[String])\n\nsealed trait ReceptionError\ncase object ReceptionEmpty extends ReceptionError\n\ndef receiveBatch(batch: ReceivedBatch): Either[ReceptionError, Int] =\n  if batch.items.isEmpty then Left(ReceptionEmpty)\n  else Right(batch.items.length)"}
{"id":"5f1a8ca7-b22b-4142-b3ea-5de70eae34a1","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getStockQuantityOrZero(stock: Map[String, Int], productCode: String): Int =\n  try {\n    stock(productCode)\n  } catch {\n    case _: Exception => 0\n  }"}
{"id":"b49b6ea4-f311-41a4-bc90-f05086c0ddf3","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryQuery(itemCode: String)\ncase class QueryResult(available: Int)\nsealed trait QueryError\ncase object QueryItemMissing extends QueryError\n\ndef checkStock(query: InventoryQuery, stock: Map[String, Int]): Either[QueryError, QueryResult] =\n  stock.get(query.itemCode)\n    .map(avail => Right(QueryResult(avail)))\n    .getOrElse(Left(QueryItemMissing))"}
{"id":"e6136c3f-f1e7-407b-b3bb-fb1492fe0171","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def changeBinNumber(bins: Map[String, Int], binId: String, newNumber: Int): Map[String, Int] =\n  if (!bins.contains(binId)) throw new NoSuchElementException(\"Unknown bin.\")\n  bins.updated(binId, newNumber)"}
{"id":"8c349d93-60cb-4eec-8553-4aacbf156cbe","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Batch(id: String, qty: Int)\nsealed trait BatchUpdateError\ncase object BatchNotFound extends BatchUpdateError\ncase object BatchQtyNegative extends BatchUpdateError\n\ndef adjustBatchQty(batches: List[Batch], id: String, delta: Int): Either[BatchUpdateError, Batch] =\n  batches.find(_.id == id) match\n    case None => Left(BatchNotFound)\n    case Some(b) if b.qty + delta < 0 => Left(BatchQtyNegative)\n    case Some(b) => Right(b.copy(qty = b.qty + delta))"}
{"id":"f6ede405-7673-4e0b-864c-ed2aafb8e6c0","timestamp":1746100373269,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserContent(id: String, text: String)\ncase class ModerationResult(id: String, isApproved: Boolean)\n\ndef approveContent(content: UserContent): Either[String, ModerationResult] =\n  if content.text.contains(\"banned\") then Left(\"Contains banned words.\")\n  else Right(ModerationResult(content.id, true))"}
{"id":"a62aeeec-80ff-4517-8498-573a726d71ee","timestamp":1746100373269,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait ModerationError\ncase object InappropriateLanguage extends ModerationError\ncase object EmptyContent extends ModerationError\n\ndef validateContent(text: String): Either[ModerationError, String] =\n  if text.isEmpty then Left(EmptyContent)\n  else if text.exists(_.isDigit) then Left(InappropriateLanguage)\n  else Right(text)"}
{"id":"20c6753f-db86-4b2b-80b2-64bde2ba8bf5","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ReportSubmission(userId: String, reason: String)\n\ndef submitReport(report: ReportSubmission): Option[String] =\n  if report.reason.length < 5 then None\n  else Some(s\"Report accepted for user: ${report.userId}\")"}
{"id":"25e600c2-2b2a-4a17-8586-68a262ce9ed1","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseBanDuration(input: String): Try[Int] =\n  Try(input.toInt).filter(_ > 0)"}
{"id":"28cbd817-00be-4baa-ba0e-cd37a590a022","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait VerificationError\ncase object MissingEvidence extends VerificationError\ncase object InvalidReport extends VerificationError\n\ndef verifyReport(evidence: Option[String]): Either[VerificationError, String] =\n  evidence match\n    case Some(value) if value.nonEmpty => Right(value)\n    case Some(_) => Left(InvalidReport)\n    case None => Left(MissingEvidence)"}
{"id":"26cfb20c-f922-42b2-8868-9043a71dc99d","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserAction(action: String, details: String)\n\ndef logActionSafe(action: UserAction): Option[String] =\n  if action.action.isBlank then None\n  else Some(s\"Logged: ${action.action}\")"}
{"id":"93960b6c-24cb-42ee-8a5d-ed666573377f","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait BlockError\ncase object UserNotFound extends BlockError\ncase object AlreadyBlocked extends BlockError\n\ndef blockUser(username: String, blockList: Set[String]): Either[BlockError, Set[String]] =\n  if username.isEmpty then Left(UserNotFound)\n  else if blockList.contains(username) then Left(AlreadyBlocked)\n  else Right(blockList + username)"}
{"id":"6a09336f-d000-40af-b018-8830bf74088e","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDeleteComment(commentId: String): Try[String] =\n  Try {\n    if commentId.nonEmpty then s\"Deleted $commentId\"\n    else throw new Exception(\"Empty comment id\")\n  }"}
{"id":"b7f306b0-3222-401c-be59-660a00dffa69","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ModerationDecision(decision: String)\n\ndef makeDecision(decision: String): Option[ModerationDecision] =\n  if Set(\"approve\", \"reject\").contains(decision) then Some(ModerationDecision(decision))\n  else None"}
{"id":"134ff469-c849-4022-9740-4b64f3358dfa","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait PolicyViolation\ncase object HateSpeechDetected extends PolicyViolation\ncase object ContentClean extends PolicyViolation\n\ndef checkContentForHateSpeech(content: String): Either[PolicyViolation, String] =\n  if content.contains(\"hate\") then Left(HateSpeechDetected)\n  else Right(content)"}
{"id":"49eba1b9-9f55-495e-b692-c7d34d968ba2","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def detectSpam(content: String): String =\n  if content.length > 1000 then throw new RuntimeException(\"Spam detected: content too long\")\n  else \"Content accepted\""}
{"id":"2e222301-f4b4-4df6-a588-ad95ec8156f5","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class BanUserException(msg: String) extends Exception(msg)\n\ndef banUser(username: String): Unit =\n  if username.isBlank then throw new BanUserException(\"Username required for banning\")\n  println(s\"Banned user: $username\")"}
{"id":"91e87983-820c-46ae-ab69-76fedbbf0a57","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class InappropriateContentException extends Exception\n\ndef validateImage(imageUrl: String): Unit =\n  if !imageUrl.endsWith(\".jpg\") then throw new InappropriateContentException\n  println(\"Image is valid.\")"}
{"id":"623f6bf1-a55e-4c14-b59f-2d1479b843d9","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def logModerationIssue(issue: String): Unit =\n  try {\n    if issue.isEmpty then throw new IllegalArgumentException(\"Issue is empty.\")\n    println(s\"Logged: $issue\")\n  } catch {\n    case ex: Exception => println(s\"Log failure: ${ex.getMessage}\")\n  }"}
{"id":"d6e92452-a00c-4d6e-8394-ef11cb54b30e","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def removeFlaggedUser(userId: String): Unit =\n  try {\n    if userId.isBlank then throw new Exception(\"UserId missing.\")\n    println(s\"Removed user: $userId\")\n  } catch {\n    case ex: Exception => println(\"Failed to remove user: \" + ex.getMessage)\n  }"}
{"id":"5aaad51c-ebdc-4be8-8d7d-4c03878f6b32","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class ReportFormatException(message: String) extends Exception(message)\n\ndef processReport(reportData: String): Unit =\n  if !reportData.contains(\":\") then throw new ReportFormatException(\"Report format invalid.\")\n  println(\"Report processed\")"}
{"id":"0894efeb-ba90-4bac-91ba-5441da708c28","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def moderateText(text: String): Boolean =\n  try {\n    if text.contains(\"bannedWord\") then throw new Exception(\"Banned word found.\")\n    true\n  } catch {\n    case _: Exception => false\n  }"}
{"id":"234bb5e0-5632-40d7-a48d-86c764b84f09","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def warnUser(username: String): Unit =\n  if username.length < 3 then throw new IllegalArgumentException(\"Username too short.\")\n  println(s\"Warned user: $username\")"}
{"id":"d8694732-9b24-4d37-aa63-fbaee03a492a","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def reviewAppeal(contentId: String): Boolean =\n  try {\n    if contentId == \"fail\" then throw new Exception(\"Appeal rejected.\")\n    true\n  } catch {\n    case ex: Exception => false\n  }"}
{"id":"5c6782bd-3ac5-4dbf-b30c-c12ae65e140e","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def assignModerator(reportId: String, moderatorName: String): String =\n  if moderatorName.isEmpty then throw new Exception(\"Moderator required.\")\n  s\"$moderatorName assigned to $reportId\""}
{"id":"d2866815-12d7-4cff-b9a5-b75ee0f5602f","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserReport(reportId: Int, description: String)\ndef parseContentReport(report: String): Option[UserReport] =\n  val parts = report.split(\"|\", 2)\n  if parts.length == 2 then\n    Some(UserReport(parts(0).toIntOption.getOrElse(0), parts(1)))\n  else None"}
{"id":"4a1ca11f-9484-4bd3-ac30-56a70dbe1cc9","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait ModerationError\ncase object InappropriateContentDetected extends ModerationError\ncase class ReviewFailure(reason: String) extends ModerationError\ncase class ModerationResult(contentId: Int, approved: Boolean)\ndef moderateContent(contentId: Int, text: String): Either[ModerationError, ModerationResult] =\n  if text.exists(_.isDigit) then Left(InappropriateContentDetected)\n  else Right(ModerationResult(contentId, true))"}
{"id":"9a5fe65e-6c02-4a2a-b337-c8b4545a1f7c","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def approveComment(commentId: Int, isFlagged: Boolean): Option[Int] =\n  if isFlagged then None else Some(commentId)"}
{"id":"1229eab9-1341-4ac4-a367-dc4e862143eb","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"import scala.util.Try\ndef blockUserAccount(userName: String, violationCount: Int): Try[String] =\n  Try {\n    if violationCount > 3 then throw new Exception(\"User exceeds violation threshold.\")\n    else s\"$userName blocked successfully.\"\n  }"}
{"id":"ea6c93c0-9700-4a80-8152-98c851e5d07e","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ContentReview(contentId: Int, removed: Boolean)\ndef removeContent(contentId: Int, text: String): Either[String, ContentReview] =\n  if text.length > 140 then Left(\"Content too long\")\n  else Right(ContentReview(contentId, true))"}
{"id":"df1fc55a-6fcd-4d9a-b38f-eed4d2e49ee9","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait BanReason\ncase object SpamBehavior extends BanReason\ncase object HateSpeech extends BanReason\ndef banAccount(userId: Int, reason: String): Either[BanReason, Int] =\n  reason match\n    case \"spam\" => Left(SpamBehavior)\n    case \"hate\" => Left(HateSpeech)\n    case _      => Right(userId)"}
{"id":"89a0bef7-cb7a-4442-9cdb-85a884d5c732","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def extractHashtags(postText: String): Option[List[String]] =\n  val hashtags = \"#\\\\w+\".r.findAllIn(postText).toList\n  if hashtags.isEmpty then None else Some(hashtags)"}
{"id":"7b2d48de-89d4-4d43-8472-24bac85be27d","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ReviewResult(reviewer: String, passed: Boolean)\ndef assignReviewer(contentId: Int, eligible: Boolean): Either[String, ReviewResult] =\n  if !eligible then Left(\"Reviewer not eligible\")\n  else Right(ReviewResult(\"moderator42\", true))"}
{"id":"45f93148-160c-428f-9597-9f556b9f75e0","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait FlaggingError\ncase object InvalidReason extends FlaggingError\ncase object UserNotAuthorized extends FlaggingError\ndef flagContent(userId: Int, reason: String): Either[FlaggingError, Boolean] =\n  if reason.isBlank then Left(InvalidReason)\n  else if userId < 0 then Left(UserNotAuthorized)\n  else Right(true)"}
{"id":"42c01dec-dae6-407e-8e37-926a56dcd2e5","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def redactProfanities(text: String): Option[String] =\n  val words = text.split(\" \")\n  val profanities = Set(\"badword\", \"offensive\")\n  val found = words.exists(profanities.contains(_))\n  if found then Some(words.map(w => if profanities.contains(w) then \"***\" else w).mkString(\" \")) else None"}
{"id":"347b8f50-2c3d-480b-87b7-5bf60c210c3c","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def fetchContentById(contentId: Int): String =\n  if contentId <= 0 then throw new IllegalArgumentException(\"Invalid contentId\")\n  else s\"Post body for $contentId\""}
{"id":"3733edfb-b2b4-43c9-bf19-7c3850209965","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def incrementViolationCount(userId: Int, count: Int): Int =\n  try {\n    if count < 0 then throw new RuntimeException(\"Negative violation count\")\n    count + 1\n  } catch {\n    case exc: RuntimeException => 0\n  }"}
{"id":"897fe044-63ed-4b5b-94b5-f6151900e174","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def validateModeratorCredentials(username: String, password: String): Boolean =\n  if username.nonEmpty && password.length > 5 then true\n  else throw new SecurityException(\"Invalid credentials\")"}
{"id":"cf2fcf0e-537c-4193-b6c7-62f6fb2b9095","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class ContentModerationError(message: String) extends Exception(message)\ndef denyUserAccess(userRole: String): Boolean =\n  if userRole != \"admin\" then throw new ContentModerationError(\"Insufficient permissions\")\n  else true"}
{"id":"0941fc11-065e-4e50-a6a6-2cd0b699b327","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def resolveReport(reportId: Int): Boolean =\n  try {\n    if reportId < 100 then throw new Exception(\"Report not found\")\n    true\n  } catch {\n    case _ : Exception => false\n  }"}
{"id":"d039ba3e-4eea-423f-ba2e-dff860aa3fbe","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def queueReviewTask(task: String): Unit =\n  if task.isEmpty then throw new IllegalArgumentException(\"Empty task not allowed\")\n  println(s\"Task $task queued.\")"}
{"id":"6311569f-8a85-425d-8643-136829a1e94a","timestamp":1746100392172,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def checkSpamDetection(result: String): String =\n  try {\n    if result == \"spam\" then throw new Exception(\"Spam detected\")\n    \"Clean\"\n  } catch {\n    case e: Exception => e.getMessage\n  }"}
{"id":"09fb41a8-8ac5-4901-8f0b-54e31483a9b6","timestamp":1746100392172,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def muteUser(userId: Int, reason: String): Boolean =\n  if reason.isEmpty then throw new Exception(\"Mute reason required.\")\n  else true"}
{"id":"845ba34f-6e10-4225-871d-3a44d0323219","timestamp":1746100392172,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def escalateInappropriateContent(content: String): String =\n  try {\n    if content.contains(\"banned\") then throw new Exception(\"Inappropriate content flagged\")\n    \"Reviewed\"\n  } catch {\n    case _: Exception => \"Escalated to admin\"\n  }"}
{"id":"540de336-33a2-440a-9894-90e234b67866","timestamp":1746100392172,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def checkDuplicateReport(userId: Int, reportType: String): Boolean =\n  if reportType == \"duplicate\" then throw new Exception(\"Duplicate report submitted\")\n  else true"}
{"id":"3105c4b9-fcda-44d4-8a9d-7da9a011b571","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class UserProfile(id: Long, preferences: Set[String])\ncase class NewsRecommendationError(message: String)\ncase class Recommendation(articleId: Long)\n\ndef recommendArticle(user: UserProfile): Either[NewsRecommendationError, Recommendation] =\n  if user.preferences.isEmpty then\n    Left(NewsRecommendationError(\"User has no preferences\"))\n  else\n    Right(Recommendation(articleId = 1001L))"}
{"id":"3e6ef40f-056c-407c-8b1c-d8980d1fae5b","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedItem(id: Long, category: String)\n\ndef findPersonalizedItem(items: List[FeedItem], userPref: Set[String]): Option[FeedItem] =\n  items.find(item => userPref.contains(item.category))"}
{"id":"8521e727-e315-4e32-a318-cc5e4066a0f9","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"sealed trait FeedLoadError\ncase object NetworkTimeout extends FeedLoadError\ncase object FeedNotFound extends FeedLoadError\n\ndef loadNewsFeed(userId: Long): Either[FeedLoadError, List[String]] =\n  if userId < 0 then Left(FeedNotFound)\n  else Right(List(\"Breaking News!\", \"World Updates\"))"}
{"id":"86af0610-112e-4ca6-8cd1-c358aed10f39","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseUserInterest(json: String): Try[Set[String]] =\n  Try {\n    val interests = json.trim.stripPrefix(\"[\").stripSuffix(\"]\").split(\",\")\n    interests.map(_.trim.replaceAll(\"\\\"\", \"\")).toSet\n  }"}
{"id":"e431d11d-e739-4957-8d0d-d2e4e535fbfa","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class Article(id: Long, tags: Set[String])\n\nsealed trait FilterError\ncase object NoMatchingTags extends FilterError\n\ndef filterArticles(articles: List[Article], userTags: Set[String]): Either[FilterError, Article] =\n  articles.find(a => a.tags.exists(userTags.contains(_))) match\n    case Some(article) => Right(article)\n    case None => Left(NoMatchingTags)"}
{"id":"f2e52795-09c7-4b8a-b74a-04cbbd8ed5ba","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeRankCalculation(score: String): Try[Int] =\n  Try(score.toInt)"}
{"id":"7fd7fffd-1b0c-44e2-b5ed-2a17ec145671","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"sealed trait FetchPreferenceError\ncase object EmptyPreferenceList extends FetchPreferenceError\n\ncase class UserPreference(categories: List[String])\n\ndef fetchPreferredContent(preference: UserPreference): Either[FetchPreferenceError, String] =\n  preference.categories.headOption match\n    case Some(category) => Right(s\"Content for $category\")\n    case None => Left(EmptyPreferenceList)"}
{"id":"d82015f5-701e-48a8-a8c7-f523d111e09d","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class NewsFeedItem(id: Long, title: String, topic: String)\ndef pickItem(items: List[NewsFeedItem], topic: String): Option[NewsFeedItem] =\n  items.find(_.topic == topic)"}
{"id":"c95ca924-c75d-4f20-a010-f2ac8d5b05e1","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"sealed trait PersonalizationError\ncase object InvalidUserId extends PersonalizationError\ncase object NoRecommendationsFound extends PersonalizationError\n\ndef fetchRecommendations(userId: Int): Either[PersonalizationError, List[String]] =\n  if userId <= 0 then Left(InvalidUserId)\n  else Right(List(\"Politics - A review\", \"Sports - Final Results\"))"}
{"id":"8048f415-8984-4fce-96fe-342722e08c3a","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"import scala.util.Try\n\ndef computeFeedScore(clicks: Int, impressions: Int): Try[Double] =\n  Try(clicks.toDouble / impressions)"}
{"id":"80918434-c4ca-4d4b-93fd-6a9fcb0ed1ee","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"case class FeedLoadingError(msg: String) extends Exception(msg)\n\nclass NewsFeedLoader {\n  def loadFeed(userId: Long): List[String] = {\n    if (userId <= 0) throw new FeedLoadingError(\"Negative userId not allowed\")\n    List(\"Top Story\", \"Editor's Pick\")\n  }\n}\n\ntry {\n  val stories = new NewsFeedLoader().loadFeed(-4)\n  println(stories)\n} catch {\n  case e: FeedLoadingError => println(s\"Error: ${e.getMessage}\")\n}"}
{"id":"66c5f8cf-afcd-4012-a885-b641374a250a","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def selectTrendingArticle(articles: List[String]): String = {\n  if (articles.isEmpty) throw new NoSuchElementException(\"No trending articles found\")\n  articles.head\n}\n\ntry {\n  val pick = selectTrendingArticle(List())\n  println(pick)\n} catch {\n  case e: NoSuchElementException => println(e.getMessage)\n}"}
{"id":"295c4add-d62b-4fa6-a185-691b761b5372","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"case class UserPreferenceError(msg: String) extends RuntimeException(msg)\n\ndef getPrimaryCategory(preferences: List[String]): String = {\n  preferences.headOption.getOrElse(throw new UserPreferenceError(\"Preference list is empty\"))\n}"}
{"id":"ad393309-7048-4ca1-9ca4-2db24d2c41c9","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class BookmarkManager {\n  def addBookmark(userId: Long, articleId: Long): Boolean = {\n    if (userId <= 0 || articleId <= 0) throw new IllegalArgumentException(\"Invalid ids\")\n    true\n  }\n}\n\ntry {\n  new BookmarkManager().addBookmark(-2, 45)\n} catch {\n  case e: IllegalArgumentException => println(s\"Bookmarking failed: ${e.getMessage}\")\n}"}
{"id":"9c7f35fc-95e7-46a8-9fe0-0046182bd1ab","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class CategorySelector {\n  def getCategory(categories: List[String], idx: Int): String = {\n    if (idx < 0 || idx >= categories.length) throw new IndexOutOfBoundsException(\"Category index out of range\")\n    categories(idx)\n  }\n}\n\ntry {\n  val chosen = new CategorySelector().getCategory(List(\"Tech\", \"Fashion\"), 5)\n  println(chosen)\n} catch {\n  case e: IndexOutOfBoundsException => println(e.getMessage)\n}"}
{"id":"c520ce3f-633c-46cb-9c19-34d3fd411051","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getUserFeed(userId: Int): List[String] = {\n  if (userId == 0) throw new IllegalArgumentException(\"Missing userId for feed\")\n  List(\"Global News\", \"Business Highlights\")\n}\n\ntry {\n  val feed = getUserFeed(0)\n  println(feed)\n} catch {\n  case e: IllegalArgumentException => println(s\"Failed to retrieve feed: ${e.getMessage}\")\n}"}
{"id":"717c4a06-56ef-4fc2-bbf6-b3ab2122920a","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class NewsPreferenceManager {\n  def updatePreferences(userId: Long, newPrefs: List[String]): Unit = {\n    if (newPrefs.isEmpty) throw new RuntimeException(\"No preferences specified\")\n  }\n}\n\ntry {\n  new NewsPreferenceManager().updatePreferences(1111, List())\n} catch {\n  case e: RuntimeException => println(e.getMessage)\n}"}
{"id":"b8f8c10e-7790-4413-8519-f1ced7929459","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def shareArticle(articleId: Long, recipient: String): String = {\n  if (recipient.isBlank) throw new IllegalArgumentException(\"Recipient cannot be blank\")\n  s\"Article $articleId shared with $recipient\"\n}\ntry {\n  println(shareArticle(1002, \"\"))\n} catch {\n  case e: IllegalArgumentException => println(s\"Share failed: ${e.getMessage}\")\n}"}
{"id":"7e19a62a-802a-4b19-a4fd-7c890939572b","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class NotificationSender {\n  def sendNotification(userId: Long, message: String): Unit = {\n    if (message.isEmpty) throw new IllegalArgumentException(\"Notification message is empty\")\n  }\n}\n\ntry {\n  new NotificationSender().sendNotification(3, \"\")\n} catch {\n  case e: IllegalArgumentException => println(e.getMessage)\n}"}
{"id":"57961784-7135-4029-b4a0-2cabe4b81bf3","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"case class FeedProcessingException(msg: String) extends Exception(msg)\n\ndef processFeedItem(feed: String): Int = {\n  if (feed.isBlank) throw new FeedProcessingException(\"Feed item is blank\")\n  feed.length\n}\n\ntry {\n  println(processFeedItem(\"\"))\n} catch {\n  case e: FeedProcessingException => println(s\"Failed: ${e.getMessage}\")\n}"}
{"id":"86f72bee-f91b-4001-846e-5c4c60114261","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class SourceFetcher {\n  def fetchSource(name: String): String = {\n    if (name == \"\") throw new RuntimeException(\"Source name required\")\n    s\"News from $name\"\n  }\n}\n\ntry {\n  println(new SourceFetcher().fetchSource(\"\"))\n} catch {\n  case e: RuntimeException => println(e.getMessage)\n}"}
{"id":"1aaf751c-fbb2-4e86-8b17-61eee053f76c","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class NewsArticle(id: String, title: String, content: String)\n\nsealed trait FeedError\ncase object UserNotFound extends FeedError\ncase object NoArticlesFound extends FeedError\n\ndef getPersonalizedFeed(userId: String): Either[FeedError, List[NewsArticle]] =\n  if userId.isEmpty then Left(UserNotFound)\n  else\n    val articles = List(NewsArticle(\"1\", \"Tech News\", \"Scala 3 Released\"))\n    if articles.nonEmpty then Right(articles)\n    else Left(NoArticlesFound)"}
{"id":"79c87fb6-b662-40c9-8d64-f22b8e65df54","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def fetchLatestUserActivity(userId: String): String = {\n  if (userId == null || userId == \"\")\n    throw new IllegalArgumentException(\"Invalid userId provided.\")\n  // Fake fetch operation\n  \"User liked 2 articles.\"\n}"}
{"id":"1465dc54-e620-45f9-9e1a-b8644c0d949a","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseSavedFeedsCount(str: String): Try[Int] =\n  Try(str.toInt)"}
{"id":"9131d7ef-ec69-4a14-8dd1-de8907f8aeed","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def recommendArticles(userId: String, interests: List[String]): List[String] = {\n  if (userId.isEmpty) {\n    throw new RuntimeException(\"User ID missing.\")\n  }\n  if (interests.isEmpty) {\n    throw new NoSuchElementException(\"No interests found for user.\")\n  }\n  List(\"Learn Scala 3\", \"Functional Programming Basics\")\n}"}
{"id":"ebfec3cc-815d-4a9e-b7a3-a2571ae61d4a","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"sealed trait FeedProcessingError\ncase class FetchPreferenceFailed(reason: String) extends FeedProcessingError\ncase class RecommendationUnavailable(reason: String) extends FeedProcessingError\n\ncase class UserPreferences(categories: List[String])\n\ndef loadUserPreferences(userId: String): Either[FeedProcessingError, UserPreferences] =\n  if userId == \"blocked\"\n    then Left(FetchPreferenceFailed(\"User is blocked\"))\n  else Right(UserPreferences(List(\"Technology\", \"Science\")))"}
{"id":"3a4fab3f-4642-4243-b010-ff232bb39fb3","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def logFeedError(e: Throwable): Unit = {\n  println(\"Feed Error: \" + e.getMessage)\n}\n\ndef getRecommendedForUser(userId: String): String = {\n  try {\n    if (userId.startsWith(\"err\")) throw new Exception(\"Invalid Recommendation Request\")\n    \"Breaking: Scala conquers world!\"\n  } catch {\n    case e: Exception =>\n      logFeedError(e)\n      \"Recommendation unavailable.\"\n  }\n}"}
{"id":"2690c2c0-bca1-47df-84b7-e9e68693a245","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class ArticleDetails(title: String, content: String)\n\ndef safeGetArticleTitle(article: Option[ArticleDetails]): Option[String] =\n  article.map(_.title)"}
{"id":"10a90db5-160d-4bd5-ab2f-c87db4dc24ca","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def addArticleToFeed(feedId: String, articleId: String): Boolean =\n  if (feedId == null || articleId == null)\n    throw new IllegalArgumentException(\"Both IDs must be provided.\")\n  else true"}
{"id":"63d7103b-f030-48dd-8c68-15c5dd5adead","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class PersonalizedFeed(articles: List[String])\n\nsealed trait FeedGenerationError\ncase object InsufficientArticles extends FeedGenerationError\n\ndef generateFeed(preferences: List[String]): Either[FeedGenerationError, PersonalizedFeed] =\n  if preferences.contains(\"none\") then Left(InsufficientArticles)\n  else Right(PersonalizedFeed(preferences.map(_ + \" News\")))"}
{"id":"c51e2483-14f4-4faf-8c78-43279b5cc5de","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def removeFavoriteNewsItem(userId: String, articleId: String): Boolean = {\n  if (userId == \"blocked\")\n    throw new SecurityException(\"User not allowed to remove favorite.\")\n  true\n}"}
{"id":"67c8b106-7cb1-4f42-9233-4bfd2fa2db61","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedUpdate(success: Boolean)\n\nsealed trait FeedUpdateError\ncase object UpdateFeedBlocked extends FeedUpdateError\n\ndef tryUpdateUserFeed(userId: String): Either[FeedUpdateError, FeedUpdate] =\n  if userId == \"suspended\" then Left(UpdateFeedBlocked)\n  else Right(FeedUpdate(true))"}
{"id":"3dbae92c-6645-4f41-b940-e2fb0bb034fc","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getFeedPreferences(userId: String): String = {\n  if (userId.length < 3) {\n    throw new IllegalArgumentException(\"UserId too short.\")\n  }\n  \"technology, science\"\n}"}
{"id":"f7c9449d-b12a-4755-8240-bceea1c35a48","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def safeDivideFeeds(a: Int, b: Int): Option[Int] =\n  if b == 0 then None else Some(a / b)"}
{"id":"82e65e2f-e7b1-4ed7-a5a9-ffdc0f809994","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def fetchTrendingTopics(region: String): List[String] = {\n  try {\n    if (region.isEmpty) throw new Exception(\"Region required.\")\n    List(\"Scala\", \"Personalization\", \"AI\")\n  } catch {\n    case _: Exception => List()\n  }\n}"}
{"id":"b7f92e35-7e2a-4aa0-9973-479f38bc3171","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ncase class UserNewsStat(articlesRead: Int)\n\ndef parseUserStat(input: String): Try[UserNewsStat] =\n  Try {\n    val count = input.toInt\n    UserNewsStat(count)\n  }"}
{"id":"29f31214-c38e-4551-ad75-6a3effa6fd0b","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def notifyUserOfNewFeed(userId: String): Unit = {\n  try {\n    if (userId == \"readonly\") throw new UnsupportedOperationException(\"Notifications disabled.\")\n    println(s\"Notified $userId\")\n  } catch {\n    case e: Exception => println(\"Failed to notify: \" + e.getMessage)\n  }\n}"}
{"id":"75683aa3-dfa6-453d-a0dd-7b9a86b0c9c9","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"sealed trait RecommendationError\ncase class MissingInterests(userId: String) extends RecommendationError\n\ncase class Recommendation(articles: List[String])\n\ndef recommendBasedOnHistory(userId: String, interests: List[String]): Either[RecommendationError, Recommendation] =\n  if interests.isEmpty then Left(MissingInterests(userId))\n  else Right(Recommendation(interests.map(_ + \" Insights\")))"}
{"id":"694a075c-81f5-4441-920e-6bbbcab50d90","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def publishFeedItem(feed: String): Boolean = {\n  if (feed.isEmpty) throw new RuntimeException(\"Feed is empty.\")\n  true\n}"}
{"id":"79ea4cb4-f069-4243-ab69-2b971cd50255","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def aggregateUserBookmarks(bookmarks: List[String]): Option[Int] =\n  if bookmarks.isEmpty then None else Some(bookmarks.size)"}
{"id":"e6d840fa-b15c-4b54-803d-66017030dc20","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingStation(id: String, latitude: Double, longitude: Double, isAvailable: Boolean)\n\nsealed trait LocatorError\ncase object StationNotFound extends LocatorError\n\nobject StationFinder:\n  def findStationById(stations: List[ChargingStation], stationId: String): Either[LocatorError, ChargingStation] =\n    stations.find(_.id == stationId).toRight(StationNotFound)"}
{"id":"85d79124-d04b-4268-b627-df13faa807d4","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getStationPower(station: ChargingStation): Try[Int] = Try {\n  if station.isAvailable then 50\n  else throw new IllegalStateException(\"Station not available\")\n}"}
{"id":"da2e28ec-4058-4096-96c9-d9a1440a491a","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"sealed trait StationValidationError\ncase object InvalidLatitude extends StationValidationError\ncase object InvalidLongitude extends StationValidationError\n\ndef validateCoordinates(latitude: Double, longitude: Double): Either[StationValidationError, (Double, Double)] =\n  if latitude < -90 || latitude > 90 then Left(InvalidLatitude)\n  else if longitude < -180 || longitude > 180 then Left(InvalidLongitude)\n  else Right((latitude, longitude))"}
{"id":"84339275-a1c3-45cb-b121-d9fe56efb526","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def parseStationResponse(response: String): Option[ChargingStation] =\n  val parts = response.split(\",\")\n  if parts.length == 4 then\n    Some(\n      ChargingStation(\n        parts(0),\n        parts(1).toDoubleOption.getOrElse(0.0),\n        parts(2).toDoubleOption.getOrElse(0.0),\n        parts(3).toBooleanOption.getOrElse(false)\n      )\n    )\n  else None"}
{"id":"79fccf9f-eb77-4d2c-a535-a7976738f69c","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def safeDivideDistance(distance: Double, divisor: Double): Option[Double] =\n  if divisor == 0.0 then None else Some(distance / divisor)"}
{"id":"9a60a747-fd0a-4d33-ade6-05cbdbbfb909","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingError(message: String)\n\ndef checkConnectorType(connector: String): Either[ChargingError, String] =\n  if Set(\"CHAdeMO\", \"CCS\", \"Type2\").contains(connector) then Right(connector)\n  else Left(ChargingError(\"Invalid connector type\"))"}
{"id":"b4ba2130-ad9b-4c66-80fa-0baa827a38fe","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def parseAvailableSlots(slotsString: String): Try[Int] = Try {\n  slotsString.toInt\n}"}
{"id":"741e77dd-ca8c-45bb-9cda-5dba58cdde5e","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class Location(latitude: Double, longitude: Double)\n\nsealed trait LocationError\ncase object NegativeLatitude extends LocationError\n\nobject LocationService:\n  def safeCreateLocation(lat: Double, lon: Double): Either[LocationError, Location] =\n    if lat < 0 then Left(NegativeLatitude) else Right(Location(lat, lon))"}
{"id":"3382da09-9d5d-4a28-af9a-d80d82b35101","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def findClosestAvailable(stations: List[ChargingStation], refLat: Double, refLon: Double): Option[ChargingStation] =\n  stations.filter(_.isAvailable)\n    .sortBy(s => math.hypot(s.latitude - refLat, s.longitude - refLon))\n    .headOption"}
{"id":"30bbec13-d6d0-4595-82bf-3e4c267fa5bc","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def tryToBook(station: ChargingStation): Try[String] = Try {\n  if station.isAvailable then \"Booking confirmed\"\n  else throw new Exception(\"Station not available for booking\")\n}"}
{"id":"8629078f-392e-40b3-aa3b-4286831ab022","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def requestStationStatus(stationId: String): String = {\n  if (stationId.isEmpty) throw new IllegalArgumentException(\"Station ID cannot be empty\")\n  \"Available\"\n}"}
{"id":"adcc77d2-8d23-4da0-8641-8d2b89c6466f","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class StationConnectorMissing(msg: String) extends RuntimeException(msg)\ndef checkConnectorExists(connectors: List[String], needed: String): String = {\n  if (!connectors.contains(needed)) throw new StationConnectorMissing(\"Required connector not found\")\n  s\"Connector $needed available\"\n}"}
{"id":"b8711873-01ee-465e-85c0-94d2ff79f688","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def parseStationCapacity(capacity: String): Int = {\n  try {\n    capacity.toInt\n  } catch {\n    case ex: NumberFormatException => throw new RuntimeException(\"Invalid station capacity\", ex)\n  }\n}"}
{"id":"0b1c2da5-51c6-47a5-8479-fc316a1a89f0","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getStationStatusOrThrow(stationId: String, database: Map[String, String]): String = {\n  database.get(stationId) match {\n    case Some(status) => status\n    case None => throw new NoSuchElementException(s\"No status found for station $stationId\")\n  }\n}"}
{"id":"858ea4e5-bcbf-4fde-a438-bc9a515b22d9","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def fetchChargerLocation(stationId: String, storage: Map[String, (Double, Double)]): (Double, Double) = {\n  try {\n    storage(stationId)\n  } catch {\n    case _: NoSuchElementException => throw new RuntimeException(\"Location not found\")\n  }\n}"}
{"id":"1f087d79-0d75-4562-997c-c3d3f2d8489d","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def isChargerAvailable(chargerId: String, availableIds: Set[String]): Boolean = {\n  try {\n    availableIds.contains(chargerId)\n  } catch {\n    case ex: Exception => false\n  }\n}"}
{"id":"3ee2bc25-786b-428e-9699-7c1b29a010bb","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def requireValidPowerLevel(level: Int): Unit = {\n  if (level < 0) throw new IllegalArgumentException(\"Power level must be non-negative\")\n}"}
{"id":"265a3ff0-09dc-49e4-9070-477233b44043","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getStationType(types: Map[String, String], stationId: String): String = {\n  try {\n    types(stationId)\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Station type lookup failed\")\n  }\n}"}
{"id":"29781088-dff7-42e2-b10c-e491a4b68b3d","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def handleReservationRequest(userId: String, stationId: String): String = {\n  try {\n    if (userId.isEmpty || stationId.isEmpty) throw new IllegalArgumentException(\"Invalid input\")\n    \"Reservation successful\"\n  } catch {\n    case ex: Exception => \"Failed: \" + ex.getMessage\n  }\n}"}
{"id":"95a9d821-cd83-444f-90b0-ca27719498d8","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getAuthorizationToken(user: String): String = {\n  if (user == \"\") throw new Exception(\"User not specified\")\n  \"token-1234\"\n}"}
{"id":"2714b6d7-d2b5-421d-b19c-57f4aa10a351","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"case class ChargingStationIdNotFound(stationId: String) extends Exception(s\"No charging station with ID: $stationId found.\")\ndef getChargerLocation(stationId: String): (Double, Double) = {\n  if stationId == \"STN123\" then (40.7128, -74.0060)\n  else throw new ChargingStationIdNotFound(stationId)\n}\n"}
{"id":"2b161b61-7e2d-4520-8a80-b3ba72bc6738","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getFastChargersNearby(latitude: Double, longitude: Double): List[String] = {\n  if latitude < -90 || latitude > 90 then\n    throw new IllegalArgumentException(\"Invalid latitude.\")\n  if longitude < -180 || longitude > 180 then\n    throw new IllegalArgumentException(\"Invalid longitude.\")\n  List(\"EVChargePoint1\", \"EVChargePoint2\")\n}\n"}
{"id":"2fd4ffb3-c9ee-4e60-af95-6d4a52635696","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def selectAvailableStation(requestedType: String): String = {\n  val stations = Map(\"Type2\" -> \"StationX\", \"CCS\" -> \"StationY\")\n  try {\n    stations.get(requestedType).get\n  } catch {\n    case _: NoSuchElementException => throw new Exception(\"Requested charger type not found\")\n  }\n}\n"}
{"id":"c48396e6-69d2-4650-804f-54a3669ca8f5","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def parseStationResponse(json: String): Map[String, String] = {\n  if json.startsWith(\"{\") then Map(\"name\" -> \"GreenStation\")\n  else throw new RuntimeException(\"Malformed response from API.\")\n}\n"}
{"id":"ed6b7cb1-98ad-4db8-a70c-c230ee188dd5","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class StationUpdateService {\n  def updateStationStatus(id: String, status: String): Unit = {\n    if id.trim.isEmpty then throw new Exception(\"Station ID cannot be empty\")\n    if status != \"Active\" && status != \"Inactive\" then throw new Exception(\"Unknown station status\")\n    println(s\"Station $id status updated to $status\")\n  }\n}\n"}
{"id":"76babda6-70e1-4671-927f-cce04f565b08","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargingStationSearch {\n  def getStationDetails(name: String): String = {\n    try {\n      if name.nonEmpty then s\"Details of $name\"\n      else throw new NullPointerException(\"Station name required\")\n    } catch {\n      case e: NullPointerException => throw new RuntimeException(e.getMessage)\n    }\n  }\n}\n"}
{"id":"7993ac19-349b-474f-a722-68a88c07725f","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def mapRadiusMeters(radius: Int): String = {\n  if radius <= 0 then throw new IllegalArgumentException(\"Radius must be positive\")\n  f\"Using radius of $radius%d meters\"\n}\n"}
{"id":"830321da-7cd1-4ae6-878a-2385fe36e189","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def findNearbyChargingStations(userLat: Double, userLng: Double): List[String] = {\n  try {\n    if userLat > 90 || userLat < -90 then throw new RuntimeException(\"Latitude out of range\")\n    if userLng > 180 || userLng < -180 then throw new RuntimeException(\"Longitude out of range\")\n    List(\"StationAlpha\", \"StationBeta\")\n  } catch {\n    case e: RuntimeException => List(s\"Error: ${e.getMessage}\")\n  }\n}\n"}
{"id":"e08f536c-26e6-4088-8cc9-c1c7caf61654","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def chargerAvailability(schedule: String): Boolean = {\n  if schedule.matches(\"[0-9]{2}:[0-9]{2}-[0-9]{2}:[0-9]{2}\") then true\n  else throw new Exception(\"Invalid schedule format\")\n}\n"}
{"id":"21ddf718-dc67-4103-bb6c-018d2669ea37","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"object ChargingSessionManager {\n  def startSession(stationId: String): Int = {\n    if stationId == \"\" then throw new RuntimeException(\"Station ID required.\")\n    12345\n  }\n\n  def endSession(sessionId: Int): Unit = {\n    if sessionId <= 0 then throw new IllegalArgumentException(\"Invalid session ID.\")\n  }\n}\n"}
{"id":"bc6ccf7a-b176-4b77-842b-83116e0bc14d","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"enum StationLocatorError:\n  case InvalidCoordinates, StationNotFound, ServiceUnavailable\n\ndef validateCoordinates(lat: Double, lng: Double): Either[StationLocatorError, (Double, Double)] =\n  if lat < -90 || lat > 90 || lng < -180 || lng > 180 then Left(StationLocatorError.InvalidCoordinates)\n  else Right((lat, lng))\n"}
{"id":"f05f37d0-a0b3-4b99-aa5e-986ff701ce15","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class StationUnavailableError(stationName: String)\ndef getChargingStation(stationName: String): Option[String] = {\n  val available = Set(\"VoltPark\", \"ChargeNow\")\n  if available.contains(stationName) then Some(stationName) else None\n}\n"}
{"id":"120f8cac-1d4a-418c-9168-9ef7ca475ff2","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseStationId(id: String): Try[Int] = Try {\n  id.toInt\n}\n"}
{"id":"a61793dc-1c0b-4644-bdf2-7e7febcd03a2","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"sealed trait BookingError\ncase object StationAlreadyBooked extends BookingError\ncase object ChargerNotAvailable extends BookingError\n\ndef bookChargingSlot(slotId: Int): Either[BookingError, String] =\n  if slotId == 1 then Left(StationAlreadyBooked)\n  else if slotId == 2 then Left(ChargerNotAvailable)\n  else Right(\"Booking confirmed\")\n"}
{"id":"22b09bb9-f97d-4684-9f53-fb983af54c17","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def findStationByConnector(connectorType: String): Option[String] = {\n  val stations = Map(\"CHAdeMO\" -> \"EcoFast01\", \"CCS\" -> \"EcoFast02\")\n  stations.get(connectorType)\n}\n"}
{"id":"5928fe8f-b7c3-428c-913e-e9553ef63f60","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"sealed trait SessionError\ncase object SessionNotFound extends SessionError\n\nclass EVSessionManager {\n  def resumeSession(sessionId: String): Either[SessionError, String] =\n    if sessionId == \"ACTIVE123\" then Right(\"Resuming session\")\n    else Left(SessionNotFound)\n}\n"}
{"id":"0d2b3f01-6a11-4ff5-896a-f817821001e0","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def safeGetStationFeatures(name: String): Option[List[String]] = {\n  val features = Map(\"VoltPark\" -> List(\"AC\", \"Restroom\"))\n  features.get(name)\n}\n"}
{"id":"d6ee2577-d6d1-47c2-810f-d068f0824bc4","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryGetStationRating(station: String): Try[Double] = Try {\n  if station == \"FastCharge\" then 4.2 else throw new Exception(\"Station not rated\")\n}\n"}
{"id":"222635a6-e6fd-4d67-a5e2-e4ccc26f41f6","timestamp":1746100478658,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"sealed trait StationDataError\ncase object DataCorrupted extends StationDataError\n\nobject DataParser {\n  def safeParseStationData(data: String): Either[StationDataError, Int] =\n    if data == \"OK\" then Right(100)\n    else Left(DataCorrupted)\n}\n"}
{"id":"ead3b91d-ea96-486f-a9cd-823396f4ae02","timestamp":1746100478658,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getFastChargerPrice(station: String): Option[Double] = {\n  val prices = Map(\"TurboCharge\" -> 0.39, \"GreenVolt\" -> 0.42)\n  prices.get(station)\n}\n"}
{"id":"0e8fcb3f-e1e1-41f8-acd9-6000c9fbd62f","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class SensorReading(sensorId: String, value: Double)\ndef parseMoistureLevel(raw: String): Option[SensorReading] =\n  raw.split(\":\") match\n    case Array(id, v) =>\n      Try(v.toDouble).toOption.map(SensorReading(id, _))\n    case _ => None\n"}
{"id":"5db41cbe-50c4-496d-9328-024524d9f098","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class WeatherStationError(reason: String)\ndef validateTemperature(reading: Double): Either[WeatherStationError, Double] =\n  if reading < -50 || reading > 60 then\n    Left(WeatherStationError(s\"Temperature $reading out of range\"))\n  else\n    Right(reading)\n"}
{"id":"b3f43ed0-e728-43e8-8e54-47d76048b5bb","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait CropCheckError\ncase object SoilNotDetected extends CropCheckError\ncase object CropNotPresent extends CropCheckError\ndef detectCrop(soilSensor: Boolean, cropSensor: Boolean): Either[CropCheckError, String] =\n  if !soilSensor then Left(SoilNotDetected)\n  else if !cropSensor then Left(CropNotPresent)\n  else Right(\"Crop detected\")\n"}
{"id":"9d52b483-6df6-4d45-98cf-ff6bfe55d4e7","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def computeAverageYield(yields: List[Double]): Option[Double] =\n  if yields.isEmpty then None\n  else Some(yields.sum / yields.size)\n"}
{"id":"b59124db-7564-44a3-9b2a-1ec2bba39842","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"import scala.util.Try\ncase class DroneImage(filePath: String)\ndef loadDroneImage(path: String): Try[DroneImage] =\n  Try {\n    if !path.endsWith(\".jpg\") then throw new Exception(\"Invalid file type\")\n    DroneImage(path)\n  }\n"}
{"id":"2b31a54e-a870-42ae-bc45-d684bca47975","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait SensorError\ncase object SensorDisconnected extends SensorError\ncase object InvalidSensorValue extends SensorError\ndef readSensor(value: Option[Double]): Either[SensorError, Double] =\n  value match\n    case None => Left(SensorDisconnected)\n    case Some(v) if v < 0 => Left(InvalidSensorValue)\n    case Some(valid) => Right(valid)\n"}
{"id":"afd0c509-742a-4537-8e52-7d91323d3a0f","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def findPlotByName(plots: List[String], name: String): Option[String] =\n  plots.find(_ == name)\n"}
{"id":"09467c05-b5ae-4bb4-ac6d-94276d3b09e6","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"import scala.util.Try\ndef safeParseMoisture(raw: String): Try[Double] =\n  Try(raw.toDouble)\n"}
{"id":"ecc2ab0b-eee8-445d-abe7-68f48fc9c7fd","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait IrrigationError\ncase object PumpMalfunction extends IrrigationError\ndef activateIrrigation(pumpOk: Boolean): Either[IrrigationError, String] =\n  if pumpOk then Right(\"Pump activated\")\n  else Left(PumpMalfunction)\n"}
{"id":"f134c8a7-c69f-48db-ade2-72918c57053f","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def safeDivideHarvest(totalYield: Double, numPlots: Int): Option[Double] =\n  if numPlots == 0 then None\n  else Some(totalYield / numPlots)\n"}
{"id":"454a9814-2dd2-4052-ab1e-743b7fa4001e","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class CropDataException(msg: String) extends Exception(msg)\ndef fetchCropType(cropCode: String): String =\n  cropCode match {\n    case \"WHT\" => \"Wheat\"\n    case \"CRN\" => \"Corn\"\n    case _ =>\n      throw new CropDataException(\"Unknown crop code\")\n  }\n"}
{"id":"cb11035e-edac-4dc5-adec-08a506a68eed","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def recordHarvestArea(area: Double): Unit =\n  if area < 0 then throw new IllegalArgumentException(\"Area cannot be negative\")\n  ()\n"}
{"id":"1d976a7e-801c-4a77-bcc6-ff68e90bb621","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def calculateRainfallIndex(records: List[Double]): Double =\n  try\n    records.sum / records.length\n  catch case e: Exception =>\n    throw new RuntimeException(\"Error calculating rainfall index\")\n"}
{"id":"264b036b-e7a6-417a-8610-db9caed4852f","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class SensorFailure(message: String) extends Exception(message)\ndef checkSensor(sensorOk: Boolean): Unit =\n  if !sensorOk then throw new SensorFailure(\"Sensor failed to report data\")\n"}
{"id":"1d6e5762-f636-4035-a979-1c63ca0124be","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def extractPlotId(line: String): Int =\n  try\n    line.split(\",\")(1).toInt\n  catch case _: Throwable =>\n    throw new NumberFormatException(\"Plot ID not found or invalid\")\n"}
{"id":"e1279f4f-f0c3-4c72-a1ec-b0fdebf6c7fc","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def logSoilSample(sample: String): Unit =\n  try\n    val parts = sample.split(\":\")\n    if parts.length != 2 then throw new Exception(\"Malformed sample\")\n  catch case e: Exception =>\n    println(\"Sample logging failed: \" + e.getMessage)\n"}
{"id":"a4931eff-a454-4bd3-86ef-0232b6f220ae","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class MissingMoistureException extends Exception(\"Moisture data missing\")\ndef getMoistureLevel(optionalValue: Option[Double]): Double =\n  optionalValue.getOrElse(throw new MissingMoistureException)\n"}
{"id":"72102e7c-6983-48ed-a3d7-46584cae61f5","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def normalizeReadings(readings: List[Double]): List[Double] =\n  try\n    val mean = readings.sum / readings.size\n    readings.map(_ / mean)\n  catch case e: Exception =>\n    throw new Exception(\"Normalization failed\")\n"}
{"id":"06402284-09ed-4760-9b29-d91097533ddf","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def checkDroneBattery(level: Int): Unit =\n  if level < 20 then throw new IllegalStateException(\"Drone battery critically low\")\n"}
{"id":"ea6b053f-cedb-4677-807f-c2a29e23c821","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def parseYieldValue(line: String): Double =\n  try\n    line.trim.toDouble\n  catch case e: NumberFormatException =>\n    throw e\n"}
{"id":"7958cea5-ae87-4eb9-93eb-3c70a59ab00d","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class SensorReadFailure(sensorId: String)\ncase class CropMoistureLevel(crop: String, moisture: Double)\n\ndef readMoisture(sensorId: String): Either[SensorReadFailure, CropMoistureLevel] =\n  if sensorId == \"brokenSensor\" then\n    Left(SensorReadFailure(sensorId))\n  else\n    Right(CropMoistureLevel(\"Wheat\", 22.7))"}
{"id":"cfc90765-837c-4300-8b48-58c9bdc82897","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class PesticideLimitExceeded(message: String) extends Exception(message)\n\ndef applyPesticide(amount: Double): Unit = {\n  if (amount > 2.0) {\n    throw new PesticideLimitExceeded(\"Pesticide usage exceeds legal limit!\")\n  }\n}"}
{"id":"6db670a8-ea96-4143-be7c-075874972554","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait FieldDataError\ncase object MissingFieldCoordinates extends FieldDataError\n\ncase class FieldCoordinates(lat: Double, lon: Double)\n\ndef getFieldCoordinates(fieldId: String): Option[FieldCoordinates] =\n  if fieldId.isEmpty then None else Some(FieldCoordinates(42.0, 11.0))"}
{"id":"976491bb-812a-445d-a1c1-9443535f0ba9","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def calculateYieldIncrease(fertilizerKg: Double): Double = {\n  if (fertilizerKg <= 0) throw new IllegalArgumentException(\"Fertilizer amount must be positive\")\n  20.0 * math.log(fertilizerKg)\n}"}
{"id":"5ec4e9bc-7ec5-4a49-93d4-4cb5f46bef07","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef safeParseSatelliteDate(dateStr: String): Try[java.time.LocalDate] =\n  Try(java.time.LocalDate.parse(dateStr))"}
{"id":"e1fe252c-077c-44f9-9a28-f05c9e7618f6","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"object CropSensorManager {\n  def openConnection(sensorId: String): Unit = {\n    if (sensorId == \"offline\") {\n      throw new Exception(\"Sensor not online\")\n    }\n  }\n}"}
{"id":"e9af342d-65ab-4a06-a864-5b46955fd640","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait ImageError\ncase object ImageMissing extends ImageError\n\ncase class SatelliteImage(id: String, pixels: Array[Int])\n\ndef loadSatelliteImage(imageId: String): Either[ImageError, SatelliteImage] =\n  if imageId == \"notfound\" then Left(ImageMissing)\n  else Right(SatelliteImage(imageId, Array(1,2,3)))"}
{"id":"18eb43e7-84d0-4d1a-bfd4-be3e5e46a184","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def parseMoistureReading(sensorValue: String): Double = {\n  try {\n    sensorValue.toDouble\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Invalid moisture reading format\")\n  }\n}"}
{"id":"3234590b-93c8-471b-9f72-7e3469d618b5","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryHarvestPrediction(growthStage: String): Try[Int] =\n  Try {\n    if growthStage == \"Seedling\" then throw new IllegalArgumentException(\"Too early to predict\")\n    else 42\n  }"}
{"id":"769d8b27-221a-4b99-816d-bd7506a0a995","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def openIrrigationValve(valveId: String): Boolean = {\n  if (valveId == \"stuck\") {\n    throw new RuntimeException(\"Valve is stuck and cannot be opened\")\n  } else true\n}"}
{"id":"70b7e979-4cb6-4c74-aaa8-987a97ee0389","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class DiseaseScanError(details: String)\n\ndef scanForDisease(imageData: Array[Byte]): Either[DiseaseScanError, Boolean] =\n  if imageData.isEmpty then Left(DiseaseScanError(\"No image data provided\"))\n  else Right(true)"}
{"id":"81c6f9e2-b3f2-4210-8660-385516c94f37","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def setFertilizerRate(hectare: Int, rate: Double): Unit = {\n  if (rate < 0) throw new IllegalArgumentException(\"Rate cannot be negative\")\n}"}
{"id":"2eed814b-bc3b-42f5-96f6-7e8c8b4c609b","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryFetchWeather(geo: (Double, Double)): Try[Double] =\n  Try {\n    if geo._1 == 0.0 && geo._2 == 0.0 then throw new Exception(\"Invalid coordinates\")\n    else 27.3\n  }"}
{"id":"270c4711-879c-4888-b031-3f9eb9b87ead","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def computeAverageSoilPH(samples: Seq[Double]): Double = {\n  if (samples.isEmpty) throw new Exception(\"No soil pH samples given\")\n  samples.sum / samples.size\n}"}
{"id":"842911cd-0862-4520-ae73-086c2dca7f4a","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait IrrigationError\ncase object ValveFailure extends IrrigationError\n\ncase class IrrigationLog(valveId: String, time: String)\n\ndef logIrrigation(valveId: String): Either[IrrigationError, IrrigationLog] =\n  if valveId == \"faulty\" then Left(ValveFailure)\n  else Right(IrrigationLog(valveId, \"10:00\"))"}
{"id":"47cec8eb-8723-46db-9203-c3807cc16120","timestamp":1746100512943,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def assignCropPlot(plotId: String, cropType: String): Unit = {\n  if (plotId == \"taken\") {\n    throw new Exception(\"Plot already has a crop assigned\")\n  }\n}"}
{"id":"b43c4857-6876-4a98-b69b-689a270ab677","timestamp":1746100512943,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class TemperatureReadingFailed(sensorLocation: String)\n\ndef getTemperature(sensorLocation: String): Either[TemperatureReadingFailed, Double] =\n  if sensorLocation == \"outdoor_faulty\" then Left(TemperatureReadingFailed(sensorLocation))\n  else Right(24.6)"}
{"id":"d6749c9e-0c8b-458c-a0bd-b3516732e0b4","timestamp":1746100512943,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def updateNutrientLevels(plotReference: String, amount: Double): Boolean = {\n  if (amount < 0) throw new IllegalArgumentException(\"Amount must be non-negative\")\n  true\n}"}
{"id":"2317b34a-0374-4f58-94fd-cedf287391e4","timestamp":1746100512943,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class WeatherFetchError(details: String)\n\ndef fetchWeatherPrediction(areaCode: String): Either[WeatherFetchError, Double] =\n  if areaCode == \"unknown\" then Left(WeatherFetchError(\"Weather not available\"))\n  else Right(18.2)"}
{"id":"2fdbb08c-a2f2-4f1e-afa4-100442951b8c","timestamp":1746100512943,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def removeWeedPatch(patchId: String): Unit = {\n  if (patchId.isEmpty) throw new Exception(\"Patch identifier is required\")\n}"}
{"id":"bdce2fe1-be2e-4068-b630-8c5d3dd6af73","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class SensorReading(sensorId: String, value: Double)\nsealed trait AggregationError\ncase object SensorNotFound extends AggregationError\ndef aggregateValues(readings: List[SensorReading]): Either[AggregationError, Double] =\n  if readings.isEmpty then Left(SensorNotFound)\n  else Right(readings.map(_.value).sum / readings.size)"}
{"id":"8a4fc5ab-017a-48a6-9e2c-3c63a8cd4d48","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def fetchSensorTemperature(sensorId: String): Double = {\n  if (sensorId.length < 3) throw new IllegalArgumentException(\"Invalid Sensor ID\")\n  else 22.8\n}\ntry {\n  val temp = fetchSensorTemperature(\"a1\")\n} catch {\n  case e: IllegalArgumentException => println(\"Error: \" + e.getMessage)\n}"}
{"id":"9c7809b8-dcf8-402a-b8ec-b311cd8d5f04","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"import scala.util.Try\ndef parseHumidityPayload(payload: String): Try[Double] =\n  Try(payload.toDouble)"}
{"id":"eb11f67c-5fe0-433e-87a9-0c48e00ef9cc","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def getMotionCount(sensorGroup: String): Int = {\n  try {\n    if (sensorGroup.isEmpty) throw new RuntimeException(\"Empty group\")\n    else 7\n  } catch {\n    case ex: RuntimeException => 0\n  }\n}"}
{"id":"9d798019-3671-481d-9028-a1276bdc0492","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait PayloadParseError\ncase object MalformedPayload extends PayloadParseError\ndef decodeSensorPayload(payload: String): Either[PayloadParseError, Int] =\n  payload.toIntOption match\n    case Some(value) => Right(value)\n    case None => Left(MalformedPayload)"}
{"id":"bd31e117-45a3-42e7-bf05-cfd45dc6bf0d","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class SensorConnectionError(msg: String) extends Exception(msg)\ndef requestSensorSync(deviceId: String): Unit = {\n  if (deviceId == \"offline\") throw new SensorConnectionError(\"Sensor disconnected\")\n}\ntry {\n  requestSensorSync(\"offline\")\n} catch {\n  case err: SensorConnectionError => println(\"Failed to sync: \" + err.getMessage)\n}"}
{"id":"45a8c619-ae02-4a6d-b04a-6f4bc63ac296","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class LightIntensity(value: Double)\ndef fromRawLightPayload(payload: String): Option[LightIntensity] =\n  payload.toDoubleOption.map(LightIntensity.apply)"}
{"id":"81898652-3d9d-4e9f-a3c6-a176a9819428","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def combineSensorAverages(values: List[Double]): Double = {\n  if (values.isEmpty) throw new IllegalArgumentException(\"No sensor values\")\n  values.sum / values.length\n}"}
{"id":"1ebf04ae-6bcb-4941-b4d2-91b931a713a5","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait DataUploadError\ncase object NetworkTimeout extends DataUploadError\ncase object InvalidChecksum extends DataUploadError\ndef uploadToServer(buffer: Array[Byte], checksum: Int): Either[DataUploadError, String] =\n  if buffer.length == 0 then Left(NetworkTimeout)\n  else if buffer.sum != checksum then Left(InvalidChecksum)\n  else Right(\"Upload successful\")"}
{"id":"cd3dda58-45ba-4707-9cf7-4b4f1628860f","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def extractPressureValue(entry: String): Double = {\n  if (!entry.forall(_.isDigit)) throw new NumberFormatException(\"Non-numeric pressure entry\")\n  entry.toDouble\n}"}
{"id":"1568ddd5-0406-4759-b991-7779659c2701","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"import scala.util.Try\ncase class CurrentReading(value: Double)\ndef safeParseCurrentMeasurement(measureStr: String): Try[CurrentReading] =\n  Try(CurrentReading(measureStr.toDouble))"}
{"id":"c08846e4-51e1-43a5-a714-e28171d620b3","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"object SensorAggregator {\n  def aggregateOrThrow(sensorValues: Seq[Double]): Double = sensorValues match {\n    case Nil => throw new Exception(\"No sensor values collected\")\n    case seq => seq.sum / seq.length\n  }\n}"}
{"id":"7657aab1-f2bd-4b79-a7be-4fc2121ee77f","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait TimestampError\ncase object EmptyTimestamp extends TimestampError\ncase object MalformedTimestamp extends TimestampError\ndef parseTimestamp(input: String): Either[TimestampError, Long] =\n  if input.isEmpty then Left(EmptyTimestamp)\n  else input.toLongOption.toRight(MalformedTimestamp)"}
{"id":"bfa067d9-9a34-425b-89dd-6adac951cd0a","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def normalizePulseRate(sensorId: String, rate: Int): Int = {\n  if (rate < 0) throw new IllegalArgumentException(\"Negative pulse rate for \" + sensorId)\n  rate\n}"}
{"id":"b35444d8-698d-434e-8782-635e3e741a8f","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class AggregatedValues(measurements: List[Double])\ndef combinedSum(measure: AggregatedValues): Option[Double] =\n  if measure.measurements.isEmpty then None\n  else Some(measure.measurements.sum)"}
{"id":"2ccf9e4e-42e7-4da4-a097-648d685799c0","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def mergeSensorPackets(packet1: String, packet2: String): String = {\n  try {\n    if (packet1 == packet2) throw new Exception(\"Duplicate packet detected\")\n    packet1 + packet2\n  } catch {\n    case _: Exception => \"MERGE_ERROR\"\n  }\n}"}
{"id":"3918e6cd-3d27-4c32-bedf-8fd14e6cda40","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"import scala.util.Try\ndef safeBatteryLevelParse(level: String): Try[Int] =\n  Try(level.trim.toInt)"}
{"id":"033aac9a-0b4e-4ef1-96e0-7ee192b01738","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class OutlierDetectionException(msg: String) extends Exception(msg)\ndef detectTemperatureAnomaly(values: List[Double]): Unit = {\n  if (values.exists(_ > 100.0)) throw new OutlierDetectionException(\"Extreme temperature\")\n}"}
{"id":"c41acfb0-c913-4ec5-a1db-2897483019d2","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait PartitionError\ncase object PartitionIndexOutOfBounds extends PartitionError\ndef extractPartition(readings: List[Double], idx: Int): Either[PartitionError, List[Double]] =\n  if idx < 0 || idx > readings.length then Left(PartitionIndexOutOfBounds)\n  else Right(readings.take(idx))"}
{"id":"26de14d3-31ff-4c2e-9333-ff37d1e0920d","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def checkSensorCalibration(calibStr: String): Boolean = {\n  try {\n    calibStr.toBoolean\n  } catch {\n    case _: Exception => false\n  }\n}"}
{"id":"61d6bb52-87e6-4ddd-99cc-9af14e690995","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class SensorReading(sensorId: String, value: Double)\ncase object SensorNotFound extends SensorAggregationError\nsealed trait SensorAggregationError\n\ndef calculateAverage(temperatureReadings: List[SensorReading]): Either[SensorAggregationError, Double] =\n  if temperatureReadings.isEmpty then Left(SensorNotFound)\n  else Right(temperatureReadings.map(_.value).sum / temperatureReadings.size)"}
{"id":"0d622f60-ad02-4174-8beb-f460b36e8930","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def normalizeHumidity(humidity: Double): Double =\n  if (humidity < 0.0 || humidity > 100.0) throw new IllegalArgumentException(\"Humidity reading out of range\")\n  else humidity / 100.0"}
{"id":"52f71260-8b0b-4d06-bd32-e46234558e47","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class AggregatedSensorData(sensorId: String, mean: Double)\nsealed trait AggregationError\ncase object NotEnoughData extends AggregationError\n\ndef aggregateTemperatureTemperatures(readings: List[SensorReading]): Either[AggregationError, AggregatedSensorData] =\n  readings match\n    case Nil => Left(NotEnoughData)\n    case nonEmptyList =>\n      val mean = nonEmptyList.map(_.value).sum / nonEmptyList.size\n      Right(AggregatedSensorData(nonEmptyList.head.sensorId, mean))"}
{"id":"f17f857a-3bd0-4edf-8ec0-a681672d2264","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def getLatestReading(sensorId: String, readings: Map[String, Double]): Double =\n  readings.get(sensorId) match {\n    case Some(v) => v\n    case None => throw new NoSuchElementException(\"Reading for sensor not found\")\n  }"}
{"id":"08abec32-820a-4fa1-aacd-4ce44b090ace","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def parseSensorPayload(payload: String): Option[SensorReading] =\n  payload.split(\":\") match\n    case Array(sensorId, valueString) =>\n      scala.util.Try(valueString.toDouble).toOption.map(v => SensorReading(sensorId, v))\n    case _ => None"}
{"id":"615529a8-d80a-423c-9084-b5b42ca85fe6","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def combinePressureReadings(pressure1: String, pressure2: String): Double =\n  try {\n    pressure1.toDouble + pressure2.toDouble\n  } catch {\n    case e: NumberFormatException => throw new IllegalArgumentException(\"Invalid pressure value\")\n  }"}
{"id":"10078b0d-52ca-4294-8fb0-a00e3df21e98","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def calibrateLightIntensity(raw: Double): Either[String, Double] =\n  if raw < 0.0 then Left(\"Light intensity must be non-negative\")\n  else Right(raw * 1.025)"}
{"id":"ebc43b61-6b4e-44c8-afb8-da0bd4fba7e1","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def collectMotionEvents(events: List[String]): List[String] =\n  if (events == null) throw new NullPointerException(\"Event list cannot be null\")\n  else events"}
{"id":"de48d1ea-1e56-481e-9c41-5c82311e9071","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseTemperature(input: String): Try[Double] =\n  Try(input.toDouble)"}
{"id":"786da202-ac03-46bf-b252-fa1a4610e966","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def retrieveSensorData(sensorName: String): Double =\n  try {\n    // Pretend this reaches hardware, will fail if no sensor\n    if (sensorName == \"missing\") throw new RuntimeException(\"Sensor inaccessible!\")\n    else 21.78\n  } catch {\n    case e: RuntimeException => throw new IllegalStateException(\"Unable to retrieve sensor data\")\n  }"}
{"id":"fa4acd3a-d770-4177-a436-e49beb38a297","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait PressureProcessingError\ncase object InvalidPressureValue extends PressureProcessingError\n\ndef safeParsePressure(pressureString: String): Either[PressureProcessingError, Double] =\n  scala.util.Try(pressureString.toDouble).toEither.left.map(_ => InvalidPressureValue)"}
{"id":"1a413b77-e674-4f36-b095-74b83c63dec9","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def logBatteryError(battery: Int): Int =\n  try {\n    if (battery < 0) throw new Exception(\"Battery level is negative!\")\n    if (battery > 100) throw new Exception(\"Battery level too high!\")\n    battery\n  } catch {\n    case e: Exception =>\n      println(e.getMessage)\n      -1\n  }"}
{"id":"9aee3c54-d567-443c-b038-a1f12749e92c","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def tryGetAirQuality(readings: Map[String, Double], id: String): Option[Double] =\n  readings.get(id)"}
{"id":"d1f3d4d2-1ccc-4f5b-a413-fd1a9f584acc","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def parseSensorId(id: String): Int =\n  try {\n    id.toInt\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Sensor ID must be an integer\")\n  }"}
{"id":"0187bcbe-2ba7-442b-8ec9-2fefd45055f5","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait AggregationFailure\ncase object NoReadingsForAggregation extends AggregationFailure\n\ndef sensorAverageSafe(readings: List[Double]): Either[AggregationFailure, Double] =\n  readings match\n    case Nil => Left(NoReadingsForAggregation)\n    case list => Right(list.sum / list.size)"}
{"id":"c5d0bde0-21b6-4201-b365-f0c2f24c39a1","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def calculatePressureDelta(oldReading: Double, newReading: Double): Double =\n  if (oldReading < 0 || newReading < 0) throw new Exception(\"Negative pressure values are not allowed\")\n  newReading - oldReading"}
{"id":"46705f39-5417-40d2-9729-9849a1b8a4ef","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"import scala.util.Try\n\ndef maybeParseHumidity(reading: String): Try[Double] =\n  Try(reading.toDouble).filter(_ >= 0).filter(_ <= 100)"}
{"id":"b8fc3489-4450-48c5-880e-5dbe2917f22f","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def extractMotionReading(event: String): String =\n  try {\n    if (event.startsWith(\"motion:\")) event.substring(7)\n    else throw new IllegalArgumentException(\"Invalid event format\")\n  } catch {\n    case e: IllegalArgumentException =>\n      \"error:invalid\"\n  }"}
{"id":"232d2240-f01c-453a-bda1-31094e12f401","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait VoltageError\ncase object NegativeVoltageDetected extends VoltageError\n\ndef validateVoltage(v: Double): Either[VoltageError, Double] =\n  if v < 0 then Left(NegativeVoltageDetected)\n  else Right(v)"}
{"id":"61ad4a12-e90e-4875-a8cf-25e7aa79ae10","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def averageCO2Levels(values: Seq[String]): Double =\n  var total = 0.0\n  var n = 0\n  for (v <- values) {\n    try {\n      total += v.toDouble\n      n += 1\n    } catch {\n      case _: NumberFormatException => // skip invalid\n    }\n  }\n  if (n == 0) throw new Exception(\"No valid CO2 values\")\n  total / n"}
{"id":"03c2a813-74be-4e38-9890-65cc16151e3d","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class StopNotFoundError(stopName: String)\nsealed trait PublicTransitError\ncase object RouteUnavailable extends PublicTransitError\ncase class InvalidRouteData(msg: String) extends PublicTransitError\n\ndef findStopIndex(stops: Seq[String], stopName: String): Either[PublicTransitError, Int] =\n  stops.indexOf(stopName) match\n    case -1 => Left(StopNotFoundError(stopName))\n    case idx => Right(idx)"}
{"id":"49260299-7b95-4f8a-b685-df4dae5575d7","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def getRouteHeadway(headway: Int): Option[Int] =\n  if headway > 0 then Some(headway) else None\n\nval possibleHeadway = getRouteHeadway(-10)\nval headwayOrDefault = possibleHeadway.getOrElse(15)"}
{"id":"05114365-a7f7-4f2b-ae52-ec48e4acb9cd","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseTransferTime(time: String): Try[Int] =\n  Try(time.toInt)\n\nval transfer = parseTransferTime(\"7\")\nval result = transfer.getOrElse(0)"}
{"id":"44ed12cc-3a76-4056-937d-1df1e1347b33","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait JourneyError\ncase object NoAvailableRoutes extends JourneyError\ncase object OriginEqualsDestination extends JourneyError\n\ndef planDirectJourney(origin: String, destination: String, routes: Seq[(String, String)]): Either[JourneyError, (String,String)] =\n  if origin == destination then Left(OriginEqualsDestination)\n  else routes.find(_ == (origin, destination)).toRight(NoAvailableRoutes)"}
{"id":"769090c9-ad89-4791-a1bb-c70d849eb8f4","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def safeFindFirstDeparture(times: Seq[Int]): Option[Int] =\n  times.find(_ > 0)\n\nval firstDeparture = safeFindFirstDeparture(Seq(-1, 0, 12, 15))"}
{"id":"62805635-d357-452c-88ea-0ecfaf1c032a","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait ScheduleError\ncase object NoServiceAtTime extends ScheduleError\n\ndef getNextService(time: Int, schedule: Seq[Int]): Either[ScheduleError, Int] =\n  schedule.find(_ > time).toRight(NoServiceAtTime)"}
{"id":"cf11615b-2eca-443b-be40-449b5427fb5b","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def validateFareAmount(amount: Double): Either[String, Double] =\n  if amount >= 0 then Right(amount)\n  else Left(\"Negative fare amount is invalid for public transit.\")\n\nval result = validateFareAmount(-1.5)"}
{"id":"9fa8d4e5-f79a-4937-88a7-02c201625c44","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"import scala.util.Try\n\ndef convertStopId(stopId: String): Try[Int] =\n  Try(stopId.toInt)\n\nval validId = convertStopId(\"A0021\").getOrElse(-1)"}
{"id":"3542268f-91e8-4efb-ad31-7b21c13978a9","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait TransferError\ncase object ZeroTransferWindow extends TransferError\ncase class NegativeTransferTime(time: Int) extends TransferError\n\ndef calculateTransferWindow(time: Int): Either[TransferError, Int] =\n  if time < 0 then Left(NegativeTransferTime(time))\n  else if time == 0 then Left(ZeroTransferWindow)\n  else Right(time)"}
{"id":"5e42e42c-cfcb-4c5c-abce-883ed17aa3e5","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def findAvailableVehicles(vehicles: List[String]): Either[String, String] =\n  vehicles.headOption.toRight(\"No vehicles are currently available.\")\n\nval downtownBus = findAvailableVehicles(Nil)"}
{"id":"e5c26208-89eb-4190-a0df-2bbf48370db2","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class InvalidStopNameException(stopName: String) extends Exception(s\"Invalid stop name: $stopName\")\n\ndef getStopIndexOrThrow(stops: Seq[String], stopName: String): Int =\n  val idx = stops.indexOf(stopName)\n  if idx >= 0 then idx else throw new InvalidStopNameException(stopName)"}
{"id":"3ed029bc-5fe7-40f7-9ac3-95818811e71f","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class RouteParseException(message: String) extends Exception(message)\n\nobject RouteParser {\n  def parseRoute(route: String): Int =\n    try {\n      route.toInt\n    } catch {\n      case _: NumberFormatException => throw new RouteParseException(\"Failed to parse route number.\")\n    }\n}"}
{"id":"29668c60-1bfc-44bc-ab21-d096182eba2f","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def fareByZone(zone: String): Double =\n  zone match {\n    case \"A\" => 2.5\n    case \"B\" => 3.0\n    case _ => throw new IllegalArgumentException(\"Unknown fare zone: \" + zone)\n  }"}
{"id":"56f6686a-c0b3-4ac5-a7a3-17bfc4bf301b","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getFirstArrivalOrThrow(arrivals: List[Int]): Int =\n  try {\n    arrivals.head\n  } catch {\n    case _: NoSuchElementException => throw new RuntimeException(\"No arrivals available for the next stop.\")\n  }"}
{"id":"2f8654ca-2ed5-4f16-9649-fe9695c520a6","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class ScheduleLookupException(msg: String) extends Exception(msg)\n\ndef lookupDeparture(schedule: Map[String, Int], stop: String): Int =\n  if schedule.contains(stop) then\n    schedule(stop)\n  else\n    throw new ScheduleLookupException(\"Departure not found for: \" + stop)"}
{"id":"508fe132-405e-4880-9393-f473d061ba4d","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def readTransferTimeField(line: String): Int =\n  val parts = line.split(\",\")\n  try {\n    parts(2).toInt\n  } catch {\n    case _: Exception => throw new IllegalArgumentException(\"Invalid transfer time in transit line data.\")\n  }"}
{"id":"f960fd74-8e20-4df9-aa93-ab322b74e8fd","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def findDirectRouteOrThrow(routes: List[List[String]], start: String, end: String): List[String] =\n  routes.find(r => r.head == start && r.last == end).getOrElse(throw new NoSuchElementException(\"Route not found.\"))"}
{"id":"558dfd42-28f8-459f-b08c-63a93fd2eda5","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def boardingStopIndex(stops: Vector[String], stop: String): Int =\n  val idx = stops.indexOf(stop)\n  if idx == -1 then\n    throw new IllegalArgumentException(s\"Boarding stop '$stop' not found.\")\n  idx"}
{"id":"b6e7eef7-9fde-4ba2-bd49-f4c3a297caf4","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def logAndThrowIfNoService(stop: String, available: Boolean): Unit =\n  try {\n    if !available then throw new RuntimeException(\"No service at: \" + stop)\n  } catch {\n    case e: RuntimeException => println(e.getMessage); throw e\n  }"}
{"id":"304bd5d9-45db-4a95-abaf-a272714a24b3","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getFareFromMap(fares: Map[String, Double], route: String): Double =\n  try {\n    fares(route)\n  } catch {\n    case ex: NoSuchElementException => throw new Exception(s\"Fare not found for route $route\")\n  }"}
{"id":"22549163-31ed-4e67-9b27-fc237e66ff0d","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"case class StopNotFoundError(stopName: String) extends Exception(s\"Stop not found: $stopName\")\ndef getStopIdOrThrow(stopName: String, stopDirectory: Map[String, Int]): Int =\n  stopDirectory.get(stopName) match\n    case Some(id) => id\n    case None => throw new StopNotFoundError(stopName)"}
{"id":"85a567d0-7a3f-4e93-a33d-108f0e0a639f","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"case class JourneyPlannerError(msg: String) extends Exception(msg)\ndef computeRouteDistance(route: List[Int], segmentDistances: Map[(Int, Int), Int]): Int =\n  try\n    route.sliding(2).map{\n      case List(from, to) => segmentDistances((from, to))\n      case _ => 0\n    }.sum\n  catch\n    case _: NoSuchElementException => throw new JourneyPlannerError(\"Missing segment distance\")"}
{"id":"e7970342-92ce-440c-906c-49c9c2520fc4","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class InvalidTransferTime(msg: String) extends Exception(msg)\ndef calculateTransferTime(arrival: Int, departure: Int): Int =\n  if departure < arrival then throw new InvalidTransferTime(\"Departure before arrival\")\n  else departure - arrival"}
{"id":"2d54174e-e21a-46ec-84da-f8a09516b3c9","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getScheduleOrThrow(lineId: Int, schedules: Map[Int, Seq[String]]): Seq[String] = {\n  try {\n    schedules(lineId)\n  } catch {\n    case _: NoSuchElementException => throw new java.util.NoSuchElementException(s\"No schedule for $lineId\")\n  }\n}"}
{"id":"c030a752-a496-4b10-b449-9d7fc0105f95","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"case class RoutePlanningException(msg: String) extends Exception(msg)\ndef getRequiredTicketType(zone: Int): String =\n  zone match\n    case 1 => \"single\"\n    case 2 => \"multi-zone\"\n    case _ => throw new RoutePlanningException(\"Unknown zone\")"}
{"id":"8071a1cf-5cee-4522-8f6b-b7961a29b06a","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class FareCalculationException(message: String) extends Exception(message)\ndef calculateFareOrThrow(origin: String, destination: String, fares: Map[(String, String), Double]): Double =\n  fares.get((origin, destination)) match {\n    case Some(fare) => fare\n    case None => throw new FareCalculationException(s\"Fare not found for $origin -> $destination\")\n  }"}
{"id":"1e614848-b685-46c6-8bf2-9ce5b3ff3225","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def fetchLiveDepartureEstimate(stopId: Int): Int = {\n  try {\n    if (stopId < 0) throw new IllegalArgumentException(\"Invalid stop id\")\n    5\n  } catch {\n    case ex: IllegalArgumentException => -1\n  }\n}"}
{"id":"bba58429-0c11-4e64-84a8-1d3cfbaba84f","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"case class InvalidRouteError(msg: String) extends Exception(msg)\ndef validateRoute(route: List[Int]): Boolean =\n  if route.isEmpty then throw new InvalidRouteError(\"Route cannot be empty\")\n  else true"}
{"id":"820a6e69-e082-4945-ae61-4401ece0b885","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def findNextTrainOrThrow(trains: List[String]): String = {\n  try {\n    trains.head\n  } catch {\n    case _: NoSuchElementException => throw new RuntimeException(\"No trains scheduled\")\n  }\n}"}
{"id":"c5738cb5-7501-45a0-b1d4-0a9c49f71398","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def safeZoneLookup(zoneId: Int, zones: Seq[Int]): Boolean =\n  try\n    if zones.contains(zoneId) then true\n    else throw new Exception(\"Zone not serviced\")\n  catch\n    case _: Exception => false"}
{"id":"ad2f46bb-0982-41c5-a952-8ffc8d47ca73","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait JourneyError\ncase object NoSuchStop extends JourneyError\ncase object NoConnection extends JourneyError\ncase class TimetableConflict(details: String) extends JourneyError\ndef findConnection(source: String, target: String, graph: Map[String, List[String]]): Either[JourneyError, List[String]] =\n  if !graph.contains(source) then Left(NoSuchStop)\n  else if source == target then Right(List(source))\n  else graph(source).find(_ == target) match\n    case Some(_) => Right(List(source, target))\n    case None => Left(NoConnection)"}
{"id":"f5b44cad-ca6a-4dba-9242-ea1b672fe326","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def optionalNextBusTime(stopId: Int, arrivals: Map[Int, List[String]]): Option[String] =\n  arrivals.get(stopId).flatMap(_.headOption)"}
{"id":"068cae23-7f81-4a8b-9e33-db67b06c93f7","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"import scala.util.Try\ndef parseScheduledTime(timeString: String): Try[Int] =\n  Try(timeString.toInt)"}
{"id":"09e140fd-61d5-4229-9e34-bad5d9c19da8","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait FareError\ndef fetchFareOptionally(zonePair: (Int, Int), fares: Map[(Int, Int), Double]): Option[Double] =\n  fares.get(zonePair)"}
{"id":"ea63f2cf-a970-4fb7-a86e-012d1d830eca","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait PlannerError\ncase object DepartureBeforeArrival extends PlannerError\ndef calculateTransferEither(arrival: Int, departure: Int): Either[PlannerError, Int] =\n  if departure < arrival then Left(DepartureBeforeArrival)\n  else Right(departure - arrival)"}
{"id":"2e02ee04-f26d-423c-8b4c-e63f20708b45","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def tryRoutePlanning(route: List[Int], network: Set[Int]): Option[List[Int]] =\n  if route.forall(network.contains) then Some(route)\n  else None"}
{"id":"e1f84f2d-8907-44fe-867b-5a8097f3dd94","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"import scala.util.Try\ndef safeSegmentDistance(from: Int, to: Int, segmentDistances: Map[(Int, Int), Int]): Try[Int] =\n  Try(segmentDistances((from, to)))"}
{"id":"202f0197-3c56-41eb-bccd-20e096eead53","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class ScheduleNotFound(stopId: Int)\ndef getScheduleEither(stopId: Int, schedules: Map[Int, Seq[String]]): Either[ScheduleNotFound, Seq[String]] =\n  schedules.get(stopId).toRight(ScheduleNotFound(stopId))"}
{"id":"6f507ec0-9f96-4417-8765-673fb59c3c4d","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def nextAvailableTrainId(arrivalTimes: List[Int]): Either[String, Int] =\n  arrivalTimes.sorted.headOption.toRight(\"No upcoming trains scheduled\")"}
{"id":"52336d53-56da-46cd-a267-ceac6c0bf419","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait TicketError\ncase object UnknownZone extends TicketError\ndef getTicketTypeEither(zone: Int): Either[TicketError, String] =\n  zone match\n    case 1 => Right(\"single\")\n    case 2 => Right(\"multi-zone\")\n    case _ => Left(UnknownZone)"}
{"id":"762314c3-4562-4aa4-900f-a8d3fc4084a4","timestamp":1746100625998,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\ncase object TerminalOffline extends PaymentError\n\ndef authorizePayment(amount: Double, balance: Double, terminalStatus: Boolean): Either[PaymentError, String] =\n  if !terminalStatus then Left(TerminalOffline)\n  else if amount > balance then Left(InsufficientFunds)\n  else Right(\"Payment authorized\")"}
{"id":"90bdd172-c401-4911-ae46-74462f482243","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def lookupProduct(sku: String): Option[String] =\n  val inventory = Map(\"12345\" -> \"Laptop\", \"67890\" -> \"Headphones\")\n  inventory.get(sku)"}
{"id":"277f0c9e-54f9-4cf3-b946-6c7d33221996","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseReceiptAmount(input: String): Try[Double] =\n  Try(input.trim.toDouble)"}
{"id":"8952e4bc-a864-477a-bf4f-384c628bb398","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait DiscountCalculationError\ncase object InvalidCoupon extends DiscountCalculationError\ncase object ProductNotEligible extends DiscountCalculationError\n\ndef applyDiscount(productId: String, couponCode: String): Either[DiscountCalculationError, Double] =\n  if couponCode == \"\" then Left(InvalidCoupon)\n  else if productId == \"BLACKLISTED\" then Left(ProductNotEligible)\n  else Right(0.15)"}
{"id":"72d42e60-b99e-43ba-82ab-17782aa0d747","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class TaxCalculationError(msg: String)\n\ndef computeTax(amount: Double, region: String): Either[TaxCalculationError, Double] =\n  if amount < 0 then Left(TaxCalculationError(\"Amount must be positive\"))\n  else if region == \"EU\" then Right(amount * 0.2)\n  else Left(TaxCalculationError(\"Region not supported\"))"}
{"id":"2a0e7ad2-9bf0-49f1-a215-5c96e5ccf52c","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"import scala.util.Try\n\ndef updateLoyaltyPoints(customerId: String, earned: Int): Try[Int] =\n  Try {\n    if earned < 0 then throw new Exception(\"Points cannot be negative\")\n    else 100 + earned\n  }"}
{"id":"7680624e-604f-4750-9066-f6c9afe418a8","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait ReceiptGenerationError\ncase object PrinterJam extends ReceiptGenerationError\ncase object FormatError extends ReceiptGenerationError\n\ndef printReceipt(content: String, printerReady: Boolean): Either[ReceiptGenerationError, String] =\n  if !printerReady then Left(PrinterJam)\n  else if content.length < 10 then Left(FormatError)\n  else Right(\"Receipt printed successfully\")"}
{"id":"e824398c-64af-4e18-bbf6-f71904b31e57","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def scanBarcode(barcode: String): Option[String] =\n  val validBarcodes = Set(\"ABC123\", \"XYZ789\")\n  if validBarcodes.contains(barcode) then Some(\"Item scanned\")\n  else None"}
{"id":"284559b8-dd92-4625-beaf-867eabdadacc","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"import scala.util.Try\n\ndef fetchStoreConfiguration(configKey: String): Try[String] =\n  val configs = Map(\"currency\" -> \"USD\", \"timezone\" -> \"UTC\")\n  Try(configs(configKey))"}
{"id":"fdb8d2f2-fa7a-4deb-acac-10345a37af78","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait RefundError\ncase object ReceiptNotFound extends RefundError\ncase object RefundLimitExceeded extends RefundError\n\ndef processRefund(receiptId: String, amount: Double): Either[RefundError, String] =\n  if receiptId.isEmpty then Left(ReceiptNotFound)\n  else if amount > 200 then Left(RefundLimitExceeded)\n  else Right(\"Refund processed\")"}
{"id":"f7c3eff6-fab2-482b-95a0-8bdd0c0450cb","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class InventoryException(message: String) extends Exception(message)\n\ndef adjustInventory(sku: String, quantity: Int): Int =\n  if quantity < 0 then throw new InventoryException(\"Negative quantity not allowed\")\n  10 + quantity"}
{"id":"32ecb005-8b9c-499c-a025-0d4f22982eb6","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def connectToTerminal(port: String): String =\n  if port == \"\" then throw new IllegalArgumentException(\"Port must not be empty\")\n  \"Terminal connected on \" + port"}
{"id":"c1ae81c0-c469-4875-aa0b-166303b6c376","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def getPromotionPrice(itemId: String): Double = {\n  if itemId != \"PROMO123\" then throw new Exception(\"No promotion for item\")\n  8.99\n}"}
{"id":"867612bb-5c21-4560-81c5-62dfe1481912","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def registerCustomer(email: String): String = {\n  if !email.contains(\"@\") then throw new IllegalArgumentException(\"Invalid email address\")\n  \"Customer registered: \" + email\n}"}
{"id":"b30054a1-b9c3-4e3a-b852-1ac4c74b085d","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def processSale(paymentAmount: Double): String =\n  try {\n    if paymentAmount <= 0 then throw new Exception(\"Invalid amount\")\n    \"Sale processed\"\n  } catch case ex: Exception => s\"Failed: ${ex.getMessage}\""}
{"id":"41be846c-6b3e-48a2-8562-e124b0887cf5","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def fetchProductDescription(sku: String): String =\n  try {\n    if sku.isEmpty then throw new Exception(\"SKU not provided\")\n    \"Product description\"\n  } catch case ex: Exception => s\"Error: ${ex.getMessage}\""}
{"id":"49774bd6-13c7-49f6-a336-a486a1c9cc8c","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def redeemGiftCard(code: String, amount: Double): Double =\n  if code != \"VALID123\" then throw new IllegalArgumentException(\"Invalid gift card code\")\n  else if amount <= 0 then throw new Exception(\"Gift card amount must be positive\")\n  100 - amount"}
{"id":"ae60b0aa-9a07-4f16-9049-9616afbc0ed8","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def activatePOSDevice(deviceId: String): String = {\n  if deviceId.startsWith(\"off\") then throw new Exception(\"Device is offline\")\n  \"POS device activated\"\n}"}
{"id":"39d432e7-206b-4b25-badf-ee0c04325501","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def syncTransaction(log: String): String = {\n  try {\n    if log.length < 5 then throw new Exception(\"Transaction log too short\")\n    \"Transaction synchronized\"\n  } catch case ex: Exception => ex.getMessage\n}"}
{"id":"1d9bf23b-808f-4825-82d1-171ed30e71fa","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class LoyaltyException(msg: String) extends RuntimeException(msg)\n\ndef applyLoyaltyReward(cardNumber: String, purchase: Double): String =\n  if purchase < 0 then throw new LoyaltyException(\"Negative purchase value\")\n  s\"Reward applied to $cardNumber\""}
{"id":"e46488a1-5fc2-46c0-b7ff-07943ed102ff","timestamp":1746100647906,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object ScanBarcodeApp:\n  def scanBarcode(barcode: String): Either[BarcodeScanError, Product] =\n    if barcode.matches(\"[0-9]{12}\") then\n      Right(Product(barcode, \"Cereal Box\", 5.99))\n    else\n      Left(BarcodeScanError(barcode))\n  case class Product(code: String, name: String, price: Double)\n  case class BarcodeScanError(invalidCode: String)"}
{"id":"fd537b8a-f3a7-44ce-81db-af0d2d59f75d","timestamp":1746100647906,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class InvalidBarcodeException(code: String) extends Exception(s\"Invalid barcode: $code\")\n\nobject BarcodeScanner {\n  def scanCode(barcode: String): Product = {\n    if (barcode.length == 12) Product(barcode, \"Bottle Water\", 1.50)\n    else throw new InvalidBarcodeException(barcode)\n  }\n  case class Product(code: String, name: String, price: Double)\n}"}
{"id":"f2176c93-281d-4e7c-8343-8ef5e23db31a","timestamp":1746100647906,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\ncase object InvalidCard extends PaymentError\ncase object PaymentDeclined extends PaymentError\n\nobject PaymentProcessor:\n  def completePayment(amount: Double, validCard: Boolean, sufficientFunds: Boolean): Either[PaymentError, String] =\n    if !validCard then Left(InvalidCard)\n    else if !sufficientFunds then Left(InsufficientFunds)\n    else Right(\"Payment Approved\")"}
{"id":"0c1fe061-c0c5-45f2-9eb9-7271c8e02d38","timestamp":1746100647906,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class PaymentException(reason: String) extends Exception(reason)\n\nobject POSPayment {\n  def process(amount: Double, isCardValid: Boolean): String = {\n    if (!isCardValid) throw new PaymentException(\"Invalid Card\")\n    \"Payment Success\"\n  }\n}"}
{"id":"c31bc3be-d2b4-4863-bb94-84818c413bfa","timestamp":1746100647906,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object LoyaltyProgram:\n  def fetchLoyaltyPoints(customerId: Long): Option[Int] =\n    if customerId > 0 then Some(250)\n    else None"}
{"id":"0c924e3a-ca2d-45a0-be6c-c345e68cb3d6","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class LoyaltyNotFoundException(id: Long) extends Exception(s\"Loyalty not found for $id\")\n\nobject LoyaltyLookup {\n  def getPoints(custId: Long): Int = {\n    if (custId > 100) 300\n    else throw new LoyaltyNotFoundException(custId)\n  }\n}"}
{"id":"0d2f56c5-0d55-4516-8613-783e6b11680d","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"import scala.util.Try\nobject SaleDiscountCalculator:\n  def applyDiscount(price: Double, pct: Double): Try[Double] =\n    Try {\n      if pct < 0 || pct > 100 then throw new Exception(\"Invalid percentage\")\n      price - (price * pct / 100.0)\n    }"}
{"id":"6282887e-9eaf-486e-ae7c-57f0ad9ff7c9","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object SaleDiscountUnsafe {\n  def applyDiscount(price: Double, percent: Double): Double = {\n    if (percent < 0) throw new IllegalArgumentException(\"Negative discount\")\n    price - price * percent / 100d\n  }\n}"}
{"id":"ae579ac0-4f28-4263-bd25-3acabb00d01e","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait InventoryError\ncase object ItemOutOfStock extends InventoryError\ncase class ItemNotFound(sku: String) extends InventoryError\n\nobject InventoryService:\n  def checkStock(sku: String, inventory: Map[String, Int]): Either[InventoryError, Int] =\n    inventory.get(sku) match\n      case Some(count) if count > 0 => Right(count)\n      case Some(_) => Left(ItemOutOfStock)\n      case None => Left(ItemNotFound(sku))"}
{"id":"13d63111-c4f8-4ca8-82b5-c6a4e0f90cb7","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class OutOfStockException(item: String) extends Exception(s\"$item not in stock\")\n\nobject InventoryUnSafe {\n  def pick(sku: String, items: Map[String, Int]): Int = {\n    if (items.contains(sku) && items(sku) > 0) items(sku)\n    else throw new OutOfStockException(sku)\n  }\n}"}
{"id":"9f8601e3-b2ef-41b0-8e34-0a418bc5ca64","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object TransactionParser:\n  def parseTransaction(json: String): Option[PointOfSaleTransaction] =\n    if json.contains(\"amount\") then Some(PointOfSaleTransaction(120, \"Books\"))\n    else None\n  case class PointOfSaleTransaction(amount: Int, itemType: String)"}
{"id":"63749a85-73ca-4f0c-b28b-dde5af2bc77e","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class TransactionParseException extends Exception(\"Malformed transaction input\")\n\nobject TransactionUnsafe {\n  def parseTransactionJson(json: String): PointOfSaleTransaction = {\n    if (json.contains(\"itemId\")) PointOfSaleTransaction(35.0, \"Juice\")\n    else throw new TransactionParseException\n  }\n  case class PointOfSaleTransaction(amount: Double, description: String)\n}"}
{"id":"de9c3f0b-ce8c-4471-9752-c9860404cae3","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait ReceiptError\ncase object InvalidReceiptNumber extends ReceiptError\ncase object ReceiptNotFound extends ReceiptError\nobject ReceiptService:\n  def fetchReceipt(receiptNumber: String): Either[ReceiptError, String] =\n    if receiptNumber.isEmpty then Left(InvalidReceiptNumber)\n    else if receiptNumber == \"000001\" then Right(\"Receipt details for 000001\")\n    else Left(ReceiptNotFound)"}
{"id":"2f84ef21-8cd3-4c2d-9fcc-681dbb73d9ea","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class ReceiptException(msg: String) extends Exception(msg)\nobject ReceiptFetcher {\n  def getReceipt(number: String): String = {\n    if (number == \"000777\") \"Receipt details\"\n    else throw new ReceiptException(\"Invalid or unknown receipt\")\n  }\n}"}
{"id":"7fa0f9f5-e0fe-4c24-a657-6c48d8ccc2f6","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"import scala.util.Try\nobject CardRefundProcessor:\n  def refund(amount: Double, cardPresent: Boolean): Try[String] =\n    Try {\n      if !cardPresent then throw new Exception(\"No card present\")\n      s\"Refunded $$amount to card.\"\n    }"}
{"id":"3f289722-8e9a-4007-a247-61ab2d6c6fcb","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class RefundException(msg: String) extends Exception(msg)\nobject RefundUnsafe {\n  def refundToCard(amount: Double, present: Boolean): String = {\n    if (!present) throw new RefundException(\"Card required\")\n    s\"Refund of $$amount completed.\"\n  }\n}"}
{"id":"cb895f43-66f5-4206-b58d-a300faf73b50","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object ProductLookup:\n  def findProductName(productId: Int): Option[String] =\n    if productId == 101 then Some(\"Orange Juice\")\n    else None"}
{"id":"3531a55e-a5d5-4729-b282-1a096844c452","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object UnsafeProductLookup {\n  def getProduct(productId: Int): String = {\n    if (productId == 784) \"Crisps\"\n    else throw new NoSuchElementException(\"Product not found\")\n  }\n}"}
{"id":"dec4c4d3-5673-4f83-92bb-ce3319b2dcf5","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait StaffAuthenticationError\ncase object StaffNotFound extends StaffAuthenticationError\ncase object IncorrectPIN extends StaffAuthenticationError\nobject StaffAuthenticator:\n  def authenticate(staffId: Int, pin: String): Either[StaffAuthenticationError, String] =\n    if staffId <= 0 then Left(StaffNotFound)\n    else if pin != \"1234\" then Left(IncorrectPIN)\n    else Right(\"Authentication successful\")"}
{"id":"8e31fdb2-88ca-401b-8400-a65a79ad98c5","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class AuthenticationException(msg: String) extends Exception(msg)\nobject StaffLoginUnSafe {\n  def login(staffCode: Int, passcode: String): String = {\n    if (staffCode < 1) throw new AuthenticationException(\"Invalid staff code\")\n    if (passcode != \"9999\") throw new AuthenticationException(\"PIN incorrect\")\n    \"Authenticated\"\n  }\n}"}
{"id":"362db844-e8ed-4c26-a225-45c62d30ff92","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"object MortgageInputValidator:\n  def parseInterestRate(input: String): Either[InputValidationError, Double] =\n    input.toDoubleOption match\n      case Some(rate) if rate > 0.0 && rate < 100.0 => Right(rate)\n      case _ => Left(InvalidInterestRate)\n\nsealed trait InputValidationError\ncase object InvalidInterestRate extends InputValidationError"}
{"id":"330cc2a4-1f85-4c93-ad2f-7f38f82f73d6","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def calculateMonthlyPayment(loanAmount: Double, annualRate: Double, termInYears: Int): Double =\n  if loanAmount <= 0 || annualRate <= 0 || termInYears <= 0 then\n    throw new IllegalArgumentException(\"Invalid mortgage input values.\")\n  else\n    val monthlyRate = annualRate / 12.0 / 100.0\n    val totalPayments = termInYears * 12\n    loanAmount * monthlyRate / (1 - Math.pow(1 + monthlyRate, -totalPayments.toDouble))"}
{"id":"cbe63106-a899-4259-94fb-966c6c88dae5","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageCalculationError(message: String)\n\ndef getLoanTerm(yearsInput: String): Either[MortgageCalculationError, Int] =\n  yearsInput.toIntOption match\n    case Some(term) if term > 0 => Right(term)\n    case _ => Left(MortgageCalculationError(\"Invalid loan term provided.\"))"}
{"id":"c31c5a57-ec37-4b64-a462-b5f2781ed038","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageValidationException(msg: String) extends Exception(msg)\n\ndef validatePrincipal(principal: Double): Unit =\n  if principal <= 0 then\n    throw new MortgageValidationException(\"Principal amount must be greater than zero.\")"}
{"id":"d178f36e-6346-4c07-bda1-66ecfcc23bb6","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def parsePrincipalAmount(input: String): Option[Double] =\n  input.toDoubleOption.filter(_ > 0)"}
{"id":"b12eff76-6845-43f2-97b8-c216de741be3","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def computeAmortizationSchedule(principal: Double, rate: Double, years: Int): Either[String, List[Double]] =\n  if principal <= 0 then Left(\"Principal must be positive.\")\n  else if rate <= 0 then Left(\"Interest rate must be positive.\")\n  else if years <= 0 then Left(\"Term must be positive.\")\n  else Right(List.fill(years * 12)(principal / (years * 12)))"}
{"id":"b8f253d1-8d3b-4f8b-b73f-1344c128ccf3","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def showMortgageSummary(amount: Double, rate: Double): Unit =\n  try\n    if amount <= 0 || rate <= 0 then\n      throw new Exception(\"Invalid summary parameters.\")\n    println(s\"Mortgage for $$amount at $$rate% annual rate.\")\n  catch\n    case _: Exception => println(\"Could not display mortgage summary.\")"}
{"id":"b4e1191b-f79c-46f0-bdf2-ce7813d8b283","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait ApplicationError\ncase class MissingFieldError(fieldName: String) extends ApplicationError\ncase object InvalidFormatError extends ApplicationError\n\ndef validateInputField(value: String, fieldName: String): Either[ApplicationError, String] =\n  if value.trim.isEmpty then Left(MissingFieldError(fieldName))\n  else if !value.forall(_.isDigit) then Left(InvalidFormatError)\n  else Right(value)"}
{"id":"4c6ed793-2293-45a6-bba3-e98a5e3cb000","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def fetchInterestRateFromExternalSource(): Double =\n  try\n    // Simulated remote call\n    throw new RuntimeException(\"Failed to retrieve rates.\")\n    4.25\n  catch\n    case ex: Exception =>\n      println(s\"Error: $${ex.getMessage}\")\n      5.0"}
{"id":"e25282c5-809e-4827-b989-7458658dc0ce","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def safeDivide(a: Double, b: Double): Option[Double] =\n  if b == 0 then None else Some(a / b)"}
{"id":"a4f24632-22ae-441f-a9e0-0cbc1e844628","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def computeMortgageInsurance(homeValue: Double): Double =\n  if homeValue <= 0 then\n    throw new IllegalArgumentException(\"Home value must be positive.\")\n  else\n    homeValue * 0.01"}
{"id":"dd07d188-f47f-4138-b829-df9026723b3a","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryParseDoubleField(field: String): Try[Double] =\n  Try(field.toDouble).filter(_ > 0)"}
{"id":"40998d3e-5785-4aad-9f63-36417215f4bc","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def processUserInput(input: String): Double =\n  try\n    input.toDouble\n  catch\n    case ex: NumberFormatException =>\n      throw new RuntimeException(\"Invalid input provided.\")"}
{"id":"b79780f9-2a75-4f5b-a818-bd79d09405e0","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait MortgageInputError\ncase object InvalidDownPayment extends MortgageInputError\n\nobject DownPaymentProcessor:\n  def validateDownPayment(payment: Double, principal: Double): Either[MortgageInputError, Double] =\n    if payment < 0 || payment > principal then Left(InvalidDownPayment)\n    else Right(payment)"}
{"id":"5e9e0c2c-7a62-4c15-b84d-7acc4eebcd04","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def showMonthlyPaymentSummary(payment: Double): Unit =\n  try\n    if payment < 0 then throw new Exception(\"Negative payment is not valid.\")\n    println(s\"Your monthly payment is $$payment\")\n  catch\n    case _: Exception => println(\"Unable to calculate monthly payment.\")"}
{"id":"a25e836d-7a5c-4aed-92e8-e46d046e52a9","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def parseMortgageTerm(term: String): Option[Int] =\n  term.toIntOption.filter(_ > 0)"}
{"id":"b57916bd-f20e-453b-bd89-3845c4a3875f","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def readPrincipalAmount(input: String): Double =\n  try\n    val value = input.toDouble\n    if value <= 0 then throw new Exception(\"Principal must be positive.\")\n    value\n  catch\n    case ex: Exception => throw new NumberFormatException(\"Failed to read principal.\")"}
{"id":"7c31b119-c743-47a5-af3c-2c58f15f0991","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeMonthlyPayment(principal: Double, annualRate: Double, termMonths: Int): Try[Double] =\n  Try {\n    val monthlyRate = annualRate / 12.0 / 100.0\n    val payment = principal * monthlyRate / (1 - math.pow(1 + monthlyRate, -termMonths))\n    if payment.isNaN || payment.isInfinity then throw new Exception(\"Computation failed.\")\n    payment\n  }"}
{"id":"e653d3f0-3c8e-47a6-a5db-cb5243c70c2a","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def ensurePositiveRate(rate: Double): Unit =\n  if rate <= 0 then\n    throw new IllegalArgumentException(\"Annual rate must be positive.\")"}
{"id":"0e577f6e-e609-455d-a3ad-14caef6f9f96","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait MortgageEligibilityError\ncase object ApplicantIncomeTooLow extends MortgageEligibilityError\n\nobject EligibilityChecker:\n  def checkApplicantIncome(income: Double, minIncome: Double): Either[MortgageEligibilityError, Unit] =\n    if income < minIncome then Left(ApplicantIncomeTooLow)\n    else Right(())"}
{"id":"46309bc7-34d5-4e75-a9ee-89b7079903b3","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait CalculationError\ncase object NegativeInterestRate extends CalculationError\ncase object InvalidLoanAmount extends CalculationError\n\ndef validateLoanAmount(amount: Double): Either[CalculationError, Double] =\n  if (amount > 0) Right(amount) else Left(InvalidLoanAmount)\n\ndef validateInterestRate(rate: Double): Either[CalculationError, Double] =\n  if (rate >= 0) Right(rate) else Left(NegativeInterestRate)\n"}
{"id":"c0898fb9-2312-4128-aaaa-bbfd9634233e","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageCalculator {\n  def calculateMonthlyPayment(principal: Double, rate: Double, years: Int): Double = {\n    if (principal <= 0) throw new IllegalArgumentException(\"Principal must be positive\")\n    if (rate < 0) throw new IllegalArgumentException(\"Interest rate cannot be negative\")\n    val monthlyRate = rate / 12 / 100\n    val numberOfPayments = years * 12\n    principal * monthlyRate / (1 - Math.pow(1 + monthlyRate, -numberOfPayments))\n  }\n}"}
{"id":"687c318f-a545-45da-83fc-1a4c3b8931e8","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseInterestRate(input: String): Try[Double] =\n  Try(input.toDouble).filter(_ >= 0)\n"}
{"id":"7bad52f3-2269-461e-a432-73ac8cac7063","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"object MortgageLoanValidator {\n  def requireTermInYears(term: Int): Unit = {\n    if (term <= 0) throw new RuntimeException(\"Loan term must be > 0 years\")\n  }\n}"}
{"id":"eb803829-b8c0-426c-9912-16e326fd6053","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait MortgageValidationError\ncase object ZeroDownPayment extends MortgageValidationError\ncase object ExcessiveLoanTerm extends MortgageValidationError\n\ndef validateDownPayment(amount: Double): Either[MortgageValidationError, Double] =\n  if (amount > 0) Right(amount) else Left(ZeroDownPayment)\n\ndef validateLoanTerm(years: Int): Either[MortgageValidationError, Int] =\n  if (years <= 40) Right(years) else Left(ExcessiveLoanTerm)\n"}
{"id":"cf0fa369-84da-479c-95c8-9578f102fd20","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def extractLoanTerm(input: String): Int = {\n  try {\n    val value = input.toInt\n    if (value <= 0) throw new Exception(\"Term must be positive\")\n    value\n  } catch {\n    case e: Exception => throw new NumberFormatException(\"Invalid loan term: \" + input)\n  }\n}"}
{"id":"997bfc3a-22e9-4701-ba6c-4a7bd4ee8b27","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeMonthlyPayment(loan: Double, rate: Double, years: Int): Try[Double] = Try {\n  val monthlyInterestRate = rate / 12 / 100\n  val n = years * 12\n  val denominator = 1 - Math.pow(1 + monthlyInterestRate, -n)\n  if (denominator == 0) throw new ArithmeticException(\"Zero denominator\")\n  loan * monthlyInterestRate / denominator\n}"}
{"id":"39417d2b-fbc1-476d-b6da-7bd8a729cfee","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def logAndReturnPayment(principal: Double, rate: Double, term: Int): Double = {\n  try {\n    val monthlyRate = rate / 12 / 100\n    val payments = term * 12\n    principal * monthlyRate / (1 - Math.pow(1 + monthlyRate, -payments))\n  } catch {\n    case ex: Throwable =>\n      println(\"Error calculating payment: \" + ex.getMessage)\n      throw ex\n  }\n}"}
{"id":"2252101b-9dc7-40aa-baa0-32b77ba8db4d","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait MortgageApplicationError\ncase object InvalidApplicantIncome extends MortgageApplicationError\ncase object InsufficientCreditScore extends MortgageApplicationError\n\ndef evaluateApplication(income: Double, creditScore: Int): Either[MortgageApplicationError, String] =\n  if (income < 10000) Left(InvalidApplicantIncome)\n  else if (creditScore < 600) Left(InsufficientCreditScore)\n  else Right(\"Application Approved\")\n"}
{"id":"9e92b677-d396-41bd-89ef-ba921159a62c","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"object AmortizationTable {\n  def createSchedule(loan: Double, years: Int): List[(Int, Double)] = {\n    if (loan <= 0) throw new IllegalArgumentException(\"Loan amount required\")\n    if (years <= 0) throw new IllegalArgumentException(\"Years required\")\n    (1 to (years * 12)).map(i => (i, loan / (years * 12))).toList\n  }\n}"}
{"id":"0db55047-96bd-4a25-b5e5-06f7be416a7b","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def safeParseLoanAmount(input: String): Option[Double] =\n  input.toDoubleOption.filter(_ > 0)\n"}
{"id":"1292d998-b71c-45d9-9ead-31c9ddb417dd","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def loadRateHistory(source: String): List[Double] = {\n  if (source == \"\") throw new RuntimeException(\"Source path missing\")\n  // pretend this loads from a file system or API\n  List(5.5, 6.0, 4.9)\n}"}
{"id":"5c877a64-12e2-48a7-ad93-c74f386e6719","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"enum PaymentValidationError {\n  case NegativePrincipal, InvalidMonths\n}\ndef checkPaymentArguments(principal: Double, months: Int): Either[PaymentValidationError, (Double, Int)] =\n  if (principal < 0) Left(PaymentValidationError.NegativePrincipal)\n  else if (months < 1) Left(PaymentValidationError.InvalidMonths)\n  else Right((principal, months))\n"}
{"id":"a9f179b3-b1ca-4fa0-9464-b287348c4363","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def fetchAmortizationRecord(id: String): String = {\n  try {\n    if (id.length < 5) throw new NoSuchElementException(\"Record id too short\")\n    \"Record found\"\n  } catch {\n    case _: NoSuchElementException => \"Record missing\"\n  }\n}"}
{"id":"7843dc3a-b9dc-4727-9897-77a761f44dd7","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef computeLoanToValue(homeValue: Double, loanAmount: Double): Try[Double] = Try {\n  if (homeValue <= 0) throw new IllegalArgumentException(\"Home value must be positive\")\n  loanAmount / homeValue\n}"}
{"id":"9ac372ec-1ee7-4d76-b5ae-3824e0104e4e","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def parseDownPayment(input: String): Double = {\n  try {\n    val value = input.toDouble\n    if (value < 0) throw new IllegalArgumentException(\"Cannot be negative down payment\")\n    value\n  } catch {\n    case _: Throwable => throw new IllegalStateException(\"Failed to parse down payment\")\n  }\n}"}
{"id":"e0f23d83-240a-4196-806d-a1d7953bcc9e","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait AffordabilityError\ncase object IncomeBelowThreshold extends AffordabilityError\ncase object HighDebtToIncomeRatio extends AffordabilityError\n\ndef checkAffordability(income: Double, dti: Double): Either[AffordabilityError, Boolean] = {\n  if (income < 20000) Left(IncomeBelowThreshold)\n  else if (dti > 0.43) Left(HighDebtToIncomeRatio)\n  else Right(true)\n}\n"}
{"id":"f54fad0b-d513-4b0c-a3a8-c535ae182678","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def calculateInsurancePremium(loan: Double, factor: Double): Double = {\n  if (factor <= 0) throw new ArithmeticException(\"Factor must be positive\")\n  loan * factor\n}"}
{"id":"621899af-3786-4a3a-b3a7-e3f385abcb75","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePropertyTax(input: String): Try[Double] = Try(input.toDouble).filter(_ >= 0)\n"}
{"id":"a40e8a7e-3c1e-4bb3-a36e-4cbc01841c68","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def getInterestRateForState(state: String): Double = {\n  try {\n    if (state.isEmpty) throw new RuntimeException(\"State code is empty\")\n    5.3 // stubbed fixed rate\n  } catch {\n    case _: RuntimeException => -1.0\n  }\n}"}
{"id":"40f17ec5-1cd3-4990-ad07-261da391ccbe","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class SensorMalfunctionError(deviceId: String, description: String)\ncase class TelemetryReading(deviceId: String, temperature: Double, vibration: Double)\ndef validateReading(reading: TelemetryReading): Either[SensorMalfunctionError, TelemetryReading] =\n  if reading.temperature < -50 || reading.temperature > 150 then\n    Left(SensorMalfunctionError(reading.deviceId, \"Temperature out of range\"))\n  else if reading.vibration > 100 then\n    Left(SensorMalfunctionError(reading.deviceId, \"Excessive vibration\"))\n  else\n    Right(reading)"}
{"id":"c6b7434f-ac62-4a07-b10b-46a4372b63db","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class InvalidPressureDataException(message: String) extends Exception(message)\ncase class PressureReading(deviceId: String, pressure: Int)\ndef parsePressure(reading: PressureReading): Int =\n  if reading.pressure < 0 then throw new InvalidPressureDataException(\"Negative pressure from \" + reading.deviceId)\n  else reading.pressure"}
{"id":"b938ba0c-0f89-4b2c-8d00-a1ace73de95b","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"import scala.util.Try\ncase class MachineState(code: Int)\ndef safeParseMachineState(stateStr: String): Try[MachineState] =\n  Try { MachineState(stateStr.toInt) }"}
{"id":"f930686a-c161-4d0d-b110-98e24ea79302","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"case class VibrationAlert(deviceId: String, level: Double)\nclass ExcessiveVibrationException(deviceId: String) extends Exception(deviceId)\ndef checkVibrationLevel(alert: VibrationAlert): String =\n  try\n    if alert.level > 100.0 then throw new ExcessiveVibrationException(alert.deviceId)\n    else \"Vibration normal\"\n  catch\n    case e: ExcessiveVibrationException => \"Vibration alert: \" + alert.deviceId"}
{"id":"44ec6668-72ce-491b-80d6-d964c0ad9958","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"sealed trait TelemetryError\ncase object MissingTelemetryFile extends TelemetryError\ncase object CorruptedTelemetryPayload extends TelemetryError\ndef parseTelemetryPayload(payload: String): Either[TelemetryError, Int] =\n  if payload == \"\" then Left(MissingTelemetryFile)\n  else if payload.forall(_.isDigit) then Right(payload.length)\n  else Left(CorruptedTelemetryPayload)"}
{"id":"2dbe05ea-8908-4390-913f-df1fe3842fa2","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"case class SystemHeartbeat(deviceId: String, lastReceived: Long)\nclass StaleHeartbeatException(deviceId: String) extends Exception(deviceId)\ndef assertHeartbeat(currentTime: Long, heartbeat: SystemHeartbeat): Unit =\n  if currentTime - heartbeat.lastReceived > 60000 then\n    throw new StaleHeartbeatException(heartbeat.deviceId)"}
{"id":"c64a78ac-bf8d-49a8-a9ff-cb2f3c2bb1e8","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class ErrorWithDetails(code: Int, message: String)\ndef safeDivide(a: Int, b: Int): Either[ErrorWithDetails, Int] =\n  if b == 0 then Left(ErrorWithDetails(1001, \"Division by zero in sensor computation\"))\n  else Right(a / b)"}
{"id":"f412f0cf-0c98-4be5-b0ef-be3f86980be3","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"case class MachineStatus(deviceId: String, isOnline: Boolean)\nclass DeviceOfflineException(msg: String) extends Exception(msg)\ndef getOnlineStatus(status: MachineStatus): String =\n  try\n    if !status.isOnline then throw new DeviceOfflineException(\"Device \" + status.deviceId + \" offline\")\n    else \"Device online\"\n  catch\n    case e: DeviceOfflineException => e.getMessage"}
{"id":"2607d13c-f594-44d4-bca4-3034a1c82ea7","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class TelemetryPacket(sequence: Int)\ndef findGap(lastSeq: Int, pkt: TelemetryPacket): Option[Int] =\n  val gap = pkt.sequence - lastSeq\n  if gap > 1 then Some(gap)\n  else None"}
{"id":"fcc22dc8-6ea8-4e4e-8a77-5772742007eb","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class SensorConnectionException(sensorId: String) extends Exception(sensorId)\ndef sendSensorCommand(sensorId: String, command: String): Unit =\n  if command == \"FAIL\" then throw new SensorConnectionException(sensorId)\n  else ()"}
{"id":"c9236522-82ee-4b11-b0d9-b243331b7d0c","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def lookupSensorData(id: String, readings: Map[String, Double]): Option[Double] =\n  readings.get(id)"}
{"id":"1be0968f-6fdc-4181-8e25-c449ebe80c71","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class InvalidTelemetryFrameException(msg: String) extends Exception(msg)\ndef decodeTelemetryFrame(frame: String): Int =\n  try\n    if frame.size != 10 then throw new InvalidTelemetryFrameException(\"Frame size invalid\")\n    else frame.length\n  catch\n    case ex: InvalidTelemetryFrameException => -1"}
{"id":"81253573-89de-41de-ac89-f25b528605e0","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class OverloadFault(code: String)\ndef checkLoad(currentLoad: Double, maxLoad: Double): Option[OverloadFault] =\n  if currentLoad > maxLoad then Some(OverloadFault(\"Load exceeded\"))\n  else None"}
{"id":"a8bb3a52-fbb1-4e2c-8a13-7f8557d85c76","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class TelemetryTimeoutException(device: String) extends Exception(device)\ndef fetchTelemetryData(deviceId: String, isResponsive: Boolean): Double =\n  if !isResponsive then throw new TelemetryTimeoutException(deviceId)\n  else 123.4"}
{"id":"54d6a224-3595-4d63-a133-f25ed4c780d3","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef parseHumidity(hStr: String): Try[Double] =\n  Try(hStr.toDouble)"}
{"id":"da797065-6526-45b9-808b-aa511ee16f4d","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class SensorAuthenticationException(device: String) extends Exception(device)\ndef authenticateSensor(device: String, token: String): Boolean =\n  try\n    if token.isEmpty then throw new SensorAuthenticationException(device)\n    else true\n  catch\n    case _: SensorAuthenticationException => false"}
{"id":"b909c6dc-7e86-4a32-a365-d3f7cb21f629","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"sealed trait UploadError\ncase object IncompleteUpload extends UploadError\ncase object CorruptedDataPacket extends UploadError\ndef verifyUpload(packet: String): Either[UploadError, String] =\n  if packet.isEmpty then Left(IncompleteUpload)\n  else if packet.length % 2 == 1 then Left(CorruptedDataPacket)\n  else Right(packet)"}
{"id":"a399c2a4-999c-4200-b0a0-ce5b0c9170a3","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class MachineShutdownException(reason: String) extends Exception(reason)\ndef shutdownMachine(isCritical: Boolean): Unit =\n  if isCritical then throw new MachineShutdownException(\"Critical shutdown executed\")\n  else ()"}
{"id":"ca510877-6253-4afb-ade0-dec6ccd2f007","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def safeReadSensorVoltage(value: String): Option[Double] =\n  value.toDoubleOption"}
{"id":"3f9976eb-2cb3-4222-b82d-5799f0befa40","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class UnexpectedTelemetryResponseException(device: String) extends Exception(device)\ndef fetchResponse(device: String, response: Option[String]): String =\n  response match\n    case Some(r) => r\n    case None => throw new UnexpectedTelemetryResponseException(device)"}
{"id":"0d1296ee-cdc7-461d-be20-6a20208017b0","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class SensorReading(id: String, value: Double)\ndef parseTemperatureReading(input: String): Option[SensorReading] =\n  input.split(\",\") match\n    case Array(id, value) =>\n      scala.util.Try(value.toDouble).toOption.map(v => SensorReading(id, v))\n    case _ => None"}
{"id":"745e4e12-4f58-4b60-8185-78a3be5c3d06","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"sealed trait TelemetryError\ncase object ConnectionTimeout extends TelemetryError\ncase object InvalidPacketFormat extends TelemetryError\n\ndef decodePacket(packet: String): Either[TelemetryError, Int] =\n  if packet.startsWith(\"START\") then\n    Right(packet.length)\n  else\n    Left(InvalidPacketFormat)"}
{"id":"87285210-a9a8-49c0-976f-a63e42bc4b17","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def computeVibrationAnomalyLevel(level: Double): Either[String, Double] =\n  if level < 0 then Left(\"Vibration level below zero not allowed\")\n  else if level > 100 then Left(\"Vibration level exceeds maximum threshold\")\n  else Right(level / 2)"}
{"id":"4e53c449-b096-4f52-83d2-177820eeb453","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safePressureCalculation(p1: Double, p2: Double): Try[Double] =\n  Try {\n    val delta = p2 - p1\n    if delta < 0 then throw new IllegalArgumentException(\"Negative pressure difference\")\n    delta\n  }"}
{"id":"eb87bb44-f7e6-4888-9d5a-a00409e589f3","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"sealed trait MachineHealthError\ncase object OfflineError extends MachineHealthError\ncase object DataCorruptError extends MachineHealthError\n\ndef retrieveMachineHealth(machineId: String): Either[MachineHealthError, String] =\n  if machineId.isEmpty then Left(OfflineError)\n  else if machineId.forall(_.isDigit) then Right(\"Operational\")\n  else Left(DataCorruptError)"}
{"id":"3ee99102-ab2e-4c93-9fc0-773a48ae11b4","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def fetchFlowRateFromSensor(sensorId: String): Option[Double] =\n  if sensorId.startsWith(\"FLW\") then Some(23.7)\n  else None"}
{"id":"b2382006-6fd1-43cb-9ea1-0d0e1597fb64","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeRPMReadings(readings: List[String]): Try[List[Int]] =\n  Try {\n    readings.map(_.toInt)\n  }"}
{"id":"b78c8446-2572-45fe-8334-9ed302762cd8","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"sealed trait TelemetryValidationError\ncase class MissingField(field: String) extends TelemetryValidationError\ncase object ParseFailure extends TelemetryValidationError\n\ndef validateSensorPayload(payload: Map[String, String]): Either[TelemetryValidationError, Int] =\n  payload.get(\"rpm\") match\n    case Some(v) =>\n      scala.util.Try(v.toInt).toOption.toRight(ParseFailure)\n    case None => Left(MissingField(\"rpm\"))"}
{"id":"3246835a-268e-4f57-aed4-512e2381ea3c","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def parseAlarmLevel(str: String): Option[Int] =\n  scala.util.Try(str.toInt).toOption.filter(_ >= 0)"}
{"id":"a9a8e614-aaf4-4d6a-b462-2886eff1a802","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def retrieveCompressorTemperature(sensorOutput: String): Either[String, Double] =\n  if sensorOutput.isEmpty then Left(\"Empty temperature data\")\n  else scala.util.Try(sensorOutput.toDouble).toEither.left.map(_ => \"Temperature format error\")"}
{"id":"ec5ab3b9-3dd0-401f-8a79-ff6f600f297d","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getOilPressure(sensorMap: Map[String, String]): Double =\n  try {\n    val pressureStr = sensorMap(\"oilPressure\")\n    pressureStr.toDouble\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Oil pressure reading error\")\n  }"}
{"id":"396ba589-ff13-4711-b9c8-96419fa27c64","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def readMotorCurrent(input: String): Int =\n  try {\n    input.toInt\n  } catch {\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid current value\")\n  }"}
{"id":"1e2b181b-1e0d-4f69-87d1-5c878403749f","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def parseTelemetryPacket(packet: String): List[String] =\n  try {\n    if (packet.startsWith(\"PKT\")) packet.split(\",\").toList\n    else throw new Exception(\"Malformed telemetry packet\")\n  } catch {\n    case e: Exception => throw e\n  }"}
{"id":"84a65c4f-b239-45e4-bda4-a4c6bcd66776","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class PacketCorruptionException extends Exception\n\ndef verifyPacket(packet: String): String =\n  try {\n    if packet.contains(\"ERROR\") then throw new PacketCorruptionException\n    packet\n  } catch {\n    case _: PacketCorruptionException => \"DefaultPacket\"\n  }"}
{"id":"1ac9bdb1-5b41-4cd1-b998-a6598069df6e","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"object TelemetryLogger {\n  def logTemperature(temp: String): Unit =\n    try {\n      val t = temp.toDouble\n    } catch {\n      case e: Exception => println(\"Temperature logging failure\")\n    }\n}"}
{"id":"3123ce46-348b-46e9-84cc-9168cd33e497","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getPumpStatus(statusCode: Int): String =\n  try {\n    statusCode match {\n      case 1 => \"Running\"\n      case 0 => \"Stopped\"\n      case _ => throw new Exception(\"Unknown status code\")\n    }\n  } catch {\n    case e: Exception => \"Error: Unknown\"\n  }"}
{"id":"db459661-a2a8-45d0-882d-c2305aab5ea6","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class PressureOutOfRangeException(msg: String) extends Exception(msg)\n\ndef checkPressure(value: Double): Double =\n  if value < 10 || value > 500 then throw new PressureOutOfRangeException(\"Pressure out of allowed range\")\n  else value"}
{"id":"51527311-974c-4580-aaea-4d196df8aa1f","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def decodeVibrationPayload(payload: String): Double =\n  try {\n    val parts = payload.split(\":\")\n    if parts.length != 2 then throw new Exception(\"Invalid vibration payload\")\n    parts(1).toDouble\n  } catch {\n    case e: Exception => 0.0\n  }"}
{"id":"73e3b254-0360-4f85-a45b-e45f7d9407a1","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def extractValvePosition(reading: String): Int =\n  try {\n    reading.toInt\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Valve position parsing failed\")\n  }"}
{"id":"8088db94-04b8-4654-a22c-8ba3750e5838","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getRPMValue(feed: Map[String, Any]): Int =\n  try {\n    feed.getOrElse(\"rpm\", throw new Exception(\"RPM missing\")).asInstanceOf[Int]\n  } catch {\n    case e: Exception => 0\n  }"}
{"id":"af59503a-e61f-45ad-a268-2a2241fc7f6e","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"object LobbyConnection {\n  def establishLobbySession(playerId: String): Option[String] =\n    if playerId.nonEmpty then Some(s\"session-$playerId\")\n    else None\n}"}
{"id":"38a91f27-07ac-460b-a780-85718988b352","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbyConfig(maxPlayers: Int, roomName: String)\nsealed trait LobbyConfigError\ncase object MaxPlayersTooLow extends LobbyConfigError\ncase object RoomNameEmpty extends LobbyConfigError\n\ndef validateLobbyConfig(cfg: LobbyConfig): Either[LobbyConfigError, LobbyConfig] =\n  if cfg.maxPlayers < 2 then Left(MaxPlayersTooLow)\n  else if cfg.roomName.isEmpty then Left(RoomNameEmpty)\n  else Right(cfg)"}
{"id":"be52e404-f018-4741-ae73-d5174a903a4d","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait UserAuthError\ncase object UserNotFound extends UserAuthError\ncase object IncorrectPassphrase extends UserAuthError\n\ndef authenticateUserVR(nickname: String, passphrase: String): Either[UserAuthError, String] =\n  if nickname != \"playerOne\" then Left(UserNotFound)\n  else if passphrase != \"securePass\" then Left(IncorrectPassphrase)\n  else Right(\"authToken123\")"}
{"id":"2a9bd04c-f8d2-41af-bc25-b1b3c12fdfe4","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseLobbyPort(portStr: String): Try[Int] = Try(portStr.toInt)"}
{"id":"930377b9-56e3-44c1-b4f5-46843aaf5b3f","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait MatchmakingError\ncase object LobbyFull extends MatchmakingError\ncase object AlreadyInQueue extends MatchmakingError\n\ncase class Player(tag: String)\n\ndef joinMatchmakingQueue(player: Player, queue: List[Player], maxPlayers: Int): Either[MatchmakingError, List[Player]] =\n  if queue.contains(player) then Left(AlreadyInQueue)\n  else if queue.size >= maxPlayers then Left(LobbyFull)\n  else Right(player :: queue)"}
{"id":"c37e2532-f354-4413-9421-9059af8005a8","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def findLobbyById(lobbyId: String): Option[VRLobby] =\n  if lobbyId == \"active-lobby-42\" then Some(VRLobby(lobbyId))\n  else None\n\ncase class VRLobby(id: String)"}
{"id":"a80d2156-35c0-4be6-a0dd-a07f05602973","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait AvatarSelectionError\ncase object AvatarUnavailable extends AvatarSelectionError\n\ndef selectAvatarVR(avatar: String, availableAvatars: Set[String]): Either[AvatarSelectionError, String] =\n  if availableAvatars.contains(avatar) then Right(avatar)\n  else Left(AvatarUnavailable)"}
{"id":"63af1329-f03a-4659-bc9d-c142024f19f2","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeBroadcastMessage(msg: String, lobbyId: String): Try[String] = Try {\n  if lobbyId.startsWith(\"lobby-\") then s\"Message sent: $msg\"\n  else throw new RuntimeException(\"Invalid lobby ID\")\n}"}
{"id":"cb9637e3-a3c9-4743-ac88-633c221ba6ef","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def safeRemovePlayer(playerId: String, lobby: List[String]): Option[List[String]] =\n  if lobby.contains(playerId) then Some(lobby.filterNot(_ == playerId))\n  else None"}
{"id":"a3e8e785-b53e-4742-abb1-21632d5d13b6","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait AssetLoadingError\ncase object AssetFileMissing extends AssetLoadingError\n\ncase class Asset(name: String)\n\ndef loadLobbyAsset(path: String): Either[AssetLoadingError, Asset] =\n  if path.endsWith(\".vrasset\") then Right(Asset(path))\n  else Left(AssetFileMissing)"}
{"id":"596d2698-8646-4585-abe9-ddcc4fe73acc","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def connectToVRLobby(playerId: String): String = {\n  if(playerId.isEmpty) throw new IllegalArgumentException(\"Player ID required.\")\n  \"connected-session-\" + playerId\n}"}
{"id":"57dfb1ab-6449-4d04-9156-f351f4a2d6a5","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def chooseGameRoom(roomId: String): String = {\n  try {\n    if(roomId.startsWith(\"lobby\")) \"Room chosen: \" + roomId\n    else throw new RuntimeException(\"Invalid room ID.\")\n  } catch {\n    case e: Exception => \"Failed: \" + e.getMessage\n  }\n}"}
{"id":"52a8a03d-9525-447b-b827-265999239b27","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class VRLobbyFullException(msg: String) extends Exception(msg)\n\ndef addPlayerToLobbyVR(lobby: List[String], user: String): List[String] = {\n  if(lobby.size >= 8) throw new VRLobbyFullException(\"Lobby full.\")\n  lobby :+ user\n}"}
{"id":"d3e99b22-f276-43fe-9f1d-fb9314d5094b","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def getPlayerAvatar(playerTag: String): String = {\n  try {\n    if(playerTag == \"guest\") throw new RuntimeException(\"Avatar not found.\")\n    \"avatar-image-url-for-\" + playerTag\n  } catch {\n    case e: Exception => \"error-default-avatar\"\n  }\n}"}
{"id":"feebf95e-3ba4-4fa5-bbfb-86f5a57b7247","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def sendLobbyInvite(sender: String, receiver: String): String = {\n  if(receiver.isEmpty) throw new IllegalArgumentException(\"Receiver required.\")\n  s\"Invite from $sender to $receiver\"\n}"}
{"id":"afd42844-69ec-46ad-99f7-e0fd009e289c","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def removeLobbyMember(members: List[String], member: String): List[String] = {\n  try {\n    if(!members.contains(member)) throw new NoSuchElementException(\"Member missing.\")\n    members.filterNot(_ == member)\n  } catch {\n    case _: Exception => members\n  }\n}"}
{"id":"e62d8f71-a528-4c7f-a89d-500ed0cc1e20","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class InvalidLobbyConfigException(msg: String) extends Exception(msg)\n\ndef configureLobby(name: String, capacity: Int): (String, Int) = {\n  if (name.isEmpty || capacity < 2) throw new InvalidLobbyConfigException(\"Bad lobby config\")\n  (name, capacity)\n}"}
{"id":"353ee4ac-c8c2-43a1-a07a-159f8afd7e1c","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def broadcastLobbyEvent(event: String, lobbyId: String): Unit = {\n  try {\n    if(lobbyId.isEmpty) throw new Exception(\"Lobby ID missing.\")\n    println(s\"Event '$event' broadcasted to $lobbyId\")\n  } catch {\n    case _: Throwable => println(\"Broadcast failed.\")\n  }\n}"}
{"id":"1f15bdc7-a0d9-4716-9bf9-9d197ef7383c","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def authenticateVRUser(username: String, password: String): String = {\n  if(password != \"letmein\") throw new SecurityException(\"Authentication failed.\")\n  \"auth-token-vr\"\n}"}
{"id":"bdc1aabf-2d38-432f-8f02-8675adce40f0","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def downloadLobbyAsset(fileUrl: String): String = {\n  try {\n    if(fileUrl.endsWith(\".vrasset\")) \"Downloaded: \" + fileUrl\n    else throw new RuntimeException(\"Failed to load asset.\")\n  } catch {\n    case _: Exception => \"Default asset used\"\n  }\n}"}
{"id":"a1ca5c3f-b123-41a6-bf7c-491cbfb2fc41","timestamp":1746100785315,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbyConnectionError(reason: String)\ncase class PlayerId(value: String)\n\ndef connectPlayer(playerId: PlayerId, lobbyOpen: Boolean): Either[LobbyConnectionError, String] =\n  if lobbyOpen then Right(s\"Player ${playerId.value} connected.\")\n  else Left(LobbyConnectionError(\"Lobby is closed.\"))\n"}
{"id":"d4e5cf4c-1cbb-4d85-98d4-c3fe7b8e0ca0","timestamp":1746100785315,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def assignGameInstance(playerName: String, available: Boolean): String = {\n  if (!available) throw new RuntimeException(\"No available game instances!\")\n  s\"Assigned $playerName to a game instance.\"\n}\ntry {\n  val result = assignGameInstance(\"TaliaVR\", available = false)\n  println(result)\n} catch {\n  case e: RuntimeException => println(e.getMessage)\n}\n"}
{"id":"8c0d1863-4225-43d1-8c1c-49f67158c637","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait VRLobbyError\ncase object UserAlreadyInLobby extends VRLobbyError\ncase class SuccessfullyJoined(username: String)\ndef joinVRLobby(username: String, inLobby: Boolean): Either[VRLobbyError, SuccessfullyJoined] =\n  if (inLobby) Left(UserAlreadyInLobby)\n  else Right(SuccessfullyJoined(username))\n"}
{"id":"84747550-2437-45d0-8720-978a467c00a1","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class InvalidGameSessionException(msg: String) extends Exception(msg)\ndef startGameSession(sessionActive: Boolean): Unit = {\n  if (!sessionActive) throw new InvalidGameSessionException(\"Session is not active.\")\n}\ntry {\n  startGameSession(false)\n} catch {\n  case e: InvalidGameSessionException => println(s\"Start failure: ${e.getMessage}\")\n}\n"}
{"id":"5854dfce-03e8-4101-bdf5-935a3e2f3bde","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef sendLobbyInvitation(username: String, lobbyCapacity: Int, currentPlayers: Int): Try[String] =\n  Try {\n    if currentPlayers >= lobbyCapacity then throw new Exception(\"Lobby full\")\n    else s\"Invitation sent to $username\"\n  }\n"}
{"id":"47483cb5-b3ba-4046-a516-f00fd86f7f6b","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def getPlayerProfile(playerTag: String): String = {\n  if (playerTag == \"\") throw new IllegalArgumentException(\"Player tag is empty.\")\n  s\"Profile for $playerTag\"\n}\ntry {\n  val profile = getPlayerProfile(\"\")\n  println(profile)\n} catch {\n  case ex: IllegalArgumentException => println(\"Error: \" + ex.getMessage)\n}\n"}
{"id":"d15e6c10-a6f7-4928-8b63-cc52d176d41c","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbyNetworkError(msg: String)\ndef broadcastMessageToLobby(message: String, connected: Boolean): Option[String] =\n  if connected then Some(s\"Broadcast: $message\")\n  else None\n"}
{"id":"91fba463-9e82-4dde-b281-7040fafd1604","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def removePlayerFromLobby(player: String, present: Boolean): String = {\n  if (!present) throw new NoSuchElementException(\"Player not found in lobby.\")\n  s\"$player removed from lobby.\"\n}\ntry {\n  val status = removePlayerFromLobby(\"Ayra\", present = false)\n  println(status)\n} catch {\n  case ex: NoSuchElementException => println(ex.getMessage)\n}\n"}
{"id":"2ea5349c-084a-4bf0-9b6f-3545aa05f1e9","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait AvatarUploadError\ncase object AvatarSizeTooLarge extends AvatarUploadError\ncase class UploadedAvatar(name: String)\ndef uploadAvatar(name: String, sizeMb: Int): Either[AvatarUploadError, UploadedAvatar] =\n  if sizeMb > 10 then Left(AvatarSizeTooLarge)\n  else Right(UploadedAvatar(name))\n"}
{"id":"b987daf8-b767-46ad-89e5-49f770479c4c","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class LobbyTimeoutException extends Exception(\"Lobby timed out.\")\ndef checkLobbyTimeout(secondsIdle: Int): Boolean = {\n  if (secondsIdle > 600) throw new LobbyTimeoutException\n  true\n}\ntry {\n  checkLobbyTimeout(1200)\n} catch {\n  case e: LobbyTimeoutException => println(\"Timeout!\")\n}\n"}
{"id":"9940a7cf-feba-407a-af6a-33516c76d2a8","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRRoomAllocationError(reason: String)\ndef allocateVRRoom(requestedSlots: Int, slotsAvailable: Int): Either[VRRoomAllocationError, Int] =\n  if requestedSlots > slotsAvailable then Left(VRRoomAllocationError(\"Not enough slots.\"))\n  else Right(slotsAvailable - requestedSlots)\n"}
{"id":"f677d82b-471c-4189-955d-43e8e8ca82ca","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def setPlayerVoiceChat(playerName: String, microphoneOn: Boolean): String = {\n  if (!microphoneOn) throw new Exception(\"Microphone is off!\")\n  s\"Voice chat activated for $playerName\"\n}\ntry {\n  val res = setPlayerVoiceChat(\"Kiran360\", microphoneOn = false)\n  println(res)\n} catch {\n  case ex: Exception => println(ex.getMessage)\n}\n"}
{"id":"b425265d-188a-490b-abd8-4d3de1112975","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"import scala.util.Try\ndef parseLobbyConfig(jsonInput: String): Try[Map[String, String]] = Try {\n  if jsonInput.isEmpty then throw new Exception(\"Empty config.\")\n  else Map(\"maxPlayers\" -> \"8\")\n}\n"}
{"id":"cb9d96d2-ba43-4d18-96ed-86e3fc575ffd","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def reconnectToLobby(playerName: String, connectionStable: Boolean): String = {\n  if (!connectionStable) throw new IllegalStateException(\"Cannot reconnect: unstable connection.\")\n  s\"$playerName reconnected.\"\n}\ntry {\n  val msg = reconnectToLobby(\"RheaVR\", connectionStable = false)\n  println(msg)\n} catch {\n  case ex: IllegalStateException => println(ex.getMessage)\n}\n"}
{"id":"638a4fd4-176a-4bdd-9a6d-07c597626492","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait InventorySyncError\ncase object SyncConflict extends InventorySyncError\ncase object SyncTimeout extends InventorySyncError\ndef syncInventory(playerId: String, tryCount: Int): Either[InventorySyncError, String] =\n  if tryCount > 3 then Left(SyncTimeout)\n  else Right(s\"Inventory synced for $playerId\")\n"}
{"id":"20c37270-4a12-4dce-85ca-fe7a7d2ec84c","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def setPlayerReady(playerId: String, state: String): String = {\n  if (state != \"ready\") throw new Exception(\"Player must be set to 'ready'.\")\n  \"Player is ready to play.\"\n}\ntry {\n  val msg = setPlayerReady(\"Marko\", \"waiting\")\n  println(msg)\n} catch {\n  case ex: Exception => println(ex.getMessage)\n}\n"}
{"id":"11e12d75-6393-4510-b984-9b231c3184ba","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRLobbyBanError(reason: String)\ndef banPlayerFromLobby(admin: String, player: String, adminPerms: Boolean): Either[VRLobbyBanError, String] =\n  if !adminPerms then Left(VRLobbyBanError(\"Admin permissions required.\"))\n  else Right(s\"$player banned by $admin\")\n"}
{"id":"a3b9b613-303a-4f69-9118-ebd345de00c2","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def downloadLobbyAssets(assetsExist: Boolean): String = {\n  if (!assetsExist) throw new Exception(\"Assets not found.\")\n  \"Assets downloaded successfully.\"\n}\ntry {\n  downloadLobbyAssets(false)\n} catch {\n  case ex: Exception => println(\"Asset error: \" + ex.getMessage)\n}\n"}
{"id":"c08e5fb1-ce1f-46c2-ba09-c34a22e176bc","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"import scala.util.Try\ndef enableLobbySpectatorMode(spectatorAvailable: Boolean): Try[String] = Try {\n  if !spectatorAvailable then throw new Exception(\"Spectator mode not available.\")\n  \"Spectator mode enabled.\"\n}\n"}
{"id":"612c2ff4-2e9f-4ff6-b042-31fb70cac473","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def exitVRMatchOnce(matchActive: Boolean): Unit = {\n  if (!matchActive) throw new Exception(\"No active match to exit.\")\n}\ntry {\n  exitVRMatchOnce(false)\n} catch {\n  case ex: Exception => println(ex.getMessage)\n}\n"}
{"id":"b9d2a991-e34f-475e-a4c2-6a9eaedf2b05","timestamp":1746100804885,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class Employee(id: Int, name: String)\ncase class TimeEntry(employeeId: Int, hours: Double)\ndef validateTimeEntry(entry: TimeEntry): Option[TimeEntry] =\n  if entry.hours > 0 && entry.hours <= 24 then Some(entry)\n  else None"}
{"id":"2e0ec35a-ff37-464d-86a1-af205865c5ae","timestamp":1746100804885,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class ClockInError(reason: String)\ndef clockIn(employee: Employee, atHour: Int): Either[ClockInError, String] =\n  if atHour < 0 || atHour > 23 then\n    Left(ClockInError(\"Invalid clock-in hour.\"))\n  else\n    Right(s\"${employee.name} clocked in at $atHour:00\")"}
{"id":"c782a127-42e9-4923-89f1-38ec569c39fd","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait TimeTrackingError\ncase object NegativeHours extends TimeTrackingError\ncase object ExceedsMaximumHours extends TimeTrackingError\ndef logHours(hours: Double): Either[TimeTrackingError, Double] =\n  if hours < 0 then Left(NegativeHours)\n  else if hours > 24 then Left(ExceedsMaximumHours)\n  else Right(hours)"}
{"id":"63184e93-3767-4497-8ec9-63637209867d","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"import scala.util.Try\ncase class Shift(start: Int, end: Int)\ndef calculateShiftDuration(shift: Shift): Try[Int] = Try {\n  require(shift.end > shift.start, \"Shift end must be after start\")\n  shift.end - shift.start\n}"}
{"id":"9ccf825e-4def-4b01-8678-29754ee7f443","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait AttendanceError\ncase object AlreadyClockedIn extends AttendanceError\ncase object NotClockedIn extends AttendanceError\ncase class AttendanceState(clockIns: Set[Int])\ndef recordClockIn(state: AttendanceState, employeeId: Int): Either[AttendanceError, AttendanceState] =\n  if state.clockIns.contains(employeeId) then Left(AlreadyClockedIn)\n  else Right(state.copy(clockIns = state.clockIns + employeeId))"}
{"id":"711578b6-6608-4c7f-8976-fdd2ef031f76","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def parseHoursWorked(input: String): Option[Double] =\n  try input.toDoubleOption\n  catch case _: NumberFormatException => None"}
{"id":"9c5592aa-09a6-4f69-a109-e958559e8c03","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class OvertimeError(msg: String)\ndef approveOvertime(hours: Double): Either[OvertimeError, Double] =\n  if hours > 12 then Left(OvertimeError(\"Overtime exceeds allowed limit.\"))\n  else Right(hours)"}
{"id":"2ceed1e7-5e76-4095-b724-f2bc7a3a1de7","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def safeDivideHours(total: Double, days: Int): Option[Double] =\n  if days == 0 then None else Some(total / days)"}
{"id":"61d881d8-078c-4c8a-9fb7-101b8ffe3c03","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"import scala.util.Try\ndef parseClockOutTime(str: String): Try[Int] = Try(str.toInt)"}
{"id":"8d74109b-1b38-4f2c-8156-e006cecdfcc6","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait ApprovalError\ncase object NotManager extends ApprovalError\ndef approveTimesheet(isManager: Boolean): Either[ApprovalError, String] =\n  if isManager then Right(\"Approved\") else Left(NotManager)"}
{"id":"423735d8-c3d8-42d6-b9a2-1d7677e19b86","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class InvalidTimeEntryException(msg: String) extends Exception(msg)\ndef submitTimeEntry(entry: TimeEntry): TimeEntry =\n  if entry.hours < 0 || entry.hours > 24 then\n    throw new InvalidTimeEntryException(\"Invalid hours for entry.\")\n  entry"}
{"id":"19e60928-5a56-4852-8095-5a0fe62cc1b7","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def unsafeParseHours(str: String): Double =\n  try str.toDouble\n  catch case e: NumberFormatException => throw new IllegalArgumentException(\"Hours must be a number.\")"}
{"id":"85bc92e4-3ddf-4164-9902-42eca5589b4d","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def clockOut(employeeId: Int, hour: Int): String =\n  if hour < 0 || hour > 23 then\n    throw new RuntimeException(\"Clock-out hour out of bounds.\")\n  s\"Employee $employeeId clocked out at $hour:00\""}
{"id":"9f8adea3-df68-4079-9df3-4279a3da9f01","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def logShiftDuration(start: Int, end: Int): Int =\n  if end <= start then\n    throw new Exception(\"Shift end time must be after start time.\")\n  end - start"}
{"id":"7a734452-dc04-47b2-8d36-51bac93b64c1","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getEmployeeHours(entries: List[TimeEntry], empId: Int): Double =\n  entries.find(_.employeeId == empId) match\n    case Some(entry) if entry.hours >= 0 => entry.hours\n    case _ => throw new Exception(\"No valid hours found for employee.\")"}
{"id":"b7beeb78-67ce-4193-b6b7-b669c2e73b95","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class OvertimeException extends Exception\n\ndef processOvertime(hours: Double): Double =\n  if hours > 40 then\n    throw new OvertimeException\n  hours\n"}
{"id":"6957ceb5-45d1-4a2c-a48c-0580c29c645d","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def saveClockIn(employee: Employee, hour: Int): Boolean =\n  try\n    if hour < 0 || hour > 23 then throw new Exception(\"Invalid clock-in hour.\")\n    true\n  catch case _: Exception => false"}
{"id":"c939445e-84c2-4d83-bfde-f6a91230643d","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def handleApproval(isManager: Boolean): String =\n  try\n    if !isManager then throw new Exception(\"User is not authorized.\")\n    \"Timesheet approved.\"\n  catch case e: Exception => e.getMessage\n"}
{"id":"c5777e1c-a864-4d1e-906e-357ccd7ae233","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class TimesheetSubmissionException(msg: String) extends Exception(msg)\ndef submitTimesheet(employee: Employee, hours: Double): String =\n  if hours < 0 then throw new TimesheetSubmissionException(\"Negative hours.\")\n  s\"${employee.name} submitted $hours hours.\""}
{"id":"8d74b763-0e26-4861-92b3-1f9cdc563867","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def deleteTimeEntry(entry: TimeEntry): Unit =\n  try\n    if entry.hours < 0 then throw new IllegalArgumentException(\"Cannot delete entry with negative hours.\")\n  catch case ex: Exception =>\n    println(s\"Failed to delete: ${ex.getMessage}\")\n"}
{"id":"38c96cc6-f94e-4bb5-a244-179e5fe56886","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class EmployeeTimeEntry(employeeId: Int, clockIn: Long, clockOut: Option[Long])\nsealed trait TimeTrackingError\ncase object MissingClockOut extends TimeTrackingError\ncase object InvalidClockInTime extends TimeTrackingError\n\ndef calculateHoursWorked(entry: EmployeeTimeEntry): Either[TimeTrackingError, Double] =\n  entry.clockOut match\n    case None => Left(MissingClockOut)\n    case Some(out) if out <= entry.clockIn => Left(InvalidClockInTime)\n    case Some(out) => Right((out - entry.clockIn)/3600.0)\n"}
{"id":"ecba4c92-ffc0-4c05-9cc7-dbcc549da20e","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class MissingTimeEntryException(employeeId: Int) extends Exception(s\"Missing time entry for employee $employeeId\")\n\ndef getEmployeeTimeEntry(employeeId: Int, records: Map[Int, Long]): Long =\n  if records.contains(employeeId) then records(employeeId)\n  else throw new MissingTimeEntryException(employeeId)\n"}
{"id":"d305d2c8-dbe4-46c2-bb13-0f8c30fad0b6","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait AttendanceError\ncase object EarlyCheckIn extends AttendanceError\ncase object LateCheckOut extends AttendanceError\n\ndef validateWorkTimes(clockIn: Long, clockOut: Long): Option[AttendanceError] =\n  if clockIn < 7 * 3600 then Some(EarlyCheckIn)\n  else if clockOut > 19 * 3600 then Some(LateCheckOut)\n  else None\n"}
{"id":"6c882734-a3b0-40c3-a88e-a1ba935b2b75","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def computeBreakDuration(start: Long, end: Long): Double =\n  if end < start then throw new IllegalArgumentException(\"Break end before start\")\n  else (end - start) / 60.0\n"}
{"id":"2b4025b6-4743-467c-b1f0-3d6dbb4cb848","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeParseTimestamp(s: String): Try[Long] = Try(s.toLong)\n"}
{"id":"d3e6f9c7-a0ce-4447-abaa-d28601aedf63","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"try {\n  val entry = getEmployeeTimeEntry(22, Map())\n  println(s\"Time entry: $entry\")\n} catch {\n  case ex: Exception => println(s\"Failed to retrieve time entry: ${ex.getMessage}\")\n}\n"}
{"id":"86ce0061-19a4-49e3-b4aa-18194722ac01","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait TimeEntryValidationError\ncase object ClockOutBeforeClockIn extends TimeEntryValidationError\ncase object ClockInFuture extends TimeEntryValidationError\n\ndef validateTimeEntry(clockIn: Long, clockOut: Long, current: Long): Either[TimeEntryValidationError, Unit] =\n  if clockOut < clockIn then Left(ClockOutBeforeClockIn)\n  else if clockIn > current then Left(ClockInFuture)\n  else Right(())\n"}
{"id":"51d3f3de-9a53-41db-92b2-47d2c7c37a2e","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def parseEmployeeId(id: String): Int =\n  try id.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid employee ID format\")\n"}
{"id":"ca60913d-63bc-4aef-8716-990e2b2eee33","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def recordClockIn(employeeId: Int, timesheet: Map[Int, Long], now: Long): Option[Map[Int, Long]] =\n  if timesheet.contains(employeeId) then None\n  else Some(timesheet + (employeeId -> now))\n"}
{"id":"537090bb-ef93-484a-a423-88e980d3331c","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getEmployeeHours(employeeId: Int, hours: Map[Int, Double]): Double =\n  if !hours.contains(employeeId) then throw new Exception(\"No hours found for employee\")\n  else hours(employeeId)\n"}
{"id":"4fb14bb9-479c-4e7e-804a-76e996afe3ae","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class TimeTrackingIssue(message: String)\ndef checkForOverlappingEntries(entries: List[(Long, Long)]): Either[TimeTrackingIssue, Unit] =\n  val sorted = entries.sortBy(_._1)\n  val overlaps = sorted.sliding(2).exists {\n    case List((_, end1), (start2, _)) => end1 > start2\n    case _ => false\n  }\n  if overlaps then Left(TimeTrackingIssue(\"Overlapping entries detected\")) else Right(())\n"}
{"id":"b27a6377-76f5-4658-8040-e1bea284f843","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def removeTimeEntry(employeeId: Int, timesheet: scala.collection.mutable.Map[Int, Long]): Unit =\n  try timesheet.remove(employeeId)\n  catch case _: Exception => throw new RuntimeException(\"Error removing time entry\")\n"}
{"id":"db4c0bca-bcf3-47ac-a070-cc2aa4a254dc","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"import scala.util.Try\n\ndef calculateTotalBreaks(breaks: List[(Long, Long)]): Try[Double] = Try {\n  breaks.map { case (start, end) =>\n    if end < start then throw new IllegalArgumentException(\"Break end before start\")\n    else (end - start)/60.0\n  }.sum\n}\n"}
{"id":"d2cfd91b-12a1-4c21-b265-566f994dd70a","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class InvalidClockException(msg: String) extends Exception(msg)\n\ndef clockIn(employeeId: Int, timesheet: Map[Int, Long], now: Long): Map[Int, Long] =\n  if timesheet.contains(employeeId) then throw new InvalidClockException(\"Already clocked in\")\n  else timesheet + (employeeId -> now)\n"}
{"id":"4052f2ed-d45e-4346-925d-10e6d54a1e5e","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait ClockInError\ncase object AlreadyClockedIn extends ClockInError\ncase object NegativeTimestamp extends ClockInError\n\ndef addClockIn(employeeId: Int, timesheet: Map[Int, Long], now: Long): Either[ClockInError, Map[Int, Long]] =\n  if now < 0 then Left(NegativeTimestamp)\n  else if timesheet.contains(employeeId) then Left(AlreadyClockedIn)\n  else Right(timesheet + (employeeId -> now))\n"}
{"id":"3bbd7984-762c-4444-b76d-ff21a27586c5","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def fetchWorkedMinutes(employeeId: Int, minutes: Map[Int, Int]): Int =\n  try minutes(employeeId)\n  catch case _: Exception => throw new Exception(s\"No minutes found for employee $employeeId\")\n"}
{"id":"394c8d10-6c37-4c65-b330-d89dba4f82dc","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDivideWorkedHours(hours: Int, divisor: Int): Try[Double] = Try(hours.toDouble/divisor)\n"}
{"id":"6c94138d-44a0-4ae2-9e39-5a6c7fc4c0da","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def logClockOut(employeeId: Int, clockOuts: scala.collection.mutable.Map[Int, Long], now: Long): Unit =\n  try clockOuts.update(employeeId, now)\n  catch case _: Exception => throw new Exception(\"Failed to log clock out\")\n"}
{"id":"5816d819-3946-4aaf-b826-90db3a3df70d","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class TimeEntryMissing(employeeId: Int) extends Exception\n\ndef lookupClockIn(employeeId: Int, records: Map[Int, Long]): Option[Long] =\n  if records.contains(employeeId) then Some(records(employeeId)) else None\n"}
{"id":"cca73a74-3efb-4e26-bb5c-fee94eb49905","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def calculateWorkDuration(clockIn: Long, clockOut: Long): Double =\n  if clockIn > clockOut then throw new RuntimeException(\"Invalid time range\")\n  else (clockOut - clockIn)/3600.0\n"}
{"id":"7a6e6d3d-7fb1-49cf-9095-bafb3ada9b44","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WeatherNotification(message: String, level: String)\nsealed trait NotificationError\ncase object RecipientNotFound extends NotificationError\ncase object InvalidAlertLevel extends NotificationError\n\ndef sendNotification(recipient: String, notification: WeatherNotification): Either[NotificationError, String] =\n  if recipient.isEmpty then Left(RecipientNotFound)\n  else if !Set(\"Info\", \"Warning\", \"Severe\").contains(notification.level) then Left(InvalidAlertLevel)\n  else Right(s\"Sent to $recipient: ${notification.message}\")"}
{"id":"9a8837bf-c3a9-4203-b00b-0311d9ee7bde","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getWeatherAlert(region: String): String = {\n  if (region == \"\") throw new IllegalArgumentException(\"Region cannot be empty!\")\n  if (region != \"North\" && region != \"South\") throw new RuntimeException(\"Unknown region: \" + region)\n  \"Clear skies in \" + region\n}"}
{"id":"00e03134-e7df-4171-a2aa-19163130a788","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait SubscriptionError\ncase object EmailInvalid extends SubscriptionError\ncase object RegionUnsupported extends SubscriptionError\n\ndef subscribeUser(email: String, region: String): Either[SubscriptionError, String] =\n  if !email.contains(\"@\") then Left(EmailInvalid)\n  else if region != \"East\" && region != \"West\" then Left(RegionUnsupported)\n  else Right(\"Subscription successful\")"}
{"id":"73ab2167-291b-4eaa-a0d7-fd27a064aa76","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherApiException(msg: String) extends Exception(msg)\ndef fetchWeatherAlert(alertId: Int): String = {\n  if (alertId < 0) throw new WeatherApiException(\"Invalid alert ID\")\n  else \"Alert details: Thunderstorms expected\"\n}"}
{"id":"dce44b4d-05da-44df-b76b-e0314225d065","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"import scala.util.Try\ncase class WeatherAlert(title: String, priority: Int)\ndef parseWeatherAlert(data: String): Try[WeatherAlert] = Try {\n  val arr = data.split(\",\")\n  WeatherAlert(arr(0), arr(1).toInt)\n}"}
{"id":"856b820a-c232-4966-9e98-cca40861dda2","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def sendAlertToUser(alert: String, userId: Long): Unit = {\n  try {\n    if (userId <= 0) throw new IllegalArgumentException(\"User ID must be positive!\")\n    println(s\"Alert sent to $userId: $alert\")\n  } catch {\n    case ex: Exception => println(s\"Failed to send alert: ${ex.getMessage}\")\n  }\n}"}
{"id":"b86adc79-d1a1-4196-bb10-fd62a7e15377","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait AlertDeliveryError\ncase object NoDeliveryEndpoint extends AlertDeliveryError\ncase class DeliveryTimeout(seconds: Int) extends AlertDeliveryError\n\ndef deliverWeatherAlert(alert: String, endpoint: Option[String]): Either[AlertDeliveryError, String] =\n  endpoint match\n    case None => Left(NoDeliveryEndpoint)\n    case Some(uri) if uri.isEmpty => Left(NoDeliveryEndpoint)\n    case Some(uri) if uri.startsWith(\"http\") =>\n      Right(s\"Alert delivered to $uri: $alert\")\n    case _ => Left(DeliveryTimeout(5))"}
{"id":"a00f293a-62c6-474d-a9e6-83cb5b9c0fe5","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def updateRecipientPreferences(userEmail: String, preferences: Map[String, String]): Boolean = {\n  if (!preferences.contains(\"alertType\")) throw new IllegalStateException(\"Missing alertType in preferences\")\n  if (userEmail.endsWith(\"@invalid.com\")) throw new RuntimeException(\"Invalid email provider\")\n  true\n}"}
{"id":"8cb2b6be-a251-4003-a7b6-256de82c5381","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def findActiveAlert(city: String): Option[String] =\n  if city == \"London\" then Some(\"Heavy rain warning\")\n  else if city == \"Berlin\" then Some(\"High winds warning\")\n  else None"}
{"id":"e06815b9-ed30-48ab-8312-a672c20c1775","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def removeWeatherSubscriber(userId: Int): Boolean = {\n  if (userId < 0) throw new Exception(\"Negative user ID not allowed\")\n  true\n}"}
{"id":"e98c5143-a8d4-48a3-a6b2-d9bd7a9e5728","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait NotificationSendError\ncase object NotificationQuotaExceeded extends NotificationSendError\ncase object RecipientBlocked extends NotificationSendError\n\ndef sendAlertNotification(recipient: String, message: String, quota: Int): Either[NotificationSendError, String] =\n  if quota <= 0 then Left(NotificationQuotaExceeded)\n  else if recipient == \"blocked@weather.com\" then Left(RecipientBlocked)\n  else Right(s\"Alert sent to $recipient: $message\")"}
{"id":"13712080-819b-4e92-85cc-dc38e1e9bce1","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def readNotificationTemplate(templateId: Long): String = {\n  if (templateId <= 0) throw new IllegalArgumentException(\"Template ID must be positive\")\n  \"Severe weather warning for your area\"\n}"}
{"id":"2d831a31-5522-402c-8942-2e62f0843704","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"import scala.util.Try\ndef safeTemperatureParsing(tempText: String): Try[Double] = Try {\n  tempText.toDouble\n}"}
{"id":"7bacfefe-96c4-40d0-b831-0d35df59aa50","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def logWeatherNotificationDelivery(notificationId: String): Unit = {\n  try {\n    if (notificationId.isEmpty) throw new Exception(\"NotificationId cannot be empty\")\n    println(s\"Logged notification: $notificationId\")\n  } catch {\n    case e: Exception => println(s\"Logging failed: ${e.getMessage}\")\n  }\n}"}
{"id":"4a51bf99-0dc4-48bb-9f97-0577e8e184f4","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def decodeAlertSeverity(code: Int): Option[String] =\n  code match\n    case 1 => Some(\"Mild\")\n    case 2 => Some(\"Moderate\")\n    case 3 => Some(\"Severe\")\n    case _ => None"}
{"id":"a54a727a-a680-480a-89df-a73ec9a33a74","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertDispatchException(msg: String) extends Exception(msg)\ndef dispatchWeatherAlert(alert: String, userContact: String): Unit = {\n  if (userContact.isBlank) throw new AlertDispatchException(\"Contact information is missing\")\n  println(s\"Dispatching alert: $alert to $userContact\")\n}"}
{"id":"7557b3ad-3add-4b14-9708-d62f0e979c33","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait AlertFetchingError\ncase object AlertIdMissing extends AlertFetchingError\ncase object AlertNotFound extends AlertFetchingError\n\ndef fetchUserAlert(alertId: Option[Int]): Either[AlertFetchingError, String] =\n  alertId match\n    case None => Left(AlertIdMissing)\n    case Some(id) if id <= 0 => Left(AlertNotFound)\n    case Some(id) => Right(s\"Fetched alert #$id\")"}
{"id":"28e2bdf6-2a5c-425b-837e-2f4334384948","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def sendBulkNotifications(userList: List[String], notification: String): Unit = {\n  try {\n    userList.foreach { user =>\n      if (user.contains(\"@fail.com\")) throw new Exception(\"Failed to send to \" + user)\n      println(s\"Notified $user\")\n    }\n  } catch {\n    case err: Exception => println(\"Bulk notification error: \" + err.getMessage)\n  }\n}"}
{"id":"be5c1277-42cf-4e60-b308-e471893bebdd","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"import scala.util.Try\ndef readAlertLevel(level: String): Try[Int] = Try(level.toInt)"}
{"id":"0ff244e8-b275-4829-a997-6e6da97426ce","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def appendLogEntry(logFile: String, entry: String): Unit = {\n  try {\n    if (logFile.isEmpty) throw new Exception(\"Log file path missing\")\n    println(s\"Logged to $logFile: $entry\")\n  } catch {\n    case ex: Exception => println(s\"Failed to log: ${ex.getMessage}\")\n  }\n}"}
{"id":"a6f8bafb-9661-4024-a645-5a515fc65e9b","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"case class WeatherAlertTypeNotSupported(alertType: String)\n    extends Exception(s\"Alert type $alertType is not supported.\")\n\ndef sendWeatherAlert(alertType: String, recipient: String): Unit =\n  if alertType == \"Tornado\" || alertType == \"Flood\" then\n    println(s\"Sending $alertType alert to $recipient\")\n  else\n    throw new WeatherAlertTypeNotSupported(alertType)\n\ntry\n  sendWeatherAlert(\"Snow\", \"user@email.com\")\ncatch\n  case e: WeatherAlertTypeNotSupported => println(e.getMessage)"}
{"id":"1ccafe10-e55e-48b5-9b2b-d9b17eabd89e","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def connectToWeatherService(apiUrl: String): String =\n  if apiUrl.startsWith(\"https://\") then \"Connection successful!\" \n  else throw new RuntimeException(\"Invalid service URL: must be HTTPS\")\n\ntry\n  val result = connectToWeatherService(\"http://api.weather.com\")\n  println(result)\ncatch\n  case e: Exception => println(\"Connection error: \" + e.getMessage)"}
{"id":"d71ed834-8708-4370-9c19-73b4e2b5c1a3","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherNotificationException(msg: String) extends Exception(msg)\ndef notifyUser(deviceId: String, alert: String): Unit =\n  if deviceId.isEmpty then throw new WeatherNotificationException(\"Device ID missing\")\n  println(s\"Notification sent to device $deviceId: $alert\")\n\ntry\n  notifyUser(\"\", \"Heatwave warning\")\ncatch\n  case e: WeatherNotificationException => println(e.getMessage)"}
{"id":"8a8faf5b-1f48-4892-a008-f5673fd3f921","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def fetchWeatherData(location: String): String =\n  if location == \"\" then throw new IllegalArgumentException(\"Location cannot be empty\")\n  s\"Weather data for $location\"\n\ntry\n  val data = fetchWeatherData(\"\")\n  println(data)\ncatch\n  case e: IllegalArgumentException => println(\"Invalid input: \" + e.getMessage)"}
{"id":"3f1ec23f-1c7a-423f-a1ff-4ea689434213","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getUserAlertPreference(userId: Int): String =\n  if userId <= 0 then throw new Exception(\"User ID must be positive\")\n  \"Email\"\n\ntry\n  val pref = getUserAlertPreference(0)\n  println(s\"Preference: $pref\")\ncatch\n  case e: Exception => println(s\"Error getting preference: ${e.getMessage}\")"}
{"id":"666eb3cb-94da-4ef3-8236-a98c08c435a4","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"object AlertThresholds:\n  def checkThresholds(temp: Double): Unit =\n    if temp > 50 then throw new Exception(\"Temperature threshold exceeded\")\n    println(\"Thresholds normal\")\n\ntry\n  AlertThresholds.checkThresholds(55)\ncatch\n  case e: Exception => println(\"Alert: \" + e.getMessage)"}
{"id":"c64119a0-31a5-44ad-aa6b-c8f1c21e30eb","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def saveAlertToDatabase(alertMessage: String): Unit =\n  if alertMessage.length > 200 then throw new RuntimeException(\"Alert message too long\")\n  println(\"Alert saved: \" + alertMessage)\n\ntry\n  saveAlertToDatabase(\"A\" * 210)\ncatch\n  case e: RuntimeException => println(\"Failed to save alert: \" + e.getMessage)"}
{"id":"907ce734-d5f9-42b5-a0c5-cb1e10437835","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def parseAlertJson(jsonString: String): Int =\n  if !jsonString.contains(\"alertId\") then throw new Exception(\"Missing alertId\")\n  123\n\ntry\n  parseAlertJson(\"{}\")\ncatch\n  case e: Exception => println(\"JSON parsing error: \" + e.getMessage)"}
{"id":"4f913ad6-5570-4984-ba8a-0eada86917bf","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def scheduleAlertDispatch(minutes: Int): Unit =\n  if minutes < 0 then throw new Exception(\"Schedule time must be non-negative\")\n  println(s\"Dispatch scheduled in $minutes minutes.\")\n\ntry\n  scheduleAlertDispatch(-5)\ncatch\n  case e: Exception => println(\"Scheduling failure: \" + e.getMessage)"}
{"id":"423f679d-a72f-4216-8c27-919ecbfc415a","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertDeliveryException extends Exception\n\ndef deliverWeatherAlert(recipient: String): Unit =\n  if recipient == \"invalid@email.com\" then throw new AlertDeliveryException\n  println(s\"Sent weather alert to $recipient\")\n\ntry\n  deliverWeatherAlert(\"invalid@email.com\")\ncatch\n  case _: AlertDeliveryException => println(\"Alert delivery failure.\")"}
{"id":"a8d7adf7-984e-49ce-a0e1-d687832a554f","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait WeatherNotificationError\ncase class NetworkUnavailable(reason: String) extends WeatherNotificationError\ncase object InvalidUserSubscribe extends WeatherNotificationError\n\ndef subscribeToAlerts(userEmail: String): Either[WeatherNotificationError, String] =\n  if userEmail.isEmpty then Left(InvalidUserSubscribe)\n  else if userEmail.endsWith(\"@fail.com\") then Left(NetworkUnavailable(\"Service down\"))\n  else Right(\"Successfully subscribed\")\n\nsubscribeToAlerts(\"\") match\n  case Left(err)   => println(s\"Error: $err\")\n  case Right(msg)  => println(msg)"}
{"id":"36ff612c-f6c6-41d1-bec0-8328e091cbff","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class AlertMessage(content: String)\ndef safeAlertLength(alert: AlertMessage): Option[Int] =\n  Option.when(alert.content.length < 100)(alert.content.length)\n\nval result = safeAlertLength(AlertMessage(\"A long alert message\"))\nprintln(result)"}
{"id":"b9ae85b3-d84b-4d97-8e7b-8c67998bce30","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef safeParseTemperature(tempString: String): Try[Double] =\n  Try(tempString.toDouble)\nval parsed = safeParseTemperature(\"twenty\")\nparsed match\n  case scala.util.Success(value) => println(s\"Temperature: $value\")\n  case scala.util.Failure(ex)    => println(\"Could not parse temperature\")"}
{"id":"48d96a39-8701-4b19-8a1f-09b1dc0891e1","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait AlertUpdateError\ncase object AlertNotFound extends AlertUpdateError\ncase object PermissionDenied extends AlertUpdateError\n\ndef updateAlert(alertId: Int, user: String): Either[AlertUpdateError, String] =\n  if alertId < 0 then Left(AlertNotFound)\n  else if user != \"admin\" then Left(PermissionDenied)\n  else Right(\"Alert updated successfully\")\n\nval updateResult = updateAlert(1, \"guest\")\nprintln(updateResult)"}
{"id":"acc7bda7-7131-4708-82c4-d418e1a9bcf8","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def safeRecipientNotification(recipient: String): Option[String] =\n  if recipient.contains(\"@\") then Some(\"Notification sent\") else None\nval sent = safeRecipientNotification(\"weather@now.com\")\nprintln(sent)"}
{"id":"db5213e5-1013-4429-b1f0-8114478f9ee6","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait AlertParsingError\ncase object MalformedJson extends AlertParsingError\ncase object MissingAlertId extends AlertParsingError\n\ndef parseAlert(json: String): Either[AlertParsingError, Int] =\n  if !json.startsWith(\"{\") then Left(MalformedJson)\n  else if !json.contains(\"alertId\") then Left(MissingAlertId)\n  else Right(100)\n\nval parsed = parseAlert(\"{alertId:100}\")\nprintln(parsed)"}
{"id":"83a1d4e9-3e33-4db2-b490-7042f3ee086b","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WeatherAlert(priority: Int, message: String)\ndef validateAlert(alert: WeatherAlert): Either[String, WeatherAlert] =\n  if alert.priority < 1 then Left(\"Priority is too low\")\n  else if alert.message.isBlank then Left(\"Message is blank\")\n  else Right(alert)\nprintln(validateAlert(WeatherAlert(0, \"Severe storm\")))"}
{"id":"7a5c2f94-a71a-4979-9d5e-2165b96cdfb7","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def trySaveDeviceToken(token: String): scala.util.Try[String] =\n  scala.util.Try {\n    require(token.length > 10, \"Invalid device token\")\n    \"Token saved!\"\n  }\nval result = trySaveDeviceToken(\"123\")\nprintln(result)"}
{"id":"8dcb4f43-46d0-4f9f-8bab-3c4a2f83974e","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait DispatchError\ncase object InvalidDispatchTime extends DispatchError\n\ndef scheduleDispatch(timeMinutes: Int): Either[DispatchError, String] =\n  if timeMinutes < 0 then Left(InvalidDispatchTime)\n  else Right(\"Dispatch scheduled\")\nprintln(scheduleDispatch(-5))"}
{"id":"d19abeda-3e0c-4d85-a49b-4abb6a4a47ce","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class UserProfile(email: String, active: Boolean)\ndef getActiveUserEmail(profile: UserProfile): Option[String] =\n  if profile.active then Some(profile.email) else None\nval maybeEmail = getActiveUserEmail(UserProfile(\"john@weather.com\", false))\nprintln(maybeEmail)"}
{"id":"95cd0739-1e33-4568-a0e9-a2152881e010","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def safeLoadWeatherFeed(feedId: Int): Either[String, String] =\n  if feedId <= 0 then Left(\"Invalid feed ID\")\n  else Right(\"Feed loaded successfully\")\nprintln(safeLoadWeatherFeed(-1))"}
{"id":"e3e250f1-30c2-4ec4-9ca2-f4811c0cafcb","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class PaymentTransaction(amount: Double, cardNumber: String)\nsealed trait TransactionValidationError\ncase object AmountTooHigh extends TransactionValidationError\ncase object InvalidCardFormat extends TransactionValidationError\n\ndef validateTransaction(txn: PaymentTransaction): Either[TransactionValidationError, PaymentTransaction] =\n  if txn.amount > 10000 then Left(AmountTooHigh)\n  else if !txn.cardNumber.matches(\"\\\\d{16}\") then Left(InvalidCardFormat)\n  else Right(txn)\n"}
{"id":"c0e3ad84-c173-4387-8de8-a3d10719117a","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class FraudulentTransactionException(msg: String) extends Exception(msg)\nobject FraudRiskAnalyzer {\n  def analyze(transactionId: String): Int = {\n    if transactionId.isEmpty then throw new FraudulentTransactionException(\"Transaction ID missing\")\n    else 22 // risk score\n  }\n}\nval riskLevel = try {\n  FraudRiskAnalyzer.analyze(\"ID1234\")\n} catch {\n  case e: FraudulentTransactionException => -1\n}"}
{"id":"6e25653c-c0b6-4496-94b3-cc91605e8ece","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait RuleViolation\ncase class BlacklistedCard(cardNumber: String) extends RuleViolation\ncase object InvalidTransactionAmount extends RuleViolation\n\ndef checkTransactionRules(card: String, amount: Double): Option[RuleViolation] =\n  if card == \"0000111122223333\" then Some(BlacklistedCard(card))\n  else if amount < 0 then Some(InvalidTransactionAmount)\n  else None\n"}
{"id":"d8ec4b01-fb7b-4345-84ee-ad00d69295b2","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class CardCheckException(details: String) extends Exception(details)\ndef isCardValid(cardNum: String): Boolean =\n  if cardNum.startsWith(\"9999\") then throw new CardCheckException(\"Card blacklisted\")\n  else true\ntry {\n  isCardValid(\"9999888877776666\")\n} catch {\n  case e: CardCheckException => false\n}\n"}
{"id":"0bde18b3-6cdd-4705-8be3-f4cbd121f96b","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\ndef parseAmount(input: String): Try[Double] =\n  Try(input.toDouble)\nval attemptedAmount = parseAmount(\"350.75\").getOrElse(0.0)\n"}
{"id":"51852a0a-986d-4f84-ae83-b72822afd8a6","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def checkForSuspiciousLocation(location: String): String = {\n  if location == \"Unknown\" then throw new Exception(\"Suspicious location detected\")\n  else \"Location OK\"\n}\nvar result = \"\"\ntry {\n  result = checkForSuspiciousLocation(\"Unknown\")\n} catch {\n  case _: Exception => result = \"Fraud Alert\"\n}\n"}
{"id":"df64d29d-2a0e-4b6b-b045-97548fcce673","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait RiskDetectionError\ncase object IPBlacklisted extends RiskDetectionError\ncase object DeviceCompromised extends RiskDetectionError\n\ndef analyzeDevice(ip: String, device: String): Either[RiskDetectionError, String] =\n  if ip == \"192.0.2.0\" then Left(IPBlacklisted)\n  else if device == \"stolen-phone\" then Left(DeviceCompromised)\n  else Right(\"Device cleared\")\n"}
{"id":"8361b21f-6358-4f46-a4d0-1e59a53d53ae","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class PaymentDeclinedException(reason: String) extends Exception(reason)\ndef processPayment(amount: Double): Boolean =\n  if amount > 5000 then throw new PaymentDeclinedException(\"Amount exceeds limit\")\n  else true\nvar success = false\ntry {\n  success = processPayment(7000)\n} catch {\n  case _: PaymentDeclinedException => success = false\n}\n"}
{"id":"e2269f98-5af4-4647-a58b-c00e6ad27b18","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\ndef decodeFraudScore(json: String): Try[Int] =\n  Try(json.toInt)\nval result = decodeFraudScore(\"abc\").recover { case _ => -1 }.get\n"}
{"id":"c3d472df-07ad-4346-b216-2022cba2ad20","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def verifyUserEmail(email: String): Boolean = {\n  if !email.contains(\"@\") then throw new Exception(\"Invalid email for verification\")\n  else true\n}\nval verified = try {\n  verifyUserEmail(\"test_at_domain.com\")\n} catch {\n  case _: Exception => false\n}\n"}
{"id":"c6abcbb7-79ae-4d35-8c2e-140fb8153c95","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait AlertGenerationError\ncase object ContactInfoMissing extends AlertGenerationError\ncase object NotificationFailure extends AlertGenerationError\n\ndef sendFraudAlert(contact: Option[String]): Either[AlertGenerationError, String] =\n  contact match\n    case Some(addr) => Right(s\"Alert sent to $addr\")\n    case None => Left(ContactInfoMissing)\n"}
{"id":"550ea411-8df3-40e8-b458-afb6a6bdf64b","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def escalateToManualReview(transactionId: String): Unit = {\n  if transactionId.length < 5 then throw new Exception(\"Transaction ID too short for review\")\n}\ntry {\n  escalateToManualReview(\"abc\")\n} catch {\n  case e: Exception => println(\"Manual review failed: \" + e.getMessage)\n}\n"}
{"id":"0ef49a59-5d05-474f-ae48-371133e864c6","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class PaymentInfo(userId: String, amount: Double)\nsealed trait FraudDetectionError\ncase object NegativeAmount extends FraudDetectionError\n\ndef detectFraud(payment: PaymentInfo): Either[FraudDetectionError, String] =\n  if payment.amount < 0 then Left(NegativeAmount)\n  else Right(\"No fraud detected\")\n"}
{"id":"45b3ec29-f431-4646-a816-14a1bfabb192","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class BankMismatchException(msg: String) extends Exception(msg)\ndef verifyBankAccount(userBank: String, recipientBank: String): Boolean =\n  if userBank != recipientBank then throw new BankMismatchException(\"Bank details do not match\")\n  else true\ntry {\n  verifyBankAccount(\"BANKA\", \"BANKB\")\n} catch {\n  case _: BankMismatchException => false\n}\n"}
{"id":"148173bc-b283-406c-be59-af2bf25b6e86","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\ncase class Event(eventType: String)\ndef safeEventParse(input: String): Try[Event] =\n  Try(Event(input))\nval parsed = safeEventParse(\"Payment\")\n"}
{"id":"ead2f391-bdf4-4848-9b6d-da215c93d19d","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def inspectTransactionHistory(history: List[Double]): String = {\n  if history.exists(_ > 100000) then throw new Exception(\"Unusual transaction detected\")\n  \"History OK\"\n}\nval verdict = try {\n  inspectTransactionHistory(List(120000, 2500, 3300))\n} catch {\n  case _: Exception => \"Manual inspection required\"\n}\n"}
{"id":"6cb04e48-de70-4f78-a92f-40ec092a7d72","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait VerificationError\ncase object PhoneMismatch extends VerificationError\n\ndef verifyPhoneNumber(submitted: String, expected: String): Either[VerificationError, String] =\n  if submitted == expected then Right(\"Phone verified\")\n  else Left(PhoneMismatch)\n"}
{"id":"0be7ee57-0f70-4ebe-ba5e-ebe56370c6e2","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def flagRepetitiveTransactions(ids: List[String]): String = {\n  if ids.distinct.length < ids.length then throw new Exception(\"Repetitive transactions detected\")\n  \"All transactions unique\"\n}\nval outcome = try {\n  flagRepetitiveTransactions(List(\"T1\", \"T2\", \"T1\"))\n} catch {\n  case _: Exception => \"Investigate fraud\"\n}\n"}
{"id":"e00c390e-449f-4b84-9a6d-ccd7f40c85a6","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\ndef safeFraudLabel(f: Double): Try[String] =\n  Try(if f > 0.8 then \"High Risk\" else \"Low Risk\")\nval fraudResult = safeFraudLabel(0.9)\n"}
{"id":"255ebfc5-8e1f-4c0e-85ad-d91a63120c30","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class InvalidPaymentChannelException extends Exception(\"Unknown payment channel\")\ndef validatePaymentChannel(channel: String): Boolean =\n  if channel != \"card\" && channel != \"bank\" then throw new InvalidPaymentChannelException()\n  else true\ntry {\n  validatePaymentChannel(\"crypto\")\n} catch {\n  case _: InvalidPaymentChannelException => println(\"Channel not accepted.\")\n}\n"}
{"id":"b040abf2-9dfc-431c-a73e-b38e0b16b039","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class Payment(id: String, amount: Double, userId: String)\ncase class Transaction(id: String, status: String)\nsealed trait PaymentValidationError\ncase object SuspiciousLocation extends PaymentValidationError\ncase object ExceededAmountLimit extends PaymentValidationError\n\ndef validatePayment(payment: Payment): Either[PaymentValidationError, Transaction] =\n  if payment.amount > 10000 then Left(ExceededAmountLimit)\n  else if payment.userId == \"suspicious_user\" then Left(SuspiciousLocation)\n  else Right(Transaction(payment.id, \"validated\"))"}
{"id":"1116e4bb-fe37-4247-b233-8df713304dec","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class SuspiciousTransactionException(message: String) extends Exception(message)\n\ndef checkTransaction(transactionId: String, checksPassed: Boolean): Boolean =\n  if !checksPassed then\n    throw new SuspiciousTransactionException(s\"Transaction $transactionId failed checks.\")\n  true"}
{"id":"d4c3e6a0-d404-4f54-9a5c-94c62c118183","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait FraudDetectionError\ncase object PhoneMismatch extends FraudDetectionError\ncase object DeviceMismatch extends FraudDetectionError\n\ncase class PaymentInfo(phone: String, deviceId: String)\n\ndef analyzeDevice(payment: PaymentInfo): Either[FraudDetectionError, String] =\n  if payment.phone != \"123-456-7890\" then Left(PhoneMismatch)\n  else if payment.deviceId != \"trusted-device\" then Left(DeviceMismatch)\n  else Right(\"Device Trusted\")"}
{"id":"4e5d57ec-318d-4d43-bb0b-937f54dde8fb","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def analyzeGeoLocation(location: String): Boolean =\n  if location == \"unknown\" then\n    throw new RuntimeException(\"Possible GeoLocation Fraud Detected!\")\n  true"}
{"id":"d934f396-185c-434c-b6a0-2a715c41f70c","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseTransactionAmount(amountStr: String): Try[Double] =\n  Try(amountStr.toDouble)"}
{"id":"e18493be-7a03-48a6-a772-dbb5b90fbd48","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def raiseFraudAlert(userId: String, reason: String): Unit =\n  throw new IllegalStateException(s\"Alert for $userId: $reason\")\n\ntry\n  raiseFraudAlert(\"u1234\", \"Multiple rapid failed payments\")\ncatch\n  case e: IllegalStateException => println(e.getMessage)"}
{"id":"57982413-143f-4669-a3f7-13a175ab8818","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object CardBlacklisted extends PaymentError\ncase object LimitExceeded extends PaymentError\n\ndef checkBlacklist(cardNumber: String): Option[PaymentError] =\n  if cardNumber.startsWith(\"9999\") then Some(CardBlacklisted)\n  else None"}
{"id":"e262eca3-e7d3-41d1-a661-a56da1395ed5","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def processCustomerPayment(amount: Double): String =\n  try\n    if amount <= 0 then throw new IllegalArgumentException(\"Negative amount!\")\n    else if amount > 5000 then throw new Exception(\"Threshold exceeded!\")\n    \"Payment processed\"\n  catch\n    case ex: IllegalArgumentException => \"Invalid payment amount\"\n    case _: Exception => \"Fraud threshold breach\""}
{"id":"837c2677-c73c-4d87-95e2-ddc095bdea85","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safePaymentCheck(amount: Double): Try[String] =\n  Try {\n    require(amount > 0, \"Amount must be positive\")\n    \"Payment checked successfully\"\n  }"}
{"id":"7c89c35f-fe65-47c7-a3d6-525ce060a2f9","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"case class Card(number: String, expiry: Int)\n\ndef expireCardCheck(card: Card): String =\n  if card.expiry < 2024 then\n    throw new Exception(\"Card expired: Possible fraud attempt\")\n  \"Card valid\""}
{"id":"b662518b-ba09-430f-9e2f-31579aa27370","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait VerificationError\ncase object OTPMismatch extends VerificationError\ncase object OTPExpired extends VerificationError\n\ndef verifyOTP(otp: String, expected: String, isExpired: Boolean): Either[VerificationError, String] =\n  if isExpired then Left(OTPExpired)\n  else if otp != expected then Left(OTPMismatch)\n  else Right(\"OTP Verified\")"}
{"id":"fa7bf5f5-4459-43c8-86ca-4961e4149bce","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def reportUnusualActivity(accountId: String, riskScore: Int): Unit =\n  if riskScore > 80 then\n    throw new SecurityException(s\"Fraud risk detected for $accountId\")\n  ()"}
{"id":"4a64c7c5-141b-4f0e-b3a9-aff6fc55fb21","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait FraudFlaggingError\ncase object AccountFlagged extends FraudFlaggingError\ncase class FlaggingSuccess(flagId: String)\n\ndef flagAccount(accountId: String, suspicious: Boolean): Either[FraudFlaggingError, FlaggingSuccess] =\n  if suspicious then Left(AccountFlagged)\n  else Right(FlaggingSuccess(accountId))"}
{"id":"fc877a00-2d13-4560-8b49-186c698e929a","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def handleCardMismatch(cardHolderInput: String, record: String): String =\n  try\n    if cardHolderInput != record then throw new IllegalArgumentException(\"Card holder mismatch\")\n    \"Card holder verified\"\n  catch\n    case _: IllegalArgumentException => \"Mismatch detected: Possible fraud\""}
{"id":"6266e37b-8c5f-43aa-8435-36e81e8b1bb1","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeTokenGeneration(paymentId: String, active: Boolean): Try[String] =\n  Try {\n    if !active then sys.error(\"Inactive payment for token generation\")\n    s\"token-$paymentId\"\n  }"}
{"id":"194e639c-9675-4af9-833d-f564cedee268","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def updateRiskScore(userId: String, score: Int): Unit =\n  try\n    if score < 0 then throw new IllegalArgumentException(\"Negative risk score\")\n    else println(s\"Risk score updated for $userId\")\n  catch\n    case e: Exception => println(\"Error updating risk score: \" + e.getMessage)"}
{"id":"8c2f8267-0ecf-44dc-9962-d44cb849310d","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait TransactionReviewError\ncase object HighVelocityFraud extends TransactionReviewError\ncase object AmountExceedsDailyLimit extends TransactionReviewError\ncase class SuccessfulReview(txnId: String)\n\ndef reviewTransaction(velocity: Int, amount: Double, txnId: String): Either[TransactionReviewError, SuccessfulReview] =\n  if velocity > 15 then Left(HighVelocityFraud)\n  else if amount > 2000 then Left(AmountExceedsDailyLimit)\n  else Right(SuccessfulReview(txnId))"}
{"id":"2bf94562-3020-4ff3-8657-7b5a64647414","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def exceptionIfSuspicious(activity: String): String =\n  if activity == \"unusual\" then\n    throw new IllegalAccessException(\"Suspicious user activity detected!\")\n  \"Activity normal\""}
{"id":"766de02f-85cb-405c-9253-9b8c72219d46","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"case class PaymentAttempt(id: String, retries: Int)\ncase class TooManyFailedAttempts(message: String) extends Exception(message)\n\ndef checkRetries(attempt: PaymentAttempt): String =\n  if attempt.retries >= 3 then throw new TooManyFailedAttempts(\"Card locked due to retries\")\n  \"Payment attempt allowed\""}
{"id":"1cbe0ed0-3691-40fa-add1-982ad085a3bb","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class AccountVerificationError(message: String)\n\ndef validateAccountEmail(email: String): Either[AccountVerificationError, String] =\n  if !email.contains(\"@\") then Left(AccountVerificationError(\"Invalid email format\"))\n  else Right(\"Account email verified\")"}
{"id":"6d551649-8b3e-4ed6-ab68-9d5924f3bc81","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"case class ImageNotFound(imageId: String) extends Exception(s\"Image $imageId not found\")\ndef loadDicomImage(imageId: String): Array[Byte] = {\n  if (imageId == \"\") throw new ImageNotFound(imageId)\n  Array.fill(10)(0.toByte)\n}"}
{"id":"63223202-f79a-4aed-b5b0-36baa41ea830","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def parsePatientMeta(data: String): Map[String, String] = {\n  try {\n    val parts = data.split(\";\")\n    parts.map(_.split(\":\"))\n      .map { arr =>\n        if (arr.length != 2) throw new IllegalArgumentException(\"Malformed data\")\n        arr(0) -> arr(1)\n      }.toMap\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Failed to parse patient metadata\", e)\n  }\n}"}
{"id":"fedccc08-76b0-4431-a79b-d8936b3fa13c","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def displayImageInViewer(imageBytes: Array[Byte]): Unit = {\n  if (imageBytes.length == 0)\n    throw new IllegalArgumentException(\"Cannot display: empty image data\")\n  println(\"Rendering MRI scan...\")\n}"}
{"id":"84a5f462-4218-45d5-bbd5-9352dddff9df","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class PatientInfoMissing(msg: String) extends Exception(msg)\ndef fetchPatientSummary(patientId: String): String = {\n  if (patientId == null) throw new PatientInfoMissing(\"Patient ID is missing\")\n  \"Patient summary\"\n}"}
{"id":"f5ac72a3-961d-4a4d-b826-d46629183aeb","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def loadSegmentationMask(path: String): Array[Int] = {\n  try {\n    if (!path.endsWith(\".seg\")) throw new IllegalArgumentException(\"Invalid segmentation mask file\")\n    Array(1,2,3,4,5)\n  } catch {\n    case e: Exception => throw e\n  }\n}"}
{"id":"c5ed82c9-160d-4c46-8831-5c5201a27010","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def updateViewingWindow(level: Int, width: Int): Unit = {\n  if (level < 0 || width < 0)\n    throw new IllegalArgumentException(\"Window parameters cannot be negative\")\n}"}
{"id":"e9cb6718-25ff-4c9b-9987-9a855be01be8","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object DicomServer {\n  def connect(url: String): Unit = {\n    if (url == null || !url.startsWith(\"dicom://\")) throw new Exception(\"Invalid DICOM server URL\")\n    println(\"Connected to DICOM server\")\n  }\n}"}
{"id":"99fc26d5-e2d1-498d-8274-f961bdcf05d8","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getSeriesDescription(seriesId: String): String = {\n  try {\n    if (seriesId.isEmpty)\n      throw new Exception(\"Series ID not provided\")\n    \"Series: Head MRI\"\n  } catch {\n    case e: Exception =>\n      println(\"Error: \" + e.getMessage)\n      \"Unknown series\"\n  }\n}"}
{"id":"ad3a0531-d520-46c3-8a21-8d6abd3170c6","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def show3DRendering(volume: Option[Array[Short]]): Unit = {\n  volume match {\n    case Some(arr) if arr.isEmpty =>\n      throw new Exception(\"3D volume data is empty\")\n    case Some(_) => println(\"3D volume rendering...\")\n    case None => throw new Exception(\"No 3D volume data supplied\")\n  }\n}"}
{"id":"76d1835b-6be3-4222-97dd-4afe8a436005","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def saveImageSnapshot(snapshot: Array[Byte], filePath: String): Boolean = {\n  try {\n    if (!filePath.endsWith(\".png\"))\n      throw new Exception(\"Snapshot file path must end with .png\")\n    true\n  } catch {\n    case _ : Exception => false\n  }\n}"}
{"id":"614c1023-552e-4158-ad1c-f3fa7355d970","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait ImagingError\ncase object DicomFileMissing extends ImagingError\ncase class CorruptImageFile(path: String) extends ImagingError\ndef readDicomFile(path: String): Either[ImagingError, Array[Byte]] = {\n  if (!path.endsWith(\".dcm\")) Left(DicomFileMissing)\n  else if (path.contains(\"corrupt\")) Left(CorruptImageFile(path))\n  else Right(Array.fill(10)(1.toByte))\n}"}
{"id":"62a6eb92-3142-4952-84cb-2f65f1a0e6fe","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef decodePixelData(data: Array[Byte]): Try[Array[Int]] = Try {\n  if (data.isEmpty) throw new RuntimeException(\"Empty pixel data\")\n  data.map(_.toInt)\n}"}
{"id":"a991e1bb-e381-4e76-b0cd-63bed292d736","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait PatientDataError\ncase object PatientRecordAbsent extends PatientDataError\ndef retrievePatientRecord(patientUid: String): Either[PatientDataError, String] = {\n  if (patientUid.nonEmpty) Right(\"Patient demographic data\")\n  else Left(PatientRecordAbsent)\n}"}
{"id":"2038f1fb-92e3-416a-a80f-28b9e385d275","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def parseAnnotationJson(jsonStr: String): Option[Map[String, String]] = {\n  if (jsonStr.trim.isEmpty) None\n  else Some(Map(\"annotation\" -> \"Lesion Segment\"))\n}"}
{"id":"ec294398-3c09-40b2-8797-21682d0ef94b","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait ExportError\ncase object FileAlreadyExists extends ExportError\ndef exportDicomSeries(seriesId: String, path: String): Either[ExportError, Unit] = {\n  if (path.endsWith(\"existing.dcm\")) Left(FileAlreadyExists)\n  else Right(println(\"Exported DICOM series\"))\n}"}
{"id":"27d8e075-a558-4a05-81ea-02aaaee8d4dc","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"import scala.util.Try\ndef safeResizeVolume(volume: Array[Short], newSize: Int): Try[Array[Short]] = Try {\n  if (newSize <= 0) throw new IllegalArgumentException(\"Invalid volume size\")\n  Array.fill(newSize)(0.toShort)\n}"}
{"id":"bba0f024-214d-4eb1-80c4-59c802df9b5f","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait MaskApplyError\ncase object MaskNotFound extends MaskApplyError\ndef applySegmentationMask(mask: Option[Array[Int]], imageSize: Int): Either[MaskApplyError, Array[Int]] =\n  mask match {\n    case Some(arr) if arr.length == imageSize => Right(arr)\n    case Some(_) => Left(MaskNotFound)\n    case None => Left(MaskNotFound)\n  }"}
{"id":"4e9b88d1-f3b4-47c0-9caa-0131cfaffc15","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def safeGetSeries(series: List[String], idx: Int): Option[String] =\n  if (idx >= 0 && idx < series.length) Some(series(idx))\n  else None"}
{"id":"9a7bf7c5-7b73-417a-9a4a-6fd83c955c01","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"import scala.util.Try\ndef tryLoadThumbnail(imageBytes: Array[Byte]): Try[Array[Byte]] = Try {\n  if (imageBytes.length < 10) throw new Exception(\"Image data insufficient for thumbnail\")\n  imageBytes.take(10)\n}"}
{"id":"17c40ec8-15fd-49da-8b45-478563d2d61b","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait WindowAdjustError\ncase object InvalidWindowParameters extends WindowAdjustError\ndef adjustWindow(level: Int, width: Int): Either[WindowAdjustError, (Int, Int)] = {\n  if (level >= 0 && width > 0) Right((level, width))\n  else Left(InvalidWindowParameters)\n}"}
{"id":"80777719-cd7a-4af8-b860-ec6e37846ab4","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class DicomLoadError(message: String)\ndef loadDicomFile(filename: String): Either[DicomLoadError, Array[Byte]] =\n  if filename.endsWith(\".dcm\") then\n    Right(Array.fill(256)(0.toByte))\n  else\n    Left(DicomLoadError(s\"Unsupported format for file: $filename\"))"}
{"id":"395ab86f-d32f-4c24-9d48-82aead58c6eb","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def loadVolume(path: String): Array[Byte] =\n  if path.isEmpty then throw new IllegalArgumentException(\"Path cannot be empty\")\n  if !path.endsWith(\".nii\") then throw new RuntimeException(\"Only Nifti files supported\")\n  Array.tabulate(512)(i => (i % 256).toByte)"}
{"id":"eee89fc7-5ba8-4443-8807-9f2d49575ff5","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait SegmentationError\ncase object MaskNotFound extends SegmentationError\ncase object InvalidMaskDimensions extends SegmentationError\n\ndef readSegmentationMask(file: String): Either[SegmentationError, Array[Array[Int]]] =\n  if file.contains(\"nomask\") then Left(MaskNotFound)\n  else if !file.endsWith(\".mask\") then Left(InvalidMaskDimensions)\n  else Right(Array.ofDim[Int](128,128))"}
{"id":"d1ce9a80-29b7-4603-8e07-965c13049725","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getSlice(imageSlices: Seq[Array[Int]], index: Int): Array[Int] =\n  try\n    imageSlices(index)\n  catch case ex: IndexOutOfBoundsException =>\n    throw new RuntimeException(\"Requested image slice does not exist\")"}
{"id":"8a9b299b-07c9-479f-8a1f-111e24b2d099","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait ViewerError\ncase object InvalidZoomLevel extends ViewerError\n\ncase class ImageView(state: String)\ndef setZoom(level: Double): Either[ViewerError, ImageView] =\n  if level > 0.1 && level < 10.0 then Right(ImageView(s\"Zoom:$level\"))\n  else Left(InvalidZoomLevel)"}
{"id":"376aaede-894c-4e0a-a7ab-47837350c302","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def showImage(imageOpt: Option[Array[Byte]]): Array[Byte] =\n  imageOpt match\n    case Some(img) => img\n    case None => throw new NoSuchElementException(\"No image data to display.\")"}
{"id":"091c4d26-c83d-4839-850c-185bfa29f091","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"import scala.util.Try\ndef parseVoxelValue(str: String): Try[Int] =\n  scala.util.Try(str.toInt)"}
{"id":"42bce820-0f9e-44a0-95e1-28b0fc57f75a","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def adjustWindowLevel(pixels: Array[Int], window: Int, level: Int): Array[Int] =\n  if window < 1 then throw new RuntimeException(\"Invalid window: Must be positive\")\n  pixels.map(v => (v - level + window / 2).max(0))"}
{"id":"1fa17b27-2ab1-43c2-9c8b-9f2606be7d9e","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class ImageReadError(detail: String)\ndef readPatientImage(patientId: String): Either[ImageReadError, Array[Short]] =\n  if patientId.nonEmpty then Right(Array.fill(1024)(42.toShort))\n  else Left(ImageReadError(\"Missing patient ID.\"))"}
{"id":"b4fc8817-3863-4e01-8e74-1f7bcf2a7b24","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def parseDicomHeader(header: String): Map[String, String] =\n  try\n    header.split(\";\").map(_.split(\":\")).map(arr => arr(0) -> arr(1)).toMap\n  catch case _: Exception => throw new RuntimeException(\"Corrupted DICOM header.\")"}
{"id":"bfd1b57b-af3a-4f3c-989e-c8db2d8851f3","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait RenderingError\ncase class ColorMapUnsupported(mode: String) extends RenderingError\n\ndef renderColorMap(data: Array[Int], mode: String): Either[RenderingError, Array[Int]] =\n  if mode == \"grayscale\" then Right(data)\n  else Left(ColorMapUnsupported(mode))"}
{"id":"8aafb07a-f3bb-44f5-aa93-8c6dbe54d83b","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def displaySeries(series: List[Array[Byte]], idx: Int): Array[Byte] =\n  try\n    if idx < 0 || idx >= series.length then throw new IndexOutOfBoundsException(\"Invalid series index\")\n    series(idx)\n  catch case e: Exception => throw new RuntimeException(\"Could not display series\")"}
{"id":"6cb18caa-fa60-426e-887f-637904ab0d8a","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class MetadataParsingError(desc: String)\ndef parseImageMetadata(tags: Map[String, String]): Either[MetadataParsingError, Int] =\n  tags.get(\"Resolution\") match\n    case Some(value) => Either.cond(value.forall(_.isDigit), value.toInt, MetadataParsingError(\"Non-numeric resolution\"))\n    case None => Left(MetadataParsingError(\"Missing Resolution tag\"))"}
{"id":"28ddbe20-925f-4c8c-bdd8-b6e88297cbc7","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def saveLabeledImage(path: String, labelMask: Array[Boolean]): Unit =\n  if path.isEmpty then throw new IllegalArgumentException(\"Path cannot be empty for saving.\")\n  if labelMask.isEmpty then throw new RuntimeException(\"Empty label mask.\")\n  ()"}
{"id":"f2d789fa-b9b8-41e0-bd1c-70dd11af07e8","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class FileOpenError(file: String)\ndef openDicomDirectory(folder: String): Either[FileOpenError, List[String]] =\n  if folder == \"/valid\" then Right(List(\"image1.dcm\", \"image2.dcm\"))\n  else Left(FileOpenError(folder))"}
{"id":"fa5dfd07-1087-4d33-bee1-36aff7097461","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def normalizeImageValues(values: Array[Int]): Array[Double] =\n  try\n    val min = values.min\n    val max = values.max\n    values.map(v => (v - min).toDouble / (max - min))\n  catch case ex: Exception => throw new RuntimeException(\"Image normalization failed.\")"}
{"id":"5dcfc7dc-f16a-425b-b3f4-043bf3840c4c","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"import scala.util.{Try,Success,Failure}\ndef tryLoadNifti(filename: String): Try[Array[Float]] =\n  scala.util.Try(Array.fill(256)(0.75f))"}
{"id":"51f8ce57-1a0f-42fe-a441-9ac4432fa410","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def removeArtifact(image: Array[Int], artifactId: Int): Array[Int] =\n  if artifactId < 0 then throw new IllegalArgumentException(\"Invalid artifact ID.\")\n  image.filter(_ != artifactId)"}
{"id":"200ba16c-44cc-447c-9b86-b45a9bb5e9dc","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class OverlayError(reason: String)\ndef applyOverlay(base: Array[Int], overlay: Option[Array[Int]]): Either[OverlayError, Array[Int]] =\n  overlay match\n    case Some(mask) if mask.length == base.length =>\n      Right(base.zip(mask).map((b, o) => b + o))\n    case _ => Left(OverlayError(\"Invalid overlay mask.\"))"}
{"id":"eadb4296-1710-4392-80ee-206477fc9106","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait ThumbnailError\ncase object EmptyImageArray extends ThumbnailError\n\ndef generateThumbnails(images: Seq[Array[Byte]]): Either[ThumbnailError, Seq[Array[Byte]]] =\n  if images.nonEmpty then Right(images.take(5))\n  else Left(EmptyImageArray)"}
{"id":"52390393-fa16-4583-9040-d8ade927fd24","timestamp":1746101028322,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkCreationRequest(amount: BigDecimal, currency: String)\nsealed trait PaymentLinkError\ncase object InvalidAmount extends PaymentLinkError\ncase object UnsupportedCurrency extends PaymentLinkError\n\ndef validatePaymentLinkRequest(req: PaymentLinkCreationRequest): Either[PaymentLinkError, PaymentLinkCreationRequest] =\n  if req.amount <= 0 then Left(InvalidAmount)\n  else if req.currency != \"USD\" then Left(UnsupportedCurrency)\n  else Right(req)"}
{"id":"0a45135d-1b5b-48c1-b674-0bd04f183345","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkCreationException(message: String) extends Exception(message)\n\nobject PaymentLinkService {\n  def createPaymentLink(amount: BigDecimal, currency: String): String = {\n    if (amount <= 0)\n      throw new PaymentLinkCreationException(\"Amount must be positive.\")\n    if (currency != \"USD\")\n      throw new PaymentLinkCreationException(\"Only USD is supported.\")\n    s\"link-for-$amount-$currency\"\n  }\n}"}
{"id":"132eda20-15d2-4bcc-8bd0-976e4abbcc19","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkValidationError\ncase object PaymentLinkIdNotFound extends PaymentLinkValidationError\ncase object PaymentLinkExpired extends PaymentLinkValidationError\n\ncase class PaymentLinkDetails(id: String, valid: Boolean)\n\ndef getActivePaymentLink(id: String): Either[PaymentLinkValidationError, PaymentLinkDetails] =\n  if id.isEmpty then Left(PaymentLinkIdNotFound)\n  else if id == \"expired\" then Left(PaymentLinkExpired)\n  else Right(PaymentLinkDetails(id, true))"}
{"id":"035dfd9e-a8ff-4c9c-b9a4-ded9031c715c","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkNotFoundException extends Exception(\"Payment link not found.\")\n\nobject PaymentLinkRepository {\n  def fetchPaymentLink(linkId: String): PaymentLinkDetails = {\n    if (linkId.isEmpty)\n      throw new PaymentLinkNotFoundException\n    else\n      PaymentLinkDetails(linkId, true)\n  }\n}"}
{"id":"bf419865-d83a-44a0-a78c-10eb286b9f81","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkProcessingError\ncase object DuplicatePaymentLink extends PaymentLinkProcessingError\ncase object InvalidPaymentLinkStatus extends PaymentLinkProcessingError\n\ncase class PaymentLink(id: String, status: String)\n\ndef processPaymentLink(link: PaymentLink): Either[PaymentLinkProcessingError, String] =\n  link.status match\n    case \"active\"  => Right(s\"Processed ${link.id}\")\n    case \"pending\" => Left(InvalidPaymentLinkStatus)\n    case _ if link.id == \"duplicate\" => Left(DuplicatePaymentLink)\n    case _ => Right(s\"Handled ${link.id}\")"}
{"id":"9907d1e9-06f6-455d-bf9f-b05f1b624c68","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class DuplicatePaymentLinkException extends Exception\n\nobject PaymentLinkProcessor {\n  def process(link: PaymentLink): String = {\n    if (link.id == \"duplicate\")\n      throw new DuplicatePaymentLinkException\n    if (link.status == \"invalid\")\n      throw new RuntimeException(\"Invalid payment link status.\")\n    s\"Processed ${link.id}\"\n  }\n}"}
{"id":"e05adb89-9398-4801-87fe-f2657ca71c14","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safelyGeneratePaymentLinkId(userId: String): Try[String] =\n  Try {\n    if userId.isEmpty then throw new IllegalArgumentException(\"User ID missing.\")\n    \"plink-\" + userId.take(8)\n  }"}
{"id":"e2be8993-8aa0-4cf9-89e9-c08459593d02","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkIdGenerator {\n  def generate(userId: String): String = {\n    try {\n      if (userId == null)\n        throw new NullPointerException(\"User ID is null.\")\n      else\n        \"plink-\" + userId.take(8)\n    } catch {\n      case e: Exception => \"error-invalid-user-id\"\n    }\n  }\n}"}
{"id":"d4e8732f-8b51-478c-8cde-2e8a82e5fb3f","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkAccessError\ncase class PaymentLinkUnauthorized(userId: String) extends PaymentLinkAccessError\n\ncase class PaymentLinkInfo(linkId: String, owner: String)\n\ndef verifyAccess(link: PaymentLinkInfo, userId: String): Either[PaymentLinkAccessError, PaymentLinkInfo] =\n  if link.owner == userId then Right(link)\n  else Left(PaymentLinkUnauthorized(userId))"}
{"id":"a56c3b96-b904-491f-8633-b974cbbcf8ef","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkAccessVerifier {\n  def verify(link: PaymentLinkInfo, userId: String): PaymentLinkInfo = {\n    if (link.owner != userId)\n      throw new SecurityException(\"User not authorized to access this payment link\")\n    link\n  }\n}"}
{"id":"accf5e6a-c467-4d34-9df6-452b11b39746","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def findPaymentLinkByCode(code: String): Option[PaymentLinkDetails] =\n  if code.nonEmpty then Some(PaymentLinkDetails(code, true))\n  else None"}
{"id":"4c3f5754-9d3e-433f-9e35-4259944093fe","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkFinder {\n  def findByCode(code: String): PaymentLinkDetails = {\n    if (code.isEmpty)\n      throw new NoSuchElementException(\"Payment link code missing.\")\n    PaymentLinkDetails(code, true)\n  }\n}"}
{"id":"ed80c01f-8ee3-466f-b147-f383087184ef","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkUpdateError\ncase object PaymentLinkLocked extends PaymentLinkUpdateError\n\ncase class PaymentLinkUpdateRequest(id: String, amount: BigDecimal)\n\ndef updatePaymentLink(req: PaymentLinkUpdateRequest, locked: Boolean): Either[PaymentLinkUpdateError, PaymentLinkUpdateRequest] =\n  if locked then Left(PaymentLinkLocked)\n  else Right(req)"}
{"id":"23750ac9-a38d-464d-80d1-4f6e28d0c8ab","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkUpdater {\n  def update(req: PaymentLinkUpdateRequest, locked: Boolean): PaymentLinkUpdateRequest = {\n    if (locked)\n      throw new IllegalStateException(\"Payment link is locked.\")\n    req\n  }\n}"}
{"id":"4f8c6ab9-5502-426c-91b0-8a9921acb6ff","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def parsePaymentLinkRequest(json: String): Option[PaymentLinkCreationRequest] =\n  if json.startsWith(\"{\\\"amount\\\"\") then Some(PaymentLinkCreationRequest(100, \"USD\"))\n  else None"}
{"id":"6e19dd27-f92e-45d1-9044-556df26cc408","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkRequestParser {\n  def parse(json: String): PaymentLinkCreationRequest = {\n    if (!json.startsWith(\"{\\\"amount\\\"\"))\n      throw new IllegalArgumentException(\"Invalid payment link request JSON.\")\n    PaymentLinkCreationRequest(100, \"USD\")\n  }\n}"}
{"id":"172dec35-c7ea-4915-81e0-6c888405743f","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safelyDeletePaymentLink(link: PaymentLinkDetails): Try[String] =\n  Try {\n    if !link.valid then throw new RuntimeException(\"Link invalid.\")\n    s\"Deleted ${link.id}\"\n  }"}
{"id":"7fa2358d-69d7-466b-adc0-5b79261ff5cf","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkDeleter {\n  def delete(link: PaymentLinkDetails): String = {\n    try {\n      if (!link.valid)\n        throw new RuntimeException(\"Payment link is invalid.\")\n      s\"Deleted ${link.id}\"\n    } catch {\n      case _: Exception => \"Could not delete payment link.\"\n    }\n  }\n}"}
{"id":"77b8046a-8a70-419f-bcf5-2b068b13879a","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def markPaymentLinkAsExpired(linkId: String): Option[String] =\n  if linkId == \"\" then None\n  else Some(s\"Marked $linkId as expired\")"}
{"id":"7ca96ce0-6fc3-4729-8aaa-1089b7b81ca3","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkExpiryMarker {\n  def mark(linkId: String): String = {\n    if (linkId == \"\")\n      throw new IllegalArgumentException(\"Payment link ID cannot be empty.\")\n    s\"Marked $linkId as expired\"\n  }\n}"}
{"id":"5397887d-497a-4864-b67b-8b7fc8a1eb85","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkId(id: String)\ncase class PaymentLinkNotFound(id: PaymentLinkId)\ncase class PaymentLinkDeactivated(id: PaymentLinkId)\nsealed trait PaymentLinkError\nobject PaymentLinkError {\n  case class NotFound(id: PaymentLinkId) extends PaymentLinkError\n  case class Deactivated(id: PaymentLinkId) extends PaymentLinkError\n}\ndef fetchActivePaymentLink(id: PaymentLinkId): Either[PaymentLinkError, String] = {\n  if id.id == \"404\" then Left(PaymentLinkError.NotFound(id))\n  else if id.id == \"999\" then Left(PaymentLinkError.Deactivated(id))\n  else Right(s\"PaymentLinkInfo#${id.id}\")\n}"}
{"id":"2493c816-658e-46a2-90cf-410c7c069d98","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkMissingException(val linkId: String) extends Exception(s\"Payment Link $linkId not found\")\ndef getPaymentLinkSecret(linkId: String): String = {\n  if(linkId.isEmpty) throw new PaymentLinkMissingException(linkId)\n  s\"secret-for-$linkId\"\n}\ndef retrievePaymentSecret(linkId: String): String = {\n  try {\n    getPaymentLinkSecret(linkId)\n  } catch {\n    case e: PaymentLinkMissingException => \"DEFAULT_SECRET\"\n  }\n}"}
{"id":"1d78e634-9118-4855-8d3f-7dfdd965296a","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkValidationError\nobject PaymentLinkValidationError {\n  case object InvalidAmount extends PaymentLinkValidationError\n  case object InvalidCurrency extends PaymentLinkValidationError\n}\ndef validatePaymentLinkInput(amount: BigDecimal, currency: String): Either[PaymentLinkValidationError, Unit] = {\n  if amount <= 0 then Left(PaymentLinkValidationError.InvalidAmount)\n  else if currency.length != 3 then Left(PaymentLinkValidationError.InvalidCurrency)\n  else Right(())\n}"}
{"id":"5a7cccb6-c590-4a89-862e-65db4c8bbbcf","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class CurrencyMismatchException(cur: String) extends Exception(s\"Unsupported currency: $cur\")\ndef checkCurrency(linkId: String, currency: String): String = {\n  if(currency != \"USD\" && currency != \"EUR\")\n    throw new CurrencyMismatchException(currency)\n  s\"Currency $currency is valid for PaymentLink $linkId\"\n}"}
{"id":"b74a4d8c-5bde-4c45-a216-17e2b61c14c9","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"import scala.util.Try\ncase class PaymentLink(id: String)\ndef tryToActivatePaymentLink(link: PaymentLink): Try[PaymentLink] = Try {\n  if link.id.startsWith(\"deactivated\") then\n    throw new IllegalStateException(\"Cannot activate deactivated link\")\n  else PaymentLink(link.id)\n}"}
{"id":"a2989eb7-6648-416d-bebc-ea31ee503859","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def getPaymentAmount(linkId: String): BigDecimal = {\n  if(linkId == \"unknown\")\n    throw new RuntimeException(\"Payment link not found\")\n  else 25.00\n}\ndef safeAmountRetrieval(linkId: String): Option[BigDecimal] = {\n  try Some(getPaymentAmount(linkId))\n  catch {\n    case _: RuntimeException => None\n  }\n}"}
{"id":"9d3d3463-4e84-4ad6-a039-69270bfbfffa","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkManagerError\ncase object InvalidStatusTransition extends PaymentLinkManagerError\ndef updatePaymentLinkStatus(current: String, next: String): Either[PaymentLinkManagerError, String] = {\n  if current == \"closed\" && next == \"active\" then Left(InvalidStatusTransition)\n  else Right(next)\n}"}
{"id":"3a4e4d62-8a82-4bed-b297-bd9b30518eeb","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkInactiveException extends Exception(\"Payment link is inactive\")\ndef processLink(linkId: String, active: Boolean): Boolean = {\n  if(!active) throw new PaymentLinkInactiveException\n  true\n}"}
{"id":"1133fa32-5a30-4e49-a3cc-d3dc1106af53","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"import scala.util.Try\ncase class PaymentLinkInfo(id: String, active: Boolean)\ndef parsePaymentLinkInfo(payload: String): Try[PaymentLinkInfo] = Try {\n  val parts = payload.split(\":\")\n  if parts.length != 2 then throw new IllegalArgumentException(\"Malformed payload\")\n  PaymentLinkInfo(parts(0), parts(1) == \"true\")\n}"}
{"id":"5a65fada-f68d-421e-9511-34a095201b32","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def deactivatePaymentLink(linkId: String): Unit = {\n  if linkId == \"blocked\" then throw new IllegalAccessException(\"Blocked link\")\n}\ndef tryDeactivate(linkId: String): Boolean = {\n  try {\n    deactivatePaymentLink(linkId)\n    true\n  } catch {\n    case _: IllegalAccessException => false\n  }\n}"}
{"id":"b323c58d-722d-45eb-b4c0-262e62d008fd","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkOperationError\nobject PaymentLinkOperationError {\n  case object AlreadyDeactivated extends PaymentLinkOperationError\n}\ndef safelyDeactivateLink(isActive: Boolean): Either[PaymentLinkOperationError, Boolean] = {\n  if !isActive then Left(PaymentLinkOperationError.AlreadyDeactivated)\n  else Right(true)\n}"}
{"id":"97ebc8d7-0c36-4a6e-a78c-9ddacb5cba9f","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class ExpiredPaymentLinkException extends Exception(\"Link has expired\")\ndef fetchLinkOrThrow(id: String, expired: Boolean): String = {\n  if expired then throw new ExpiredPaymentLinkException\n  s\"Link-$id\"\n}"}
{"id":"e5e06425-4936-4f87-b9c9-15622f8fb8d5","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def findPaymentLinkById(linkId: String): Option[String] = {\n  if linkId.nonEmpty && linkId.forall(_.isDigit) then Some(s\"PL-$linkId\")\n  else None\n}\ndef getOwnerFromLinkId(linkId: String): Option[String] = {\n  findPaymentLinkById(linkId).map(_ => \"owner-123\")\n}"}
{"id":"1aa0a928-44ce-4b79-b59c-b14d313f2ce2","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def requireValidToken(token: String): Unit = {\n  if token != \"wix-secure\" then throw new SecurityException(\"Invalid token\")\n}\ndef validateAndProcess(token: String): Boolean = {\n  try {\n    requireValidToken(token)\n    true\n  } catch {\n    case _: SecurityException => false\n  }\n}"}
{"id":"f104fbfe-2ab7-4777-a957-09b1dd7a91cd","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkCreationError\nobject PaymentLinkCreationError {\n  case object EmptyTitle extends PaymentLinkCreationError\n  case object TitleTooLong extends PaymentLinkCreationError\n}\ndef createNewPaymentLink(title: String): Either[PaymentLinkCreationError, String] = {\n  if title.isEmpty then Left(PaymentLinkCreationError.EmptyTitle)\n  else if title.length > 60 then Left(PaymentLinkCreationError.TitleTooLong)\n  else Right(s\"link:${title.hashCode}\")\n}"}
{"id":"846bb147-90d3-4973-9eac-7a72d6867121","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def deletePaymentLink(linkId: String): Unit = {\n  if linkId == \"default\" then throw new Exception(\"Cannot delete reserved link\")\n}\ndef performLinkDeletion(linkId: String): Boolean = {\n  try {\n    deletePaymentLink(linkId)\n    true\n  } catch {\n    case _: Exception => false\n  }\n}"}
{"id":"8bb74840-dc8f-46b0-83c3-94edb5430723","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef readPaymentLinkAmount(link: String): Try[BigDecimal] = Try {\n  if link == \"faulty\" then throw new ArithmeticException(\"Corrupted amount\")\n  BigDecimal(\"10.99\")\n}\ndef recoverAmount(link: String): BigDecimal = {\n  readPaymentLinkAmount(link).getOrElse(BigDecimal(0))\n}"}
{"id":"8f1acce0-6b8a-4afe-9ebb-d0e70aeeb485","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def unsafeEncodeLink(linkId: String): String = {\n  if linkId.contains(\"/\") then throw new IllegalArgumentException(\"Illegal char in id\")\n  java.util.Base64.getEncoder.encodeToString(linkId.getBytes)\n}\ndef safeEncodeLink(linkId: String): String = {\n  try\n    unsafeEncodeLink(linkId)\n  catch {\n    case _: IllegalArgumentException => \"INVALID_ID\"\n  }\n}"}
{"id":"3c56e2cb-9c84-4182-bc90-6856b7c94fd1","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait LinkPublishingError\nobject LinkPublishingError {\n  case object InvalidLocale extends LinkPublishingError\n}\ndef publishPaymentLink(locale: String): Either[LinkPublishingError, String] = {\n  if locale.nonEmpty && (locale == \"en-US\" || locale == \"fr-FR\") then Right(\"published\")\n  else Left(LinkPublishingError.InvalidLocale)\n}"}
{"id":"12b1aca5-9fe9-4ca5-8bd1-e72ebb325a8b","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkAccessDeniedException extends Exception(\"No access to this Payment Link\")\ndef accessPaymentLink(linkId: String, isAdmin: Boolean): String = {\n  if !isAdmin then throw new PaymentLinkAccessDeniedException\n  s\"Access granted to $linkId\"\n}"}
{"id":"9e7fe274-ba96-4fdc-a9c9-b300540bfaea","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait TranslationError\ncase object UnsupportedLanguage extends TranslationError\ncase object EmptyInput extends TranslationError\ncase class NetworkError(reason: String) extends TranslationError\n\ndef translateText(text: String, languageCode: String): Either[TranslationError, String] =\n  if text.isEmpty then Left(EmptyInput)\n  else if languageCode != \"en\" && languageCode != \"fr\" then Left(UnsupportedLanguage)\n  else Right(s\"[$languageCode] $text\")"}
{"id":"66f38ae0-ce65-4e9e-9a16-061fbcff43c5","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def translateOrThrow(text: String, targetLanguage: String): String =\n  if text == null || text.isEmpty then throw new IllegalArgumentException(\"Input text is empty\")\n  else if targetLanguage != \"en\" && targetLanguage != \"es\" then throw new RuntimeException(\"Language not supported\")\n  else s\"[$targetLanguage] $text\""}
{"id":"09619273-a522-4142-b582-275a88919735","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeParseConfidence(confidenceStr: String): Try[Double] =\n  Try(confidenceStr.toDouble)"}
{"id":"e71e1761-d4b6-4300-9259-af60c9a7951f","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def getTranslation(text: String, lang: String): String =\n  try {\n    if lang == \"de\" then throw new UnsupportedOperationException(\"German not available\")\n    s\"Translated $text to $lang\"\n  } catch {\n    case e: UnsupportedOperationException => \"Error: \" + e.getMessage\n  }"}
{"id":"ff1110ab-7ec9-4575-838c-c6270054de98","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ChatBotError\ncase class DetectionError(details: String) extends ChatBotError\ncase class TranslationServiceError(msg: String) extends ChatBotError\n\ncase class DetectedLanguage(code: String)\n\ndef detectLanguage(text: String): Either[ChatBotError, DetectedLanguage] =\n  if text.trim.isEmpty then Left(DetectionError(\"No text provided\"))\n  else Right(DetectedLanguage(\"en\"))"}
{"id":"9c386d4e-a969-4eff-892a-79c1571529f8","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def fetchLanguageMetadata(lang: String): String =\n  try {\n    if lang == \"zz\" then throw new IllegalArgumentException(\"Invalid language code\")\n    s\"Metadata for language: $lang\"\n  } catch {\n    case e: IllegalArgumentException => \"Failed: \" + e.getMessage\n  }"}
{"id":"4612c75a-5559-41b3-96d7-6021ff36484d","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class TranslationResult(original: String, translated: String)\n\ndef performTranslation(input: String): Option[TranslationResult] =\n  if input.forall(_.isLetter) then\n    Some(TranslationResult(input, s\"Translation of $input\"))\n  else\n    None"}
{"id":"e995243c-d351-485a-a609-64f4093b70ba","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def parseLocaleOrThrow(info: String): String =\n  try {\n    if info.length != 2 then throw new RuntimeException(\"Locale string must be two characters long\")\n    info.toUpperCase\n  } catch {\n    case e: RuntimeException => \"Error: \" + e.getMessage\n  }"}
{"id":"a047acb3-705b-48e0-8108-390b4788d21b","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait BotValidationError\ncase object MissingInput extends BotValidationError\ncase object TextTooLong extends BotValidationError\n\ndef validateUserMessage(message: String): Either[BotValidationError, String] =\n  if message.isEmpty then Left(MissingInput)\n  else if message.length > 200 then Left(TextTooLong)\n  else Right(message)"}
{"id":"e0043241-d1d4-497e-9874-acb965dee0f7","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def getSupportedLanguages(m: String): List[String] =\n  try {\n    if m == \"\" then throw new Exception(\"Input required\")\n    List(\"en\", \"fr\", \"es\")\n  } catch {\n    case e: Exception => List(e.getMessage)\n  }"}
{"id":"b651dfdf-2e2e-4b10-9be3-5a5a11be09ce","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class LanguageTag(tag: String)\ndef extractLanguageTag(line: String): Option[LanguageTag] =\n  val tagPattern = \"[a-z]{2}\".r\n  tagPattern.findFirstIn(line).map(LanguageTag(_))"}
{"id":"54657a3d-31f7-41f3-9650-dda035beb841","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def chatBotResponse(input: String): String =\n  try {\n    if input == null then throw new NullPointerException(\"Null user input\")\n    \"Chatbot: \" + input.reverse\n  } catch {\n    case _: NullPointerException => \"Oops! Something went wrong.\"\n  }"}
{"id":"670beba8-c8b3-4011-aab8-8799b0bd6737","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def mapTextToLanguage(text: String, code: String): Option[String] =\n  if code == \"en\" || code == \"fr\" then Some(s\"[$code] $text\")\n  else None"}
{"id":"79154c1a-ec99-405b-bdb2-5c6fc5001f12","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def languageDetectionOrThrow(sentence: String): String =\n  if sentence.trim == \"\" then\n    throw new IllegalArgumentException(\"Empty input; cannot detect language.\")\n  else if sentence.endsWith(\"?\") then\n    \"en\"\n  else\n    \"fr\""}
{"id":"7e130bb6-1aa8-49f9-af80-e4b6f28eaef8","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef attemptTranslation(s: String): Try[String] =\n  Try {\n    if s.forall(_.isDigit) then throw new Exception(\"Input cannot be only digits\")\n    \"Translated: \" + s\n  }"}
{"id":"113c44aa-b47d-407b-b066-0e51669b9acb","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def replyWithDetectedLanguage(msg: String): String =\n  try {\n    if msg.contains(\"bonjour\") then \"fr\"\n    else if msg == \"\" then throw new RuntimeException(\"No message to detect\")\n    else \"en\"\n  } catch {\n    case e: Exception => s\"Detection failed: ${e.getMessage}\"\n  }"}
{"id":"25cf6da1-c34c-4014-997e-e70713a3eac7","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ResponseError\ncase class LengthExceeded(max: Int) extends ResponseError\ncase object MalformedMessage extends ResponseError\n\ndef safeReply(message: String): Either[ResponseError, String] =\n  if message.isEmpty then Left(MalformedMessage)\n  else if message.length > 150 then Left(LengthExceeded(150))\n  else Right(s\"Reply: $message\")"}
{"id":"6750195e-94a3-4531-9942-3a94720b412c","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def fetchTranslationOrRaise(sentence: String, lang: String): String =\n  if sentence == null then throw new NullPointerException(\"Sentence is null\")\n  else if lang == \"jp\" then throw new UnsupportedOperationException(\"Japanese unsupported\")\n  else s\"[$lang] $sentence\""}
{"id":"ddedf342-93e4-4c31-8daa-7f008e1c1e92","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def upperCaseOrNone(s: String): Option[String] =\n  if s.exists(_.isLower) then Some(s.toUpperCase) else None"}
{"id":"96b0a5cc-56f1-45c0-93eb-05807937285a","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def responseWithErrorHandling(input: String): String =\n  try {\n    if input.nonEmpty then \"Reponse: OK\"\n    else throw new Exception(\"Empty input\")\n  } catch {\n    case e: Exception => \"Error: \" + e.getMessage\n  }"}
{"id":"e048885d-6469-4943-ac9e-2fe558ab2630","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object Translator {\n  def translateText(text: String, targetLang: String): String = {\n    if (text.isEmpty) {\n      throw new IllegalArgumentException(\"Input text cannot be empty\")\n    }\n    if (targetLang != \"en\" && targetLang != \"es\") {\n      throw new UnsupportedOperationException(\"Target language not supported\")\n    }\n    s\"[$targetLang] $text\"\n  }\n}"}
{"id":"47ac8648-e84f-4b0d-ba2c-e6f5a9726ac5","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def detectLanguage(phrase: String): String = {\n  try {\n    if (phrase.contains(\"¿\")) \"es\"\n    else if (phrase.matches(\".*[a-zA-Z].*\")) \"en\"\n    else throw new RuntimeException(\"Unable to detect language\")\n  } catch {\n    case ex: RuntimeException => \"unknown\"\n  }\n}"}
{"id":"974ca015-5482-4671-b8a8-0e43c970c34d","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class InputValidationException(msg: String) extends Exception(msg)\ndef validateQuery(query: String): Unit = {\n  if (query.trim.isEmpty) {\n    throw new InputValidationException(\"Query cannot be blank\")\n  }\n}"}
{"id":"e8ff4c0b-85c6-4a83-8ffa-c811afccfe31","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def parseUserMessage(message: String): (String, String) = {\n  try {\n    val parts = message.split(\":\", 2)\n    if (parts.length != 2) {\n      throw new IllegalArgumentException(\"Message must contain ':' delimiter\")\n    }\n    (parts(0).trim, parts(1).trim)\n  } catch {\n    case ex: Exception => (\"unknown\", \"invalid\")\n  }\n}"}
{"id":"509893de-5f9e-40dd-ba24-e0b903ffc13f","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def getSupportedLanguages(): List[String] = {\n  try {\n    List(\"en\", \"es\", \"fr\", \"de\")\n  } catch {\n    case _: Exception => throw new Exception(\"Failed to retrieve supported languages\")\n  }\n}"}
{"id":"fb1197e9-e52e-45df-9b2e-c8054a85301a","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object TranslatorLogger {\n  def recordError(error: Throwable): Unit = {\n    println(\"Translation bot error: \" + error.getMessage)\n  }\n  def translateWithLogging(sentence: String, language: String): String = {\n    try {\n      if (sentence.isEmpty) throw new Exception(\"Sentence missing\")\n      s\"[$language] $sentence\"\n    } catch {\n      case ex: Exception =>\n        recordError(ex)\n        \"Translation failed\"\n    }\n  }\n}"}
{"id":"9ab22e72-1a57-4ed9-ba63-453e47e11ac5","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def getBotResponse(input: String): String = {\n  try {\n    if (input.toLowerCase == \"hello\") \"¡Hola!\"\n    else if (input.toLowerCase == \"bye\") \"¡Adiós!\"\n    else throw new Exception(\"Unknown input\")\n  } catch {\n    case ex: Exception => ex.getMessage\n  }\n}"}
{"id":"77bb2aef-6cf4-4dfd-ad2c-0efa77e03a2b","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def handleTranslationRequest(request: String, lang: String): String = {\n  if (lang == \"xx\") {\n    throw new RuntimeException(\"Language xx is not supported.\")\n  } else {\n    s\"[$lang] $request\"\n  }\n}"}
{"id":"3cde612e-7278-472f-a140-acc09f9edb1d","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def getLanguageCode(country: String): String = {\n  try {\n    country match {\n      case \"Spain\" => \"es\"\n      case \"USA\" => \"en\"\n      case _ => throw new Exception(\"Country not recognized\")\n    }\n  } catch {\n    case e: Exception => \"unknown\"\n  }\n}"}
{"id":"796b795d-4f4c-4080-a305-b8a844f3e8aa","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class BotConnectionException(msg: String) extends Exception(msg)\ndef sendMessageToTranslationBot(msg: String): String = {\n  if (msg.startsWith(\"error\")) {\n    throw new BotConnectionException(\"Connection failed for message: \" + msg)\n  }\n  \"Bot received: \" + msg\n}"}
{"id":"54463715-c89e-43b8-97fb-20552f3435af","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait TranslationError\ncase object NoInputProvided extends TranslationError\ncase object LanguageNotSupported extends TranslationError\ncase class SuccessResponse(translation: String)\ndef performTranslation(text: String, target: String): Either[TranslationError, SuccessResponse] = {\n  if (text.isEmpty) Left(NoInputProvided)\n  else if (target != \"en\" && target != \"es\") Left(LanguageNotSupported)\n  else Right(SuccessResponse(s\"[$target] $text\"))\n}"}
{"id":"5c52ac93-eeca-4fd2-97e5-fb5669128d92","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ParseMessageError\ncase object MissingDelimiter extends ParseMessageError\ncase object EmptyMessage extends ParseMessageError\ndef parseBotMessage(msg: String): Either[ParseMessageError, (String, String)] = {\n  if (msg.isEmpty) Left(EmptyMessage)\n  else {\n    msg.split(\":\", 2).toList match {\n      case user :: text :: Nil => Right((user.trim, text.trim))\n      case _ => Left(MissingDelimiter)\n    }\n  }\n}"}
{"id":"efb92b2f-97f7-4560-a063-84325847246c","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def optionDetectLanguage(sentence: String): Option[String] = {\n  if (sentence.matches(\"[a-zA-Z]+\")) Some(\"en\")\n  else if (sentence.contains(\"¿\")) Some(\"es\")\n  else None\n}"}
{"id":"905880fd-2e9e-40da-91e0-f7b6d997481f","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ResponseBuilderError\ncase object MissingContent extends ResponseBuilderError\ndef buildBotResponse(content: Option[String]): Either[ResponseBuilderError, String] = {\n  content match {\n    case Some(value) => Right(s\"Bot: $value\")\n    case None => Left(MissingContent)\n  }\n}"}
{"id":"e78027cc-eca9-4577-8677-e4b4a71fa179","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def safeTranslate(input: String, language: String): Option[String] = {\n  if (input.nonEmpty && (language == \"en\" || language == \"es\")) Some(s\"Translated: $input to $language\")\n  else None\n}"}
{"id":"3ce2f2f1-76b6-4058-af3c-cc33610613bf","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"import scala.util.Try\ncase class ChatUser(name: String)\ndef safeGetUsername(params: Map[String, String]): Try[ChatUser] = Try {\n  val username = params.getOrElse(\"username\", throw new Exception(\"Missing username\"))\n  ChatUser(username)\n}"}
{"id":"92b3caf6-ce56-4c01-8bc6-c2df2f389ae3","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ChatBotApiError\ncase object ApiTimeout extends ChatBotApiError\ncase object InvalidApiKey extends ChatBotApiError\ndef checkApiKey(key: String): Either[ChatBotApiError, String] = {\n  if (key == \"abc123\") Right(\"Key valid\")\n  else Left(InvalidApiKey)\n}"}
{"id":"08337e7f-8ac8-4b68-8a0d-9477fa330c4d","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"import scala.util.Try\ncase class PhraseDetected(language: String)\ndef tryDetectLanguage(text: String): Try[PhraseDetected] = Try {\n  if (text.contains(\"holla\")) PhraseDetected(\"es\")\n  else if (text.contains(\"hello\")) PhraseDetected(\"en\")\n  else throw new Exception(\"Detection failed\")\n}"}
{"id":"93ff8482-6be5-4567-a5b1-627d85cf9fac","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def composeTranslations(sentence: String, languages: List[String]): Either[String, List[String]] = {\n  if (sentence.isEmpty) Left(\"No sentence provided\")\n  else Right(languages.map(lang => s\"[$lang] $sentence\"))\n}"}
{"id":"72a41abd-a382-4522-bee6-43eccea1bd4d","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ConnectionError\ncase object Disconnected extends ConnectionError\ndef connectToTranslationBot(isConnected: Boolean): Either[ConnectionError, String] = {\n  if (isConnected) Right(\"Connected to bot\")\n  else Left(Disconnected)\n}"}
{"id":"0e487ad4-20d0-4f2f-a802-5419c97fd009","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def extractLanguageFromMessage(msg: String): Option[String] = {\n  val knownLanguages = Set(\"en\", \"es\")\n  msg.split(\" \").find(knownLanguages.contains)\n}"}
{"id":"789fbdbb-5c0d-44b3-9a6b-b50ec5f7c1a4","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class PowerReading(timestamp: Long, kilowatts: Double)\nsealed trait DashboardError\ncase object NoReadingsFound extends DashboardError\n\ndef latestReading(readings: List[PowerReading]): Either[DashboardError, PowerReading] =\n  readings.sortBy(_.timestamp).lastOption.toRight(NoReadingsFound)"}
{"id":"1b7c3c68-3e24-4258-b97c-73ff7e143974","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ConsumptionRecord(appliance: String, usageKwh: Double)\nsealed trait ValidationError\ncase class NegativeUsage(appliance: String) extends ValidationError\n\ndef validateUsage(record: ConsumptionRecord): Either[ValidationError, ConsumptionRecord] =\n  if record.usageKwh < 0 then Left(NegativeUsage(record.appliance)) else Right(record)"}
{"id":"00cbe23a-c10f-4b7c-afe0-ded1d23e7b98","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object DashboardExceptions:\n  class DeviceNotFoundException(name: String) extends Exception(s\"Device '$name' not found\")\n\ndef getDevicePowerUsage(device: String, usages: Map[String, Double]): Double =\n  if usages.contains(device) then usages(device)\n  else throw new DashboardExceptions.DeviceNotFoundException(device)"}
{"id":"bfe62440-697d-4e65-a51b-0d10c176331c","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def averageDailyConsumption(records: List[Double]): Double =\n  if records.isEmpty then throw new IllegalArgumentException(\"No records for calculation\")\n  else records.sum / records.size\n\ntry\n  val avg = averageDailyConsumption(List())\ncatch\n  case e: IllegalArgumentException => println(s\"Error: ${e.getMessage}\")"}
{"id":"549a0b9b-cbda-4db8-896e-2d198528d6ac","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseMeterValue(reading: String): Try[Double] =\n  Try(reading.toDouble)"}
{"id":"084cc318-83cf-4087-8919-eff3c85e59b4","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait AnalysisError\ncase object EmptyHistory extends AnalysisError\ncase class SpikeDetected(value: Double) extends AnalysisError\n\ndef checkForSpike(history: List[Double]): Either[AnalysisError, Double] =\n  history match\n    case Nil => Left(EmptyHistory)\n    case values if values.max > 5000 => Left(SpikeDetected(values.max))\n    case _ => Right(history.max)"}
{"id":"a7b99b24-dfcc-46a0-ab19-31b63cd59ce7","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def calculateConsumptionIncrease(prev: Double, curr: Double): Double =\n  if prev < 0 || curr < 0 then throw new RuntimeException(\"Negative values not allowed\")\n  (curr - prev) / prev\n\ntry\n  println(calculateConsumptionIncrease(-10, 150))\ncatch\n  case e: Exception => println(e.getMessage)"}
{"id":"fdd8e308-1be7-4154-937a-7f088894d206","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def retrieveBuildingEnergyData(id: String): String =\n  id match\n    case \"B001\" => \"Building B001 consumption data\"\n    case _ => throw new Exception(\"Unknown building ID\")"}
{"id":"ced9e0af-b321-4a82-b712-8d80eea8a1db","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait MeterError\ncase object MeterOffline extends MeterError\ncase class InvalidMeterData(details: String) extends MeterError\ncase class Meter(value: Double)\n\ndef safelyReadMeter(raw: String, online: Boolean): Either[MeterError, Meter] =\n  if !online then Left(MeterOffline)\n  else\n    raw.toDoubleOption match\n      case Some(v) => Right(Meter(v))\n      case None => Left(InvalidMeterData(raw))"}
{"id":"39cb5314-06f1-4492-9b81-a52e2e33370b","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def sumSectionConsumptions(sections: Map[String, Double]): Double =\n  if sections.isEmpty then throw new NoSuchElementException(\"No sections provided\")\n  sections.values.sum"}
{"id":"2628505d-cec1-4ed6-ac69-365e088c06c5","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def computeDailyCost(usage: Double, rate: Double): Option[Double] =\n  if usage < 0 || rate < 0 then None else Some(usage * rate)"}
{"id":"2f3c0497-e971-4a9e-b7c2-2dd075a2f3be","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait GenerationError\ncase object NoSolarPanels extends GenerationError\n\ndef calculateSolarGeneration(panels: Int, output: Double): Either[GenerationError, Double] =\n  if panels == 0 then Left(NoSolarPanels) else Right(panels * output)"}
{"id":"b41fb1ab-16ed-4be8-8ccb-f5f9488bd659","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def fetchHourlyRecord(records: Map[Int, Double], hour: Int): Double =\n  records.get(hour) match\n    case Some(v) => v\n    case None => throw new IllegalArgumentException(\"Hour not recorded\")"}
{"id":"9744d657-6d88-4000-af9c-b32fbf7975b9","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def earliestOutage(outages: List[Long]): Long =\n  if outages.isEmpty then throw new Exception(\"No outages recorded\")\n  outages.min\n\ntry\n  println(earliestOutage(Nil))\ncatch\n  case e: Exception => println(e.getMessage)"}
{"id":"62e8520e-1a00-4b0a-934d-f8d00b507198","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDivideEnergy(a: Double, b: Double): Try[Double] =\n  Try(a / b)"}
{"id":"7ece914e-ee26-4878-b4bc-6b4d20629c0d","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ApplianceUsage(appliance: String, value: Double)\n\ndef findUsageByName(usages: List[ApplianceUsage], name: String): Option[ApplianceUsage] =\n  usages.find(_.appliance == name)"}
{"id":"be8c8cae-41e1-4c10-9101-5abb9cb6f366","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def meterInputAsDouble(input: String): Double =\n  try input.toDouble\n  catch case e: NumberFormatException => throw new Exception(\"Invalid meter value\")"}
{"id":"0ca596b8-4adc-4379-8a8e-23389b35a7bf","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait AlertValidationError\ncase object NullMessage extends AlertValidationError\ncase object TooShortMessage extends AlertValidationError\n\ndef validateAlertMessage(msg: String): Either[AlertValidationError, String] =\n  if msg == null then Left(NullMessage)\n  else if msg.length < 4 then Left(TooShortMessage)\n  else Right(msg)"}
{"id":"72eb57ba-fe8c-4b8b-9cac-52f21bd4068f","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def transformEnergyUnit(value: Double, from: String, to: String): Double =\n  (from, to) match\n    case (\"kWh\", \"Wh\") => value * 1000\n    case (\"Wh\", \"kWh\") => value / 1000\n    case _ => throw new UnsupportedOperationException(\"Unsupported energy unit\")"}
{"id":"915e7731-4ed2-4a4d-af0e-24d0b05fd958","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def parseReadingOrZero(raw: String): Double =\n  try raw.toDouble\n  catch case _ : Throwable => 0.0"}
{"id":"596f5ad4-30ee-4779-9ed2-bc93244f49e4","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait EnergyDashboardError\ncase object DeviceNotFound extends EnergyDashboardError\ncase object InvalidConsumptionValue extends EnergyDashboardError\ncase class FailedToStoreReading(reason: String) extends EnergyDashboardError\n\ndef addEnergyReading(deviceId: String, consumption: Double): Either[EnergyDashboardError, String] =\n  if deviceId.isEmpty then Left(DeviceNotFound)\n  else if consumption < 0 then Left(InvalidConsumptionValue)\n  else Right(\"Reading successfully added\")"}
{"id":"5fd1f0f3-9484-4426-8225-5c0a8a72e971","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def retrieveTotalConsumption(userId: String): Double = {\n  if (userId == null || userId == \"\") throw new IllegalArgumentException(\"User ID is required\")\n  if (userId == \"blocked_user\") throw new RuntimeException(\"User access blocked\")\n  124.7\n}"}
{"id":"c68438a2-bfb7-41c7-a8ea-dec1c7822b24","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ConsumptionQueryError(message: String)\n\ndef fetchConsumptionForDate(date: String): Option[Double] =\n  if date.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\") then Some(45.3)\n  else None"}
{"id":"a4f7f622-6a48-427c-8f4a-79224d799e7c","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def recordSmartMeterData(meterId: String, reading: Double): String = {\n  if (reading < 0) throw new IllegalArgumentException(\"Negative reading not allowed\")\n  if (meterId == \"\") throw new NoSuchElementException(\"Meter ID required\")\n  \"Data recorded\"\n}"}
{"id":"f6a2aa1c-b8e8-46cb-aef0-095b37d59286","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait DeviceError\ncase object MeterOffline extends DeviceError\ncase object MeterMalfunction extends DeviceError\n\ndef checkMeterState(meterId: String): Either[DeviceError, String] =\n  if meterId == \"offline123\" then Left(MeterOffline)\n  else if meterId == \"fail999\" then Left(MeterMalfunction)\n  else Right(\"Meter operational\")"}
{"id":"0f0086de-c061-4376-bd1c-f48ce1985357","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def loadBuildingConsumption(buildingId: String): Double = {\n  try {\n    if (buildingId.length < 3) throw new IllegalArgumentException(\"Invalid building Id\")\n    372.2\n  } catch {\n    case _: IllegalArgumentException => 0.0\n  }\n}"}
{"id":"06879ca1-2ff3-4eec-814f-43cda4bccbc3","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseSensorValue(value: String): Try[Double] =\n  Try(value.toDouble)"}
{"id":"95129584-5ca1-47de-ad65-ce016818de84","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getEnergyCost(rate: Double, usage: Double): Double = {\n  if (rate < 0.0) throw new NumberFormatException(\"Invalid rate\")\n  if (usage < 0.0) throw new ArithmeticException(\"Usage cannot be negative\")\n  rate * usage\n}"}
{"id":"b28e7c8e-e3d0-4cd3-8896-c54499502c0d","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class UserValidationError(reason: String)\n\ndef validateUserAccess(userId: String): Either[UserValidationError, Boolean] =\n  if userId == \"suspended\" then Left(UserValidationError(\"User suspended\"))\n  else Right(true)"}
{"id":"539e46e1-e8ae-4320-ba2f-e070f2fe616b","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def monitorGridStatus(region: String): String = {\n  try {\n    if (region == \"down_zone\") throw new IllegalStateException(\"Grid down\")\n    \"Grid online\"\n  } catch {\n    case e: IllegalStateException => \"Error: \" + e.getMessage\n  }\n}"}
{"id":"c3b0585f-6ea0-4a6f-aa77-cd2a9b07fa7f","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait DashboardCalculationError\ncase object DivisionByZero extends DashboardCalculationError\ncase object NoReadingsAvailable extends DashboardCalculationError\n\ndef calculateAverageEnergy(readings: List[Double]): Either[DashboardCalculationError, Double] =\n  if readings.isEmpty then Left(NoReadingsAvailable)\n  else if readings.length == 0 then Left(NoReadingsAvailable)\n  else Right(readings.sum / readings.size)\n"}
{"id":"6bf05186-3ec2-499d-815e-a2296dd80236","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def updateTariffPlan(planId: String): String = {\n  if (planId == null) throw new NullPointerException(\"Plan Id is null\")\n  if (planId == \"OBSOLETE\") throw new UnsupportedOperationException(\"Tariff plan obsolete\")\n  \"Tariff updated\"\n}"}
{"id":"9c84346d-d389-461f-9eea-880581a304e7","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def parseReadingInput(input: String): Option[Double] =\n  try Some(input.trim.toDouble)\n  catch case _: NumberFormatException => None"}
{"id":"96fa0fb2-dc73-44e9-b8fd-52bfd9215581","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def storeUserPreferences(userId: String, preferences: Map[String, String]): Boolean = {\n  try {\n    if (preferences.contains(\"illegal\")) throw new RuntimeException(\"Illegal Preference\")\n    true\n  } catch {\n    case _: RuntimeException => false\n  }\n}"}
{"id":"ef9c6039-b8c6-417d-88a8-92e0cafc8a67","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"import scala.util.Try\ncase class MeterProcessingError(msg: String)\n\ndef processMeterReading(reading: String): Either[MeterProcessingError, Double] =\n  Try(reading.toDouble).toEither.left.map(_ => MeterProcessingError(\"Invalid meter reading\"))"}
{"id":"ffd76d73-7b11-44ec-80e6-f96f7aa34561","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def refreshEnergySourcesStatus(sources: List[String]): Unit = {\n  sources.foreach(source => {\n    if (source == \"disconnected\") throw new Exception(\"Source disconnected\")\n  })\n}"}
{"id":"e4d3135a-7ee0-455e-affd-cba9c764d93d","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def fetchAlertStatus(alertId: String): Option[String] =\n  if alertId == \"expired\" then None else Some(\"Active\")"}
{"id":"cfd69479-742b-4a1b-9828-d0ab142e2ae4","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def persistConsumptionReport(reportId: String): String = {\n  try {\n    if (reportId.endsWith(\"ERR\")) throw new IllegalStateException(\"Invalid report Id\")\n    \"Report persisted\"\n  } catch {\n    case ex: IllegalStateException => \"Failed: \" + ex.getMessage\n  }\n}"}
{"id":"c495618f-69f4-4b05-aad1-0ee727726b0e","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDivisionEnergy(numerator: Double, denominator: Double): Try[Double] =\n  Try(numerator/denominator)"}
{"id":"c33ca592-628e-4851-9a89-ccd8d6301fe7","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def connectSensor(sensorId: String): Boolean = {\n  try {\n    if (sensorId == \"blocked_sensor\") throw new Exception(\"Sensor connection failed\")\n    true\n  } catch {\n    case _: Exception => false\n  }\n}"}
{"id":"49b5858c-64d5-4dde-b537-1537eed70619","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Ballot(id: String, choices: List[String])\nsealed trait BallotValidationError\ncase object MissingVoterId extends BallotValidationError\ncase object NoChoicesSelected extends BallotValidationError\n\ndef validateBallot(ballot: Ballot): Either[BallotValidationError, Ballot] =\n  if ballot.id.isEmpty then Left(MissingVoterId)\n  else if ballot.choices.isEmpty then Left(NoChoicesSelected)\n  else Right(ballot)"}
{"id":"7811433e-1cc3-4888-8c8a-a794849943b6","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class InvalidTallyDataException(msg: String) extends Exception(msg)\n\nobject VoteTallying {\n  def tallyVotes(results: Map[String, Int]): Int = {\n    if (results.values.exists(_ < 0))\n      throw new InvalidTallyDataException(\"Negative vote counts detected\")\n    results.values.sum\n  }\n}"}
{"id":"8f33873d-ece1-4bea-a721-ff89604653fb","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait VoterLookupError\ncase object VoterNotRegistered extends VoterLookupError\ncase class DatabaseError(details: String) extends VoterLookupError\n\ndef findVoter(voterId: String, voterRegistry: Map[String, String]): Either[VoterLookupError, String] =\n  voterRegistry.get(voterId)\n    .toRight(VoterNotRegistered)"}
{"id":"923950b2-396f-4b00-8c5c-66c33ca6b011","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def parseVotes(voteString: String): Option[Int] =\n  try voteString.toIntOption \n  catch case _: Exception => None"}
{"id":"76c7a169-9f47-4920-bee3-fbba84006319","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef readBallotCount(input: String): Try[Int] =\n  Try(input.toInt)\n\nval result = readBallotCount(\"22\").map(_ + 1)"}
{"id":"9ee5e4bb-0975-4e1a-982b-b7ae9ff404d3","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def computeTallyPercent(totalVotes: Int, candidateVotes: Int): Double =\n  if (totalVotes == 0) throw new ArithmeticException(\"Total votes cannot be zero\")\n  else (candidateVotes.toDouble / totalVotes) * 100"}
{"id":"f755b9f1-6476-4d5c-a94c-e2d192030e2b","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait AuthenticationError\ncase object MissingToken extends AuthenticationError\ncase object InvalidToken extends AuthenticationError\n\ndef authenticateUser(token: Option[String]): Either[AuthenticationError, String] =\n  token match\n    case Some(validToken) if validToken.nonEmpty => Right(validToken)\n    case Some(_)                                => Left(InvalidToken)\n    case None                                   => Left(MissingToken)"}
{"id":"30438f49-46d0-41f2-ba24-4403826a7d7e","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"object AuditTrailVerifier {\n  def verifyAuditTrail(auditEntries: List[String]): Boolean = {\n    try {\n      require(auditEntries.nonEmpty, \"Audit trail is empty\")\n      auditEntries.forall(_.startsWith(\"ENTRY:\"))\n    } catch {\n      case _: IllegalArgumentException => false\n    }\n  }\n}"}
{"id":"11d3742b-c8f1-4964-b0f2-b9b29188b38d","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait VoteRecordingError\ncase object BallotAlreadyRecorded extends VoteRecordingError\ncase class DatabaseWriteFailure(reason: String) extends VoteRecordingError\n\ndef recordVote(ballotId: String, alreadyRecorded: Set[String]): Either[VoteRecordingError, String] =\n  if alreadyRecorded.contains(ballotId) then\n    Left(BallotAlreadyRecorded)\n  else\n    Right(\"Vote accepted\")"}
{"id":"0a015b7a-1264-4823-bc05-6f2ab68052d7","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class BallotFormatException(msg: String) extends Exception(msg)\n\ndef decodeBallot(data: String): Ballot = {\n  if (!data.contains(\",\"))\n    throw new BallotFormatException(\"Ballot data must contain a comma separator\")\n  val parts = data.split(\",\")\n  Ballot(parts(0), parts.tail.toList)\n}"}
{"id":"0b89e5f4-3d25-4902-8715-f5bbb966aaf5","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safelyDecryptVote(encrypted: String, decryptionKey: String): Try[String] =\n  Try {\n    if (decryptionKey != \"secret\") throw new Exception(\"Invalid Key\")\n    encrypted.reverse\n  }"}
{"id":"8cb4601c-37a6-4ff3-a411-4cc838aae1cd","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def publishResults(results: Map[String, Int]): Unit = {\n  try {\n    require(results.nonEmpty, \"No results to publish\")\n    println(s\"Results: $results\")\n  } catch {\n    case e: IllegalArgumentException => println(\"Publish failed: \" + e.getMessage)\n  }\n}"}
{"id":"f05c7455-dbcd-43b1-8f9a-f83a0145c1a9","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait TallyingError\ncase object EmptyVoteList extends TallyingError\ncase object InvalidVote extends TallyingError\n\ndef computeMajority(votes: List[String]): Either[TallyingError, String] =\n  if votes.isEmpty then Left(EmptyVoteList)\n  else\n    val grouped = votes.groupBy(identity).view.mapValues(_.size)\n    grouped.maxByOption(_._2).map(_._1).toRight(InvalidVote)"}
{"id":"a71af7c9-55f0-40be-9c44-cfe44a3084cb","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class CountingError(msg: String) extends Exception(msg)\ndef findHighestVote(candidates: Map[String, Int]): String = {\n  if (candidates.isEmpty) throw new CountingError(\"No candidates to evaluate\")\n  candidates.maxBy(_._2)._1\n}"}
{"id":"e9cb10cf-bef5-4515-8045-b0da049ee88c","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def safeAddBallotToList(newBallot: Ballot, ballots: List[Ballot]): Option[List[Ballot]] =\n  if ballots.exists(_.id == newBallot.id) then None\n  else Some(newBallot :: ballots)"}
{"id":"09d25054-9883-4d8a-8cd6-b7d7603eea35","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"object DecryptionChecker {\n  def checkDecryption(ciphertext: String, key: String): String = {\n    try {\n      if (key.isEmpty) throw new Exception(\"Missing decryption key\")\n      ciphertext.reverse\n    } catch {\n      case e: Exception => \"Failed: \" + e.getMessage\n    }\n  }\n}"}
{"id":"e62a88a2-060a-42ee-862b-9556bf9069de","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait ElectionResultError\ncase object NoWinningCandidate extends ElectionResultError\n\ndef getWinningCandidate(counts: Map[String, Int]): Either[ElectionResultError, String] =\n  counts.maxByOption(_._2).map(_._1).toRight(NoWinningCandidate)"}
{"id":"72e77aad-ab4a-461c-9434-067564eabb4b","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def verifyBallotIntegrity(ballot: Ballot): Ballot = {\n  if (ballot.choices.distinct.size != ballot.choices.size)\n    throw new IllegalArgumentException(\"Duplicate selections on ballot\")\n  ballot\n}"}
{"id":"846dc1fe-24aa-47bc-af3a-e1a5c585c3c0","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeParseCount(input: String): Try[Int] = Try(input.trim.toInt)\nval validCount = safeParseCount(\"007\").getOrElse(0)"}
{"id":"b4a103b0-5539-4e00-87f5-663f207483fa","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def appendToResultsLog(log: StringBuilder, message: String): Unit = {\n  try {\n    log.append(message).append(\"\\n\")\n  } catch {\n    case _: Exception => ()\n  }\n}"}
{"id":"557fac29-a102-4dc5-9bb2-1d2189ca8732","timestamp":1746102563209,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Ballot(candidate: String)\nsealed trait TallyError\ncase object InvalidBallot extends TallyError\n\ndef countVote(ballot: Ballot): Either[TallyError, Int] =\n  if ballot.candidate.isEmpty then Left(InvalidBallot)\n  else Right(1)"}
{"id":"c0534ebf-8eb2-4ceb-9fc7-efe6065f16ba","timestamp":1746102563209,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class InvalidVoterException(message: String) extends Exception(message)\n\ndef recordVoterParticipation(voterId: String, participated: Boolean): Unit =\n  if !participated then throw new InvalidVoterException(\"Voter did not participate\")"}
{"id":"e157c9c7-b822-4987-9699-30e7fa2b1381","timestamp":1746102563209,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait VoteProcessingError\ncase object SignatureMissing extends VoteProcessingError\ncase object SignatureInvalid extends VoteProcessingError\n\ndef verifyVoteSignature(signature: Option[String]): Either[VoteProcessingError, Unit] =\n  signature match\n    case None => Left(SignatureMissing)\n    case Some(sig) if sig.length < 10 => Left(SignatureInvalid)\n    case Some(_) => Right(())"}
{"id":"ddc752a3-724f-429c-9c36-3ab0066c4583","timestamp":1746102563209,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def parseCandidate(candidateField: String): String =\n  try\n    if candidateField.trim.isEmpty then throw new Exception(\"Candidate name missing\")\n    candidateField.trim\n  catch\n    case ex: Exception => \"UnknownCandidate\""}
{"id":"0fbf3264-2805-4b34-88bb-af6748178932","timestamp":1746102563209,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseVoteCount(countStr: String): Try[Int] =\n  Try(countStr.toInt)"}
{"id":"df0dea37-e499-4808-9c8e-7b36488f73a5","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def validateElectionId(electionId: String): Unit =\n  try\n    if !electionId.startsWith(\"E-\") then throw new IllegalArgumentException(\"Invalid election ID\")\n  catch\n    case ex: IllegalArgumentException => println(\"Invalid id: \" + ex.getMessage)"}
{"id":"f9741373-cff7-4329-bc95-95cc0b684974","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait AuditTrailError\ncase object NoAuditTrailFound extends AuditTrailError\n\ndef fetchAuditTrail(recordId: Long): Option[String] =\n  if recordId <= 0 then None\n  else Some(s\"Audit for $recordId\")"}
{"id":"1a2f116a-3d07-49ed-ba46-a800644c92ba","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def processTallyFile(filename: String): Int =\n  try\n    if !filename.endsWith(\".csv\") then throw new Exception(\"Unsupported file format\")\n    42 // fake tally\n  catch\n    case ex: Exception => -1"}
{"id":"ae33e956-23c7-43b0-ba50-bf6e6ce2f7ad","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class ElectionResult(validBallots: Int, invalidBallots: Int)\nsealed trait ElectionTallyError\ncase object NegativeBallotCount extends ElectionTallyError\n\ndef validateResult(result: ElectionResult): Either[ElectionTallyError, ElectionResult] =\n  if result.validBallots < 0 || result.invalidBallots < 0 then Left(NegativeBallotCount)\n  else Right(result)"}
{"id":"b3a0b4e1-1bf3-4f71-878e-9100679a2ba5","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def storeTallyResults(electionId: String): Unit =\n  try\n    if electionId.isEmpty then throw new Exception(\"Missing election id\")\n  catch\n    case ex: Exception => println(ex.getMessage)\n    case _ : Throwable => println(\"Unknown error.\")"}
{"id":"caae7038-381f-4017-973a-0f9637ad8d95","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait VoteDecryptionError\ncase object DecryptionFailed extends VoteDecryptionError\n\ndef decryptVote(encrypted: String): Either[VoteDecryptionError, String] =\n  if encrypted.take(3) == \"ENC\" then Right(s\"VoteFor:${encrypted.drop(3)}\")\n  else Left(DecryptionFailed)"}
{"id":"b9759264-5366-41e7-8671-b6c0397a6317","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def calculateMajority(votes: List[String]): String =\n  try\n    if votes.isEmpty then throw new RuntimeException(\"No votes provided\")\n    votes.groupBy(identity).maxBy(_._2.size)._1\n  catch\n    case ex: RuntimeException => \"MajorityUnknown\""}
{"id":"8273dba0-36e5-4d60-9dbf-41fe3edf020a","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDivideVotes(total: Int, groups: Int): Try[Int] =\n  Try(total / groups)"}
{"id":"baa76790-09e8-4bf3-85f7-0f7e1b112acf","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def authenticateTallyOfficer(officerCode: String): Boolean =\n  try\n    if officerCode != \"CERTIFIED_OFFICER\" then throw new Exception(\"Unauthorized access\")\n    true\n  catch\n    case _: Exception => false"}
{"id":"8a2277dc-5731-4927-8955-d018d49a3016","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait BatchPublishError\ncase object DatabaseOffline extends BatchPublishError\n\ncase class TallyBatch(votes: Int)\ndef publishTallyBatch(batch: TallyBatch): Either[BatchPublishError, String] =\n  if batch.votes <= 0 then Left(DatabaseOffline)\n  else Right(\"Batch published successfully\")"}
{"id":"886a97f4-a8f1-469c-881e-a16553575a56","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class VoteDuplicationException(msg: String) extends Exception(msg)\n\ndef checkDuplicateVote(voterId: String, recordedVoters: Set[String]): Unit =\n  if recordedVoters.contains(voterId) then throw new VoteDuplicationException(\"Duplicate vote detected.\")"}
{"id":"5d5ffe8d-e38a-46a8-911d-0fc61fafe585","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryParseElectionYear(value: String): Try[Int] =\n  Try(value.toInt)"}
{"id":"475f245d-2398-45e2-9397-95871f4cbac0","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def ensureBallotTiming(ballotTimestamp: Long, closeTimestamp: Long): String =\n  try\n    if ballotTimestamp > closeTimestamp then throw new Exception(\"Ballot cast after poll closed\")\n    \"Ballot accepted\"\n  catch\n    case ex: Exception => \"Rejected: \" + ex.getMessage"}
{"id":"d8eaa90d-86ff-4e52-a4dc-82b9613daffc","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait VoterEligibilityError\ncase object VoterUnderage extends VoterEligibilityError\ncase object NotInElectoralRoll extends VoterEligibilityError\n\ndef checkVoterEligibility(age: Int, inRegister: Boolean): Either[VoterEligibilityError, Boolean] =\n  if age < 18 then Left(VoterUnderage)\n  else if !inRegister then Left(NotInElectoralRoll)\n  else Right(true)"}
{"id":"928d9e08-5eb1-4cb5-8cdc-0124c9b9f982","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def removeInvalidTallyEntry(entryId: String): String =\n  try\n    if entryId.isBlank then throw new Exception(\"Empty entry id\")\n    \"Entry removed\"\n  catch\n    case ex: Exception => \"Failed: \" + ex.getMessage"}
{"id":"776cc0f5-a400-4997-af68-f44f8f50420e","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"object BookLookupService {\n  def findBookByIsbn(isbn: String): Option[CatalogRecord] =\n    LibraryCatalog.records.find(_.isbn == isbn)\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"2a514007-0ba4-464f-a189-d4ff03aafd66","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class BookNotFoundException(message: String) extends Exception(message)\n\nobject CatalogSearcher {\n  def searchByTitle(title: String): CatalogRecord = {\n    val result = LibraryCatalog.records.find(_.title == title)\n    if result.isEmpty then throw new BookNotFoundException(s\"Book with title '$title' not found.\")\n    result.get\n  }\n}"}
{"id":"6435fc4a-2a58-4eab-8c41-9549b917dd02","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait SearchError\ncase object TitleNotFound extends SearchError\n\nobject Catalog {\n  def getBookByTitle(title: String): Either[SearchError, CatalogRecord] =\n    LibraryCatalog.records.find(_.title == title).toRight(TitleNotFound)\n}"}
{"id":"697f055a-e782-49b6-9760-373eb985cbbe","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object DigitalLibrary {\n  def getAuthorByIsbn(isbn: String): String = {\n    val record = LibraryCatalog.records.find(_.isbn == isbn)\n    if (record.isDefined) record.get.author\n    else throw new NoSuchElementException(s\"No book with ISBN $isbn found.\")\n  }\n}"}
{"id":"2d92badc-4c6e-46ce-816e-d7b19853f3e2","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"import scala.util.Try\n\nobject RecentPublicationSearcher {\n  def findRecentPublication(year: Int): Try[CatalogRecord] =\n    Try(LibraryCatalog.records.find(_.publicationYear == year).get)\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String, publicationYear: Int)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\", 1996),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\", 2010)\n  )\n}"}
{"id":"4767a105-45db-461a-ac68-f968fd5b4652","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object PublicationYearChecker {\n  def checkPublicationYear(isbn: String, year: Int): Boolean = {\n    try {\n      val record = LibraryCatalog.records.find(_.isbn == isbn).get\n      record.publicationYear == year\n    } catch {\n      case _: Exception => false\n    }\n  }\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String, publicationYear: Int)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\", 1996),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\", 2010)\n  )\n}"}
{"id":"589f997a-4746-4b26-8ce4-8dc30251f9fb","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait UserQueryError\ncase object EmptyQuery extends UserQueryError\ncase object TooBroadQuery extends UserQueryError\ncase object SearchBackendUnavailable extends UserQueryError\n\nobject UserQueryValidator {\n  def validateQuery(query: String): Either[UserQueryError, String] =\n    if query.trim.isEmpty then Left(EmptyQuery)\n    else if query.length < 3 then Left(TooBroadQuery)\n    else Right(query)\n}"}
{"id":"af3a9032-17ce-4133-9990-ca477828cfd4","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class InvalidSearchQueryException(msg: String) extends Exception(msg)\n\nobject QueryService {\n  def runCatalogQuery(rawQuery: String): CatalogResult = {\n    if (rawQuery.trim.isEmpty) throw new InvalidSearchQueryException(\"Query cannot be empty.\")\n    CatalogResult(s\"Results for '$rawQuery'\")\n  }\n}\n\ncase class CatalogResult(resultDescription: String)"}
{"id":"ec79d4ad-7d24-47d5-bc12-e732e137677f","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"object SafeAuthorLookup {\n  def findAuthorByBookId(bookId: Int): Option[String] =\n    LibraryCatalog.entries.get(bookId).map(_.author)\n}\n\ncase class CatalogEntry(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val entries = Map(\n    1 -> CatalogEntry(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    2 -> CatalogEntry(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"f479d295-5788-462c-993c-9a02cf5764f7","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object BookRetriever {\n  def getFirstBookByAuthor(author: String): CatalogRecord = {\n    try {\n      LibraryCatalog.records.find(_.author == author).get\n    } catch {\n      case _: NoSuchElementException => throw new Exception(\"No book found for given author\")\n    }\n  }\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"a88069fe-031d-4e37-8b7b-5256bfa262fc","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SearchFailure(reason: String)\n\nobject KeywordSearcher {\n  def searchByKeyword(keyword: String): Either[SearchFailure, CatalogRecord] =\n    LibraryCatalog.entries.values.find(_.title.contains(keyword))\n      .toRight(SearchFailure(s\"No result for '$keyword'\"))\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val entries = Map(\n    1 -> CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    2 -> CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"1f47a3f0-ef2a-44bc-a290-4762ac0580f3","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class LibraryCatalogDownException(msg: String) extends Exception(msg)\n\nobject RemoteSearchService {\n  def fetchSearchResults(query: String): List[CatalogRecord] = {\n    try {\n      if (query == \"timeout\") throw new LibraryCatalogDownException(\"Catalog backend timeout\")\n      LibraryCatalog.records.filter(_.title.contains(query))\n    } catch {\n      case e: Exception => throw e\n    }\n  }\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"5ce46509-93cf-41f1-9745-28c31809a780","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait ResultParsingError\ncase class JsonParseError(details: String) extends ResultParsingError\n\nobject ResultParser {\n  def parseCatalogJson(json: String): Either[ResultParsingError, CatalogResult] =\n    if json.startsWith(\"{result\") then Right(CatalogResult(\"Success\"))\n    else Left(JsonParseError(\"Malformed catalog result JSON\"))\n}\n\ncase class CatalogResult(status: String)"}
{"id":"7a12ef0d-e5c2-44a2-a717-02a31abc0162","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object PublisherIDResolver {\n  def resolvePublisherId(publisherName: String): Int = {\n    try {\n      if (publisherName == \"Penguin\") 1001\n      else throw new Exception(\"Unknown publisher\")\n    } catch {\n      case ex: Exception => throw ex\n    }\n  }\n}"}
{"id":"312cfa0f-3079-402b-882d-73683617749d","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait CatalogFetchError\ncase object ResourceNotAccessible extends CatalogFetchError\ncase class BackendMalfunction(reason: String) extends CatalogFetchError\n\nobject CatalogProxy {\n  def fetchCatalogResource(resourceId: Int): Either[CatalogFetchError, String] =\n    if resourceId == 1 then Right(\"Digital Manuscript\")\n    else if resourceId < 0 then Left(BackendMalfunction(\"Negative ID\"))\n    else Left(ResourceNotAccessible)\n}"}
{"id":"4e37a603-e3fa-470f-a2af-5722180e70c4","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class MetadataParseException(message: String) extends Exception(message)\n\nobject MetadataExtractor {\n  def extractMetadata(field: String): String = {\n    field match {\n      case \"ISBN\" => \"9780140449136\"\n      case \"author\" => \"Jane Austen\"\n      case _ => throw new MetadataParseException(s\"Metadata field '$field' unknown.\")\n    }\n  }\n}"}
{"id":"12b88b08-5b29-4859-8274-10cbc64251e1","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"import scala.util.Try\n\nobject YearFieldParser {\n  def extractYearField(value: String): Try[Int] =\n    Try(value.trim.toInt)\n}"}
{"id":"49477169-9385-4493-9448-d5a4bd54124b","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object FormatChecker {\n  def checkIsEpub(format: String): Boolean = {\n    try {\n      if (format.toLowerCase != \"epub\") throw new Exception(\"Format is not EPUB\")\n      true\n    } catch {\n      case _: Exception => false\n    }\n  }\n}"}
{"id":"ae353492-a377-4274-a2d0-6906c533c672","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"object RecordUniquenessValidator {\n  def validateUniqueness(isbn: String): Option[String] =\n    if LibraryCatalog.records.exists(_.isbn == isbn) then None\n    else Some(s\"ISBN $isbn is unique.\")\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"80d01ab4-7938-4998-afb2-c5edee00b5ff","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class MalformedPaginationParameter(msg: String) extends Exception(msg)\n\nobject PageRangeFetcher {\n  def getPageRange(from: Int, to: Int): List[Int] = {\n    if (from > to) throw new MalformedPaginationParameter(\"Invalid page range\")\n    (from to to).toList\n  }\n}"}
{"id":"9797cc8c-5da2-4bdc-8078-ac41f5d2ef65","timestamp":1746102616452,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class BookRecord(title: String, author: String, year: Int)\n\ndef findBookByTitle(books: List[BookRecord], searchTitle: String): Option[BookRecord] =\n  books.find(_.title.equalsIgnoreCase(searchTitle))"}
{"id":"fd3d8146-2963-4b0a-9429-893a803970fa","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait CatalogSearchError\ncase object BookNotFound extends CatalogSearchError\n\ncase class CatalogEntry(isbn: String, title: String)\n\ndef lookupByIsbn(isbn: String, entries: List[CatalogEntry]): Either[CatalogSearchError, CatalogEntry] =\n  entries.find(_.isbn == isbn).toRight(BookNotFound)"}
{"id":"47249860-8aa6-473f-96b2-3d19d4e5d2c6","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef parseYearString(yearString: String): Try[Int] =\n  Try(yearString.toInt)"}
{"id":"45648297-bd83-417f-9058-bb59af81fda6","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait LibraryQueryError\ncase object EmptyQuery extends LibraryQueryError\ncase object NoResultsFound extends LibraryQueryError\n\ndef searchCatalog(query: String, records: List[String]): Either[LibraryQueryError, List[String]] =\n  if query.trim.isEmpty then Left(EmptyQuery)\n  else {\n    val results = records.filter(_.contains(query))\n    if results.isEmpty then Left(NoResultsFound) else Right(results)\n  }"}
{"id":"7179f602-c708-47ad-8986-e516725d64be","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getFirstAvailableCopy(availability: List[Boolean]): Option[Int] =\n  availability.indexWhere(_ == true) match\n    case -1 => None\n    case idx => Some(idx)"}
{"id":"4da5f88a-4cf1-407b-9367-14516ee06306","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait FieldParseError\ncase object YearParseFailure extends FieldParseError\n\ncase class Book(title: String, year: Int)\n\ndef safeCreateBook(title: String, yearStr: String): Either[FieldParseError, Book] =\n  yearStr.toIntOption.toRight(YearParseFailure).map(Book(title, _))"}
{"id":"cde38b90-8176-42f9-a8e1-09914f9d9931","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"import scala.util.Try\n\ncase class UserRequest(id: String)\n\ndef safeRequestIdToInt(request: UserRequest): Try[Int] =\n  Try(request.id.toInt)"}
{"id":"57acfcff-a00f-4f9b-973f-37663c48d4e5","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class DigitalResource(id: String, format: String)\n\ndef extractPdfResource(resources: List[DigitalResource]): Option[DigitalResource] =\n  resources.find(_.format == \"PDF\")"}
{"id":"c4a59e6e-7f56-4779-b506-e2746c80aa5b","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait ResourceAccessError\ncase object AccessDenied extends ResourceAccessError\ncase object ResourceMissing extends ResourceAccessError\n\ncase class AccessRequest(user: String, resourceId: String)\n\ndef grantAccess(request: AccessRequest, accessibleIds: Set[String], userHasPermission: Boolean): Either[ResourceAccessError, String] =\n  if !userHasPermission then Left(AccessDenied)\n  else if !accessibleIds.contains(request.resourceId) then Left(ResourceMissing)\n  else Right(\"Access granted\")"}
{"id":"b5fe151c-fafd-49fd-b622-7a8667f3bdec","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SearchQuery(text: String, filters: Map[String, String])\n\ndef enrichQuery(query: Option[SearchQuery]): Either[String, SearchQuery] =\n  query.toRight(\"Query is missing\")"}
{"id":"10cda76c-6672-4c03-95ab-94e1133143f3","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"case class CatalogSearchException(msg: String) extends Exception(msg)\n\ndef getBookAuthor(books: List[(String, String)], title: String): String = {\n  books.find(_._1 == title) match {\n    case Some((_, author)) => author\n    case None => throw CatalogSearchException(\"Book not found\")\n  }\n}"}
{"id":"31070fc0-2919-4356-a870-c1ee5b7f9084","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def findAvailableBook(bookTitles: List[String], requestedTitle: String): String = {\n  try {\n    val idx = bookTitles.indexOf(requestedTitle)\n    if (idx == -1) throw new NoSuchElementException(\"Title not available\")\n    bookTitles(idx)\n  } catch {\n    case ex: Exception => \"Book unavailable\"\n  }\n}"}
{"id":"a2db9395-c8a4-4511-9940-1baa4c5593a9","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class InvalidQueryException(val detail: String) extends Exception(detail)\n\ndef validateQuery(query: String): Unit = {\n  if (query.isEmpty) throw new InvalidQueryException(\"Provided query is empty\")\n}"}
{"id":"6f2443ce-e7fd-46a5-bd9e-8f6429a0642e","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getYearPublishedOrThrow(record: Map[String, String]): Int = {\n  record.get(\"year\") match {\n    case Some(yearStr) =>\n      try {\n        yearStr.toInt\n      } catch {\n        case _: NumberFormatException => throw new RuntimeException(\"Invalid year format\")\n      }\n    case None => throw new RuntimeException(\"Year field missing\")\n  }\n}"}
{"id":"6a738f99-dede-4bac-a1d1-20470651ab28","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def findAuthorUnsafe(entries: Array[(String, String)], bookTitle: String): String = {\n  val entry = entries.find(_._1 == bookTitle)\n  if (entry == null) throw new RuntimeException(\"No book entry found\")\n  entry.get._2\n}"}
{"id":"6093b6a7-ba16-435a-ae81-9258bdec660e","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getResourceFileFormat(resourceId: String, files: Map[String, String]): String = {\n  try {\n    files(resourceId)\n  } catch {\n    case _: NoSuchElementException => throw new Exception(\"File format not found\")\n  }\n}"}
{"id":"61739b72-286f-4193-aa40-15c18d65d125","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def parseCatalogId(idInput: String): Int = {\n  try {\n    idInput.toInt\n  } catch {\n    case e: NumberFormatException => throw new IllegalArgumentException(\"Invalid catalog id\")\n  }\n}"}
{"id":"6763a9c0-0b11-4cbf-80e3-82a472217406","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def logSearchError(logFunc: String => Unit, searchFunc: () => Unit): Unit = {\n  try {\n    searchFunc()\n  } catch {\n    case e: Exception => logFunc(e.getMessage)\n  }\n}"}
{"id":"62e50795-b77a-4433-b2f6-eaf539709a7a","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def findMatchingGenre(books: List[(String, String)], genre: String): String = {\n  val result = books.filter(_._2 == genre)\n  if(result.isEmpty) throw new Exception(\"No books of specified genre\")\n  result.head._1\n}"}
{"id":"6902a703-486c-4cc3-9c79-f8ab3590c640","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def checkAvailability(bookStatus: Map[String, Boolean], bookId: String): Boolean = {\n  if(bookStatus.contains(bookId)) {\n    bookStatus(bookId)\n  } else {\n    throw new Exception(\"Book ID not found in catalog\")\n  }\n}"}
{"id":"dba6d3eb-3cd8-4805-b49d-9073659a61a7","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def handleRequest(requestData: String): String = {\n  try {\n    if (requestData.isEmpty) throw new Exception(\"Empty request\")\n    \"Request processed: \" + requestData\n  } catch {\n    case e: Exception => s\"Error: ${e.getMessage}\"\n  }\n}"}
{"id":"72ec105f-d805-49e5-9f09-8dd0c8451966","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object TicketQRCodeChecker:\n  def validateQRCode(qrValue: String): Either[TicketQRValidationError, ValidatedTicket] =\n    if qrValue.isEmpty then Left(EmptyQRCodeError())\n    else if qrValue.forall(_.isLetter) then Left(MalformedQRCodeError())\n    else Right(ValidatedTicket(qrValue))\n\nsealed trait TicketQRValidationError\ncase class EmptyQRCodeError() extends TicketQRValidationError\ncase class MalformedQRCodeError() extends TicketQRValidationError\ncase class ValidatedTicket(code: String)"}
{"id":"4713e1a7-e584-4530-b603-3641406820c1","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketQRParser:\n  def parse(qr: String): ValidTicket =\n    if qr.isEmpty then throw new InvalidTicketQRCodeException(\"QR code is empty.\")\n    else ValidTicket(qr)\n  \nclass InvalidTicketQRCodeException(msg: String) extends Exception(msg)\ncase class ValidTicket(qr: String)"}
{"id":"2786a2e6-b477-403f-8ea6-56fc6f49987c","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QREventTicket(id: String)\nsealed trait QRScanError\ncase object TicketNotFound extends QRScanError\ncase object TicketExpired extends QRScanError\n\ndef scanTicket(qrCode: String): Either[QRScanError, QREventTicket] =\n  if qrCode == \"\" then Left(TicketNotFound)\n  else if qrCode == \"expired\" then Left(TicketExpired)\n  else Right(QREventTicket(qrCode))"}
{"id":"f28390f0-92a5-4e60-b079-2d8770e5dc6d","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def validateTicketQRCode(qrInput: String): TicketStatus =\n  try\n    if qrInput == \"\" then throw new QRCodeEmptyException()\n    else TicketStatus(qrInput, true)\n  catch\n    case e: Exception => TicketStatus(qrInput, false)\n\nclass QRCodeEmptyException extends Exception\ncase class TicketStatus(qr: String, isValid: Boolean)"}
{"id":"2696f704-5541-49d8-89a5-7516431ab257","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait TicketValidationError\ncase object QRCodeUnreadable extends TicketValidationError\ncase object QRCodeFake extends TicketValidationError\n\ncase class AttendeeTicket(id: String, checkedIn: Boolean)\n\ndef checkinAttendee(qrCode: String): Either[TicketValidationError, AttendeeTicket] =\n  if qrCode.startsWith(\"??\") then Left(QRCodeUnreadable)\n  else if qrCode.length < 8 then Left(QRCodeFake)\n  else Right(AttendeeTicket(qrCode, true))"}
{"id":"8b964e33-f666-47da-b766-3c93cfa28da0","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def markTicketScanned(ticketId: String): Boolean =\n  if ticketId.isEmpty then throw new IllegalArgumentException(\"Ticket ID missing\")\n  else true\n\ntry\n  markTicketScanned(\"\")\ncatch\n  case e: IllegalArgumentException => false"}
{"id":"3acf44ec-2c89-47e1-985f-182c4c55117f","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait QRVerificationError\ncase object QRExpired extends QRVerificationError\ncase object QRAlreadyUsed extends QRVerificationError\n\ncase class VerifiedEntry(id: String)\n\ndef verifyQRCodeEntry(qrCode: String, used: Boolean, expired: Boolean): Either[QRVerificationError, VerifiedEntry] =\n  if expired then Left(QRExpired)\n  else if used then Left(QRAlreadyUsed)\n  else Right(VerifiedEntry(qrCode))"}
{"id":"f07503f4-1751-4276-9624-436d59bd6c1e","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketNotValidException(reason: String) extends Exception(reason)\n\ndef ensureValidTicket(qr: String, revoked: Boolean): String =\n  if revoked then throw new TicketNotValidException(\"Ticket is revoked.\")\n  else qr\n\ntry\n  ensureValidTicket(\"TICKET123\", true)\ncatch\n  case ex: TicketNotValidException => \"Error: \" + ex.getMessage"}
{"id":"40e64418-fddb-4b0f-b31c-5ff7fbfcd9fc","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait EntryScanError\ncase class TicketBlacklisted(ticket: String) extends EntryScanError\ncase object TicketUsed extends EntryScanError\ncase class EventTicket(code: String)\n\ndef processTicketScan(qrCode: String, isBlacklisted: Boolean, alreadyUsed: Boolean): Either[EntryScanError, EventTicket] =\n  if isBlacklisted then Left(TicketBlacklisted(qrCode))\n  else if alreadyUsed then Left(TicketUsed)\n  else Right(EventTicket(qrCode))"}
{"id":"e96cf362-9c62-4f50-a3fb-143c0bd6ed16","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def scanQRCode(qr: String): String =\n  if qr == null then throw new NullPointerException(\"QR code cannot be null\")\n  else qr.reverse\n\ntry\n  scanQRCode(null)\ncatch\n  case npe: NullPointerException => \"Invalid scan\""}
{"id":"bde4d56f-3c7f-47a7-adc7-f2f8047bb3bb","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait TicketDecodeError\ncase object QRFormatInvalid extends TicketDecodeError\ncase object TicketNotRegistered extends TicketDecodeError\n\ncase class DecodedTicket(id: String)\n\ndef decodeTicket(qr: String): Either[TicketDecodeError, DecodedTicket] =\n  if !qr.startsWith(\"EVT-\") then Left(QRFormatInvalid)\n  else if qr.drop(4).isEmpty then Left(TicketNotRegistered)\n  else Right(DecodedTicket(qr.drop(4)))"}
{"id":"bd096aec-8196-41af-86a3-7a2c0f11f642","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRCodeTamperingException extends Exception\n\ndef detectTamper(qrValue: String): Boolean =\n  if qrValue.contains(\"tampered\") then throw new QRCodeTamperingException\n  else true\n\ndef safeTamperCheck(qr: String): Boolean =\n  try detectTamper(qr) catch { case _: QRCodeTamperingException => false }"}
{"id":"a7bb48b5-fe5a-4caa-af65-67a50dac7ae4","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"import scala.util.Try, scala.util.Success, scala.util.Failure\n\ndef attemptTicketActivation(qr: String): Try[String] =\n  Try {\n    if qr.trim.isEmpty then throw new Exception(\"Empty QR code\")\n    else \"ActivationCode123\"\n  }"}
{"id":"f5e17022-b5f8-464e-b72c-e75b41b6ebff","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class UsedTicketException(id: String) extends Exception(s\"Ticket $id already used.\")\ndef preventReuse(qr: String, used: Boolean): Unit =\n  if used then throw new UsedTicketException(qr)\n\ntry\n  preventReuse(\"TKT20\", true)\ncatch\n  case e: UsedTicketException => ()"}
{"id":"3af28db5-af95-4ed9-93cc-f1c075f5c1ee","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait TicketError\ncase object InvalidQRCodeFormat extends TicketError\ncase object TicketRevoked extends TicketError\n\ndef validateTicketStructure(qr: String, revoked: Boolean): Option[TicketError] =\n  if !qr.matches(\"[A-Z]{8}\") then Some(InvalidQRCodeFormat)\n  else if revoked then Some(TicketRevoked)\n  else None"}
{"id":"63991ee6-eccc-4204-ae0f-9ff3eb21f210","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def checkTicketForEvent(qrCode: String, eventId: String): String =\n  if qrCode.isEmpty || eventId.isEmpty then\n    throw new Exception(\"QR code or event ID missing\")\n  else \"OK\"\n\ntry\n  checkTicketForEvent(\"\", \"EV20\")\ncatch\n  case e: Exception => \"Error: QR code or event ID missing\""}
{"id":"46309c85-bae4-4d7d-b331-19711da457f8","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait TicketQRStatus\ncase object TicketMissing extends TicketQRStatus\ncase object TicketCorrupt extends TicketQRStatus\ncase class TicketFound(ticketRef: String) extends TicketQRStatus\n\ndef findTicket(qr: String): TicketQRStatus =\n  if qr.isEmpty then TicketMissing\n  else if !qr.contains(\"-\") then TicketCorrupt\n  else TicketFound(qr)"}
{"id":"aea2149b-f172-44cf-84a5-2f07f245c4ab","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class EmptyScanException extends Exception(\"Scan was empty\")\n\ndef handleScan(qrCode: String): String =\n  if qrCode.isEmpty then throw new EmptyScanException\n  else s\"Scanned: $qrCode\"\n\ntry handleScan(\"\") catch { case _: EmptyScanException => \"Error: Scan required\" }"}
{"id":"b781a79a-ded9-4840-a60a-c3c4a01c0623","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def parseValidQRCode(qrValue: String): Option[String] =\n  if qrValue.matches(\"EVT-[0-9]+\") then Some(qrValue)\n  else None\n\nval maybeCode: Option[String] = parseValidQRCode(\"EVT-2024\")"}
{"id":"2b3ccfb2-02d6-49fc-8c4f-91608aa15266","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketValidationException(reason: String) extends Exception(reason)\n\ndef checkTicketExpiration(qr: String, expiration: Long, timeNow: Long): Boolean =\n  if timeNow > expiration then throw new TicketValidationException(\"Ticket expired\")\n  else true\n\ntry checkTicketExpiration(\"ABC123\", 1000L, 2000L) catch { case ex: TicketValidationException => false }"}
{"id":"62580da8-2cdd-4e21-9e89-d5e6228e8d39","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"case class TicketQRCode(qrData: String)\nclass InvalidQRCodeException(msg: String) extends Exception(msg)\ndef parseQRCode(qrCode: TicketQRCode): String = {\n  if (qrCode.qrData.isEmpty)\n    throw new InvalidQRCodeException(\"QR code data cannot be empty\")\n  else\n    qrCode.qrData.reverse\n}"}
{"id":"c62123d1-ebd7-4662-bf32-0fa1da8cc936","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketQRValidator {\n  def validateTicketId(ticketId: String): Boolean = {\n    if (ticketId.forall(_.isDigit)) true\n    else throw new RuntimeException(\"Invalid ticket ID format\")\n  }\n}"}
{"id":"cda6c3fb-bda3-4ce5-9e55-3dc34926fa85","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def fetchEventForQRCode(qrCode: String): String = {\n  if (qrCode.startsWith(\"event-\")) qrCode.drop(6)\n  else throw new IllegalArgumentException(\"QR code does not reference an event\")\n}"}
{"id":"383c93cc-35d9-4acb-b275-feaa8b1a1e9f","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRCodeExpiredException(msg: String) extends Exception(msg)\ndef validateQRExpiration(expiryTimestamp: Long, now: Long): Unit = {\n  if (now > expiryTimestamp) {\n    throw new QRCodeExpiredException(\"QR code has expired\")\n  }\n}"}
{"id":"b94a1199-927f-429c-893c-3f11b448383e","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object QRCodeScanHandler {\n  def recordScan(qrCode: String, db: scala.collection.mutable.Set[String]): Unit = {\n    if (db.contains(qrCode))\n      throw new Exception(\"QR code already used\")\n    else db += qrCode\n  }\n}"}
{"id":"642daee8-7d2d-4bf5-8108-8669c33cabb4","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def getUserFromQR(userCode: String): String = {\n  try {\n    require(userCode.nonEmpty, \"User code missing\")\n    userCode.toUpperCase\n  } catch {\n    case ex: IllegalArgumentException =>\n      throw new Exception(\"User code extraction failed\", ex)\n  }\n}"}
{"id":"96debf7f-3466-4b22-8f2c-697e756700ce","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def decodeQRContent(qrContent: Array[Byte]): String = {\n  if (qrContent.isEmpty) throw new RuntimeException(\"QR content is empty\")\n  else new String(qrContent)\n}"}
{"id":"b2d9e512-4c1e-4e79-b4b1-6596ec82793f","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def markTicketUsed(ticketId: String, usageRegister: scala.collection.mutable.Map[String, Boolean]) = {\n  try {\n    if (usageRegister.getOrElse(ticketId, false))\n      throw new Exception(\"Ticket has already been used\")\n    else\n      usageRegister(ticketId) = true\n  } catch {\n    case ex: Exception => println(s\"Error: ${ex.getMessage}\")\n  }\n}"}
{"id":"05c8790d-1298-4647-b216-8edd0a60e71e","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketErrorLogger {\n  def logValidationFailure(qrCode: String): Unit = {\n    try {\n      if (qrCode.isEmpty) throw new Exception(\"Missing QR code to log failure\")\n      println(s\"Logged failure for QR: $qrCode\")\n    } catch {\n      case _: Exception => println(\"Unable to log QR failure\")\n    }\n  }\n}"}
{"id":"7154546d-366f-4396-96ca-c711d5f8a4ea","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def scanTicket(qr: String): String = {\n  if (qr == \"blocked\") throw new SecurityException(\"Blocked ticket QR\")\n  else s\"Scanned: $qr\"\n}"}
{"id":"fc784c8e-23db-416c-befa-3b9bd4ed8d77","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait QRValidationError\ndef validateTicketQR(qr: String): Either[QRValidationError, String] =\n  if (qr.isEmpty) Left(QRValidationError.InvalidFormat)\n  else if (qr.length < 10) Left(QRValidationError.TooShort)\n  else Right(qr)\nobject QRValidationError {\n  case object InvalidFormat extends QRValidationError\n  case object TooShort extends QRValidationError\n}"}
{"id":"af725bd4-8191-4320-a715-035dba4c5a52","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef parseEventIdFromQR(qr: String): Try[Int] =\n  Try(qr.dropWhile(!_.isDigit).toInt)"}
{"id":"48b7639d-2979-48d4-a9db-5aa216a8d6ca","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class TicketScan(qrCode: String)\ncase class ScanResult(success: Boolean, error: Option[String])\ndef processTicketScan(scan: TicketScan): ScanResult =\n  if (scan.qrCode.trim.isEmpty)\n    ScanResult(success = false, error = Some(\"QR code missing\"))\n  else\n    ScanResult(success = true, error = None)"}
{"id":"46350499-6deb-4c2e-bf3b-029144faab1c","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait TicketValidationFailure\ncase object TicketNotFound extends TicketValidationFailure\ncase object TicketExpired extends TicketValidationFailure\ndef validateTicket(ticketId: String, now: Long, expiry: Long): Either[TicketValidationFailure, String] =\n  if (ticketId.isEmpty) Left(TicketNotFound)\n  else if (now > expiry) Left(TicketExpired)\n  else Right(ticketId)"}
{"id":"3c3fac77-7925-424e-8170-70e30658e292","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def extractUserId(qr: String): Option[String] = {\n  val idx = qr.indexOf(\"user-\")\n  if (idx >= 0) Some(qr.substring(idx + 5, idx + 13)) else None\n}"}
{"id":"4c12d45f-4c18-424b-8790-85c793c43a47","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class Ticket(qr: String, valid: Boolean)\ndef safeTicketUse(ticket: Ticket): Option[String] = {\n  if (ticket.valid) Some(ticket.qr)\n  else None\n}"}
{"id":"192d700c-d6ae-4ef1-a0b1-441a15dbe46b","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def checkQRCodeFormat(qr: String): Either[String, String] =\n  if (qr.matches(\"TKT-[0-9A-Z]+\")) Right(qr)\n  else Left(\"QR code format invalid\")"}
{"id":"a54e038e-b9f5-43e8-9899-60156b79d3fa","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"import scala.util.Try\ndef decodeTicketPayload(payload: Array[Byte]): Try[String] =\n  Try(new String(payload, \"UTF-8\"))"}
{"id":"62aae2bd-bb63-4aee-aebf-5252b44b27e1","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def verifyTicketUsage(qrCode: String, alreadyUsed: Set[String]): Either[String, Unit] =\n  if (alreadyUsed.contains(qrCode)) Left(\"Ticket has already been used\")\n  else Right(())"}
{"id":"d1df6159-b8f7-440e-b80f-b1554a2345a1","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def eventForQR(qrCode: String, eventRegistry: Map[String,String]): Option[String] =\n  eventRegistry.get(qrCode)"}
{"id":"5342f4a7-6317-4275-924c-c84c96806051","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"case class DronePosition(lat: Double, lon: Double)\ncase class NoAccessiblePathException(message: String) extends Exception(message)\nobject PathFinder {\n  def findOptimalPath(start: DronePosition, end: DronePosition): List[DronePosition] = {\n    if (start == end) throw new NoAccessiblePathException(\"Start and end positions are identical\")\n    List(start, end)\n  }\n}"}
{"id":"f41418e6-8156-4637-ade6-8c5663df1411","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def validateDroneBatteryLevel(batteryLevel: Double): Unit = {\n  if (batteryLevel < 20.0) throw new Exception(\"Insufficient battery for delivery path optimization\")\n}"}
{"id":"dcc30300-966a-4e42-83cb-4813baaa590d","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class PathOptimizationException(msg: String) extends Exception(msg)\ndef calculatePathLength(points: List[(Double, Double)]): Double = {\n  if (points.length < 2) throw new PathOptimizationException(\"At least two points needed\")\n  points.sliding(2).map {\n    case List((x1, y1), (x2, y2)) => math.hypot(x2 - x1, y2 - y1)\n    case _ => 0.0\n  }.sum\n}"}
{"id":"b2abb020-da8f-43a5-a3ec-5610ccba9823","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getDroneSpeed(droneId: String): Double = {\n  if (droneId.isEmpty) throw new IllegalArgumentException(\"Drone ID not provided\")\n  18.5 // Returns constant speed for example\n}"}
{"id":"6187af25-6856-45df-9e99-89ea777e0343","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"object AltitudeValidator {\n  def ensureAllowedAltitude(altitude: Double): Unit = {\n    if (altitude < 10 || altitude > 120)\n      throw new RuntimeException(\"Altitude out of supported range for drone optimization\")\n  }\n}"}
{"id":"9676d940-8388-4e0e-bde0-4b697dc7f084","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def assignDeliveryJobToDrone(droneId: String, jobId: String): String = {\n  try {\n    if (droneId.isEmpty || jobId.isEmpty)\n      throw new Exception(\"Invalid drone/order ID\")\n    s\"Assigned job $jobId to drone $droneId\"\n  } catch {\n    case ex: Exception => s\"Error during assignment: ${ex.getMessage}\"\n  }\n}"}
{"id":"33449290-75ab-490c-a66e-40c3e3e10858","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DeliveryZoneNotFoundException(message: String) extends Exception(message)\ndef selectDeliveryZone(zones: List[String], destination: String): String = {\n  try {\n    zones.find(_ == destination).getOrElse(throw new DeliveryZoneNotFoundException(\"Destination not in any delivery zone\"))\n  } catch {\n    case ex: Exception => \"Zone Selection Failed: \" + ex.getMessage\n  }\n}"}
{"id":"8500dc1d-5b48-495e-a639-3b30a8e380d5","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"object WeatherCheck {\n  def ensureWeatherSafe(windSpeed: Double): Unit = {\n    if (windSpeed > 25.0)\n      throw new Exception(\"Unsafe wind conditions for drone path optimization\")\n  }\n}"}
{"id":"572f3171-5788-44ea-8eb3-f827988d5d36","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getOptimizedRoute(droneId: String, destination: String): String = {\n  try {\n    if (droneId == \"000\") throw new Exception(\"Drone not available for route optimization\")\n    \"Optimized route\"\n  } catch {\n    case _: Exception => \"Error computing route\"\n  }\n}"}
{"id":"44819edc-88f6-4c29-bf52-48aeccac7acc","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class RestrictedAirspaceException extends Exception(\"Restricted airspace encountered during path calculation\")\ndef checkForRestrictedAirspace(path: List[(Double, Double)]): Unit = {\n  if (path.contains((0.0, 0.0))) throw new RestrictedAirspaceException\n}"}
{"id":"e09386f6-3ebe-4f2e-888f-49dbf8270dad","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait PathOptimizationError\ncase object InsufficientBattery extends PathOptimizationError\ncase object NoAvailableRoute extends PathOptimizationError\ncase class OptimizedPath(waypoints: List[(Double, Double)])\ndef computeOptimizedPath(battery: Double, candidates: List[List[(Double, Double)]]): Either[PathOptimizationError, OptimizedPath] = {\n  if (battery < 20.0) Left(InsufficientBattery)\n  else candidates.headOption match {\n    case Some(path) => Right(OptimizedPath(path))\n    case None => Left(NoAvailableRoute)\n  }\n}"}
{"id":"a5bb3166-3b3d-42f4-b5f5-b656bc0ef988","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class BatteryWarning(message: String)\ndef validateDroneEnergy(energy: Double): Option[BatteryWarning] =\n  if (energy < 15.0) Some(BatteryWarning(\"Low drone battery. Optimize path or recharge.\")) else None"}
{"id":"5f53c31f-91d5-4380-bd94-45e569350da5","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait AirspaceCheckError\ncase object BlockedByNoFlyZone extends AirspaceCheckError\ndef verifyPathForNoFlyZones(path: List[String], noFlyZones: Set[String]): Either[AirspaceCheckError, List[String]] = {\n  if (path.exists(noFlyZones.contains)) Left(BlockedByNoFlyZone)\n  else Right(path)\n}"}
{"id":"d76fbac1-d536-4286-b29a-d40d22400757","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"import scala.util.Try case class Route(segments: List[String])\ndef tryOptimizeRoute(segments: List[String]): scala.util.Try[Route] = scala.util.Try(Route(segments).copy(segments = segments.reverse))"}
{"id":"211fd407-1be1-4f6a-90a2-c27924fa9681","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait AltitudeValidationError\ncase object AltitudeTooLow extends AltitudeValidationError\ncase object AltitudeTooHigh extends AltitudeValidationError\ndef validateAltitudeRange(altitude: Double): Either[AltitudeValidationError, Double] =\n  if (altitude < 10.0) Left(AltitudeTooLow)\n  else if (altitude > 120.0) Left(AltitudeTooHigh)\n  else Right(altitude)"}
{"id":"c3f8a998-732f-4c3b-8673-65cbec3357cd","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class ObstacleDetected(location: String)\ndef checkObstaclesOnPath(path: List[String], obstacles: Set[String]): Option[ObstacleDetected] =\n  path.find(obstacles.contains).map(ObstacleDetected.apply)"}
{"id":"dd88044a-5794-4a07-92dd-6581f80b2af8","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait DroneAssignmentError\ncase object DroneBusy extends DroneAssignmentError\ncase object DroneIdUnknown extends DroneAssignmentError\ndef assignDrone(id: String, busyDrones: Set[String], knownDrones: Set[String]): Either[DroneAssignmentError, String] = {\n  if (!knownDrones.contains(id)) Left(DroneIdUnknown)\n  else if (busyDrones.contains(id)) Left(DroneBusy)\n  else Right(s\"Drone $id assigned successfully\")\n}"}
{"id":"2341f2bc-0559-41d9-a355-2b6103243be8","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait WeatherInputError\ncase object WeatherDataUnavailable extends WeatherInputError\ndef fetchWeatherInfo(location: String, data: Map[String, String]): Either[WeatherInputError, String] =\n  data.get(location).toRight(WeatherDataUnavailable)"}
{"id":"9fbed25f-ea65-4333-996c-825414af6a6d","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"import scala.util.Try\ncase class DeliveryRoute(path: List[String])\ndef safelyBuildDeliveryRoute(steps: List[String]): scala.util.Try[DeliveryRoute] =\n  scala.util.Try(DeliveryRoute(steps))"}
{"id":"84e219a8-2cc9-4d86-bf9b-bb42a489e2c5","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait DeliveryZoneSelectionError\ncase object DeliveryZoneNotFound extends DeliveryZoneSelectionError\ndef selectZone(zones: List[String], target: String): Either[DeliveryZoneSelectionError, String] =\n  zones.find(_ == target).toRight(DeliveryZoneNotFound)"}
{"id":"505ef0cd-b0db-4d3b-89d3-cdbd738b44ae","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait RouteSpeedError\ncase object DroneSpeedUnknown extends RouteSpeedError\ndef getDroneRouteSpeed(droneId: String, speeds: Map[String, Double]): Either[RouteSpeedError, Double] =\n  speeds.get(droneId).toRight(DroneSpeedUnknown)"}
{"id":"1e62aaaa-fbac-445a-85ad-4a87f00950c3","timestamp":1746102750696,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class Coordinates(latitude: Double, longitude: Double)\ndef validateCoordinates(coords: Coordinates): Option[Coordinates] =\n  if coords.latitude < -90 || coords.latitude > 90 then None\n  else if coords.longitude < -180 || coords.longitude > 180 then None\n  else Some(coords)"}
{"id":"512fb6f1-4375-4df8-a358-66eaf5582385","timestamp":1746102750696,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def calculateDeliveryTime(distance: Double, speed: Double): Double =\n  if (speed <= 0) throw new IllegalArgumentException(\"Drone speed must be positive.\")\n  distance / speed"}
{"id":"9ec3cd68-1452-4dd5-8786-8528a5a8f2a3","timestamp":1746102750696,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait PathOptimizationError\ncase object NoAvailableRoute extends PathOptimizationError\ncase object DeliveryPointNotFound extends PathOptimizationError\n\ndef findOptimalRoute(destination: String, availableRoutes: Map[String, List[String]]): Either[PathOptimizationError, List[String]] =\n  availableRoutes.get(destination) match\n    case Some(route) if route.nonEmpty => Right(route)\n    case Some(_) => Left(NoAvailableRoute)\n    case None => Left(DeliveryPointNotFound)"}
{"id":"3fcab155-8a20-4b30-8e72-a9d8672e59b1","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DroneBatteryError(message: String) extends Exception(message)\ndef updateDroneBattery(droneId: Int, newLevel: Double): Unit =\n  if (newLevel < 0 || newLevel > 100) throw new DroneBatteryError(\"Battery level out of bounds.\")\n  println(s\"Drone $droneId battery updated to $newLevel%\")"}
{"id":"aed5be29-5c14-41ad-aa62-fddac354098b","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"import scala.util.Try\ndef parseWaypoint(str: String): Try[(Double, Double)] =\n  Try {\n    val parts = str.split(\",\")\n    (parts(0).toDouble, parts(1).toDouble)\n  }"}
{"id":"7cab24df-d1e9-4763-aa02-770d77c477a1","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def planDetourPath(obstacles: List[(Double, Double)]): List[(Double, Double)] =\n  if (obstacles.isEmpty) throw new RuntimeException(\"No obstacles provided for detour planning.\")\n  obstacles.map(obs => (obs._1 + 0.01, obs._2 + 0.01))"}
{"id":"da43bf7e-e452-42dc-9dfe-222f5c99ab05","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait OptimizationIssue\ncase object ExceedsMaxPayload extends OptimizationIssue\ncase object UnsafeWeather extends OptimizationIssue\n\ndef optimizePayloadWeight(weight: Double, maxWeight: Double, isWeatherSafe: Boolean): Either[OptimizationIssue, Double] =\n  if (!isWeatherSafe) Left(UnsafeWeather)\n  else if (weight > maxWeight) Left(ExceedsMaxPayload)\n  else Right(weight)"}
{"id":"411019df-3aab-4e10-90a2-6247b4356d8c","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def estimateBatteryRequired(distance: Double, consumptionRate: Double): Double =\n  try {\n    if (consumptionRate <= 0) throw new IllegalArgumentException(\"Invalid consumption rate.\")\n    distance * consumptionRate\n  } catch {\n    case ex: Exception =>\n      println(s\"Failed to estimate battery: ${ex.getMessage}\")\n      -1\n  }"}
{"id":"741f9f9c-ae0f-4fba-ab7d-7ff95df9642d","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"import scala.util.Try\ndef safeComputeElevationAdjustment(pointA: (Double, Double), pointB: (Double, Double)): Try[Double] =\n  Try {\n    Math.abs(pointA._1 - pointB._1) * 0.05 + Math.abs(pointA._2 - pointB._2) * 0.03\n  }"}
{"id":"e46fcd50-4e3c-4441-84a8-079e674c961b","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def reserveAirspace(droneId: String, region: String): Unit =\n  try {\n    if (region.isEmpty) throw new Exception(\"Airspace region required.\")\n    println(s\"Airspace for drone $droneId reserved in region $region.\")\n  } catch {\n    case ex: Exception =>\n      println(s\"Reservation failed: ${ex.getMessage}\")\n  }"}
{"id":"180c2cc3-005d-48f6-a234-3666aeb448fe","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait PathPlanningError\ncase class ObstacleDetected(coords: (Double, Double)) extends PathPlanningError\ncase object MaxRangeExceeded extends PathPlanningError\n\ndef planPathWithObstacleAvoidance(start: (Double, Double), end: (Double, Double), obstacles: List[(Double, Double)], maxRange: Double): Either[PathPlanningError, List[(Double, Double)]] =\n  if (obstacles.exists(obs => obs == start || obs == end)) Left(ObstacleDetected(start))\n  else if (Math.abs(start._1 - end._1) + Math.abs(start._2 - end._2) > maxRange) Left(MaxRangeExceeded)\n  else Right(List(start, end))"}
{"id":"190b729e-62a0-47d8-a29e-4fb9f13bbcdd","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class RouteAssignmentFailure(message: String) extends Exception(message)\ndef assignRouteToDrone(route: List[(Double, Double)], droneId: String): Unit =\n  if (route.isEmpty) throw new RouteAssignmentFailure(s\"No route available for drone $droneId.\")\n  println(s\"Route assigned to drone $droneId.\")"}
{"id":"1c029da0-61ec-4348-818f-8935f3e27f6b","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def extractLandingZone(zones: List[(Double, Double)], preference: (Double, Double)): Option[(Double, Double)] =\n  zones.find(zone => zone == preference)"}
{"id":"eae4d819-27f1-400d-a608-c9da025eb8da","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getWeatherCondition(region: String): String =\n  try {\n    if (region == \"restricted\") throw new Exception(\"Weather data not available.\")\n    \"Clear\"\n  } catch {\n    case ex: Exception =>\n      s\"Error: ${ex.getMessage}\"\n  }"}
{"id":"2af1c6fb-2fd7-4dd4-9e8c-afa077aec3d5","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"import scala.util.Try\ndef parseDroneConfig(input: String): Try[Map[String, String]] =\n  Try {\n    input.split(\";\").map(_.split(\"=\")).collect {\n      case Array(k, v) => k -> v\n    }.toMap\n  }"}
{"id":"3b12f4f8-2209-4a78-ad0f-c765e52b7718","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getDropOffPointAddress(addresses: List[String], index: Int): String =\n  if (index < 0 || index >= addresses.length) throw new IndexOutOfBoundsException(\"Drop-off point index out of bounds.\")\n  addresses(index)"}
{"id":"66547006-1806-4bf0-a0b7-05ebdba1caec","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def selectAlternativeDrone(drones: List[(String, Double)]): Option[(String, Double)] =\n  drones.find(_._2 > 50.0)"}
{"id":"07c8bd0b-cb3b-4e72-a445-5681bb90cd00","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def recalculatePathLength(path: List[(Double, Double)]): Double =\n  if (path.size < 2) throw new IllegalArgumentException(\"Path too short to calculate length.\")\n  (path zip path.tail).map { case (a, b) =>\n    val dx = a._1 - b._1\n    val dy = a._2 - b._2\n    Math.sqrt(dx*dx + dy*dy)\n  }.sum"}
{"id":"34b39952-740c-4006-852a-e62d00888c6d","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait FlightRestrictionError\ncase object NoFlyZone extends FlightRestrictionError\ncase object InvalidFlightAltitude extends FlightRestrictionError\n\ndef checkFlightRestrictions(region: String, altitude: Double): Either[FlightRestrictionError, String] =\n  if (region == \"NFZ\") Left(NoFlyZone)\n  else if (altitude < 10 || altitude > 120) Left(InvalidFlightAltitude)\n  else Right(\"Allowed\")"}
{"id":"5f40f760-a84c-4799-9c9e-b6aa03fd7838","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimDetails(policyNumber: String, amount: Double)\nsealed trait ClaimSubmissionError\ncase object InvalidPolicyNumber extends ClaimSubmissionError\ncase object InvalidClaimAmount extends ClaimSubmissionError\n\ndef validateClaim(details: ClaimDetails): Either[ClaimSubmissionError, ClaimDetails] =\n  if details.policyNumber.isEmpty then Left(InvalidPolicyNumber)\n  else if details.amount <= 0 then Left(InvalidClaimAmount)\n  else Right(details)"}
{"id":"e188a78f-89af-4acc-92a2-4890a755c654","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def submitClaim(claimId: Int): String = {\n  if (claimId <= 0) {\n    throw new IllegalArgumentException(\"Claim ID must be positive\")\n  }\n  // follow-up steps for submission\n  \"Submission Successful\"\n}\n\ntry {\n  submitClaim(-12)\n} catch {\n  case ex: IllegalArgumentException => \"Invalid claim submission\"\n}"}
{"id":"2b575a14-2760-403e-9354-0031653525cc","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseClaimAmount(amountStr: String): Try[Double] =\n  Try(amountStr.toDouble).filter(_ > 0)"}
{"id":"2a46e177-2c68-4973-8bbb-c92f9c152959","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def findPolicyHolder(policyNumber: String): String = {\n  if (policyNumber != \"123456\") {\n    throw new RuntimeException(\"Policy holder not found\")\n  }\n  \"Derek Carter\"\n}\n\ntry {\n  findPolicyHolder(\"abcdef\")\n} catch {\n  case _: Throwable => \"Unknown policy holder\"\n}"}
{"id":"d877dd6c-253c-4cf8-a016-8fe8521bf0d4","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait PortalError\ncase class DocumentUploadError(reason: String) extends PortalError\n\ndef uploadDocument(fileSize: Int): Either[PortalError, String] =\n  if fileSize > 5_000_000 then Left(DocumentUploadError(\"Max size exceeded\"))\n  else Right(\"Document uploaded successfully\")"}
{"id":"0599db22-987c-44c3-bd2e-844bb6dc5bfa","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def calculateReimbursement(total: Double): Double = {\n  if (total < 0) {\n    throw new IllegalStateException(\"Reimbursement cannot be negative\")\n  }\n  total * 0.8\n}\n\ntry {\n  calculateReimbursement(-100)\n} catch {\n  case ex: IllegalStateException => 0.0\n}"}
{"id":"5a1a4376-1d87-4c52-b998-bfb422c7ae92","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def validateSupportingDocuments(documents: List[String]): Option[List[String]] =\n  if documents.isEmpty then None else Some(documents.filter(_.endsWith(\".pdf\")))"}
{"id":"278da095-61d3-4a92-a4ba-779cd432f584","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class SubmissionValidationException(msg: String) extends Exception(msg)\n\ndef checkSubmissionFields(fields: Map[String, String]): Unit = {\n  if (!fields.contains(\"policyNumber\")) {\n    throw new SubmissionValidationException(\"Missing policy number\")\n  }\n}\n\ntry {\n  checkSubmissionFields(Map(\"claimAmount\" -> \"700\"))\n} catch {\n  case ex: SubmissionValidationException => println(ex.getMessage)\n}"}
{"id":"695e7577-6c11-499f-aff0-902aeaa4604c","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimReference(number: String)\nsealed trait ClaimReferenceError\ncase object EmptyClaimReference extends ClaimReferenceError\n\ndef validateClaimReference(ref: String): Either[ClaimReferenceError, ClaimReference] =\n  if ref.trim.isEmpty then Left(EmptyClaimReference)\n  else Right(ClaimReference(ref.trim))"}
{"id":"3ad96a4d-fc03-4704-858d-446b2a37e23f","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def fetchClaimStatus(claimNumber: String): String = {\n  if (claimNumber == \"\") {\n    throw new NullPointerException(\"Claim number is required\")\n  }\n  \"Approved\"\n}\n\ntry {\n  fetchClaimStatus(\"\")\n} catch {\n  case _: NullPointerException => \"Unknown\"\n}"}
{"id":"37c5eeab-b209-48a6-8dd0-8047a8053ab4","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePolicyId(id: String): Try[Int] = Try(id.toInt).filter(_ > 0)"}
{"id":"0e33fb09-c5f0-43cc-a7e8-1479e7737d7c","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def checkApprovalAmount(claimAmount: Double): Double = {\n  if (claimAmount > 10000) {\n    throw new Exception(\"Amount exceeds approval limit\")\n  }\n  claimAmount\n}\n\ntry {\n  checkApprovalAmount(20000)\n} catch {\n  case ex: Exception => -1.0\n}"}
{"id":"11e408be-ab53-47dc-ae46-3c76dcb18e83","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait AttachmentError\ncase object MissingAttachment extends AttachmentError\n\ndef extractFirstEvidenceAttachment(files: List[String]): Either[AttachmentError, String] =\n  files.find(_.startsWith(\"evidence_\")).toRight(MissingAttachment)"}
{"id":"e7849b95-e483-4734-b537-b69a733330f1","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def registerNewPolicyHolder(name: String): String = {\n  if (name == null || name.isBlank) {\n    throw new IllegalArgumentException(\"Invalid policy holder name\")\n  }\n  \"Policy holder registered\"\n}\n\ntry {\n  registerNewPolicyHolder(\"\")\n} catch {\n  case ex: IllegalArgumentException => \"Registration failed\"\n}"}
{"id":"3ec82980-7785-47e4-afbb-321aa5c26da3","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait ClaimDecisionError\ncase class DecisionParseError(msg: String) extends ClaimDecisionError\n\ndef parseDecision(decisionStr: String): Either[ClaimDecisionError, Boolean] =\n  decisionStr.toLowerCase match\n    case \"approve\" => Right(true)\n    case \"deny\" => Right(false)\n    case v => Left(DecisionParseError(s\"Unknown decision '$v'\"))"}
{"id":"dcbfab31-46d7-4792-836f-296e38897c8c","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimNotFoundException(msg: String) extends Exception(msg)\n\ndef getClaimByReference(ref: String): String = {\n  if (ref.trim.isEmpty) {\n    throw new ClaimNotFoundException(\"Claim reference is empty\")\n  }\n  \"Claim details information\"\n}\n\ntry {\n  getClaimByReference(\"\")\n} catch {\n  case _: ClaimNotFoundException => \"Not found\"\n}"}
{"id":"44c67705-9718-4210-b5fb-66c4e492b2a1","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\n\ndef trySubmitOnlineForm(formContent: String): Try[String] = Try {\n  require(formContent.nonEmpty, \"Form content is empty\")\n  \"Form submitted online\"\n}"}
{"id":"7469bbba-b40b-4a45-a3aa-e8de6ee9691e","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def removeClaim(claimNumber: String): Unit = {\n  if (claimNumber.isBlank) {\n    throw new IllegalArgumentException(\"Claim number required for removal\")\n  }\n}\n\ntry {\n  removeClaim(\"\")\n} catch {\n  case ex: IllegalArgumentException => println(\"Removal failed\")\n}"}
{"id":"2d5ecffc-fa70-49fd-b9ec-308b883a867b","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait PolicyValidationError\ncase class InvalidPolicy(reason: String) extends PolicyValidationError\n\ndef checkPolicyNumberFormat(policy: String): Either[PolicyValidationError, String] =\n  if policy.matches(\"[A-Z]{2}\\d{6}\") then Right(policy) else Left(InvalidPolicy(\"Bad format\"))"}
{"id":"154a1ea8-0053-4061-b9a3-75b110359b12","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"object IncompleteClaimException extends Exception(\"Incomplete claim details\")\n\ndef submitFinalClaim(details: Map[String, String]): String = {\n  if (!details.contains(\"insuredName\") || !details.contains(\"incidentDate\")) {\n    throw IncompleteClaimException\n  }\n  \"Final claim submitted\"\n}\n\ntry {\n  submitFinalClaim(Map(\"incidentDate\" -> \"2024-05-01\"))\n} catch {\n  case ex: Exception => \"Submission failed\"\n}"}
{"id":"22577fe2-d9cd-4153-be93-6beefb5e4f43","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimDetails(policyNumber: String, claimAmount: Double, incidentDesc: String)\nsealed trait SubmissionError\ncase object InvalidPolicyNumber extends SubmissionError\ncase object ExceedsCoverage extends SubmissionError\n\ndef validateClaim(details: ClaimDetails, maxCoverage: Double): Either[SubmissionError, ClaimDetails] =\n  if details.policyNumber.isEmpty then Left(InvalidPolicyNumber)\n  else if details.claimAmount > maxCoverage then Left(ExceedsCoverage)\n  else Right(details)"}
{"id":"bf62cd77-67d3-42ff-9ad3-c607334cf121","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class PolicyLookupException(msg: String) extends Exception(msg)\n\ndef getPolicyHolderName(policyNumber: String): String =\n  if policyNumber == \"\" then throw new PolicyLookupException(\"Policy number missing\")\n  else if policyNumber == \"0000\" then throw new PolicyLookupException(\"Policy not found\")\n  else \"Alice Smith\""}
{"id":"32eb8d0f-e158-4a78-a880-3f936b1d4b9e","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class Claimant(email: String)\ndef validateClaimantEmail(claimant: Claimant): Option[Claimant] =\n  if claimant.email.contains(\"@\") then Some(claimant)\n  else None"}
{"id":"dec04932-03f4-499a-80ae-9ce7f7a1405c","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def calculateClaimPayout(amount: Double, deductible: Double): Double =\n  if amount <= 0 then throw new IllegalArgumentException(\"Claim amount must be positive\")\n  else if deductible < 0 then throw new IllegalArgumentException(\"Deductible cannot be negative\")\n  else amount - deductible"}
{"id":"52dd33fb-c21c-4526-b0df-b7256307c539","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait FileUploadError\ncase object FileTooLarge extends FileUploadError\ncase object InvalidFileType extends FileUploadError\ncase class UploadedFile(name: String, size: Int, mimeType: String)\ndef checkUploadedFile(file: UploadedFile): Either[FileUploadError, UploadedFile] =\n  if file.size > 1024 * 1024 then Left(FileTooLarge)\n  else if file.mimeType != \"application/pdf\" then Left(InvalidFileType)\n  else Right(file)"}
{"id":"97230541-16a2-4a09-9943-4c9e8bced628","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def saveClaimToDatabase(claimId: String, amount: Double): Unit =\n  try\n    val idNum = claimId.toInt\n    if amount > 10000 then throw new RuntimeException(\"Claim amount exceeds approval limit\")\n  catch\n    case ex: Exception => println(\"Database save error: \" + ex.getMessage)"}
{"id":"cad2ab1a-aae9-49e2-bdba-e8a696b066aa","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\ndef computeAdjustedLoss(claimAmount: Double, adjustmentFactor: Double): Try[Double] =\n  Try {\n    if adjustmentFactor < 0 then sys.error(\"Negative adjustment factor\")\n    claimAmount * adjustmentFactor\n  }"}
{"id":"02cd45e4-75b4-4a87-9124-c53a0534e7b8","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class MissingRequiredDocumentException(msg: String) extends Exception(msg)\ndef processDocumentUpload(documentType: String): String =\n  if documentType != \"proof_of_loss\" then\n    throw new MissingRequiredDocumentException(\"Proof of loss required\")\n  else \"Upload accepted\""}
{"id":"19376093-2f90-49c0-bcb9-282306966b14","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait PolicyVerificationError\ncase object PolicySuspended extends PolicyVerificationError\ncase object PolicyExpired extends PolicyVerificationError\ndef verifyPolicyStatus(active: Boolean, expired: Boolean): Either[PolicyVerificationError, String] =\n  if expired then Left(PolicyExpired)\n  else if !active then Left(PolicySuspended)\n  else Right(\"Policy verified\")"}
{"id":"423460cd-e390-43af-9cb1-e084ad1eaa96","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def updateClaimStatus(claimId: String, status: String): Unit =\n  try\n    if status != \"submitted\" && status != \"approved\" then\n      throw new IllegalArgumentException(\"Unsupported status\")\n    // Pretend to update a database\n  catch\n    case e: Exception => println(s\"Failed to update claim $claimId: ${e.getMessage}\")"}
{"id":"81d7c676-5b47-4404-94a9-742846d72da7","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\ndef parseClaimAmount(amountStr: String): Try[Double] =\n  Try(amountStr.toDouble)"}
{"id":"a99feb71-fb86-4ae4-87c6-82a5bf3be01c","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getPaymentReferenceNumber(claimNumber: String): String =\n  if claimNumber.length < 6 then\n    throw new IllegalArgumentException(\"Invalid claim number for payment reference\")\n  else\n    s\"PAY${claimNumber.takeRight(6)}\""}
{"id":"0ad5ecbe-f94a-477a-b488-c0c6b9f7568f","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimSubmission(attachments: List[String])\ndef attachmentsPresent(submission: ClaimSubmission): Option[ClaimSubmission] =\n  if submission.attachments.isEmpty then None else Some(submission)"}
{"id":"0694187f-7b9a-4e33-a19d-4150f85d6899","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def computePremiumReduction(loyaltyYears: Int): Double =\n  try\n    if loyaltyYears < 0 then throw new Exception(\"Loyalty years cannot be negative\")\n    loyaltyYears * 5.0\n  catch\n    case e: Exception => 0.0"}
{"id":"ba1e7895-2196-46b2-8578-f3504aeb215b","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class VehicleClaim(vin: String, isInsured: Boolean)\nsealed trait VehicleClaimError\ncase object UninsuredVehicle extends VehicleClaimError\ndef validateVehicleClaim(claim: VehicleClaim): Either[VehicleClaimError, VehicleClaim] =\n  if claim.isInsured then Right(claim)\n  else Left(UninsuredVehicle)"}
{"id":"8a7c177d-30b9-45bc-a5c7-e3859500ec25","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def checkAdjusterAssignment(adjusterId: String): String =\n  try\n    if adjusterId.isEmpty then\n      throw new NoSuchElementException(\"No adjuster assigned to claim\")\n    else adjusterId\n  catch\n    case _: Throwable => \"Unassigned\""}
{"id":"dcb4a99b-fa4d-40ea-86d5-295f93c69e67","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\ncase class ClaimPhoto(fileName: String)\ndef getPhotoExtension(photo: ClaimPhoto): Try[String] =\n  Try(photo.fileName.split('.').last)"}
{"id":"4a299515-29bc-4441-8ab0-9361c73dba53","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getPolicyHolderContact(policyNumber: String): String =\n  if policyNumber.startsWith(\"CANCELLED\") then\n    throw new Exception(\"Cannot get contact for cancelled policy\")\n  else\n    \"contact@example.com\""}
{"id":"735f17f2-de7a-4204-8afb-c8d6b024829d","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class BankDetails(iban: String)\ndef validateBankDetails(details: BankDetails): Option[BankDetails] =\n  if details.iban.matches(\"[A-Z]{2}\\d{14}\") then Some(details) else None"}
{"id":"2d9dd637-824b-4708-94bb-0cea62f7b67f","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def recalculateDeductible(deductible: Double): Double =\n  try\n    if deductible < 0 then throw new Exception(\"Deductible cannot be negative\")\n    deductible * 0.95\n  catch\n    case ex: Exception => -1.0"}
{"id":"3863025c-7d25-406e-b243-769fd16d5af3","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class StudentAssessmentError(message: String)\ncase class Assessment(score: Double, studentId: String)\ndef parseAssessment(raw: String): Either[StudentAssessmentError, Assessment] = {\n  raw.split(\",\") match {\n    case Array(id, scoreStr) =>\n      scala.util.Try(scoreStr.toDouble).toOption match {\n        case Some(score) => Right(Assessment(score, id))\n        case None => Left(StudentAssessmentError(\"Invalid score format\"))\n      }\n    case _ => Left(StudentAssessmentError(\"Malformed input\"))\n  }\n}"}
{"id":"46d30149-a33a-4697-ad15-53daea0a76c7","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def getStudentProgress(studentId: String): Option[Double] = {\n  val records = Map(\"s1001\" -> 0.82, \"s1002\" -> 0.56)\n  records.get(studentId)\n}"}
{"id":"f5890db2-fb95-4a23-b69d-ccb67d83e4fd","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait EnrollmentError\ncase object StudentNotFound extends EnrollmentError\ncase object CourseNotFound extends EnrollmentError\ncase class AlreadyEnrolled(courseId: String) extends EnrollmentError\n\ndef enrollStudent(studentId: String, courseId: String, enrollments: Set[(String, String)]): Either[EnrollmentError, Set[(String, String)]] = {\n  if (studentId.isEmpty) Left(StudentNotFound)\n  else if (courseId.isEmpty) Left(CourseNotFound)\n  else if (enrollments.contains((studentId, courseId))) Left(AlreadyEnrolled(courseId))\n  else Right(enrollments + ((studentId, courseId)))\n}"}
{"id":"ca1e1d9d-200b-4af4-a2e9-731a4db9b4d6","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def safeGradeAverage(grades: List[Double]): Option[Double] = {\n  if (grades.isEmpty) None\n  else Some(grades.sum / grades.length)\n}"}
{"id":"de45feaf-0bec-4210-a0b1-c999f60b93f6","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"import scala.util.Try\ncase class AnalysisResult(summary: String)\ndef tryAnalyzeLearningPatterns(data: String): scala.util.Try[AnalysisResult] = {\n  scala.util.Try {\n    if (data.isEmpty) throw new IllegalArgumentException(\"No analytics data\")\n    AnalysisResult(s\"Processed $data successfully\")\n  }\n}"}
{"id":"dca18d30-6587-4318-879b-1846a2770f96","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait PerformanceQueryError\ncase object NoPerfDataFound extends PerformanceQueryError\ndef fetchPerformance(studentId: String, db: Map[String, Double]): Either[PerformanceQueryError, Double] = {\n  db.get(studentId).toRight(NoPerfDataFound)\n}"}
{"id":"df824735-5dce-4b88-9715-8959265d4e84","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def extractFirstFeedback(feedback: List[String]): Option[String] = \n  feedback.headOption"}
{"id":"e5ee7e9a-3533-45ad-83f5-ddb9b5e4bf3e","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait SubmissionError\ncase object PlagiarismDetected extends SubmissionError\ncase object SubmissionLate extends SubmissionError\n\ndef validateSubmission(isPlagiarized: Boolean, isLate: Boolean): Either[SubmissionError, String] = {\n  if (isPlagiarized) Left(PlagiarismDetected)\n  else if (isLate) Left(SubmissionLate)\n  else Right(\"Submission accepted\")\n}"}
{"id":"7197ea98-7e87-49d0-b8e1-2d9a9f1476f5","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def safeConvertGradeToLetter(numeric: Double): Option[String] = {\n  if (numeric >= 90) Some(\"A\")\n  else if (numeric >= 80) Some(\"B\")\n  else if (numeric >= 70) Some(\"C\")\n  else None\n}"}
{"id":"e704187a-230f-41be-8733-54ae760ec03d","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"import scala.util.Try\ndef parseTimeSpent(minutesStr: String): Try[Int] = {\n  scala.util.Try(minutesStr.toInt)\n}"}
{"id":"7118bc09-5281-49fb-8fa5-53c931ab06dc","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class StudentNotRegisteredException(msg: String) extends Exception(msg)\ndef getStudentAttendance(studentId: String): Double = {\n  val attendanceRecords = Map(\"2001\" -> 0.95)\n  if (!attendanceRecords.contains(studentId)) {\n    throw new StudentNotRegisteredException(s\"No attendance for $studentId\")\n  }\n  attendanceRecords(studentId)\n}"}
{"id":"41198a96-5b0f-4448-bf2d-0d31e494ac28","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getAssessmentScoreUnsafe(assessmentId: String): Double = {\n  val scores = Map(\"a101\" -> 84.0)\n  if (scores.contains(assessmentId)) scores(assessmentId)\n  else throw new NoSuchElementException(\"Assessment not found\")\n}"}
{"id":"f9fca1c3-0f6d-4a71-b737-ff7c0d9e9acd","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def enrollmentCount(courseId: String): Int = {\n  try {\n    val courseEnrollments = Map(\"CS101\" -> 28)\n    courseEnrollments(courseId)\n  } catch {\n    case _: Exception =>\n      throw new RuntimeException(\"Course does not exist\")\n  }\n}"}
{"id":"725ae3bc-745e-482a-8940-4da1892413fe","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def calculateProgressOrThrow(studentId: String): Double = {\n  val progress = Map(\"stu123\" -> 0.88)\n  if (!progress.contains(studentId)) throw new Exception(\"Student progress unavailable\")\n  progress(studentId)\n}"}
{"id":"4d6904e3-50cf-4631-a4e4-0514afac9ca7","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getGradesFromFile(filename: String): List[Double] = {\n  try {\n    if (filename == \"\") throw new IllegalArgumentException(\"Filename required\")\n    List(95.5, 87.0)\n  } catch {\n    case ex: Exception =>\n      throw new Exception(s\"Failed to read grades: ${ex.getMessage}\")\n  }\n}"}
{"id":"91bfd9c1-7a78-4d93-99e7-331d3a727b06","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class AnalyticsFileNotFound(msg: String) extends Exception(msg)\ndef readLearningAnalyticsFile(file: String): String = {\n  if (file != \"analytics.csv\") throw new AnalyticsFileNotFound(\"File not found\")\n  \"student1, 90\"\n}"}
{"id":"3a22998d-b325-4b8c-a0ef-457b0559e9dc","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def unsafeStudentLookup(id: String): String = {\n  val students = Map(\"alpha\" -> \"Susan Lee\")\n  students.getOrElse(id, throw new Exception(\"Student record not found\"))\n}"}
{"id":"cc989c2a-b2b4-46a5-8423-01e4c533d7ce","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getAverageSessionLength(sessionDurations: List[Int]): Double = {\n  try {\n    sessionDurations.sum.toDouble / sessionDurations.length\n  } catch {\n    case _: Exception => throw new ArithmeticException(\"No sessions to compute average\")\n  }\n}"}
{"id":"ac4a4a8e-256d-4f5f-b747-232511aa84a9","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def findCourseEnrollmentUnsafe(studentId: String, enrollments: Map[String, String]): String = {\n  try {\n    enrollments(studentId)\n  } catch {\n    case _: Exception => throw new Exception(\"Enrollment not found for student\")\n  }\n}"}
{"id":"ac0860ff-eb81-4d3e-8dc2-209cd10b380f","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def unsafeFeedbackAccess(feedbackList: List[String], index: Int): String = {\n  if (index < 0 || index >= feedbackList.length) {\n    throw new IndexOutOfBoundsException(s\"No feedback at position $index\")\n  }\n  feedbackList(index)\n}"}
{"id":"7833670f-da51-4e56-836f-6679c1796854","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class AssessmentProcessingError(message: String)\ncase class ProcessedAssessment(score: Double)\ndef analyzeAssessment(rawScore: String): Either[AssessmentProcessingError, ProcessedAssessment] = \n  rawScore.toDoubleOption match\n    case Some(score) if score >= 0 && score <= 100 => Right(ProcessedAssessment(score))\n    case Some(score) => Left(AssessmentProcessingError(s\"Invalid score range: $score\"))\n    case None => Left(AssessmentProcessingError(\"Score is not a number\"))"}
{"id":"14cd6ca4-3a96-45fe-908a-c803beb1dae6","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class GradeCalculationException(message: String) extends Exception(message)\ndef calculateStudentGrade(score: Double): String =\n  if (score < 0 || score > 100)\n    throw new GradeCalculationException(\"Score out of range\")\n  else if (score >= 90) \"A\"\n  else if (score >= 80) \"B\"\n  else if (score >= 70) \"C\"\n  else if (score >= 60) \"D\"\n  else \"F\""}
{"id":"b76c984d-4b6f-4c86-ba6e-5d50cd07cf0a","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait StudentProfileError\ncase object StudentNotFound extends StudentProfileError\ncase class StudentProfile(id: String, name: String)\ndef getStudentProfile(studentId: String): Option[StudentProfile] =\n  if studentId == \"123\" then Some(StudentProfile(\"123\", \"Jane Doe\"))\n  else None"}
{"id":"7048ed00-2af7-4049-9198-35fb8ee54edf","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def parseGradeInput(input: String): Option[Int] =\n  try input.toIntOption match\n    case Some(score) if score >= 0 && score <= 100 => Some(score)\n    case _ => None\n  catch case _ => None"}
{"id":"ef73705c-fe56-46a7-8542-cb4799a8a2ff","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def persistQuizResult(resultId: String): Unit =\n  try\n    if (resultId.isEmpty) throw new Exception(\"Missing result ID\")\n    // Some persistence logic here\n  catch\n    case e: Exception => println(s\"Quiz result persistence failed: ${e.getMessage}\")"}
{"id":"f1eaa5a6-5603-44ea-88ad-2645e216cc6f","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait CourseEnrollmentError\ncase object CourseNotAvailable extends CourseEnrollmentError\ncase class Enrolled(courseId: String)\ndef enrollInCourse(studentId: String, courseId: String): Either[CourseEnrollmentError, Enrolled] =\n  if courseId == \"CS101\" then Right(Enrolled(courseId))\n  else Left(CourseNotAvailable)"}
{"id":"8a6f720e-16b6-4cdc-8738-5bba9f943e5a","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def computeEngagementIndex(clicks: Int, duration: Int): Either[String, Double] =\n  if duration == 0 then Left(\"Duration cannot be zero\")\n  else Right(clicks.toDouble / duration)"}
{"id":"6288ed70-153f-4754-9763-886fbcfbd30b","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def calculateSessionTime(login: String, logout: String): Int =\n  try\n    val start = login.toInt\n    val end = logout.toInt\n    if (end < start) throw new Exception(\"Logout before login\")\n    end - start\n  catch\n    case e: Exception => throw new Exception(\"Session time calculation failed: \" + e.getMessage)"}
{"id":"439cadb3-772a-4269-9af8-ca50633d2da7","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class AttendanceError(message: String)\ncase class AttendanceRecord(studentId: String, present: Boolean)\ndef recordAttendance(studentId: String, present: Boolean): Either[AttendanceError, AttendanceRecord] =\n  if studentId.nonEmpty then Right(AttendanceRecord(studentId, present))\n  else Left(AttendanceError(\"Missing student ID\"))"}
{"id":"043df40e-c3c6-4fdc-982d-11a10d86cdb8","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def fetchActivityScore(activityId: String): Double =\n  if (activityId == \"\") throw new RuntimeException(\"Empty activity ID\")\n  else if (activityId == \"A1\") 25.5\n  else throw new RuntimeException(\"Activity not found\")"}
{"id":"b83bc88b-ff1e-4325-b14c-02b27769835b","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def submitAssignment(assignmentId: String): Either[String, String] =\n  if assignmentId.isEmpty then Left(\"Assignment ID required\")\n  else Right(\"Submission successful\")"}
{"id":"77680fc1-794b-4a6c-b26a-2433c84d09dd","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getModuleGrade(studentId: String, moduleCode: String): String =\n  try\n    if (studentId == \"\" || moduleCode == \"\") throw new Exception(\"Invalid identifiers\")\n    \"B+\"\n  catch\n    case e: Exception => throw new Exception(\"Could not retrieve module grade: \" + e.getMessage)"}
{"id":"ada840b2-4438-4399-9b90-561dfaaf0437","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"import scala.util.Try\ndef safelyParseEngagementMetric(metric: String): Try[Int] =\n  Try(metric.toInt)"}
{"id":"30f49012-2c31-4ccc-9af7-c7deafe49b30","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def calculateLearningPathProgress(learningPathId: String): Double =\n  try\n    if (learningPathId == \"\") throw new Exception(\"Learning path missing\")\n    0.85\n  catch\n    case e: Exception => 0.0"}
{"id":"6371223d-ff70-4c59-8023-cd53fe34cb29","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait QuizError\ncase object InvalidQuizId extends QuizError\ncase class QuizScore(quizId: String, score: Int)\ndef getQuizScore(quizId: String): Either[QuizError, QuizScore] =\n  if quizId == \"Q1\" then Right(QuizScore(\"Q1\", 94))\n  else Left(InvalidQuizId)"}
{"id":"42e7aa2e-998c-4b93-81e2-66f5033ca7f8","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def logDashboardAccess(studentId: String): Unit =\n  try\n    if (studentId.isEmpty) throw new Exception(\"Student identifier is missing\")\n  catch\n    case e: Exception => println(\"Dashboard access log failed: \" + e.getMessage)"}
{"id":"0c469829-8ec8-4b55-899d-137e11adc5d5","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef parseAndDivide(metric: String, divisor: Int): Try[Double] =\n  Try(metric.toDouble / divisor)"}
{"id":"b322db9e-c2f6-4772-81d8-e63b21809bb5","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def detectAnomalousBehavior(eventType: String): Unit =\n  try\n    if (eventType != \"login\" && eventType != \"submission\") throw new Exception(\"Unknown event type\")\n  catch\n    case e: Exception => println(\"Anomalous behavior: \" + e.getMessage)"}
{"id":"a0109daf-0345-4864-8ac7-da95dd3cf762","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class LearningResourceError(error: String)\ndef loadLearningResource(resourceId: String): Either[LearningResourceError, String] =\n  if resourceId == \"RES101\" then Right(\"Resource Loaded\")\n  else Left(LearningResourceError(\"Resource not found\"))"}
{"id":"1fbbd628-5fc6-42a4-8d72-971cc93b35bd","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def updateStudentProgression(studentId: String, newLevel: Int): Unit =\n  try\n    if (studentId.isEmpty || newLevel < 0) throw new IllegalArgumentException(\"Invalid progression update\")\n  catch\n    case e: IllegalArgumentException => println(\"Progression update failed: \" + e.getMessage)"}
{"id":"0cb0a824-affe-4ee8-ba87-6622df450854","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"case class RecipeNotFoundException(name: String) extends Exception(s\"Recipe '$name' not found\")\ndef getRecipeByName(name: String): Recipe = {\n  val recipes = List(Recipe(\"Pasta\", List(\"Noodles\"), 20))\n  recipes.find(_.name == name) match {\n    case Some(recipe) => recipe\n    case None => throw new RecipeNotFoundException(name)\n  }\n}"}
{"id":"2b118e25-1379-46c9-aa70-28a651ec8307","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def parseIngredientAmount(ingredient: String, amount: String): Double = {\n  try {\n    amount.toDouble\n  } catch {\n    case e: NumberFormatException => throw new IllegalArgumentException(s\"Invalid amount '$amount' for ingredient '$ingredient'\")\n  }\n}"}
{"id":"70203779-73b5-41d4-b886-7becba9c04d8","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def recommendRecipeForUser(user: User, recipes: List[Recipe]): Recipe = {\n  if (user.preferences.isEmpty) throw new Exception(\"No user preferences given\")\n  recipes.headOption.getOrElse(throw new Exception(\"No recipes available\"))\n}"}
{"id":"88d1d759-473b-404d-8122-648d14cbd90c","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class UserPreferenceLoader {\n  def loadPreferences(userId: Long): Map[String, Int] = {\n    try {\n      if (userId < 0) throw new RuntimeException(\"Invalid user ID\")\n      Map(\"spicy\" -> 2)\n    } catch {\n      case ex: Exception => throw new PreferenceLoadException(userId)\n    }\n  }\n}\nclass PreferenceLoadException(id: Long) extends Exception(s\"Could not load preferences for user $id\")"}
{"id":"4a5083cf-db16-4943-8769-8209af483c70","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def computeRecipeScore(user: User, recipe: Recipe): Int = {\n  try {\n    if (user.allergies.exists(recipe.ingredients.contains))\n      throw new Exception(\"Allergy found in recipe\")\n    42\n  } catch {\n    case _: Exception => -1\n  }\n}"}
{"id":"71902f9a-10d0-465e-8791-386395348fe8","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def logRecipeRecommendation(userId: Long, recipe: Recipe): Unit = {\n  try {\n    if (userId == 0) throw new Exception(\"Invalid userId\")\n    val logMsg = s\"User $userId recommended ${recipe.name}\"\n    println(logMsg)\n  } catch {\n    case ex: Exception => println(\"Logging failed: \" + ex.getMessage)\n  }\n}"}
{"id":"044559d1-ef43-4408-88b2-b7e359e68a35","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def getFavoriteCuisine(user: User): String = {\n  try {\n    user.favorites.headOption.getOrElse(throw new Exception(\"No favorite found\"))\n  } catch {\n    case ex: Exception => \"unknown\"\n  }\n}"}
{"id":"a3dedc2b-8bfa-4094-a7ed-f714a529c05e","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def filterRecipesIfVegan(recipes: List[Recipe], vegan: Boolean): List[Recipe] = {\n  try {\n    if (vegan) recipes.filter(_.isVegan)\n    else recipes\n  } catch {\n    case _: Exception => throw new Exception(\"Vegan filtering failed\")\n  }\n}"}
{"id":"cdd971e1-474e-47cb-9c8a-3a7730e765e6","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def loadUserHistory(userId: Long): List[Recipe] = {\n  try {\n    if (userId < 10) throw new Exception(\"User history not found\")\n    List(Recipe(\"Soup\", List(\"Water\"), 10))\n  } catch {\n    case ex: Exception => throw ex\n  }\n}"}
{"id":"479ee511-a4b1-4117-b9be-b55e4699402b","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"object RecommendationRunner {\n  def start(user: User): Unit = {\n    try {\n      val rec = recommendRecipeForUser(user, Nil)\n      println(rec.name)\n    } catch {\n      case ex: Exception => println(s\"Error: ${ex.getMessage}\")\n    }\n  }\n}"}
{"id":"cc3213ff-8031-426d-9653-e7ef041fac7a","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"sealed trait RecommendationError\ncase class AllergyConflict(ingredient: String) extends RecommendationError\ncase object NoRecipesAvailable extends RecommendationError\n\ndef recommendRecipe(user: User, recipes: List[Recipe]): Either[RecommendationError, Recipe] =\n  if (recipes.isEmpty) Left(NoRecipesAvailable)\n  else if (user.allergies.exists(recipes.head.ingredients.contains))\n    Left(AllergyConflict(user.allergies.head))\n  else Right(recipes.head)"}
{"id":"6c93976e-497c-4877-b7d5-bb9fc6ba8653","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeParseCookingTime(time: String): Option[Int] =\n  scala.util.Try(time.toInt).toOption"}
{"id":"523e9683-938e-4bd2-b6d6-e028f0d584e0","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"sealed trait ParseIngredientError\ncase object IngredientMissing extends ParseIngredientError\ncase object InvalidAmountFormat extends ParseIngredientError\n\ndef parseIngredientLine(line: String): Either[ParseIngredientError, (String, Int)] =\n  line.split(\":\") match {\n    case Array(name, amount) =>\n      scala.util.Try(amount.trim.toInt).toOption.toRight(InvalidAmountFormat).map(n => (name.trim, n))\n    case _ => Left(IngredientMissing)\n  }"}
{"id":"b81224b8-a5c2-44d6-b293-dbc0b6da1c46","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"trait Recommender\ncase class NotEnoughRecipes extends Throwable\n\ndef selectRandomRecipe(recipes: List[Recipe]): scala.util.Try[Recipe] =\n  scala.util.Try(recipes(scala.util.Random.nextInt(recipes.length)))\n    .recoverWith { case _: Throwable => scala.util.Failure(NotEnoughRecipes()) }"}
{"id":"8ce48cd0-5f57-409a-807f-c5794c40cfac","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeGetFavoriteCuisine(user: User): Option[String] =\n  user.favorites.headOption"}
{"id":"2bdb0f0a-3e77-430f-b54e-5b6074b350d5","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"sealed trait PreferenceError\ncase object UserUnknown extends PreferenceError\n\ndef getUserCuisinePreference(userId: Long): Either[PreferenceError, String] =\n  if (userId == 999) Left(UserUnknown)\n  else Right(\"Italian\")"}
{"id":"d134ef84-95ac-4c06-8139-19ba6b872d68","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def parseUserSuppliedRating(input: String): Either[String, Int] =\n  scala.util.Try(input.toInt).toEither.left.map(_ => s\"Invalid rating: $input\")"}
{"id":"2036e852-8d65-4c71-8f8a-4dfebed24a26","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def findRecipeByName(recipes: List[Recipe], name: String): Option[Recipe] =\n  recipes.find(_.name == name)"}
{"id":"99bcf0fe-cbc1-406b-9380-ccc5a7c4358d","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recommendVegan(recipes: List[Recipe]): Option[Recipe] =\n  recipes.find(_.isVegan)"}
{"id":"b182c517-4a39-4547-93d7-ceb8ffd26073","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def computePersonalizedScore(user: User, recipe: Recipe): Either[String, Int] =\n  if (user.allergies.exists(recipe.ingredients.contains))\n    Left(\"Recipe contains allergens for user\")\n  else Right(80)"}
{"id":"b675cbb8-8e00-4d2b-9f45-4d02a83b422b","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class User(id: String, preferences: List[String])\ncase class Recipe(name: String, ingredients: List[String])\nsealed trait RecipeRecommendationError\ncase object UserNotFound extends RecipeRecommendationError\ncase object NoMatchingRecipes extends RecipeRecommendationError\n\ndef recommendRecipes(user: User, recipes: List[Recipe]): Either[RecipeRecommendationError, List[Recipe]] =\n  val matches = recipes.filter(r => r.ingredients.exists(user.preferences.contains))\n  if matches.isEmpty then Left(NoMatchingRecipes)\n  else Right(matches)\n"}
{"id":"286378b3-f097-4af9-8ff8-7379f992d5cf","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class RecommendationEngine {\n  def findRecipeByName(name: String, recipes: List[String]): String = {\n    for (r <- recipes) {\n      if (r == name) return r\n    }\n    throw new NoSuchElementException(\"Recipe not found\")\n  }\n}\n\nobject Runner {\n  def main(args: Array[String]): Unit = {\n    try {\n      val engine = new RecommendationEngine\n      engine.findRecipeByName(\"Sushi\", List(\"Pizza\", \"Salad\"))\n    } catch {\n      case e: NoSuchElementException => println(e.getMessage)\n    }\n  }\n}\n"}
{"id":"d9986bba-eb41-43e4-bc23-ea149e5b1e12","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"sealed trait PreferenceError\ncase object EmptyPreferenceList extends PreferenceError\n\ndef topPreference(preferences: List[String]): Either[PreferenceError, String] =\n  preferences.headOption.toRight(EmptyPreferenceList)\n"}
{"id":"bc1d5079-c621-4a3f-9c6d-84cfe92f61d7","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def parseRating(ratingStr: String): Option[Int] =\n  scala.util.Try(ratingStr.toInt).toOption.filter(r => r >= 1 && r <= 5)\n"}
{"id":"38c2d813-0c4a-49ca-8674-85ba1bc40520","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class IngredientMismatchException(msg: String) extends Exception(msg)\n\ndef findRecipesWithIngredients(selected: List[String], recipes: Map[String, List[String]]): List[String] = {\n  if (selected.isEmpty) throw new IngredientMismatchException(\"No ingredients selected\")\n  recipes.filter { case (_, ings) => selected.forall(ings.contains) }.keys.toList\n}\n"}
{"id":"b0b67d5f-5363-4e74-8384-30437e1597af","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeGetFirstIngredient(ingredients: List[String]): Option[String] =\n  ingredients.headOption\n"}
{"id":"c332d17e-99f5-43c8-a97c-a0154b24da1e","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"sealed trait UserPreferenceError\ncase object PreferenceNotFound extends UserPreferenceError\n\ndef lookupPreference(userPreferences: Map[String,String], key: String): Either[UserPreferenceError, String] =\n  userPreferences.get(key).toRight(PreferenceNotFound)\n"}
{"id":"2c618e4d-342e-438d-aca7-2f80d9fd0f31","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class InvalidRecipeException(msg: String) extends Exception(msg)\n\ndef validateRecipe(recipe: Map[String, Any]): Unit = {\n  if (!recipe.contains(\"name\")) throw new InvalidRecipeException(\"Missing recipe name\")\n  if (!recipe.contains(\"ingredients\")) throw new InvalidRecipeException(\"Missing ingredients\")\n}\n"}
{"id":"c586bb67-ffa2-49a2-b96b-1ec2153a3ab6","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class RecommendationError(message: String)\n\ndef parseCalories(caloriesStr: String): Either[RecommendationError, Int] =\n  scala.util.Try(caloriesStr.toInt)\n    .toEither\n    .left.map(_ => RecommendationError(\"Invalid calorie input\"))\n"}
{"id":"94e5a8bb-6cf1-4f29-a6bf-6e8d8793c638","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recommendDiets(dietPref: Option[String]): Either[String, String] =\n  dietPref match {\n    case Some(diet) => Right(s\"Recommended diet: $diet\")\n    case None => Left(\"No dietary preferences defined.\")\n  }\n"}
{"id":"5b63938d-b76e-4e0e-ad90-91b316336c91","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class RecipeFileNotFoundException extends Exception(\"Recipe file not found.\")\n\ndef loadRecipeFile(filename: String): List[String] = {\n  if (filename.endsWith(\".txt\")) List(\"Apple Pie\", \"Potato Soup\")\n  else throw new RecipeFileNotFoundException\n}\n"}
{"id":"1ef7aaa5-bd78-4b2e-9192-a2c7e1d6edf1","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class AllergyException(msg: String) extends Exception(msg)\n\ndef checkAllergy(allergies: List[String], recipeIngredients: List[String]): Boolean = {\n  for (allergy <- allergies) {\n    if (recipeIngredients.contains(allergy)) throw new AllergyException(s\"Allergy detected for: $allergy\")\n  }\n  true\n}\n"}
{"id":"7775b21d-3db2-4790-9548-1546f6cd1af4","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def fetchRecipeRating(userId: String, recipeId: String): Option[Int] =\n  val key = userId + \":\" + recipeId\n  val database = Map(\"u1:r1\" -> 5, \"u2:r2\" -> 4)\n  database.get(key)\n"}
{"id":"9a5af76f-f2e8-4dab-bfcf-6019c5d09671","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class RecipeParsingError(reason: String)\n\ndef parseRecipeJson(json: String): Either[RecipeParsingError, Map[String, Any]] =\n  if json.trim.isEmpty then Left(RecipeParsingError(\"Empty JSON\"))\n  else Right(Map(\"name\" -> \"Lasagna\", \"ingredients\" -> List(\"pasta\", \"cheese\")))\n"}
{"id":"8c7b5ba5-587c-4cb0-a90b-a60056811c7a","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def trySuggest(recipes: List[String], query: String): String = {\n  try {\n    if (!recipes.contains(query)) throw new Exception(\"Suggestion not found\")\n    else query\n  } catch {\n    case _: Exception => \"Default Suggestion: Salad\"\n  }\n}\n"}
{"id":"be6d0921-2f14-4751-93f7-20ac25d74f1e","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def findVeganRecipe(recipes: List[(String, Boolean)]): Option[String] =\n  recipes.collectFirst { case (name, isVegan) if isVegan => name }\n"}
{"id":"342e0a0e-932c-4eba-8109-fadb20f595fa","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def validateUserAge(age: Int): Int = {\n  if (age < 0) throw new IllegalArgumentException(\"Age cannot be negative\")\n  else age\n}\n"}
{"id":"2dc66b87-7492-4cf9-9e43-4a6f45276028","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def parseIngredientCount(countStr: String): Either[String, Int] =\n  scala.util.Try(countStr.toInt) match {\n    case scala.util.Success(n) => Right(n)\n    case scala.util.Failure(_) => Left(\"Invalid ingredient count\")\n  }\n"}
{"id":"6d728878-76cf-4751-bcfc-44c4d6b08ca4","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class EmptyRecipeListException extends Exception(\"No recipes available.\")\n\ndef getFirstRecipe(recipes: List[String]): String = {\n  if (recipes.nonEmpty) recipes.head\n  else throw new EmptyRecipeListException\n}\n"}
{"id":"1945028d-2bad-4f36-ae49-27a186055c6b","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safelySelectCuisine(options: List[String], index: Int): Option[String] =\n  options.lift(index)\n"}
{"id":"88a35df0-4189-40f4-8fc8-2fd033c9d54d","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"case class Donation(donorId: Long, amount: Double, projectId: Long)\ncase class ProjectNotFound(id: Long) extends Exception(\"Project not found\")\ndef createDonation(donorId: Long, amount: Double, projectId: Long): Donation = {\n  if (amount <= 0) throw new IllegalArgumentException(\"Amount must be positive\")\n  if (!projectExists(projectId)) throw new ProjectNotFound(projectId)\n  Donation(donorId, amount, projectId)\n}\ndef projectExists(pid: Long): Boolean = pid == 1001L"}
{"id":"c0274f3d-13c8-4054-a733-3308b40178e3","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def updateCharityGoal(charityId: Long, newGoal: Double): Unit = {\n  try {\n    if (newGoal < 0) throw new IllegalArgumentException(\"Goal cannot be negative\")\n    val charityFound = charityId == 10L\n    if (!charityFound) throw new NoSuchElementException(\"Charity does not exist\")\n  } catch {\n    case _: IllegalArgumentException => println(\"Invalid goal amount\")\n    case _: NoSuchElementException => println(\"Charity missing\")\n  }\n}"}
{"id":"c1a8f704-88e2-4438-8a06-9303f1b5f929","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def allocateFunds(projectId: Long, amount: Double): String = {\n  if (amount > availableFunds(projectId))\n    throw new RuntimeException(\"Insufficient funds\")\n  \"Funds Allocated\"\n}\ndef availableFunds(projectId: Long): Double = 42.0"}
{"id":"6306e0fc-686c-46f2-a6d4-c92eddbc41b5","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"case class DonorNotFound(id: Long) extends Exception\ncase class ProjectOverfunded(projectId: Long) extends Exception\n\ndef donateToProject(donorId: Long, projectId: Long, amount: Double): Unit = {\n  if (donorId < 0) throw new DonorNotFound(donorId)\n  if (isOverfunded(projectId)) throw new ProjectOverfunded(projectId)\n}\ndef isOverfunded(id: Long): Boolean = id == 2L"}
{"id":"e005464e-18ce-4e70-b7b3-bce2363f7662","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def fetchDonation(id: Long): String = {\n  try {\n    if (id == 0L) throw new NoSuchElementException(\"Donation not found\")\n    \"Donation found\"\n  } catch {\n    case e: Exception => \"Error: \" + e.getMessage\n  }\n}"}
{"id":"dc9d293d-e257-4f8f-9dc9-84b30d8977de","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def registerVolunteer(volunteerId: Long, charityId: Long): Unit = {\n  if (existingVolunteer(volunteerId, charityId))\n    throw new IllegalStateException(\"Volunteer already registered\")\n}\ndef existingVolunteer(volunteerId: Long, charityId: Long): Boolean = volunteerId == 1L"}
{"id":"bfccc967-262c-48ad-b6cf-920295417baa","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def transferToCharity(charityId: Long, amount: Double): String = {\n  try {\n    if (!charityActive(charityId))\n      throw new IllegalStateException(\"Charity is Inactive\")\n    s\"Transferred $amount to $charityId\"\n  } catch {\n    case e: Exception => s\"Transfer failed: ${e.getMessage}\"\n  }\n}\ndef charityActive(id: Long): Boolean = id == 99L"}
{"id":"ff37b1b2-ce1f-433f-83ba-98dce680cabf","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def getCharityDetails(charityId: Long): String = {\n  if (charityId <= 0) throw new IllegalArgumentException(\"Invalid charity id\")\n  if (charityId != 501L) throw new NoSuchElementException(\"Charity not found\")\n  \"Charity Found\"\n}"}
{"id":"65aa5fa1-ef34-40c5-8ea7-565779b714cf","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def pledgeDonation(donorId: Long, amount: Double): Long = {\n  if (amount < 5)\n    throw new IllegalArgumentException(\"Minimum donation amount is $5\")\n  System.currentTimeMillis()\n}"}
{"id":"b9647931-2a57-4303-8938-779569c99632","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def processWithdrawal(userId: Long, charityId: Long, amount: Double): Unit = {\n  try {\n    if (amount <= 0) throw new IllegalArgumentException(\"Invalid amount\")\n    val permitted = userId == 77L\n    if (!permitted) throw new SecurityException(\"Not authorized\")\n  } catch {\n    case e: Exception => println(\"Withdrawal failed: \" + e.getMessage)\n  }\n}"}
{"id":"38ba9968-aac9-46f7-a296-a436112effbc","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait DonationPlatformError\ncase object DonationNegativeAmount extends DonationPlatformError\ncase object ProjectDoesNotExist extends DonationPlatformError\ncase class DonationMade(donorId: Long, projectId: Long, amount: Double)\ndef safeMakeDonation(donorId: Long, amount: Double, projectId: Long): Either[DonationPlatformError, DonationMade] = {\n  if (amount < 0) Left(DonationNegativeAmount)\n  else if (!projectExists(projectId)) Left(ProjectDoesNotExist)\n  else Right(DonationMade(donorId, projectId, amount))\n}\ndef projectExists(pid: Long): Boolean = pid == 42L"}
{"id":"35aae4ae-9493-4250-981b-7ee6bcc73237","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait RegistrationError\ncase object AlreadyRegistered extends RegistrationError\ncase object CharityNotPresent extends RegistrationError\ndef tryRegisterVolunteer(volunteerId: Long, charityId: Long, existing: Boolean): Either[RegistrationError, String] = {\n  if (existing) Left(AlreadyRegistered)\n  else if (charityId <= 0) Left(CharityNotPresent)\n  else Right(\"Registration successful\")\n}"}
{"id":"4797d68e-60d8-4959-a1e7-d8fdf954bce5","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait PledgeError\ncase object PledgeAmountTooLow extends PledgeError\ncase class PledgingSuccess(pledgeId: Long)\ndef attemptPledgeDonation(userId: Long, amount: Double): Either[PledgeError, PledgingSuccess] = {\n  if (amount < 5) Left(PledgeAmountTooLow)\n  else Right(PledgingSuccess(System.currentTimeMillis))\n}"}
{"id":"f5353806-3f02-4a33-abf1-b5e7d5ba21f3","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getDonationById(id: Long): Option[String] =\n  if (id > 0 && id < 100) Some(\"Donation record found\") else None"}
{"id":"e4b17a19-db4f-440b-9b35-d6198cb9527b","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeAllocateFunds(projectId: Long, amount: Double, available: Double): Try[String] =\n  Try {\n    require(amount > 0, \"Amount must be positive\")\n    require(amount <= available, \"Insufficient funds\")\n    \"Funds Allocated\"\n  }"}
{"id":"6cefd64d-3e36-41db-8e16-34b13635ab84","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait WithdrawalError\ncase object NotAuthorized extends WithdrawalError\ncase object NegativeWithdrawal extends WithdrawalError\ncase object CharityMissing extends WithdrawalError\ndef safeProcessWithdrawal(userId: Long, charityId: Long, amount: Double, permitted: Boolean, exists: Boolean): Either[WithdrawalError, Unit] = {\n  if (!permitted) Left(NotAuthorized)\n  else if (!exists) Left(CharityMissing)\n  else if (amount <= 0) Left(NegativeWithdrawal)\n  else Right(())\n}"}
{"id":"7c045758-30f5-407c-b763-7c7b8ae517a1","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def findCharity(charityId: Long): Option[String] =\n  if (Set(10L,20L,30L).contains(charityId)) Some(\"Charity details\") else None"}
{"id":"baaba048-6056-404d-bb6b-a4b4ccadcc66","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeCreateProject(name: String, initialGoal: Double): Try[(String, Double)] =\n  Try(require(initialGoal > 0, \"Initial goal must be positive\")).map(_ => (name, initialGoal))"}
{"id":"3bbf79b0-ba00-4826-9330-82f8ba185562","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait TransferError\ncase object CharityInactive extends TransferError\ncase class TransferSuccess(amount: Double, charityId: Long)\ndef safeTransferToCharity(charityId: Long, amount: Double, isActive: Boolean): Either[TransferError, TransferSuccess] = {\n  if (!isActive) Left(CharityInactive)\n  else Right(TransferSuccess(amount, charityId))\n}"}
{"id":"158eae3a-8f87-458d-a968-eaada61a71b9","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def safeFetchDonation(id: Long): Either[String, String] =\n  if (id == 0L) Left(\"Donation not found\") else Right(\"Donation found\")"}
{"id":"0dd7d536-8aca-4f39-818a-0883fdf6525e","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def tryUpdateCharityGoal(charityId: Long, newGoal: Double, isPresent: Boolean): Option[String] =\n  if (newGoal < 0) None\n  else if (!isPresent) None\n  else Some(s\"Updated goal for $charityId to $newGoal\")"}
{"id":"e63fdb58-da2b-4992-bf15-8a31fb66eaf4","timestamp":1746102923703,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class DonationRequest(donorEmail: String, amount: Double)\nobject DonationValidator:\n  def validate(request: DonationRequest): Option[String] =\n    if request.amount <= 0 then Some(\"Donation amount must be positive.\")\n    else if !request.donorEmail.contains(\"@\") then Some(\"Donor email is invalid.\")\n    else None"}
{"id":"57c9fc38-365d-4e82-b0b5-3c2559fd4402","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait DonationError\ncase object InsufficientBalance extends DonationError\ncase object InvalidRecipient extends DonationError\ncase class Donation(amount: Double, recipient: String)\ndef processDonation(donorBalance: Double, donation: Donation): Either[DonationError, Double] =\n  if donorBalance < donation.amount then Left(InsufficientBalance)\n  else if donation.recipient.isEmpty then Left(InvalidRecipient)\n  else Right(donorBalance - donation.amount)"}
{"id":"b38a0e9e-261e-4564-ae90-97c2291a19b2","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"import scala.util.Try\ncase class Charity(id: Int, name: String)\ndef parseCharityId(idStr: String): Try[Int] = Try(idStr.toInt)\ndef findCharity(id: Int, charities: List[Charity]): Option[Charity] =\n  charities.find(_.id == id)"}
{"id":"3bbad2cc-2bce-4654-8efa-74de608488d3","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object PaymentDeclined extends PaymentError\ncase object CardExpired extends PaymentError\ncase object InvalidPaymentDetails extends PaymentError\ncase class Payment(cardNumber: String, expYear: Int, amount: Double)\ndef handlePayment(payment: Payment): Either[PaymentError, String] =\n  if payment.amount < 1 then Left(PaymentDeclined)\n  else if payment.expYear < 2024 then Left(CardExpired)\n  else if payment.cardNumber.length < 10 then Left(InvalidPaymentDetails)\n  else Right(\"Payment successful\")"}
{"id":"36b0e398-34d2-4e5f-9995-22fa13aa4787","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def findDonorByEmail(email: String, donors: List[String]): Option[String] =\n  donors.find(_ == email)"}
{"id":"77835064-1fb9-40fd-8097-f1b006db27cd","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"import scala.util.Try\ndef calculateGiftAid(amount: Double): Try[Double] =\n  Try {\n    require(amount > 0, \"Donation must be positive\")\n    amount * 0.25\n  }"}
{"id":"e00ac987-8986-486b-b971-857c6d15b514","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"case class User(id: Int, email: String)\ncase class UserNotFound(email: String) extends Throwable\nobject UserRepository:\n  def findUserByEmail(email: String, users: List[User]): User =\n    users.find(_.email == email).getOrElse(throw UserNotFound(email))"}
{"id":"e3083058-8b31-43ee-9d42-3fd866dc8c7e","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class PaymentException(message: String) extends Exception(message)\ndef processCardPayment(amount: Double, cardNo: String): String =\n  if cardNo.isEmpty then throw PaymentException(\"Card number missing\")\n  else if amount <= 0 then throw PaymentException(\"Invalid payment amount\")\n  else \"Card payment successful\""}
{"id":"fb05a82f-bae4-4a0e-8155-359790db49a8","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def submitDonation(amount: Double): String =\n  try {\n    if amount < 1 then throw new IllegalArgumentException(\"Minimal donation is 1\")\n    s\"Accepted donation: $$amount\"\n  } catch {\n    case e: IllegalArgumentException => s\"Failed: $${e.getMessage}\"\n  }"}
{"id":"758504c9-f1fb-48d1-87f2-fff2db10e9a3","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class CharityNotFound(name: String) extends Exception(s\"Charity $$name not found\")\ndef getCharityDetails(name: String, supportedCharities: List[String]): String =\n  if !supportedCharities.contains(name) then throw CharityNotFound(name)\n  else s\"Charity: $$name\""}
{"id":"6f7f575a-6491-42a3-94ae-609831399ba6","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def parseDonationReference(ref: String): String =\n  try {\n    if ref.matches(\"^D\\d{4}$\") then s\"Reference $$ref is valid\"\n    else throw new Exception(\"Invalid donation reference format\")\n  } catch {\n    case e: Exception => \"Reference check failed\"\n  }"}
{"id":"70af2d43-f081-4122-9782-78fac4d84fad","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def logTransactionFailure(message: String): Unit =\n  try {\n    println(s\"Transaction failed: $$message\")\n  } catch {\n    case _: Throwable => ()\n  }"}
{"id":"241d3384-21f1-44f9-a76e-0473146105ba","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class DonationLimitExceeded extends Exception(\"Donation exceeded single transaction limit\")\ndef checkDonationLimit(amount: Double): Unit =\n  if amount > 10000 then throw new DonationLimitExceeded\n  ()"}
{"id":"9cc47e3d-1ab6-42f5-b236-b0232af6cee9","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait DonationProcessingError\ncase object BlockchainUnavailable extends DonationProcessingError\ncase class BlockchainReceipt(id: String)\ndef processCryptoDonation(networkReachable: Boolean): Either[DonationProcessingError, BlockchainReceipt] =\n  if !networkReachable then Left(BlockchainUnavailable)\n  else Right(BlockchainReceipt(\"tx123\"))"}
{"id":"eac92e65-932e-4e48-8bb6-af38e4acb7a6","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def safeGetDonorNickname(nicknames: Map[String, String], donorId: String): Option[String] =\n  nicknames.get(donorId)"}
{"id":"90a97421-7f65-4759-a6df-ff9530a2c1b4","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class Recipient(name: String)\ndef findRecipient(name: String, recipients: List[Recipient]): Either[String, Recipient] =\n  recipients.find(_.name == name).toRight(\"Recipient not found\")"}
{"id":"495d1c85-4af5-46f7-8b5c-e401e55d1abf","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def safeDivideDonationToCauses(total: Double, count: Int): Option[Double] =\n  if count <= 0 then None else Some(total / count)"}
{"id":"3435d1c9-0ade-4967-9b53-81a672eb2b62","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"object DonationIDGenerator:\n  def generateId(prefix: String, seq: Int): Either[String, String] =\n    if prefix.isEmpty then Left(\"Prefix is required\")\n    else Right(s\"$$prefix-$$seq\")"}
{"id":"fc8fef2f-9db7-4ee2-86ce-14fb105c932b","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def storeGiftMessage(message: String): String =\n  try\n    if message.length > 250 then throw new Exception(\"Message too long\")\n    else \"Message stored successfully\"\n  catch\n    case e: Exception => s\"Error: $${e.getMessage}\""}
{"id":"c9eefc82-3151-42e7-9c20-c3ad10cf1438","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class ScoreUpdate(team: String, score: Int)\nsealed trait LiveUpdateError\ncase object InvalidTeamName extends LiveUpdateError\n\ndef incrementScore(update: ScoreUpdate): Either[LiveUpdateError, ScoreUpdate] =\n  if update.team.trim.isEmpty then Left(InvalidTeamName)\n  else Right(update.copy(score = update.score + 1))"}
{"id":"95e36394-0453-4676-9111-4332e9ccb247","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def parseScoreUpdate(payload: String): Either[String, (String, Int)] =\n  val parts = payload.split(\":\")\n  if parts.length == 2 && parts(1).forall(_.isDigit) then\n    Right((parts(0), parts(1).toInt))\n  else\n    Left(\"Malformed score update payload\")"}
{"id":"3613ab05-0b8d-447a-8fd7-756d8c83eba4","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryParseNewScore(line: String): Option[Int] =\n  Try(line.toInt).toOption"}
{"id":"d86d3d09-c9f9-4136-bb65-008718fb4ca0","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class MatchId(value: String)\nsealed trait SubscriptionError\ncase object InvalidMatchId extends SubscriptionError\n\ndef subscribeToMatch(id: MatchId): Either[SubscriptionError, String] =\n  if id.value.nonEmpty then Right(s\"Subscribed to ${id.value}\")\n  else Left(InvalidMatchId)"}
{"id":"a95b4e7c-4484-4842-8e6b-711d104b5c9c","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait ConnectionError\ncase object ConnectionTimeout extends ConnectionError\ncase object UnauthorizedUser extends ConnectionError\n\ndef connectToScoreFeed(token: String): Either[ConnectionError, String] =\n  if token == \"authorized\" then Right(\"Connected\")\n  else Left(UnauthorizedUser)"}
{"id":"ad8e4adc-915d-48c0-9fca-27283812a114","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeFetchCurrentScore(matchId: String): Option[Int] =\n  if matchId == \"live123\" then Some(17)\n  else None"}
{"id":"5328258f-6d8c-4d3d-91e0-5829dec645e2","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait UpdateStatus\ncase object UpdateSuccess extends UpdateStatus\ncase object UpdateConflict extends UpdateStatus\n\ndef updateTeamScore(team: String, newScore: Int): Either[UpdateStatus, Int] =\n  if newScore >= 0 then Right(newScore)\n  else Left(UpdateConflict)"}
{"id":"40a7e68b-f4aa-4de7-9167-82e12cd98148","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class PlayerStats(player: String, points: Int)\nsealed trait StatsError\ncase object PlayerNotFound extends StatsError\n\ndef retrievePlayerStats(name: String): Either[StatsError, PlayerStats] =\n  if name == \"Alex\" then Right(PlayerStats(\"Alex\", 21))\n  else Left(PlayerNotFound)"}
{"id":"9c812199-322e-4982-9ae6-091a66f3dc10","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseScoreIncrement(increment: String): Try[Int] =\n  Try(increment.trim.toInt)"}
{"id":"0f8be6c9-8716-487c-9f0e-ac64f3bf0df8","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safelyRemoveSubscriber(subscribers: List[String], subscriber: String): Option[List[String]] =\n  if subscribers.contains(subscriber) then Some(subscribers.filterNot(_ == subscriber))\n  else None"}
{"id":"f85dca9b-426f-4ace-a3c9-b1869d92ab5c","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def addScoreUpdate(updates: List[Int], update: Int): Option[List[Int]] =\n  if update >= 0 then Some(updates :+ update)\n  else None"}
{"id":"810cb607-86dd-4317-88fc-999e24c4ba53","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait FetchError\ncase object ScoreUnavailable extends FetchError\n\ndef fetchLatestScore(matchId: String): Either[FetchError, Int] =\n  if matchId == \"game100\" then Right(42)\n  else Left(ScoreUnavailable)"}
{"id":"0043d139-228c-4054-84f2-06c8621c47bf","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class MatchScore(home: Int, away: Int)\nsealed trait ScoreUpdateError\ncase object NegativeScoreNotAllowed extends ScoreUpdateError\n\ndef updateMatchScore(current: MatchScore, homeDelta: Int, awayDelta: Int): Either[ScoreUpdateError, MatchScore] =\n  val newHome = current.home + homeDelta\n  val newAway = current.away + awayDelta\n  if newHome >= 0 && newAway >= 0 then Right(MatchScore(newHome, newAway))\n  else Left(NegativeScoreNotAllowed)"}
{"id":"941da18f-b23e-45fb-873c-ed2d3c42dcdb","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def parseStreamScore(payload: String): Option[(String, Int)] =\n  val fields = payload.split(\",\")\n  if fields.length == 2 && fields(1).forall(_.isDigit) then\n    Some((fields(0), fields(1).toInt))\n  else None"}
{"id":"056e3721-b48f-4983-be5e-66f3cafe572f","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def getActiveGame(scores: Map[String, Int], gameId: String): Either[String, Int] =\n  scores.get(gameId).toRight(\"Game not found in live feed\")"}
{"id":"17f99c64-23e2-4a62-9110-2e2ae8ffba53","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait SubscriptionResult\ncase class Subscribed(channel: String) extends SubscriptionResult\ncase object AlreadySubscribed extends SubscriptionResult\n\ndef subscribeChannel(current: Set[String], channel: String): Either[SubscriptionResult, Subscribed] =\n  if current.contains(channel) then Left(AlreadySubscribed)\n  else Right(Subscribed(channel))"}
{"id":"77b2f3f8-5cd5-412a-8cd6-186ac86d422b","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait EventParseError\ncase object EventMalformed extends EventParseError\n\ncase class LiveEvent(team: String, score: Int)\n\ndef parseLiveEvent(payload: String): Either[EventParseError, LiveEvent] =\n  val parts = payload.split(\"-\")\n  if parts.length == 2 && parts(1).forall(_.isDigit) then\n    Right(LiveEvent(parts(0), parts(1).toInt))\n  else Left(EventMalformed)"}
{"id":"b9210d1e-f344-4a0d-85d2-a33511bf8c6a","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class Notification(subscriber: String, event: String)\nsealed trait NotificationError\ncase object InvalidSubscriber extends NotificationError\n\ndef sendNotification(to: String, event: String): Either[NotificationError, Notification] =\n  if to.nonEmpty then Right(Notification(to, event))\n  else Left(InvalidSubscriber)"}
{"id":"2ad87d7c-7e55-4002-b425-5285d81502c4","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def toIntList(scores: List[String]): Either[String, List[Int]] =\n  val parsed = scores.map(s => s.toIntOption)\n  if parsed.forall(_.isDefined) then Right(parsed.flatten)\n  else Left(\"At least one score could not be parsed\")"}
{"id":"2d271ed3-9789-4c1f-9bcd-579185a96cb1","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def logScoreUpdate(update: String): Unit =\n  try {\n    if update.isEmpty then throw new IllegalArgumentException(\"Empty update string\")\n    println(\"Score update logged: \" + update)\n  } catch {\n    case e: IllegalArgumentException => println(\"Score update failed: \" + e.getMessage)\n  }"}
{"id":"e61c3de6-b522-49fb-b1de-17b82cd29874","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def incrementScoreUnsafe(score: Int): Int =\n  if score < 0 then\n    throw new IllegalArgumentException(\"Score cannot be negative\")\n  else\n    score + 1"}
{"id":"ced14a06-caad-4d43-9bc0-a931848d0797","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class ScoreStreamNotConnected(message: String) extends RuntimeException(message)\n\ndef fetchStreamScore(streamId: String): Int =\n  if streamId != \"score_live\" then throw new ScoreStreamNotConnected(\"Stream not connected\")\n  11"}
{"id":"008bb7de-8891-4347-9720-79f0ef37fac6","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getScoreOrThrow(scores: Map[String, Int], matchId: String): Int =\n  if scores.contains(matchId) then scores(matchId)\n  else throw new NoSuchElementException(\"No live score for: \" + matchId)"}
{"id":"30d9987a-c42b-4717-ac68-ff89dd4bbb7f","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def updateSubscriberCount(subscribers: Int): Int =\n  try {\n    if subscribers < 0 then throw new Exception(\"Subscriber count cannot be negative\")\n    subscribers + 1\n  } catch {\n    case e: Exception => 0\n  }"}
{"id":"84799003-0f5c-47b5-b5ba-35bc7f3a23cf","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class InvalidScoreFormatException(msg: String) extends Exception(msg)\n\ndef parseScoreStrict(scoreString: String): Int =\n  if scoreString.forall(_.isDigit) then scoreString.toInt\n  else throw new InvalidScoreFormatException(\"Invalid score string format\")"}
{"id":"21eacb40-cb51-44fa-b1cb-7d1882a258a9","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def removeLiveChannel(channels: List[String], channel: String): List[String] =\n  try {\n    if !channels.contains(channel) then throw new Exception(\"Channel not subscribed\")\n    channels.filterNot(_ == channel)\n  } catch {\n    case e: Exception => channels\n  }"}
{"id":"8e64187f-72f1-479d-b963-635ee6ac37ba","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def handleScoreMessage(msg: String): Int =\n  try {\n    msg.toInt\n  } catch {\n    case _: NumberFormatException => -1\n  }"}
{"id":"e1f578b7-160f-4e4f-a659-0541fe2fb551","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def ensureNotGamePaused(gameStatus: String): Unit =\n  if gameStatus == \"paused\" then\n    throw new RuntimeException(\"Cannot update score: Game currently paused\")\n  ()"}
{"id":"87cffe78-8e96-4931-ab45-7e9351db4d78","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class NotificationDeliveryFailure(msg: String) extends Exception(msg)\n\ndef deliverNotificationUnsafe(user: String, notification: String): String =\n  if user == \"\" then throw new NotificationDeliveryFailure(\"No user specified\")\n  s\"Notification sent to $user: $notification\""}
{"id":"d51b170b-3578-4ef7-bf25-e1b359b0e74c","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def divideScores(current: Int, divisor: Int): Int =\n  try {\n    current / divisor\n  } catch {\n    case _: ArithmeticException => 0\n  }"}
{"id":"beb73438-53a1-4b92-aa83-9ecd24523ace","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def parseAndUpdateScore(input: String): Int =\n  val parts = input.split(\":\")\n  if parts.length != 2 then throw new IllegalArgumentException(\"Malformed input\")\n  val score = parts(1).toInt\n  score + 2"}
{"id":"bc2af408-fbf3-415e-af23-c9716d09da04","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def connectToFeedThrows(token: String): String =\n  if token != \"live_token\" then throw new Exception(\"Feed connection failed: Unauthorized\")\n  \"Successfully connected\""}
{"id":"23572292-956b-4895-91d5-6084ba7b2f03","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def validateScoreValue(value: Int): Unit =\n  try {\n    if value < 0 then throw new Exception(\"Negative score value\")\n    ()\n  } catch {\n    case e: Exception => ()\n  }"}
{"id":"e03ef382-9c71-4203-b6cb-bec14f0c7ea1","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def ensureSubscriberActive(subscriber: String, activeList: Set[String]): Unit =\n  if !activeList.contains(subscriber) then\n    throw new IllegalStateException(\"Subscriber not active!\")"}
{"id":"d9335cf6-022e-4c27-be05-d074841333c2","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"object ScoreUpdater {\n  def updateLiveScore(matchId: Int, newScore: Int): Int = {\n    if (newScore < 0) throw new IllegalArgumentException(\"Score cannot be negative\")\n    // Pretend we're updating some database\n    newScore\n  }\n}"}
{"id":"33e0dc04-9fe3-40d4-b92e-5728b9ecab63","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class MatchNotFoundException(id: Int) extends Exception(s\"Match with id $id not found\")\n\nobject LiveScoreFetcher {\n  def fetchScore(matchId: Int): Int = {\n    if (matchId == 0) throw new MatchNotFoundException(matchId)\n    42 // placeholder example\n  }\n  def safeFetchScore(matchId: Int): Int = {\n    try fetchScore(matchId)\n    catch case e: Exception => -1\n  }\n}"}
{"id":"43727e79-71de-470a-a466-7b6695dd2fee","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"object ScoreParser {\n  def parseScore(scoreString: String): Int = {\n    try {\n      scoreString.toInt\n    } catch {\n      case _: NumberFormatException => throw new RuntimeException(\"Invalid score format\")\n    }\n  }\n}"}
{"id":"6eecab4e-46e2-46e7-b46d-8e97b41dd167","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait ScoreUpdateError\ncase object InvalidScoreFormat extends ScoreUpdateError\ncase object MatchDoesNotExist extends ScoreUpdateError\n\ndef validateAndUpdate(matchId: Int, scoreInput: String): Either[ScoreUpdateError, Int] = {\n  if matchId < 1 then Left(MatchDoesNotExist)\n  else scoreInput.toIntOption match\n    case Some(newScore) if newScore >= 0 => Right(newScore)\n    case _ => Left(InvalidScoreFormat)\n}"}
{"id":"738d2f3c-abad-489d-9089-972a92c0f886","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"import scala.util.Try\n\ndef getNextGoalScorer(input: String): Option[String] =\n  Option(input).filter(_.nonEmpty)\n\nval scorer = getNextGoalScorer(\"Lionel Messi\") match\n  case Some(name) => s\"Next goal by $name\"\n  case None => \"No scorer available\"\n"}
{"id":"5c11f05c-e201-4d78-ae1f-befa00b6ed07","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ncase class LiveScoreRequest(matchId: Int)\n\ndef fetchLiveScoreSafe(request: LiveScoreRequest): Try[Int] =\n  Try {\n    if request.matchId <= 0 then\n      throw new IllegalArgumentException(\"Invalid match ID\")\n    3 // Simulated score\n  }\n\nfetchLiveScoreSafe(LiveScoreRequest(5)).recover {\n  case _: IllegalArgumentException => 0\n}"}
{"id":"4d790baf-9ee7-4de7-8f27-e9aa179c43cd","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class CarNotFoundError(id: String)\nsealed trait FleetError\ncase class InvalidRentalPeriod(reason: String) extends FleetError\ncase class BookingConflict(carId: String) extends FleetError\ncase class Car(id: String, isAvailable: Boolean)\n\ndef findCarById(id: String, fleet: List[Car]): Either[CarNotFoundError, Car] =\n  fleet.find(_.id == id).toRight(CarNotFoundError(id))"}
{"id":"d06c7410-f6f7-4dd3-af6c-13d114c0e4f9","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class CarNotAvailableException(carId: String) extends Exception(s\"Car $carId is not available\")\n\ncase class Car(id: String, available: Boolean)\ndef rentCar(carId: String, fleet: List[Car]): Car = {\n  val carOpt = fleet.find(_.id == carId)\n  if (carOpt.isEmpty) throw new NoSuchElementException(s\"Car $carId not found\")\n  if (!carOpt.get.available) throw new CarNotAvailableException(carId)\n  carOpt.get\n}"}
{"id":"b97078d9-5a59-42d1-baea-d46afd512307","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait ReservationError\ncase object CarAlreadyReserved extends ReservationError\ncase object InvalidDateRange extends ReservationError\n\ncase class Reservation(carId: String, from: Int, to: Int)\ndef validateReservation(r: Reservation, reserved: List[Reservation]): Either[ReservationError, Reservation] =\n  if (r.to <= r.from) Left(InvalidDateRange)\n  else if (reserved.exists(res => res.carId == r.carId && (r.from <= res.to && r.to >= res.from))) Left(CarAlreadyReserved)\n  else Right(r)"}
{"id":"3bdf994a-18e1-4e82-88b6-6ccf8854167c","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def removeCarFromFleet(carId: String, fleet: collection.mutable.Buffer[String]): Unit = {\n  try {\n    if (!fleet.contains(carId)) throw new IllegalArgumentException(s\"No car with id $carId.\")\n    fleet -= carId\n  } catch {\n    case e: IllegalArgumentException => println(\"Failed to remove car: \" + e.getMessage)\n  }\n}"}
{"id":"1f66a93e-bc10-4a61-92f5-f349592eff4d","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ncase class Customer(id: String)\ncase class License(number: String)\nsealed trait LicenseError\ncase object LicenseNotValid extends LicenseError\n\ndef validateLicense(l: Option[License]): Either[LicenseError, License] =\n  l.filter(_.number.nonEmpty).toRight(LicenseNotValid)"}
{"id":"acdb87b8-bab9-4fcd-b0ae-bff44b4307d6","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class InvalidBookingPeriodException(msg: String) extends Exception(msg)\n\ncase class Booking(carId: String, from: Int, to: Int)\ndef submitBooking(booking: Booking): Booking = {\n  if (booking.from >= booking.to)\n    throw new InvalidBookingPeriodException(\"Start date after end date\")\n  booking\n}"}
{"id":"3fc9b438-ac18-4b5c-ab0f-9575c0d66a12","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class BookingRequest(customerId: String, carId: String)\nsealed trait BookingError\ncase object CustomerBlocked extends BookingError\ncase object CarUnderMaintenance extends BookingError\n\ndef tryBooking(request: BookingRequest, blockedCustomers: Set[String], underMaintenance: Set[String]): Either[BookingError, String] =\n  if (blockedCustomers.contains(request.customerId)) Left(CustomerBlocked)\n  else if (underMaintenance.contains(request.carId)) Left(CarUnderMaintenance)\n  else Right(\"Booked\")"}
{"id":"6f5daa09-dd4a-4c8c-b60c-ac77a8156ab8","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def calculateInvoice(amount: Double, discount: Option[Double]): Double = {\n  try {\n    val finalDiscount = discount.getOrElse(0.0)\n    if (finalDiscount < 0 || finalDiscount > 1) throw new IllegalArgumentException(\"Discount out of range\")\n    amount * (1 - finalDiscount)\n  } catch {\n    case e: Exception => 0.0\n  }\n}"}
{"id":"450e3164-20ef-4dd2-892a-47df9e9d8ee1","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ncase class Car(id: String)\ndef parseCarId(str: String): Try[Car] = Try {\n  if (str.startsWith(\"CAR-\") && str.length > 4) Car(str)\n  else throw new Exception(\"Invalid Car Id\")\n}"}
{"id":"0b16022a-6667-4355-a93e-f827e239d62c","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class InvalidCarStatusException(status: String) extends Exception(\"Invalid status: \" + status)\n\ndef updateCarStatus(carId: String, status: String): Unit = {\n  status match {\n    case \"available\" | \"rented\" | \"maintenance\" => ()\n    case _ => throw new InvalidCarStatusException(status)\n  }\n}"}
{"id":"11b851cb-d8c6-4f12-b189-0575474f223f","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait FleetUpdateError\ncase class CarDoesNotExist(id: String) extends FleetUpdateError\ncase object FleetCapacityExceeded extends FleetUpdateError\n\ncase class Fleet(max: Int, cars: List[String])\ndef addCarToFleet(id: String, fleet: Fleet): Either[FleetUpdateError, Fleet] =\n  if (fleet.cars.contains(id)) Left(CarDoesNotExist(id))\n  else if (fleet.cars.size >= fleet.max) Left(FleetCapacityExceeded)\n  else Right(fleet.copy(cars = id :: fleet.cars))"}
{"id":"ff13b1bb-fe63-4d3d-8029-9babdd4077c3","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getRentalPrice(days: Int): Double = {\n  try {\n    if (days <= 0) throw new IllegalArgumentException(\"Days must be positive\")\n    30.0 * days\n  } catch {\n    case _: IllegalArgumentException => -1.0\n  }\n}"}
{"id":"8b338e0f-63ae-4c99-aee0-dd4986d04bbb","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\ncase object CardDeclined extends PaymentError\ncase object InvalidPaymentDetails extends PaymentError\n\ndef attemptPayment(cardNumber: String, amount: Double): Either[PaymentError, String] =\n  if (amount > 1000) Left(InsufficientFunds)\n  else if (cardNumber.length != 16) Left(InvalidPaymentDetails)\n  else Right(\"Payment Successful\")"}
{"id":"a1e42965-1c89-4bd7-a01d-450fa5ecb58e","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def extendRentalPeriod(current: Int, extension: Int): Int = {\n  try {\n    if (extension <= 0) throw new IllegalArgumentException(\"Extension must be positive\")\n    current + extension\n  } catch {\n    case _: IllegalArgumentException => current\n  }\n}"}
{"id":"82db52ca-cf54-48cf-944c-024107f08690","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ncase class MaintenanceRequest(carId: String, details: String)\ndef validateMaintenanceRequest(request: MaintenanceRequest): Try[MaintenanceRequest] = Try {\n  require(request.details.nonEmpty, \"Details required\")\n  request\n}"}
{"id":"d47e6e74-6bf3-4ecd-944c-b071270ada21","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def cancelBooking(bookingId: String, activeBookings: List[String]): String = {\n  try {\n    if (!activeBookings.contains(bookingId))\n      throw new NoSuchElementException(\"Booking does not exist\")\n    \"Cancelled\"\n  } catch {\n    case e: NoSuchElementException => e.getMessage\n  }\n}"}
{"id":"da76e4be-519a-4040-9dd3-4aac0d7c7001","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class ReturnCarError(reason: String)\ndef canReturnCar(isActiveRental: Boolean): Either[ReturnCarError, String] =\n  if (isActiveRental) Right(\"Return processed\")\n  else Left(ReturnCarError(\"No active rental for this car\"))"}
{"id":"bf0fb689-4b07-4843-bef5-bba14d1d632d","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def chargeExtra(distanceDriven: Double): Double = {\n  try {\n    if (distanceDriven < 0) throw new RuntimeException(\"Negative distance driven\")\n    if (distanceDriven > 1000)\n      throw new IllegalArgumentException(\"Excessive trip detected\")\n    0.05 * distanceDriven\n  } catch {\n    case _: IllegalArgumentException => 100.0\n    case _: Throwable => 0.0\n  }\n}"}
{"id":"25a96d76-02c1-4bff-9b7a-06b5b1d645d5","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ncase class Payment(amount: Double)\ndef safeCharge(payment: Payment): Try[Double] = Try {\n  require(payment.amount > 0, \"Amount must be positive\")\n  payment.amount * 1.1\n}"}
{"id":"bd7ec408-6976-4773-a983-ac9eced6a588","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def lookupCustomer(id: String, customers: List[String]): String = {\n  try {\n    customers.find(_ == id).getOrElse(throw new NoSuchElementException(id))\n  } catch {\n    case e: NoSuchElementException => s\"Customer not found: $id\"\n  }\n}"}
{"id":"2bd6622a-6c35-4db6-92db-b6c2b913c1ff","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Car(id: String, available: Boolean)\ndef findAvailableCar(cars: List[Car]): Option[Car] =\n  cars.find(_.available)"}
{"id":"600f22c7-3312-42ef-a892-fc5e89536112","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait FleetError\ncase object CarNotFound extends FleetError\ndef getCarById(cars: List[Car], carId: String): Either[FleetError, Car] =\n  cars.find(_.id == carId).toRight(CarNotFound)"}
{"id":"6f0fc9a5-65b6-4fad-bf49-8e2ecfaa01d4","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ndef parseCarYear(yearString: String): Try[Int] =\n  Try(yearString.toInt)"}
{"id":"5e47475c-0905-4025-b199-d4d614101526","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait RentalError\ncase object CarNotAvailable extends RentalError\ncase object CustomerBanned extends RentalError\ncase class RentalResult(customer: String, car: Car)\ndef rentCar(car: Car, customerActive: Boolean): Either[RentalError, RentalResult] =\n  if (!car.available) Left(CarNotAvailable)\n  else if (!customerActive) Left(CustomerBanned)\n  else Right(RentalResult(\"customerId\", car.copy(available = false)))"}
{"id":"c7064001-9a50-42c7-9b46-fa064112378c","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def returnCar(carOpt: Option[Car]): Either[String, Car] =\n  carOpt.toRight(\"Car not found to return\")\ndef markCarReturned(car: Car): Car =\n  car.copy(available = true)"}
{"id":"758732f8-5367-4d0e-a438-659e9c84fcb9","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Reservation(id: String, valid: Boolean)\ndef cancelReservation(reservation: Reservation): Option[Reservation] =\n  if reservation.valid then Some(reservation.copy(valid = false))\n  else None"}
{"id":"5426e567-33c8-4bf3-ba0d-ef7c79e556a2","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ndef calculateTotalRentalCost(days: Int, ratePerDay: Double): Try[Double] =\n  Try {\n    require(days > 0)\n    require(ratePerDay >= 0.0)\n    days * ratePerDay\n  }"}
{"id":"48921f24-70dd-4fd8-a9de-73d699c93d17","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait ReservationError\ncase object ReservationNotFound extends ReservationError\ndef getReservationById(reservations: List[Reservation], id: String): Either[ReservationError, Reservation] =\n  reservations.find(_.id == id).toRight(ReservationNotFound)"}
{"id":"923a0205-50ca-4577-b497-be86e17e492a","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def parseLicenseNumber(license: String): Option[String] =\n  if license.matches(\"[A-Z]{2}-\\d{6}\") then Some(license)\n  else None"}
{"id":"37fdbfac-db10-41e4-bfcc-b2877f13be73","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait AddCarError\ncase object DuplicateCar extends AddCarError\ndef addCarToFleet(fleet: List[Car], car: Car): Either[AddCarError, List[Car]] =\n  if fleet.exists(_.id == car.id) then Left(DuplicateCar)\n  else Right(car :: fleet)"}
{"id":"5f8d6954-ea1f-4799-a322-1c881c21e8aa","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class CarNotFound(message: String) extends Exception(message)\ndef fetchCar(carId: String, cars: List[Car]): Car =\n  cars.find(_.id == carId).getOrElse(throw new CarNotFound(\"Car not found\"))"}
{"id":"cbbfa6a0-d3d0-41ea-9d54-2ad4a2dc90ec","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def reserveCar(car: Car): Car =\n  if car.available then car.copy(available = false)\n  else throw new Exception(\"Car is not available for reservation\")"}
{"id":"60a18735-78f8-4506-bba6-2816c9291553","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def removeCarFromFleet(fleet: List[Car], targetId: String): List[Car] =\n  if fleet.exists(_.id == targetId) then fleet.filterNot(_.id == targetId)\n  else throw new Exception(\"Car to remove does not exist in fleet\")"}
{"id":"2b614324-4fb3-4f68-b17e-12ab25d109a8","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def parseRentalDays(input: String): Int =\n  try input.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid rental days input\")"}
{"id":"e3a4be18-e6c5-4aab-96c7-43173a3f9581","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def assignCarToCustomer(car: Car, customerId: String): Car =\n  if car.available then car.copy(available = false)\n  else throw new IllegalStateException(\"Car is currently unavailable\")"}
{"id":"834de5fc-2f80-4be9-908a-cf39ac7e9dfe","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getAvailableCars(cars: List[Car]): List[Car] =\n  try cars.filter(_.available)\n  catch case e: Exception => throw new RuntimeException(\"Failed to filter cars\", e)"}
{"id":"a10badf9-3b24-4964-bde2-b3b1e3412fc0","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def bookReservation(reservation: Reservation): Reservation =\n  if reservation.valid then reservation.copy(valid = false)\n  else throw new Exception(\"Reservation is already invalid\")"}
{"id":"79f4efa5-a97b-47ef-92ba-6be6ea0fda39","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def processReturn(car: Car, odometer: Int): Car =\n  if odometer >= 0 then car.copy(available = true)\n  else throw new IllegalArgumentException(\"Negative odometer reading\")"}
{"id":"da031315-d090-47b8-8854-0e29884b650c","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def checkAndGetCar(cars: List[Car], id: String): Car =\n  try cars.find(_.id == id).get\n  catch case _: NoSuchElementException => throw new Exception(\"No car found with specified ID\")"}
{"id":"9e6def06-4e5a-4d1c-9a26-cc54549ae9ea","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def updateRentalPeriod(days: Int): Int =\n  if days <= 0 then throw new Exception(\"Rental period must be positive\")\n  else days"}
