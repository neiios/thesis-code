{"id":"901729ef-0a51-478d-b2fe-5f4c17607f38","timestamp":1746099233449,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class OrderId(value: String)\ncase class PaymentToken(value: String)\nsealed trait CheckoutError\ncase object InvalidOrder extends CheckoutError\ncase object PaymentFailed extends CheckoutError\n\ndef authorizeOrder(orderId: OrderId): Either[CheckoutError, OrderId] =\n  if (orderId.value.nonEmpty) Right(orderId) else Left(InvalidOrder)\n\ndef processPayment(token: PaymentToken): Either[CheckoutError, String] =\n  if (token.value == \"ok\") Right(\"Payment processed\") else Left(PaymentFailed)\n\nval result = for {\n  authorized <- authorizeOrder(OrderId(\"123\"))\n  status     <- processPayment(PaymentToken(\"ok\"))\n} yield status"}
{"id":"74008bba-5bc4-4c87-ab57-41b2b161603c","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class PaymentException(msg: String) extends Exception(msg)\n\nobject CheckoutHandler {\n  def process(items: List[String], paymentToken: String): String = {\n    if (items.isEmpty)\n      throw new PaymentException(\"No items to checkout\")\n    if (paymentToken != \"valid-token\")\n      throw new PaymentException(\"Invalid payment token\")\n    \"Checkout successful\"\n  }\n\n  def safeProcess(items: List[String], paymentToken: String): String = {\n    try {\n      process(items, paymentToken)\n    } catch {\n      case e: Exception => \"Checkout error: \" + e.getMessage\n    }\n  }\n}"}
{"id":"f3349241-f806-49f2-8bec-bef07e89e898","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait PromoCodeError\ncase object InvalidPromo extends PromoCodeError\ncase object ExpiredPromo extends PromoCodeError\n\ndef applyPromoCode(code: String): Either[PromoCodeError, Double] =\n  if (code == \"SUMMER21\") Right(10.0)\n  else if (code == \"OLD\") Left(ExpiredPromo)\n  else Left(InvalidPromo)\n\nval discount = applyPromoCode(\"SUMMER21\").fold(_ => 0.0, d => d)"}
{"id":"a107bd79-524a-4289-8478-5d62a5f4d6dd","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class StockUnavailableException extends Exception(\"Stock unavailable\")\n\ndef reserveProduct(productId: String, quantity: Int): Boolean = {\n  if (quantity <= 0) throw new StockUnavailableException\n  true\n}\n\nobject StockChecker {\n  def tryReserve(productId: String, quantity: Int): String = {\n    try {\n      val ok = reserveProduct(productId, quantity)\n      \"Reserved\"\n    } catch {\n      case _: StockUnavailableException => \"Could not reserve stock\"\n    }\n  }\n}"}
{"id":"bcf4a769-7a99-4c9e-8b58-69b243d8848e","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseShippingAddress(raw: String): Option[String] =\n  if (raw.contains(\",\")) Some(raw) else None\n\ndef calculateShippingCost(address: String): Try[Double] = Try {\n  if (address.contains(\"Express\")) 15.99 else 4.99\n}\n\nval cost = parseShippingAddress(\"1 Main St, Express City\")\n  .flatMap(addr => calculateShippingCost(addr).toOption)"}
{"id":"3b46334d-9925-44a8-98aa-b8e8684f0dd4","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getCartTotal(amounts: List[Double]): Double = {\n  if (amounts.exists(_ < 0)) {\n    throw new IllegalArgumentException(\"Negative amount in cart\")\n  }\n  amounts.sum\n}\n\nval total = try {\n  getCartTotal(List(5.0, -1.2, 3.5))\n} catch {\n  case e: IllegalArgumentException => 0.0\n}"}
{"id":"bd529fd2-33f9-4a88-8832-6c4796d70d8b","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait CheckoutValidationError\ncase object EmptyCart extends CheckoutValidationError\ncase object InvalidCoupon extends CheckoutValidationError\n\ndef validateCart(items: List[String], coupon: String): Either[CheckoutValidationError, List[String]] =\n  if (items.isEmpty) Left(EmptyCart)\n  else if (coupon != \"SAVE10\" && coupon.nonEmpty) Left(InvalidCoupon)\n  else Right(items)\n\nval checkedCart = validateCart(List(\"T-shirt\"), \"\")"}
{"id":"57c8c77f-f816-4f16-b389-3e6fd174a5aa","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"object PaymentApplier {\n  def applyPayment(amount: Double, paymentMethod: String): String = {\n    try {\n      if (amount <= 0) {\n        throw new RuntimeException(\"Invalid amount\")\n      }\n      if (paymentMethod != \"CreditCard\") {\n        throw new RuntimeException(\"Unsupported payment method\")\n      }\n      \"Payment accepted\"\n    } catch {\n      case e: RuntimeException => s\"Error: ${e.getMessage}\"\n    }\n  }\n}\nPaymentApplier.applyPayment(0.0, \"Paypal\")"}
{"id":"52383db6-7358-40b2-b8e0-c5834270d3c2","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait InventoryError\ncase object ProductOutOfStock extends InventoryError\n\ncase class Product(sku: String, available: Int)\n\ndef checkInventory(product: Product, requested: Int): Either[InventoryError, Product] =\n  if (product.available >= requested) Right(product)\n  else Left(ProductOutOfStock)\n\nval available = checkInventory(Product(\"TSH123\", 8), 10)"}
{"id":"4ed23e95-8928-4e08-8d3c-d4f1c2e55fe6","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class ShippingAddressException extends Exception(\"Invalid shipping address\")\n\ndef validateShippingAddress(address: String): Boolean = {\n  if (address.length < 10) throw new ShippingAddressException\n  true\n}\n\nval result = try {\n  validateShippingAddress(\"London\")\n} catch {\n  case _: ShippingAddressException => false\n}"}
{"id":"b30a914f-90fc-45f8-99e4-ae98873f7014","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait PaymentValidationError\ncase object CardDeclined extends PaymentValidationError\ncase object InvalidCardNumber extends PaymentValidationError\n\ndef validateCard(cardNum: String): Either[PaymentValidationError, String] =\n  if (cardNum.length != 16) Left(InvalidCardNumber)\n  else if (cardNum.forall(_.isDigit)) Right(cardNum)\n  else Left(CardDeclined)\n\nval cardStatus = validateCard(\"1234567812345678\")"}
{"id":"c272db50-6067-4b57-b57c-c5a08d913448","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class CouponException(msg: String) extends Exception(msg)\n\ndef redeemCoupon(code: String): Double = {\n  if (code == \"DEAL20\") 20.0\n  else throw new CouponException(\"Coupon invalid\")\n}\n\nval discount = try {\n  redeemCoupon(\"WRONG\")\n} catch {\n  case e: CouponException => 0.0\n}"}
{"id":"d602dfb2-0d66-49bb-8832-a74fb62f3364","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryParseOrderId(raw: String): Option[String] =\n  Option.when(raw.matches(\"ORD[0-9]+\"))(raw)\n\ndef fetchOrderDetails(orderId: String): Try[String] = Try {\n  if (orderId.startsWith(\"ORD\")) s\"Order: $orderId\"\n  else throw new Exception(\"Order not found\")\n}\n\nval details = tryParseOrderId(\"ORD1337\").flatMap(id => fetchOrderDetails(id).toOption)"}
{"id":"5a457835-fdf3-4a0e-8283-f878d409b893","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"object OrderConfirmer {\n  def confirmOrderStatus(id: String): String = {\n    try {\n      if (id.isEmpty) throw new Exception(\"No order ID\")\n      \"Order confirmed\"\n    } catch {\n      case e: Exception => \"Confirmation failed\"\n    }\n  }\n}"}
{"id":"fbb161bd-81aa-43a4-ab06-5bb805182c3c","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait UpdateCartError\ncase object ProductUnavailable extends UpdateCartError\n\ncase class Cart(items: List[String])\n\ndef addProductToCart(cart: Cart, prod: String, available: Boolean): Either[UpdateCartError, Cart] =\n  if (available) Right(cart.copy(items = prod :: cart.items))\n  else Left(ProductUnavailable)\n\nval updatedCart = addProductToCart(Cart(List(\"Pants\")), \"Socks\", false)"}
{"id":"13b56c6a-0968-4396-aa1d-87192c639d66","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def applyDelayedCharge(amount: Double): Double = {\n  if (amount < 0) throw new ArithmeticException(\"Negative charge amount\")\n  amount + 2.0\n}\n\nval charged = try {\n  applyDelayedCharge(-30)\n} catch {\n  case _: ArithmeticException => 0.0\n}"}
{"id":"0baf4951-b5ce-42bb-8bfd-c7dc5ab8161c","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait EmailNotificationError\ncase object EmailAddressInvalid extends EmailNotificationError\n\ncase class Customer(email: String)\n\ndef sendOrderConfirmation(customer: Customer): Either[EmailNotificationError, String] =\n  if (customer.email.contains(\"@\")) Right(\"Sent\")\n  else Left(EmailAddressInvalid)\n\nval notice = sendOrderConfirmation(Customer(\"user@host.com\"))"}
{"id":"b8211ebc-da4d-4782-a3ae-96c6120b53a1","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class OrderNotFoundException(msg: String) extends Exception(msg)\n\ndef getOrderStatus(orderNo: Int): String = {\n  if (orderNo < 1000) throw new OrderNotFoundException(\"Order missing\")\n  \"Status: Dispatched\"\n}\n\nval status = try {\n  getOrderStatus(12)\n} catch {\n  case e: OrderNotFoundException => \"Order not found\"\n}"}
{"id":"ab93d130-ba8e-4b70-a5c8-4f8ad4f929d5","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePaymentAmount(raw: String): Try[Double] = Try {\n  raw.toDouble\n}\n\nval paymentTry = parsePaymentAmount(\"12.34\").recover {\n  case _ => 0.0\n}"}
{"id":"fd93e1a3-e6bd-4f56-8e31-17fc7ef10aa3","timestamp":1746099233450,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def applyExpressFee(selected: Boolean): Double = {\n  if (!selected) throw new Exception(\"Express shipping not chosen\")\n  8.95\n}\n\nval fee = try {\n  applyExpressFee(false)\n} catch {\n  case _: Exception => 0.0\n}"}
{"id":"4627a2d5-b26d-422c-9f12-304c7e77a076","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"case class CartItem(productId: String, quantity: Int)\nclass PaymentDeclinedException(msg: String) extends Exception(msg)\nobject CartCheckout {\n  def authorizePayment(cardNumber: String, amount: Double): Boolean = {\n    if cardNumber.nonEmpty && amount > 0 then true\n    else throw new PaymentDeclinedException(\"Payment was declined.\")\n  }\n  def checkout(items: List[CartItem], cardNumber: String): String = {\n    try {\n      val total = items.map(_.quantity * 10).sum\n      if (authorizePayment(cardNumber, total)) \"Checkout completed.\"\n      else throw new Exception(\"Unexpected failure.\")\n    } catch {\n      case e: PaymentDeclinedException => \"Checkout failed: \" + e.getMessage\n      case e: Exception => \"Unknown error: \" + e.getMessage\n    }\n  }\n}"}
{"id":"bb5cc302-9f11-4301-a68d-c2f6dd4ea9d7","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait CheckoutError\ncase object EmptyCartError extends CheckoutError\ncase object InvalidShippingInfo extends CheckoutError\ncase class PaymentError(message: String) extends CheckoutError\ncase class CheckoutSummary(orderId: String, total: Double)\ndef processCheckout(cartItems: List[String], shippingAddress: String, paymentToken: String): Either[CheckoutError, CheckoutSummary] = {\n  if cartItems.isEmpty then Left(EmptyCartError)\n  else if shippingAddress.isBlank then Left(InvalidShippingInfo)\n  else if paymentToken.length < 12 then Left(PaymentError(\"Payment token invalid.\"))\n  else Right(CheckoutSummary(\"ORD-98214\", cartItems.length * 55.0))\n}"}
{"id":"f27e9dd8-0288-4950-8822-c5efc0afb6eb","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class AddressValidationException(msg: String) extends Exception(msg)\ndef validateAddress(address: String): Boolean = {\n  if address.length < 10 then throw new AddressValidationException(\"Address too short.\")\n  address.matches(\".*\\d+.*\")\n}\ndef startShipping(address: String): String = {\n  try {\n    if validateAddress(address) then \"Shipping started.\"\n    else throw new Exception(\"Address validation failed.\")\n  } catch {\n    case e: AddressValidationException => \"Shipping failed: \" + e.getMessage\n  }\n}"}
{"id":"bdbe8573-66e0-49c1-ad85-ecd56cb62362","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait PaymentResult\ncase object PaymentApproved extends PaymentResult\ncase class PaymentRejected(reason: String) extends PaymentResult\ndef processPayment(amount: Double, creditCard: String): Either[PaymentRejected, PaymentApproved.type] = {\n  if amount <= 0 then Left(PaymentRejected(\"Amount must be positive.\"))\n  else if !creditCard.forall(_.isDigit) then Left(PaymentRejected(\"Invalid card number.\"))\n  else Right(PaymentApproved)\n}"}
{"id":"36bc9bee-889b-4c54-8d7f-2fd48ff4e4e9","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class InventoryException(msg: String) extends Exception(msg)\ndef reserveInventory(productId: String, quantity: Int): Boolean = {\n  if quantity <= 0 then throw new InventoryException(\"Quantity must be positive.\")\n  if productId == \"out-of-stock\" then throw new InventoryException(\"Item out of stock.\")\n  true\n}\ndef handleInventory(productId: String, quantity: Int): String = {\n  try {\n    reserveInventory(productId, quantity)\n    \"Inventory reserved.\"\n  } catch {\n    case e: InventoryException => s\"Failure: ${e.getMessage}\"\n  }\n}"}
{"id":"6b90c1e3-7e38-4f79-8ad9-c87e9f15eae7","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait PromotionError\ntype Discount = Double\ncase object PromotionNotFound extends PromotionError\ncase class PromotionApplied(discount: Discount)\ndef applyPromoCode(promo: String, total: Double): Either[PromotionError, PromotionApplied] = {\n  if promo == \"\" then Left(PromotionNotFound)\n  else if total < 100 then Left(PromotionNotFound)\n  else Right(PromotionApplied(20.0))\n}"}
{"id":"35a8b1db-b772-4601-addb-aaf5eacc2c0c","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class CouponInvalidException(msg: String) extends Exception(msg)\ndef applyCouponCode(code: String, cartTotal: Double): Double = {\n  if code.isEmpty then throw new CouponInvalidException(\"Coupon code cannot be empty.\")\n  if cartTotal < 50 then throw new CouponInvalidException(\"Minimum cart total not met.\")\n  cartTotal - 5.0\n}\ndef checkoutWithCoupon(code: String, total: Double): String = {\n  try {\n    val newTotal = applyCouponCode(code, total)\n    s\"Discount applied. Total: $$newTotal\"\n  } catch {\n    case e: CouponInvalidException => \"Error: \" + e.getMessage\n  }\n}"}
{"id":"41a97a08-51a7-45d3-abaa-799e67245db8","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait ShippingError\ncase object AddressNotFound extends ShippingError\ncase object ShippingProviderUnavailable extends ShippingError\ncase class ShippingLabel(trackingId: String)\ndef requestShippingLabel(address: String, provider: String): Either[ShippingError, ShippingLabel] = {\n  if address.isEmpty then Left(AddressNotFound)\n  else if provider != \"FastShip\" then Left(ShippingProviderUnavailable)\n  else Right(ShippingLabel(\"1Z99XYZ123\"))\n}"}
{"id":"66d41aff-c2f7-4cac-9b98-24b6b1622c8e","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class InsufficientBalanceException(msg: String) extends Exception(msg)\ndef debitWallet(customerId: String, amount: Double): Unit = {\n  if amount > 1000 then throw new InsufficientBalanceException(\"Insufficient funds.\")\n}\ndef walletPayment(customerId: String, amount: Double): String = {\n  try {\n    debitWallet(customerId, amount)\n    \"Wallet charged.\"\n  } catch {\n    case e: InsufficientBalanceException => s\"Error: ${e.getMessage}\"\n  }\n}"}
{"id":"0e0c962b-40c6-489c-8214-242aef3ed0c6","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait OrderValidationError\ncase object MissingBillingInfo extends OrderValidationError\ncase object CartEmptyError extends OrderValidationError\ncase class Order(id: String)\ndef validateOrder(cart: List[Int], billingInfo: Option[String]): Either[OrderValidationError, Order] = {\n  if cart.isEmpty then Left(CartEmptyError)\n  else if billingInfo.isEmpty then Left(MissingBillingInfo)\n  else Right(Order(\"ORDER345\"))\n}"}
{"id":"f19d5d76-16c3-40f7-b97a-f6e17412ba77","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class PaymentGatewayTimeoutException(msg: String) extends Exception(msg)\ndef performPayment(amount: Double): String = {\n  if amount > 5000 then throw new PaymentGatewayTimeoutException(\"Timeout contacting Gateway\")\n  \"Payment Successful\"\n}\ndef safePay(amount: Double): String = {\n  try {\n    performPayment(amount)\n  } catch {\n    case e: PaymentGatewayTimeoutException => \"Gateway timed out: \" + e.getMessage\n  }\n}"}
{"id":"1b2b8418-83eb-4d90-a7e5-beb694653ef0","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef submitOrder(payment: Double): Try[String] = {\n  Try {\n    if payment < 20 then sys.error(\"Minimum order amount is 20.\")\n    else \"Order placed successfully.\"\n  }\n}"}
{"id":"d1ac762f-ce61-4aee-983c-f3b1417d10a7","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class InvalidOrderIdException(msg: String) extends Exception(msg)\ndef fetchOrderDetails(orderId: String): String = {\n  if !orderId.startsWith(\"ORD-\") then throw new InvalidOrderIdException(\"Invalid order ID.\")\n  s\"Order details for $orderId\"\n}\ndef orderSummary(orderId: String): String = {\n  try fetchOrderDetails(orderId)\n  catch case e: InvalidOrderIdException => \"Could not fetch: \" + e.getMessage\n}"}
{"id":"35e0976b-0592-4c2b-9775-06119b30effc","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait CartUpdateError\ncase object ItemNotFoundInCatalog extends CartUpdateError\ncase class Cart(items: List[String])\ndef addToCart(cart: Cart, itemId: String): Either[CartUpdateError, Cart] = {\n  if itemId.startsWith(\"SKU-\") then Right(Cart(cart.items :+ itemId))\n  else Left(ItemNotFoundInCatalog)\n}"}
{"id":"995abf6c-402d-4ee2-9a69-f2f12739694c","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class CheckoutLimitExceededException(msg: String) extends Exception(msg)\ndef setCartLimit(limit: Int): Unit = {\n  if limit > 100 then throw new CheckoutLimitExceededException(\"Cart item limit exceeded.\")\n}\ndef safeCartLimit(limit: Int): Unit = {\n  try setCartLimit(limit)\n  catch case e: CheckoutLimitExceededException => println(\"Limit error: \" + e.getMessage)\n}"}
{"id":"611640dd-017c-4332-a709-80db802133c8","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait StockError\ncase object ItemSoldOut extends StockError\ndef checkStockLevel(productSku: String, requestQty: Int): Option[Int] = {\n  if productSku.endsWith(\"1\") && requestQty > 2 then None\n  else Some(requestQty)\n}"}
{"id":"6fc71e90-6b52-4d12-854a-23d6a6d0ecd0","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class MissingCustomerDetailsException(msg: String) extends Exception(msg)\ndef getCustomerEmail(customerId: String): String = {\n  if customerId.isEmpty then throw new MissingCustomerDetailsException(\"No customer ID provided.\")\n  \"customer@mail.com\"\n}\ndef sendInvoiceEmail(customerId: String): Boolean = {\n  try\n    getCustomerEmail(customerId)\n    true\n  catch\n    case e: MissingCustomerDetailsException => false\n}"}
{"id":"047be800-5e86-4cd6-805b-d6df87b02cc9","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"import scala.util.Try\ncase class LoyaltyPoints(total: Int)\ndef awardLoyaltyPoints(orderId: String, value: Double): Try[LoyaltyPoints] = {\n  Try {\n    if !orderId.startsWith(\"ORD-\") then sys.error(\"Invalid order for points.\")\n    else LoyaltyPoints((value / 10).toInt)\n  }\n}"}
{"id":"711cc621-a544-42d0-890f-8dc3eed68c7d","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"class NegativeBasketSizeException(msg: String) extends Exception(msg)\ndef createBasket(items: Int): Unit = {\n  if items < 0 then throw new NegativeBasketSizeException(\"Basket size cannot be negative.\")\n}\ndef newBasket(items: Int): String = {\n  try {\n    createBasket(items)\n    \"Basket created.\"\n  } catch {\n    case e: NegativeBasketSizeException => \"Failure: \" + e.getMessage\n  }\n}"}
{"id":"77009cda-a6d5-4d94-8db3-18e6c2fe7597","timestamp":1746099263862,"category":"throws","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"sealed trait RefundError\ncase object InvalidRefundAmount extends RefundError\ncase object OrderNotRefundable extends RefundError\ncase class RefundReceipt(refundId: String)\ndef attemptRefund(orderId: String, amount: Double, refundable: Boolean): Either[RefundError, RefundReceipt] = {\n  if amount <= 0 then Left(InvalidRefundAmount)\n  else if !refundable then Left(OrderNotRefundable)\n  else Right(RefundReceipt(\"REFUND123\"))\n}"}
{"id":"665150e7-587c-4a67-8b03-5725489b66db","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"case class InsufficientFundsException(message: String) extends Exception(message)\ndef withdrawFromAccount(accountId: String, amount: BigDecimal): BigDecimal = {\n  val balance = 50.0\n  if (amount > balance) throw new InsufficientFundsException(\"Not enough money in account.\")\n  balance - amount\n}"}
{"id":"4fe1a74c-a883-4bc5-98cf-5967ac84d8e5","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def transferBetweenAccounts(from: String, to: String, amount: BigDecimal): Unit = {\n  if (amount <= 0) throw new IllegalArgumentException(\"Transfer amount must be positive.\")\n  val fromBalance = 100.0\n  if (fromBalance < amount) throw new RuntimeException(\"Insufficient balance.\")\n  // simulated transfer logic\n}"}
{"id":"adbbf8ff-11d7-46d2-a60c-f6bd33e728ec","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def authenticateUser(token: String): String = {\n  if (token != \"valid-token\") throw new SecurityException(\"Invalid authentication token.\")\n  \"User123\"\n}\n"}
{"id":"ef64815e-52e2-457c-aede-feea53b66b4f","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def parsePaymentReference(ref: String): Int = {\n  try ref.toInt\n  catch {\n    case ex: NumberFormatException => throw new RuntimeException(\"Invalid payment reference ID.\")\n  }\n}"}
{"id":"89b6813a-c8bd-4aef-8a74-e701c20daca0","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def getAccountStatement(userId: String): String = {\n  try {\n    if (userId.isEmpty) throw new NullPointerException(\"User ID required.\")\n    \"Statement: ...\"\n  } catch {\n    case e: Exception => \"Could not fetch statement. Reason: \" + e.getMessage\n  }\n}"}
{"id":"a81bdfde-77b3-4b1b-8563-161865d6ce40","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def performMobileDeposit(accountNumber: String, amount: BigDecimal): String = {\n  try {\n    if (amount <= 0) throw new IllegalArgumentException(\"Deposit must be positive.\")\n    s\"Deposit of $$amount to $$accountNumber successful.\"\n  } catch {\n    case e: Exception => s\"Deposit failed: $${e.getMessage}\"\n  }\n}"}
{"id":"f94e7050-e9ae-4d0f-b8f9-9ae614071d80","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class TransactionException(message: String) extends Exception(message)\ndef updateTransactionStatus(transactionId: String, success: Boolean): Unit = {\n  if (!success) throw new TransactionException(\"Transaction failed to complete.\")\n}\n"}
{"id":"6648fd0c-c7f8-4dce-908a-37ac046d5fea","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def resetPassword(userEmail: String): Boolean = {\n  if (!userEmail.contains(\"@\")) throw new IllegalArgumentException(\"Invalid email address.\")\n  true\n}\n"}
{"id":"91de032d-6269-480a-b758-d0134f96f0b9","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def fetchTransactionById(transactionId: String): String = {\n  try {\n    if (transactionId == \"not_found\") throw new Exception(\"Transaction not found.\")\n    \"Transaction details found.\"\n  } catch {\n    case e: Exception => \"Could not retrieve: \" + e.getMessage\n  }\n}"}
{"id":"b3da6f40-1c09-4598-9f49-412426508e74","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class MobileBankingAccessException(msg: String) extends Exception(msg)\ndef changeUserPin(userId: String, newPin: String): Unit = {\n  if (newPin.length < 4) throw new MobileBankingAccessException(\"PIN too short.\")\n}"}
{"id":"9818dc01-2d86-4b1d-a5e0-60652f126639","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait MobileBankingError\ncase object AccountNotFound extends MobileBankingError\ncase object InsufficientAccountBalance extends MobileBankingError\n\ndef debitAccount(accountId: String, amount: BigDecimal): Either[MobileBankingError, BigDecimal] = {\n  val balance = 200.0\n  if (accountId != \"existing-id\") Left(AccountNotFound)\n  else if (amount > balance) Left(InsufficientAccountBalance)\n  else Right(balance - amount)\n}"}
{"id":"39582c55-536e-43bd-9a53-786adaaeb30e","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait LoginError\ncase object InvalidCredentials extends LoginError\ncase object LockedAccount extends LoginError\n\ndef loginUser(email: String, password: String): Either[LoginError, String] = {\n  if (email != \"user@bank.com\") Left(InvalidCredentials)\n  else if (password == \"locked\") Left(LockedAccount)\n  else Right(\"session-token-12345\")\n}"}
{"id":"09f73b70-6b9c-428e-8afb-33839180de06","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def getCustomerMobileNumber(customerId: String): Option[String] = {\n  if (customerId == \"abc\") Some(\"+1234567890\")\n  else None\n}"}
{"id":"ab1b094e-8e10-4220-8861-79a88c91ba84","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"import scala.util.Try\ndef parseAccountNumber(raw: String): Try[Long] = Try {\n  raw.toLong\n}\n"}
{"id":"4d588350-a1fe-4822-bd11-3c253eb645a8","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object ExceedsLimit extends PaymentError\ncase object CardInactive extends PaymentError\n\ndef processCardPayment(cardId: String, amount: BigDecimal): Either[PaymentError, String] = {\n  if (amount > 1000) Left(ExceedsLimit)\n  else if (cardId == \"deactivated\") Left(CardInactive)\n  else Right(\"Payment processed successfully\")\n}"}
{"id":"7d999101-9c30-47bf-ac3b-cab0d6b2206b","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def safeGetAvailableBalance(accountId: String): Option[BigDecimal] = {\n  if (accountId == \"active-123\") Some(450.25)\n  else None\n}"}
{"id":"d4ce52fd-84fb-4226-9f76-af63cec1b6e9","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef mobilePinChange(oldPin: String, newPin: String): Try[String] = Try {\n  if (newPin.length != 4) throw new RuntimeException(\"PIN must be 4 digits.\")\n  \"PIN updated\"\n}"}
{"id":"7bacb84d-6e1d-41c9-ad14-5e93616e843a","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait TransactionFetchError\ncase object TransactionIdMissing extends TransactionFetchError\n\ndef fetchRecentTransaction(transactionId: String): Either[TransactionFetchError, String] = {\n  if (transactionId.isEmpty) Left(TransactionIdMissing)\n  else Right(\"Transaction details for \" + transactionId)\n}"}
{"id":"1d576f2f-023b-4951-9a23-85896bf3a6d8","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def verifyMobileDevice(deviceId: Option[String]): Either[String, String] = {\n  deviceId match {\n    case Some(id) => Right(s\"Device $id verified.\")\n    case None => Left(\"Device ID required.\")\n  }\n}"}
{"id":"ca2a134d-ad69-494a-888e-6facbb91d6bb","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"import scala.util.Try\ndef calculateInstallment(principal: BigDecimal, period: Int): Try[BigDecimal] = Try {\n  if (period <= 0) throw new IllegalArgumentException(\"Period must be positive.\")\n  principal / period\n}"}
{"id":"549f81d8-4c93-445d-abea-2f72fe79b534","timestamp":1746099282526,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait AccountUpdateError\ncase object InvalidContactInfo extends AccountUpdateError\n\ndef updateContactDetails(userId: String, phone: String): Either[AccountUpdateError, String] = {\n  if (!phone.forall(_.isDigit)) Left(InvalidContactInfo)\n  else Right(\"Contact details updated.\")\n}"}
{"id":"67b8e12d-f53f-4889-ab3e-5e3ad740c5e0","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"object LoginService:\n  def login(username: String, password: String): Option[String] =\n    if username == \"mobileUser\" && password == \"securePass\" then Some(\"token123\")\n    else None"}
{"id":"94220d53-d113-456d-bf92-d32164914fec","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class InvalidAccountException(msg: String) extends Exception(msg)\nobject FundTransfer:\n  def transferFunds(fromAccount: String, toAccount: String, amount: Double): String =\n    if amount <= 0 then throw new IllegalArgumentException(\"Amount must be positive\")\n    if fromAccount == toAccount then throw new InvalidAccountException(\"Cannot transfer to same account\")\n    s\"Transferred $$amount from $$fromAccount to $$toAccount\""}
{"id":"46a6deda-4fa7-4698-8cfe-1e1c232268aa","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"object NotificationService:\n  def sendPushNotification(userId: String, message: String): Either[String, Unit] =\n    if message.isEmpty then Left(\"Notification message is empty\")\n    else Right(())"}
{"id":"863b967c-fcb0-4cec-a707-f29685a4d0dd","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object BalanceChecker:\n  def getBalance(accountNumber: String): Double =\n    try\n      if accountNumber.isEmpty then throw new NoSuchElementException(\"Account number is empty\")\n      2050.75\n    catch\n      case e: Exception => 0.0"}
{"id":"50aca98b-6c2d-468f-be29-802487dfa349","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait TransactionError\ncase object InsufficientFunds extends TransactionError\ncase object ExceedsLimit extends TransactionError\nobject TransactionValidation:\n  def validateWithdrawal(balance: Double, withdrawal: Double): Either[TransactionError, Double] =\n    if withdrawal > balance then Left(InsufficientFunds)\n    else if withdrawal > 5000 then Left(ExceedsLimit)\n    else Right(balance - withdrawal)"}
{"id":"38fab955-272b-4001-ac3c-13eff040d079","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class InvalidCredentialException extends Exception(\"Incorrect username or password\")\nobject UserAuthenticator:\n  def authenticateUser(loginId: String, pwd: String): String =\n    if loginId == \"user1\" && pwd == \"pass1\" then \"sessionToken\"\n    else throw new InvalidCredentialException"}
{"id":"7612c251-b4f2-4072-ae9a-9fe4c8029baa","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"import scala.util.Try\nobject MobileDeposit:\n  def scanCheck(imageBytes: Array[Byte]): Try[String] =\n    Try {\n      if imageBytes.length < 100 then throw new Exception(\"Image too small\")\n      \"Deposit Accepted\"\n    }"}
{"id":"5400bdc6-8ee8-4645-944f-7d495516191b","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object BillPayment:\n  def payUtilityBill(accountId: String, billerId: String, amount: Double): String =\n    try\n      if amount <= 0 then throw new ArithmeticException(\"Bill amount must be positive\")\n      s\"Paid $$amount to biller $$billerId from account $$accountId\"\n    catch\n      case ex: Exception => ex.getMessage"}
{"id":"309df9d9-0826-4c99-8154-ff82959b5494","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait AccountError\ncase object AccountLocked extends AccountError\ncase object AccountNotFound extends AccountError\nobject AccountRepository:\n  def fetchAccount(userId: String): Either[AccountError, String] =\n    if userId == \"lockedUser\" then Left(AccountLocked)\n    else if userId == \"unknown\" then Left(AccountNotFound)\n    else Right(\"ActiveAccount123\")"}
{"id":"bb8b4646-cabf-47ce-b22e-c4ca7493ef3b","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class PaymentError(message: String) extends Exception(message)\nobject CardPayment:\n  def processCard(cardNumber: String, amount: Double): String =\n    if cardNumber.length != 16 then throw new PaymentError(\"Invalid card number\")\n    if amount > 10000 then throw new PaymentError(\"Transaction limit exceeded\")\n    \"Payment Successful\""}
{"id":"cd546113-20ea-41d6-af0f-431ca328e37d","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"object CustomerSupport:\n  def resolveTicket(ticketId: String): Option[String] =\n    if ticketId.startsWith(\"open-\") then Some(\"Resolved\") else None"}
{"id":"6e3c84bd-1f03-4158-b12a-739c3d53f3f7","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object TransactionHistory:\n  def getRecentTransactions(userId: String): List[String] =\n    try\n      if userId == \"\" then throw new Exception(\"No userId provided\")\n      List(\"txn521\",\"txn522\")\n    catch\n      case _: Exception => Nil"}
{"id":"01db9987-acc1-4929-9744-a7292b4e2b42","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"import scala.util.Try\nobject BiometricAuthenticator:\n  def authenticateBiometric(profileData: Array[Byte]): Try[String] =\n    Try {\n      if profileData.isEmpty then throw new Exception(\"No biometric data\")\n      \"Biometric Authenticated\"\n    }"}
{"id":"a31e303f-5e1b-4204-9943-84688e123c51","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object AccountBlocker:\n  def blockAccount(accountId: String): String =\n    try\n      if accountId.contains(\"999\") then throw new Exception(\"Suspicious account\")\n      \"Account blocked successfully\"\n    catch\n      case ex: Exception => s\"Unable to block: $ex\""}
{"id":"e3c36985-f40b-46c6-a3dc-8c5479dfb598","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"sealed trait MobileAppError\ncase object SmsNotSent extends MobileAppError\ncase object InvalidOtp extends MobileAppError\nobject OtpService:\n  def sendOtp(mobileNumber: String): Either[MobileAppError, String] =\n    if mobileNumber.startsWith(\"123\") then Left(SmsNotSent)\n    else Right(\"otp1234\")"}
{"id":"e2f59869-42f5-4b18-824b-47e43922ccd4","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class OverdrawnException extends Exception(\"Account overdrawn\")\nobject WithdrawalService:\n  def withdrawMoney(balance: Double, amount: Double): Double =\n    if amount > balance then throw new OverdrawnException\n    balance - amount"}
{"id":"3bd9700b-dc61-40a8-a06a-6af9c2908d87","timestamp":1746099304360,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"object DeviceRegistration:\n  def registerDevice(deviceId: String): Option[String] =\n    if deviceId.nonEmpty then Some(\"DeviceRegistered\") else None"}
{"id":"8d907d71-60b0-4ed5-a95e-e52857769636","timestamp":1746099304361,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object CheckBalance:\n  def printBalance(accountNumber: String): String =\n    try\n      val bal = if accountNumber == \"0001\" then 2000.0 else throw new Exception(\"Invalid Account\")\n      s\"Your balance is $$bal\"\n    catch\n      case ex: Exception => ex.getMessage"}
{"id":"d54f11a0-1757-41cf-bffe-82416dff272a","timestamp":1746099304361,"category":"throws","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"object BeneficiaryAdder:\n  def addBeneficiary(accountOwner: String, beneficiary: String): Either[String, String] =\n    if beneficiary == \"\" then Left(\"Beneficiary cannot be blank\")\n    else Right(\"Beneficiary added successfully\")"}
{"id":"ae266fa9-ac6c-4e03-9df2-642945ef85a3","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class PatientId(value: String)\ncase class AppointmentSlot(id: Int, isAvailable: Boolean)\ncase class SlotUnavailableError(slotId: Int)\ndef reserveAppointmentSlot(slot: AppointmentSlot): Either[SlotUnavailableError, AppointmentSlot] =\n  if slot.isAvailable then Right(slot.copy(isAvailable = false))\n  else Left(SlotUnavailableError(slot.id))"}
{"id":"26461231-e523-4f66-9548-e5e13c13b701","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"case class DoctorUsername(name: String)\nclass DoctorNotAvailableException(doctor: DoctorUsername) extends Exception(\n  s\"Doctor ${doctor.name} is not available for appointment.\")\ndef checkDoctorAvailability(doctor: DoctorUsername, available: Boolean): Unit =\n  if !available then\n    throw new DoctorNotAvailableException(doctor)\n  else ()"}
{"id":"bd1a7190-a8de-4853-a899-96ea8c6699c4","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait SchedulingError\ncase object PatientNotRegistered extends SchedulingError\ncase object TimeSlotConflict extends SchedulingError\ndef scheduleTelemedicineAppointment(patientId: String, slotTime: String, registered: Boolean, available: Boolean): Either[SchedulingError, String] =\n  if !registered then Left(PatientNotRegistered)\n  else if !available then Left(TimeSlotConflict)\n  else Right(s\"Appointment scheduled for $patientId at $slotTime\")"}
{"id":"a4e2a8da-46f8-4361-9043-a03542b91e46","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class InvalidAppointmentTimeException(time: String) extends Exception(s\"$time is not valid for appointment\")\ndef setAppointmentTime(time: String): Unit = {\n  if time == \"\" then throw new InvalidAppointmentTimeException(time)\n  else ()\n}"}
{"id":"417d47f3-2d14-4c1d-99d6-a1597ebc7fb2","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AppointmentId(id: Int)\ncase object AppointmentNotFound\ncase class Appointment(patient: String, time: String)\nval appointments: Map[AppointmentId, Appointment] = Map(AppointmentId(1) -> Appointment(\"Mark\", \"2024-06-23T09:00\"))\ndef findAppointment(id: AppointmentId): Option[Appointment] =\n  appointments.get(id)"}
{"id":"3c1730d0-50c2-4965-84f6-773c1ac34682","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"case class DuplicateAppointmentException(patient: String) extends Exception(s\"Duplicate appointment for $patient\")\ndef createAppointment(patient: String, existing: Boolean): String = {\n  if existing then throw new DuplicateAppointmentException(patient)\n  else s\"Appointment created for $patient\"\n}"}
{"id":"0e55752b-9a78-4e9f-bd3e-ea896aa9b5c4","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait LoginError\ncase object UnknownPatientId extends LoginError\ndef validateLogin(patientId: String, registeredIds: Set[String]): Either[LoginError, String] =\n  if registeredIds.contains(patientId) then Right(\"Login successful\")\n  else Left(UnknownPatientId)"}
{"id":"242f434a-7c87-42ec-b9ec-59afc68bbb23","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class InvalidPatientIdException(patientId: String) extends Exception(s\"$patientId is not a valid patient ID\")\ndef patientDetails(patientId: String, isValid: Boolean): String = {\n  if isValid then s\"Details for: $patientId\"\n  else throw new InvalidPatientIdException(patientId)\n}"}
{"id":"d3736bed-34af-422d-88b6-c0b56b44f62d","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"import scala.util.Try\ncase class AppointmentDetails(patientId: String, date: String)\ndef tryParseAppointment(details: String): Try[AppointmentDetails] =\n  Try {\n    val parts = details.split(\",\")\n    AppointmentDetails(parts(0), parts(1))\n  }"}
{"id":"ed02f770-6ff2-4c35-8453-a9f22b0e8f33","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class ConnectionTimeoutException() extends Exception(\"Telemedicine server connection timed out.\")\ndef connectToTelemedicineServer(timeout: Boolean): Unit =\n  if timeout then throw new ConnectionTimeoutException()\n  else ()"}
{"id":"74b36979-d4e7-40fa-872b-2867c2c9ef5d","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait VideoSessionError\ncase object InvalidMeetingUrl extends VideoSessionError\ndef startVideoSession(meetingUrl: String): Either[VideoSessionError, String] =\n  if meetingUrl.startsWith(\"https://\") then Right(\"Session started\")\n  else Left(InvalidMeetingUrl)"}
{"id":"841b6a6f-55b3-4e4b-9b82-9c45bd37212f","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class PastDateException(date: String) extends Exception(s\"Cannot schedule appointment in the past: $date\")\ndef scheduleForDate(date: String, isFuture: Boolean): String =\n  if !isFuture then throw new PastDateException(date)\n  else s\"Appointment set for $date\""}
{"id":"203f22d6-6f81-4842-b54e-3195c9b8d922","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class Doctor(id: String, available: Boolean)\ndef assignAvailableDoctor(doctors: List[Doctor]): Option[Doctor] =\n  doctors.find(_.available)"}
{"id":"c4aedb24-ad33-4159-ae6a-44c2937ab572","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getRoomToken(patientId: String): String = {\n  try {\n    if patientId == \"\" then throw new Exception(\"Missing patient ID.\")\n    else \"token_\" + patientId\n  } catch {\n    case e: Exception => \"\"\n  }\n}"}
{"id":"dd70f48c-b539-4fb9-a327-c354337eee2d","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait CancellationError\ncase object AppointmentDoesNotExist extends CancellationError\ndef cancelAppointment(id: Int, scheduled: Set[Int]): Either[CancellationError, String] =\n  if scheduled.contains(id) then Right(\"Appointment canceled\")\n  else Left(AppointmentDoesNotExist)"}
{"id":"8950af91-10d7-4b21-8e0a-967224d49e40","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def confirmAppointment(slot: Int): String = {\n  try {\n    if slot < 0 then throw new Exception(\"Invalid slot number.\")\n    else \"Appointment confirmed.\"\n  } catch {\n    case e: Exception => \"Confirmation failed.\"\n  }\n}"}
{"id":"e47c6fe9-e1d1-48f7-bdad-1ec35a5c8dbb","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class NetworkError(message: String)\ndef attemptScheduling(networkReachable: Boolean): Either[NetworkError, String] =\n  if networkReachable then Right(\"Scheduled successfully\")\n  else Left(NetworkError(\"Network is unreachable\"))"}
{"id":"ae247e49-cef1-49a5-8014-8a1654b10328","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def bookSession(slotId: Int, isFree: Boolean): String = {\n  try {\n    if !isFree then throw new Exception(\"Time slot not free!\")\n    else \"Session booked.\"\n  } catch {\n    case e: Exception => \"Booking failed.\"\n  }\n}"}
{"id":"336001dc-b84f-42d3-be22-4a2062a85d28","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class ReschedulingError(reason: String)\ndef reschedule(slotAvailable: Boolean): Option[String] =\n  if slotAvailable then Some(\"Rescheduled successfully\")\n  else None"}
{"id":"fff32350-a985-4fd6-a39c-1800ab9ed33c","timestamp":1746099322842,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def updatePatientInfo(patientId: String, info: String, valid: Boolean): String = {\n  try {\n    if !valid then throw new Exception(\"Invalid update data.\")\n    else s\"Updated $patientId\"\n  } catch {\n    case _: Exception => \"Update failed.\"\n  }\n}"}
{"id":"f2c800d5-cf8d-4e20-8c42-73b3dff346e4","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AppointmentRequest(patientId: String, scheduledTime: String)\ncase class Appointment(id: String, patientId: String, scheduledTime: String)\nsealed trait AppointmentError\ncase object AppointmentConflict extends AppointmentError\ncase object InvalidAppointmentTime extends AppointmentError\n\ndef createAppointment(request: AppointmentRequest): Either[AppointmentError, Appointment] =\n  if request.scheduledTime.isEmpty then Left(InvalidAppointmentTime)\n  else if request.scheduledTime == \"2024-08-04T10:00\" then Left(AppointmentConflict)\n  else Right(Appointment(\"apt-001\", request.patientId, request.scheduledTime))\n"}
{"id":"87b3922e-5d4a-4ef0-a367-e6943ac5061f","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def findDoctorAvailability(doctorId: String, time: String): Option[String] =\n  if doctorId == \"dr-456\" && time == \"2024-08-04T15:00\" then Some(time)\n  else None\n"}
{"id":"c8e4395b-7dd7-4565-a119-f3fd5ad68aff","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseAppointmentTime(timeStr: String): Try[java.time.LocalDateTime] =\n  Try(java.time.LocalDateTime.parse(timeStr))\n"}
{"id":"7e33ca63-aadc-4e67-ac17-217b0f93a3c9","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait SchedulingError\ncase object DoctorUnavailable extends SchedulingError\ncase object PatientBlocked extends SchedulingError\ncase class BookingSuccess(appointmentId: String)\n\ndef bookAppointment(patientId: String, doctorId: String, time: String): Either[SchedulingError, BookingSuccess] =\n  if patientId == \"blk-100\" then Left(PatientBlocked)\n  else if doctorId == \"dr-123\" then Left(DoctorUnavailable)\n  else Right(BookingSuccess(\"apt-678\"))\n"}
{"id":"984dbb14-b70e-40ed-9ca5-44a2b7ae28b6","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def lookupPatientRecord(patientId: String): Option[String] =\n  if patientId == \"patient-xyz\" then Some(\"John Doe\")\n  else None\n"}
{"id":"6d7f6645-c6a6-4772-8031-db51d6e84566","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"import scala.util.Try\n\ndef cancelAppointment(appointmentId: String): Try[String] =\n  Try {\n    if appointmentId.nonEmpty then \"Cancelled\"\n    else throw new IllegalArgumentException(\"Invalid id\")\n  }\n"}
{"id":"43c02d61-be49-4bf4-8543-03410864e837","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"sealed trait VerificationError\ncase object PatientNotFound extends VerificationError\n\ncase class Patient(id: String, email: String)\ndef verifyPatient(patientId: String): Either[VerificationError, Patient] =\n  if patientId == \"\" then Left(PatientNotFound)\n  else Right(Patient(patientId, \"jane@telemed.com\"))\n"}
{"id":"b3393bc4-7a78-450f-809d-763a7798e70e","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def rescheduleTime(current: String, requested: String): Option[String] =\n  if current == requested then None\n  else Some(requested)\n"}
{"id":"9aff34d8-fc1d-4cbc-a32d-d35ba70e89a7","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AppointmentError(message: String)\ndef confirmSlot(doctorId: String, slot: String): Either[AppointmentError, String] =\n  if doctorId == \"dr-222\" then Left(AppointmentError(\"Doctor unavailable\"))\n  else Right(\"Slot confirmed for \" + slot)\n"}
{"id":"53cf871a-75ba-49b2-b31f-ec2af3cfd2d6","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeContactNotify(appointmentId: String): Try[String] =\n  Try {\n    if appointmentId == \"\" then throw new Exception(\"Missing Appointment Id\")\n    else \"Notified\"\n  }\n"}
{"id":"3badf718-a8ad-4ef1-8de4-fdb1bab30da7","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class SchedulingException(msg: String) extends Exception(msg)\n\ndef assignDoctor(patientId: String, doctorId: String): String =\n  if doctorId == \"dr-busy\" then throw new SchedulingException(\"Doctor busy\")\n  else \"Doctor assigned\"\n"}
{"id":"9ce72936-e9c5-4393-92b2-7279e454e1e5","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getAppointmentDetails(appointmentId: String): String =\n  try {\n    if appointmentId == \"\" then throw new IllegalArgumentException(\"No id\")\n    else s\"Details for $appointmentId\"\n  } catch {\n    case e: Exception => s\"Error: ${e.getMessage}\"\n  }\n"}
{"id":"b0884645-6203-4855-a6e9-1ae2986ff13c","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def notifyPatient(patientId: String, message: String): Unit =\n  if patientId == null then throw new NullPointerException(\"PatientId required\")\n  // else normally send notification\n"}
{"id":"01d614d2-74f9-4ded-9517-00f6bf95b503","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class TelemedicineDatabaseException(msg: String) extends RuntimeException(msg)\n\ndef fetchPastAppointments(patientId: String): List[String] = {\n  if patientId == \"blocked\" then throw new TelemedicineDatabaseException(\"Blocked patient\")\n  List(\"2024-07-10\", \"2024-07-17\")\n}\n"}
{"id":"7f8e04bd-1920-4a36-84c1-6c45935d0f44","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def recordDoctorAbsence(doctorId: String): Unit =\n  if doctorId.isEmpty then throw new IllegalArgumentException(\"Missing doctor id\")\n  // else record in database\n"}
{"id":"a97acae3-6e35-4659-94af-282957a81f7f","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def updateAppointmentStatus(appointmentId: String, status: String): String =\n  try {\n    if status != \"confirmed\" && status != \"cancelled\" then throw new Exception(\"Unknown status\")\n    \"Status updated\"\n  } catch {\n    case e: Exception => \"Failure: \" + e.getMessage\n  }\n"}
{"id":"af77489a-b48d-486e-b4ed-2b8100e5c195","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"class PatientNotRegisteredException(msg: String) extends Exception(msg)\n\ndef sendAppointmentLink(patientId: String): String =\n  if patientId == \"guest\" then throw new PatientNotRegisteredException(\"Registration required\")\n  \"Link sent\"\n"}
{"id":"b8e0614f-c936-4c57-b97b-9781ff6a96d8","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def doctorAvailability(doctorId: String, date: String): String =\n  try {\n    if doctorId == \"dr-none\" then throw new RuntimeException(\"No such doctor\")\n    s\"Doctor $doctorId is available on $date\"\n  } catch {\n    case e: Exception => s\"Error: $date not available\"\n  }\n"}
{"id":"29639e5d-7381-41e3-bb88-aace3c25b695","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def removeAppointment(appointmentId: String): Boolean =\n  try {\n    if appointmentId.length != 10 then throw new Exception(\"Invalid format\")\n    true\n  } catch {\n    case _: Exception => false\n  }\n"}
{"id":"3a401935-ec86-4be8-8e30-785565b3807d","timestamp":1746099351040,"category":"throws","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def paymentAuthorization(patientId: String, token: String): String =\n  if token.isEmpty then throw new IllegalStateException(\"Missing payment token\")\n  \"Payment authorized\"\n"}
{"id":"a4cf638d-a92e-4e0f-9a2f-6554d7488fd9","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"object UserStepParser:\n  def parseStepCount(input: String): Either[String, Int] =\n    try input.toIntOption match\n      case Some(steps) if steps >= 0 => Right(steps)\n      case Some(_) => Left(\"Step count cannot be negative\")\n      case None => Left(\"Invalid step count format\")\n    catch case ex: Exception => Left(ex.getMessage)"}
{"id":"8878d1f2-79ac-46f7-842f-9c895fb4d6bd","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def parseHeartRate(input: String): Int = {\n  try {\n    val hr = input.toInt\n    if (hr < 0) throw new IllegalArgumentException(\"Heart rate must be positive\")\n    hr\n  } catch {\n    case e: NumberFormatException => throw new RuntimeException(\"Invalid heart rate format\")\n  }\n}"}
{"id":"a5342936-54bf-464e-8486-dac40d08e18b","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class WorkoutSession(durationMinutes: Int, caloriesBurned: Int)\n\nenum WorkoutParsingError:\n  case InvalidFormat, NegativeDuration, NegativeCalories\n\ndef parseWorkoutSession(str: String): Either[WorkoutParsingError, WorkoutSession] =\n  str.split(\",\") match\n    case Array(dm, cb) =>\n      for\n        d <- dm.toIntOption.toRight(WorkoutParsingError.InvalidFormat)\n        c <- cb.toIntOption.toRight(WorkoutParsingError.InvalidFormat)\n        _ <- if d >= 0 then Right(()) else Left(WorkoutParsingError.NegativeDuration)\n        _ <- if c >= 0 then Right(()) else Left(WorkoutParsingError.NegativeCalories)\n      yield WorkoutSession(d, c)\n    case _ => Left(WorkoutParsingError.InvalidFormat)"}
{"id":"80afb6f4-123d-4c4e-b486-d27ebb909ff4","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getActiveMinutesFromRecord(record: Map[String, String]): Int = {\n  try {\n    val minutes = record(\"activeMinutes\").toInt\n    if (minutes < 0) throw new IllegalArgumentException(\"Negative active minutes\")\n    minutes\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Failed to extract active minutes\")\n  }\n}"}
{"id":"6c9fc491-2533-43bf-bf3c-8d86b9e5b8d9","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait DistanceError\ncase object NotNumberDistance extends DistanceError\ncase object NegativeDistance extends DistanceError\n\ndef parseDistanceLog(meters: String): Either[DistanceError, Double] =\n  meters.toDoubleOption match\n    case Some(m) if m >= 0 => Right(m)\n    case Some(_) => Left(NegativeDistance)\n    case None => Left(NotNumberDistance)"}
{"id":"ceb7bb19-7b3f-4591-abcc-c86833d329de","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class FitnessRecord(val steps: String, val heartRate: String)\n\nobject FitnessRecordProcessor {\n  def calculateStepHeartProduct(record: FitnessRecord): Int = {\n    try {\n      val steps = record.steps.toInt\n      val hr = record.heartRate.toInt\n      steps * hr\n    } catch { case e: Exception => throw new RuntimeException(\"Record processing failure\") }\n  }\n}"}
{"id":"4e5919e8-3cc3-412b-a566-da133c1a3e84","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait GoalCheckError\ncase object InvalidGoalFormat extends GoalCheckError\ncase object GoalTooLow extends GoalCheckError\n\ndef validateDailyGoal(goalStr: String): Option[Int] =\n  goalStr.toIntOption match\n    case Some(g) if g > 0 => Some(g)\n    case _ => None"}
{"id":"7c2b55f8-3e9f-457a-817d-eeab46392763","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def caloriesBurnedForSession(calories: String): Int = {\n  try {\n    val cals = calories.toInt\n    if (cals < 0) throw new ArithmeticException(\"Calories cannot be negative\")\n    cals\n  } catch {\n    case _: Exception => throw new IllegalArgumentException(\"Calories value error\")\n  }\n}"}
{"id":"5e1083e9-d765-4308-a606-6489e19a0590","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryToParseFloorsClimbed(input: String): Try[Int] =\n  scala.util.Try(input.toInt).filter(_ >= 0)"}
{"id":"7e134663-d05f-4d5f-bc91-4a5205d095dc","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def extractSleepDuration(sleepData: Map[String, String]): Int = {\n  try {\n    val duration = sleepData(\"durationMinutes\").toInt\n    if (duration < 0) throw new Exception(\"Negative sleep duration\")\n    duration\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Malformed sleep duration in data\")\n  }\n}"}
{"id":"b6697bc4-a61b-4f21-a791-4caaf25916aa","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"enum ProgressCalculationError:\n  case InvalidSteps, InvalidGoal\n\ndef calculateProgress(stepsStr: String, goalStr: String): Either[ProgressCalculationError, Double] =\n  for\n    steps <- stepsStr.toIntOption.toRight(ProgressCalculationError.InvalidSteps)\n    goal <- goalStr.toIntOption.toRight(ProgressCalculationError.InvalidGoal)\n    if goal > 0\n  yield steps.toDouble / goal"}
{"id":"2c51d9b8-b733-4801-b417-6adde9998e4a","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getDistanceOrCrash(track: Map[String, String]): Double = {\n  try {\n    val d = track(\"distanceKm\").toDouble\n    if (d < 0) throw new IllegalStateException(\"Negative distance\")\n    d\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Distance parse failed\")\n  }\n}"}
{"id":"961bf619-2afd-4d4a-9f5b-74590369c857","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait SleepParsingError\ncase object SleepMissingField extends SleepParsingError\ncase object SleepNotANumber extends SleepParsingError\ncase object SleepNegativeDuration extends SleepParsingError\n\ndef parseSleepMinutes(raw: Option[String]): Either[SleepParsingError, Int] =\n  raw match\n    case None => Left(SleepMissingField)\n    case Some(v) => v.toIntOption\n      .toRight(SleepNotANumber)\n      .flatMap(m => if m >= 0 then Right(m) else Left(SleepNegativeDuration))"}
{"id":"30fc9bdd-360e-441e-ba26-0ceb9382cc15","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def parseActiveZoneMinutes(rawActive: String): Int = {\n  try {\n    val azm = rawActive.toInt\n    if (azm < 0) throw new Exception(\"Active zone minutes negative\")\n    azm\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Failed to extract active zone minutes\")\n  }\n}"}
{"id":"476c255c-fc23-4f04-80c8-b8c997e11ea6","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class HydrationRecord(liters: Double)\nsealed trait HydrationValidationError\ncase object InvalidLitersFormat extends HydrationValidationError\ncase object NegativeLiters extends HydrationValidationError\n\ndef validateHydrationEntry(str: String): Either[HydrationValidationError, HydrationRecord] =\n  for\n    value <- str.toDoubleOption.toRight(InvalidLitersFormat)\n    _ <- if value >= 0 then Right(()) else Left(NegativeLiters)\n  yield HydrationRecord(value)"}
{"id":"54607654-b115-42ab-9235-72745b3de7cd","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def calculateAvgHeartRate(heartRates: List[String]): Double = {\n  try {\n    val hr = heartRates.map(_.toInt)\n    hr.sum.toDouble / hr.size\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Invalid heart rate in list\")\n  }\n}"}
{"id":"0d2d3d02-1a9f-4d8f-a6cc-397247dd9e08","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeCaloriesPerMinute(calories: String, minutes: String): Try[Double] =\n  Try {\n    val cal = calories.toInt\n    val min = minutes.toInt\n    require(min > 0, \"Minutes must be > 0\")\n    cal.toDouble / min\n  }"}
{"id":"54b50069-ab78-4623-8447-264caba035e9","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def parseStepGoalOrThrow(goal: String): Int = {\n  try {\n    val g = goal.toInt\n    if (g < 1000) throw new IllegalArgumentException(\"Goal too low\")\n    g\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Invalid goal value\")\n  }\n}"}
{"id":"12b8f297-0582-4594-b6d2-9469cdc97fe5","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait ActivityLoadError\ncase object EmptyLoadField extends ActivityLoadError\ncase object NonNumericLoad extends ActivityLoadError\ncase object NegativeActivityLoad extends ActivityLoadError\n\ndef parseActivityLoad(load: String): Either[ActivityLoadError, Int] =\n  if load.trim.isEmpty then Left(EmptyLoadField)\n  else load.toIntOption match\n    case Some(v) if v >= 0 => Right(v)\n    case Some(_) => Left(NegativeActivityLoad)\n    case None => Left(NonNumericLoad)"}
{"id":"fa8c576d-e44e-43b4-be3e-515bee6493ac","timestamp":1746099380250,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def convertMeterToMileOrThrow(meters: String): Double = {\n  try {\n    val m = meters.toDouble\n    if (m < 0) throw new Exception(\"Meters negative\")\n    m * 0.000621371\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Failed to convert meters\")\n  }\n}"}
{"id":"70080df5-6144-41b7-a092-9eacb2938bbf","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class HeartRateRecord(timestamp: Long, bpm: Int)\ndef averageHeartRate(records: List[HeartRateRecord]): Either[String, Double] =\n  if records.isEmpty then Left(\"No heart rate records available.\")\n  else Right(records.map(_.bpm).sum.toDouble / records.size)"}
{"id":"20240289-1c5b-4999-a969-063c509a7d19","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"object WorkoutAnalyzer:\n  def caloriesBurned(durationMinutes: Int, caloriesPerMinute: Option[Int]): Option[Int] =\n    caloriesPerMinute.map(_ * durationMinutes)"}
{"id":"88695ec2-00cb-4ec9-bc69-9cfdfef1f2be","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait SleepAnalysisError\ncase object InsufficientData extends SleepAnalysisError\ncase class InvalidSleepPeriod(msg: String) extends SleepAnalysisError\n\ndef calculateSleepQuality(hours: Int): Either[SleepAnalysisError, String] =\n  if hours <= 0 then Left(InsufficientData)\n  else if hours < 3 then Left(InvalidSleepPeriod(\"Too short\"))\n  else Right(\"Good\")"}
{"id":"6afe1ea6-c2ff-492a-aba2-4148653edeef","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def safeParseSteps(input: String): Option[Int] =\n  try Option(input.toInt) catch case _: Throwable => None"}
{"id":"75466750-6adc-4f66-bc4f-b0645b50b123","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseActiveMinutes(stat: String): Try[Int] =\n  Try(stat.toInt)"}
{"id":"ada56698-9f22-4472-9117-e8724fcecefc","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def validateGoalCompletion(goal: Int, achieved: Int): Either[String, Boolean] =\n  if goal <= 0 then Left(\"Invalid goal value\")\n  else Right(achieved >= goal)"}
{"id":"baf98045-3eb2-44d5-a737-58bc33d4b74d","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def lookupUserProfile(id: String, profiles: Map[String, String]): Option[String] =\n  profiles.get(id)"}
{"id":"c2963698-0e5a-4600-8167-ccfda24d723d","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"sealed trait ActivitySummaryError\ncase object ActivityMissing extends ActivitySummaryError\n\ndef getActivityDuration(\n  name: String,\n  sessions: Map[String, Int]\n): Either[ActivitySummaryError, Int] =\n  sessions.get(name).toRight(ActivityMissing)"}
{"id":"6928d5eb-9677-4669-af1b-da0aab5b27f3","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def calculateDailyStepDelta(today: Int, yesterday: Int): Option[Int] =\n  if today >= 0 && yesterday >= 0 then Some(today - yesterday)\n  else None"}
{"id":"e6605a56-7e78-4cb8-b60f-15b0ab09b01a","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDistanceParsed(km: String): Try[Double] =\n  Try(km.toDouble)"}
{"id":"63adffd3-df8d-4ddf-9a5f-899c6a3dd079","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getStepCount(record: Map[String, Int], user: String): Int =\n  try {\n    record(user)\n  } catch {\n    case e: NoSuchElementException => throw new RuntimeException(\"User step count not found\", e)\n  }"}
{"id":"d61e8008-fd84-4ae6-b16d-bfb5e7336c58","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class SleepDataMissingException(msg: String) extends Exception(msg)\n\ndef computeSleepEfficiency(hours: Int): Double =\n  if hours < 0 then throw new SleepDataMissingException(\"Negative hours detected.\")\n  else hours.toDouble / 8.0 * 100"}
{"id":"36c42a29-b44b-4614-a31a-2471697740fc","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def caloriesBurnedRaw(minutes: Int, burnRate: Int): Int =\n  if burnRate <= 0 then throw new IllegalArgumentException(\"Burn rate cannot be zero or negative.\")\n  minutes * burnRate"}
{"id":"c3ee9f84-1f7d-48d5-adfd-26cb1b990358","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def parseSteps(steps: String): Int =\n  try steps.toInt catch case _: NumberFormatException => throw new RuntimeException(\"Invalid steps format\")"}
{"id":"a20a7b2b-514a-4827-855d-bdbd6604f1fe","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"object UserProfileAccess:\n  def getUserWeight(userId: String, weights: Map[String, Double]): Double =\n    try weights(userId)\n    catch case _: Throwable => throw new Exception(\"Could not retrieve weight.\")"}
{"id":"0d459976-26ef-41fd-ad00-2251fbfd4a36","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def timeInHeartZone(zone: String, records: Map[String, Int]): Int =\n  if !records.contains(zone) then throw new NoSuchElementException(\"Zone data missing.\")\n  else records(zone)"}
{"id":"824c8604-c3f5-4f44-bfb3-35af42140738","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def fetchActivityDuration(name: String, logs: Map[String, Int]): Int =\n  try logs(name) catch case _: NoSuchElementException => throw new Exception(\"Activity log not found\")"}
{"id":"fa148bdd-aaac-4d72-ac08-cb10787efaa3","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class InvalidHydrationLevel(message: String) extends Exception(message)\n\ndef validateHydration(level: Double): Boolean =\n  if level < 0.0 then throw new InvalidHydrationLevel(\"Hydration level cannot be negative.\")\n  else true"}
{"id":"d791ca80-702e-4bf0-ba2e-be45644bf7a1","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"object HeartRateValidator:\n  def checkHeartRate(bpm: Int): Unit =\n    if bpm < 40 || bpm > 220 then throw new IllegalStateException(\"Unrealistic heart rate value.\")"}
{"id":"738a5d4e-b0a2-41dc-8c77-ffe9a8745be5","timestamp":1746099396771,"category":"throws","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def assertStepGoalAchieved(target: Int, actual: Int): Unit =\n  if actual < target then throw new Exception(\"Step goal not achieved.\")"}
{"id":"5202b8eb-c1fa-4df3-92cb-d2428764e798","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlanId(value: String)\ncase class PricingPlan(price: Double)\n\ndef getPricingPlan(planId: PricingPlanId): Option[PricingPlan] = {\n  if planId.value == \"plan-basic\" then Some(PricingPlan(10.0))\n  else None\n}"}
{"id":"e3318971-08ef-4993-8584-eb46d36553ce","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlanUpdateError(message: String)\ncase class UpdateDetails(price: Double)\n\ndef updatePricingPlanPrice(planId: String, details: UpdateDetails): Either[PricingPlanUpdateError, Double] = {\n  if details.price <= 0 then Left(PricingPlanUpdateError(\"Invalid price: must be positive\"))\n  else Right(details.price)\n}"}
{"id":"1ff8eb4c-1321-43d8-a7e4-045e7452477c","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait PricingPlanValidationError\ncase object PlanNameMissing extends PricingPlanValidationError\ncase object PriceInvalid extends PricingPlanValidationError\n\ncase class NewPricingPlan(name: String, price: Double)\n\ndef validateNewPricingPlan(plan: NewPricingPlan): Either[PricingPlanValidationError, NewPricingPlan] = {\n  if plan.name.trim.isEmpty then Left(PlanNameMissing)\n  else if plan.price < 0 then Left(PriceInvalid)\n  else Right(plan)\n}"}
{"id":"96145475-7348-4c99-9382-27c7966a24e0","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePricingPlanPrice(input: String): Try[Double] = Try {\n  input.toDouble\n}"}
{"id":"0fd054d1-4504-4b02-8850-5364db1fc029","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, price: Double)\n\ndef getDiscountedPlan(plan: PricingPlan, discount: Double): Option[PricingPlan] = {\n  if discount < 0 || discount >= 100 then None\n  else Some(plan.copy(price = plan.price * (1 - discount / 100)))\n}"}
{"id":"53f454d6-1545-4d86-b19a-9d94ad38f9f0","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait PricingPlanRetrievalError\ncase object PlanNotFound extends PricingPlanRetrievalError\ncase object PlanDatabaseUnavailable extends PricingPlanRetrievalError\n\ncase class PricingPlan(planId: String, price: Double)\n\ndef findPricingPlan(planId: String): Either[PricingPlanRetrievalError, PricingPlan] = {\n  if planId == \"premium\" then Right(PricingPlan(planId, 50.0))\n  else Left(PlanNotFound)\n}"}
{"id":"0fa3e908-85bf-408a-a3c2-c50faaa9487b","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def tryUpdatePricingPlanPrice(price: Double): Option[Double] = {\n  if price <= 0 then None else Some(price * 1.05)\n}"}
{"id":"77a2d5d3-76c7-4ce6-a21b-c1ab92f93fa3","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, price: Double)\ncase class CreatePlanError(msg: String)\ndef createPricingPlan(plan: PricingPlan): Either[CreatePlanError, String] = {\n  if plan.price < 0 then Left(CreatePlanError(\"Price cannot be negative\"))\n  else Right(plan.id)\n}"}
{"id":"33f6b237-851a-4df3-9804-b96b3612ea85","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, active: Boolean)\n\ndef deactivatePricingPlan(plan: PricingPlan): Either[String, PricingPlan] = {\n  if !plan.active then Left(\"Plan already inactive\")\n  else Right(plan.copy(active = false))\n}"}
{"id":"db44d4ec-03f3-406e-a9b8-5a918b50764a","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"import scala.util.Try\ncase class PricingPlan(id: String, name: String)\n\ndef safeGetPlanName(plan: PricingPlan): Try[String] = Try {\n  if plan.name.isEmpty then throw new RuntimeException(\"Name missing\")\n  else plan.name\n}"}
{"id":"c0e5cc8c-20a8-4cbc-b026-a8e0d2d4d43f","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class InvalidPricingPlanIdException(msg: String) extends Exception(msg)\ndef fetchPricingPlan(planId: String): String = {\n  if planId.isEmpty then throw new InvalidPricingPlanIdException(\"Empty plan id\")\n  else \"Basic Plan\"\n}"}
{"id":"c5e616d1-7c33-47e6-a5d4-216185680734","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanNotFoundException extends Exception\n\ndef getPricingPlanPrice(planId: String): Double = {\n  if planId == \"invalid\" then throw new PricingPlanNotFoundException\n  else 19.99\n}"}
{"id":"cd477c5f-a5dd-4256-9e82-8292e73dac74","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def parsePlanPrice(planPrice: String): Double = {\n  try {\n    planPrice.toDouble\n  } catch {\n    case _: NumberFormatException => throw new RuntimeException(\"Invalid plan price format\")\n  }\n}"}
{"id":"a0fd7bae-0f84-4f70-899d-6133b84d6441","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanDatabaseException extends Exception\n\nobject PricingPlanDatabase {\n  def findPlanById(planId: String): String = {\n    try {\n      if planId == \"error\" then throw new PricingPlanDatabaseException\n      else \"Standard\"\n    } catch {\n      case _: PricingPlanDatabaseException => \"Unknown\"\n    }\n  }\n}"}
{"id":"dc04b8fd-f89a-4043-94c9-858c08467c66","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanActivationException(msg: String) extends Exception(msg)\ndef activatePlan(planId: String): Boolean = {\n  if planId == \"deprecated\" then throw new PlanActivationException(\"Cannot activate deprecated plan\")\n  else true\n}"}
{"id":"af6fe693-0bdc-4b62-96b1-b22b6f3bafd5","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class InvalidDiscountCode(code: String) extends Exception(s\"Invalid discount: $code\")\ndef applyDiscountCodeToPlan(code: String, planPrice: Double): Double = {\n  if code == \"WINTER10\" then planPrice * 0.9\n  else throw new InvalidDiscountCode(code)\n}"}
{"id":"0a28cc3b-f661-4e45-977f-bf1ef7f9dbe0","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def planPriceFromString(raw: String): Double = {\n  try {\n    raw.trim.toDouble\n  } catch {\n    case _: Exception => throw new IllegalArgumentException(\"Price input is invalid\")\n  }\n}"}
{"id":"77a81d34-7c55-4ada-9c5e-9142e626e51d","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanRemovalException extends Exception\n\ndef removePricingPlan(planId: String): String = {\n  if planId == \"locked-plan\" then throw new PlanRemovalException\n  else \"Removed successfully\"\n}"}
{"id":"93b9ee2e-e531-446d-8cf0-5dbc2e1bc103","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def safeExecutePricingOperation(): String = {\n  try {\n    throw new RuntimeException(\"Pricing operation failed\")\n  } catch {\n    case e: Exception => \"Failure: \" + e.getMessage\n  }\n}"}
{"id":"7d23e68c-b7b2-41a2-ab68-dfc99a99ba62","timestamp":1746099413141,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def setPlanPrice(planId: String, newPrice: Double): String = {\n  if newPrice < 0 then throw new IllegalArgumentException(\"Negative price is not allowed\")\n  else s\"Price set to $$newPrice\"\n}"}
{"id":"0a88bff5-13bd-4826-876e-401308237414","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, name: String, monthlyPrice: BigDecimal)\n\nsealed trait PricingPlanError\ncase object PricingPlanNotFound extends PricingPlanError\n\nobject PricingPlanRepository {\n  val plans = List(PricingPlan(\"basic\", \"Basic\", 10), PricingPlan(\"pro\", \"Pro\", 30))\n  def findPlanById(planId: String): Either[PricingPlanError, PricingPlan] =\n    plans.find(_.id == planId).toRight(PricingPlanNotFound)\n}"}
{"id":"b4e1d341-75c9-484a-b954-489a5a303881","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanServiceException(msg: String) extends RuntimeException(msg)\n\nobject PricingPlanService {\n  val plans = scala.collection.mutable.Map(\"basic\" -> 10, \"pro\" -> 30)\n  def getPlanMonthlyPrice(planId: String): BigDecimal = {\n    if (plans.contains(planId)) plans(planId)\n    else throw new PricingPlanServiceException(s\"Plan $planId does not exist\")\n  }\n}"}
{"id":"e20181ae-f8fc-46ed-8cd3-c53a7908a91f","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait PlanUpdateError\ncase object InvalidPriceUpdate extends PlanUpdateError\n\ncase class UpdatePriceRequest(planId: String, newPrice: BigDecimal)\n\ndef updatePlanPrice(request: UpdatePriceRequest): Either[PlanUpdateError, Boolean] =\n  if (request.newPrice < 0) Left(InvalidPriceUpdate)\n  else Right(true)"}
{"id":"cf965461-3494-4601-a21f-066e9f180d40","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PlanUpdateFailure(msg: String) extends Exception(msg)\n\ndef changePricingPlanPrice(planId: String, price: BigDecimal): Boolean = {\n  if (price < 0) throw new PlanUpdateFailure(\"Negative price is not allowed\")\n  true\n}"}
{"id":"f5f52e89-182c-4b97-b109-54cbedab24c0","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePriceInput(input: String): Try[BigDecimal] = Try(BigDecimal(input))"}
{"id":"873e1493-dce7-454d-9b7b-3144d883534f","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getPricingPlanName(planId: String): String = {\n  try {\n    val plans = Map(\"basic\" -> \"Basic Plan\", \"vip\" -> \"VIP Plan\")\n    plans(planId)\n  } catch {\n    case _: NoSuchElementException => throw new RuntimeException(\"Unknown plan id\")\n  }\n}"}
{"id":"0bb2bd25-15c0-4a0c-be43-760bd1c313a9","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait PricingPlanValidationError\ncase class MissingField(field: String) extends PricingPlanValidationError\ncase object InvalidAmount extends PricingPlanValidationError\n\ndef validateCreatePlanInput(name: String, price: BigDecimal): Either[PricingPlanValidationError, (String, BigDecimal)] =\n  if (name.isEmpty) Left(MissingField(\"name\"))\n  else if (price <= 0) Left(InvalidAmount)\n  else Right((name, price))"}
{"id":"fc4f5b68-db52-423c-bac4-fa865d1cd5bf","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def createPricingPlan(planName: String, planPrice: BigDecimal): String = {\n  if (planName == \"\") throw new IllegalArgumentException(\"Plan name required\")\n  if (planPrice < 0) throw new IllegalArgumentException(\"Invalid plan price\")\n  java.util.UUID.randomUUID.toString\n}"}
{"id":"698a647e-e3af-4828-bb53-6f5ce726b857","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"import scala.util.Try\n\ndef loadPlanDiscount(planId: String): Try[Double] = Try {\n  val discounts = Map(\"basic\" -> 0.1, \"pro\" -> 0.2)\n  discounts(planId)\n}"}
{"id":"9d1eb735-3704-4381-a67e-d8feb613ce70","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"object PlanRemovalService {\n  def removePricingPlanById(planId: String): Unit = {\n    try {\n      if (planId == \"test\") throw new IllegalStateException(\"Removal not allowed\")\n      // removal logic\n    } catch {\n      case e: Exception => throw new RuntimeException(\"Failed to remove plan: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"55f128a3-1a06-403f-ad8b-651216bb49f1","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait SubscriptionError\ncase object PlanNotActive extends SubscriptionError\ncase object PlanExpired extends SubscriptionError\n\ndef checkUserActiveSubscription(userId: String, planId: String): Either[SubscriptionError, Boolean] =\n  if (planId == \"expired\") Left(PlanExpired)\n  else if (planId == \"inactive\") Left(PlanNotActive)\n  else Right(true)"}
{"id":"e967dde1-40fd-4b86-a7c7-4065ff426b6c","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def enforcePlanUpgrade(userTier: String): Unit = {\n  if (userTier != \"premium\") throw new RuntimeException(\"Upgrade required for this feature\")\n}"}
{"id":"a3441624-ad56-4a44-91ae-e7f96c53f152","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDivideDiscount(total: Double, divisor: Double): Try[Double] = Try {\n  total / divisor\n}"}
{"id":"967ad583-dfca-4e94-9028-f033701f68b1","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def decreasePlanPrice(planId: String, decreaseAmount: BigDecimal): Unit = {\n  try {\n    val minPrice: BigDecimal = 5\n    if (decreaseAmount < 0) throw new IllegalArgumentException(\"Decrease amount < 0\")\n    if (decreaseAmount > 50) throw new IllegalArgumentException(\"Decrease too large\")\n    // price calculation logic\n  } catch {\n    case ex: Throwable =>\n      println(\"Error in decreasing price: \" + ex.getMessage)\n  }\n}"}
{"id":"5dfb6572-3aea-4af6-a0c1-eeb38c467e40","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait PlanRetrievalError\ncase object PlanDatabaseUnavailable extends PlanRetrievalError\ncase object PlanUnknown extends PlanRetrievalError\n\ndef fetchPlanById(planId: String): Either[PlanRetrievalError, String] =\n  if (planId == \"fail\") Left(PlanDatabaseUnavailable)\n  else if (planId.nonEmpty) Right(planId)\n  else Left(PlanUnknown)"}
{"id":"75dd0eb9-9825-452b-bb1b-21ad70d584aa","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def addNewPricingPlan(name: String, monthlyFee: BigDecimal): String = {\n  if (name == null) throw new NullPointerException(\"Plan name required\")\n  if (monthlyFee <= 0) throw new IllegalArgumentException(\"Fee must be positive\")\n  \"PlanCreated\"\n}"}
{"id":"804fd4b7-d693-4e11-a100-c2da4fcfa306","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait FeatureError\ncase class FeatureUnavailable(feature: String) extends FeatureError\n\ncase class FeatureAccessResult(granted: Boolean)\n\ndef checkFeatureAccess(planId: String, feature: String): Either[FeatureError, FeatureAccessResult] =\n  if (feature == \"beta\") Left(FeatureUnavailable(feature))\n  else Right(FeatureAccessResult(true))"}
{"id":"85dcdbef-ab44-4f14-a0d2-8151f6c23d00","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def setTrialDays(planId: String, days: Int): Unit = {\n  if (days < 0) throw new IllegalArgumentException(\"Trial days cannot be negative\")\n  // persist logic\n}"}
{"id":"2990c927-5271-4eb8-abfa-f14934242844","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"sealed trait BillingCycleError\ncase object CycleAmountNegative extends BillingCycleError\n\ndef setBillingCycle(planId: String, months: Int): Either[BillingCycleError, Int] =\n  if (months <= 0) Left(CycleAmountNegative)\n  else Right(months)"}
{"id":"34c9e9ff-884e-423b-a68d-7fac8dd9d546","timestamp":1746099433334,"category":"throws","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def activateExclusivePlan(planId: String): Unit = {\n  if (planId == \"exclusive\") throw new IllegalStateException(\"Exclusive plan activation not allowed\")\n}"}
{"id":"f6a0afca-20bd-42f5-b120-6fc26cabab16","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class DeviceConnectionError(message: String)\ncase class SmartBulb(name: String, isOnline: Boolean)\ndef turnOnBulb(bulb: SmartBulb): Either[DeviceConnectionError, String] =\n  if bulb.isOnline then Right(s\"${bulb.name} is now ON\")\n  else Left(DeviceConnectionError(s\"${bulb.name} is offline\"))"}
{"id":"1cee0f90-3000-4a5f-9c0c-850023b01742","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class ThermostatOfflineException(msg: String) extends Exception(msg)\nclass Thermostat(val id: String, var connected: Boolean) {\n  def setTemperature(degrees: Int): Unit = {\n    if (!connected) throw new ThermostatOfflineException(\"Thermostat is offline.\")\n  }\n}\ndef updateThermostat(t: Thermostat, temp: Int): Unit = {\n  try t.setTemperature(temp)\n  catch case e: ThermostatOfflineException => println(e.getMessage)\n}"}
{"id":"6fe32969-6628-453a-b618-ecfcf3420775","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"import scala.util.Try\ncase class SecuritySystem(armed: Boolean)\ndef disarmSystem(system: SecuritySystem): Try[SecuritySystem] =\n  Try {\n    if !system.armed then throw new Exception(\"System already disarmed.\")\n    system.copy(armed = false)\n  }"}
{"id":"a965622a-5e6d-4fdc-8351-8b45b9899dab","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class DoorLockJamException(msg: String) extends Exception(msg)\nclass DoorLock(var locked: Boolean) {\n  def unlock(): Unit = {\n    if (!locked) throw new DoorLockJamException(\"Lock is already unlocked!\")\n    locked = false\n  }\n}\ndef unlockFrontDoor(lock: DoorLock): Unit =\n  try lock.unlock()\n  catch case ex: DoorLockJamException => println(ex.getMessage)"}
{"id":"34943091-1294-4224-970d-c8a7923e64f7","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait LightControlError\ncase object LightOffline extends LightControlError\ncase class UnknownLight(name: String) extends LightControlError\ncase class Light(name: String, online: Boolean)\ndef switchOffLight(light: Option[Light]): Either[LightControlError, String] =\n  light match\n    case None => Left(UnknownLight(\"Unknown\"))\n    case Some(l) if !l.online => Left(LightOffline)\n    case Some(l) => Right(s\"${l.name} switched off\")"}
{"id":"fbcf0482-0a86-45d8-8e13-840ac531f457","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SceneNotFoundException(msg: String) extends Exception(msg)\nclass SceneController(scenes: Map[String, List[String]]) {\n  def activate(scene: String): Unit = {\n    if (!scenes.contains(scene))\n      throw new SceneNotFoundException(s\"Scene $scene does not exist\")\n  }\n}\ndef activateMorningScene(controller: SceneController): Unit = {\n  try controller.activate(\"Morning Routine\")\n  catch case e: Exception => println(e.getMessage)\n}"}
{"id":"a21c5b9c-0650-4335-80a4-f57755205dd3","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"import scala.util.Try\ncase class Heater(state: String)\ndef startHeater(heater: Heater): Try[Heater] =\n  Try {\n    if heater.state == \"on\" then throw new Exception(\"Heater already on.\")\n    heater.copy(state = \"on\")\n  }"}
{"id":"a5a94602-aac6-4a5c-a8b2-4d89537b439d","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class InvalidScheduleTimeException(msg: String) extends Exception(msg)\nobject Scheduler {\n  def scheduleDevice(deviceId: String, time: Int): Unit = {\n    if (time < 0 || time > 23)\n      throw new InvalidScheduleTimeException(\"Invalid time for scheduling.\")\n  }\n}\ndef attemptSchedule(): Unit =\n  try Scheduler.scheduleDevice(\"blind1\", 25)\n  catch case ex: InvalidScheduleTimeException => println(\"Error: \" + ex.getMessage)"}
{"id":"9a7a58fe-d356-4662-b485-7d8ae95e40f4","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait DeviceOperationError\ncase object DeviceNotFound extends DeviceOperationError\ncase class PermissionDenied(user: String) extends DeviceOperationError\ncase class Device(id: String)\ndef performOperation(device: Option[Device], user: String): Either[DeviceOperationError, String] =\n  device match\n    case None => Left(DeviceNotFound)\n    case Some(_) if user != \"admin\" => Left(PermissionDenied(user))\n    case Some(d) => Right(s\"Operation on ${d.id} successful.\")"}
{"id":"0286db67-b0ad-467d-8ff5-9a0d0772fac7","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class CameraUnavailableException(msg: String) extends Exception(msg)\nclass SecurityCamera(val available: Boolean) {\n  def record(): Unit = {\n    if (!available) throw new CameraUnavailableException(\"Camera is unavailable.\")\n  }\n}\ndef startCameraRecording(cam: SecurityCamera): Unit =\n  try cam.record()\n  catch case e: CameraUnavailableException => println(\"Failed: \" + e.getMessage)"}
{"id":"e1a9f59b-6aee-4c1e-a36a-fe58a389a5af","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"import scala.util.Try\ncase class MotionSensor(battery: Int)\ndef checkSensorBattery(sensor: MotionSensor): Try[String] =\n  Try {\n    if sensor.battery < 10 then throw new RuntimeException(\"Low battery!\")\n    \"Battery level is sufficient.\"\n  }"}
{"id":"fea6e148-c4a5-4e3e-8888-747fb920299b","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class LightIntensityException(msg: String) extends Exception(msg)\nclass AdjustableLight(var intensity: Int) {\n  def setIntensity(level: Int): Unit = {\n    if (level < 0 || level > 100)\n      throw new LightIntensityException(\"Intensity must be 0-100\")\n    intensity = level\n  }\n}\ndef adjustKitchenLight(light: AdjustableLight): Unit = {\n  try light.setIntensity(120)\n  catch case e: Exception => println(e.getMessage)\n}"}
{"id":"645d7b61-b18d-4cf6-8cb9-832d8d35e5e0","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait ThermostatError\ncase object ThermostatDisconnected extends ThermostatError\ncase class ThermostatDevice(id: String, connected: Boolean)\ndef setThermostat(device: ThermostatDevice, temp: Int): Either[ThermostatError, String] =\n  if device.connected then Right(s\"Thermostat set to $temp °C\")\n  else Left(ThermostatDisconnected)"}
{"id":"2022f01a-cff9-4a8f-a38b-2f3611e15f40","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class PlugOverloadException(msg: String) extends Exception(msg)\nclass SmartPlug(var wattage: Int) {\n  def plugIn(deviceWatts: Int): Unit = {\n    if (deviceWatts > 1800)\n      throw new PlugOverloadException(\"Plug overload!\")\n    wattage += deviceWatts\n  }\n}\ndef connectToPlug(plug: SmartPlug, wattage: Int): Unit = {\n  try plug.plugIn(wattage)\n  catch case e: PlugOverloadException => println(e.getMessage)\n}"}
{"id":"cf97ea2d-a0a4-4dd1-8188-1dd3c0ac8b44","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class Blind(id: String, position: Int)\ndef setBlindPosition(blind: Blind, position: Int): Option[Blind] =\n  if position >= 0 && position <= 100 then Some(blind.copy(position = position))\n  else None"}
{"id":"f3a5b2d2-781b-4da3-a8c5-aa906f93de64","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class GarageDoorBlockedException(msg: String) extends Exception(msg)\nclass GarageDoor(var obstructed: Boolean) {\n  def open(): Unit = {\n    if (obstructed) throw new GarageDoorBlockedException(\"Garage door blocked!\")\n  }\n}\ndef openGarageDoor(door: GarageDoor): Unit = {\n  try door.open()\n  catch case e: GarageDoorBlockedException => println(\"Garage failed: \" + e.getMessage)\n}"}
{"id":"14609ef8-bbae-4c4d-8e18-f29431c91a6c","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait SwitchError\ncase object SwitchNotResponding extends SwitchError\ncase class Switch(id: String, responsive: Boolean)\ndef toggleSwitch(s: Switch): Either[SwitchError, String] =\n  if s.responsive then Right(s\"Switch ${s.id} toggled.\")\n  else Left(SwitchNotResponding)"}
{"id":"27669333-cda9-47e6-be04-041a22353b1f","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class AlarmAlreadyArmedException(msg: String) extends Exception(msg)\nclass Alarm(var armed: Boolean) {\n  def arm(): Unit = {\n    if (armed) throw new AlarmAlreadyArmedException(\"Alarm already armed.\")\n    armed = true\n  }\n}\ndef safeArm(alarm: Alarm): Unit =\n  try alarm.arm()\n  catch case e: AlarmAlreadyArmedException => println(\"Alarm: \" + e.getMessage)"}
{"id":"7e5a96b6-6665-4416-8a51-5bc3aacad251","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class Speaker(id: String, connected: Boolean)\ndef playAlarmSound(speaker: Speaker): Option[String] =\n  if speaker.connected then Some(\"Alarm sound played.\")\n  else None"}
{"id":"2138ed93-4a8e-4570-9dba-4dbad5266b9b","timestamp":1746099458731,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SensorReadException(msg: String) extends Exception(msg)\nclass TemperatureSensor(val id: String, val available: Boolean) {\n  def readTemperature(): Int = {\n    if (!available) throw new SensorReadException(\"Cannot read temperature.\")\n    25\n  }\n}\ndef fetchTemperature(sensor: TemperatureSensor): Option[Int] = {\n  try Some(sensor.readTemperature())\n  catch case _: SensorReadException => None\n}"}
{"id":"4dc45189-fb70-439a-8ffd-cd86283e66e5","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object ThermostatController {\n  def setTemperature(target: Int): Unit = {\n    if (target < 10 || target > 30) {\n      throw new IllegalArgumentException(\"Temperature out of range\")\n    }\n    // code to communicate with device\n  }\n  def main(args: Array[String]): Unit = {\n    try {\n      setTemperature(40)\n    } catch {\n      case e: IllegalArgumentException => println(\"Error: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"02705d71-9033-407e-b4c4-d4d0d5318e40","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class LightSwitch {\n  def turnOn(): Unit = {\n    if (math.random() < 0.2) throw new RuntimeException(\"LightBulbFailure\")\n    println(\"Light turned ON\")\n  }\n}\nobject HomeLighting {\n  def main(args: Array[String]): Unit = {\n    val switch = new LightSwitch\n    try {\n      switch.turnOn()\n    } catch {\n      case e: Exception => println(\"Could not turn on light: \" + e)\n    }\n  }\n}"}
{"id":"00aca86d-a31b-429b-bbc9-a74166ea56e6","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object DoorLock {\n  def unlock(code: String): Unit = {\n    if (code != \"1234\") throw new SecurityException(\"Invalid code\")\n    println(\"Door unlocked\")\n  }\n}\nobject LockApp {\n  def main(args: Array[String]): Unit = {\n    try {\n      DoorLock.unlock(\"0000\")\n    } catch {\n      case e: SecurityException => println(\"Unlock failed: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"8d78c53a-cf88-4aa1-9237-c9073d5b5c5a","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmartPlug {\n  def activate(outletId: Int): Unit = {\n    if (outletId < 0) throw new IllegalArgumentException(\"Invalid outletId\")\n    println(s\"Outlet $outletId activated\")\n  }\n}\nobject PlugControl {\n  def activatePlug(): Unit = {\n    val plug = new SmartPlug\n    try {\n      plug.activate(-3)\n    } catch {\n      case e: IllegalArgumentException => println(e.getMessage)\n    }\n  }\n}"}
{"id":"6f7a1155-2d4a-4996-9a09-c59a72e16331","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object CameraController {\n  def captureSnapshot(): String = {\n    if (math.random() < 0.5)\n      throw new RuntimeException(\"CameraUnavailableException\")\n    \"SnapshotCaptured\"\n  }\n  def main(args: Array[String]): Unit = {\n    try {\n      println(captureSnapshot())\n    } catch {\n      case e: RuntimeException => println(\"Error: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"c9f2e383-a2bb-4ebd-b0a9-4b44950e7d3a","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class TemperatureSensor {\n  def readTemperature(): Double = {\n    if (math.random() > 0.7) throw new Exception(\"SensorNotResponding\")\n    22.0 + math.random() * 5.0\n  }\n}\nobject SensorApp {\n  def main(args: Array[String]): Unit = {\n    val sensor = new TemperatureSensor\n    try {\n      println(sensor.readTemperature())\n    } catch {\n      case e: Exception => println(\"Sensor error\")\n    }\n  }\n}"}
{"id":"45169d1d-20f0-4786-a471-1a8fc7340dd1","timestamp":1746099483576,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object GarageDoorOpener {\n  def open(garageId: String): Unit = {\n    if (garageId.isBlank()) throw new Exception(\"GarageIdMissingException\")\n    println(s\"Garage $garageId opened\")\n  }\n  def main(args: Array[String]): Unit = {\n    try {\n      open(\"\")\n    } catch {\n      case e: Exception => println(\"Failed to open garage: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"224919e1-363f-4b4d-bb21-61cf5aae06b9","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SprinklerValve {\n  def startZone(zone: Int): Unit = {\n    if (zone < 1 || zone > 8)\n      throw new RuntimeException(\"ZoneOutOfBounds\")\n    println(s\"Sprinkler zone $zone running\")\n  }\n}\nobject Irrigation {\n  def main(args: Array[String]): Unit = {\n    val valve = new SprinklerValve\n    try {\n      valve.startZone(0)\n    } catch {\n      case e: Exception => println(\"Sprinkler error: \" + e)\n    }\n  }\n}"}
{"id":"fb07a3c0-b8a8-49c0-866f-92e1578f2ccf","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object SmartVacuum {\n  def startCleaning(room: String): Unit = {\n    if (room.trim.isEmpty) throw new Exception(\"NoRoomSpecified\")\n    println(s\"Cleaning started in $room\")\n  }\n  def tryCleaning(): Unit = {\n    try {\n      startCleaning(\"\")\n    } catch {\n      case e: Exception => println(e.getMessage)\n    }\n  }\n}"}
{"id":"cf550a51-c6f5-4972-b61e-f1166249e0fb","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmartCurtain {\n  def closeCurtain(): Unit = {\n    throw new RuntimeException(\"Curtain motor stuck\")\n  }\n}\nobject CurtainControl {\n  def main(args: Array[String]): Unit = {\n    val curtain = new SmartCurtain\n    try {\n      curtain.closeCurtain()\n    } catch {\n      case e: RuntimeException => println(\"Curtain error occurred\")\n    }\n  }\n}"}
{"id":"38dbad43-705a-4f4a-a887-48bb28c07d92","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait DeviceCommandError\ncase object InvalidStateError extends DeviceCommandError\ncase object TimeoutError extends DeviceCommandError\n\ndef setLightBrightness(level: Int): Either[DeviceCommandError, String] =\n  if (level < 0 || level > 100) Left(InvalidStateError)\n  else Right(s\"Brightness set to $level\")"}
{"id":"710cb1ee-c785-4998-a55a-a4e6e62098c8","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait ThermostatError\ncase object RangeError extends ThermostatError\ncase object DeviceUnreachable extends ThermostatError\nimport scala.util.Try\n\ndef updateThermostat(temp: Int): Try[String] =\n  Try {\n    if (temp < 5 || temp > 35) throw new Exception(\"OutOfRange\")\n    s\"Thermostat set to $temp\"\n  }"}
{"id":"1688c8e6-b418-4009-b32b-0dccad9d592f","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait LockActionError\ncase object WrongPin extends LockActionError\ncase object LockMalfunction extends LockActionError\n\ndef tryUnlock(pin: String): Either[LockActionError, String] =\n  if (pin == \"0000\") Right(\"Unlocked\")\n  else Left(WrongPin)"}
{"id":"0712868c-e659-429c-a665-adb153281488","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait DeviceConnectError\ncase object ConnectionLost extends DeviceConnectError\ncase object DeviceBusy extends DeviceConnectError\n\ndef connectDevice(ip: String): Either[DeviceConnectError, String] =\n  if (ip == \"\") Left(ConnectionLost)\n  else Right(s\"Device at $ip connected\")"}
{"id":"d8f61fce-c32b-4f18-9c23-6f531a97ab96","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait CameraCaptureError\ncase object CameraOffline extends CameraCaptureError\n\ndef captureImage(isOnline: Boolean): Option[String] =\n  if (isOnline) Some(\"ImageCaptured\")\n  else None"}
{"id":"c0ce2140-7193-4641-9bc3-2eed25672cc9","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait SensorError\ncase object NoReading extends SensorError\ncase object FaultySensor extends SensorError\n\ndef getHumidity(reading: Option[Double]): Either[SensorError, Double] =\n  reading.toRight(NoReading)"}
{"id":"877a1d7b-1de1-4950-9d1a-f7e18dd917d4","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait PlugError\ncase object PlugNotFound extends PlugError\ncase object OutletBusy extends PlugError\n\ndef activateSmartPlug(plugId: String): Either[PlugError, String] =\n  if (plugId == \"ABC123\") Right(\"Plug activated\")\n  else Left(PlugNotFound)"}
{"id":"91899c3c-dd71-4469-aa33-461f9c0dbe3d","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait GarageError\ncase object GarageObstructed extends GarageError\ncase object GarageNotFound extends GarageError\n\ndef openGarage(garageNumber: Int): Either[GarageError, String] =\n  if (garageNumber < 1) Left(GarageNotFound)\n  else Right(\"Garage opened\")"}
{"id":"6375cbdd-45d7-44e0-9ee2-d399cec36610","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait VacuumError\ncase object BatteryLow extends VacuumError\ncase object RoomUnknown extends VacuumError\n\ndef callVacuum(room: String): Either[VacuumError, String] =\n  if (room.toLowerCase == \"kitchen\") Right(\"Vacuum is on its way\")\n  else Left(RoomUnknown)"}
{"id":"412cec2a-4a90-40f7-a9f0-7f1fb3d432b1","timestamp":1746099483577,"category":"throws","topicUsed":"Smart home device control","isIdiomatic":true,"code":"sealed trait CurtainError\ncase object MotorFailure extends CurtainError\ncase object CurtainJammed extends CurtainError\nimport scala.util.Try\n\ndef safeCloseCurtain(isJammed: Boolean): Try[String] =\n  Try {\n    if (isJammed) throw new Exception(\"Curtain is jammed\")\n    \"Curtain closed\"\n  }"}
{"id":"15cd0a87-e133-4658-81e4-c0aa856d2857","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class Driver(id: String, available: Boolean)\ncase class RiderRequest(id: String, location: String)\n\ndef assignDriver(request: RiderRequest, drivers: List[Driver]): Option[Driver] =\n  drivers.find(_.available)\n"}
{"id":"6412c823-fa4a-40cd-aa9f-9ae281f41aec","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"case class RideRequest(id: String)\nclass NoDriverAvailableException(msg: String) extends Exception(msg)\n\ndef assignDriverException(request: RideRequest, drivers: List[String]): String =\n  if drivers.isEmpty then throw new NoDriverAvailableException(\"No drivers available\")\n  else drivers.head\n"}
{"id":"27395bac-6857-49dd-b4ee-d0ffa04f17d5","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait DispatchError\ncase object NoDriversNearby extends DispatchError\ncase class RideAssignment(driverId: String)\n\ndef dispatchRide(location: String, availableDrivers: List[String]): Either[DispatchError, RideAssignment] =\n  availableDrivers.headOption\n    .map(id => Right(RideAssignment(id)))\n    .getOrElse(Left(NoDriversNearby))\n"}
{"id":"4de2eec4-7ead-4e64-838d-5f6993e08220","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class AssignmentError(msg: String) extends RuntimeException(msg)\n\ndef matchRiders(driverId: String, riderIds: List[String]): String =\n  try {\n    if riderIds.isEmpty then throw new AssignmentError(\"No riders to match\")\n    s\"Driver $driverId assigned to rider ${riderIds.head}\"\n  } catch {\n    case e: AssignmentError => \"Assignment failed: \" + e.getMessage\n  }\n"}
{"id":"a201301e-9ef4-47ae-9bcf-39c01913ecfe","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"import scala.util.Try\ncase class Dispatch(driverId: String, riderId: String)\n\ndef safeDispatch(driver: Option[String], rider: Option[String]): Try[Dispatch] =\n  Try {\n    val d = driver.get\n    val r = rider.get\n    Dispatch(d, r)\n  }\n"}
{"id":"828cc6d5-32e2-4f0f-9654-2edc304b041d","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class RiderNotFoundException extends Exception(\"Rider not found\")\n\ndef fetchRiderInfo(riderId: String): String =\n  if riderId == \"\" then throw new RiderNotFoundException\n  else \"Rider Info\"\n"}
{"id":"3f139b98-2b67-4650-86f6-5eaf9deda6e6","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait RideOfferError\ncase object RequestTimedOut extends RideOfferError\ncase class Offer(driverId: String)\n\ndef makeRideOffer(driverId: Option[String]): Either[RideOfferError, Offer] =\n  driverId.map(id => Right(Offer(id))).getOrElse(Left(RequestTimedOut))\n"}
{"id":"25b2d0d7-ba58-4c70-b002-5b3b847d5602","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def computeFare(distance: Double): Double =\n  if distance < 0 then throw new IllegalArgumentException(\"Negative distance\")\n  else 2.0 + distance * 1.2\n"}
{"id":"b2b14bab-e603-4d16-bd9d-a1dfe4278766","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait RiderAssignmentError\ncase object InvalidPickupLocation extends RiderAssignmentError\ncase class DriverAssigned(driverId: String)\n\ndef assignRider(pickup: String, driver: Option[String]): Either[RiderAssignmentError, DriverAssigned] =\n  if pickup.isEmpty then Left(InvalidPickupLocation)\n  else driver match\n    case Some(id) => Right(DriverAssigned(id))\n    case None => Left(InvalidPickupLocation)\n"}
{"id":"13f054f4-0a5d-4f6b-964f-c6c4b137147b","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class SurgePricingException extends Exception(\"Surge pricing error\")\n\ndef getSurgeMultiplier(zone: String): Double =\n  zone match {\n    case \"busy\" => 2.0\n    case \"normal\" => 1.0\n    case _ => throw new SurgePricingException\n  }\n"}
{"id":"2211c169-4459-4650-8a6a-5d98f5d0ee63","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"import scala.util.Try\ndef parseVehicleType(vehicle: String): Try[String] =\n  Try {\n    if vehicle == \"\" then throw new IllegalArgumentException(\"Vehicle type required\")\n    vehicle.capitalize\n  }\n"}
{"id":"24bdf1d0-bd75-44d2-b726-6f9d8785b9c1","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def scheduleRide(time: Int): String =\n  try {\n    if time < 0 then throw new IllegalArgumentException(\"Time cannot be negative\")\n    s\"Ride scheduled at $time\"\n  } catch {\n    case e: IllegalArgumentException => \"Scheduling error: \" + e.getMessage\n  }\n"}
{"id":"217fea8f-fadc-4160-9a86-6e16c1949a47","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait CancelError\ncase object RideAlreadyStarted extends CancelError\ncase object CancellationSuccess\n\ndef cancelRide(status: String): Either[CancelError, CancellationSuccess.type] =\n  if status == \"ongoing\" then Left(RideAlreadyStarted)\n  else Right(CancellationSuccess)\n"}
{"id":"3de6cdbd-eacf-41aa-a5bb-cad429a1e95b","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def findNearestDriver(location: String, driverIds: List[String]): String =\n  if driverIds.isEmpty then throw new RuntimeException(\"No drivers near $location\")\n  else driverIds.head\n"}
{"id":"284ee58c-3141-47f4-8d21-099704b10d76","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"import scala.util.Try\ncase class Matching(drivers: List[String], rider: String)\ndef tryMatch(drivers: List[String], rider: String): Try[Matching] =\n  Try {\n    require(drivers.nonEmpty, \"Drivers pool empty\")\n    Matching(drivers, rider)\n  }\n"}
{"id":"89b1e5aa-9731-48e7-9534-e5868128ad8f","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class DriverUnavailable extends Exception(\"Driver unavailable\")\ndef assignDriverOrFail(driverAvailable: Boolean): String =\n  if !driverAvailable then throw new DriverUnavailable\n  else \"Driver assigned\"\n"}
{"id":"cfe758d0-b8e6-4ab8-89c9-0f7649ebda48","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class PaymentError(reason: String)\ncase object PaymentProcessed\n\ndef processPayment(fare: Double): Either[PaymentError, PaymentProcessed.type] =\n  if fare <= 0 then Left(PaymentError(\"Invalid fare\"))\n  else Right(PaymentProcessed)\n"}
{"id":"69a9b4af-7a74-43a9-b237-cc0cc0ca16fc","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getDispatchInfo(dispatchId: String): String =\n  try {\n    if dispatchId.isEmpty then throw new NullPointerException(\"Missing dispatchId\")\n    s\"Dispatch Info for $dispatchId\"\n  } catch {\n    case e: Exception => s\"Error: ${e.getMessage}\"\n  }\n"}
{"id":"82a0c7b5-5455-4911-978f-cffbf8876665","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait StatusError\ncase object UnknownStatus extends StatusError\n\ndef updateRideStatus(status: String): Either[StatusError, String] =\n  status match\n    case \"started\" | \"completed\" => Right(status)\n    case _ => Left(UnknownStatus)\n"}
{"id":"55442d5f-cc52-46f6-8838-3e9e7177fe60","timestamp":1746099503990,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getRouteDistance(routeId: String): Double =\n  if routeId == \"invalid\" then throw new IllegalArgumentException(\"Invalid route\")\n  10.5\n"}
{"id":"b87251b1-a6bb-4212-b25d-f247c5d19e0d","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"case class DriverUnavailableException(driverId: String) extends Exception(s\"Driver $driverId is unavailable\")\ndef findAvailableDriver(drivers: List[String]): String =\n  if drivers.nonEmpty then drivers.head\n  else throw new DriverUnavailableException(\"unknown\")"}
{"id":"8796c906-10a9-472e-9385-a86375c2aba3","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def assignRiderToDriver(riderId: String, driverId: String): Unit =\n  try\n    if driverId.isEmpty then throw new Exception(\"Driver ID cannot be empty\")\n    println(s\"Rider $riderId assigned to driver $driverId\")\n  catch\n    case e: Exception =>\n      println(\"Assignment failed: \" + e.getMessage)"}
{"id":"09b30769-41ac-46c7-a21e-473973b9d427","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class RideNotFoundException(rideId: String) extends Exception(s\"Ride $rideId not found\")\ndef fetchRideStatus(rideId: String): String =\n  if rideId == \"ride123\" then \"InProgress\"\n  else throw new RideNotFoundException(rideId)"}
{"id":"c3e9da35-1d7d-432c-a1de-8cf39fa909b8","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"object DispatchService:\n  def completeDispatch(dispatchId: String): Unit =\n    try\n      if dispatchId == \"\" then throw new Exception(\"Invalid dispatch id\")\n      println(s\"Dispatch $dispatchId completed\")\n    catch case e: Exception => println(e.getMessage)"}
{"id":"ae1fb283-acee-4990-be30-54d679112270","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def calculateFare(distance: Double): Double =\n  if distance < 0 then throw new IllegalArgumentException(\"Distance cannot be negative\")\n  else 2.0 + distance * 1.5"}
{"id":"28d695a2-c4d0-4dd0-9066-2ca78b09427c","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"object CancellationHandler:\n  def cancelRide(rideId: String): Boolean =\n    try\n      if rideId.length < 5 then throw new Exception(\"Ride ID invalid\")\n      println(s\"Ride $rideId cancelled\")\n      true\n    catch case _: Exception => false"}
{"id":"46cbb41d-00eb-4402-96ea-0fc20039b226","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class InvalidLocationException(msg: String) extends Exception(msg)\ndef verifyPickupLocation(location: String): Unit =\n  if location.trim.isEmpty then throw new InvalidLocationException(\"Pickup location required\")"}
{"id":"ae46edd4-c8c7-4cf2-9805-c66f60b774c3","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"object PaymentProcessor:\n  def processPayment(riderId: String, amount: Double): String =\n    try\n      if amount <= 0 then throw new Exception(\"Invalid payment amount\")\n      s\"Payment of $$amount successful for rider $riderId\"\n    catch\n      case e: Exception => \"Payment failed: \" + e.getMessage"}
{"id":"3b0d64bf-4564-4476-bfbb-29c906aa4967","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def updateDriverStatus(driverId: String, status: String): Unit =\n  try\n    if status != \"available\" && status != \"busy\" then throw new Exception(\"Unknown status\")\n    println(s\"Driver $driverId is now $status\")\n  catch case e: Exception => println(e.getMessage)"}
{"id":"c368084e-2970-47c4-bc20-d23256738eaf","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def requestRide(riderId: String, location: String): String =\n  if location == \"blocked\" then throw new RuntimeException(\"Service not available at this location\")\n  else s\"Ride requested by $riderId at $location\""}
{"id":"350649a1-420e-4c49-ab8f-70d4556a450f","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait DispatchError\ncase object NoDriversAvailable extends DispatchError\ncase object InvalidPickup extends DispatchError\n\ndef assignDispatch(pickup: String, drivers: List[String]): Either[DispatchError, String] =\n  if !drivers.exists(_.nonEmpty) then Left(NoDriversAvailable)\n  else if pickup.isEmpty then Left(InvalidPickup)\n  else Right(drivers.head)"}
{"id":"eb3153d8-aa71-4dc3-8314-743dbe395de6","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class RiderNotFoundError(riderId: String)\ndef getRiderInfo(riderId: String): Option[String] =\n  val db = Map(\"r100\" -> \"Alice\", \"r101\" -> \"Marc\")\n  db.get(riderId)"}
{"id":"0b25ac6f-54b3-4767-856e-675bca4787b5","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef connectToDispatchService(url: String): Try[String] =\n  Try {\n    if url == \"down\" then throw new Exception(\"Service unavailable\")\n    else s\"Connected to $url\"\n  }"}
{"id":"672461ea-247b-41d4-9d02-aff27c8610ae","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait RideStatusError\ncase object RideNotActive extends RideStatusError\n\ndef getRideStatus(rideId: String, activeRides: Set[String]): Either[RideStatusError, String] =\n  if activeRides.contains(rideId) then Right(\"Active\")\n  else Left(RideNotActive)"}
{"id":"cd07b703-e104-4279-800e-8196d589c333","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class PaymentError(msg: String)\ndef validatePaymentAmount(amount: Double): Either[PaymentError, Double] =\n  if amount <= 0 then Left(PaymentError(\"Amount must be positive\"))\n  else Right(amount)"}
{"id":"13ea935d-0326-40a8-87a9-cd48fff44778","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class LocationError(reason: String)\ndef safeParseLocation(input: String): Either[LocationError, (Double, Double)] =\n  input.split(\",\") match\n    case Array(lat, lng) =>\n      Right((lat.toDouble, lng.toDouble))\n    case _ =>\n      Left(LocationError(\"Invalid input format\"))"}
{"id":"22e63af7-590c-468b-afc4-7674c103c31e","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def findBestDriver(drivers: List[String]): Option[String] =\n  drivers.find(_.startsWith(\"driver_\"))"}
{"id":"817fcc54-daa4-4ca3-b52d-3c400fd52f93","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def safeCalculateFare(distance: Double): Option[Double] =\n  Option.when(distance >= 0)(2.5 + distance * 1.2)"}
{"id":"e2db6df0-f827-4e58-a132-3d9ae5213773","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"sealed trait CancelError\ncase object CancelNotAllowed extends CancelError\n\ndef tryCancelRide(status: String): Either[CancelError, String] =\n  if status == \"in_progress\" then Left(CancelNotAllowed)\n  else Right(\"Ride cancelled successfully\")"}
{"id":"e0dd8e2b-6678-49c9-84e7-d73172709ed3","timestamp":1746099523766,"category":"throws","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"import scala.util.Try\ndef scheduleDispatch(time: String): Try[String] =\n  Try {\n    if time.isEmpty then throw new Exception(\"No time specified\")\n    else s\"Dispatch scheduled at $time\"\n  }"}
{"id":"01fc3013-8250-4874-ae6b-0a6a8b2ed957","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"case class FlightNotFoundException(flightNumber: String) extends Exception(s\"Flight $flightNumber not found.\")\n\ndef findFlight(flightNumber: String): Flight = {\n  if flightNumber != \"AB123\" then throw new FlightNotFoundException(flightNumber)\n  Flight(\"AB123\", \"NYC\", \"LAX\")\n}"}
{"id":"286dead6-d769-4c02-aa56-52a40c63a2d9","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def parsePassengerAge(ageString: String): Int = {\n  try {\n    ageString.toInt\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Invalid age format.\")\n  }\n}"}
{"id":"aa7eb5b9-5a2e-4401-9f01-8e63cd630229","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"object BookingService {\n  def cancelBooking(bookingId: String): Unit = {\n    try {\n      if bookingId.isEmpty then throw new Exception(\"Booking ID is required.\")\n      // perform cancellation\n    } catch {\n      case e: Exception => println(\"Cancellation failed: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"03905d31-c939-410f-8012-516183bd0c20","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class TicketPriceCalculator {\n  def calculatePrice(age: Int): Double = {\n    if age < 0 then throw new IllegalArgumentException(\"Age cannot be negative.\")\n    else if age < 12 then 100.0\n    else 200.0\n  }\n}"}
{"id":"c54ac807-8967-4557-aede-527915df5da0","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getPassengerByEmail(email: String): Passenger = {\n  if email == \"\" then throw new Exception(\"Email not specified.\")\n  Passenger(\"John Doe\", email)\n}"}
{"id":"b283b410-94bd-4d57-b007-bf7cf07a791f","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"object PaymentProcessor {\n  def processPayment(amount: Double): Unit = {\n    if amount <= 0 then throw new RuntimeException(\"Payment amount must be positive.\")\n    // process payment\n  }\n}"}
{"id":"0c044e83-a9da-4ce7-b4b4-202327a3c637","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def issueTicket(flight: Flight, seat: String): Ticket = {\n  try {\n    if seat == \"\" then throw new Exception(\"Seat selection required.\")\n    Ticket(flight, seat)\n  } catch {\n    case e: Exception => throw e\n  }\n}"}
{"id":"05f4bd1d-4595-4e56-a7ed-08491fa8636b","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class BoardingPassPrinter {\n  def printPass(ticket: Ticket): Unit = {\n    try {\n      if ticket.seat == \"\" then throw new Exception(\"Seat missing on ticket.\")\n      println(s\"Boarding pass for seat ${ticket.seat}\")\n    } catch {\n      case e: Exception => println(\"Printing failed: \" + e.getMessage)\n    }\n  }\n}"}
{"id":"64597b37-b226-4e86-b9d9-4e81ded7fd5a","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def updateFlightStatus(flightId: String, status: String): Unit = {\n  if !(Set(\"OnTime\", \"Delayed\", \"Cancelled\").contains(status)) then\n    throw new IllegalArgumentException(\"Invalid status.\")\n  // update logic\n}"}
{"id":"a4e7cf6d-ef17-489c-a75a-749d4a3eb6bf","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def checkInPassenger(passenger: Passenger, flight: Flight): Unit = {\n  try {\n    if flight.status == \"Departed\" then throw new Exception(\"Check-in closed.\")\n    println(s\"Check-in successful for ${passenger.name}\")\n  } catch {\n    case e: Exception => println(\"Check-in error: \" + e.getMessage)\n  }\n}"}
{"id":"70f7d464-5b87-4af9-bb69-1d758e4b9892","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait TicketingError\ncase object FlightDoesNotExist extends TicketingError\ncase object SeatUnavailable extends TicketingError\n\ncase class Flight(num: String, origin: String, dest: String)\n\n def bookSeat(flightNumber: String, seat: String): Either[TicketingError, String] = {\n  if flightNumber != \"AB123\" then Left(FlightDoesNotExist)\n  else if seat != \"12A\" then Left(SeatUnavailable)\n  else Right(\"Seat booked\")\n}"}
{"id":"a5d27d5e-0ce4-4828-adbb-b5bfb7995736","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait PassengerValidationError\ncase object EmailInvalid extends PassengerValidationError\n\ncase class Passenger(name: String, email: String)\n\ndef validatePassengerEmail(email: String): Either[PassengerValidationError, Passenger] = {\n  if email.contains(\"@\") then Right(Passenger(\"Alice\", email))\n  else Left(EmailInvalid)\n}"}
{"id":"ca77d9c3-03a7-44ad-bf6a-dccc7145ac46","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def calculateFareOptional(discountCode: Option[String]): Option[Double] = {\n  discountCode match {\n    case Some(\"SAVE10\") => Some(180.0)\n    case Some(_)        => Some(200.0)\n    case None           => None\n  }\n}"}
{"id":"8ae32003-e7d2-41a6-8f6b-9c2b9bbe4fb8","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef issueTicketSafe(flight: Flight, seat: String): Try[Ticket] = {\n  Try {\n    require(seat.nonEmpty, \"Seat required\")\n    Ticket(flight, seat)\n  }\n}"}
{"id":"6351106c-4273-4320-9267-0163631fa997","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\n\ncase class Payment(amount: Double)\n\ndef processPaymentEither(amount: Double): Either[PaymentError, Payment] = {\n  if amount < 100 then Left(InsufficientFunds)\n  else Right(Payment(amount))\n}"}
{"id":"26345bcd-e3dc-47d0-bd22-6c2d2ed3ef1e","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def findBooking(reference: String): Option[String] = {\n  Some(\"BOOK123\").filter(_ == reference)\n}"}
{"id":"e247a7ad-f11b-43c7-a027-1be2ed2267af","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def safePassengerAge(ageString: String): Option[Int] =\n  scala.util.Try(ageString.toInt).toOption.filter(_ > 0)"}
{"id":"9c6c1c6f-f8a6-4a4f-b0b8-2d4ea37a30fb","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait BoardingError\ncase object AlreadyBoarded extends BoardingError\n\ncase class Passenger(name: String, hasBoarded: Boolean)\n\ndef boardPassenger(passenger: Passenger): Either[BoardingError, String] =\n  if passenger.hasBoarded then Left(AlreadyBoarded)\n  else Right(\"Boarded successfully\")"}
{"id":"883012fc-0684-459d-a909-aeead7a20469","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def updateFlightStatusTry(status: String): scala.util.Try[String] =\n  scala.util.Try {\n    require(Set(\"OnTime\", \"Delayed\", \"Cancelled\").contains(status), \"Invalid status\")\n    \"Status updated\"\n  }"}
{"id":"c1e9bba1-9d9a-4b81-b100-12b9a918afc6","timestamp":1746099539933,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def checkSeatAvailability(seatNumber: String): Option[String] =\n  if seatNumber == \"1A\" then Some(\"Available\") else None"}
{"id":"5466807c-96cf-49e8-8a55-faa605eaef27","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"case class PassengerNotFoundException(passengerId: String) extends Exception(s\"Passenger $passengerId not found\")\n\ndef findPassengerById(passengerId: String): Passenger = {\n  if (passengerId != \"P001\") throw new PassengerNotFoundException(passengerId)\n  Passenger(\"P001\", \"Alice Smith\")\n}"}
{"id":"437daaf6-f027-4b82-8a3a-fdc2240285f5","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"object FlightCancellationHandler {\n  def cancelFlight(flightNumber: String): Unit = {\n    if (flightNumber.isEmpty) throw new IllegalArgumentException(\"Flight number cannot be empty\")\n    println(s\"Flight $flightNumber cancelled.\")\n  }\n}"}
{"id":"5dbd7ed7-667e-45e7-bda5-02d0e0ea66e1","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def issueTicket(passengerId: String, flightCode: String): Ticket = {\n  try {\n    if (passengerId.isBlank || flightCode.isBlank) {\n      throw new Exception(\"Missing passenger or flight information\")\n    }\n    Ticket(passengerId, flightCode, \"A1\")\n  } catch {\n    case ex: Exception =>\n      println(s\"Error issuing ticket: ${ex.getMessage}\")\n      null\n  }\n}"}
{"id":"692b9cbf-3528-40bb-81df-3fe72c5abed6","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class InvalidBookingReferenceException(ref: String)\n  extends Exception(s\"Invalid booking reference: $ref\")\n\ndef validateBookingReference(ref: String): Boolean = {\n  if (ref.length != 8) throw new InvalidBookingReferenceException(ref)\n  true\n}"}
{"id":"413560f9-2cf2-4d01-9297-1219b0a5f76f","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"object PaymentProcessor {\n  def chargeCard(cardNumber: String, amount: Double): Boolean = {\n    if (amount <= 0)\n      throw new Exception(\"Amount must be positive\")\n    if (cardNumber.length != 16)\n      throw new Exception(\"Invalid credit card number\")\n    true\n  }\n}"}
{"id":"f4f656ba-6093-489f-ab40-ec6c6eca066a","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def assignSeat(ticket: Ticket, seatNumber: String): Ticket = {\n  try {\n    if (seatNumber == \"\") throw new Exception(\"Seat number required\")\n    ticket.copy(seat = seatNumber)\n  } catch {\n    case _: Exception =>\n      Ticket(ticket.passengerId, ticket.flightCode, \"Unassigned\")\n  }\n}"}
{"id":"8ed0a9f1-b4d1-48cf-8dcc-1d809b9454d4","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"object CheckInValidator {\n  def checkIn(passengerId: String, flightCode: String): Boolean = {\n    if (passengerId == \"blocked\")\n      throw new Exception(\"Passenger blacklisted\")\n    true\n  }\n}"}
{"id":"ab6872f4-6c17-47a1-be3a-417e5745e480","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getFlightStatus(flightNumber: String): String = {\n  try {\n    if (flightNumber == \"\") throw new RuntimeException(\"No flight number provided\")\n    \"On Time\"\n  } catch {\n    case ex: Exception => \"Unknown status\"\n  }\n}"}
{"id":"d58cefcf-512a-4701-b9d8-dbf1ac5fbd77","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class OverbookingException(flight: String) extends Exception(s\"Flight $flight is overbooked\")\n\ndef bookSeat(flightCode: String, seatsAvailable: Int): String = {\n  if (seatsAvailable <= 0)\n    throw new OverbookingException(flightCode)\n  \"Seat booked successfully\"\n}"}
{"id":"151bfee8-4103-422c-b898-1d5fab731083","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def updatePassengerDetails(passenger: Passenger, field: String, value: String): Passenger = {\n  if (field != \"name\") {\n    throw new Exception(\"Only 'name' field can be updated\")\n  }\n  passenger.copy(name = value)\n}"}
{"id":"77822351-8dad-47b8-8e4c-82c6ce7d2058","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait TicketingError\ncase object NoSeatsAvailable extends TicketingError\ncase object PaymentFailed extends TicketingError\n\ncase class Ticket(passengerId: String, flightCode: String, seat: String)\n\ndef bookTicket(passengerId: String, flightCode: String, seatsLeft: Int, paymentOk: Boolean): Either[TicketingError, Ticket] = {\n  if (seatsLeft < 1) Left(NoSeatsAvailable)\n  else if (!paymentOk) Left(PaymentFailed)\n  else Right(Ticket(passengerId, flightCode, \"12C\"))\n}"}
{"id":"1d0fb10a-031e-4c1a-8c5c-abad4c818468","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait CheckInError\ncase object InvalidBoardingPass extends CheckInError\ncase object SecurityAlert extends CheckInError\n\ndef performCheckIn(boardingPass: Option[String], securityPassed: Boolean): Either[CheckInError, String] = {\n  boardingPass match {\n    case None => Left(InvalidBoardingPass)\n    case Some(_) if !securityPassed => Left(SecurityAlert)\n    case Some(bp) => Right(s\"Checked in with boarding pass $bp\")\n  }\n}"}
{"id":"cc63bd43-fdf9-4681-a6dd-fc17eb21f6b4","timestamp":1746099561880,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def calculateFare(base: Double, discount: Option[Double]): Option[Double] = {\n  discount match {\n    case Some(d) if d >= 0 && d <= 1 => Some(base * (1 - d))\n    case None => Some(base)\n    case _ => None\n  }\n}"}
{"id":"e09f6b2b-f1b2-4fcf-9831-0981598e6c28","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait PassengerLookupError\ncase object PassengerRecordNotFound extends PassengerLookupError\n\ncase class Passenger(passengerId: String, name: String)\n\ndef findPassenger(passengerId: String): Either[PassengerLookupError, Passenger] = {\n  if (passengerId == \"P123\") Right(Passenger(\"P123\", \"John Doe\"))\n  else Left(PassengerRecordNotFound)\n}"}
{"id":"6f1e4177-e952-48bb-a756-6cbb800dd2af","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseFlightTime(time: String): Try[Int] = Try {\n  time.split(\":\").toList match {\n    case h :: m :: Nil => h.toInt * 60 + m.toInt\n    case _ => throw new IllegalArgumentException(\"Time format should be HH:MM\")\n  }\n}"}
{"id":"c6e47c5f-6f62-406a-8de0-5eb481178672","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait UpgradeError\ncase object NoUpgradeAvailable extends UpgradeError\n\ncase class UpgradeInfo(level: String)\n\ndef requestUpgrade(frequencyPoints: Int): Either[UpgradeError, UpgradeInfo] = {\n  if (frequencyPoints >= 10000) Right(UpgradeInfo(\"Business\"))\n  else Left(NoUpgradeAvailable)\n}"}
{"id":"798f4409-b2ec-4f6c-89b7-7ecd57a559c4","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def validateSeat(seat: String): Option[String] = {\n  if (seat.matches(\"[A-Z][0-9]{1,2}\")) Some(seat)\n  else None\n}"}
{"id":"ddd7bb56-6885-4410-b9ba-fabf38d7750b","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"import scala.util.Try\n\ncase class Refund(amount: Double)\n\ndef processRefund(requested: Double): Try[Refund] = Try {\n  require(requested > 0, \"Requested refund must be positive\")\n  Refund(requested)\n}"}
{"id":"1a52d829-4d55-40d5-84a6-631dbf327ec6","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object CardDeclined extends PaymentError\ncase object InsufficientBalance extends PaymentError\n\ncase class Receipt(amount: Double)\n\ndef makePayment(cardOk: Boolean, fundsOk: Boolean): Either[PaymentError, Receipt] = {\n  if (!cardOk) Left(CardDeclined)\n  else if (!fundsOk) Left(InsufficientBalance)\n  else Right(Receipt(200.0))\n}"}
{"id":"933098cb-dd2f-4c06-b4f1-3663b859a10a","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def findFlightByCode(code: String): Option[String] = {\n  List(\"AA101\", \"UA456\").find(_ == code)\n}"}
{"id":"a5be47f5-80b8-4304-9765-647b11d5bd84","timestamp":1746099561881,"category":"throws","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Ticket(passengerId: String, flightCode: String, seat: String)\ncase class Passenger(passengerId: String, name: String)"}
{"id":"9afb6139-0004-4bda-8981-6ff7a150ecec","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"case class ReservationId(value: String)\ncase class ReservationNotFound(id: String) extends Exception(s\"Reservation $id not found\")\nobject ReservationService {\n  private val reservations = Map(\"ABC123\" -> \"Room101\")\n  def getRoomNumberByReservation(id: ReservationId): String = {\n    reservations.get(id.value).getOrElse(throw new ReservationNotFound(id.value))\n  }\n}\nval roomNumber = ReservationService.getRoomNumberByReservation(ReservationId(\"XYZ999\"))"}
{"id":"04946e59-122f-4843-9d54-375683d3b67f","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object PaymentProcessor {\n  def chargeCard(cardNumber: String, amount: Double): Boolean = {\n    if (cardNumber.length != 16)\n      throw new IllegalArgumentException(\"Invalid card number\")\n    else if (amount <= 0)\n      throw new IllegalArgumentException(\"Charge amount must be positive\")\n    else\n      true\n  }\n}\ntry {\n  PaymentProcessor.chargeCard(\"1234567890123456\", -50)\n} catch {\n  case e: IllegalArgumentException => println(e.getMessage)\n}"}
{"id":"029f7db0-7766-42b2-a9d8-05118e255ca8","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class HotelFullException(message: String) extends Exception(message)\nobject BookingSystem {\n  def reserveRoom(date: String, guestName: String): String = {\n    if (date == \"2024-12-25\") throw new HotelFullException(\"No rooms available on Christmas\")\n    s\"Room reserved for $guestName on $date\"\n  }\n}\ntry {\n  BookingSystem.reserveRoom(\"2024-12-25\", \"Sophie Turner\")\n} catch {\n  case ex: HotelFullException => println(s\"Booking failed: ${ex.getMessage}\")\n}"}
{"id":"c4a7b36f-2452-4b36-90c3-aa66261840f1","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object RoomService {\n  def getRoomInfo(roomNumber: Int): String = {\n    if (roomNumber < 100 || roomNumber > 999)\n      throw new RuntimeException(\"Room number out of range\")\n    else\n      s\"Room $roomNumber infos\"\n  }\n}\nval info = RoomService.getRoomInfo(42)"}
{"id":"41746926-18aa-4397-a64b-cf0c73adae1d","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object EmailNotificationSender {\n  def sendConfirmation(email: String, reservationId: String): Unit = {\n    if (!email.contains(\"@\")) throw new Exception(\"Invalid email address!\")\n    println(s\"Confirmation sent to $email for reservation $reservationId\")\n  }\n}\ntry {\n  EmailNotificationSender.sendConfirmation(\"userexample.com\", \"ABC123\")\n} catch {\n  case e: Exception => println(\"Failed to send confirmation: \" + e.getMessage)\n}"}
{"id":"c3470489-6228-43f4-bfc1-6e35b12b603e","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"case class Guest(name: String)\ncase class InvalidGuestException(reason: String) extends Exception(reason)\nobject GuestRegistry {\n  def registerGuest(guest: Guest): Boolean = {\n    if (guest.name.isBlank) throw new InvalidGuestException(\"Guest name cannot be blank\")\n    true\n  }\n}\ntry {\n  GuestRegistry.registerGuest(Guest(\"\"))\n} catch {\n  case ex: InvalidGuestException => println(ex.reason)\n}"}
{"id":"0760c6ba-1bd3-4841-9fed-c1f27ed15245","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object InvoiceCalculator {\n  def calculateInvoice(nights: Int, nightlyRate: Double): Double = {\n    if (nights <= 0) throw new IllegalStateException(\"Nights must be positive\")\n    if (nightlyRate <= 0) throw new IllegalStateException(\"Nightly rate must be positive\")\n    nights * nightlyRate\n  }\n}\ntry {\n  val invoice = InvoiceCalculator.calculateInvoice(0, 150.0)\n} catch {\n  case ex: Exception => println(ex.getMessage)\n}"}
{"id":"49f61dfc-22e5-4937-ad99-e18033b8a6ac","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object LoyaltyPointsManager {\n  def addPoints(guestId: String, points: Int): Int = {\n    if (points < 0) throw new Exception(\"Points must be non-negative\")\n    points + 100\n  }\n}\nval updated = try {\n  LoyaltyPointsManager.addPoints(\"G123\", -5)\n} catch {\n  case e: Exception => println(e.getMessage); 0\n}"}
{"id":"fceb89af-18c9-4315-bc1e-86d01c2dda52","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object CancellationPolicy {\n  def applyCancellationFee(daysBefore: Int): Double = {\n    if (daysBefore < 0)\n      throw new IllegalArgumentException(\"Invalid number of days before arrival\")\n    else if (daysBefore < 2)\n      200\n    else\n      50\n  }\n}\nval fee = CancellationPolicy.applyCancellationFee(-1)"}
{"id":"52187611-0625-42da-84f5-dbcc87216136","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object RoomAllocation {\n  def allocate(roomCategory: String): Int = {\n    if (roomCategory.isEmpty)\n      throw new Exception(\"Room category must be provided!\")\n    101\n  }\n}\ntry {\n  val room = RoomAllocation.allocate(\"\")\n} catch {\n  case ex: Exception => println(ex.getMessage)\n}"}
{"id":"0601a090-1be9-4afd-b299-7454e83e321b","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait ReservationError\ncase object ReservationAlreadyExists extends ReservationError\ncase object InvalidReservationDates extends ReservationError\ncase class ReservationDetails(guestName: String, from: String, to: String)\nobject FunctionalReservationEngine {\n  def createReservation(details: ReservationDetails): Either[ReservationError, String] =\n    if (details.from == details.to) Left(InvalidReservationDates)\n    else if (details.guestName == \"Taken\") Left(ReservationAlreadyExists)\n    else Right(s\"Reservation confirmed for ${details.guestName}\")\n}\nval res = FunctionalReservationEngine.createReservation(ReservationDetails(\"Alice\",\"2024-06-10\",\"2024-06-10\"))"}
{"id":"b5688de5-709f-4d5a-bcc3-b2a7b26ab85c","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object CardDeclined extends PaymentError\ncase object InvalidCardInfo extends PaymentError\nobject SafePaymentProcessor {\n  def process(card: String, amount: Double): Either[PaymentError, String] =\n    if (card.length != 16) Left(InvalidCardInfo)\n    else if (amount > 10000) Left(CardDeclined)\n    else Right(\"Payment accepted\")\n}\nval paymentResult = SafePaymentProcessor.process(\"123456789012345\", 150.0)"}
{"id":"301c3e9d-813a-4f8a-88fd-5ba874898428","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.Try\nobject TryRoomIdParsing {\n  def parseRoomId(text: String): Try[Int] = Try(text.toInt)\n}\nval parsedRoom = TryRoomIdParsing.parseRoomId(\"ABC123\").recover{\n  case _ => -1\n}"}
{"id":"6d0aad65-f082-43e4-87fa-3ade615cead2","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"object EmailValidation {\n  def validateEmail(email: String): Option[String] =\n    if (email.contains(\"@\")) Some(email)\n    else None\n}\nval validEmail = EmailValidation.validateEmail(\"manager@hotel.com\")\nval invalidEmail = EmailValidation.validateEmail(\"oops.com\")"}
{"id":"7f167138-d889-4008-9647-c558fee0495b","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait BookingError\ncase object HotelIsFull extends BookingError\ncase class BookingRequest(guest: String, date: String)\nobject ComposedBookingService {\n  def checkAvailability(date: String): Either[BookingError, Unit] =\n    if (date == \"2024-12-25\") Left(HotelIsFull) else Right(())\n  def createBooking(req: BookingRequest): Either[BookingError, String] =\n    checkAvailability(req.date).map(_ => s\"Booking for ${req.guest} on ${req.date}\")\n}\nval bookingStatus = ComposedBookingService.createBooking(BookingRequest(\"Bob\", \"2024-12-25\"))"}
{"id":"5accc600-1115-43d8-8e0e-1a6ffda89475","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"object GuestOptionFinder {\n  private val guests = Map(101 -> \"Elena\", 102 -> \"David\")\n  def findGuestByRoom(room: Int): Option[String] = guests.get(room)\n}\nval found = GuestOptionFinder.findGuestByRoom(203).getOrElse(\"Empty Room\")"}
{"id":"d369efa8-4c75-4e63-8da0-5f3b9b13a8c3","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\nobject TryInvoiceCalculator {\n  def calc(nights: Int, rate: Double): Try[Double] = Try(nights * rate)\n}\nval inv = TryInvoiceCalculator.calc(2, 200.0).fold(_ => 0.0, x => x)"}
{"id":"388043e4-28b0-489f-a282-4febd5c62bef","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait LoyaltyError\ncase object NegativePoints extends LoyaltyError\nobject SafeLoyaltyPointsManager {\n  def add(points: Int): Either[LoyaltyError, Int] =\n    if (points < 0) Left(NegativePoints)\n    else Right(points + 100)\n}\nval result = SafeLoyaltyPointsManager.add(-20).fold(_ => \"Error\", pts => pts.toString)"}
{"id":"747c191c-5aa2-4261-a7e8-e1699aa1a521","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"object PolicySafeCalculator {\n  def cancellationFee(days: Int): Option[Double] =\n    if (days < 0) None\n    else if (days < 1) Some(250.0)\n    else Some(50.0)\n}\nval fee = PolicySafeCalculator.cancellationFee(0).getOrElse(999.0)"}
{"id":"25483fba-2b39-408e-98f9-f996d9e974e6","timestamp":1746099596049,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait AllocationError\ncase object NoCategoryProvided extends AllocationError\nobject SafeRoomAllocator {\n  def allocateRoom(category: String): Either[AllocationError, Int] =\n    if (category.nonEmpty) Right(101)\n    else Left(NoCategoryProvided)\n}\nval allocation = SafeRoomAllocator.allocateRoom(\"\")"}
{"id":"7459416e-f4e5-42e1-9f76-225068d779c6","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class BookingRequest(guestId: String, roomType: String, date: String)\ncase class BookingConfirmation(confirmationNumber: String)\n\nsealed trait BookingError\ncase object RoomUnavailable extends BookingError\ncase object InvalidGuestInfo extends BookingError\n\ndef processBooking(request: BookingRequest): Either[BookingError, BookingConfirmation] = {\n  if(request.guestId.isEmpty) Left(InvalidGuestInfo)\n  else if(request.roomType == \"Suite\" && request.date == \"2023-12-31\") Left(RoomUnavailable)\n  else Right(BookingConfirmation(\"CONF12345\"))\n}"}
{"id":"c54b6d8c-110c-453c-b3d9-901e42cfbe39","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class RoomNotFoundException(roomNumber: Int) extends Exception(s\"Room $roomNumber not found.\")\n\nobject RoomService {\n  private val availableRooms = Set(101, 102, 103)\n  def fetchRoom(roomNumber: Int): String = {\n    if (!availableRooms.contains(roomNumber)) {\n      throw new RoomNotFoundException(roomNumber)\n    } else {\n      s\"Room $roomNumber details\"\n    }\n  }\n}"}
{"id":"b221adfd-74ea-48db-99e6-1c61bdd9a859","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef parseReservationId(reservationId: String): Try[Int] = Try {\n  reservationId.toInt\n}"}
{"id":"499d54f9-735b-4ba3-9b91-8e1f1eec5b6e","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object ReservationManager {\n  def cancelReservation(reservationId: String): Unit = {\n    if (reservationId.isEmpty) throw new IllegalArgumentException(\"Missing reservation id\")\n    // Pretend to cancel\n    println(s\"Reservation $reservationId cancelled.\")\n  }\n}"}
{"id":"e6c85bc6-9b97-417f-9969-a9d723a3d364","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InvalidCard extends PaymentError\ncase object PaymentDeclined extends PaymentError\n\ncase class Invoice(amount: Double)\n\ndef chargeCard(cardNumber: String, amount: Double): Either[PaymentError, Invoice] =\n  if (!cardNumber.matches(\"\\\\d{16}\")) Left(InvalidCard)\n  else if (amount > 1000) Left(PaymentDeclined)\n  else Right(Invoice(amount))"}
{"id":"ea334ff5-c5be-4eeb-bd2e-8c421086004f","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object GuestRegistrar {\n  def registerGuest(guestName: String, age: Int): Boolean = {\n    try {\n      if (guestName.isEmpty) throw new NoSuchElementException(\"Guest name required\")\n      if (age < 18) throw new IllegalArgumentException(\"Too young to register\")\n      true\n    } catch {\n      case _: Exception => false\n    }\n  }\n}"}
{"id":"431b0ab4-19bd-4358-916b-5b341a1a8f9b","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeCheckOut(roomNumber: Int): Try[String] = Try {\n  require(roomNumber > 100, \"Invalid room number\")\n  s\"Checkout for room $roomNumber successful.\"\n}"}
{"id":"64a02ff5-b8e9-43ca-a630-bb2e94784f61","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class InvalidBookingException(msg: String) extends Exception(msg)\n\ndef reserveRoom(roomId: Int): String = {\n  if (roomId <= 0) throw new InvalidBookingException(\"Invalid room id\")\n  s\"Room $roomId reserved!\"\n}"}
{"id":"e1ed2761-925b-474a-896a-e69ac5886945","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait AvailabilityError\ncase object NoVacancy extends AvailabilityError\n\ndef isRoomAvailable(date: String, roomType: String): Either[AvailabilityError, Boolean] =\n  if (date == \"2023-12-31\" && roomType == \"Deluxe\") Left(NoVacancy)\n  else Right(true)"}
{"id":"7f3d6290-c3c3-47c8-9a7a-f4e074ce1a99","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def fetchCustomerProfile(customerId: String): String = {\n  try {\n    if(customerId.length < 4) throw new Exception(\"Invalid customer ID\")\n    s\"Profile: $customerId\"\n  } catch {\n    case e: Exception => s\"Error: ${e.getMessage}\"\n  }\n}"}
{"id":"c702026b-a85a-4410-b7ea-ffe512ba3c94","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def lookupReservation(code: String): Option[String] =\n  if(code == \"R123\") Some(\"Reservation details for R123\")\n  else None"}
{"id":"22e65abe-8c6e-43e8-ae03-fc6c45b24b24","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object MaintenanceChecker {\n  def ensureRoomCleaned(roomNum: Int): Unit = {\n    if (roomNum == 404) throw new RuntimeException(\"Room under maintenance\")\n  }\n}"}
{"id":"0d469428-f2dd-4b6d-a612-906dd35b830c","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait CancellationError\ncase object AlreadyCheckedOut extends CancellationError\ncase object ReservationNotFound extends CancellationError\n\ndef attemptCancellation(reservationCode: String): Either[CancellationError, String] =\n  reservationCode match {\n    case \"CXL001\" => Left(AlreadyCheckedOut)\n    case \"\" => Left(ReservationNotFound)\n    case code => Right(s\"Reservation $code cancelled.\")\n  }"}
{"id":"4a32a7ab-b1be-414a-ac34-95ad99802ba0","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def removeGuest(guestList: List[String], guest: String): List[String] = {\n  try {\n    if (!guestList.contains(guest)) throw new IllegalArgumentException(\"Nonexistent guest\")\n    guestList.filterNot(_ == guest)\n  } catch {\n    case _: Exception => guestList\n  }\n}"}
{"id":"bb77951e-5321-4d6f-9418-7d539294887c","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseRoomRate(rateText: String): Try[Double] = Try {\n  rateText.toDouble\n}"}
{"id":"1947d4a2-884c-49e4-83f4-4aa1510583dd","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def setRoomStatus(roomId: Int, status: String): String = {\n  try {\n    if (status != \"Clean\" && status != \"Dirty\")\n      throw new Exception(\"Invalid status value\")\n    s\"Room $roomId marked as $status.\"\n  } catch {\n    case e: Exception => \"Failed: \" + e.getMessage\n  }\n}"}
{"id":"460673ab-848e-4ea7-9993-d13db51e8496","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"sealed trait EmailError\ncase object InvalidEmailAddress extends EmailError\n\ndef sendConfirmationEmail(email: String): Either[EmailError, String] =\n  if (email.contains(\"@\")) Right(s\"Confirmation sent to $email\")\n  else Left(InvalidEmailAddress)"}
{"id":"b12004fc-66d3-4771-8a78-978eca57e87a","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def getArrivalDate(arrivalString: String): String = {\n  if (arrivalString.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {\n    arrivalString\n  } else {\n    throw new IllegalArgumentException(\"Invalid arrival date format\")\n  }\n}"}
{"id":"5fd760d0-071c-4c50-bfa2-a52bb7cfd7d3","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef safeAllocateRoom(roomNumber: String): Try[Int] = Try {\n  roomNumber.toInt\n}"}
{"id":"fc2c33e5-6836-4bd2-b796-19db6782c60d","timestamp":1746099628405,"category":"throws","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"class PaymentException(msg: String) extends Exception(msg)\n\ndef processRefund(amount: Double): Double = {\n  if (amount < 0) throw new PaymentException(\"Negative refund not allowed\")\n  amount * 0.95\n}"}
{"id":"321b27de-5fda-47b5-9724-abefd364ec7e","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"object DriverLocationService:\n  def getDriverLocation(driverId: String): Option[(Double, Double)] =\n    if driverId == \"driver123\" then Some((40.7128, -74.0060))\n    else None\n\nsealed trait LocationError\ncase object DriverNotFound extends LocationError\n\ndef fetchDriverCoordinates(driverId: String): Either[LocationError, (Double, Double)] =\n  DriverLocationService.getDriverLocation(driverId) match\n    case Some(coords) => Right(coords)\n    case None => Left(DriverNotFound)\n"}
{"id":"d4a87d0b-76e9-43ca-8895-c885585c4ca5","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class PaymentException(msg: String) extends Exception(msg)\n\ndef processRiderPayment(riderId: String, total: Double): Boolean =\n  if total <= 0 then throw new PaymentException(\"Invalid payment amount\")\n  if riderId.isEmpty then throw new PaymentException(\"Missing rider ID\")\n  true\n\ntry\n  processRiderPayment(\"\", 25.50)\ncatch\n  case e: PaymentException => println(\"Payment failed: \" + e.getMessage)\n"}
{"id":"494c1b94-bb0a-435b-bfd6-b369933df2b6","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait OrderError\ncase object OrderAlreadyAssigned extends OrderError\ncase object RiderUnavailable extends OrderError\n\ncase class Order(id: String, assigned: Boolean)\n\ndef assignOrderToRider(order: Order, riderAvailable: Boolean): Either[OrderError, Order] =\n  if !riderAvailable then Left(RiderUnavailable)\n  else if order.assigned then Left(OrderAlreadyAssigned)\n  else Right(order.copy(assigned = true))\n"}
{"id":"07195d9f-ac6f-43af-bcbf-173d87f4bd8d","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"object RestaurantMenuService:\n  def findMenuItem(itemId: String): String =\n    if itemId == \"pasta\" then \"Spaghetti Carbonara\"\n    else throw new NoSuchElementException(\"Menu item not found\")\n\ntry\n  val menuItem = RestaurantMenuService.findMenuItem(\"burger\")\n  println(menuItem)\ncatch\n  case _: NoSuchElementException => println(\"The item is not available\")\n"}
{"id":"1d1a0832-9cb9-4ba5-b052-9a2230358d06","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait DeliveryError\ncase object AddressInvalid extends DeliveryError\ncase object DriverBusy extends DeliveryError\n\ndef scheduleDelivery(address: String, driverFree: Boolean): Either[DeliveryError, String] =\n  if address.trim.isEmpty then Left(AddressInvalid)\n  else if !driverFree then Left(DriverBusy)\n  else Right(\"Delivery scheduled successfully\")\n"}
{"id":"38f68a2f-4754-4c0c-8e00-220e93f9f62b","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class InventoryException(message: String) extends Exception(message)\n\ncase class Restaurant(id: String, hasInventory: Boolean)\n\ndef reserveInventory(restaurant: Restaurant): Boolean =\n  if !restaurant.hasInventory then throw new InventoryException(\"Insufficient inventory\")\n  true\n\ntry\n  reserveInventory(Restaurant(\"r-101\", false))\ncatch\n  case e: InventoryException => println(\"Reservation failed: \" + e.getMessage)\n"}
{"id":"0198b477-6239-4063-bf64-d4bc8cf3cbcd","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseOrderTotal(total: String): Try[Double] =\n  Try(total.toDouble)\n\nval amount = parseOrderTotal(\"12.75\").getOrElse(0.0)"}
{"id":"cc3cae01-2208-49e2-9909-57cd0b9ec9c9","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getRiderByName(name: String): String =\n  if name == \"John\" then \"active\"\n  else throw new Exception(\"Rider not found\")\n\ntry\n  getRiderByName(\"Tom\")\ncatch\n  case e: Exception => println(e.getMessage)\n"}
{"id":"f900ab8e-1880-441a-95bf-f9809369191d","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait SchedulingError\ncase object TimeSlotUnavailable extends SchedulingError\ncase object DeliveryWindowTooShort extends SchedulingError\n\ndef bookDeliverySlot(slot: String, minutesAvailable: Int): Either[SchedulingError, String] =\n  if minutesAvailable < 15 then Left(DeliveryWindowTooShort)\n  else if slot == \"\" then Left(TimeSlotUnavailable)\n  else Right(\"Slot booked: \" + slot)\n"}
{"id":"2e3ea5a0-47fe-46b0-bf94-34d9067e0242","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class TrackingException(msg: String) extends Exception(msg)\n\ncase class Package(id: String, delivered: Boolean)\n\ndef confirmPackageDelivery(pkg: Package): Unit =\n  if !pkg.delivered then throw new TrackingException(\"Package has not arrived yet\")\n\ntry\n  confirmPackageDelivery(Package(\"PK-15\", false))\ncatch\n  case e: TrackingException => println(e.getMessage)\n"}
{"id":"01a80913-b986-46a4-abaa-e7321b62a29c","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def findAvailableDeliveryZone(address: String): Option[String] =\n  if address.contains(\"New York\") then Some(\"ZoneA\")\n  else None\n\nval result = findAvailableDeliveryZone(\"123 Main St, New York\") match\n  case Some(zone) => s\"Delivery to $zone\"\n  case None => \"No delivery zone found\"\n"}
{"id":"7e2fc23e-e603-4888-89ca-b251d7d34288","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def checkOrderStatus(orderId: String): String =\n  if orderId != \"order999\" then throw new RuntimeException(\"Unknown order ID\")\n  else \"dispatched\"\n\ntry\n  val status = checkOrderStatus(\"order123\")\ncatch\n  case e: RuntimeException => println(\"Order status error: \" + e.getMessage)\n"}
{"id":"76c6ec18-b717-475c-b04c-15fb7aca61ea","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object CardDeclined extends PaymentError\ncase object PaymentGatewayError extends PaymentError\n\ndef chargeCustomer(cardValid: Boolean): Either[PaymentError, String] =\n  if !cardValid then Left(CardDeclined)\n  else Right(\"Charged successfully\")\n"}
{"id":"57984e08-bc8a-4295-88f3-df4f72747725","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getDriverRating(driverId: String): Int =\n  if driverId == \"abc\" then 5\n  else throw new IllegalArgumentException(\"Driver rating unavailable\")\n\ntry\n  val rating = getDriverRating(\"xyz\")\ncatch\n  case e: IllegalArgumentException => println(\"Could not get rating: \" + e.getMessage)\n"}
{"id":"d55ae90f-e344-41cf-b34d-4f88b48b5c1b","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def findOrder(orderId: String): Option[String] =\n  if orderId == \"ORD1001\" then Some(\"Ready for delivery\")\n  else None\n\nval orderStatus = findOrder(\"ORD1001\").getOrElse(\"Order not found\")\n"}
{"id":"3b776ac4-c034-485e-b7d5-f82e61fa2848","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class RiderBlockedException extends Exception(\"Rider is blocked from accepting orders\")\n\ndef acceptOrder(riderStatus: String): Boolean =\n  if riderStatus == \"blocked\" then throw new RiderBlockedException\n  true\n\ntry\n  acceptOrder(\"blocked\")\ncatch\n  case e: RiderBlockedException => println(e.getMessage)\n"}
{"id":"f20ba5f0-5980-46b1-a1eb-fe14e500fd5a","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait CancellationError\ncase object TooLateToCancel extends CancellationError\ncase object OrderAlreadyOutForDelivery extends CancellationError\n\ndef cancelOrder(status: String, minutesElapsed: Int): Either[CancellationError, String] =\n  if minutesElapsed > 30 then Left(TooLateToCancel)\n  else if status == \"dispatched\" then Left(OrderAlreadyOutForDelivery)\n  else Right(\"Order cancelled successfully\")\n"}
{"id":"dd0dd70c-f893-4af5-a525-6f8d3aa3f69f","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def restaurantStatus(name: String): String =\n  if name == \"PastaHouse\" then \"open\"\n  else throw new Exception(\"Restaurant not found\")\n\ntry\n  restaurantStatus(\"BurgerBarn\")\ncatch\n  case e: Exception => println(\"Error: \" + e.getMessage)\n"}
{"id":"ccbc61ed-4b80-40ee-8d37-e8bb30796e4e","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef updateOrderETA(orderId: String, newEta: Int): Try[Int] =\n  Try {\n    if newEta < 0 then throw new IllegalStateException(\"Negative ETA not allowed\")\n    newEta\n  }\n\nupdateOrderETA(\"order321\", -5).recover { case _ => 0 }.get\n"}
{"id":"ddc2db92-912f-4592-b896-b4c4d3724461","timestamp":1746099650233,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliverySlotException(msg: String) extends Exception(msg)\n\nval availableSlots = Set(\"9am-10am\", \"10am-11am\")\n\ndef reserveSlot(slot: String): Boolean =\n  if !availableSlots.contains(slot) then throw new DeliverySlotException(\"Slot unavailable\")\n  true\n\ntry\n  reserveSlot(\"8am-9am\")\ncatch\n  case e: DeliverySlotException => println(\"Failed: \" + e.getMessage)\n"}
{"id":"a50b6121-329e-4d2b-816f-9c3e3a5b23ef","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class Order(id: Int, address: String)\nsealed trait DeliveryError\ncase object InvalidAddress extends DeliveryError\ncase object OrderNotFound extends DeliveryError\ndef validateOrder(order: Order): Either[DeliveryError, Order] =\n  if (order.address.isEmpty) Left(InvalidAddress)\n  else Right(order)"}
{"id":"28c5a870-2cf9-4da1-9858-05d61667fb6d","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Dispatcher\nobject CourierFinder {\n  def findCourier(area: String): String = {\n    if (area == \"\")\n      throw new IllegalArgumentException(\"Area cannot be empty\")\n    else\n      \"Courier123\"\n  }\n}\nval courier =\n  try {\n    CourierFinder.findCourier(\"\")\n  } catch {\n    case e: IllegalArgumentException => \"NoCourier\"\n  }"}
{"id":"c7c4d078-4c9d-4653-84de-aa006b48bac1","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\ncase object CardDeclined extends PaymentError\ndef validatePayment(cardNumber: String, amount: Double): Either[PaymentError, String] =\n  if (amount > 100) Left(InsufficientFunds)\n  else Right(\"PaymentApproved\")"}
{"id":"11cd44b1-082c-421a-b4ae-8120bc9e3e6d","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def allocateDriver(orderId: Int): String =\n  if (orderId < 0) throw new RuntimeException(\"Invalid Order\")\n  else s\"DriverFor$orderId\"\nval driverName = try {\n  allocateDriver(-1)\n} catch {\n  case ex: RuntimeException => \"NoDriverAvailable\"\n}"}
{"id":"55672b43-41e6-4aa3-9524-8c826d11062e","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class FoodItem(name: String, quantity: Int)\ndef findFoodItem(menu: List[FoodItem], name: String): Option[FoodItem] =\n  menu.find(_.name == name)"}
{"id":"d3dcac95-c8fc-4950-bde7-58e29c6e7ce9","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getRouteDistance(start: String, end: String): Double =\n  if (start == end) throw new IllegalStateException(\"Pickup and delivery points are the same\")\n  else 5.4"}
{"id":"5c894927-9761-4cbc-9211-52c7bca3ad00","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"import scala.util.Try\ndef parseDeliveryTime(timeString: String): Try[Int] =\n  Try(timeString.toInt)"}
{"id":"6e0ef695-35bf-4cdf-91c6-a36a8a675721","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"object PriceCalculator {\n  def calculateTotalPrice(items: List[(String, Double)]): Double = {\n    if (items.isEmpty) throw new NoSuchElementException(\"No items to price\")\n    items.map(_._2).sum\n  }\n}\ntry {\n  PriceCalculator.calculateTotalPrice(List())\n} catch {\n  case _: NoSuchElementException => 0.0\n}"}
{"id":"76632668-21c3-4d4d-9c1d-6d93e2775202","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait DeliverySlotError\ncase object SlotUnavailable extends DeliverySlotError\ndef reserveDeliverySlot(availableSlots: List[String], desired: String): Either[DeliverySlotError, String] =\n  if (availableSlots.contains(desired)) Right(desired)\n  else Left(SlotUnavailable)"}
{"id":"33ba2f37-1dda-4799-9059-655a492980f3","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def lookupCustomer(email: String): Int =\n  if (!email.contains(\"@\")) throw new IllegalArgumentException(\"Invalid email\")\n  else 12345\nval customerId = try {\n  lookupCustomer(\"bademail\")\n} catch {\n  case _: IllegalArgumentException => 0\n}"}
{"id":"164e9003-b25a-4d78-81f0-9fbb80ceac99","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"import scala.util.Try\ndef safeDivideDeliveryFee(totalFee: Double, numPackages: Int): Try[Double] =\n  Try(totalFee / numPackages)"}
{"id":"6ae17cd9-ed31-45f6-a9d2-f43d034537a9","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"case class Vehicle(id: String)\ndef findVehicle(vehicles: List[Vehicle], id: String): Vehicle =\n  vehicles.find(_.id == id).getOrElse(throw new NoSuchElementException(\"Vehicle not found\"))\nval res = try { findVehicle(List(), \"V3\") } catch { case _: Throwable => Vehicle(\"default\") }"}
{"id":"5d5fa4fd-ba48-4462-b47e-bead7b50882a","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class Courier(id: Int, area: String)\ndef assignCourierToOrder(couriers: List[Courier], orderArea: String): Option[Courier] =\n  couriers.find(_.area == orderArea)"}
{"id":"566dd2e8-e4a4-4885-812b-837cdd9fe760","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class RestaurantOperationalException(msg: String) extends Exception(msg)\ndef checkRestaurantStatus(isOpen: Boolean): Unit =\n  if (!isOpen) throw new RestaurantOperationalException(\"Restaurant closed\")\nval status = try {\n  checkRestaurantStatus(false)\n  \"Open\"\n} catch {\n  case _: RestaurantOperationalException => \"Closed\"\n}"}
{"id":"8c2c34da-77f8-4b7a-9c8f-583de56e90c4","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait InventoryError\ncase object InventoryShortage extends InventoryError\ndef reserveInventory(requested: Int, available: Int): Either[InventoryError, Int] =\n  if (requested > available) Left(InventoryShortage)\n  else Right(available - requested)"}
{"id":"1e1c10fa-bea7-46d8-9a31-13b08b0e5cab","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def fetchDeliveryZone(zipCode: String): String =\n  if (zipCode.length != 5) throw new Exception(\"Invalid zip code\")\n  else \"ZoneA\"\nval zone = try { fetchDeliveryZone(\"123\") } catch { case _: Throwable => \"UnknownZone\" }"}
{"id":"aea07c0a-817e-459c-8867-ccbf7575abdc","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"import scala.util.Try\ndef safeTrackOrderStatus(statusCode: String): Try[String] =\n  Try {\n    statusCode match {\n      case \"SUCCESS\" => \"Delivered\"\n      case \"FAIL\"    => throw new IllegalStateException(\"Delivery failed\")\n      case _         => throw new Exception(\"Unknown status\")\n    }\n  }"}
{"id":"d82d50c1-f64b-4d52-81dd-17447e451671","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def cancelOrder(orderId: Int): String =\n  if (orderId < 0) throw new IllegalArgumentException(\"Negative orderId\")\n  else \"Order cancelled\"\nval cancelResult = try {\n  cancelOrder(-42)\n} catch {\n  case _: IllegalArgumentException => \"Failed to cancel\"\n}"}
{"id":"675f894c-76a6-442c-a441-a4c60a9a7344","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"sealed trait AddressValidationError\ncase object EmptyAddressField extends AddressValidationError\ndef validateAddress(street: String): Either[AddressValidationError, String] =\n  if (street.trim == \"\") Left(EmptyAddressField)\n  else Right(street)"}
{"id":"802f1132-13fa-43bd-9e28-231e5d10d6f5","timestamp":1746099669086,"category":"throws","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def splitOrder(order: String): List[String] =\n  if (order.isEmpty) throw new IllegalArgumentException(\"Order data missing\")\n  else order.grouped(2).toList\nval spl = try { splitOrder(\"\") } catch { case _: Throwable => List(\"Empty\") }"}
{"id":"b0b3f266-d0e3-459a-b182-5012a7a3e0c2","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Track(id: String, title: String, duration: Int)\n\ndef findTrackById(tracks: List[Track], tid: String): Option[Track] =\n  tracks.find(_.id == tid)"}
{"id":"a26178e0-20ac-4a82-8cd2-988b1d6b1673","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Playlist(id: String, name: String, tracks: List[Track])\ndef addTrackToPlaylist(playlist: Playlist, track: Track): Option[Playlist] =\n  if playlist.tracks.contains(track) then None\n  else Some(playlist.copy(tracks = playlist.tracks :+ track))"}
{"id":"b06abfef-7a49-4285-9301-9e0d3dbc0c40","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait StreamingError\ncase object TrackUnavailable extends StreamingError\ncase object InvalidSubscription extends StreamingError\n\ndef streamTrack(isPremium: Boolean, available: Boolean): Either[StreamingError, String] =\n  if !isPremium then Left(InvalidSubscription)\n  else if !available then Left(TrackUnavailable)\n  else Right(\"Streaming started\")"}
{"id":"c062ccb0-d653-4eeb-beba-0b2084e92b24","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePlaybackPosition(position: String): Try[Int] =\n  Try(position.toInt)"}
{"id":"d476c1b3-c617-42e2-b48d-6635f0342fcc","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait SubscriptionError\ncase object NoPlanSelected extends SubscriptionError\ncase object PaymentDeclined extends SubscriptionError\n\ndef subscribeUser(hasPlan: Boolean, paymentValid: Boolean): Either[SubscriptionError, String] =\n  if !hasPlan then Left(NoPlanSelected)\n  else if !paymentValid then Left(PaymentDeclined)\n  else Right(\"Subscription successful\")"}
{"id":"42e75244-1c4b-4e1d-89ec-d0e3e171420e","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class User(id: String, name: String)\ndef findUserById(users: List[User], userId: String): Either[String, User] =\n  users.find(_.id == userId).toRight(s\"User $userId not found\")"}
{"id":"98719a0e-6bea-41a5-9f0c-73ee69cae3a5","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait PlaybackError\ncase object TrackNotInPlaylist extends PlaybackError\n\ndef playTrackFromPlaylist(playlist: Playlist, trackId: String): Either[PlaybackError, Track] =\n  playlist.tracks.find(_.id == trackId)\n    .toRight(TrackNotInPlaylist)"}
{"id":"48baadab-0015-4a38-a89c-f22aa28d1be1","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait RecommendationError\ncase object NotEnoughListeningHistory extends RecommendationError\n\ndef getRecommendations(historyCount: Int): Either[RecommendationError, List[Track]] =\n  if historyCount < 3 then Left(NotEnoughListeningHistory)\n  else Right(List(Track(\"t1\", \"Recommended\", 240)))"}
{"id":"8c748206-ca84-4c31-a62a-aba091337bc1","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"import scala.util.Try\n\ndef savePlaylist(name: String): Try[String] =\n  Try {\n    if name.isBlank then throw new IllegalArgumentException(\"Playlist name cannot be empty\")\n    else s\"Playlist '$name' saved\"\n  }"}
{"id":"4255b4b7-cb22-4bbf-a59e-1fa26cc56c5f","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class SongRequest(trackId: String)\nsealed trait SongRequestError\ncase object TrackIdMissing extends SongRequestError\n\ndef validateSongRequest(request: SongRequest): Either[SongRequestError, String] =\n  if request.trackId.isEmpty then Left(TrackIdMissing)\n  else Right(\"Valid request\")"}
{"id":"f1525056-da04-487d-b056-456a25ba7851","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class SongNotAvailableException(msg: String) extends Exception(msg)\n\ndef fetchSong(songId: String): String =\n  if songId == \"\" then throw new SongNotAvailableException(\"Song ID required\")\n  // mock return value\n  \"songData\""}
{"id":"64a77bda-5023-4457-b343-05e1f4939f07","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def likeAlbum(albumId: String, albums: Map[String, Int]): Int = {\n  if (!albums.contains(albumId)) throw new Exception(\"Album not found\")\n  albums(albumId) + 1\n}"}
{"id":"8c903c19-86eb-44bd-b55a-6b2d9c63a5fd","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def getAlbumCover(albumId: String): String = {\n  try {\n    if (albumId.isEmpty) throw new IllegalArgumentException(\"Album ID is empty\")\n    \"coverImageContent\"\n  } catch {\n    case _: IllegalArgumentException => \"defaultCover\"\n  }\n}"}
{"id":"70a78468-6ca1-42f0-b22f-584dab295b5b","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class InvalidPlaybackState(msg: String) extends Exception(msg)\ndef resumePlayback(state: String): Boolean =\n  if state != \"paused\" then throw new InvalidPlaybackState(\"Playback not paused\")\n  true"}
{"id":"dbfa2e0b-fbd0-48e7-85fc-c88512109280","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def removeTrack(tracks: List[Track], tid: String): List[Track] = {\n  if (!tracks.exists(_.id == tid)) throw new IllegalStateException(\"Track not found in list\")\n  tracks.filterNot(_.id == tid)\n}"}
{"id":"c92a0737-8fea-4ae6-964a-80b561609b69","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def fetchRecommendedTrack(userAge: Int): String = {\n  try {\n    if (userAge < 13) throw new Exception(\"Parental controls enabled\")\n    \"RecommendedTrackInfo\"\n  } catch {\n    case _: Exception => \"NoRecommendation\"\n  }\n}"}
{"id":"45f36a34-6b85-42f7-9bd6-872bc8172565","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def seekToPosition(current: Int, desired: Int): Int =\n  if (desired < 0 || desired > 3600) throw new Exception(\"Seek position out of bounds\")\n  desired"}
{"id":"d0d14e25-2dcc-406d-a227-4235121a9767","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class PlaylistLocked extends Exception\n\ndef addToLockedPlaylist(locked: Boolean): String = {\n  if (locked) throw new PlaylistLocked\n  \"Added to playlist\"\n}"}
{"id":"40e19af1-6852-414e-874b-1cc3c7b93b0f","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def verifyUserToken(token: String): Boolean =\n  try {\n    if (token != \"valid-token\") throw new Exception(\"Invalid token\")\n    true\n  } catch {\n    case _: Exception => false\n  }"}
{"id":"fd4b2626-4cdb-4238-9608-80ec985e7881","timestamp":1746099690733,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def addDeviceToProfile(devices: Set[String], deviceId: String): Set[String] = {\n  if (devices.size >= 3) throw new Exception(\"Device limit exceeded\")\n  devices + deviceId\n}"}
{"id":"103ce6c0-8c60-4672-b76d-a0c710ba0da4","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class PlaybackError(message: String)\ncase class PlaybackInstance(songId: String)\n\ndef startPlayback(songId: String): Either[PlaybackError, PlaybackInstance] =\n  if songId.nonEmpty then Right(PlaybackInstance(songId))\n  else Left(PlaybackError(\"Song ID is empty, cannot start playback\"))"}
{"id":"0edb5da6-2bfe-4de2-9b3e-90ca8d0878ab","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"case class UserNotFound(userName: String) extends Exception\n\ndef findUserPlaylists(userName: String): List[String] =\n  if userName == \"admin\" then List(\"Favorites\", \"Chill Beats\")\n  else throw new UserNotFound(userName)"}
{"id":"d61a188c-d510-48f8-bb0b-69d3253a320c","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait StreamingError\ncase class NetworkUnavailable(details: String) extends StreamingError\ncase class TrackNotAvailable(trackName: String) extends StreamingError\n\ncase class Track(id: String, name: String)\n\ndef fetchTrack(trackId: String): Either[StreamingError, Track] =\n  if trackId == \"offline\" then Left(NetworkUnavailable(\"No internet connection\"))\n  else if trackId == \"missing\" then Left(TrackNotAvailable(\"Unknown song\"))\n  else Right(Track(trackId, \"Imagine\"))"}
{"id":"357c2b60-fa0a-42c9-9cfa-d7c922e18af0","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def skipToNextTrack(playlist: List[String]): String =\n  if playlist.nonEmpty then playlist.head\n  else throw new NoSuchElementException(\"Playlist is empty, can't skip to next track\")"}
{"id":"32d2bbf9-343c-4b74-a85f-e2f7206b953c","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def getBitrateFormat(streamBitrate: Int): Option[String] =\n  streamBitrate match\n    case 320 => Some(\"High Quality\")\n    case 128 => Some(\"Standard Quality\")\n    case _   => None"}
{"id":"4084b788-9f26-4b99-b750-fc56967aaea5","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def authenticateUser(token: String): String =\n  if token == \"valid-token\" then \"UserId1234\"\n  else throw new SecurityException(\"Invalid authentication token\")"}
{"id":"2dda7fe2-36e7-497e-9e5c-25ab334fb6f2","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseDuration(durationStr: String): Try[Int] =\n  Try(durationStr.toInt)"}
{"id":"bb81a288-fc02-45f8-a25b-50d97b75daf3","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def deletePlaylist(playlistId: String): Unit =\n  if playlistId == \"protected\" then\n    throw new UnsupportedOperationException(\"Cannot delete default playlists\")\n  else\n    ()"}
{"id":"1deedc6f-70c0-45cc-91ee-e421274fa5d5","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait LibraryError\ncase object PlaylistNotFound extends LibraryError\ncase object TrackNotInPlaylist extends LibraryError\n\ndef removeTrackFromPlaylist(trackId: String, playlist: Map[String, List[String]]): Either[LibraryError, Map[String, List[String]]] =\n  playlist.get(\"Favorites\") match\n    case Some(songs) if songs.contains(trackId) =>\n      Right(playlist.updated(\"Favorites\", songs.filterNot(_ == trackId)))\n    case Some(_) =>\n      Left(TrackNotInPlaylist)\n    case None =>\n      Left(PlaylistNotFound)"}
{"id":"6f59f76a-986f-4630-b994-4d114aa70d00","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def processSubscriptionPayment(userId: String, amount: Double): String =\n  if amount < 0 then throw new IllegalArgumentException(\"Negative payment amount\")\n  else s\"Processed $$amount for $$userId\""}
{"id":"0a30a1e9-aaf9-412b-b10d-bd4d6bbbde27","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait UploadError\ncase class FileTooLarge(size: Int) extends UploadError\ncase object UnsupportedFormat extends UploadError\n\ncase class UploadedTrack(id: String)\n\ndef uploadAudioFile(size: Int, format: String): Either[UploadError, UploadedTrack] =\n  if size > 10_000 then Left(FileTooLarge(size))\n  else if format != \"mp3\" then Left(UnsupportedFormat)\n  else Right(UploadedTrack(\"track-xyz\"))"}
{"id":"64e1876a-3b0b-4a67-abe8-d87fb32119e4","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def addTrackToQueue(queue: List[String], trackId: String): List[String] =\n  if queue.contains(trackId) then throw new RuntimeException(\"Track already in queue\")\n  else queue :+ trackId"}
{"id":"e8d83b13-4623-4da1-ba4d-8b9c5cf58a43","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Artist(name: String)\ndef findArtist(name: String): Option[Artist] =\n  if name.toLowerCase == \"the beatles\" then Some(Artist(\"The Beatles\"))\n  else None"}
{"id":"9c7c4169-fa45-40c7-a30c-eb66d303081e","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def fetchUserProfile(userId: String): Map[String, String] =\n  if userId == \"unknown\" then throw new Exception(\"User profile not found\")\n  else Map(\"id\" -> userId, \"premium\" -> \"true\")"}
{"id":"105971e0-2a4e-40bc-9cfb-b2864d28e834","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"import scala.util.Try\n\ndef formatSongUrl(songId: String): Try[String] =\n  Try(\n    require(songId.startsWith(\"track-\"), \"Invalid track ID format\")\n    s\"https://streaming.com/song/$$songId\"\n  )"}
{"id":"80efd453-75bf-474b-8617-771160153ea7","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def removeUserAccount(userId: String): Unit =\n  try\n    if userId == \"owner\" then throw new IllegalStateException(\"Cannot remove account owner\")\n    else ()\n  catch\n    case e: Exception => println(\"Removal error: \" + e.getMessage)"}
{"id":"944ea956-e4fb-4b6f-8c42-99882c0648e9","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def searchSongByTitle(library: List[String], keyword: String): Option[String] =\n  library.find(_.toLowerCase.contains(keyword.toLowerCase))"}
{"id":"de41242a-85b0-4868-8ca0-0d2ad8f7f790","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def downloadAlbum(albumId: String): String =\n  try\n    if albumId.isEmpty then throw new Exception(\"Missing album ID\")\n    else s\"Downloading album $$albumId\"\n  catch\n    case e: Exception => \"Download failed: \" + e.getMessage"}
{"id":"df50ecc3-f999-471b-86d5-baafb1c6861d","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"sealed trait PlaylistCreationError\ncase object PlaylistNameTaken extends PlaylistCreationError\ncase class InvalidPlaylistName(reason: String) extends PlaylistCreationError\n\ncase class Playlist(name: String)\ndef createPlaylist(existing: Set[String], newName: String): Either[PlaylistCreationError, Playlist] =\n  if existing.contains(newName) then Left(PlaylistNameTaken)\n  else if newName.length < 3 then Left(InvalidPlaylistName(\"Name too short\"))\n  else Right(Playlist(newName))"}
{"id":"afd2c79f-fb7f-4cbd-af8e-086ded754f38","timestamp":1746099707947,"category":"throws","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def shareTrackWithUser(trackId: String, recipientEmail: String): String =\n  if !recipientEmail.contains(\"@\") then throw new IllegalArgumentException(\"Email is invalid\")\n  else s\"Shared $$trackId with $$recipientEmail\""}
{"id":"e2a73473-a16d-4571-a9c9-3e8503ede66c","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"object ScheduleValidator:\n  def validateSessionDuration(durationMinutes: Int): Either[String, Int] =\n    if durationMinutes >= 15 && durationMinutes <= 180 then Right(durationMinutes)\n    else Left(\"Session duration must be between 15 and 180 minutes\")\n"}
{"id":"e56894cb-e75b-4926-9941-084172ba0cf8","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"case class Lesson(sessionId: String, topic: String, tutorId: Int)\nclass SessionNotFoundException(id: String) extends Exception(s\"Session $id not found\")\nobject LessonFetcher:\n  def fetchLessonById(id: String): Lesson =\n    if id == \"validSession\" then Lesson(id, \"Algebra\", 101)\n    else throw new SessionNotFoundException(id)\n"}
{"id":"a3a850de-bf18-4aca-b811-5371c3a7a55e","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\ncase object InvalidCardDetails extends PaymentError\nobject PaymentProcessor:\n  def processPayment(userId: Int, amount: Double): Either[PaymentError, String] =\n    if amount <= 0 then Left(InvalidCardDetails)\n    else if userId == 0 then Left(InsufficientFunds)\n    else Right(\"Payment processed successfully\")\n"}
{"id":"2335ad8f-d19f-40f8-8898-8ac23a1dec93","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"case class Student(id: Int, name: String)\nobject StudentRepository:\n  def getStudentById(id: Int): Student = {\n    if id == 100 then Student(100, \"John Doe\")\n    else throw new Exception(\"Student not found\")\n  }\n"}
{"id":"dff9041e-eae8-4f4c-8437-d29d8afd2f7f","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"object TutorCredentials:\n  def validateCredentials(email: String, password: String): Option[String] =\n    if email.endsWith(\"@tutors.com\") && password.nonEmpty then Some(\"Valid credentials\")\n    else None\n"}
{"id":"fe88c6cb-b72f-42ec-8988-3b3f95e10872","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object EnrollmentManager:\n  def enrollStudent(sessionId: String): String =\n    try {\n      if sessionId.nonEmpty then \"Student successfully enrolled\"\n      else throw new Exception(\"Invalid session ID\")\n    } catch {\n      case _: Exception => \"Enrollment failed due to invalid session\"\n    }\n"}
{"id":"5a1fe9bf-b73a-47ea-b8e7-029865638aa4","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Feedback(rating: Int, comment: String)\nobject FeedbackHandler:\n  def submitFeedback(feedback: Feedback): Either[String, Feedback] =\n    if feedback.rating < 1 || feedback.rating > 5 then Left(\"Rating must be from 1 to 5\")\n    else Right(feedback)\n"}
{"id":"2fd81265-cc7f-4059-b31d-aeae39b8a330","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object LessonMaterialDownloader:\n  def downloadMaterial(materialId: String): String = {\n    try {\n      if materialId == \"mat101\" then \"Material Content\"\n      else throw new Exception(\"Material not found\")\n    } catch {\n      case _: Exception => \"Download error: Material missing\"\n    }\n  }\n"}
{"id":"c2cd5e77-f238-4c13-b113-06a5a976cb2e","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"object BookingService:\n  def isTimeSlotAvailable(slot: Int): Option[Int] =\n    if slot >= 9 && slot <= 17 then Some(slot)\n    else None\n"}
{"id":"4b667462-69e5-434d-8cb5-bb08874176e3","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"case class Tutor(id: Int, subject: String)\nobject TutorService:\n  def findTutorOrFail(subject: String): Tutor =\n    if subject == \"Math\" then Tutor(5, \"Math\")\n    else throw new RuntimeException(\"Tutor for subject not found\")\n"}
{"id":"0927db38-4101-4162-879c-d93af2f133b5","timestamp":1746100184815,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait LoginError\ncase object UserNotFound extends LoginError\ncase object IncorrectPassword extends LoginError\nobject Authentication:\n  def login(username: String, pwd: String): Either[LoginError, String] =\n    if username != \"student1\" then Left(UserNotFound)\n    else if pwd != \"pass123\" then Left(IncorrectPassword)\n    else Right(\"Login Successful\")\n"}
{"id":"0d65c78e-fc1e-455c-881d-ca96c491dcfa","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object TutorRegistration:\n  def registerTutor(name: String, email: String): String = {\n    try {\n      if email.nonEmpty && name.nonEmpty then \"Registration completed.\"\n      else throw new IllegalArgumentException(\"Missing registration info\")\n    } catch {\n      case e: Exception => s\"Registration error: ${e.getMessage}\"\n    }\n  }\n"}
{"id":"f5deaaa9-3ddf-4db5-b582-1d361287f078","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"import scala.util.Try\nobject ResourceManager:\n  def openResource(path: String): Try[String] =\n    Try {\n      if path.contains(\"courses\") then \"Resource opened\"\n      else throw new Exception(\"Unavailable resource\")\n    }\n"}
{"id":"c5ed7041-3b05-42e4-be34-4da939c6b870","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class SessionBookingException(msg: String) extends Exception(msg)\nobject SessionBooker:\n  def bookSession(studentId: Int, slot: Int): String = {\n    if studentId <= 0 then throw new SessionBookingException(\"Invalid student ID\")\n    if slot < 9 || slot > 17 then throw new SessionBookingException(\"Slot unavailable\")\n    \"Booking successful\"\n  }\n"}
{"id":"3eb53dc0-b727-4da9-8643-c5432da5ba67","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"object QuizSubmission:\n  def submitAnswer(answer: String): Option[String] =\n    if answer.nonEmpty then Some(\"Answer submitted successfully\")\n    else None\n"}
{"id":"ec0cd4da-a5be-4647-a494-d926eff926d0","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"case class Course(id: Int, title: String)\nobject CourseFinder:\n  def findCourseOrThrow(title: String): Course =\n    if title == \"Scala Programming\" then Course(101, title)\n    else throw new NoSuchElementException(\"Course not found\")\n"}
{"id":"a1005dab-d629-417b-a2a6-c287023e9514","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait SessionError\ncase object InvalidSessionTime extends SessionError\ncase object SessionClash extends SessionError\nobject SessionScheduler:\n  def scheduleSession(time: Int): Either[SessionError, Int] =\n    if time < 8 || time > 20 then Left(InvalidSessionTime)\n    else if time == 15 then Left(SessionClash)\n    else Right(time)\n"}
{"id":"c9e9ccbd-a045-4c0d-a8e7-4a372c3e6a6a","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object CalendarUpdater:\n  def updateCalendar(tutorId: Int, slot: Int): String = {\n    try {\n      if slot >= 9 && slot <= 17 then \"Calendar updated\"\n      else throw new Exception(\"Chosen slot unavailable\")\n    } catch {\n      case ex: Exception => ex.getMessage\n    }\n  }\n"}
{"id":"c71f8283-7fe0-4ccf-b00c-59576e1c65db","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"import scala.util.Try\nobject LessonReviewRetriever:\n  def getReviewSummary(sessionId: String): Try[String] =\n    Try {\n      if sessionId == \"S123\" then \"Excellent session reviews\"\n      else throw new Exception(\"No reviews found\")\n    }\n"}
{"id":"1699086b-a013-4607-adbf-8be6186ed17f","timestamp":1746100184816,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"object VideoCallLauncher:\n  def launchCall(roomId: String): String = {\n    try {\n      if roomId.startsWith(\"room\") then \"Call started\"\n      else throw new Exception(\"Invalid room ID\")\n    } catch {\n      case e: Exception => s\"Call failed: ${e.getMessage}\"\n    }\n  }\n"}
{"id":"1b1e5c13-4b88-45e0-9917-55030d75f83a","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class StudentProfile(id: Int, name: String)\ncase object ProfileNotFound\n\ndef getStudentProfile(profileId: Int): Option[StudentProfile] = \n  if profileId == 12 then Some(StudentProfile(12, \"Sara\"))\n  else None\n\nval profileOpt = getStudentProfile(99)\nprofileOpt match\n  case Some(p) => println(\"Profile loaded: \" + p.name)\n  case None => println(\"Student not found.\")"}
{"id":"591d4058-93d8-49c3-891b-879cce7ea26b","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class ScheduleConflictException(msg: String) extends Exception(msg)\n\ndef bookSession(teacherId: Int, start: Int, end: Int): Unit = {\n  if (start >= end) throw new ScheduleConflictException(\"Invalid session times\")\n  println(\"Session booked!\")\n}\n\ntry {\n  bookSession(4, 15, 10)\n} catch {\n  case e: ScheduleConflictException =>\n    println(\"Error: \" + e.getMessage)\n}"}
{"id":"17b83425-5e53-4bec-bf26-c12f66c0969e","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait SessionBookingError\ncase object NoTutorAvailable extends SessionBookingError\ncase object InvalidSessionDetails extends SessionBookingError\ncase class BookingSuccess(sessionId: Int)\n\ndef createSession(tutorId: Int, timeSlot: Int): Either[SessionBookingError, BookingSuccess] =\n  if tutorId <= 0 then Left(NoTutorAvailable)\n  else if timeSlot <= 0 then Left(InvalidSessionDetails)\n  else Right(BookingSuccess(sessionId = 321))\n\nval sessionResult = createSession(0, 11)\nsessionResult match\n  case Right(s) => println(\"Session confirmed: \" + s.sessionId)\n  case Left(e) => println(e)"}
{"id":"1e863509-3393-46ef-8d2b-8eb543461ba5","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class InvalidReviewException(msg: String) extends RuntimeException(msg)\n\ndef addTutorReview(tutorId: Int, rating: Int): Unit = {\n  if (rating < 1 || rating > 5) throw new InvalidReviewException(\"Rating should be 1 to 5.\")\n  println(\"Review submitted.\")\n}\n\ntry {\n  addTutorReview(89, 0)\n} catch {\n  case e: InvalidReviewException => println(\"Invalid rating!\")\n}"}
{"id":"06f05986-9e3c-46a0-a444-2cb7bd6b0b8d","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseLessonDuration(input: String): Try[Int] = \n  Try(input.toInt)\n\nval durationTry = parseLessonDuration(\"45\")\ndurationTry.foreach(d => println(s\"Duration: $d min\"))"}
{"id":"a6a10097-d5d7-46a4-b38a-2cf70197f1c8","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def findTutorByName(name: String): String = {\n  if (name == \"\") throw new IllegalArgumentException(\"Name must not be empty\")\n  \"Dr. Jane\"\n}\n\ntry {\n  val tutor = findTutorByName(\"\")\n  println(tutor)\n} catch {\n  case _: IllegalArgumentException => println(\"Invalid tutor name.\")\n}"}
{"id":"31dc701d-4072-413b-8b34-9c00eef60cfb","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait FeedbackValidationError\ncase object FeedbackTooShort extends FeedbackValidationError\ncase object FeedbackSuccess\n\ndef validateFeedback(feedback: String): Either[FeedbackValidationError, FeedbackSuccess.type] =\n  if feedback.length < 10 then Left(FeedbackTooShort)\n  else Right(FeedbackSuccess)\n\nval result = validateFeedback(\"Good.\")\nprintln(result.fold(_ => \"Feedback too short.\", _ => \"Thanks for your feedback!\"))"}
{"id":"df8c29e8-c4ce-4a60-b226-ec2b29de86f4","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class SessionNotFoundException(msg: String) extends Exception(msg)\n\ndef getSessionDetails(sessionId: Int): String = {\n  if (sessionId != 1001) throw new SessionNotFoundException(\"Session not found.\")\n  \"Mathematics - Algebra I\"\n}\n\ntry {\n  val session = getSessionDetails(1002)\n  println(session)\n} catch {\n  case e: SessionNotFoundException => println(e.getMessage)\n}"}
{"id":"0b2287cd-5ea7-4daf-8f3a-0cd087784b82","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def safeLessonPrice(input: String): Either[String, Double] =\n  try\n    Right(input.toDouble)\n  catch\n    case _: NumberFormatException => Left(\"Invalid price format.\")\n\nval priceResult = safeLessonPrice(\"19.99\")\nprintln(priceResult)"}
{"id":"3ebfc06b-9224-4b42-a264-3a41c88f31cd","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def enrollInCourse(courseCode: String): String = {\n  if (courseCode.isEmpty) throw new Exception(\"Course code required\")\n  \"Enrolled in course\"\n}\n\ntry {\n  val s = enrollInCourse(\"\")\n  println(s)\n} catch {\n  case e: Exception => println(\"Enrollment failed: \" + e.getMessage)\n}"}
{"id":"7af25142-8485-41e0-b1f1-98b6029e0902","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait PasswordChangeError\ncase object WeakPassword extends PasswordChangeError\ncase object PasswordChangeSuccess\n\ndef changePassword(studentId: Int, password: String): Either[PasswordChangeError, PasswordChangeSuccess.type] =\n  if password.length < 6 then Left(WeakPassword)\n  else Right(PasswordChangeSuccess)\n\nprintln(changePassword(200, \"cat12\"))"}
{"id":"998ee396-7f45-4d67-8e1a-0e2624bd6e41","timestamp":1746100211512,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class UnauthorizedAccessException(msg: String) extends Exception(msg)\n\ndef accessReport(userRole: String): String = {\n  if (userRole != \"admin\") throw new UnauthorizedAccessException(\"Access denied\")\n  \"Report Data\"\n}\n\ntry {\n  println(accessReport(\"student\"))\n} catch {\n  case e: UnauthorizedAccessException => println(e.getMessage)\n}"}
{"id":"10f10557-75e7-4dc3-9862-25585d1c34e4","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseStudentAge(ageStr: String): Try[Int] = Try(ageStr.toInt)\n\nval parsedAge = parseStudentAge(\"seventeen\").recover {\n  case _ => 18\n}\nprintln(parsedAge.get)"}
{"id":"a40aa655-3ca0-48c5-bc9e-cab38e7feeb2","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def submitAssignment(studentId: Int, fileContent: String): String = {\n  if (studentId <= 0) throw new Exception(\"Invalid student ID\")\n  if (fileContent.isEmpty) throw new Exception(\"File is empty\")\n  \"Assignment submitted\"\n}\n\ntry {\n  submitAssignment(-1, \"My Answers\")\n} catch {\n  case e: Exception => println(\"Submission failed: \" + e.getMessage)\n}"}
{"id":"b6d47dab-d7c2-4ac2-a9b3-dd22bedcd505","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"sealed trait SessionCancelError\ncase object SessionAlreadyStarted extends SessionCancelError\ncase object CancelSuccess\n\ndef cancelSession(sessionId: Int, started: Boolean): Either[SessionCancelError, CancelSuccess.type] =\n  if started then Left(SessionAlreadyStarted)\n  else Right(CancelSuccess)\n\nprintln(cancelSession(104, started = true))"}
{"id":"b36e81dd-f370-4450-ac4d-7199391d1506","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getTutorRating(tutorId: Int): Double = {\n  if (tutorId < 10) throw new RuntimeException(\"Tutor not found\")\n  4.8\n}\n\ntry {\n  println(getTutorRating(5))\n} catch {\n  case e: RuntimeException => println(\"Problem: \" + e.getMessage)\n}"}
{"id":"c4327057-ba0c-4d47-a1da-fc2d64ba1775","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class TutorNotFound(name: String)\n\ndef lookupTutor(name: String): Either[TutorNotFound, String] =\n  if name == \"\" then Left(TutorNotFound(\"No tutor\"))\n  else Right(\"Tutor profile available\")\n\nlookupTutor(\"\") match\n  case Left(TutorNotFound(msg)) => println(msg)\n  case Right(profile) => println(profile)"}
{"id":"ef47d3b1-63bd-4921-8e85-8e38010ec63c","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def updateCourseSchedule(courseId: Int, date: String): String = {\n  if (courseId <= 0) throw new Exception(\"Invalid course ID\")\n  if (date == \"\") throw new Exception(\"Date required\")\n  \"Schedule updated\"\n}\n\ntry {\n  updateCourseSchedule(0, \"2024-06-01\")\n} catch {\n  case e: Exception => println(\"Schedule update failed\")\n}"}
{"id":"9b9847d6-93f5-47e7-9f5a-50963b462f2d","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class PaymentError(reason: String)\n\ndef processPayment(amount: Double): Either[PaymentError, String] =\n  if amount <= 0 then Left(PaymentError(\"Non-positive amount\"))\n  else Right(\"Payment processed successfully\")\n\nval paymentResult = processPayment(-8.0)\npaymentResult.fold(err => println(err.reason), msg => println(msg))"}
{"id":"68e6d4bb-6d8d-4faf-aab4-12018fda22b7","timestamp":1746100211513,"category":"throws","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def sendNotification(studentEmail: String): Unit = {\n  if (!studentEmail.contains(\"@\")) throw new Exception(\"Not a valid email\")\n  println(s\"Notification sent to $studentEmail\")\n}\n\ntry {\n  sendNotification(\"noemail\")\n} catch {\n  case e: Exception => println(\"Notification failed.\")\n}"}
{"id":"4310e253-75d2-40c1-938c-83e9823b8a21","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(id: Int, price: Double)\nsealed trait ListingSearchError\ncase object ListingNotFound extends ListingSearchError\n\ndef findListingById(id: Int, listings: List[Listing]): Either[ListingSearchError, Listing] =\n  listings.find(_.id == id).toRight(ListingNotFound)"}
{"id":"a8ff9d8d-9c4d-4682-aafc-434773f107e0","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(id: Int, bedrooms: Int)\n\ndef filterByBedrooms(bedrooms: Int, listings: List[Listing]): Option[List[Listing]] =\n  val filtered = listings.filter(_.bedrooms == bedrooms)\n  Option.when(filtered.nonEmpty)(filtered)"}
{"id":"5d39c9cb-11e4-4fcb-a1c4-751702e031cb","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Location(lat: Double, lon: Double)\ncase class GeoError(message: String)\n\ndef validateLocation(location: Location): Either[GeoError, Location] =\n  if location.lat >= -90 && location.lat <= 90 && location.lon >= -180 && location.lon <= 180 then\n    Right(location)\n  else\n    Left(GeoError(\"Invalid coordinates\"))"}
{"id":"af63f2af-6cfa-443b-a75e-04c2566afffb","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseListingId(str: String): Try[Int] =\n  Try(str.toInt)"}
{"id":"5368aafe-7352-4453-a8bb-2b5011ea2a55","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(title: String, description: String)\n\ndef findListingByKeyword(keyword: String, listings: List[Listing]): Option[Listing] =\n  listings.find(l => l.title.contains(keyword) || l.description.contains(keyword))"}
{"id":"7b63d744-de15-4172-8ce1-91cf84c82c6e","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait PriceValidationError\ncase class PriceBelowMinimum(min: Double) extends PriceValidationError\ncase object PriceNotPositive extends PriceValidationError\n\ndef checkPrice(price: Double): Either[PriceValidationError, Double] =\n  if price <= 0 then Left(PriceNotPositive)\n  else if price < 50000 then Left(PriceBelowMinimum(50000))\n  else Right(price)"}
{"id":"ba45d80a-18a8-4eb9-b48c-052c0273f363","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\ncase class Listing(id: Int, name: String)\n\ndef safeGetListingName(listing: Option[Listing]): Try[String] =\n  Try(listing.get.name)"}
{"id":"36ffe878-429e-47b3-a4b5-1fe062caef79","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def parsePrice(price: String): Option[Double] =\n  scala.util.Try(price.toDouble).toOption"}
{"id":"b2c2021a-40ba-4746-85cd-713429290c73","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait ListingSearchError\ncase class CityNotFound(city: String) extends ListingSearchError\ncase class InvalidCityName(name: String) extends ListingSearchError\n\ncase class Listing(city: String, price: Double)\n\ndef listingsForCity(city: String, listings: List[Listing]): Either[ListingSearchError, List[Listing]] =\n  if city.trim.isEmpty then Left(InvalidCityName(city))\n  else\n    val filtered = listings.filter(_.city == city)\n    if filtered.isEmpty then Left(CityNotFound(city))\n    else Right(filtered)"}
{"id":"0411d285-cb70-404d-8741-c31da9803a30","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(id: Int, sqft: Int)\n\ndef validateSquareFootage(sqft: Int): Option[Int] =\n  Option.when(sqft >= 200)(sqft)"}
{"id":"d5cb5014-c1a5-4238-b00e-faa2aa846128","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class ListingNotFoundException(msg: String) extends Exception(msg)\n\ncase class Listing(id: Int)\n\ndef getListingByIdOrThrow(id: Int, listings: List[Listing]): Listing =\n  listings.find(_.id == id).getOrElse(throw new ListingNotFoundException(s\"Listing $id not found\"))"}
{"id":"5ccf0fe0-ba36-412f-b4ba-478e3b292960","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def priceToDouble(price: String): Double =\n  try {\n    price.toDouble\n  } catch {\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Price must be numeric\")\n  }"}
{"id":"b70381ba-ac21-4cb6-bc2a-2e928e1dc441","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class InvalidSearchCriteriaException(msg: String) extends Exception(msg)\n\ncase class SearchCriteria(minPrice: Double)\n\ndef checkCriteria(criteria: SearchCriteria): SearchCriteria =\n  if criteria.minPrice < 0 then throw new InvalidSearchCriteriaException(\"Negative price not allowed\")\n  else criteria"}
{"id":"83493a5b-44c6-415e-8a56-a66d9c085a71","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def parseBedrooms(strBedrooms: String): Int =\n  try {\n    strBedrooms.toInt\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Unable to parse number of bedrooms\")\n  }"}
{"id":"89d10126-bb04-48f7-b19b-849a53dd1706","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getListingsByZip(zip: String, listings: List[(String, String)]): List[(String, String)] =\n  try {\n    listings.filter(l => l._2 == zip)\n  } catch {\n    case _: Exception => throw new Exception(\"Listing search by zip failed\")\n  }"}
{"id":"b7ba4f8a-891b-47d2-a583-ff68acd11fe5","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def safeGetFirstListing(listings: List[String]): String =\n  try {\n    listings.head\n  } catch {\n    case _: NoSuchElementException => throw new IllegalStateException(\"No listings available\")\n  }"}
{"id":"0342317b-f759-4205-a64f-560719fc1cd7","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def ensureLocationIsNotEmpty(location: String): String =\n  if location.isEmpty then throw new IllegalArgumentException(\"Location cannot be empty\")\n  else location"}
{"id":"97913a66-0bff-41a6-acc6-da8df5df8559","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class ListingStatusException(msg: String) extends Exception(msg)\n\ndef checkListingStatus(status: String): Unit =\n  if status != \"active\" && status != \"pending\" then\n    throw new ListingStatusException(\"Invalid listing status\")"}
{"id":"4a3df02a-7e8f-4fc1-9b83-13e518ae94e5","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getListingOrThrow(listings: Map[Int, String], id: Int): String =\n  listings.get(id) match {\n    case Some(title) => title\n    case None => throw new NoSuchElementException(s\"Listing $id not found\")\n  }"}
{"id":"49c59320-1016-4df5-9a77-9d2bfff66bf0","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def searchListingByCity(listings: List[(String, String)], city: String): String =\n  try {\n    listings.find(_._2 == city).map(_._1).get\n  } catch {\n    case _: NoSuchElementException => throw new Exception(\"No listings in city\")\n  }"}
{"id":"50295eb8-3713-4bb2-89e4-9d61fdef2a83","timestamp":1746100229946,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def validatePriceRange(min: Double, max: Double): Unit =\n  if min < 0 || max < 0 then throw new IllegalArgumentException(\"Price range must be non-negative\")\n  if min > max then throw new Exception(\"Minimum price cannot be greater than maximum price\")"}
{"id":"c92f883d-e7b8-4f91-893d-d0b4eeea9ddc","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(id: Int, address: String, price: Double)\nsealed trait ListingSearchError\ncase object ListingNotFound extends ListingSearchError\ncase object InvalidListingId extends ListingSearchError\n\ndef findListingById(listings: List[Listing], id: Int): Either[ListingSearchError, Listing] =\n  if id < 0 then Left(InvalidListingId)\n  else listings.find(_.id == id).toRight(ListingNotFound)"}
{"id":"58804194-2c03-4c17-9952-1300d3ec824b","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class ListingNotFoundException(message: String) extends Exception(message)\ndef getListingByIdUnsafe(listings: List[Listing], id: Int): Listing = {\n  val listing = listings.find(_.id == id)\n  if (listing.isDefined) listing.get\n  else throw new ListingNotFoundException(s\"Listing with id $id not found.\")\n}"}
{"id":"e240f517-b3a5-4297-bf81-1a252b922193","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait SearchValidationError\ncase object EmptyLocationQuery extends SearchValidationError\ncase object PriceRangeInvalid extends SearchValidationError\n\ndef validateSearchParams(location: String, minPrice: Double, maxPrice: Double): Option[SearchValidationError] =\n  if location.trim.isEmpty then Some(EmptyLocationQuery)\n  else if minPrice > maxPrice then Some(PriceRangeInvalid)\n  else None"}
{"id":"09dc2eda-0f05-4ed4-bb7b-57e345de410d","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def parseListingPrice(priceStr: String): Double = {\n  try {\n    priceStr.toDouble\n  } catch {\n    case _: NumberFormatException =>\n      throw new IllegalArgumentException(\"Invalid price value.\")\n  }\n}"}
{"id":"0839480a-f668-4832-96b9-e84ca63c3f9c","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\ndef safeParsePrice(priceStr: String): Option[Double] =\n  Try(priceStr.toDouble).toOption"}
{"id":"0bdc3984-9be2-4126-9945-f5a478da53ba","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def searchListings(location: String, listings: List[Listing]): List[Listing] = {\n  try {\n    val trimmed = location.trim\n    if (trimmed.isEmpty) throw new Exception(\"Location must not be empty.\")\n    listings.filter(_.address.contains(trimmed))\n  } catch {\n    case e: Exception => Nil\n  }\n}"}
{"id":"a55567c2-dc5e-4cd8-aac9-b40df2dec807","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\ndef filterListingByMinArea(area: String, min: Double): Try[Double] =\n  Try(area.toDouble).filter(_ >= min)"}
{"id":"89c25e76-0e38-4aae-bf7b-c296863c9300","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def unsafeGetFirstListing(listings: List[Listing]): Listing = {\n  try {\n    listings.head\n  } catch {\n    case _: NoSuchElementException =>\n      throw new RuntimeException(\"No listings available.\")\n  }\n}"}
{"id":"c0c1d553-dd4a-45b5-af5f-5ac368955047","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait QueryParamError\ncase object InvalidBedrooms extends QueryParamError\n\ndef validateBedroomQuery(bedrooms: Int): Either[QueryParamError, Int] =\n  if bedrooms >= 0 then Right(bedrooms)\n  else Left(InvalidBedrooms)"}
{"id":"a68ea394-55c5-4224-ac95-75ba6e6a835b","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getListingPriceOrFail(listing: Listing): Double = {\n  if (listing.price <= 0) throw new IllegalArgumentException(\"Listing price must be positive.\")\n  listing.price\n}"}
{"id":"efe81342-cfd9-4dab-ad9d-03fd2073bb80","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeGetFirstAddress(listings: List[Listing]): Option[String] =\n  listings.headOption.map(_.address)"}
{"id":"9830a75d-6f7f-4e2b-a959-399dd60a08eb","timestamp":1746100245493,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def parseAreaInput(areaStr: String): Double = {\n  try {\n    areaStr.toDouble\n  } catch {\n    case _: Exception => throw new IllegalArgumentException(\"Cannot parse area value.\")\n  }\n}"}
{"id":"49fb1665-d7c2-4d26-a432-4d890bd49516","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait ListingFilterError\ncase object NegativeRoomCount extends ListingFilterError\ncase object ExceedsMaxRooms extends ListingFilterError\n\ndef filterByRoomCount(roomCount: Int, maxRooms: Int): Either[ListingFilterError, Int] =\n  if roomCount < 0 then Left(NegativeRoomCount)\n  else if roomCount > maxRooms then Left(ExceedsMaxRooms)\n  else Right(roomCount)"}
{"id":"456a0263-54ad-4b17-87b8-7501a72b3409","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def parseZipCode(zipStr: String): Int = {\n  try {\n    zipStr.toInt\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Invalid ZipCode format.\")\n  }\n}"}
{"id":"90b7fdf6-ebd9-4049-b371-644b2036bfb3","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def safeFindListingsByType(listings: List[Listing], listingType: String): Option[List[Listing]] =\n  Option.when(listings.nonEmpty && listingType.nonEmpty) {\n    listings.filter(_.address.contains(listingType))\n  }"}
{"id":"dab84a66-8175-4ed6-bcd1-f355f5aa3126","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def validateBathrooms(bathrooms: Int): Int = {\n  if (bathrooms < 0) {\n    throw new IllegalArgumentException(\"Bathroom count cannot be negative.\")\n  }\n  bathrooms\n}"}
{"id":"c6784eb0-fdd8-468f-9cb1-b7a8a47c4836","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"sealed trait PriceValidationError\ncase object TooLow extends PriceValidationError\ncase object TooHigh extends PriceValidationError\n\ndef validateListingPrice(price: Double): Either[PriceValidationError, Double] =\n  if price < 50000 then Left(TooLow)\n  else if price > 5000000 then Left(TooHigh)\n  else Right(price)"}
{"id":"0e83eea5-6bdd-4f4a-9d08-0a01496070d8","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getSellerContact(listing: Listing): String = {\n  if (listing.address == \"\") throw new Exception(\"Listing address missing, cannot fetch contact.\")\n  \"contact@example.com\"\n}"}
{"id":"f351aa77-9dfd-47ce-898c-7ecd34acc909","timestamp":1746100245494,"category":"throws","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safelyFilterByPrice(listings: List[Listing], min: Double): Try[List[Listing]] =\n  Try(listings.filter(_.price >= min))"}
{"id":"60934826-6071-4af1-b56a-f9c67c7d7de1","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class TransactionId(value: String)\ncase class WalletBalance(amount: BigDecimal)\ndef getWalletBalance(walletId: String): Either[String, WalletBalance] = {\n  if walletId.startsWith(\"0x\") then\n    Right(WalletBalance(BigDecimal(42)))\n  else\n    Left(\"Invalid wallet address format\")\n}"}
{"id":"3f8eb04f-408f-4bd5-a8dc-3913ceb17871","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def getWalletAddress(userId: Int): String = {\n  if userId < 0 then throw new IllegalArgumentException(\"User ID cannot be negative\")\n  \"0xC0ffeeUser\" + userId\n}\n\ndef safeGetWalletAddress(userId: Int): String = {\n  try getWalletAddress(userId)\n  catch {\n    case e: IllegalArgumentException => \"INVALID\"\n  }\n}"}
{"id":"855dfcdd-8f93-44bd-9e95-3fd5820311f4","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait WalletError\ncase object InsufficientFunds extends WalletError\ncase class InvalidRecipient(recipient: String) extends WalletError\n\ndef sendCoins(sender: String, recipient: String, amount: BigDecimal): Either[WalletError, String] = {\n  if recipient.isEmpty then Left(InvalidRecipient(recipient))\n  else if amount > 100 then Left(InsufficientFunds)\n  else Right(\"TransactionHash123abc\")\n}"}
{"id":"b92a9767-6094-485f-a690-6afa4377b110","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class FundsLockedException(walletId: String) extends Exception(s\"Funds locked for wallet $walletId\")\n\ndef withdrawAll(walletId: String): BigDecimal = {\n  throw new FundsLockedException(walletId)\n}\n\ntry withdrawAll(\"0xLocked\")\ncatch {\n  case e: FundsLockedException => 0\n}"}
{"id":"b189ebb4-0b93-455d-a17b-5976a74113d9","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"import scala.util.Try\n\ndef decodePrivateKey(encodedKey: String): Try[Array[Byte]] = Try {\n  java.util.Base64.getDecoder.decode(encodedKey)\n}"}
{"id":"fb9e4850-f8b6-48bb-88de-7db416ea18ad","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def fetchTransaction(transactionHash: String): String = {\n  if transactionHash.length != 64 then throw new RuntimeException(\"Invalid transaction hash format\")\n  \"TransactionDataFor:\" + transactionHash\n}\n\ndef safeFetchTransaction(hash: String): String = {\n  try fetchTransaction(hash) \n  catch {\n    case _: RuntimeException => \"INVALID_HASH\"\n  }\n}"}
{"id":"039d1239-f209-4a5e-b4a7-4209dfe88ae3","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait AddressValidationError\ncase object EmptyAddress extends AddressValidationError\ncase object InvalidChecksum extends AddressValidationError\n\ndef validateWalletAddress(address: String): Either[AddressValidationError, String] = {\n  if address.isEmpty then Left(EmptyAddress)\n  else if !address.startsWith(\"0x\") then Left(InvalidChecksum)\n  else Right(address)\n}"}
{"id":"c8fa7ffd-dbdc-4b31-b115-3f9dd01c4c6c","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class PrivateKeyFormatException(msg: String) extends Exception(msg)\n\ndef importPrivateKey(privKey: String): Array[Byte] = {\n  if privKey.length < 64 then \n    throw new PrivateKeyFormatException(\"Private key too short\")\n  privKey.getBytes\n}\n\ntry importPrivateKey(\"deadbeef\")\ncatch {\n  case e: PrivateKeyFormatException => \n    Array.emptyByteArray\n}"}
{"id":"7976be2c-653e-4cde-be27-580df44a88dd","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def getMnemonicSeed(phrase: String): Option[Array[Byte]] = {\n  if phrase.split(\" \").length >= 12 then Some(phrase.getBytes)\n  else None\n}"}
{"id":"6fae97ac-a61c-4074-a8c2-d94758fcd5b1","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def unlockWallet(walletPass: String): String = {\n  if walletPass.isEmpty then throw new Exception(\"Password required\")\n  \"WalletUnlocked\"\n}\n\ndef tryUnlockWallet(walletPass: String): String = {\n  try unlockWallet(walletPass)\n  catch {\n    case _: Exception => \"FAILED\"\n  }\n}"}
{"id":"4eb816f3-b1fb-4ef6-8986-f73c834bfd17","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseTransactionAmount(amountStr: String): Try[BigDecimal] = Try {\n  BigDecimal(amountStr)\n}"}
{"id":"a0bd2009-cc68-4009-a32d-56b7d5136354","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def signTransaction(transaction: String, privateKey: String): String = {\n  if privateKey.length != 64 then throw new RuntimeException(\"Invalid private key length\")\n  sSIGNED:${transaction}:${privateKey}\n}\n\ndef guardedSignTransaction(transaction: String, privateKey: String): String = {\n  try signTransaction(transaction, privateKey)\n  catch {\n    case _: RuntimeException => \"SIGNING_FAILED\"\n  }\n}"}
{"id":"212304ec-0f2e-4c77-b942-0fb75918ee77","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait DecryptError\ncase object EmptyCipherText extends DecryptError\ncase object WrongPassphrase extends DecryptError\n\ndef decryptWalletBackup(cipher: String, passphrase: String): Either[DecryptError, String] = {\n  if cipher.isEmpty then Left(EmptyCipherText)\n  else if passphrase != \"correct horse battery staple\" then Left(WrongPassphrase)\n  else Right(\"DecryptedWalletData\")\n}"}
{"id":"e953ac8e-5fef-4695-8610-26217d026d48","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletMigrationException(reason: String) extends Exception(reason)\n\ndef migrateWallet(walletId: String, targetFormat: String): String = {\n  if targetFormat != \"v2\" then throw new WalletMigrationException(\"Target format not supported\")\n  \"MigrationSuccessful\"\n}\n\ntry migrateWallet(\"0xAbe\", \"v1\")\ncatch {\n  case e: WalletMigrationException => \"MIGRATION_FAILED\"\n}"}
{"id":"d885c67d-38b7-4a5c-b10f-22bbbaa38b56","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait RestoreError\ncase object InvalidSeedPhrase extends RestoreError\ncase object WalletAlreadyExists extends RestoreError\n\ndef restoreFromSeed(seedPhrase: String): Either[RestoreError, String] = {\n  if seedPhrase.trim.isEmpty then Left(InvalidSeedPhrase)\n  else if seedPhrase == \"already used\" then Left(WalletAlreadyExists)\n  else Right(\"WalletRestored\")\n}"}
{"id":"f13c74a9-d84d-446a-a73d-46b990d38488","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def deleteWallet(walletId: String): Boolean = {\n  if walletId.contains(\"bad\") then throw new Exception(\"Deletion not allowed\")\n  true\n}\n\ndef softDeleteWallet(walletId: String): Boolean = {\n  try deleteWallet(walletId)\n  catch {\n    case _: Exception => false\n  }\n}"}
{"id":"d4b511a9-3ad7-4c61-b594-e20d2bf3630d","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseWalletBackup(backup: String): Try[Array[Byte]] = Try {\n  if backup.nonEmpty then backup.getBytes else throw new Exception(\"Backup empty\")\n}"}
{"id":"9636645d-24f9-4ec6-aa7b-aadc78823bf4","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class InvalidSignatureException(sig: String) extends Exception(s\"Invalid signature: $sig\")\n\ndef verifySignature(transaction: String, signature: String): Boolean = {\n  if signature != \"VALIDSIG\" then throw new InvalidSignatureException(signature)\n  true\n}\n\ntry verifySignature(\"tx123\", \"BADSIG\")\ncatch {\n  case e: InvalidSignatureException => false\n}"}
{"id":"103db914-0312-4e7a-834e-9b7d1221d67d","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait NetworkError\ncase object ConnectionTimeout extends NetworkError\ncase object NodeNotReachable extends NetworkError\n\ncase class Node(host: String)\ndef connectToNode(node: Node): Either[NetworkError, String] = {\n  if node.host == \"timeout\" then Left(ConnectionTimeout)\n  else if node.host == \"unreachable\" then Left(NodeNotReachable)\n  else Right(\"Connected\")\n}"}
{"id":"d3adf537-cc16-46e6-a0b6-b5e030964135","timestamp":1746100271806,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def fetchWalletLabel(walletId: String): String = {\n  if walletId == \"\" then throw new Exception(\"Wallet ID missing\")\n  \"Personal Wallet\"\n}\n\ndef getLabelOrDefault(walletId: String, fallback: String): String = {\n  try fetchWalletLabel(walletId)\n  catch {\n    case _: Exception => fallback\n  }\n}"}
{"id":"0f1b520b-38c7-4462-a25d-d47541e23dcd","timestamp":1746100299033,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletNotFound(walletId: String)\nsealed trait TransactionError\ncase class InvalidAmount(amount: BigDecimal) extends TransactionError\ncase class InsufficientFunds(balance: BigDecimal) extends TransactionError\ncase class Wallet(walletId: String, balance: BigDecimal)\ndef sendCrypto(sender: Wallet, recipient: Wallet, amount: BigDecimal): Either[TransactionError, (Wallet, Wallet)] = \n  if amount <= 0 then Left(InvalidAmount(amount))\n  else if sender.balance < amount then Left(InsufficientFunds(sender.balance))\n  else Right(\n    (sender.copy(balance = sender.balance - amount), recipient.copy(balance = recipient.balance + amount))\n  )"}
{"id":"dc217fbf-1f16-4004-8b65-ded9a9f49be8","timestamp":1746100299033,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class InvalidPrivateKeyFormat(privateKey: String)\ndef validatePrivateKey(privateKey: String): Either[InvalidPrivateKeyFormat, String] =\n  if privateKey.matches(\"[a-fA-F0-9]{64}\") then Right(privateKey)\n  else Left(InvalidPrivateKeyFormat(privateKey))"}
{"id":"98064933-caa8-42b1-b652-e9c13b82f449","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletLockedException extends Exception(\"Wallet is locked\")\nclass NotEnoughBalanceException extends Exception(\"Not enough balance\")\ncase class Wallet(balance: BigDecimal, locked: Boolean)\ndef withdrawFunds(wallet: Wallet, amount: BigDecimal): Wallet = {\n  if (wallet.locked) throw new WalletLockedException\n  if (wallet.balance < amount) throw new NotEnoughBalanceException\n  wallet.copy(balance = wallet.balance - amount)\n}"}
{"id":"ff7822c5-36ad-4b38-89ea-386cd5a6ec61","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def loadWallet(address: String): Option[String] =\n  if address.startsWith(\"0x\") && address.length == 42 then Some(address)\n  else None"}
{"id":"7e68f8af-3802-4f0b-ac22-8a93aef6f0f9","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait KeyDerivationError\ncase object MnemonicRequired extends KeyDerivationError\ndef getSeedFromMnemonic(mnemonicOpt: Option[String]): Either[KeyDerivationError, Array[Byte]] =\n  mnemonicOpt match\n    case Some(phrase) => Right(phrase.getBytes(\"UTF-8\"))\n    case None => Left(MnemonicRequired)"}
{"id":"a7eb850f-4973-4279-9dda-0120a63ad52a","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class CorruptedWalletFileException(path: String) extends Exception(s\"Corrupted wallet file at $path\")\ndef readWalletFile(path: String): String = {\n  if (path.endsWith(\".wallet\")) \"walletdata\"\n  else throw new CorruptedWalletFileException(path)\n}"}
{"id":"0e8e6e87-73f0-434e-a6a7-c5fd9d5b46f7","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def parseAmount(input: String): Option[BigDecimal] =\n  try Some(BigDecimal(input))\n  catch case _: NumberFormatException => None"}
{"id":"69df8dc7-69bb-4fd4-95e2-6a258bc992da","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class AddressFormatError(address: String)\ndef validateAddress(address: String): Either[AddressFormatError, String] =\n  if address.matches(\"0x[a-fA-F0-9]{40}\") then Right(address)\n  else Left(AddressFormatError(address))"}
{"id":"dd337131-0f0d-40f5-b8aa-deb0fe94b867","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class NetworkUnavailableException extends Exception(\"Network error occurred\")\ndef broadcastTransaction(rawTx: String): String = {\n  if (rawTx.nonEmpty) \"txid123\"\n  else throw new NetworkUnavailableException\n}"}
{"id":"82b7251d-b23b-4353-a954-1ab8a92331b0","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"case class Wallet(balance: BigDecimal)\nclass InsufficientFundsException(msg: String) extends Exception(msg)\ndef sendMaxAmount(wallet: Wallet): BigDecimal = {\n  if (wallet.balance <= 0) throw new InsufficientFundsException(\"No funds to send.\")\n  wallet.balance\n}"}
{"id":"21c5f693-4afc-44ae-a78a-4b3fa6b805cc","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class Wallet(address: String, unlocked: Boolean)\ndef unlockWallet(wallet: Wallet, passphrase: String): Option[Wallet] =\n  if passphrase == \"correct-horse-battery-staple\" then Some(wallet.copy(unlocked = true))\n  else None"}
{"id":"a7b8186f-ee61-4e6e-9fc5-0923689416cf","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class AddressNotFoundException(address: String) extends Exception(s\"Address $address not found\")\ndef removeAddress(addresses: List[String], target: String): List[String] = {\n  if (!addresses.contains(target)) throw new AddressNotFoundException(target)\n  addresses.filterNot(_ == target)\n}"}
{"id":"bbdcc7b0-4407-482e-84ad-b42b0aee15ba","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"sealed trait RecoveryPhraseError\ncase object PhraseTooShort extends RecoveryPhraseError\ndef checkRecoveryPhraseLength(phrase: List[String]): Either[RecoveryPhraseError, List[String]] =\n  if phrase.length >= 12 then Right(phrase)\n  else Left(PhraseTooShort)"}
{"id":"31b8fda3-794e-4faa-9fcc-7495dd10d611","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def decodeHex(str: String): Option[Array[Byte]] =\n  scala.util.Try(\n    BigInt(str, 16).toByteArray\n  ).toOption"}
{"id":"52af9c1a-4771-4e71-a53f-b6afbdcefc71","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class InvalidTransactionException(message: String) extends Exception(message)\ndef getTransactionFee(sizeInBytes: Int): Long = {\n  if (sizeInBytes <= 0) throw new InvalidTransactionException(\"Transaction size must be positive.\")\n  sizeInBytes * 10L\n}"}
{"id":"6128725c-7bfa-4b68-93d8-4c6dcecf8b20","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"case class Transaction(id: String, valid: Boolean)\nclass TransactionInvalidException extends Exception(\"Transaction validation failed.\")\ndef broadcastIfValid(tx: Transaction): String = {\n  if (!tx.valid) throw new TransactionInvalidException\n  s\"Broadcasted: ${tx.id}\"\n}"}
{"id":"a8c11e49-e851-4edd-849a-44990760fa8b","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class Wallet(address: String, balance: BigDecimal)\nsealed trait TransferError\ncase class AmountTooLow(amount: BigDecimal) extends TransferError\ncase class BalanceTooLow(balance: BigDecimal) extends TransferError\ndef transferTokens(sender: Wallet, receiver: Wallet, amount: BigDecimal): Either[TransferError, (Wallet, Wallet)] =\n  if amount < 0.0001 then Left(AmountTooLow(amount))\n  else if sender.balance < amount then Left(BalanceTooLow(sender.balance))\n  else Right(\n    (sender.copy(balance = sender.balance - amount), receiver.copy(balance = receiver.balance + amount))\n  )"}
{"id":"3eee9b46-057c-4fb4-af9d-d3bb066ccef9","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def getWalletNickname(walletId: String): Option[String] =\n  val nicknames = Map(\"1\" -> \"Main Wallet\", \"2\" -> \"Cold Storage\")\n  nicknames.get(walletId)"}
{"id":"c6199875-5b02-4e9a-853a-ea2c061ae1b8","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class UnsupportedCurrencyException(currency: String) extends Exception(s\"Unsupported currency: $currency\")\ndef getExchangeRate(currency: String): BigDecimal = {\n  currency match {\n    case \"BTC\" => BigDecimal(27000)\n    case \"ETH\" => BigDecimal(1900)\n    case _ => throw new UnsupportedCurrencyException(currency)\n  }\n}"}
{"id":"cde46167-c267-4aa2-a7b2-38310dfa132d","timestamp":1746100299034,"category":"throws","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def safeDecryptPrivateKey(encrypted: String, pass: String): scala.util.Try[String] =\n  scala.util.Try {\n    if (pass == \"letmein\") encrypted.reverse\n    else throw new Exception(\"Decryption failed\")\n  }"}
{"id":"0f4db888-ad97-402d-b36f-b4c53ad219da","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Product(identifier: String, stock: Int)\nsealed trait InventoryError\ncase object ProductNotFound extends InventoryError\ncase object InsufficientStock extends InventoryError\n\ndef withdrawStock(products: List[Product], id: String, qty: Int): Either[InventoryError, Product] =\n  products.find(_.identifier == id) match\n    case Some(product) if product.stock >= qty =>\n      Right(product.copy(stock = product.stock - qty))\n    case Some(_) =>\n      Left(InsufficientStock)\n    case None =>\n      Left(ProductNotFound)\n"}
{"id":"93b018da-67a4-45ee-9f6a-bc8989fb642a","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class InventorySystemException(message: String) extends Exception(message)\nclass ProductMissingException extends InventorySystemException(\"Product missing\")\n\nobject InventoryManager {\n  def findProduct(products: List[Product], id: String): Product = {\n    products.find(_.identifier == id) match {\n      case Some(prod) => prod\n      case None => throw new ProductMissingException\n    }\n  }\n}"}
{"id":"f071cf39-197f-4048-8762-47884f9f4289","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait TransactionError\ndeficit: Int)\ncase object InvalidTransactionAmount extends TransactionError\ncase class NotEnoughInventory(deficit: Int) extends TransactionError\n\ndef reserveProduct(stock: Int, amount: Int): Either[TransactionError, Int] =\n  if amount <= 0 then Left(InvalidTransactionAmount)\n  else if stock >= amount then Right(stock - amount)\n  else Left(NotEnoughInventory(amount - stock))\n"}
{"id":"c219806f-943c-4313-a8e0-57e6fdcb2966","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"object InventoryAlerts {\n  def notifyLowStock(stockLevel: Int): Unit = {\n    if (stockLevel < 10) throw new RuntimeException(\"Critical low stock level!\")\n  }\n  def monitorStock(stockLevel: Int): String = {\n    try {\n      notifyLowStock(stockLevel)\n      \"Stock sufficient\"\n    } catch {\n      case e: RuntimeException => \"Low stock warning issued\"\n    }\n  }\n}"}
{"id":"ca51a649-a998-4da4-942e-db4edefcde16","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait ValidationError\ncase object EmptySKUCode extends ValidationError\ncase object NegativeQuantity extends ValidationError\n\ndef validateStockUpdate(sku: String, qty: Int): Option[ValidationError] =\n  if sku.isEmpty then Some(EmptySKUCode)\n  else if qty < 0 then Some(NegativeQuantity)\n  else None\n"}
{"id":"2b5b2c34-ea0d-4830-bfb6-78847d836d54","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class OutOfWarehouseSpaceException extends Exception(\"Warehouse is full\")\n\nclass WarehouseSpaceManager(var availableSpace: Int) {\n  def addShipment(size: Int): Unit = {\n    if(size > availableSpace)\n      throw new OutOfWarehouseSpaceException\n    else\n      availableSpace -= size\n  }\n}\n"}
{"id":"6e2df4ab-0d81-4853-8651-3d0fcb15f1a3","timestamp":1746100320317,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef updateInventoryCount(current: Int, incoming: Int): Try[Int] =\n  Try {\n    if incoming < 0 then throw new IllegalArgumentException(\"Negative incoming shipment\")\n    else current + incoming\n  }\n"}
{"id":"9251f5cd-39be-4391-9ac9-6bb011ace39c","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def parseProductCode(code: String): Int = {\n  try {\n    code.toInt\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Invalid product code format\")\n  }\n}"}
{"id":"a8040652-e1c5-417b-b40b-206616b4e487","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait LocationError\ncase object MissingLocationLabel extends LocationError\n\ndef findLocation(label: String): Either[LocationError, String] =\n  if label.trim.isEmpty then Left(MissingLocationLabel)\n  else Right(s\"Shelf-${label.toUpperCase}\")\n"}
{"id":"3c636b14-26f6-4485-8220-dd4add4b699d","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def checkItemRemoval(stock: Int, qty: Int): Int = {\n  if(stock < qty) {\n    throw new RuntimeException(\"Not enough stock\")\n  } else {\n    stock - qty\n  }\n}"}
{"id":"b4584a42-a990-4cf9-9909-4fbefb4a3e53","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryLogError(reason: String)\n\ndef logInventoryChange(event: String): Either[InventoryLogError, String] =\n  if event.isBlank then Left(InventoryLogError(\"Empty event\"))\n  else Right(s\"Logged: $event\")\n"}
{"id":"47686125-c79e-4d9f-87dd-11e2ec240ba3","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class InvalidWarehouseSection extends Exception(\"Invalid warehouse section\")\n\nobject SectionValidator {\n  def validateSection(section: String): Unit = {\n    if (!section.matches(\"[A-Z]-\\d+\")) {\n      throw new InvalidWarehouseSection\n    }\n  }\n}\n"}
{"id":"35d0eec4-2183-4c9e-92e6-f97f4186bf8d","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"import scala.util.Try\ndef safeDecrement(stock: Int): Try[Int] =\n  Try {\n    require(stock > 0, \"Stock already zero\")\n    stock - 1\n  }\n"}
{"id":"d52ff6f7-c758-4e4d-94cc-41e63e734cb2","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class TransactionFailed(reason: String) extends Exception(reason)\n\ndef completeInventoryTransaction(inStock: Int, requested: Int): Int = {\n  if (requested > inStock) throw new TransactionFailed(\"Insufficient items\")\n  inStock - requested\n}\n"}
{"id":"34d58a45-99e0-45c4-97c3-18123600b8a0","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait RestockError\ncase object InvalidRestockAmount extends RestockError\ncase object Overstock extends RestockError\n\ndef processRestock(current: Int, add: Int, max: Int): Either[RestockError, Int] =\n  if add <= 0 then Left(InvalidRestockAmount)\n  else if current + add > max then Left(Overstock)\n  else Right(current + add)\n"}
{"id":"ccabb790-a1b6-466e-a241-2a9d00b956af","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"object DeleteProductOp {\n  def deleteProduct(products: List[Product], id: String): List[Product] = {\n    try {\n      if(products.exists(_.identifier == id)) {\n        products.filterNot(_.identifier == id)\n      } else {\n        throw new NoSuchElementException(\"Product not found\")\n      }\n    } catch {\n      case _: NoSuchElementException => products\n    }\n  }\n}"}
{"id":"b5726313-622f-4012-83d5-e3897ae838bf","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def safeLookupBySKU(skus: Map[String, Int], sku: String): Option[Int] =\n  skus.get(sku)\n"}
{"id":"b342c96f-a90e-4430-8d08-e7acfd609329","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def computeInventoryRatio(total: Int, defective: Int): Double = {\n  if (total == 0) throw new ArithmeticException(\"Total inventory cannot be zero\")\n  defective.toDouble / total\n}"}
{"id":"68c94c74-04f1-4c41-b374-f73a923d77a8","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class AllocationError(reason: String)\n\ndef allocateGoods(stock: Int, demand: Int): Either[AllocationError, Int] =\n  if demand > stock then Left(AllocationError(\"Demand exceeds stock\"))\n  else Right(stock - demand)\n"}
{"id":"0dce65a5-ceef-4e64-bcf2-9aac6810e38b","timestamp":1746100320318,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"object BatchShipping {\n  def shipBatch(outbound: Int, available: Int): Int = {\n    try {\n      if (outbound > available) throw new Exception(\"Batch size exceeds inventory\")\n      available - outbound\n    } catch {\n      case e: Exception => 0\n    }\n  }\n}"}
{"id":"8ba4fd2a-35c7-45ce-b4c8-781d6a71cba8","timestamp":1746100350330,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Item(id: String, name: String, quantity: Int)\n\nsealed trait StockError\ncase object OutOfStock extends StockError\ncase object ItemNotFound extends StockError\n\ndef reserveItem(inventory: Map[String, Item], itemId: String, qty: Int): Either[StockError, Item] =\n  inventory.get(itemId) match\n    case None => Left(ItemNotFound)\n    case Some(item) if item.quantity < qty => Left(OutOfStock)\n    case Some(item) => Right(item.copy(quantity = item.quantity - qty))"}
{"id":"41b7e977-6b42-48b4-bf60-6595db744354","timestamp":1746100350330,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class InventoryException(msg: String) extends Exception(msg)\n\ndef reduceStock(inventory: Map[String, Int], itemId: String, amount: Int): Map[String, Int] =\n  if (!inventory.contains(itemId)) throw new InventoryException(\"Item not present.\")\n  else if (inventory(itemId) < amount) throw new InventoryException(\"Insufficient stock.\")\n  else inventory.updated(itemId, inventory(itemId) - amount)"}
{"id":"ce41cc91-18fd-46f5-af63-70140a57e358","timestamp":1746100350330,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait TransferError\ncase object NegativeQuantity extends TransferError\ncase object ItemNotInWarehouse extends TransferError\n\ndef transferStock(inventory: Map[String, Int], itemId: String, qty: Int): Either[TransferError, Map[String, Int]] =\n  if qty < 0 then Left(NegativeQuantity)\n  else if !inventory.contains(itemId) then Left(ItemNotInWarehouse)\n  else Right(inventory.updated(itemId, inventory(itemId) + qty))"}
{"id":"7c01ef34-7007-49d6-b8e1-f42e0f0b4980","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def fetchItemBySku(inventory: Map[String, Int], sku: String): Int =\n  if (!inventory.contains(sku)) throw new NoSuchElementException(\"SKU does not exist.\")\n  inventory(sku)"}
{"id":"102c16fb-5011-4c0b-aa6e-5ef033f1ae1e","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"import scala.util.Try\n\ncase class Warehouse(id: Int, stock: Map[String, Int])\n\ndef safeAddStock(warehouse: Warehouse, sku: String, qty: Int): Try[Warehouse] =\n  Try {\n    if qty <= 0 then throw new IllegalArgumentException(\"Quantity must be positive.\")\n    warehouse.copy(stock = warehouse.stock.updatedWith(sku) {\n      case Some(q) => Some(q + qty)\n      case None => Some(qty)\n    })\n  }"}
{"id":"ffe85206-34ad-4ee0-b51a-3e32bb0914eb","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def updateLocationMap(itemLocations: Map[String, String], itemId: String, newLoc: String): Map[String, String] =\n  try {\n    if (!itemLocations.contains(itemId)) throw new IllegalStateException(\"Item not found.\")\n    itemLocations.updated(itemId, newLoc)\n  } catch {\n    case _: Exception => itemLocations\n  }"}
{"id":"81f1f120-4968-40e8-be67-aff504072679","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"sealed trait LocationError\ncase object LocationInvalid extends LocationError\ncase object ItemMissing extends LocationError\n\ndef moveInventory(itemLocations: Map[String, String], itemId: String, target: String): Either[LocationError, Map[String, String]] =\n  if !itemLocations.contains(itemId) then Left(ItemMissing)\n  else if target.isEmpty then Left(LocationInvalid)\n  else Right(itemLocations.updated(itemId, target))"}
{"id":"fe8c47c9-b5d1-458c-9272-29ca352ae5fb","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def removeItemOrThrow(warehouse: Map[String, Int], itemSku: String): Map[String, Int] =\n  if (!warehouse.contains(itemSku)) throw new RuntimeException(\"SKU missing in warehouse.\")\n  warehouse.removed(itemSku)"}
{"id":"047d7642-cb66-4ce7-8162-7d909ef72dd7","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class StockItem(sku: String, count: Int)\n\nsealed trait StockDecrementError\ncase object StockDecrementOutOfBounds extends StockDecrementError\ncase object StockDecrementNotPresent extends StockDecrementError\n\ndef decrementStock(item: StockItem, amount: Int): Either[StockDecrementError, StockItem] =\n  if amount < 0 then Left(StockDecrementOutOfBounds)\n  else if item.count < amount then Left(StockDecrementOutOfBounds)\n  else Right(item.copy(count = item.count - amount))"}
{"id":"97469f84-037b-4105-bcef-743ad97ba5d3","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def markItemDamaged(inventory: Map[String, Boolean], itemId: String): Map[String, Boolean] =\n  if (!inventory.contains(itemId)) throw new IllegalArgumentException(\"Unknown item code.\")\n  inventory.updated(itemId, true)"}
{"id":"c2dfdc7d-998d-42eb-85c0-f495303344c0","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def findSkuOrNone(inventory: Map[String, Int], sku: String): Option[Int] =\n  inventory.get(sku)"}
{"id":"be1a9f96-1c2f-46c2-94a7-84ff59f9eb89","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def moveStockWithLog(warehouse: Map[String, Int], sku: String, qty: Int): Map[String, Int] =\n  try {\n    if (!warehouse.contains(sku)) throw new Exception(\"No such SKU.\")\n    if (qty <= 0) throw new IllegalArgumentException(\"Quantity must be positive.\")\n    warehouse.updated(sku, warehouse(sku) + qty)\n  } catch {\n    case e: Exception =>\n      println(\"Error moving stock: \" + e.getMessage)\n      warehouse\n  }"}
{"id":"38b21dbb-7d9f-4c75-b219-78da020fac15","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class ItemRecord(id: String, available: Int)\nsealed trait RetrievalError\ncase object RetrievalNotFound extends RetrievalError\ncase object RetrievalInsufficient extends RetrievalError\n\ndef retrieveItems(records: List[ItemRecord], id: String, amount: Int): Either[RetrievalError, ItemRecord] =\n  records.find(_.id == id) match\n    case None => Left(RetrievalNotFound)\n    case Some(it) if it.available < amount => Left(RetrievalInsufficient)\n    case Some(it) => Right(it.copy(available = it.available - amount))"}
{"id":"134c41fd-90bf-4f29-8c7e-5e7a6d464140","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def setThresholdOrFail(thresholds: Map[String, Int], sku: String, newValue: Int): Map[String, Int] =\n  if (newValue < 1) throw new IllegalArgumentException(\"Threshold must be at least 1.\")\n  thresholds.updated(sku, newValue)"}
{"id":"f93ef7bc-b382-4c02-82b2-52f33314dbfd","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class RemovalResult(status: String)\n\nsealed trait RemovalError\ncase object RemovalNotFound extends RemovalError\n\ndef removeItem(inventory: Map[String, Int], sku: String): Either[RemovalError, RemovalResult] =\n  if !inventory.contains(sku) then Left(RemovalNotFound)\n  else Right(RemovalResult(\"Removed: \" + sku))"}
{"id":"03ecf5ca-62c0-4df5-aeb4-d246b58aaf95","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def allocateSlot(inventorySlots: Map[Int, String], slot: Int, item: String): Map[Int, String] =\n  if (inventorySlots.contains(slot)) throw new Exception(\"Slot already occupied.\")\n  inventorySlots.updated(slot, item)"}
{"id":"d85a2e5f-a175-4f83-9423-8856fc0de7b3","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class ReceivedBatch(items: List[String])\n\nsealed trait ReceptionError\ncase object ReceptionEmpty extends ReceptionError\n\ndef receiveBatch(batch: ReceivedBatch): Either[ReceptionError, Int] =\n  if batch.items.isEmpty then Left(ReceptionEmpty)\n  else Right(batch.items.length)"}
{"id":"5f1a8ca7-b22b-4142-b3ea-5de70eae34a1","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getStockQuantityOrZero(stock: Map[String, Int], productCode: String): Int =\n  try {\n    stock(productCode)\n  } catch {\n    case _: Exception => 0\n  }"}
{"id":"b49b6ea4-f311-41a4-bc90-f05086c0ddf3","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryQuery(itemCode: String)\ncase class QueryResult(available: Int)\nsealed trait QueryError\ncase object QueryItemMissing extends QueryError\n\ndef checkStock(query: InventoryQuery, stock: Map[String, Int]): Either[QueryError, QueryResult] =\n  stock.get(query.itemCode)\n    .map(avail => Right(QueryResult(avail)))\n    .getOrElse(Left(QueryItemMissing))"}
{"id":"e6136c3f-f1e7-407b-b3bb-fb1492fe0171","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def changeBinNumber(bins: Map[String, Int], binId: String, newNumber: Int): Map[String, Int] =\n  if (!bins.contains(binId)) throw new NoSuchElementException(\"Unknown bin.\")\n  bins.updated(binId, newNumber)"}
{"id":"8c349d93-60cb-4eec-8553-4aacbf156cbe","timestamp":1746100350331,"category":"throws","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Batch(id: String, qty: Int)\nsealed trait BatchUpdateError\ncase object BatchNotFound extends BatchUpdateError\ncase object BatchQtyNegative extends BatchUpdateError\n\ndef adjustBatchQty(batches: List[Batch], id: String, delta: Int): Either[BatchUpdateError, Batch] =\n  batches.find(_.id == id) match\n    case None => Left(BatchNotFound)\n    case Some(b) if b.qty + delta < 0 => Left(BatchQtyNegative)\n    case Some(b) => Right(b.copy(qty = b.qty + delta))"}
{"id":"f6ede405-7673-4e0b-864c-ed2aafb8e6c0","timestamp":1746100373269,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserContent(id: String, text: String)\ncase class ModerationResult(id: String, isApproved: Boolean)\n\ndef approveContent(content: UserContent): Either[String, ModerationResult] =\n  if content.text.contains(\"banned\") then Left(\"Contains banned words.\")\n  else Right(ModerationResult(content.id, true))"}
{"id":"a62aeeec-80ff-4517-8498-573a726d71ee","timestamp":1746100373269,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait ModerationError\ncase object InappropriateLanguage extends ModerationError\ncase object EmptyContent extends ModerationError\n\ndef validateContent(text: String): Either[ModerationError, String] =\n  if text.isEmpty then Left(EmptyContent)\n  else if text.exists(_.isDigit) then Left(InappropriateLanguage)\n  else Right(text)"}
{"id":"20c6753f-db86-4b2b-80b2-64bde2ba8bf5","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ReportSubmission(userId: String, reason: String)\n\ndef submitReport(report: ReportSubmission): Option[String] =\n  if report.reason.length < 5 then None\n  else Some(s\"Report accepted for user: ${report.userId}\")"}
{"id":"25e600c2-2b2a-4a17-8586-68a262ce9ed1","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseBanDuration(input: String): Try[Int] =\n  Try(input.toInt).filter(_ > 0)"}
{"id":"28cbd817-00be-4baa-ba0e-cd37a590a022","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait VerificationError\ncase object MissingEvidence extends VerificationError\ncase object InvalidReport extends VerificationError\n\ndef verifyReport(evidence: Option[String]): Either[VerificationError, String] =\n  evidence match\n    case Some(value) if value.nonEmpty => Right(value)\n    case Some(_) => Left(InvalidReport)\n    case None => Left(MissingEvidence)"}
{"id":"26cfb20c-f922-42b2-8868-9043a71dc99d","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserAction(action: String, details: String)\n\ndef logActionSafe(action: UserAction): Option[String] =\n  if action.action.isBlank then None\n  else Some(s\"Logged: ${action.action}\")"}
{"id":"93960b6c-24cb-42ee-8a5d-ed666573377f","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait BlockError\ncase object UserNotFound extends BlockError\ncase object AlreadyBlocked extends BlockError\n\ndef blockUser(username: String, blockList: Set[String]): Either[BlockError, Set[String]] =\n  if username.isEmpty then Left(UserNotFound)\n  else if blockList.contains(username) then Left(AlreadyBlocked)\n  else Right(blockList + username)"}
{"id":"6a09336f-d000-40af-b018-8830bf74088e","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDeleteComment(commentId: String): Try[String] =\n  Try {\n    if commentId.nonEmpty then s\"Deleted $commentId\"\n    else throw new Exception(\"Empty comment id\")\n  }"}
{"id":"b7f306b0-3222-401c-be59-660a00dffa69","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ModerationDecision(decision: String)\n\ndef makeDecision(decision: String): Option[ModerationDecision] =\n  if Set(\"approve\", \"reject\").contains(decision) then Some(ModerationDecision(decision))\n  else None"}
{"id":"134ff469-c849-4022-9740-4b64f3358dfa","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait PolicyViolation\ncase object HateSpeechDetected extends PolicyViolation\ncase object ContentClean extends PolicyViolation\n\ndef checkContentForHateSpeech(content: String): Either[PolicyViolation, String] =\n  if content.contains(\"hate\") then Left(HateSpeechDetected)\n  else Right(content)"}
{"id":"49eba1b9-9f55-495e-b692-c7d34d968ba2","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def detectSpam(content: String): String =\n  if content.length > 1000 then throw new RuntimeException(\"Spam detected: content too long\")\n  else \"Content accepted\""}
{"id":"2e222301-f4b4-4df6-a588-ad95ec8156f5","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class BanUserException(msg: String) extends Exception(msg)\n\ndef banUser(username: String): Unit =\n  if username.isBlank then throw new BanUserException(\"Username required for banning\")\n  println(s\"Banned user: $username\")"}
{"id":"91e87983-820c-46ae-ab69-76fedbbf0a57","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class InappropriateContentException extends Exception\n\ndef validateImage(imageUrl: String): Unit =\n  if !imageUrl.endsWith(\".jpg\") then throw new InappropriateContentException\n  println(\"Image is valid.\")"}
{"id":"623f6bf1-a55e-4c14-b59f-2d1479b843d9","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def logModerationIssue(issue: String): Unit =\n  try {\n    if issue.isEmpty then throw new IllegalArgumentException(\"Issue is empty.\")\n    println(s\"Logged: $issue\")\n  } catch {\n    case ex: Exception => println(s\"Log failure: ${ex.getMessage}\")\n  }"}
{"id":"d6e92452-a00c-4d6e-8394-ef11cb54b30e","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def removeFlaggedUser(userId: String): Unit =\n  try {\n    if userId.isBlank then throw new Exception(\"UserId missing.\")\n    println(s\"Removed user: $userId\")\n  } catch {\n    case ex: Exception => println(\"Failed to remove user: \" + ex.getMessage)\n  }"}
{"id":"5aaad51c-ebdc-4be8-8d7d-4c03878f6b32","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class ReportFormatException(message: String) extends Exception(message)\n\ndef processReport(reportData: String): Unit =\n  if !reportData.contains(\":\") then throw new ReportFormatException(\"Report format invalid.\")\n  println(\"Report processed\")"}
{"id":"0894efeb-ba90-4bac-91ba-5441da708c28","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def moderateText(text: String): Boolean =\n  try {\n    if text.contains(\"bannedWord\") then throw new Exception(\"Banned word found.\")\n    true\n  } catch {\n    case _: Exception => false\n  }"}
{"id":"234bb5e0-5632-40d7-a48d-86c764b84f09","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def warnUser(username: String): Unit =\n  if username.length < 3 then throw new IllegalArgumentException(\"Username too short.\")\n  println(s\"Warned user: $username\")"}
{"id":"d8694732-9b24-4d37-aa63-fbaee03a492a","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def reviewAppeal(contentId: String): Boolean =\n  try {\n    if contentId == \"fail\" then throw new Exception(\"Appeal rejected.\")\n    true\n  } catch {\n    case ex: Exception => false\n  }"}
{"id":"5c6782bd-3ac5-4dbf-b30c-c12ae65e140e","timestamp":1746100373270,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def assignModerator(reportId: String, moderatorName: String): String =\n  if moderatorName.isEmpty then throw new Exception(\"Moderator required.\")\n  s\"$moderatorName assigned to $reportId\""}
{"id":"d2866815-12d7-4cff-b9a5-b75ee0f5602f","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserReport(reportId: Int, description: String)\ndef parseContentReport(report: String): Option[UserReport] =\n  val parts = report.split(\"|\", 2)\n  if parts.length == 2 then\n    Some(UserReport(parts(0).toIntOption.getOrElse(0), parts(1)))\n  else None"}
{"id":"4a1ca11f-9484-4bd3-ac30-56a70dbe1cc9","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait ModerationError\ncase object InappropriateContentDetected extends ModerationError\ncase class ReviewFailure(reason: String) extends ModerationError\ncase class ModerationResult(contentId: Int, approved: Boolean)\ndef moderateContent(contentId: Int, text: String): Either[ModerationError, ModerationResult] =\n  if text.exists(_.isDigit) then Left(InappropriateContentDetected)\n  else Right(ModerationResult(contentId, true))"}
{"id":"9a5fe65e-6c02-4a2a-b337-c8b4545a1f7c","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def approveComment(commentId: Int, isFlagged: Boolean): Option[Int] =\n  if isFlagged then None else Some(commentId)"}
{"id":"1229eab9-1341-4ac4-a367-dc4e862143eb","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"import scala.util.Try\ndef blockUserAccount(userName: String, violationCount: Int): Try[String] =\n  Try {\n    if violationCount > 3 then throw new Exception(\"User exceeds violation threshold.\")\n    else s\"$userName blocked successfully.\"\n  }"}
{"id":"ea6c93c0-9700-4a80-8152-98c851e5d07e","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ContentReview(contentId: Int, removed: Boolean)\ndef removeContent(contentId: Int, text: String): Either[String, ContentReview] =\n  if text.length > 140 then Left(\"Content too long\")\n  else Right(ContentReview(contentId, true))"}
{"id":"df1fc55a-6fcd-4d9a-b38f-eed4d2e49ee9","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait BanReason\ncase object SpamBehavior extends BanReason\ncase object HateSpeech extends BanReason\ndef banAccount(userId: Int, reason: String): Either[BanReason, Int] =\n  reason match\n    case \"spam\" => Left(SpamBehavior)\n    case \"hate\" => Left(HateSpeech)\n    case _      => Right(userId)"}
{"id":"89a0bef7-cb7a-4442-9cdb-85a884d5c732","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def extractHashtags(postText: String): Option[List[String]] =\n  val hashtags = \"#\\\\w+\".r.findAllIn(postText).toList\n  if hashtags.isEmpty then None else Some(hashtags)"}
{"id":"7b2d48de-89d4-4d43-8472-24bac85be27d","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ReviewResult(reviewer: String, passed: Boolean)\ndef assignReviewer(contentId: Int, eligible: Boolean): Either[String, ReviewResult] =\n  if !eligible then Left(\"Reviewer not eligible\")\n  else Right(ReviewResult(\"moderator42\", true))"}
{"id":"45f93148-160c-428f-9597-9f556b9f75e0","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"sealed trait FlaggingError\ncase object InvalidReason extends FlaggingError\ncase object UserNotAuthorized extends FlaggingError\ndef flagContent(userId: Int, reason: String): Either[FlaggingError, Boolean] =\n  if reason.isBlank then Left(InvalidReason)\n  else if userId < 0 then Left(UserNotAuthorized)\n  else Right(true)"}
{"id":"42c01dec-dae6-407e-8e37-926a56dcd2e5","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def redactProfanities(text: String): Option[String] =\n  val words = text.split(\" \")\n  val profanities = Set(\"badword\", \"offensive\")\n  val found = words.exists(profanities.contains(_))\n  if found then Some(words.map(w => if profanities.contains(w) then \"***\" else w).mkString(\" \")) else None"}
{"id":"347b8f50-2c3d-480b-87b7-5bf60c210c3c","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def fetchContentById(contentId: Int): String =\n  if contentId <= 0 then throw new IllegalArgumentException(\"Invalid contentId\")\n  else s\"Post body for $contentId\""}
{"id":"3733edfb-b2b4-43c9-bf19-7c3850209965","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def incrementViolationCount(userId: Int, count: Int): Int =\n  try {\n    if count < 0 then throw new RuntimeException(\"Negative violation count\")\n    count + 1\n  } catch {\n    case exc: RuntimeException => 0\n  }"}
{"id":"897fe044-63ed-4b5b-94b5-f6151900e174","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def validateModeratorCredentials(username: String, password: String): Boolean =\n  if username.nonEmpty && password.length > 5 then true\n  else throw new SecurityException(\"Invalid credentials\")"}
{"id":"cf2fcf0e-537c-4193-b6c7-62f6fb2b9095","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class ContentModerationError(message: String) extends Exception(message)\ndef denyUserAccess(userRole: String): Boolean =\n  if userRole != \"admin\" then throw new ContentModerationError(\"Insufficient permissions\")\n  else true"}
{"id":"0941fc11-065e-4e50-a6a6-2cd0b699b327","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def resolveReport(reportId: Int): Boolean =\n  try {\n    if reportId < 100 then throw new Exception(\"Report not found\")\n    true\n  } catch {\n    case _ : Exception => false\n  }"}
{"id":"d039ba3e-4eea-423f-ba2e-dff860aa3fbe","timestamp":1746100392171,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def queueReviewTask(task: String): Unit =\n  if task.isEmpty then throw new IllegalArgumentException(\"Empty task not allowed\")\n  println(s\"Task $task queued.\")"}
{"id":"6311569f-8a85-425d-8643-136829a1e94a","timestamp":1746100392172,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def checkSpamDetection(result: String): String =\n  try {\n    if result == \"spam\" then throw new Exception(\"Spam detected\")\n    \"Clean\"\n  } catch {\n    case e: Exception => e.getMessage\n  }"}
{"id":"09fb41a8-8ac5-4901-8f0b-54e31483a9b6","timestamp":1746100392172,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def muteUser(userId: Int, reason: String): Boolean =\n  if reason.isEmpty then throw new Exception(\"Mute reason required.\")\n  else true"}
{"id":"845ba34f-6e10-4225-871d-3a44d0323219","timestamp":1746100392172,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def escalateInappropriateContent(content: String): String =\n  try {\n    if content.contains(\"banned\") then throw new Exception(\"Inappropriate content flagged\")\n    \"Reviewed\"\n  } catch {\n    case _: Exception => \"Escalated to admin\"\n  }"}
{"id":"540de336-33a2-440a-9894-90e234b67866","timestamp":1746100392172,"category":"throws","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def checkDuplicateReport(userId: Int, reportType: String): Boolean =\n  if reportType == \"duplicate\" then throw new Exception(\"Duplicate report submitted\")\n  else true"}
{"id":"3105c4b9-fcda-44d4-8a9d-7da9a011b571","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class UserProfile(id: Long, preferences: Set[String])\ncase class NewsRecommendationError(message: String)\ncase class Recommendation(articleId: Long)\n\ndef recommendArticle(user: UserProfile): Either[NewsRecommendationError, Recommendation] =\n  if user.preferences.isEmpty then\n    Left(NewsRecommendationError(\"User has no preferences\"))\n  else\n    Right(Recommendation(articleId = 1001L))"}
{"id":"3e6ef40f-056c-407c-8b1c-d8980d1fae5b","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedItem(id: Long, category: String)\n\ndef findPersonalizedItem(items: List[FeedItem], userPref: Set[String]): Option[FeedItem] =\n  items.find(item => userPref.contains(item.category))"}
{"id":"8521e727-e315-4e32-a318-cc5e4066a0f9","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"sealed trait FeedLoadError\ncase object NetworkTimeout extends FeedLoadError\ncase object FeedNotFound extends FeedLoadError\n\ndef loadNewsFeed(userId: Long): Either[FeedLoadError, List[String]] =\n  if userId < 0 then Left(FeedNotFound)\n  else Right(List(\"Breaking News!\", \"World Updates\"))"}
{"id":"86af0610-112e-4ca6-8cd1-c358aed10f39","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseUserInterest(json: String): Try[Set[String]] =\n  Try {\n    val interests = json.trim.stripPrefix(\"[\").stripSuffix(\"]\").split(\",\")\n    interests.map(_.trim.replaceAll(\"\\\"\", \"\")).toSet\n  }"}
{"id":"e431d11d-e739-4957-8d0d-d2e4e535fbfa","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class Article(id: Long, tags: Set[String])\n\nsealed trait FilterError\ncase object NoMatchingTags extends FilterError\n\ndef filterArticles(articles: List[Article], userTags: Set[String]): Either[FilterError, Article] =\n  articles.find(a => a.tags.exists(userTags.contains(_))) match\n    case Some(article) => Right(article)\n    case None => Left(NoMatchingTags)"}
{"id":"f2e52795-09c7-4b8a-b74a-04cbbd8ed5ba","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeRankCalculation(score: String): Try[Int] =\n  Try(score.toInt)"}
{"id":"7fd7fffd-1b0c-44e2-b5ed-2a17ec145671","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"sealed trait FetchPreferenceError\ncase object EmptyPreferenceList extends FetchPreferenceError\n\ncase class UserPreference(categories: List[String])\n\ndef fetchPreferredContent(preference: UserPreference): Either[FetchPreferenceError, String] =\n  preference.categories.headOption match\n    case Some(category) => Right(s\"Content for $category\")\n    case None => Left(EmptyPreferenceList)"}
{"id":"d82015f5-701e-48a8-a8c7-f523d111e09d","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class NewsFeedItem(id: Long, title: String, topic: String)\ndef pickItem(items: List[NewsFeedItem], topic: String): Option[NewsFeedItem] =\n  items.find(_.topic == topic)"}
{"id":"c95ca924-c75d-4f20-a010-f2ac8d5b05e1","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"sealed trait PersonalizationError\ncase object InvalidUserId extends PersonalizationError\ncase object NoRecommendationsFound extends PersonalizationError\n\ndef fetchRecommendations(userId: Int): Either[PersonalizationError, List[String]] =\n  if userId <= 0 then Left(InvalidUserId)\n  else Right(List(\"Politics - A review\", \"Sports - Final Results\"))"}
{"id":"8048f415-8984-4fce-96fe-342722e08c3a","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"import scala.util.Try\n\ndef computeFeedScore(clicks: Int, impressions: Int): Try[Double] =\n  Try(clicks.toDouble / impressions)"}
{"id":"80918434-c4ca-4d4b-93fd-6a9fcb0ed1ee","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"case class FeedLoadingError(msg: String) extends Exception(msg)\n\nclass NewsFeedLoader {\n  def loadFeed(userId: Long): List[String] = {\n    if (userId <= 0) throw new FeedLoadingError(\"Negative userId not allowed\")\n    List(\"Top Story\", \"Editor's Pick\")\n  }\n}\n\ntry {\n  val stories = new NewsFeedLoader().loadFeed(-4)\n  println(stories)\n} catch {\n  case e: FeedLoadingError => println(s\"Error: ${e.getMessage}\")\n}"}
{"id":"66c5f8cf-afcd-4012-a885-b641374a250a","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def selectTrendingArticle(articles: List[String]): String = {\n  if (articles.isEmpty) throw new NoSuchElementException(\"No trending articles found\")\n  articles.head\n}\n\ntry {\n  val pick = selectTrendingArticle(List())\n  println(pick)\n} catch {\n  case e: NoSuchElementException => println(e.getMessage)\n}"}
{"id":"295c4add-d62b-4fa6-a185-691b761b5372","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"case class UserPreferenceError(msg: String) extends RuntimeException(msg)\n\ndef getPrimaryCategory(preferences: List[String]): String = {\n  preferences.headOption.getOrElse(throw new UserPreferenceError(\"Preference list is empty\"))\n}"}
{"id":"ad393309-7048-4ca1-9ca4-2db24d2c41c9","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class BookmarkManager {\n  def addBookmark(userId: Long, articleId: Long): Boolean = {\n    if (userId <= 0 || articleId <= 0) throw new IllegalArgumentException(\"Invalid ids\")\n    true\n  }\n}\n\ntry {\n  new BookmarkManager().addBookmark(-2, 45)\n} catch {\n  case e: IllegalArgumentException => println(s\"Bookmarking failed: ${e.getMessage}\")\n}"}
{"id":"9c7f35fc-95e7-46a8-9fe0-0046182bd1ab","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class CategorySelector {\n  def getCategory(categories: List[String], idx: Int): String = {\n    if (idx < 0 || idx >= categories.length) throw new IndexOutOfBoundsException(\"Category index out of range\")\n    categories(idx)\n  }\n}\n\ntry {\n  val chosen = new CategorySelector().getCategory(List(\"Tech\", \"Fashion\"), 5)\n  println(chosen)\n} catch {\n  case e: IndexOutOfBoundsException => println(e.getMessage)\n}"}
{"id":"c520ce3f-633c-46cb-9c19-34d3fd411051","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getUserFeed(userId: Int): List[String] = {\n  if (userId == 0) throw new IllegalArgumentException(\"Missing userId for feed\")\n  List(\"Global News\", \"Business Highlights\")\n}\n\ntry {\n  val feed = getUserFeed(0)\n  println(feed)\n} catch {\n  case e: IllegalArgumentException => println(s\"Failed to retrieve feed: ${e.getMessage}\")\n}"}
{"id":"717c4a06-56ef-4fc2-bbf6-b3ab2122920a","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class NewsPreferenceManager {\n  def updatePreferences(userId: Long, newPrefs: List[String]): Unit = {\n    if (newPrefs.isEmpty) throw new RuntimeException(\"No preferences specified\")\n  }\n}\n\ntry {\n  new NewsPreferenceManager().updatePreferences(1111, List())\n} catch {\n  case e: RuntimeException => println(e.getMessage)\n}"}
{"id":"b8f8c10e-7790-4413-8519-f1ced7929459","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def shareArticle(articleId: Long, recipient: String): String = {\n  if (recipient.isBlank) throw new IllegalArgumentException(\"Recipient cannot be blank\")\n  s\"Article $articleId shared with $recipient\"\n}\ntry {\n  println(shareArticle(1002, \"\"))\n} catch {\n  case e: IllegalArgumentException => println(s\"Share failed: ${e.getMessage}\")\n}"}
{"id":"7e19a62a-802a-4b19-a4fd-7c890939572b","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class NotificationSender {\n  def sendNotification(userId: Long, message: String): Unit = {\n    if (message.isEmpty) throw new IllegalArgumentException(\"Notification message is empty\")\n  }\n}\n\ntry {\n  new NotificationSender().sendNotification(3, \"\")\n} catch {\n  case e: IllegalArgumentException => println(e.getMessage)\n}"}
{"id":"57961784-7135-4029-b4a0-2cabe4b81bf3","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"case class FeedProcessingException(msg: String) extends Exception(msg)\n\ndef processFeedItem(feed: String): Int = {\n  if (feed.isBlank) throw new FeedProcessingException(\"Feed item is blank\")\n  feed.length\n}\n\ntry {\n  println(processFeedItem(\"\"))\n} catch {\n  case e: FeedProcessingException => println(s\"Failed: ${e.getMessage}\")\n}"}
{"id":"86f72bee-f91b-4001-846e-5c4c60114261","timestamp":1746100413102,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class SourceFetcher {\n  def fetchSource(name: String): String = {\n    if (name == \"\") throw new RuntimeException(\"Source name required\")\n    s\"News from $name\"\n  }\n}\n\ntry {\n  println(new SourceFetcher().fetchSource(\"\"))\n} catch {\n  case e: RuntimeException => println(e.getMessage)\n}"}
{"id":"1aaf751c-fbb2-4e86-8b17-61eee053f76c","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class NewsArticle(id: String, title: String, content: String)\n\nsealed trait FeedError\ncase object UserNotFound extends FeedError\ncase object NoArticlesFound extends FeedError\n\ndef getPersonalizedFeed(userId: String): Either[FeedError, List[NewsArticle]] =\n  if userId.isEmpty then Left(UserNotFound)\n  else\n    val articles = List(NewsArticle(\"1\", \"Tech News\", \"Scala 3 Released\"))\n    if articles.nonEmpty then Right(articles)\n    else Left(NoArticlesFound)"}
{"id":"79c87fb6-b662-40c9-8d64-f22b8e65df54","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def fetchLatestUserActivity(userId: String): String = {\n  if (userId == null || userId == \"\")\n    throw new IllegalArgumentException(\"Invalid userId provided.\")\n  // Fake fetch operation\n  \"User liked 2 articles.\"\n}"}
{"id":"1465dc54-e620-45f9-9e1a-b8644c0d949a","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseSavedFeedsCount(str: String): Try[Int] =\n  Try(str.toInt)"}
{"id":"9131d7ef-ec69-4a14-8dd1-de8907f8aeed","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def recommendArticles(userId: String, interests: List[String]): List[String] = {\n  if (userId.isEmpty) {\n    throw new RuntimeException(\"User ID missing.\")\n  }\n  if (interests.isEmpty) {\n    throw new NoSuchElementException(\"No interests found for user.\")\n  }\n  List(\"Learn Scala 3\", \"Functional Programming Basics\")\n}"}
{"id":"ebfec3cc-815d-4a9e-b7a3-a2571ae61d4a","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"sealed trait FeedProcessingError\ncase class FetchPreferenceFailed(reason: String) extends FeedProcessingError\ncase class RecommendationUnavailable(reason: String) extends FeedProcessingError\n\ncase class UserPreferences(categories: List[String])\n\ndef loadUserPreferences(userId: String): Either[FeedProcessingError, UserPreferences] =\n  if userId == \"blocked\"\n    then Left(FetchPreferenceFailed(\"User is blocked\"))\n  else Right(UserPreferences(List(\"Technology\", \"Science\")))"}
{"id":"3a4fab3f-4642-4243-b010-ff232bb39fb3","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def logFeedError(e: Throwable): Unit = {\n  println(\"Feed Error: \" + e.getMessage)\n}\n\ndef getRecommendedForUser(userId: String): String = {\n  try {\n    if (userId.startsWith(\"err\")) throw new Exception(\"Invalid Recommendation Request\")\n    \"Breaking: Scala conquers world!\"\n  } catch {\n    case e: Exception =>\n      logFeedError(e)\n      \"Recommendation unavailable.\"\n  }\n}"}
{"id":"2690c2c0-bca1-47df-84b7-e9e68693a245","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class ArticleDetails(title: String, content: String)\n\ndef safeGetArticleTitle(article: Option[ArticleDetails]): Option[String] =\n  article.map(_.title)"}
{"id":"10a90db5-160d-4bd5-ab2f-c87db4dc24ca","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def addArticleToFeed(feedId: String, articleId: String): Boolean =\n  if (feedId == null || articleId == null)\n    throw new IllegalArgumentException(\"Both IDs must be provided.\")\n  else true"}
{"id":"63d7103b-f030-48dd-8c68-15c5dd5adead","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class PersonalizedFeed(articles: List[String])\n\nsealed trait FeedGenerationError\ncase object InsufficientArticles extends FeedGenerationError\n\ndef generateFeed(preferences: List[String]): Either[FeedGenerationError, PersonalizedFeed] =\n  if preferences.contains(\"none\") then Left(InsufficientArticles)\n  else Right(PersonalizedFeed(preferences.map(_ + \" News\")))"}
{"id":"c51e2483-14f4-4faf-8c78-43279b5cc5de","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def removeFavoriteNewsItem(userId: String, articleId: String): Boolean = {\n  if (userId == \"blocked\")\n    throw new SecurityException(\"User not allowed to remove favorite.\")\n  true\n}"}
{"id":"67c8b106-7cb1-4f42-9233-4bfd2fa2db61","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedUpdate(success: Boolean)\n\nsealed trait FeedUpdateError\ncase object UpdateFeedBlocked extends FeedUpdateError\n\ndef tryUpdateUserFeed(userId: String): Either[FeedUpdateError, FeedUpdate] =\n  if userId == \"suspended\" then Left(UpdateFeedBlocked)\n  else Right(FeedUpdate(true))"}
{"id":"3dbae92c-6645-4f41-b940-e2fb0bb034fc","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getFeedPreferences(userId: String): String = {\n  if (userId.length < 3) {\n    throw new IllegalArgumentException(\"UserId too short.\")\n  }\n  \"technology, science\"\n}"}
{"id":"f7c9449d-b12a-4755-8240-bceea1c35a48","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def safeDivideFeeds(a: Int, b: Int): Option[Int] =\n  if b == 0 then None else Some(a / b)"}
{"id":"82e65e2f-e7b1-4ed7-a5a9-ffdc0f809994","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def fetchTrendingTopics(region: String): List[String] = {\n  try {\n    if (region.isEmpty) throw new Exception(\"Region required.\")\n    List(\"Scala\", \"Personalization\", \"AI\")\n  } catch {\n    case _: Exception => List()\n  }\n}"}
{"id":"b7f92e35-7e2a-4aa0-9973-479f38bc3171","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ncase class UserNewsStat(articlesRead: Int)\n\ndef parseUserStat(input: String): Try[UserNewsStat] =\n  Try {\n    val count = input.toInt\n    UserNewsStat(count)\n  }"}
{"id":"29f31214-c38e-4551-ad75-6a3effa6fd0b","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def notifyUserOfNewFeed(userId: String): Unit = {\n  try {\n    if (userId == \"readonly\") throw new UnsupportedOperationException(\"Notifications disabled.\")\n    println(s\"Notified $userId\")\n  } catch {\n    case e: Exception => println(\"Failed to notify: \" + e.getMessage)\n  }\n}"}
{"id":"75683aa3-dfa6-453d-a0dd-7b9a86b0c9c9","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"sealed trait RecommendationError\ncase class MissingInterests(userId: String) extends RecommendationError\n\ncase class Recommendation(articles: List[String])\n\ndef recommendBasedOnHistory(userId: String, interests: List[String]): Either[RecommendationError, Recommendation] =\n  if interests.isEmpty then Left(MissingInterests(userId))\n  else Right(Recommendation(interests.map(_ + \" Insights\")))"}
{"id":"694a075c-81f5-4441-920e-6bbbcab50d90","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def publishFeedItem(feed: String): Boolean = {\n  if (feed.isEmpty) throw new RuntimeException(\"Feed is empty.\")\n  true\n}"}
{"id":"79ea4cb4-f069-4243-ab69-2b971cd50255","timestamp":1746100441536,"category":"throws","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def aggregateUserBookmarks(bookmarks: List[String]): Option[Int] =\n  if bookmarks.isEmpty then None else Some(bookmarks.size)"}
{"id":"e6d840fa-b15c-4b54-803d-66017030dc20","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingStation(id: String, latitude: Double, longitude: Double, isAvailable: Boolean)\n\nsealed trait LocatorError\ncase object StationNotFound extends LocatorError\n\nobject StationFinder:\n  def findStationById(stations: List[ChargingStation], stationId: String): Either[LocatorError, ChargingStation] =\n    stations.find(_.id == stationId).toRight(StationNotFound)"}
{"id":"85d79124-d04b-4268-b627-df13faa807d4","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getStationPower(station: ChargingStation): Try[Int] = Try {\n  if station.isAvailable then 50\n  else throw new IllegalStateException(\"Station not available\")\n}"}
{"id":"da2e28ec-4058-4096-96c9-d9a1440a491a","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"sealed trait StationValidationError\ncase object InvalidLatitude extends StationValidationError\ncase object InvalidLongitude extends StationValidationError\n\ndef validateCoordinates(latitude: Double, longitude: Double): Either[StationValidationError, (Double, Double)] =\n  if latitude < -90 || latitude > 90 then Left(InvalidLatitude)\n  else if longitude < -180 || longitude > 180 then Left(InvalidLongitude)\n  else Right((latitude, longitude))"}
{"id":"84339275-a1c3-45cb-b121-d9fe56efb526","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def parseStationResponse(response: String): Option[ChargingStation] =\n  val parts = response.split(\",\")\n  if parts.length == 4 then\n    Some(\n      ChargingStation(\n        parts(0),\n        parts(1).toDoubleOption.getOrElse(0.0),\n        parts(2).toDoubleOption.getOrElse(0.0),\n        parts(3).toBooleanOption.getOrElse(false)\n      )\n    )\n  else None"}
{"id":"79fccf9f-eb77-4d2c-a535-a7976738f69c","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def safeDivideDistance(distance: Double, divisor: Double): Option[Double] =\n  if divisor == 0.0 then None else Some(distance / divisor)"}
{"id":"9a60a747-fd0a-4d33-ade6-05cbdbbfb909","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingError(message: String)\n\ndef checkConnectorType(connector: String): Either[ChargingError, String] =\n  if Set(\"CHAdeMO\", \"CCS\", \"Type2\").contains(connector) then Right(connector)\n  else Left(ChargingError(\"Invalid connector type\"))"}
{"id":"b4ba2130-ad9b-4c66-80fa-0baa827a38fe","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def parseAvailableSlots(slotsString: String): Try[Int] = Try {\n  slotsString.toInt\n}"}
{"id":"741e77dd-ca8c-45bb-9cda-5dba58cdde5e","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class Location(latitude: Double, longitude: Double)\n\nsealed trait LocationError\ncase object NegativeLatitude extends LocationError\n\nobject LocationService:\n  def safeCreateLocation(lat: Double, lon: Double): Either[LocationError, Location] =\n    if lat < 0 then Left(NegativeLatitude) else Right(Location(lat, lon))"}
{"id":"3382da09-9d5d-4a28-af9a-d80d82b35101","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def findClosestAvailable(stations: List[ChargingStation], refLat: Double, refLon: Double): Option[ChargingStation] =\n  stations.filter(_.isAvailable)\n    .sortBy(s => math.hypot(s.latitude - refLat, s.longitude - refLon))\n    .headOption"}
{"id":"30bbec13-d6d0-4595-82bf-3e4c267fa5bc","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def tryToBook(station: ChargingStation): Try[String] = Try {\n  if station.isAvailable then \"Booking confirmed\"\n  else throw new Exception(\"Station not available for booking\")\n}"}
{"id":"8629078f-392e-40b3-aa3b-4286831ab022","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def requestStationStatus(stationId: String): String = {\n  if (stationId.isEmpty) throw new IllegalArgumentException(\"Station ID cannot be empty\")\n  \"Available\"\n}"}
{"id":"adcc77d2-8d23-4da0-8641-8d2b89c6466f","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class StationConnectorMissing(msg: String) extends RuntimeException(msg)\ndef checkConnectorExists(connectors: List[String], needed: String): String = {\n  if (!connectors.contains(needed)) throw new StationConnectorMissing(\"Required connector not found\")\n  s\"Connector $needed available\"\n}"}
{"id":"b8711873-01ee-465e-85c0-94d2ff79f688","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def parseStationCapacity(capacity: String): Int = {\n  try {\n    capacity.toInt\n  } catch {\n    case ex: NumberFormatException => throw new RuntimeException(\"Invalid station capacity\", ex)\n  }\n}"}
{"id":"0b1c2da5-51c6-47a5-8479-fc316a1a89f0","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getStationStatusOrThrow(stationId: String, database: Map[String, String]): String = {\n  database.get(stationId) match {\n    case Some(status) => status\n    case None => throw new NoSuchElementException(s\"No status found for station $stationId\")\n  }\n}"}
{"id":"858ea4e5-bcbf-4fde-a438-bc9a515b22d9","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def fetchChargerLocation(stationId: String, storage: Map[String, (Double, Double)]): (Double, Double) = {\n  try {\n    storage(stationId)\n  } catch {\n    case _: NoSuchElementException => throw new RuntimeException(\"Location not found\")\n  }\n}"}
{"id":"1f087d79-0d75-4562-997c-c3d3f2d8489d","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def isChargerAvailable(chargerId: String, availableIds: Set[String]): Boolean = {\n  try {\n    availableIds.contains(chargerId)\n  } catch {\n    case ex: Exception => false\n  }\n}"}
{"id":"3ee2bc25-786b-428e-9699-7c1b29a010bb","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def requireValidPowerLevel(level: Int): Unit = {\n  if (level < 0) throw new IllegalArgumentException(\"Power level must be non-negative\")\n}"}
{"id":"265a3ff0-09dc-49e4-9070-477233b44043","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getStationType(types: Map[String, String], stationId: String): String = {\n  try {\n    types(stationId)\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Station type lookup failed\")\n  }\n}"}
{"id":"29781088-dff7-42e2-b10c-e491a4b68b3d","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def handleReservationRequest(userId: String, stationId: String): String = {\n  try {\n    if (userId.isEmpty || stationId.isEmpty) throw new IllegalArgumentException(\"Invalid input\")\n    \"Reservation successful\"\n  } catch {\n    case ex: Exception => \"Failed: \" + ex.getMessage\n  }\n}"}
{"id":"95a9d821-cd83-444f-90b0-ca27719498d8","timestamp":1746100457339,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getAuthorizationToken(user: String): String = {\n  if (user == \"\") throw new Exception(\"User not specified\")\n  \"token-1234\"\n}"}
{"id":"2714b6d7-d2b5-421d-b19c-57f4aa10a351","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"case class ChargingStationIdNotFound(stationId: String) extends Exception(s\"No charging station with ID: $stationId found.\")\ndef getChargerLocation(stationId: String): (Double, Double) = {\n  if stationId == \"STN123\" then (40.7128, -74.0060)\n  else throw new ChargingStationIdNotFound(stationId)\n}\n"}
{"id":"2b161b61-7e2d-4520-8a80-b3ba72bc6738","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getFastChargersNearby(latitude: Double, longitude: Double): List[String] = {\n  if latitude < -90 || latitude > 90 then\n    throw new IllegalArgumentException(\"Invalid latitude.\")\n  if longitude < -180 || longitude > 180 then\n    throw new IllegalArgumentException(\"Invalid longitude.\")\n  List(\"EVChargePoint1\", \"EVChargePoint2\")\n}\n"}
{"id":"2fd4ffb3-c9ee-4e60-af95-6d4a52635696","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def selectAvailableStation(requestedType: String): String = {\n  val stations = Map(\"Type2\" -> \"StationX\", \"CCS\" -> \"StationY\")\n  try {\n    stations.get(requestedType).get\n  } catch {\n    case _: NoSuchElementException => throw new Exception(\"Requested charger type not found\")\n  }\n}\n"}
{"id":"c48396e6-69d2-4650-804f-54a3669ca8f5","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def parseStationResponse(json: String): Map[String, String] = {\n  if json.startsWith(\"{\") then Map(\"name\" -> \"GreenStation\")\n  else throw new RuntimeException(\"Malformed response from API.\")\n}\n"}
{"id":"ed6b7cb1-98ad-4db8-a70c-c230ee188dd5","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class StationUpdateService {\n  def updateStationStatus(id: String, status: String): Unit = {\n    if id.trim.isEmpty then throw new Exception(\"Station ID cannot be empty\")\n    if status != \"Active\" && status != \"Inactive\" then throw new Exception(\"Unknown station status\")\n    println(s\"Station $id status updated to $status\")\n  }\n}\n"}
{"id":"76babda6-70e1-4671-927f-cce04f565b08","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargingStationSearch {\n  def getStationDetails(name: String): String = {\n    try {\n      if name.nonEmpty then s\"Details of $name\"\n      else throw new NullPointerException(\"Station name required\")\n    } catch {\n      case e: NullPointerException => throw new RuntimeException(e.getMessage)\n    }\n  }\n}\n"}
{"id":"7993ac19-349b-474f-a722-68a88c07725f","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def mapRadiusMeters(radius: Int): String = {\n  if radius <= 0 then throw new IllegalArgumentException(\"Radius must be positive\")\n  f\"Using radius of $radius%d meters\"\n}\n"}
{"id":"830321da-7cd1-4ae6-878a-2385fe36e189","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def findNearbyChargingStations(userLat: Double, userLng: Double): List[String] = {\n  try {\n    if userLat > 90 || userLat < -90 then throw new RuntimeException(\"Latitude out of range\")\n    if userLng > 180 || userLng < -180 then throw new RuntimeException(\"Longitude out of range\")\n    List(\"StationAlpha\", \"StationBeta\")\n  } catch {\n    case e: RuntimeException => List(s\"Error: ${e.getMessage}\")\n  }\n}\n"}
{"id":"e08f536c-26e6-4088-8cc9-c1c7caf61654","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def chargerAvailability(schedule: String): Boolean = {\n  if schedule.matches(\"[0-9]{2}:[0-9]{2}-[0-9]{2}:[0-9]{2}\") then true\n  else throw new Exception(\"Invalid schedule format\")\n}\n"}
{"id":"21ddf718-dc67-4103-bb6c-018d2669ea37","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"object ChargingSessionManager {\n  def startSession(stationId: String): Int = {\n    if stationId == \"\" then throw new RuntimeException(\"Station ID required.\")\n    12345\n  }\n\n  def endSession(sessionId: Int): Unit = {\n    if sessionId <= 0 then throw new IllegalArgumentException(\"Invalid session ID.\")\n  }\n}\n"}
{"id":"bc6ccf7a-b176-4b77-842b-83116e0bc14d","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"enum StationLocatorError:\n  case InvalidCoordinates, StationNotFound, ServiceUnavailable\n\ndef validateCoordinates(lat: Double, lng: Double): Either[StationLocatorError, (Double, Double)] =\n  if lat < -90 || lat > 90 || lng < -180 || lng > 180 then Left(StationLocatorError.InvalidCoordinates)\n  else Right((lat, lng))\n"}
{"id":"f05f37d0-a0b3-4b99-aa5e-986ff701ce15","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class StationUnavailableError(stationName: String)\ndef getChargingStation(stationName: String): Option[String] = {\n  val available = Set(\"VoltPark\", \"ChargeNow\")\n  if available.contains(stationName) then Some(stationName) else None\n}\n"}
{"id":"120f8cac-1d4a-418c-9168-9ef7ca475ff2","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseStationId(id: String): Try[Int] = Try {\n  id.toInt\n}\n"}
{"id":"a61793dc-1c0b-4644-bdf2-7e7febcd03a2","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"sealed trait BookingError\ncase object StationAlreadyBooked extends BookingError\ncase object ChargerNotAvailable extends BookingError\n\ndef bookChargingSlot(slotId: Int): Either[BookingError, String] =\n  if slotId == 1 then Left(StationAlreadyBooked)\n  else if slotId == 2 then Left(ChargerNotAvailable)\n  else Right(\"Booking confirmed\")\n"}
{"id":"22b09bb9-f97d-4684-9f53-fb983af54c17","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def findStationByConnector(connectorType: String): Option[String] = {\n  val stations = Map(\"CHAdeMO\" -> \"EcoFast01\", \"CCS\" -> \"EcoFast02\")\n  stations.get(connectorType)\n}\n"}
{"id":"5928fe8f-b7c3-428c-913e-e9553ef63f60","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"sealed trait SessionError\ncase object SessionNotFound extends SessionError\n\nclass EVSessionManager {\n  def resumeSession(sessionId: String): Either[SessionError, String] =\n    if sessionId == \"ACTIVE123\" then Right(\"Resuming session\")\n    else Left(SessionNotFound)\n}\n"}
{"id":"0d2b3f01-6a11-4ff5-896a-f817821001e0","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def safeGetStationFeatures(name: String): Option[List[String]] = {\n  val features = Map(\"VoltPark\" -> List(\"AC\", \"Restroom\"))\n  features.get(name)\n}\n"}
{"id":"d6ee2577-d6d1-47c2-810f-d068f0824bc4","timestamp":1746100478657,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryGetStationRating(station: String): Try[Double] = Try {\n  if station == \"FastCharge\" then 4.2 else throw new Exception(\"Station not rated\")\n}\n"}
{"id":"222635a6-e6fd-4d67-a5e2-e4ccc26f41f6","timestamp":1746100478658,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"sealed trait StationDataError\ncase object DataCorrupted extends StationDataError\n\nobject DataParser {\n  def safeParseStationData(data: String): Either[StationDataError, Int] =\n    if data == \"OK\" then Right(100)\n    else Left(DataCorrupted)\n}\n"}
{"id":"ead3b91d-ea96-486f-a9cd-823396f4ae02","timestamp":1746100478658,"category":"throws","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getFastChargerPrice(station: String): Option[Double] = {\n  val prices = Map(\"TurboCharge\" -> 0.39, \"GreenVolt\" -> 0.42)\n  prices.get(station)\n}\n"}
{"id":"0e8fcb3f-e1e1-41f8-acd9-6000c9fbd62f","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class SensorReading(sensorId: String, value: Double)\ndef parseMoistureLevel(raw: String): Option[SensorReading] =\n  raw.split(\":\") match\n    case Array(id, v) =>\n      Try(v.toDouble).toOption.map(SensorReading(id, _))\n    case _ => None\n"}
{"id":"5db41cbe-50c4-496d-9328-024524d9f098","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class WeatherStationError(reason: String)\ndef validateTemperature(reading: Double): Either[WeatherStationError, Double] =\n  if reading < -50 || reading > 60 then\n    Left(WeatherStationError(s\"Temperature $reading out of range\"))\n  else\n    Right(reading)\n"}
{"id":"b3f43ed0-e728-43e8-8e54-47d76048b5bb","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait CropCheckError\ncase object SoilNotDetected extends CropCheckError\ncase object CropNotPresent extends CropCheckError\ndef detectCrop(soilSensor: Boolean, cropSensor: Boolean): Either[CropCheckError, String] =\n  if !soilSensor then Left(SoilNotDetected)\n  else if !cropSensor then Left(CropNotPresent)\n  else Right(\"Crop detected\")\n"}
{"id":"9d52b483-6df6-4d45-98cf-ff6bfe55d4e7","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def computeAverageYield(yields: List[Double]): Option[Double] =\n  if yields.isEmpty then None\n  else Some(yields.sum / yields.size)\n"}
{"id":"b59124db-7564-44a3-9b2a-1ec2bba39842","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"import scala.util.Try\ncase class DroneImage(filePath: String)\ndef loadDroneImage(path: String): Try[DroneImage] =\n  Try {\n    if !path.endsWith(\".jpg\") then throw new Exception(\"Invalid file type\")\n    DroneImage(path)\n  }\n"}
{"id":"2b31a54e-a870-42ae-bc45-d684bca47975","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait SensorError\ncase object SensorDisconnected extends SensorError\ncase object InvalidSensorValue extends SensorError\ndef readSensor(value: Option[Double]): Either[SensorError, Double] =\n  value match\n    case None => Left(SensorDisconnected)\n    case Some(v) if v < 0 => Left(InvalidSensorValue)\n    case Some(valid) => Right(valid)\n"}
{"id":"afd0c509-742a-4537-8e52-7d91323d3a0f","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def findPlotByName(plots: List[String], name: String): Option[String] =\n  plots.find(_ == name)\n"}
{"id":"09467c05-b5ae-4bb4-ac6d-94276d3b09e6","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"import scala.util.Try\ndef safeParseMoisture(raw: String): Try[Double] =\n  Try(raw.toDouble)\n"}
{"id":"ecc2ab0b-eee8-445d-abe7-68f48fc9c7fd","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait IrrigationError\ncase object PumpMalfunction extends IrrigationError\ndef activateIrrigation(pumpOk: Boolean): Either[IrrigationError, String] =\n  if pumpOk then Right(\"Pump activated\")\n  else Left(PumpMalfunction)\n"}
{"id":"f134c8a7-c69f-48db-ade2-72918c57053f","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def safeDivideHarvest(totalYield: Double, numPlots: Int): Option[Double] =\n  if numPlots == 0 then None\n  else Some(totalYield / numPlots)\n"}
{"id":"454a9814-2dd2-4052-ab1e-743b7fa4001e","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class CropDataException(msg: String) extends Exception(msg)\ndef fetchCropType(cropCode: String): String =\n  cropCode match {\n    case \"WHT\" => \"Wheat\"\n    case \"CRN\" => \"Corn\"\n    case _ =>\n      throw new CropDataException(\"Unknown crop code\")\n  }\n"}
{"id":"cb11035e-edac-4dc5-adec-08a506a68eed","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def recordHarvestArea(area: Double): Unit =\n  if area < 0 then throw new IllegalArgumentException(\"Area cannot be negative\")\n  ()\n"}
{"id":"1d976a7e-801c-4a77-bcc6-ff68e90bb621","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def calculateRainfallIndex(records: List[Double]): Double =\n  try\n    records.sum / records.length\n  catch case e: Exception =>\n    throw new RuntimeException(\"Error calculating rainfall index\")\n"}
{"id":"264b036b-e7a6-417a-8610-db9caed4852f","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class SensorFailure(message: String) extends Exception(message)\ndef checkSensor(sensorOk: Boolean): Unit =\n  if !sensorOk then throw new SensorFailure(\"Sensor failed to report data\")\n"}
{"id":"1d6e5762-f636-4035-a979-1c63ca0124be","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def extractPlotId(line: String): Int =\n  try\n    line.split(\",\")(1).toInt\n  catch case _: Throwable =>\n    throw new NumberFormatException(\"Plot ID not found or invalid\")\n"}
{"id":"e1279f4f-f0c3-4c72-a1ec-b0fdebf6c7fc","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def logSoilSample(sample: String): Unit =\n  try\n    val parts = sample.split(\":\")\n    if parts.length != 2 then throw new Exception(\"Malformed sample\")\n  catch case e: Exception =>\n    println(\"Sample logging failed: \" + e.getMessage)\n"}
{"id":"a4931eff-a454-4bd3-86ef-0232b6f220ae","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class MissingMoistureException extends Exception(\"Moisture data missing\")\ndef getMoistureLevel(optionalValue: Option[Double]): Double =\n  optionalValue.getOrElse(throw new MissingMoistureException)\n"}
{"id":"72102e7c-6983-48ed-a3d7-46584cae61f5","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def normalizeReadings(readings: List[Double]): List[Double] =\n  try\n    val mean = readings.sum / readings.size\n    readings.map(_ / mean)\n  catch case e: Exception =>\n    throw new Exception(\"Normalization failed\")\n"}
{"id":"06402284-09ed-4760-9b29-d91097533ddf","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def checkDroneBattery(level: Int): Unit =\n  if level < 20 then throw new IllegalStateException(\"Drone battery critically low\")\n"}
{"id":"ea6b053f-cedb-4677-807f-c2a29e23c821","timestamp":1746100494996,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def parseYieldValue(line: String): Double =\n  try\n    line.trim.toDouble\n  catch case e: NumberFormatException =>\n    throw e\n"}
{"id":"7958cea5-ae87-4eb9-93eb-3c70a59ab00d","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class SensorReadFailure(sensorId: String)\ncase class CropMoistureLevel(crop: String, moisture: Double)\n\ndef readMoisture(sensorId: String): Either[SensorReadFailure, CropMoistureLevel] =\n  if sensorId == \"brokenSensor\" then\n    Left(SensorReadFailure(sensorId))\n  else\n    Right(CropMoistureLevel(\"Wheat\", 22.7))"}
{"id":"cfc90765-837c-4300-8b48-58c9bdc82897","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"class PesticideLimitExceeded(message: String) extends Exception(message)\n\ndef applyPesticide(amount: Double): Unit = {\n  if (amount > 2.0) {\n    throw new PesticideLimitExceeded(\"Pesticide usage exceeds legal limit!\")\n  }\n}"}
{"id":"6db670a8-ea96-4143-be7c-075874972554","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait FieldDataError\ncase object MissingFieldCoordinates extends FieldDataError\n\ncase class FieldCoordinates(lat: Double, lon: Double)\n\ndef getFieldCoordinates(fieldId: String): Option[FieldCoordinates] =\n  if fieldId.isEmpty then None else Some(FieldCoordinates(42.0, 11.0))"}
{"id":"976491bb-812a-445d-a1c1-9443535f0ba9","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def calculateYieldIncrease(fertilizerKg: Double): Double = {\n  if (fertilizerKg <= 0) throw new IllegalArgumentException(\"Fertilizer amount must be positive\")\n  20.0 * math.log(fertilizerKg)\n}"}
{"id":"5ec4e9bc-7ec5-4a49-93d4-4cb5f46bef07","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef safeParseSatelliteDate(dateStr: String): Try[java.time.LocalDate] =\n  Try(java.time.LocalDate.parse(dateStr))"}
{"id":"e1fe252c-077c-44f9-9a28-f05c9e7618f6","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"object CropSensorManager {\n  def openConnection(sensorId: String): Unit = {\n    if (sensorId == \"offline\") {\n      throw new Exception(\"Sensor not online\")\n    }\n  }\n}"}
{"id":"e9af342d-65ab-4a06-a864-5b46955fd640","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait ImageError\ncase object ImageMissing extends ImageError\n\ncase class SatelliteImage(id: String, pixels: Array[Int])\n\ndef loadSatelliteImage(imageId: String): Either[ImageError, SatelliteImage] =\n  if imageId == \"notfound\" then Left(ImageMissing)\n  else Right(SatelliteImage(imageId, Array(1,2,3)))"}
{"id":"18eb43e7-84d0-4d1a-bfd4-be3e5e46a184","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def parseMoistureReading(sensorValue: String): Double = {\n  try {\n    sensorValue.toDouble\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Invalid moisture reading format\")\n  }\n}"}
{"id":"3234590b-93c8-471b-9f72-7e3469d618b5","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryHarvestPrediction(growthStage: String): Try[Int] =\n  Try {\n    if growthStage == \"Seedling\" then throw new IllegalArgumentException(\"Too early to predict\")\n    else 42\n  }"}
{"id":"769d8b27-221a-4b99-816d-bd7506a0a995","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def openIrrigationValve(valveId: String): Boolean = {\n  if (valveId == \"stuck\") {\n    throw new RuntimeException(\"Valve is stuck and cannot be opened\")\n  } else true\n}"}
{"id":"70b7e979-4cb6-4c74-aaa8-987a97ee0389","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class DiseaseScanError(details: String)\n\ndef scanForDisease(imageData: Array[Byte]): Either[DiseaseScanError, Boolean] =\n  if imageData.isEmpty then Left(DiseaseScanError(\"No image data provided\"))\n  else Right(true)"}
{"id":"81c6f9e2-b3f2-4210-8660-385516c94f37","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def setFertilizerRate(hectare: Int, rate: Double): Unit = {\n  if (rate < 0) throw new IllegalArgumentException(\"Rate cannot be negative\")\n}"}
{"id":"2eed814b-bc3b-42f5-96f6-7e8c8b4c609b","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryFetchWeather(geo: (Double, Double)): Try[Double] =\n  Try {\n    if geo._1 == 0.0 && geo._2 == 0.0 then throw new Exception(\"Invalid coordinates\")\n    else 27.3\n  }"}
{"id":"270c4711-879c-4888-b031-3f9eb9b87ead","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def computeAverageSoilPH(samples: Seq[Double]): Double = {\n  if (samples.isEmpty) throw new Exception(\"No soil pH samples given\")\n  samples.sum / samples.size\n}"}
{"id":"842911cd-0862-4520-ae73-086c2dca7f4a","timestamp":1746100512942,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"sealed trait IrrigationError\ncase object ValveFailure extends IrrigationError\n\ncase class IrrigationLog(valveId: String, time: String)\n\ndef logIrrigation(valveId: String): Either[IrrigationError, IrrigationLog] =\n  if valveId == \"faulty\" then Left(ValveFailure)\n  else Right(IrrigationLog(valveId, \"10:00\"))"}
{"id":"47cec8eb-8723-46db-9203-c3807cc16120","timestamp":1746100512943,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def assignCropPlot(plotId: String, cropType: String): Unit = {\n  if (plotId == \"taken\") {\n    throw new Exception(\"Plot already has a crop assigned\")\n  }\n}"}
{"id":"b43c4857-6876-4a98-b69b-689a270ab677","timestamp":1746100512943,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class TemperatureReadingFailed(sensorLocation: String)\n\ndef getTemperature(sensorLocation: String): Either[TemperatureReadingFailed, Double] =\n  if sensorLocation == \"outdoor_faulty\" then Left(TemperatureReadingFailed(sensorLocation))\n  else Right(24.6)"}
{"id":"d6749c9e-0c8b-458c-a0bd-b3516732e0b4","timestamp":1746100512943,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def updateNutrientLevels(plotReference: String, amount: Double): Boolean = {\n  if (amount < 0) throw new IllegalArgumentException(\"Amount must be non-negative\")\n  true\n}"}
{"id":"2317b34a-0374-4f58-94fd-cedf287391e4","timestamp":1746100512943,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class WeatherFetchError(details: String)\n\ndef fetchWeatherPrediction(areaCode: String): Either[WeatherFetchError, Double] =\n  if areaCode == \"unknown\" then Left(WeatherFetchError(\"Weather not available\"))\n  else Right(18.2)"}
{"id":"2fdbb08c-a2f2-4f1e-afa4-100442951b8c","timestamp":1746100512943,"category":"throws","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def removeWeedPatch(patchId: String): Unit = {\n  if (patchId.isEmpty) throw new Exception(\"Patch identifier is required\")\n}"}
{"id":"bdce2fe1-be2e-4068-b630-8c5d3dd6af73","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class SensorReading(sensorId: String, value: Double)\nsealed trait AggregationError\ncase object SensorNotFound extends AggregationError\ndef aggregateValues(readings: List[SensorReading]): Either[AggregationError, Double] =\n  if readings.isEmpty then Left(SensorNotFound)\n  else Right(readings.map(_.value).sum / readings.size)"}
{"id":"8a4fc5ab-017a-48a6-9e2c-3c63a8cd4d48","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def fetchSensorTemperature(sensorId: String): Double = {\n  if (sensorId.length < 3) throw new IllegalArgumentException(\"Invalid Sensor ID\")\n  else 22.8\n}\ntry {\n  val temp = fetchSensorTemperature(\"a1\")\n} catch {\n  case e: IllegalArgumentException => println(\"Error: \" + e.getMessage)\n}"}
{"id":"9c7809b8-dcf8-402a-b8ec-b311cd8d5f04","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"import scala.util.Try\ndef parseHumidityPayload(payload: String): Try[Double] =\n  Try(payload.toDouble)"}
{"id":"eb11f67c-5fe0-433e-87a9-0c48e00ef9cc","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def getMotionCount(sensorGroup: String): Int = {\n  try {\n    if (sensorGroup.isEmpty) throw new RuntimeException(\"Empty group\")\n    else 7\n  } catch {\n    case ex: RuntimeException => 0\n  }\n}"}
{"id":"9d798019-3671-481d-9028-a1276bdc0492","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait PayloadParseError\ncase object MalformedPayload extends PayloadParseError\ndef decodeSensorPayload(payload: String): Either[PayloadParseError, Int] =\n  payload.toIntOption match\n    case Some(value) => Right(value)\n    case None => Left(MalformedPayload)"}
{"id":"bd31e117-45a3-42e7-bf05-cfd45dc6bf0d","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class SensorConnectionError(msg: String) extends Exception(msg)\ndef requestSensorSync(deviceId: String): Unit = {\n  if (deviceId == \"offline\") throw new SensorConnectionError(\"Sensor disconnected\")\n}\ntry {\n  requestSensorSync(\"offline\")\n} catch {\n  case err: SensorConnectionError => println(\"Failed to sync: \" + err.getMessage)\n}"}
{"id":"45a8c619-ae02-4a6d-b04a-6f4bc63ac296","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class LightIntensity(value: Double)\ndef fromRawLightPayload(payload: String): Option[LightIntensity] =\n  payload.toDoubleOption.map(LightIntensity.apply)"}
{"id":"81898652-3d9d-4e9f-a3c6-a176a9819428","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def combineSensorAverages(values: List[Double]): Double = {\n  if (values.isEmpty) throw new IllegalArgumentException(\"No sensor values\")\n  values.sum / values.length\n}"}
{"id":"1ebf04ae-6bcb-4941-b4d2-91b931a713a5","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait DataUploadError\ncase object NetworkTimeout extends DataUploadError\ncase object InvalidChecksum extends DataUploadError\ndef uploadToServer(buffer: Array[Byte], checksum: Int): Either[DataUploadError, String] =\n  if buffer.length == 0 then Left(NetworkTimeout)\n  else if buffer.sum != checksum then Left(InvalidChecksum)\n  else Right(\"Upload successful\")"}
{"id":"cd3dda58-45ba-4707-9cf7-4b4f1628860f","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def extractPressureValue(entry: String): Double = {\n  if (!entry.forall(_.isDigit)) throw new NumberFormatException(\"Non-numeric pressure entry\")\n  entry.toDouble\n}"}
{"id":"1568ddd5-0406-4759-b991-7779659c2701","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"import scala.util.Try\ncase class CurrentReading(value: Double)\ndef safeParseCurrentMeasurement(measureStr: String): Try[CurrentReading] =\n  Try(CurrentReading(measureStr.toDouble))"}
{"id":"c08846e4-51e1-43a5-a714-e28171d620b3","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"object SensorAggregator {\n  def aggregateOrThrow(sensorValues: Seq[Double]): Double = sensorValues match {\n    case Nil => throw new Exception(\"No sensor values collected\")\n    case seq => seq.sum / seq.length\n  }\n}"}
{"id":"7657aab1-f2bd-4b79-a7be-4fc2121ee77f","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait TimestampError\ncase object EmptyTimestamp extends TimestampError\ncase object MalformedTimestamp extends TimestampError\ndef parseTimestamp(input: String): Either[TimestampError, Long] =\n  if input.isEmpty then Left(EmptyTimestamp)\n  else input.toLongOption.toRight(MalformedTimestamp)"}
{"id":"bfa067d9-9a34-425b-89dd-6adac951cd0a","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def normalizePulseRate(sensorId: String, rate: Int): Int = {\n  if (rate < 0) throw new IllegalArgumentException(\"Negative pulse rate for \" + sensorId)\n  rate\n}"}
{"id":"b35444d8-698d-434e-8782-635e3e741a8f","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class AggregatedValues(measurements: List[Double])\ndef combinedSum(measure: AggregatedValues): Option[Double] =\n  if measure.measurements.isEmpty then None\n  else Some(measure.measurements.sum)"}
{"id":"2ccf9e4e-42e7-4da4-a097-648d685799c0","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def mergeSensorPackets(packet1: String, packet2: String): String = {\n  try {\n    if (packet1 == packet2) throw new Exception(\"Duplicate packet detected\")\n    packet1 + packet2\n  } catch {\n    case _: Exception => \"MERGE_ERROR\"\n  }\n}"}
{"id":"3918e6cd-3d27-4c32-bedf-8fd14e6cda40","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"import scala.util.Try\ndef safeBatteryLevelParse(level: String): Try[Int] =\n  Try(level.trim.toInt)"}
{"id":"033aac9a-0b4e-4ef1-96e0-7ee192b01738","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class OutlierDetectionException(msg: String) extends Exception(msg)\ndef detectTemperatureAnomaly(values: List[Double]): Unit = {\n  if (values.exists(_ > 100.0)) throw new OutlierDetectionException(\"Extreme temperature\")\n}"}
{"id":"c41acfb0-c913-4ec5-a1db-2897483019d2","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait PartitionError\ncase object PartitionIndexOutOfBounds extends PartitionError\ndef extractPartition(readings: List[Double], idx: Int): Either[PartitionError, List[Double]] =\n  if idx < 0 || idx > readings.length then Left(PartitionIndexOutOfBounds)\n  else Right(readings.take(idx))"}
{"id":"26de14d3-31ff-4c2e-9333-ff37d1e0920d","timestamp":1746100540898,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def checkSensorCalibration(calibStr: String): Boolean = {\n  try {\n    calibStr.toBoolean\n  } catch {\n    case _: Exception => false\n  }\n}"}
{"id":"61d6bb52-87e6-4ddd-99cc-9af14e690995","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class SensorReading(sensorId: String, value: Double)\ncase object SensorNotFound extends SensorAggregationError\nsealed trait SensorAggregationError\n\ndef calculateAverage(temperatureReadings: List[SensorReading]): Either[SensorAggregationError, Double] =\n  if temperatureReadings.isEmpty then Left(SensorNotFound)\n  else Right(temperatureReadings.map(_.value).sum / temperatureReadings.size)"}
{"id":"0d622f60-ad02-4174-8beb-f460b36e8930","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def normalizeHumidity(humidity: Double): Double =\n  if (humidity < 0.0 || humidity > 100.0) throw new IllegalArgumentException(\"Humidity reading out of range\")\n  else humidity / 100.0"}
{"id":"52f71260-8b0b-4d06-bd32-e46234558e47","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class AggregatedSensorData(sensorId: String, mean: Double)\nsealed trait AggregationError\ncase object NotEnoughData extends AggregationError\n\ndef aggregateTemperatureTemperatures(readings: List[SensorReading]): Either[AggregationError, AggregatedSensorData] =\n  readings match\n    case Nil => Left(NotEnoughData)\n    case nonEmptyList =>\n      val mean = nonEmptyList.map(_.value).sum / nonEmptyList.size\n      Right(AggregatedSensorData(nonEmptyList.head.sensorId, mean))"}
{"id":"f17f857a-3bd0-4edf-8ec0-a681672d2264","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def getLatestReading(sensorId: String, readings: Map[String, Double]): Double =\n  readings.get(sensorId) match {\n    case Some(v) => v\n    case None => throw new NoSuchElementException(\"Reading for sensor not found\")\n  }"}
{"id":"08abec32-820a-4fa1-aacd-4ce44b090ace","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def parseSensorPayload(payload: String): Option[SensorReading] =\n  payload.split(\":\") match\n    case Array(sensorId, valueString) =>\n      scala.util.Try(valueString.toDouble).toOption.map(v => SensorReading(sensorId, v))\n    case _ => None"}
{"id":"615529a8-d80a-423c-9084-b5b42ca85fe6","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def combinePressureReadings(pressure1: String, pressure2: String): Double =\n  try {\n    pressure1.toDouble + pressure2.toDouble\n  } catch {\n    case e: NumberFormatException => throw new IllegalArgumentException(\"Invalid pressure value\")\n  }"}
{"id":"10078b0d-52ca-4294-8fb0-a00e3df21e98","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def calibrateLightIntensity(raw: Double): Either[String, Double] =\n  if raw < 0.0 then Left(\"Light intensity must be non-negative\")\n  else Right(raw * 1.025)"}
{"id":"ebc43b61-6b4e-44c8-afb8-da0bd4fba7e1","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def collectMotionEvents(events: List[String]): List[String] =\n  if (events == null) throw new NullPointerException(\"Event list cannot be null\")\n  else events"}
{"id":"de48d1ea-1e56-481e-9c41-5c82311e9071","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseTemperature(input: String): Try[Double] =\n  Try(input.toDouble)"}
{"id":"786da202-ac03-46bf-b252-fa1a4610e966","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def retrieveSensorData(sensorName: String): Double =\n  try {\n    // Pretend this reaches hardware, will fail if no sensor\n    if (sensorName == \"missing\") throw new RuntimeException(\"Sensor inaccessible!\")\n    else 21.78\n  } catch {\n    case e: RuntimeException => throw new IllegalStateException(\"Unable to retrieve sensor data\")\n  }"}
{"id":"fa4acd3a-d770-4177-a436-e49beb38a297","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait PressureProcessingError\ncase object InvalidPressureValue extends PressureProcessingError\n\ndef safeParsePressure(pressureString: String): Either[PressureProcessingError, Double] =\n  scala.util.Try(pressureString.toDouble).toEither.left.map(_ => InvalidPressureValue)"}
{"id":"1a413b77-e674-4f36-b095-74b83c63dec9","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def logBatteryError(battery: Int): Int =\n  try {\n    if (battery < 0) throw new Exception(\"Battery level is negative!\")\n    if (battery > 100) throw new Exception(\"Battery level too high!\")\n    battery\n  } catch {\n    case e: Exception =>\n      println(e.getMessage)\n      -1\n  }"}
{"id":"9aee3c54-d567-443c-b038-a1f12749e92c","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def tryGetAirQuality(readings: Map[String, Double], id: String): Option[Double] =\n  readings.get(id)"}
{"id":"d1f3d4d2-1ccc-4f5b-a413-fd1a9f584acc","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def parseSensorId(id: String): Int =\n  try {\n    id.toInt\n  } catch {\n    case _: NumberFormatException => throw new Exception(\"Sensor ID must be an integer\")\n  }"}
{"id":"0187bcbe-2ba7-442b-8ec9-2fefd45055f5","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait AggregationFailure\ncase object NoReadingsForAggregation extends AggregationFailure\n\ndef sensorAverageSafe(readings: List[Double]): Either[AggregationFailure, Double] =\n  readings match\n    case Nil => Left(NoReadingsForAggregation)\n    case list => Right(list.sum / list.size)"}
{"id":"c5d0bde0-21b6-4201-b365-f0c2f24c39a1","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def calculatePressureDelta(oldReading: Double, newReading: Double): Double =\n  if (oldReading < 0 || newReading < 0) throw new Exception(\"Negative pressure values are not allowed\")\n  newReading - oldReading"}
{"id":"46705f39-5417-40d2-9729-9849a1b8a4ef","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"import scala.util.Try\n\ndef maybeParseHumidity(reading: String): Try[Double] =\n  Try(reading.toDouble).filter(_ >= 0).filter(_ <= 100)"}
{"id":"b8fc3489-4450-48c5-880e-5dbe2917f22f","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def extractMotionReading(event: String): String =\n  try {\n    if (event.startsWith(\"motion:\")) event.substring(7)\n    else throw new IllegalArgumentException(\"Invalid event format\")\n  } catch {\n    case e: IllegalArgumentException =>\n      \"error:invalid\"\n  }"}
{"id":"232d2240-f01c-453a-bda1-31094e12f401","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"sealed trait VoltageError\ncase object NegativeVoltageDetected extends VoltageError\n\ndef validateVoltage(v: Double): Either[VoltageError, Double] =\n  if v < 0 then Left(NegativeVoltageDetected)\n  else Right(v)"}
{"id":"61ad4a12-e90e-4875-a8cf-25e7aa79ae10","timestamp":1746100570901,"category":"throws","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def averageCO2Levels(values: Seq[String]): Double =\n  var total = 0.0\n  var n = 0\n  for (v <- values) {\n    try {\n      total += v.toDouble\n      n += 1\n    } catch {\n      case _: NumberFormatException => // skip invalid\n    }\n  }\n  if (n == 0) throw new Exception(\"No valid CO2 values\")\n  total / n"}
{"id":"03c2a813-74be-4e38-9890-65cc16151e3d","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class StopNotFoundError(stopName: String)\nsealed trait PublicTransitError\ncase object RouteUnavailable extends PublicTransitError\ncase class InvalidRouteData(msg: String) extends PublicTransitError\n\ndef findStopIndex(stops: Seq[String], stopName: String): Either[PublicTransitError, Int] =\n  stops.indexOf(stopName) match\n    case -1 => Left(StopNotFoundError(stopName))\n    case idx => Right(idx)"}
{"id":"49260299-7b95-4f8a-b685-df4dae5575d7","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def getRouteHeadway(headway: Int): Option[Int] =\n  if headway > 0 then Some(headway) else None\n\nval possibleHeadway = getRouteHeadway(-10)\nval headwayOrDefault = possibleHeadway.getOrElse(15)"}
{"id":"05114365-a7f7-4f2b-ae52-ec48e4acb9cd","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseTransferTime(time: String): Try[Int] =\n  Try(time.toInt)\n\nval transfer = parseTransferTime(\"7\")\nval result = transfer.getOrElse(0)"}
{"id":"44ed12cc-3a76-4056-937d-1df1e1347b33","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait JourneyError\ncase object NoAvailableRoutes extends JourneyError\ncase object OriginEqualsDestination extends JourneyError\n\ndef planDirectJourney(origin: String, destination: String, routes: Seq[(String, String)]): Either[JourneyError, (String,String)] =\n  if origin == destination then Left(OriginEqualsDestination)\n  else routes.find(_ == (origin, destination)).toRight(NoAvailableRoutes)"}
{"id":"769090c9-ad89-4791-a1bb-c70d849eb8f4","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def safeFindFirstDeparture(times: Seq[Int]): Option[Int] =\n  times.find(_ > 0)\n\nval firstDeparture = safeFindFirstDeparture(Seq(-1, 0, 12, 15))"}
{"id":"62805635-d357-452c-88ea-0ecfaf1c032a","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait ScheduleError\ncase object NoServiceAtTime extends ScheduleError\n\ndef getNextService(time: Int, schedule: Seq[Int]): Either[ScheduleError, Int] =\n  schedule.find(_ > time).toRight(NoServiceAtTime)"}
{"id":"cf11615b-2eca-443b-be40-449b5427fb5b","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def validateFareAmount(amount: Double): Either[String, Double] =\n  if amount >= 0 then Right(amount)\n  else Left(\"Negative fare amount is invalid for public transit.\")\n\nval result = validateFareAmount(-1.5)"}
{"id":"9fa8d4e5-f79a-4937-88a7-02c201625c44","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"import scala.util.Try\n\ndef convertStopId(stopId: String): Try[Int] =\n  Try(stopId.toInt)\n\nval validId = convertStopId(\"A0021\").getOrElse(-1)"}
{"id":"3542268f-91e8-4efb-ad31-7b21c13978a9","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait TransferError\ncase object ZeroTransferWindow extends TransferError\ncase class NegativeTransferTime(time: Int) extends TransferError\n\ndef calculateTransferWindow(time: Int): Either[TransferError, Int] =\n  if time < 0 then Left(NegativeTransferTime(time))\n  else if time == 0 then Left(ZeroTransferWindow)\n  else Right(time)"}
{"id":"5e42e42c-cfcb-4c5c-abce-883ed17aa3e5","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def findAvailableVehicles(vehicles: List[String]): Either[String, String] =\n  vehicles.headOption.toRight(\"No vehicles are currently available.\")\n\nval downtownBus = findAvailableVehicles(Nil)"}
{"id":"e5c26208-89eb-4190-a0df-2bbf48370db2","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class InvalidStopNameException(stopName: String) extends Exception(s\"Invalid stop name: $stopName\")\n\ndef getStopIndexOrThrow(stops: Seq[String], stopName: String): Int =\n  val idx = stops.indexOf(stopName)\n  if idx >= 0 then idx else throw new InvalidStopNameException(stopName)"}
{"id":"3ed029bc-5fe7-40f7-9ac3-95818811e71f","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class RouteParseException(message: String) extends Exception(message)\n\nobject RouteParser {\n  def parseRoute(route: String): Int =\n    try {\n      route.toInt\n    } catch {\n      case _: NumberFormatException => throw new RouteParseException(\"Failed to parse route number.\")\n    }\n}"}
{"id":"29668c60-1bfc-44bc-ab21-d096182eba2f","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def fareByZone(zone: String): Double =\n  zone match {\n    case \"A\" => 2.5\n    case \"B\" => 3.0\n    case _ => throw new IllegalArgumentException(\"Unknown fare zone: \" + zone)\n  }"}
{"id":"56f6686a-c0b3-4ac5-a7a3-17bfc4bf301b","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getFirstArrivalOrThrow(arrivals: List[Int]): Int =\n  try {\n    arrivals.head\n  } catch {\n    case _: NoSuchElementException => throw new RuntimeException(\"No arrivals available for the next stop.\")\n  }"}
{"id":"2f8654ca-2ed5-4f16-9649-fe9695c520a6","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class ScheduleLookupException(msg: String) extends Exception(msg)\n\ndef lookupDeparture(schedule: Map[String, Int], stop: String): Int =\n  if schedule.contains(stop) then\n    schedule(stop)\n  else\n    throw new ScheduleLookupException(\"Departure not found for: \" + stop)"}
{"id":"508fe132-405e-4880-9393-f473d061ba4d","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def readTransferTimeField(line: String): Int =\n  val parts = line.split(\",\")\n  try {\n    parts(2).toInt\n  } catch {\n    case _: Exception => throw new IllegalArgumentException(\"Invalid transfer time in transit line data.\")\n  }"}
{"id":"f960fd74-8e20-4df9-aa93-ab322b74e8fd","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def findDirectRouteOrThrow(routes: List[List[String]], start: String, end: String): List[String] =\n  routes.find(r => r.head == start && r.last == end).getOrElse(throw new NoSuchElementException(\"Route not found.\"))"}
{"id":"558dfd42-28f8-459f-b08c-63a93fd2eda5","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def boardingStopIndex(stops: Vector[String], stop: String): Int =\n  val idx = stops.indexOf(stop)\n  if idx == -1 then\n    throw new IllegalArgumentException(s\"Boarding stop '$stop' not found.\")\n  idx"}
{"id":"b6e7eef7-9fde-4ba2-bd49-f4c3a297caf4","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def logAndThrowIfNoService(stop: String, available: Boolean): Unit =\n  try {\n    if !available then throw new RuntimeException(\"No service at: \" + stop)\n  } catch {\n    case e: RuntimeException => println(e.getMessage); throw e\n  }"}
{"id":"304bd5d9-45db-4a95-abaf-a272714a24b3","timestamp":1746100590226,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getFareFromMap(fares: Map[String, Double], route: String): Double =\n  try {\n    fares(route)\n  } catch {\n    case ex: NoSuchElementException => throw new Exception(s\"Fare not found for route $route\")\n  }"}
{"id":"22549163-31ed-4e67-9b27-fc237e66ff0d","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"case class StopNotFoundError(stopName: String) extends Exception(s\"Stop not found: $stopName\")\ndef getStopIdOrThrow(stopName: String, stopDirectory: Map[String, Int]): Int =\n  stopDirectory.get(stopName) match\n    case Some(id) => id\n    case None => throw new StopNotFoundError(stopName)"}
{"id":"85a567d0-7a3f-4e93-a33d-108f0e0a639f","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"case class JourneyPlannerError(msg: String) extends Exception(msg)\ndef computeRouteDistance(route: List[Int], segmentDistances: Map[(Int, Int), Int]): Int =\n  try\n    route.sliding(2).map{\n      case List(from, to) => segmentDistances((from, to))\n      case _ => 0\n    }.sum\n  catch\n    case _: NoSuchElementException => throw new JourneyPlannerError(\"Missing segment distance\")"}
{"id":"e7970342-92ce-440c-906c-49c9c2520fc4","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class InvalidTransferTime(msg: String) extends Exception(msg)\ndef calculateTransferTime(arrival: Int, departure: Int): Int =\n  if departure < arrival then throw new InvalidTransferTime(\"Departure before arrival\")\n  else departure - arrival"}
{"id":"2d54174e-e21a-46ec-84da-f8a09516b3c9","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getScheduleOrThrow(lineId: Int, schedules: Map[Int, Seq[String]]): Seq[String] = {\n  try {\n    schedules(lineId)\n  } catch {\n    case _: NoSuchElementException => throw new java.util.NoSuchElementException(s\"No schedule for $lineId\")\n  }\n}"}
{"id":"c030a752-a496-4b10-b449-9d7fc0105f95","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"case class RoutePlanningException(msg: String) extends Exception(msg)\ndef getRequiredTicketType(zone: Int): String =\n  zone match\n    case 1 => \"single\"\n    case 2 => \"multi-zone\"\n    case _ => throw new RoutePlanningException(\"Unknown zone\")"}
{"id":"8071a1cf-5cee-4522-8f6b-b7961a29b06a","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class FareCalculationException(message: String) extends Exception(message)\ndef calculateFareOrThrow(origin: String, destination: String, fares: Map[(String, String), Double]): Double =\n  fares.get((origin, destination)) match {\n    case Some(fare) => fare\n    case None => throw new FareCalculationException(s\"Fare not found for $origin -> $destination\")\n  }"}
{"id":"1e614848-b685-46c6-8bf2-9ce5b3ff3225","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def fetchLiveDepartureEstimate(stopId: Int): Int = {\n  try {\n    if (stopId < 0) throw new IllegalArgumentException(\"Invalid stop id\")\n    5\n  } catch {\n    case ex: IllegalArgumentException => -1\n  }\n}"}
{"id":"bba58429-0c11-4e64-84a8-1d3cfbaba84f","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"case class InvalidRouteError(msg: String) extends Exception(msg)\ndef validateRoute(route: List[Int]): Boolean =\n  if route.isEmpty then throw new InvalidRouteError(\"Route cannot be empty\")\n  else true"}
{"id":"820a6e69-e082-4945-ae61-4401ece0b885","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def findNextTrainOrThrow(trains: List[String]): String = {\n  try {\n    trains.head\n  } catch {\n    case _: NoSuchElementException => throw new RuntimeException(\"No trains scheduled\")\n  }\n}"}
{"id":"c5738cb5-7501-45a0-b1d4-0a9c49f71398","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def safeZoneLookup(zoneId: Int, zones: Seq[Int]): Boolean =\n  try\n    if zones.contains(zoneId) then true\n    else throw new Exception(\"Zone not serviced\")\n  catch\n    case _: Exception => false"}
{"id":"ad2f46bb-0982-41c5-a952-8ffc8d47ca73","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait JourneyError\ncase object NoSuchStop extends JourneyError\ncase object NoConnection extends JourneyError\ncase class TimetableConflict(details: String) extends JourneyError\ndef findConnection(source: String, target: String, graph: Map[String, List[String]]): Either[JourneyError, List[String]] =\n  if !graph.contains(source) then Left(NoSuchStop)\n  else if source == target then Right(List(source))\n  else graph(source).find(_ == target) match\n    case Some(_) => Right(List(source, target))\n    case None => Left(NoConnection)"}
{"id":"f5b44cad-ca6a-4dba-9242-ea1b672fe326","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def optionalNextBusTime(stopId: Int, arrivals: Map[Int, List[String]]): Option[String] =\n  arrivals.get(stopId).flatMap(_.headOption)"}
{"id":"068cae23-7f81-4a8b-9e33-db67b06c93f7","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"import scala.util.Try\ndef parseScheduledTime(timeString: String): Try[Int] =\n  Try(timeString.toInt)"}
{"id":"09e140fd-61d5-4229-9e34-bad5d9c19da8","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait FareError\ndef fetchFareOptionally(zonePair: (Int, Int), fares: Map[(Int, Int), Double]): Option[Double] =\n  fares.get(zonePair)"}
{"id":"ea63f2cf-a970-4fb7-a86e-012d1d830eca","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait PlannerError\ncase object DepartureBeforeArrival extends PlannerError\ndef calculateTransferEither(arrival: Int, departure: Int): Either[PlannerError, Int] =\n  if departure < arrival then Left(DepartureBeforeArrival)\n  else Right(departure - arrival)"}
{"id":"2e02ee04-f26d-423c-8b4c-e63f20708b45","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def tryRoutePlanning(route: List[Int], network: Set[Int]): Option[List[Int]] =\n  if route.forall(network.contains) then Some(route)\n  else None"}
{"id":"e1f84f2d-8907-44fe-867b-5a8097f3dd94","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"import scala.util.Try\ndef safeSegmentDistance(from: Int, to: Int, segmentDistances: Map[(Int, Int), Int]): Try[Int] =\n  Try(segmentDistances((from, to)))"}
{"id":"202f0197-3c56-41eb-bccd-20e096eead53","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class ScheduleNotFound(stopId: Int)\ndef getScheduleEither(stopId: Int, schedules: Map[Int, Seq[String]]): Either[ScheduleNotFound, Seq[String]] =\n  schedules.get(stopId).toRight(ScheduleNotFound(stopId))"}
{"id":"6f507ec0-9f96-4417-8765-673fb59c3c4d","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def nextAvailableTrainId(arrivalTimes: List[Int]): Either[String, Int] =\n  arrivalTimes.sorted.headOption.toRight(\"No upcoming trains scheduled\")"}
{"id":"52336d53-56da-46cd-a267-ceac6c0bf419","timestamp":1746100609813,"category":"throws","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"sealed trait TicketError\ncase object UnknownZone extends TicketError\ndef getTicketTypeEither(zone: Int): Either[TicketError, String] =\n  zone match\n    case 1 => Right(\"single\")\n    case 2 => Right(\"multi-zone\")\n    case _ => Left(UnknownZone)"}
{"id":"762314c3-4562-4aa4-900f-a8d3fc4084a4","timestamp":1746100625998,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\ncase object TerminalOffline extends PaymentError\n\ndef authorizePayment(amount: Double, balance: Double, terminalStatus: Boolean): Either[PaymentError, String] =\n  if !terminalStatus then Left(TerminalOffline)\n  else if amount > balance then Left(InsufficientFunds)\n  else Right(\"Payment authorized\")"}
{"id":"90bdd172-c401-4911-ae46-74462f482243","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def lookupProduct(sku: String): Option[String] =\n  val inventory = Map(\"12345\" -> \"Laptop\", \"67890\" -> \"Headphones\")\n  inventory.get(sku)"}
{"id":"277f0c9e-54f9-4cf3-b946-6c7d33221996","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseReceiptAmount(input: String): Try[Double] =\n  Try(input.trim.toDouble)"}
{"id":"8952e4bc-a864-477a-bf4f-384c628bb398","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait DiscountCalculationError\ncase object InvalidCoupon extends DiscountCalculationError\ncase object ProductNotEligible extends DiscountCalculationError\n\ndef applyDiscount(productId: String, couponCode: String): Either[DiscountCalculationError, Double] =\n  if couponCode == \"\" then Left(InvalidCoupon)\n  else if productId == \"BLACKLISTED\" then Left(ProductNotEligible)\n  else Right(0.15)"}
{"id":"72d42e60-b99e-43ba-82ab-17782aa0d747","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class TaxCalculationError(msg: String)\n\ndef computeTax(amount: Double, region: String): Either[TaxCalculationError, Double] =\n  if amount < 0 then Left(TaxCalculationError(\"Amount must be positive\"))\n  else if region == \"EU\" then Right(amount * 0.2)\n  else Left(TaxCalculationError(\"Region not supported\"))"}
{"id":"2a0e7ad2-9bf0-49f1-a215-5c96e5ccf52c","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"import scala.util.Try\n\ndef updateLoyaltyPoints(customerId: String, earned: Int): Try[Int] =\n  Try {\n    if earned < 0 then throw new Exception(\"Points cannot be negative\")\n    else 100 + earned\n  }"}
{"id":"7680624e-604f-4750-9066-f6c9afe418a8","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait ReceiptGenerationError\ncase object PrinterJam extends ReceiptGenerationError\ncase object FormatError extends ReceiptGenerationError\n\ndef printReceipt(content: String, printerReady: Boolean): Either[ReceiptGenerationError, String] =\n  if !printerReady then Left(PrinterJam)\n  else if content.length < 10 then Left(FormatError)\n  else Right(\"Receipt printed successfully\")"}
{"id":"e824398c-64af-4e18-bbf6-f71904b31e57","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def scanBarcode(barcode: String): Option[String] =\n  val validBarcodes = Set(\"ABC123\", \"XYZ789\")\n  if validBarcodes.contains(barcode) then Some(\"Item scanned\")\n  else None"}
{"id":"284559b8-dd92-4625-beaf-867eabdadacc","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"import scala.util.Try\n\ndef fetchStoreConfiguration(configKey: String): Try[String] =\n  val configs = Map(\"currency\" -> \"USD\", \"timezone\" -> \"UTC\")\n  Try(configs(configKey))"}
{"id":"fdb8d2f2-fa7a-4deb-acac-10345a37af78","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait RefundError\ncase object ReceiptNotFound extends RefundError\ncase object RefundLimitExceeded extends RefundError\n\ndef processRefund(receiptId: String, amount: Double): Either[RefundError, String] =\n  if receiptId.isEmpty then Left(ReceiptNotFound)\n  else if amount > 200 then Left(RefundLimitExceeded)\n  else Right(\"Refund processed\")"}
{"id":"f7c3eff6-fab2-482b-95a0-8bdd0c0450cb","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class InventoryException(message: String) extends Exception(message)\n\ndef adjustInventory(sku: String, quantity: Int): Int =\n  if quantity < 0 then throw new InventoryException(\"Negative quantity not allowed\")\n  10 + quantity"}
{"id":"32ecb005-8b9c-499c-a025-0d4f22982eb6","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def connectToTerminal(port: String): String =\n  if port == \"\" then throw new IllegalArgumentException(\"Port must not be empty\")\n  \"Terminal connected on \" + port"}
{"id":"c1ae81c0-c469-4875-aa0b-166303b6c376","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def getPromotionPrice(itemId: String): Double = {\n  if itemId != \"PROMO123\" then throw new Exception(\"No promotion for item\")\n  8.99\n}"}
{"id":"867612bb-5c21-4560-81c5-62dfe1481912","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def registerCustomer(email: String): String = {\n  if !email.contains(\"@\") then throw new IllegalArgumentException(\"Invalid email address\")\n  \"Customer registered: \" + email\n}"}
{"id":"b30054a1-b9c3-4e3a-b852-1ac4c74b085d","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def processSale(paymentAmount: Double): String =\n  try {\n    if paymentAmount <= 0 then throw new Exception(\"Invalid amount\")\n    \"Sale processed\"\n  } catch case ex: Exception => s\"Failed: ${ex.getMessage}\""}
{"id":"41be846c-6b3e-48a2-8562-e124b0887cf5","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def fetchProductDescription(sku: String): String =\n  try {\n    if sku.isEmpty then throw new Exception(\"SKU not provided\")\n    \"Product description\"\n  } catch case ex: Exception => s\"Error: ${ex.getMessage}\""}
{"id":"49774bd6-13c7-49f6-a336-a486a1c9cc8c","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def redeemGiftCard(code: String, amount: Double): Double =\n  if code != \"VALID123\" then throw new IllegalArgumentException(\"Invalid gift card code\")\n  else if amount <= 0 then throw new Exception(\"Gift card amount must be positive\")\n  100 - amount"}
{"id":"ae60b0aa-9a07-4f16-9049-9616afbc0ed8","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def activatePOSDevice(deviceId: String): String = {\n  if deviceId.startsWith(\"off\") then throw new Exception(\"Device is offline\")\n  \"POS device activated\"\n}"}
{"id":"39d432e7-206b-4b25-badf-ee0c04325501","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def syncTransaction(log: String): String = {\n  try {\n    if log.length < 5 then throw new Exception(\"Transaction log too short\")\n    \"Transaction synchronized\"\n  } catch case ex: Exception => ex.getMessage\n}"}
{"id":"1d9bf23b-808f-4825-82d1-171ed30e71fa","timestamp":1746100625999,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class LoyaltyException(msg: String) extends RuntimeException(msg)\n\ndef applyLoyaltyReward(cardNumber: String, purchase: Double): String =\n  if purchase < 0 then throw new LoyaltyException(\"Negative purchase value\")\n  s\"Reward applied to $cardNumber\""}
{"id":"e46488a1-5fc2-46c0-b7ff-07943ed102ff","timestamp":1746100647906,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object ScanBarcodeApp:\n  def scanBarcode(barcode: String): Either[BarcodeScanError, Product] =\n    if barcode.matches(\"[0-9]{12}\") then\n      Right(Product(barcode, \"Cereal Box\", 5.99))\n    else\n      Left(BarcodeScanError(barcode))\n  case class Product(code: String, name: String, price: Double)\n  case class BarcodeScanError(invalidCode: String)"}
{"id":"fd537b8a-f3a7-44ce-81db-af0d2d59f75d","timestamp":1746100647906,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class InvalidBarcodeException(code: String) extends Exception(s\"Invalid barcode: $code\")\n\nobject BarcodeScanner {\n  def scanCode(barcode: String): Product = {\n    if (barcode.length == 12) Product(barcode, \"Bottle Water\", 1.50)\n    else throw new InvalidBarcodeException(barcode)\n  }\n  case class Product(code: String, name: String, price: Double)\n}"}
{"id":"f2176c93-281d-4e7c-8343-8ef5e23db31a","timestamp":1746100647906,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\ncase object InvalidCard extends PaymentError\ncase object PaymentDeclined extends PaymentError\n\nobject PaymentProcessor:\n  def completePayment(amount: Double, validCard: Boolean, sufficientFunds: Boolean): Either[PaymentError, String] =\n    if !validCard then Left(InvalidCard)\n    else if !sufficientFunds then Left(InsufficientFunds)\n    else Right(\"Payment Approved\")"}
{"id":"0c1fe061-c0c5-45f2-9eb9-7271c8e02d38","timestamp":1746100647906,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class PaymentException(reason: String) extends Exception(reason)\n\nobject POSPayment {\n  def process(amount: Double, isCardValid: Boolean): String = {\n    if (!isCardValid) throw new PaymentException(\"Invalid Card\")\n    \"Payment Success\"\n  }\n}"}
{"id":"c31bc3be-d2b4-4863-bb94-84818c413bfa","timestamp":1746100647906,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object LoyaltyProgram:\n  def fetchLoyaltyPoints(customerId: Long): Option[Int] =\n    if customerId > 0 then Some(250)\n    else None"}
{"id":"0c924e3a-ca2d-45a0-be6c-c345e68cb3d6","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class LoyaltyNotFoundException(id: Long) extends Exception(s\"Loyalty not found for $id\")\n\nobject LoyaltyLookup {\n  def getPoints(custId: Long): Int = {\n    if (custId > 100) 300\n    else throw new LoyaltyNotFoundException(custId)\n  }\n}"}
{"id":"0d2f56c5-0d55-4516-8613-783e6b11680d","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"import scala.util.Try\nobject SaleDiscountCalculator:\n  def applyDiscount(price: Double, pct: Double): Try[Double] =\n    Try {\n      if pct < 0 || pct > 100 then throw new Exception(\"Invalid percentage\")\n      price - (price * pct / 100.0)\n    }"}
{"id":"6282887e-9eaf-486e-ae7c-57f0ad9ff7c9","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object SaleDiscountUnsafe {\n  def applyDiscount(price: Double, percent: Double): Double = {\n    if (percent < 0) throw new IllegalArgumentException(\"Negative discount\")\n    price - price * percent / 100d\n  }\n}"}
{"id":"ae579ac0-4f28-4263-bd25-3acabb00d01e","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait InventoryError\ncase object ItemOutOfStock extends InventoryError\ncase class ItemNotFound(sku: String) extends InventoryError\n\nobject InventoryService:\n  def checkStock(sku: String, inventory: Map[String, Int]): Either[InventoryError, Int] =\n    inventory.get(sku) match\n      case Some(count) if count > 0 => Right(count)\n      case Some(_) => Left(ItemOutOfStock)\n      case None => Left(ItemNotFound(sku))"}
{"id":"13d63111-c4f8-4ca8-82b5-c6a4e0f90cb7","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class OutOfStockException(item: String) extends Exception(s\"$item not in stock\")\n\nobject InventoryUnSafe {\n  def pick(sku: String, items: Map[String, Int]): Int = {\n    if (items.contains(sku) && items(sku) > 0) items(sku)\n    else throw new OutOfStockException(sku)\n  }\n}"}
{"id":"9f8601e3-b2ef-41b0-8e34-0a418bc5ca64","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object TransactionParser:\n  def parseTransaction(json: String): Option[PointOfSaleTransaction] =\n    if json.contains(\"amount\") then Some(PointOfSaleTransaction(120, \"Books\"))\n    else None\n  case class PointOfSaleTransaction(amount: Int, itemType: String)"}
{"id":"63749a85-73ca-4f0c-b28b-dde5af2bc77e","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class TransactionParseException extends Exception(\"Malformed transaction input\")\n\nobject TransactionUnsafe {\n  def parseTransactionJson(json: String): PointOfSaleTransaction = {\n    if (json.contains(\"itemId\")) PointOfSaleTransaction(35.0, \"Juice\")\n    else throw new TransactionParseException\n  }\n  case class PointOfSaleTransaction(amount: Double, description: String)\n}"}
{"id":"de9c3f0b-ce8c-4471-9752-c9860404cae3","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait ReceiptError\ncase object InvalidReceiptNumber extends ReceiptError\ncase object ReceiptNotFound extends ReceiptError\nobject ReceiptService:\n  def fetchReceipt(receiptNumber: String): Either[ReceiptError, String] =\n    if receiptNumber.isEmpty then Left(InvalidReceiptNumber)\n    else if receiptNumber == \"000001\" then Right(\"Receipt details for 000001\")\n    else Left(ReceiptNotFound)"}
{"id":"2f84ef21-8cd3-4c2d-9fcc-681dbb73d9ea","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class ReceiptException(msg: String) extends Exception(msg)\nobject ReceiptFetcher {\n  def getReceipt(number: String): String = {\n    if (number == \"000777\") \"Receipt details\"\n    else throw new ReceiptException(\"Invalid or unknown receipt\")\n  }\n}"}
{"id":"7fa0f9f5-e0fe-4c24-a657-6c48d8ccc2f6","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"import scala.util.Try\nobject CardRefundProcessor:\n  def refund(amount: Double, cardPresent: Boolean): Try[String] =\n    Try {\n      if !cardPresent then throw new Exception(\"No card present\")\n      s\"Refunded $$amount to card.\"\n    }"}
{"id":"3f289722-8e9a-4007-a247-61ab2d6c6fcb","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class RefundException(msg: String) extends Exception(msg)\nobject RefundUnsafe {\n  def refundToCard(amount: Double, present: Boolean): String = {\n    if (!present) throw new RefundException(\"Card required\")\n    s\"Refund of $$amount completed.\"\n  }\n}"}
{"id":"cb895f43-66f5-4206-b58d-a300faf73b50","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object ProductLookup:\n  def findProductName(productId: Int): Option[String] =\n    if productId == 101 then Some(\"Orange Juice\")\n    else None"}
{"id":"3531a55e-a5d5-4729-b282-1a096844c452","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object UnsafeProductLookup {\n  def getProduct(productId: Int): String = {\n    if (productId == 784) \"Crisps\"\n    else throw new NoSuchElementException(\"Product not found\")\n  }\n}"}
{"id":"dec4c4d3-5673-4f83-92bb-ce3319b2dcf5","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"sealed trait StaffAuthenticationError\ncase object StaffNotFound extends StaffAuthenticationError\ncase object IncorrectPIN extends StaffAuthenticationError\nobject StaffAuthenticator:\n  def authenticate(staffId: Int, pin: String): Either[StaffAuthenticationError, String] =\n    if staffId <= 0 then Left(StaffNotFound)\n    else if pin != \"1234\" then Left(IncorrectPIN)\n    else Right(\"Authentication successful\")"}
{"id":"8e31fdb2-88ca-401b-8400-a65a79ad98c5","timestamp":1746100647907,"category":"throws","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class AuthenticationException(msg: String) extends Exception(msg)\nobject StaffLoginUnSafe {\n  def login(staffCode: Int, passcode: String): String = {\n    if (staffCode < 1) throw new AuthenticationException(\"Invalid staff code\")\n    if (passcode != \"9999\") throw new AuthenticationException(\"PIN incorrect\")\n    \"Authenticated\"\n  }\n}"}
{"id":"362db844-e8ed-4c26-a225-45c62d30ff92","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"object MortgageInputValidator:\n  def parseInterestRate(input: String): Either[InputValidationError, Double] =\n    input.toDoubleOption match\n      case Some(rate) if rate > 0.0 && rate < 100.0 => Right(rate)\n      case _ => Left(InvalidInterestRate)\n\nsealed trait InputValidationError\ncase object InvalidInterestRate extends InputValidationError"}
{"id":"330cc2a4-1f85-4c93-ad2f-7f38f82f73d6","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def calculateMonthlyPayment(loanAmount: Double, annualRate: Double, termInYears: Int): Double =\n  if loanAmount <= 0 || annualRate <= 0 || termInYears <= 0 then\n    throw new IllegalArgumentException(\"Invalid mortgage input values.\")\n  else\n    val monthlyRate = annualRate / 12.0 / 100.0\n    val totalPayments = termInYears * 12\n    loanAmount * monthlyRate / (1 - Math.pow(1 + monthlyRate, -totalPayments.toDouble))"}
{"id":"cbe63106-a899-4259-94fb-966c6c88dae5","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageCalculationError(message: String)\n\ndef getLoanTerm(yearsInput: String): Either[MortgageCalculationError, Int] =\n  yearsInput.toIntOption match\n    case Some(term) if term > 0 => Right(term)\n    case _ => Left(MortgageCalculationError(\"Invalid loan term provided.\"))"}
{"id":"c31c5a57-ec37-4b64-a462-b5f2781ed038","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageValidationException(msg: String) extends Exception(msg)\n\ndef validatePrincipal(principal: Double): Unit =\n  if principal <= 0 then\n    throw new MortgageValidationException(\"Principal amount must be greater than zero.\")"}
{"id":"d178f36e-6346-4c07-bda1-66ecfcc23bb6","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def parsePrincipalAmount(input: String): Option[Double] =\n  input.toDoubleOption.filter(_ > 0)"}
{"id":"b12eff76-6845-43f2-97b8-c216de741be3","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def computeAmortizationSchedule(principal: Double, rate: Double, years: Int): Either[String, List[Double]] =\n  if principal <= 0 then Left(\"Principal must be positive.\")\n  else if rate <= 0 then Left(\"Interest rate must be positive.\")\n  else if years <= 0 then Left(\"Term must be positive.\")\n  else Right(List.fill(years * 12)(principal / (years * 12)))"}
{"id":"b8f253d1-8d3b-4f8b-b73f-1344c128ccf3","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def showMortgageSummary(amount: Double, rate: Double): Unit =\n  try\n    if amount <= 0 || rate <= 0 then\n      throw new Exception(\"Invalid summary parameters.\")\n    println(s\"Mortgage for $$amount at $$rate% annual rate.\")\n  catch\n    case _: Exception => println(\"Could not display mortgage summary.\")"}
{"id":"b4e1191b-f79c-46f0-bdf2-ce7813d8b283","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait ApplicationError\ncase class MissingFieldError(fieldName: String) extends ApplicationError\ncase object InvalidFormatError extends ApplicationError\n\ndef validateInputField(value: String, fieldName: String): Either[ApplicationError, String] =\n  if value.trim.isEmpty then Left(MissingFieldError(fieldName))\n  else if !value.forall(_.isDigit) then Left(InvalidFormatError)\n  else Right(value)"}
{"id":"4c6ed793-2293-45a6-bba3-e98a5e3cb000","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def fetchInterestRateFromExternalSource(): Double =\n  try\n    // Simulated remote call\n    throw new RuntimeException(\"Failed to retrieve rates.\")\n    4.25\n  catch\n    case ex: Exception =>\n      println(s\"Error: $${ex.getMessage}\")\n      5.0"}
{"id":"e25282c5-809e-4827-b989-7458658dc0ce","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def safeDivide(a: Double, b: Double): Option[Double] =\n  if b == 0 then None else Some(a / b)"}
{"id":"a4f24632-22ae-441f-a9e0-0cbc1e844628","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def computeMortgageInsurance(homeValue: Double): Double =\n  if homeValue <= 0 then\n    throw new IllegalArgumentException(\"Home value must be positive.\")\n  else\n    homeValue * 0.01"}
{"id":"dd07d188-f47f-4138-b829-df9026723b3a","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryParseDoubleField(field: String): Try[Double] =\n  Try(field.toDouble).filter(_ > 0)"}
{"id":"40998d3e-5785-4aad-9f63-36417215f4bc","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def processUserInput(input: String): Double =\n  try\n    input.toDouble\n  catch\n    case ex: NumberFormatException =>\n      throw new RuntimeException(\"Invalid input provided.\")"}
{"id":"b79780f9-2a75-4f5b-a818-bd79d09405e0","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait MortgageInputError\ncase object InvalidDownPayment extends MortgageInputError\n\nobject DownPaymentProcessor:\n  def validateDownPayment(payment: Double, principal: Double): Either[MortgageInputError, Double] =\n    if payment < 0 || payment > principal then Left(InvalidDownPayment)\n    else Right(payment)"}
{"id":"5e9e0c2c-7a62-4c15-b84d-7acc4eebcd04","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def showMonthlyPaymentSummary(payment: Double): Unit =\n  try\n    if payment < 0 then throw new Exception(\"Negative payment is not valid.\")\n    println(s\"Your monthly payment is $$payment\")\n  catch\n    case _: Exception => println(\"Unable to calculate monthly payment.\")"}
{"id":"a25e836d-7a5c-4aed-92e8-e46d046e52a9","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def parseMortgageTerm(term: String): Option[Int] =\n  term.toIntOption.filter(_ > 0)"}
{"id":"b57916bd-f20e-453b-bd89-3845c4a3875f","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def readPrincipalAmount(input: String): Double =\n  try\n    val value = input.toDouble\n    if value <= 0 then throw new Exception(\"Principal must be positive.\")\n    value\n  catch\n    case ex: Exception => throw new NumberFormatException(\"Failed to read principal.\")"}
{"id":"7c31b119-c743-47a5-af3c-2c58f15f0991","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeMonthlyPayment(principal: Double, annualRate: Double, termMonths: Int): Try[Double] =\n  Try {\n    val monthlyRate = annualRate / 12.0 / 100.0\n    val payment = principal * monthlyRate / (1 - math.pow(1 + monthlyRate, -termMonths))\n    if payment.isNaN || payment.isInfinity then throw new Exception(\"Computation failed.\")\n    payment\n  }"}
{"id":"e653d3f0-3c8e-47a6-a5db-cb5243c70c2a","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def ensurePositiveRate(rate: Double): Unit =\n  if rate <= 0 then\n    throw new IllegalArgumentException(\"Annual rate must be positive.\")"}
{"id":"0e577f6e-e609-455d-a3ad-14caef6f9f96","timestamp":1746100672957,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait MortgageEligibilityError\ncase object ApplicantIncomeTooLow extends MortgageEligibilityError\n\nobject EligibilityChecker:\n  def checkApplicantIncome(income: Double, minIncome: Double): Either[MortgageEligibilityError, Unit] =\n    if income < minIncome then Left(ApplicantIncomeTooLow)\n    else Right(())"}
{"id":"46309bc7-34d5-4e75-a9ee-89b7079903b3","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait CalculationError\ncase object NegativeInterestRate extends CalculationError\ncase object InvalidLoanAmount extends CalculationError\n\ndef validateLoanAmount(amount: Double): Either[CalculationError, Double] =\n  if (amount > 0) Right(amount) else Left(InvalidLoanAmount)\n\ndef validateInterestRate(rate: Double): Either[CalculationError, Double] =\n  if (rate >= 0) Right(rate) else Left(NegativeInterestRate)\n"}
{"id":"c0898fb9-2312-4128-aaaa-bbfd9634233e","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageCalculator {\n  def calculateMonthlyPayment(principal: Double, rate: Double, years: Int): Double = {\n    if (principal <= 0) throw new IllegalArgumentException(\"Principal must be positive\")\n    if (rate < 0) throw new IllegalArgumentException(\"Interest rate cannot be negative\")\n    val monthlyRate = rate / 12 / 100\n    val numberOfPayments = years * 12\n    principal * monthlyRate / (1 - Math.pow(1 + monthlyRate, -numberOfPayments))\n  }\n}"}
{"id":"687c318f-a545-45da-83fc-1a4c3b8931e8","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseInterestRate(input: String): Try[Double] =\n  Try(input.toDouble).filter(_ >= 0)\n"}
{"id":"7bad52f3-2269-461e-a432-73ac8cac7063","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"object MortgageLoanValidator {\n  def requireTermInYears(term: Int): Unit = {\n    if (term <= 0) throw new RuntimeException(\"Loan term must be > 0 years\")\n  }\n}"}
{"id":"eb803829-b8c0-426c-9912-16e326fd6053","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait MortgageValidationError\ncase object ZeroDownPayment extends MortgageValidationError\ncase object ExcessiveLoanTerm extends MortgageValidationError\n\ndef validateDownPayment(amount: Double): Either[MortgageValidationError, Double] =\n  if (amount > 0) Right(amount) else Left(ZeroDownPayment)\n\ndef validateLoanTerm(years: Int): Either[MortgageValidationError, Int] =\n  if (years <= 40) Right(years) else Left(ExcessiveLoanTerm)\n"}
{"id":"cf0fa369-84da-479c-95c8-9578f102fd20","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def extractLoanTerm(input: String): Int = {\n  try {\n    val value = input.toInt\n    if (value <= 0) throw new Exception(\"Term must be positive\")\n    value\n  } catch {\n    case e: Exception => throw new NumberFormatException(\"Invalid loan term: \" + input)\n  }\n}"}
{"id":"997bfc3a-22e9-4701-ba6c-4a7bd4ee8b27","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeMonthlyPayment(loan: Double, rate: Double, years: Int): Try[Double] = Try {\n  val monthlyInterestRate = rate / 12 / 100\n  val n = years * 12\n  val denominator = 1 - Math.pow(1 + monthlyInterestRate, -n)\n  if (denominator == 0) throw new ArithmeticException(\"Zero denominator\")\n  loan * monthlyInterestRate / denominator\n}"}
{"id":"39417d2b-fbc1-476d-b6da-7bd8a729cfee","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def logAndReturnPayment(principal: Double, rate: Double, term: Int): Double = {\n  try {\n    val monthlyRate = rate / 12 / 100\n    val payments = term * 12\n    principal * monthlyRate / (1 - Math.pow(1 + monthlyRate, -payments))\n  } catch {\n    case ex: Throwable =>\n      println(\"Error calculating payment: \" + ex.getMessage)\n      throw ex\n  }\n}"}
{"id":"2252101b-9dc7-40aa-baa0-32b77ba8db4d","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait MortgageApplicationError\ncase object InvalidApplicantIncome extends MortgageApplicationError\ncase object InsufficientCreditScore extends MortgageApplicationError\n\ndef evaluateApplication(income: Double, creditScore: Int): Either[MortgageApplicationError, String] =\n  if (income < 10000) Left(InvalidApplicantIncome)\n  else if (creditScore < 600) Left(InsufficientCreditScore)\n  else Right(\"Application Approved\")\n"}
{"id":"9e92b677-d396-41bd-89ef-ba921159a62c","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"object AmortizationTable {\n  def createSchedule(loan: Double, years: Int): List[(Int, Double)] = {\n    if (loan <= 0) throw new IllegalArgumentException(\"Loan amount required\")\n    if (years <= 0) throw new IllegalArgumentException(\"Years required\")\n    (1 to (years * 12)).map(i => (i, loan / (years * 12))).toList\n  }\n}"}
{"id":"0db55047-96bd-4a25-b5e5-06f7be416a7b","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def safeParseLoanAmount(input: String): Option[Double] =\n  input.toDoubleOption.filter(_ > 0)\n"}
{"id":"1292d998-b71c-45d9-9ead-31c9ddb417dd","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def loadRateHistory(source: String): List[Double] = {\n  if (source == \"\") throw new RuntimeException(\"Source path missing\")\n  // pretend this loads from a file system or API\n  List(5.5, 6.0, 4.9)\n}"}
{"id":"5c877a64-12e2-48a7-ad93-c74f386e6719","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"enum PaymentValidationError {\n  case NegativePrincipal, InvalidMonths\n}\ndef checkPaymentArguments(principal: Double, months: Int): Either[PaymentValidationError, (Double, Int)] =\n  if (principal < 0) Left(PaymentValidationError.NegativePrincipal)\n  else if (months < 1) Left(PaymentValidationError.InvalidMonths)\n  else Right((principal, months))\n"}
{"id":"a9f179b3-b1ca-4fa0-9464-b287348c4363","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def fetchAmortizationRecord(id: String): String = {\n  try {\n    if (id.length < 5) throw new NoSuchElementException(\"Record id too short\")\n    \"Record found\"\n  } catch {\n    case _: NoSuchElementException => \"Record missing\"\n  }\n}"}
{"id":"7843dc3a-b9dc-4727-9897-77a761f44dd7","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef computeLoanToValue(homeValue: Double, loanAmount: Double): Try[Double] = Try {\n  if (homeValue <= 0) throw new IllegalArgumentException(\"Home value must be positive\")\n  loanAmount / homeValue\n}"}
{"id":"9ac372ec-1ee7-4d76-b5ae-3824e0104e4e","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def parseDownPayment(input: String): Double = {\n  try {\n    val value = input.toDouble\n    if (value < 0) throw new IllegalArgumentException(\"Cannot be negative down payment\")\n    value\n  } catch {\n    case _: Throwable => throw new IllegalStateException(\"Failed to parse down payment\")\n  }\n}"}
{"id":"e0f23d83-240a-4196-806d-a1d7953bcc9e","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"sealed trait AffordabilityError\ncase object IncomeBelowThreshold extends AffordabilityError\ncase object HighDebtToIncomeRatio extends AffordabilityError\n\ndef checkAffordability(income: Double, dti: Double): Either[AffordabilityError, Boolean] = {\n  if (income < 20000) Left(IncomeBelowThreshold)\n  else if (dti > 0.43) Left(HighDebtToIncomeRatio)\n  else Right(true)\n}\n"}
{"id":"f54fad0b-d513-4b0c-a3a8-c535ae182678","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def calculateInsurancePremium(loan: Double, factor: Double): Double = {\n  if (factor <= 0) throw new ArithmeticException(\"Factor must be positive\")\n  loan * factor\n}"}
{"id":"621899af-3786-4a3a-b3a7-e3f385abcb75","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePropertyTax(input: String): Try[Double] = Try(input.toDouble).filter(_ >= 0)\n"}
{"id":"a40e8a7e-3c1e-4bb3-a36e-4cbc01841c68","timestamp":1746100693989,"category":"throws","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def getInterestRateForState(state: String): Double = {\n  try {\n    if (state.isEmpty) throw new RuntimeException(\"State code is empty\")\n    5.3 // stubbed fixed rate\n  } catch {\n    case _: RuntimeException => -1.0\n  }\n}"}
{"id":"40f17ec5-1cd3-4990-ad07-261da391ccbe","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class SensorMalfunctionError(deviceId: String, description: String)\ncase class TelemetryReading(deviceId: String, temperature: Double, vibration: Double)\ndef validateReading(reading: TelemetryReading): Either[SensorMalfunctionError, TelemetryReading] =\n  if reading.temperature < -50 || reading.temperature > 150 then\n    Left(SensorMalfunctionError(reading.deviceId, \"Temperature out of range\"))\n  else if reading.vibration > 100 then\n    Left(SensorMalfunctionError(reading.deviceId, \"Excessive vibration\"))\n  else\n    Right(reading)"}
{"id":"c6b7434f-ac62-4a07-b10b-46a4372b63db","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class InvalidPressureDataException(message: String) extends Exception(message)\ncase class PressureReading(deviceId: String, pressure: Int)\ndef parsePressure(reading: PressureReading): Int =\n  if reading.pressure < 0 then throw new InvalidPressureDataException(\"Negative pressure from \" + reading.deviceId)\n  else reading.pressure"}
{"id":"b938ba0c-0f89-4b2c-8d00-a1ace73de95b","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"import scala.util.Try\ncase class MachineState(code: Int)\ndef safeParseMachineState(stateStr: String): Try[MachineState] =\n  Try { MachineState(stateStr.toInt) }"}
{"id":"f930686a-c161-4d0d-b110-98e24ea79302","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"case class VibrationAlert(deviceId: String, level: Double)\nclass ExcessiveVibrationException(deviceId: String) extends Exception(deviceId)\ndef checkVibrationLevel(alert: VibrationAlert): String =\n  try\n    if alert.level > 100.0 then throw new ExcessiveVibrationException(alert.deviceId)\n    else \"Vibration normal\"\n  catch\n    case e: ExcessiveVibrationException => \"Vibration alert: \" + alert.deviceId"}
{"id":"44ec6668-72ce-491b-80d6-d964c0ad9958","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"sealed trait TelemetryError\ncase object MissingTelemetryFile extends TelemetryError\ncase object CorruptedTelemetryPayload extends TelemetryError\ndef parseTelemetryPayload(payload: String): Either[TelemetryError, Int] =\n  if payload == \"\" then Left(MissingTelemetryFile)\n  else if payload.forall(_.isDigit) then Right(payload.length)\n  else Left(CorruptedTelemetryPayload)"}
{"id":"2dbe05ea-8908-4390-913f-df1fe3842fa2","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"case class SystemHeartbeat(deviceId: String, lastReceived: Long)\nclass StaleHeartbeatException(deviceId: String) extends Exception(deviceId)\ndef assertHeartbeat(currentTime: Long, heartbeat: SystemHeartbeat): Unit =\n  if currentTime - heartbeat.lastReceived > 60000 then\n    throw new StaleHeartbeatException(heartbeat.deviceId)"}
{"id":"c64a78ac-bf8d-49a8-a9ff-cb2f3c2bb1e8","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class ErrorWithDetails(code: Int, message: String)\ndef safeDivide(a: Int, b: Int): Either[ErrorWithDetails, Int] =\n  if b == 0 then Left(ErrorWithDetails(1001, \"Division by zero in sensor computation\"))\n  else Right(a / b)"}
{"id":"f412f0cf-0c98-4be5-b0ef-be3f86980be3","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"case class MachineStatus(deviceId: String, isOnline: Boolean)\nclass DeviceOfflineException(msg: String) extends Exception(msg)\ndef getOnlineStatus(status: MachineStatus): String =\n  try\n    if !status.isOnline then throw new DeviceOfflineException(\"Device \" + status.deviceId + \" offline\")\n    else \"Device online\"\n  catch\n    case e: DeviceOfflineException => e.getMessage"}
{"id":"2607d13c-f594-44d4-bca4-3034a1c82ea7","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class TelemetryPacket(sequence: Int)\ndef findGap(lastSeq: Int, pkt: TelemetryPacket): Option[Int] =\n  val gap = pkt.sequence - lastSeq\n  if gap > 1 then Some(gap)\n  else None"}
{"id":"fcc22dc8-6ea8-4e4e-8a77-5772742007eb","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class SensorConnectionException(sensorId: String) extends Exception(sensorId)\ndef sendSensorCommand(sensorId: String, command: String): Unit =\n  if command == \"FAIL\" then throw new SensorConnectionException(sensorId)\n  else ()"}
{"id":"c9236522-82ee-4b11-b0d9-b243331b7d0c","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def lookupSensorData(id: String, readings: Map[String, Double]): Option[Double] =\n  readings.get(id)"}
{"id":"1be0968f-6fdc-4181-8e25-c449ebe80c71","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class InvalidTelemetryFrameException(msg: String) extends Exception(msg)\ndef decodeTelemetryFrame(frame: String): Int =\n  try\n    if frame.size != 10 then throw new InvalidTelemetryFrameException(\"Frame size invalid\")\n    else frame.length\n  catch\n    case ex: InvalidTelemetryFrameException => -1"}
{"id":"81253573-89de-41de-ac89-f25b528605e0","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class OverloadFault(code: String)\ndef checkLoad(currentLoad: Double, maxLoad: Double): Option[OverloadFault] =\n  if currentLoad > maxLoad then Some(OverloadFault(\"Load exceeded\"))\n  else None"}
{"id":"a8bb3a52-fbb1-4e2c-8a13-7f8557d85c76","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class TelemetryTimeoutException(device: String) extends Exception(device)\ndef fetchTelemetryData(deviceId: String, isResponsive: Boolean): Double =\n  if !isResponsive then throw new TelemetryTimeoutException(deviceId)\n  else 123.4"}
{"id":"54d6a224-3595-4d63-a133-f25ed4c780d3","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef parseHumidity(hStr: String): Try[Double] =\n  Try(hStr.toDouble)"}
{"id":"da797065-6526-45b9-808b-aa511ee16f4d","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class SensorAuthenticationException(device: String) extends Exception(device)\ndef authenticateSensor(device: String, token: String): Boolean =\n  try\n    if token.isEmpty then throw new SensorAuthenticationException(device)\n    else true\n  catch\n    case _: SensorAuthenticationException => false"}
{"id":"b909c6dc-7e86-4a32-a365-d3f7cb21f629","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"sealed trait UploadError\ncase object IncompleteUpload extends UploadError\ncase object CorruptedDataPacket extends UploadError\ndef verifyUpload(packet: String): Either[UploadError, String] =\n  if packet.isEmpty then Left(IncompleteUpload)\n  else if packet.length % 2 == 1 then Left(CorruptedDataPacket)\n  else Right(packet)"}
{"id":"a399c2a4-999c-4200-b0a0-ce5b0c9170a3","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class MachineShutdownException(reason: String) extends Exception(reason)\ndef shutdownMachine(isCritical: Boolean): Unit =\n  if isCritical then throw new MachineShutdownException(\"Critical shutdown executed\")\n  else ()"}
{"id":"ca510877-6253-4afb-ade0-dec6ccd2f007","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def safeReadSensorVoltage(value: String): Option[Double] =\n  value.toDoubleOption"}
{"id":"3f9976eb-2cb3-4222-b82d-5799f0befa40","timestamp":1746100717846,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class UnexpectedTelemetryResponseException(device: String) extends Exception(device)\ndef fetchResponse(device: String, response: Option[String]): String =\n  response match\n    case Some(r) => r\n    case None => throw new UnexpectedTelemetryResponseException(device)"}
{"id":"0d1296ee-cdc7-461d-be20-6a20208017b0","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class SensorReading(id: String, value: Double)\ndef parseTemperatureReading(input: String): Option[SensorReading] =\n  input.split(\",\") match\n    case Array(id, value) =>\n      scala.util.Try(value.toDouble).toOption.map(v => SensorReading(id, v))\n    case _ => None"}
{"id":"745e4e12-4f58-4b60-8185-78a3be5c3d06","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"sealed trait TelemetryError\ncase object ConnectionTimeout extends TelemetryError\ncase object InvalidPacketFormat extends TelemetryError\n\ndef decodePacket(packet: String): Either[TelemetryError, Int] =\n  if packet.startsWith(\"START\") then\n    Right(packet.length)\n  else\n    Left(InvalidPacketFormat)"}
{"id":"87285210-a9a8-49c0-976f-a63e42bc4b17","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def computeVibrationAnomalyLevel(level: Double): Either[String, Double] =\n  if level < 0 then Left(\"Vibration level below zero not allowed\")\n  else if level > 100 then Left(\"Vibration level exceeds maximum threshold\")\n  else Right(level / 2)"}
{"id":"4e53c449-b096-4f52-83d2-177820eeb453","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safePressureCalculation(p1: Double, p2: Double): Try[Double] =\n  Try {\n    val delta = p2 - p1\n    if delta < 0 then throw new IllegalArgumentException(\"Negative pressure difference\")\n    delta\n  }"}
{"id":"eb87bb44-f7e6-4888-9d5a-a00409e589f3","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"sealed trait MachineHealthError\ncase object OfflineError extends MachineHealthError\ncase object DataCorruptError extends MachineHealthError\n\ndef retrieveMachineHealth(machineId: String): Either[MachineHealthError, String] =\n  if machineId.isEmpty then Left(OfflineError)\n  else if machineId.forall(_.isDigit) then Right(\"Operational\")\n  else Left(DataCorruptError)"}
{"id":"3ee99102-ab2e-4c93-9fc0-773a48ae11b4","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def fetchFlowRateFromSensor(sensorId: String): Option[Double] =\n  if sensorId.startsWith(\"FLW\") then Some(23.7)\n  else None"}
{"id":"b2382006-6fd1-43cb-9ea1-0d0e1597fb64","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeRPMReadings(readings: List[String]): Try[List[Int]] =\n  Try {\n    readings.map(_.toInt)\n  }"}
{"id":"b78c8446-2572-45fe-8334-9ed302762cd8","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"sealed trait TelemetryValidationError\ncase class MissingField(field: String) extends TelemetryValidationError\ncase object ParseFailure extends TelemetryValidationError\n\ndef validateSensorPayload(payload: Map[String, String]): Either[TelemetryValidationError, Int] =\n  payload.get(\"rpm\") match\n    case Some(v) =>\n      scala.util.Try(v.toInt).toOption.toRight(ParseFailure)\n    case None => Left(MissingField(\"rpm\"))"}
{"id":"3246835a-268e-4f57-aed4-512e2381ea3c","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def parseAlarmLevel(str: String): Option[Int] =\n  scala.util.Try(str.toInt).toOption.filter(_ >= 0)"}
{"id":"a9a8e614-aaf4-4d6a-b462-2886eff1a802","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def retrieveCompressorTemperature(sensorOutput: String): Either[String, Double] =\n  if sensorOutput.isEmpty then Left(\"Empty temperature data\")\n  else scala.util.Try(sensorOutput.toDouble).toEither.left.map(_ => \"Temperature format error\")"}
{"id":"ec5ab3b9-3dd0-401f-8a79-ff6f600f297d","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getOilPressure(sensorMap: Map[String, String]): Double =\n  try {\n    val pressureStr = sensorMap(\"oilPressure\")\n    pressureStr.toDouble\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Oil pressure reading error\")\n  }"}
{"id":"396ba589-ff13-4711-b9c8-96419fa27c64","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def readMotorCurrent(input: String): Int =\n  try {\n    input.toInt\n  } catch {\n    case _: NumberFormatException => throw new IllegalArgumentException(\"Invalid current value\")\n  }"}
{"id":"1e2b181b-1e0d-4f69-87d1-5c878403749f","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def parseTelemetryPacket(packet: String): List[String] =\n  try {\n    if (packet.startsWith(\"PKT\")) packet.split(\",\").toList\n    else throw new Exception(\"Malformed telemetry packet\")\n  } catch {\n    case e: Exception => throw e\n  }"}
{"id":"84a65c4f-b239-45e4-bda4-a4c6bcd66776","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class PacketCorruptionException extends Exception\n\ndef verifyPacket(packet: String): String =\n  try {\n    if packet.contains(\"ERROR\") then throw new PacketCorruptionException\n    packet\n  } catch {\n    case _: PacketCorruptionException => \"DefaultPacket\"\n  }"}
{"id":"1ac9bdb1-5b41-4cd1-b998-a6598069df6e","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"object TelemetryLogger {\n  def logTemperature(temp: String): Unit =\n    try {\n      val t = temp.toDouble\n    } catch {\n      case e: Exception => println(\"Temperature logging failure\")\n    }\n}"}
{"id":"3123ce46-348b-46e9-84cc-9168cd33e497","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getPumpStatus(statusCode: Int): String =\n  try {\n    statusCode match {\n      case 1 => \"Running\"\n      case 0 => \"Stopped\"\n      case _ => throw new Exception(\"Unknown status code\")\n    }\n  } catch {\n    case e: Exception => \"Error: Unknown\"\n  }"}
{"id":"db459661-a2a8-45d0-882d-c2305aab5ea6","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class PressureOutOfRangeException(msg: String) extends Exception(msg)\n\ndef checkPressure(value: Double): Double =\n  if value < 10 || value > 500 then throw new PressureOutOfRangeException(\"Pressure out of allowed range\")\n  else value"}
{"id":"51527311-974c-4580-aaea-4d196df8aa1f","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def decodeVibrationPayload(payload: String): Double =\n  try {\n    val parts = payload.split(\":\")\n    if parts.length != 2 then throw new Exception(\"Invalid vibration payload\")\n    parts(1).toDouble\n  } catch {\n    case e: Exception => 0.0\n  }"}
{"id":"73e3b254-0360-4f85-a45b-e45f7d9407a1","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def extractValvePosition(reading: String): Int =\n  try {\n    reading.toInt\n  } catch {\n    case _: Exception => throw new RuntimeException(\"Valve position parsing failed\")\n  }"}
{"id":"8088db94-04b8-4654-a22c-8ba3750e5838","timestamp":1746100736790,"category":"throws","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getRPMValue(feed: Map[String, Any]): Int =\n  try {\n    feed.getOrElse(\"rpm\", throw new Exception(\"RPM missing\")).asInstanceOf[Int]\n  } catch {\n    case e: Exception => 0\n  }"}
{"id":"af59503a-e61f-45ad-a268-2a2241fc7f6e","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"object LobbyConnection {\n  def establishLobbySession(playerId: String): Option[String] =\n    if playerId.nonEmpty then Some(s\"session-$playerId\")\n    else None\n}"}
{"id":"38a91f27-07ac-460b-a780-85718988b352","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbyConfig(maxPlayers: Int, roomName: String)\nsealed trait LobbyConfigError\ncase object MaxPlayersTooLow extends LobbyConfigError\ncase object RoomNameEmpty extends LobbyConfigError\n\ndef validateLobbyConfig(cfg: LobbyConfig): Either[LobbyConfigError, LobbyConfig] =\n  if cfg.maxPlayers < 2 then Left(MaxPlayersTooLow)\n  else if cfg.roomName.isEmpty then Left(RoomNameEmpty)\n  else Right(cfg)"}
{"id":"be52e404-f018-4741-ae73-d5174a903a4d","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait UserAuthError\ncase object UserNotFound extends UserAuthError\ncase object IncorrectPassphrase extends UserAuthError\n\ndef authenticateUserVR(nickname: String, passphrase: String): Either[UserAuthError, String] =\n  if nickname != \"playerOne\" then Left(UserNotFound)\n  else if passphrase != \"securePass\" then Left(IncorrectPassphrase)\n  else Right(\"authToken123\")"}
{"id":"2a9bd04c-f8d2-41af-bc25-b1b3c12fdfe4","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseLobbyPort(portStr: String): Try[Int] = Try(portStr.toInt)"}
{"id":"930377b9-56e3-44c1-b4f5-46843aaf5b3f","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait MatchmakingError\ncase object LobbyFull extends MatchmakingError\ncase object AlreadyInQueue extends MatchmakingError\n\ncase class Player(tag: String)\n\ndef joinMatchmakingQueue(player: Player, queue: List[Player], maxPlayers: Int): Either[MatchmakingError, List[Player]] =\n  if queue.contains(player) then Left(AlreadyInQueue)\n  else if queue.size >= maxPlayers then Left(LobbyFull)\n  else Right(player :: queue)"}
{"id":"c37e2532-f354-4413-9421-9059af8005a8","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def findLobbyById(lobbyId: String): Option[VRLobby] =\n  if lobbyId == \"active-lobby-42\" then Some(VRLobby(lobbyId))\n  else None\n\ncase class VRLobby(id: String)"}
{"id":"a80d2156-35c0-4be6-a0dd-a07f05602973","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait AvatarSelectionError\ncase object AvatarUnavailable extends AvatarSelectionError\n\ndef selectAvatarVR(avatar: String, availableAvatars: Set[String]): Either[AvatarSelectionError, String] =\n  if availableAvatars.contains(avatar) then Right(avatar)\n  else Left(AvatarUnavailable)"}
{"id":"63af1329-f03a-4659-bc9d-c142024f19f2","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeBroadcastMessage(msg: String, lobbyId: String): Try[String] = Try {\n  if lobbyId.startsWith(\"lobby-\") then s\"Message sent: $msg\"\n  else throw new RuntimeException(\"Invalid lobby ID\")\n}"}
{"id":"cb9637e3-a3c9-4743-ac88-633c221ba6ef","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def safeRemovePlayer(playerId: String, lobby: List[String]): Option[List[String]] =\n  if lobby.contains(playerId) then Some(lobby.filterNot(_ == playerId))\n  else None"}
{"id":"a3e8e785-b53e-4742-abb1-21632d5d13b6","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait AssetLoadingError\ncase object AssetFileMissing extends AssetLoadingError\n\ncase class Asset(name: String)\n\ndef loadLobbyAsset(path: String): Either[AssetLoadingError, Asset] =\n  if path.endsWith(\".vrasset\") then Right(Asset(path))\n  else Left(AssetFileMissing)"}
{"id":"596d2698-8646-4585-abe9-ddcc4fe73acc","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def connectToVRLobby(playerId: String): String = {\n  if(playerId.isEmpty) throw new IllegalArgumentException(\"Player ID required.\")\n  \"connected-session-\" + playerId\n}"}
{"id":"57dfb1ab-6449-4d04-9156-f351f4a2d6a5","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def chooseGameRoom(roomId: String): String = {\n  try {\n    if(roomId.startsWith(\"lobby\")) \"Room chosen: \" + roomId\n    else throw new RuntimeException(\"Invalid room ID.\")\n  } catch {\n    case e: Exception => \"Failed: \" + e.getMessage\n  }\n}"}
{"id":"52a8a03d-9525-447b-b827-265999239b27","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class VRLobbyFullException(msg: String) extends Exception(msg)\n\ndef addPlayerToLobbyVR(lobby: List[String], user: String): List[String] = {\n  if(lobby.size >= 8) throw new VRLobbyFullException(\"Lobby full.\")\n  lobby :+ user\n}"}
{"id":"d3e99b22-f276-43fe-9f1d-fb9314d5094b","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def getPlayerAvatar(playerTag: String): String = {\n  try {\n    if(playerTag == \"guest\") throw new RuntimeException(\"Avatar not found.\")\n    \"avatar-image-url-for-\" + playerTag\n  } catch {\n    case e: Exception => \"error-default-avatar\"\n  }\n}"}
{"id":"feebf95e-3ba4-4fa5-bbfb-86f5a57b7247","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def sendLobbyInvite(sender: String, receiver: String): String = {\n  if(receiver.isEmpty) throw new IllegalArgumentException(\"Receiver required.\")\n  s\"Invite from $sender to $receiver\"\n}"}
{"id":"afd42844-69ec-46ad-99f7-e0fd009e289c","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def removeLobbyMember(members: List[String], member: String): List[String] = {\n  try {\n    if(!members.contains(member)) throw new NoSuchElementException(\"Member missing.\")\n    members.filterNot(_ == member)\n  } catch {\n    case _: Exception => members\n  }\n}"}
{"id":"e62d8f71-a528-4c7f-a89d-500ed0cc1e20","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class InvalidLobbyConfigException(msg: String) extends Exception(msg)\n\ndef configureLobby(name: String, capacity: Int): (String, Int) = {\n  if (name.isEmpty || capacity < 2) throw new InvalidLobbyConfigException(\"Bad lobby config\")\n  (name, capacity)\n}"}
{"id":"353ee4ac-c8c2-43a1-a07a-159f8afd7e1c","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def broadcastLobbyEvent(event: String, lobbyId: String): Unit = {\n  try {\n    if(lobbyId.isEmpty) throw new Exception(\"Lobby ID missing.\")\n    println(s\"Event '$event' broadcasted to $lobbyId\")\n  } catch {\n    case _: Throwable => println(\"Broadcast failed.\")\n  }\n}"}
{"id":"1f15bdc7-a0d9-4716-9bf9-9d197ef7383c","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def authenticateVRUser(username: String, password: String): String = {\n  if(password != \"letmein\") throw new SecurityException(\"Authentication failed.\")\n  \"auth-token-vr\"\n}"}
{"id":"bdc1aabf-2d38-432f-8f02-8675adce40f0","timestamp":1746100756435,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def downloadLobbyAsset(fileUrl: String): String = {\n  try {\n    if(fileUrl.endsWith(\".vrasset\")) \"Downloaded: \" + fileUrl\n    else throw new RuntimeException(\"Failed to load asset.\")\n  } catch {\n    case _: Exception => \"Default asset used\"\n  }\n}"}
{"id":"a1ca5c3f-b123-41a6-bf7c-491cbfb2fc41","timestamp":1746100785315,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbyConnectionError(reason: String)\ncase class PlayerId(value: String)\n\ndef connectPlayer(playerId: PlayerId, lobbyOpen: Boolean): Either[LobbyConnectionError, String] =\n  if lobbyOpen then Right(s\"Player ${playerId.value} connected.\")\n  else Left(LobbyConnectionError(\"Lobby is closed.\"))\n"}
{"id":"d4e5cf4c-1cbb-4d85-98d4-c3fe7b8e0ca0","timestamp":1746100785315,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def assignGameInstance(playerName: String, available: Boolean): String = {\n  if (!available) throw new RuntimeException(\"No available game instances!\")\n  s\"Assigned $playerName to a game instance.\"\n}\ntry {\n  val result = assignGameInstance(\"TaliaVR\", available = false)\n  println(result)\n} catch {\n  case e: RuntimeException => println(e.getMessage)\n}\n"}
{"id":"8c0d1863-4225-43d1-8c1c-49f67158c637","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait VRLobbyError\ncase object UserAlreadyInLobby extends VRLobbyError\ncase class SuccessfullyJoined(username: String)\ndef joinVRLobby(username: String, inLobby: Boolean): Either[VRLobbyError, SuccessfullyJoined] =\n  if (inLobby) Left(UserAlreadyInLobby)\n  else Right(SuccessfullyJoined(username))\n"}
{"id":"84747550-2437-45d0-8720-978a467c00a1","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class InvalidGameSessionException(msg: String) extends Exception(msg)\ndef startGameSession(sessionActive: Boolean): Unit = {\n  if (!sessionActive) throw new InvalidGameSessionException(\"Session is not active.\")\n}\ntry {\n  startGameSession(false)\n} catch {\n  case e: InvalidGameSessionException => println(s\"Start failure: ${e.getMessage}\")\n}\n"}
{"id":"5854dfce-03e8-4101-bdf5-935a3e2f3bde","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef sendLobbyInvitation(username: String, lobbyCapacity: Int, currentPlayers: Int): Try[String] =\n  Try {\n    if currentPlayers >= lobbyCapacity then throw new Exception(\"Lobby full\")\n    else s\"Invitation sent to $username\"\n  }\n"}
{"id":"47483cb5-b3ba-4046-a516-f00fd86f7f6b","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def getPlayerProfile(playerTag: String): String = {\n  if (playerTag == \"\") throw new IllegalArgumentException(\"Player tag is empty.\")\n  s\"Profile for $playerTag\"\n}\ntry {\n  val profile = getPlayerProfile(\"\")\n  println(profile)\n} catch {\n  case ex: IllegalArgumentException => println(\"Error: \" + ex.getMessage)\n}\n"}
{"id":"d15e6c10-a6f7-4928-8b63-cc52d176d41c","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbyNetworkError(msg: String)\ndef broadcastMessageToLobby(message: String, connected: Boolean): Option[String] =\n  if connected then Some(s\"Broadcast: $message\")\n  else None\n"}
{"id":"91fba463-9e82-4dde-b281-7040fafd1604","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def removePlayerFromLobby(player: String, present: Boolean): String = {\n  if (!present) throw new NoSuchElementException(\"Player not found in lobby.\")\n  s\"$player removed from lobby.\"\n}\ntry {\n  val status = removePlayerFromLobby(\"Ayra\", present = false)\n  println(status)\n} catch {\n  case ex: NoSuchElementException => println(ex.getMessage)\n}\n"}
{"id":"2ea5349c-084a-4bf0-9b6f-3545aa05f1e9","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait AvatarUploadError\ncase object AvatarSizeTooLarge extends AvatarUploadError\ncase class UploadedAvatar(name: String)\ndef uploadAvatar(name: String, sizeMb: Int): Either[AvatarUploadError, UploadedAvatar] =\n  if sizeMb > 10 then Left(AvatarSizeTooLarge)\n  else Right(UploadedAvatar(name))\n"}
{"id":"b987daf8-b767-46ad-89e5-49f770479c4c","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class LobbyTimeoutException extends Exception(\"Lobby timed out.\")\ndef checkLobbyTimeout(secondsIdle: Int): Boolean = {\n  if (secondsIdle > 600) throw new LobbyTimeoutException\n  true\n}\ntry {\n  checkLobbyTimeout(1200)\n} catch {\n  case e: LobbyTimeoutException => println(\"Timeout!\")\n}\n"}
{"id":"9940a7cf-feba-407a-af6a-33516c76d2a8","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRRoomAllocationError(reason: String)\ndef allocateVRRoom(requestedSlots: Int, slotsAvailable: Int): Either[VRRoomAllocationError, Int] =\n  if requestedSlots > slotsAvailable then Left(VRRoomAllocationError(\"Not enough slots.\"))\n  else Right(slotsAvailable - requestedSlots)\n"}
{"id":"f677d82b-471c-4189-955d-43e8e8ca82ca","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def setPlayerVoiceChat(playerName: String, microphoneOn: Boolean): String = {\n  if (!microphoneOn) throw new Exception(\"Microphone is off!\")\n  s\"Voice chat activated for $playerName\"\n}\ntry {\n  val res = setPlayerVoiceChat(\"Kiran360\", microphoneOn = false)\n  println(res)\n} catch {\n  case ex: Exception => println(ex.getMessage)\n}\n"}
{"id":"b425265d-188a-490b-abd8-4d3de1112975","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"import scala.util.Try\ndef parseLobbyConfig(jsonInput: String): Try[Map[String, String]] = Try {\n  if jsonInput.isEmpty then throw new Exception(\"Empty config.\")\n  else Map(\"maxPlayers\" -> \"8\")\n}\n"}
{"id":"cb9d96d2-ba43-4d18-96ed-86e3fc575ffd","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def reconnectToLobby(playerName: String, connectionStable: Boolean): String = {\n  if (!connectionStable) throw new IllegalStateException(\"Cannot reconnect: unstable connection.\")\n  s\"$playerName reconnected.\"\n}\ntry {\n  val msg = reconnectToLobby(\"RheaVR\", connectionStable = false)\n  println(msg)\n} catch {\n  case ex: IllegalStateException => println(ex.getMessage)\n}\n"}
{"id":"638a4fd4-176a-4bdd-9a6d-07c597626492","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"sealed trait InventorySyncError\ncase object SyncConflict extends InventorySyncError\ncase object SyncTimeout extends InventorySyncError\ndef syncInventory(playerId: String, tryCount: Int): Either[InventorySyncError, String] =\n  if tryCount > 3 then Left(SyncTimeout)\n  else Right(s\"Inventory synced for $playerId\")\n"}
{"id":"20c37270-4a12-4dce-85ca-fe7a7d2ec84c","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def setPlayerReady(playerId: String, state: String): String = {\n  if (state != \"ready\") throw new Exception(\"Player must be set to 'ready'.\")\n  \"Player is ready to play.\"\n}\ntry {\n  val msg = setPlayerReady(\"Marko\", \"waiting\")\n  println(msg)\n} catch {\n  case ex: Exception => println(ex.getMessage)\n}\n"}
{"id":"11e12d75-6393-4510-b984-9b231c3184ba","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRLobbyBanError(reason: String)\ndef banPlayerFromLobby(admin: String, player: String, adminPerms: Boolean): Either[VRLobbyBanError, String] =\n  if !adminPerms then Left(VRLobbyBanError(\"Admin permissions required.\"))\n  else Right(s\"$player banned by $admin\")\n"}
{"id":"a3b9b613-303a-4f69-9118-ebd345de00c2","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def downloadLobbyAssets(assetsExist: Boolean): String = {\n  if (!assetsExist) throw new Exception(\"Assets not found.\")\n  \"Assets downloaded successfully.\"\n}\ntry {\n  downloadLobbyAssets(false)\n} catch {\n  case ex: Exception => println(\"Asset error: \" + ex.getMessage)\n}\n"}
{"id":"c08e5fb1-ce1f-46c2-ba09-c34a22e176bc","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"import scala.util.Try\ndef enableLobbySpectatorMode(spectatorAvailable: Boolean): Try[String] = Try {\n  if !spectatorAvailable then throw new Exception(\"Spectator mode not available.\")\n  \"Spectator mode enabled.\"\n}\n"}
{"id":"612c2ff4-2e9f-4ff6-b042-31fb70cac473","timestamp":1746100785316,"category":"throws","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def exitVRMatchOnce(matchActive: Boolean): Unit = {\n  if (!matchActive) throw new Exception(\"No active match to exit.\")\n}\ntry {\n  exitVRMatchOnce(false)\n} catch {\n  case ex: Exception => println(ex.getMessage)\n}\n"}
{"id":"b9d2a991-e34f-475e-a4c2-6a9eaedf2b05","timestamp":1746100804885,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class Employee(id: Int, name: String)\ncase class TimeEntry(employeeId: Int, hours: Double)\ndef validateTimeEntry(entry: TimeEntry): Option[TimeEntry] =\n  if entry.hours > 0 && entry.hours <= 24 then Some(entry)\n  else None"}
{"id":"2e0ec35a-ff37-464d-86a1-af205865c5ae","timestamp":1746100804885,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class ClockInError(reason: String)\ndef clockIn(employee: Employee, atHour: Int): Either[ClockInError, String] =\n  if atHour < 0 || atHour > 23 then\n    Left(ClockInError(\"Invalid clock-in hour.\"))\n  else\n    Right(s\"${employee.name} clocked in at $atHour:00\")"}
{"id":"c782a127-42e9-4923-89f1-38ec569c39fd","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait TimeTrackingError\ncase object NegativeHours extends TimeTrackingError\ncase object ExceedsMaximumHours extends TimeTrackingError\ndef logHours(hours: Double): Either[TimeTrackingError, Double] =\n  if hours < 0 then Left(NegativeHours)\n  else if hours > 24 then Left(ExceedsMaximumHours)\n  else Right(hours)"}
{"id":"63184e93-3767-4497-8ec9-63637209867d","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"import scala.util.Try\ncase class Shift(start: Int, end: Int)\ndef calculateShiftDuration(shift: Shift): Try[Int] = Try {\n  require(shift.end > shift.start, \"Shift end must be after start\")\n  shift.end - shift.start\n}"}
{"id":"9ccf825e-4def-4b01-8678-29754ee7f443","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait AttendanceError\ncase object AlreadyClockedIn extends AttendanceError\ncase object NotClockedIn extends AttendanceError\ncase class AttendanceState(clockIns: Set[Int])\ndef recordClockIn(state: AttendanceState, employeeId: Int): Either[AttendanceError, AttendanceState] =\n  if state.clockIns.contains(employeeId) then Left(AlreadyClockedIn)\n  else Right(state.copy(clockIns = state.clockIns + employeeId))"}
{"id":"711578b6-6608-4c7f-8976-fdd2ef031f76","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def parseHoursWorked(input: String): Option[Double] =\n  try input.toDoubleOption\n  catch case _: NumberFormatException => None"}
{"id":"9c5592aa-09a6-4f69-a109-e958559e8c03","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class OvertimeError(msg: String)\ndef approveOvertime(hours: Double): Either[OvertimeError, Double] =\n  if hours > 12 then Left(OvertimeError(\"Overtime exceeds allowed limit.\"))\n  else Right(hours)"}
{"id":"2ceed1e7-5e76-4095-b724-f2bc7a3a1de7","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def safeDivideHours(total: Double, days: Int): Option[Double] =\n  if days == 0 then None else Some(total / days)"}
{"id":"61d881d8-078c-4c8a-9fb7-101b8ffe3c03","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"import scala.util.Try\ndef parseClockOutTime(str: String): Try[Int] = Try(str.toInt)"}
{"id":"8d74109b-1b38-4f2c-8156-e006cecdfcc6","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait ApprovalError\ncase object NotManager extends ApprovalError\ndef approveTimesheet(isManager: Boolean): Either[ApprovalError, String] =\n  if isManager then Right(\"Approved\") else Left(NotManager)"}
{"id":"423735d8-c3d8-42d6-b9a2-1d7677e19b86","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class InvalidTimeEntryException(msg: String) extends Exception(msg)\ndef submitTimeEntry(entry: TimeEntry): TimeEntry =\n  if entry.hours < 0 || entry.hours > 24 then\n    throw new InvalidTimeEntryException(\"Invalid hours for entry.\")\n  entry"}
{"id":"19e60928-5a56-4852-8095-5a0fe62cc1b7","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def unsafeParseHours(str: String): Double =\n  try str.toDouble\n  catch case e: NumberFormatException => throw new IllegalArgumentException(\"Hours must be a number.\")"}
{"id":"85bc92e4-3ddf-4164-9902-42eca5589b4d","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def clockOut(employeeId: Int, hour: Int): String =\n  if hour < 0 || hour > 23 then\n    throw new RuntimeException(\"Clock-out hour out of bounds.\")\n  s\"Employee $employeeId clocked out at $hour:00\""}
{"id":"9f8adea3-df68-4079-9df3-4279a3da9f01","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def logShiftDuration(start: Int, end: Int): Int =\n  if end <= start then\n    throw new Exception(\"Shift end time must be after start time.\")\n  end - start"}
{"id":"7a734452-dc04-47b2-8d36-51bac93b64c1","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getEmployeeHours(entries: List[TimeEntry], empId: Int): Double =\n  entries.find(_.employeeId == empId) match\n    case Some(entry) if entry.hours >= 0 => entry.hours\n    case _ => throw new Exception(\"No valid hours found for employee.\")"}
{"id":"b7beeb78-67ce-4193-b6b7-b669c2e73b95","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class OvertimeException extends Exception\n\ndef processOvertime(hours: Double): Double =\n  if hours > 40 then\n    throw new OvertimeException\n  hours\n"}
{"id":"6957ceb5-45d1-4a2c-a48c-0580c29c645d","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def saveClockIn(employee: Employee, hour: Int): Boolean =\n  try\n    if hour < 0 || hour > 23 then throw new Exception(\"Invalid clock-in hour.\")\n    true\n  catch case _: Exception => false"}
{"id":"c939445e-84c2-4d83-bfde-f6a91230643d","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def handleApproval(isManager: Boolean): String =\n  try\n    if !isManager then throw new Exception(\"User is not authorized.\")\n    \"Timesheet approved.\"\n  catch case e: Exception => e.getMessage\n"}
{"id":"c5777e1c-a864-4d1e-906e-357ccd7ae233","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class TimesheetSubmissionException(msg: String) extends Exception(msg)\ndef submitTimesheet(employee: Employee, hours: Double): String =\n  if hours < 0 then throw new TimesheetSubmissionException(\"Negative hours.\")\n  s\"${employee.name} submitted $hours hours.\""}
{"id":"8d74b763-0e26-4861-92b3-1f9cdc563867","timestamp":1746100804886,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def deleteTimeEntry(entry: TimeEntry): Unit =\n  try\n    if entry.hours < 0 then throw new IllegalArgumentException(\"Cannot delete entry with negative hours.\")\n  catch case ex: Exception =>\n    println(s\"Failed to delete: ${ex.getMessage}\")\n"}
{"id":"38c96cc6-f94e-4bb5-a244-179e5fe56886","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class EmployeeTimeEntry(employeeId: Int, clockIn: Long, clockOut: Option[Long])\nsealed trait TimeTrackingError\ncase object MissingClockOut extends TimeTrackingError\ncase object InvalidClockInTime extends TimeTrackingError\n\ndef calculateHoursWorked(entry: EmployeeTimeEntry): Either[TimeTrackingError, Double] =\n  entry.clockOut match\n    case None => Left(MissingClockOut)\n    case Some(out) if out <= entry.clockIn => Left(InvalidClockInTime)\n    case Some(out) => Right((out - entry.clockIn)/3600.0)\n"}
{"id":"ecba4c92-ffc0-4c05-9cc7-dbcc549da20e","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class MissingTimeEntryException(employeeId: Int) extends Exception(s\"Missing time entry for employee $employeeId\")\n\ndef getEmployeeTimeEntry(employeeId: Int, records: Map[Int, Long]): Long =\n  if records.contains(employeeId) then records(employeeId)\n  else throw new MissingTimeEntryException(employeeId)\n"}
{"id":"d305d2c8-dbe4-46c2-bb13-0f8c30fad0b6","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait AttendanceError\ncase object EarlyCheckIn extends AttendanceError\ncase object LateCheckOut extends AttendanceError\n\ndef validateWorkTimes(clockIn: Long, clockOut: Long): Option[AttendanceError] =\n  if clockIn < 7 * 3600 then Some(EarlyCheckIn)\n  else if clockOut > 19 * 3600 then Some(LateCheckOut)\n  else None\n"}
{"id":"6c882734-a3b0-40c3-a88e-a1ba935b2b75","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def computeBreakDuration(start: Long, end: Long): Double =\n  if end < start then throw new IllegalArgumentException(\"Break end before start\")\n  else (end - start) / 60.0\n"}
{"id":"2b4025b6-4743-467c-b1f0-3d6dbb4cb848","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeParseTimestamp(s: String): Try[Long] = Try(s.toLong)\n"}
{"id":"d3e6f9c7-a0ce-4447-abaa-d28601aedf63","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"try {\n  val entry = getEmployeeTimeEntry(22, Map())\n  println(s\"Time entry: $entry\")\n} catch {\n  case ex: Exception => println(s\"Failed to retrieve time entry: ${ex.getMessage}\")\n}\n"}
{"id":"86ce0061-19a4-49e3-b4aa-18194722ac01","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait TimeEntryValidationError\ncase object ClockOutBeforeClockIn extends TimeEntryValidationError\ncase object ClockInFuture extends TimeEntryValidationError\n\ndef validateTimeEntry(clockIn: Long, clockOut: Long, current: Long): Either[TimeEntryValidationError, Unit] =\n  if clockOut < clockIn then Left(ClockOutBeforeClockIn)\n  else if clockIn > current then Left(ClockInFuture)\n  else Right(())\n"}
{"id":"51d3f3de-9a53-41db-92b2-47d2c7c37a2e","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def parseEmployeeId(id: String): Int =\n  try id.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid employee ID format\")\n"}
{"id":"ca60913d-63bc-4aef-8716-990e2b2eee33","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def recordClockIn(employeeId: Int, timesheet: Map[Int, Long], now: Long): Option[Map[Int, Long]] =\n  if timesheet.contains(employeeId) then None\n  else Some(timesheet + (employeeId -> now))\n"}
{"id":"537090bb-ef93-484a-a423-88e980d3331c","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getEmployeeHours(employeeId: Int, hours: Map[Int, Double]): Double =\n  if !hours.contains(employeeId) then throw new Exception(\"No hours found for employee\")\n  else hours(employeeId)\n"}
{"id":"4fb14bb9-479c-4e7e-804a-76e996afe3ae","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class TimeTrackingIssue(message: String)\ndef checkForOverlappingEntries(entries: List[(Long, Long)]): Either[TimeTrackingIssue, Unit] =\n  val sorted = entries.sortBy(_._1)\n  val overlaps = sorted.sliding(2).exists {\n    case List((_, end1), (start2, _)) => end1 > start2\n    case _ => false\n  }\n  if overlaps then Left(TimeTrackingIssue(\"Overlapping entries detected\")) else Right(())\n"}
{"id":"b27a6377-76f5-4658-8040-e1bea284f843","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def removeTimeEntry(employeeId: Int, timesheet: scala.collection.mutable.Map[Int, Long]): Unit =\n  try timesheet.remove(employeeId)\n  catch case _: Exception => throw new RuntimeException(\"Error removing time entry\")\n"}
{"id":"db4c0bca-bcf3-47ac-a070-cc2aa4a254dc","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"import scala.util.Try\n\ndef calculateTotalBreaks(breaks: List[(Long, Long)]): Try[Double] = Try {\n  breaks.map { case (start, end) =>\n    if end < start then throw new IllegalArgumentException(\"Break end before start\")\n    else (end - start)/60.0\n  }.sum\n}\n"}
{"id":"d2cfd91b-12a1-4c21-b265-566f994dd70a","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class InvalidClockException(msg: String) extends Exception(msg)\n\ndef clockIn(employeeId: Int, timesheet: Map[Int, Long], now: Long): Map[Int, Long] =\n  if timesheet.contains(employeeId) then throw new InvalidClockException(\"Already clocked in\")\n  else timesheet + (employeeId -> now)\n"}
{"id":"4052f2ed-d45e-4346-925d-10e6d54a1e5e","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"sealed trait ClockInError\ncase object AlreadyClockedIn extends ClockInError\ncase object NegativeTimestamp extends ClockInError\n\ndef addClockIn(employeeId: Int, timesheet: Map[Int, Long], now: Long): Either[ClockInError, Map[Int, Long]] =\n  if now < 0 then Left(NegativeTimestamp)\n  else if timesheet.contains(employeeId) then Left(AlreadyClockedIn)\n  else Right(timesheet + (employeeId -> now))\n"}
{"id":"3bbd7984-762c-4444-b76d-ff21a27586c5","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def fetchWorkedMinutes(employeeId: Int, minutes: Map[Int, Int]): Int =\n  try minutes(employeeId)\n  catch case _: Exception => throw new Exception(s\"No minutes found for employee $employeeId\")\n"}
{"id":"394c8d10-6c37-4c65-b330-d89dba4f82dc","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDivideWorkedHours(hours: Int, divisor: Int): Try[Double] = Try(hours.toDouble/divisor)\n"}
{"id":"6c94138d-44a0-4ae2-9e39-5a6c7fc4c0da","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def logClockOut(employeeId: Int, clockOuts: scala.collection.mutable.Map[Int, Long], now: Long): Unit =\n  try clockOuts.update(employeeId, now)\n  catch case _: Exception => throw new Exception(\"Failed to log clock out\")\n"}
{"id":"5816d819-3946-4aaf-b826-90db3a3df70d","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class TimeEntryMissing(employeeId: Int) extends Exception\n\ndef lookupClockIn(employeeId: Int, records: Map[Int, Long]): Option[Long] =\n  if records.contains(employeeId) then Some(records(employeeId)) else None\n"}
{"id":"cca73a74-3efb-4e26-bb5c-fee94eb49905","timestamp":1746100829666,"category":"throws","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def calculateWorkDuration(clockIn: Long, clockOut: Long): Double =\n  if clockIn > clockOut then throw new RuntimeException(\"Invalid time range\")\n  else (clockOut - clockIn)/3600.0\n"}
{"id":"7a6e6d3d-7fb1-49cf-9095-bafb3ada9b44","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WeatherNotification(message: String, level: String)\nsealed trait NotificationError\ncase object RecipientNotFound extends NotificationError\ncase object InvalidAlertLevel extends NotificationError\n\ndef sendNotification(recipient: String, notification: WeatherNotification): Either[NotificationError, String] =\n  if recipient.isEmpty then Left(RecipientNotFound)\n  else if !Set(\"Info\", \"Warning\", \"Severe\").contains(notification.level) then Left(InvalidAlertLevel)\n  else Right(s\"Sent to $recipient: ${notification.message}\")"}
{"id":"9a8837bf-c3a9-4203-b00b-0311d9ee7bde","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getWeatherAlert(region: String): String = {\n  if (region == \"\") throw new IllegalArgumentException(\"Region cannot be empty!\")\n  if (region != \"North\" && region != \"South\") throw new RuntimeException(\"Unknown region: \" + region)\n  \"Clear skies in \" + region\n}"}
{"id":"00e03134-e7df-4171-a2aa-19163130a788","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait SubscriptionError\ncase object EmailInvalid extends SubscriptionError\ncase object RegionUnsupported extends SubscriptionError\n\ndef subscribeUser(email: String, region: String): Either[SubscriptionError, String] =\n  if !email.contains(\"@\") then Left(EmailInvalid)\n  else if region != \"East\" && region != \"West\" then Left(RegionUnsupported)\n  else Right(\"Subscription successful\")"}
{"id":"73ab2167-291b-4eaa-a0d7-fd27a064aa76","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherApiException(msg: String) extends Exception(msg)\ndef fetchWeatherAlert(alertId: Int): String = {\n  if (alertId < 0) throw new WeatherApiException(\"Invalid alert ID\")\n  else \"Alert details: Thunderstorms expected\"\n}"}
{"id":"dce44b4d-05da-44df-b76b-e0314225d065","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"import scala.util.Try\ncase class WeatherAlert(title: String, priority: Int)\ndef parseWeatherAlert(data: String): Try[WeatherAlert] = Try {\n  val arr = data.split(\",\")\n  WeatherAlert(arr(0), arr(1).toInt)\n}"}
{"id":"856b820a-c232-4966-9e98-cca40861dda2","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def sendAlertToUser(alert: String, userId: Long): Unit = {\n  try {\n    if (userId <= 0) throw new IllegalArgumentException(\"User ID must be positive!\")\n    println(s\"Alert sent to $userId: $alert\")\n  } catch {\n    case ex: Exception => println(s\"Failed to send alert: ${ex.getMessage}\")\n  }\n}"}
{"id":"b86adc79-d1a1-4196-bb10-fd62a7e15377","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait AlertDeliveryError\ncase object NoDeliveryEndpoint extends AlertDeliveryError\ncase class DeliveryTimeout(seconds: Int) extends AlertDeliveryError\n\ndef deliverWeatherAlert(alert: String, endpoint: Option[String]): Either[AlertDeliveryError, String] =\n  endpoint match\n    case None => Left(NoDeliveryEndpoint)\n    case Some(uri) if uri.isEmpty => Left(NoDeliveryEndpoint)\n    case Some(uri) if uri.startsWith(\"http\") =>\n      Right(s\"Alert delivered to $uri: $alert\")\n    case _ => Left(DeliveryTimeout(5))"}
{"id":"a00f293a-62c6-474d-a9e6-83cb5b9c0fe5","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def updateRecipientPreferences(userEmail: String, preferences: Map[String, String]): Boolean = {\n  if (!preferences.contains(\"alertType\")) throw new IllegalStateException(\"Missing alertType in preferences\")\n  if (userEmail.endsWith(\"@invalid.com\")) throw new RuntimeException(\"Invalid email provider\")\n  true\n}"}
{"id":"8cb2b6be-a251-4003-a7b6-256de82c5381","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def findActiveAlert(city: String): Option[String] =\n  if city == \"London\" then Some(\"Heavy rain warning\")\n  else if city == \"Berlin\" then Some(\"High winds warning\")\n  else None"}
{"id":"e06815b9-ed30-48ab-8312-a672c20c1775","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def removeWeatherSubscriber(userId: Int): Boolean = {\n  if (userId < 0) throw new Exception(\"Negative user ID not allowed\")\n  true\n}"}
{"id":"e98c5143-a8d4-48a3-a6b2-d9bd7a9e5728","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait NotificationSendError\ncase object NotificationQuotaExceeded extends NotificationSendError\ncase object RecipientBlocked extends NotificationSendError\n\ndef sendAlertNotification(recipient: String, message: String, quota: Int): Either[NotificationSendError, String] =\n  if quota <= 0 then Left(NotificationQuotaExceeded)\n  else if recipient == \"blocked@weather.com\" then Left(RecipientBlocked)\n  else Right(s\"Alert sent to $recipient: $message\")"}
{"id":"13712080-819b-4e92-85cc-dc38e1e9bce1","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def readNotificationTemplate(templateId: Long): String = {\n  if (templateId <= 0) throw new IllegalArgumentException(\"Template ID must be positive\")\n  \"Severe weather warning for your area\"\n}"}
{"id":"2d831a31-5522-402c-8942-2e62f0843704","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"import scala.util.Try\ndef safeTemperatureParsing(tempText: String): Try[Double] = Try {\n  tempText.toDouble\n}"}
{"id":"7bacfefe-96c4-40d0-b831-0d35df59aa50","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def logWeatherNotificationDelivery(notificationId: String): Unit = {\n  try {\n    if (notificationId.isEmpty) throw new Exception(\"NotificationId cannot be empty\")\n    println(s\"Logged notification: $notificationId\")\n  } catch {\n    case e: Exception => println(s\"Logging failed: ${e.getMessage}\")\n  }\n}"}
{"id":"4a51bf99-0dc4-48bb-9f97-0577e8e184f4","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def decodeAlertSeverity(code: Int): Option[String] =\n  code match\n    case 1 => Some(\"Mild\")\n    case 2 => Some(\"Moderate\")\n    case 3 => Some(\"Severe\")\n    case _ => None"}
{"id":"a54a727a-a680-480a-89df-a73ec9a33a74","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertDispatchException(msg: String) extends Exception(msg)\ndef dispatchWeatherAlert(alert: String, userContact: String): Unit = {\n  if (userContact.isBlank) throw new AlertDispatchException(\"Contact information is missing\")\n  println(s\"Dispatching alert: $alert to $userContact\")\n}"}
{"id":"7557b3ad-3add-4b14-9708-d62f0e979c33","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait AlertFetchingError\ncase object AlertIdMissing extends AlertFetchingError\ncase object AlertNotFound extends AlertFetchingError\n\ndef fetchUserAlert(alertId: Option[Int]): Either[AlertFetchingError, String] =\n  alertId match\n    case None => Left(AlertIdMissing)\n    case Some(id) if id <= 0 => Left(AlertNotFound)\n    case Some(id) => Right(s\"Fetched alert #$id\")"}
{"id":"28e2bdf6-2a5c-425b-837e-2f4334384948","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def sendBulkNotifications(userList: List[String], notification: String): Unit = {\n  try {\n    userList.foreach { user =>\n      if (user.contains(\"@fail.com\")) throw new Exception(\"Failed to send to \" + user)\n      println(s\"Notified $user\")\n    }\n  } catch {\n    case err: Exception => println(\"Bulk notification error: \" + err.getMessage)\n  }\n}"}
{"id":"be5c1277-42cf-4e60-b308-e471893bebdd","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"import scala.util.Try\ndef readAlertLevel(level: String): Try[Int] = Try(level.toInt)"}
{"id":"0ff244e8-b275-4829-a997-6e6da97426ce","timestamp":1746100854954,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def appendLogEntry(logFile: String, entry: String): Unit = {\n  try {\n    if (logFile.isEmpty) throw new Exception(\"Log file path missing\")\n    println(s\"Logged to $logFile: $entry\")\n  } catch {\n    case ex: Exception => println(s\"Failed to log: ${ex.getMessage}\")\n  }\n}"}
{"id":"a6f8bafb-9661-4024-a645-5a515fc65e9b","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"case class WeatherAlertTypeNotSupported(alertType: String)\n    extends Exception(s\"Alert type $alertType is not supported.\")\n\ndef sendWeatherAlert(alertType: String, recipient: String): Unit =\n  if alertType == \"Tornado\" || alertType == \"Flood\" then\n    println(s\"Sending $alertType alert to $recipient\")\n  else\n    throw new WeatherAlertTypeNotSupported(alertType)\n\ntry\n  sendWeatherAlert(\"Snow\", \"user@email.com\")\ncatch\n  case e: WeatherAlertTypeNotSupported => println(e.getMessage)"}
{"id":"1ccafe10-e55e-48b5-9b2b-d9b17eabd89e","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def connectToWeatherService(apiUrl: String): String =\n  if apiUrl.startsWith(\"https://\") then \"Connection successful!\" \n  else throw new RuntimeException(\"Invalid service URL: must be HTTPS\")\n\ntry\n  val result = connectToWeatherService(\"http://api.weather.com\")\n  println(result)\ncatch\n  case e: Exception => println(\"Connection error: \" + e.getMessage)"}
{"id":"d71ed834-8708-4370-9c19-73b4e2b5c1a3","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherNotificationException(msg: String) extends Exception(msg)\ndef notifyUser(deviceId: String, alert: String): Unit =\n  if deviceId.isEmpty then throw new WeatherNotificationException(\"Device ID missing\")\n  println(s\"Notification sent to device $deviceId: $alert\")\n\ntry\n  notifyUser(\"\", \"Heatwave warning\")\ncatch\n  case e: WeatherNotificationException => println(e.getMessage)"}
{"id":"8a8faf5b-1f48-4892-a008-f5673fd3f921","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def fetchWeatherData(location: String): String =\n  if location == \"\" then throw new IllegalArgumentException(\"Location cannot be empty\")\n  s\"Weather data for $location\"\n\ntry\n  val data = fetchWeatherData(\"\")\n  println(data)\ncatch\n  case e: IllegalArgumentException => println(\"Invalid input: \" + e.getMessage)"}
{"id":"3f1ec23f-1c7a-423f-a1ff-4ea689434213","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getUserAlertPreference(userId: Int): String =\n  if userId <= 0 then throw new Exception(\"User ID must be positive\")\n  \"Email\"\n\ntry\n  val pref = getUserAlertPreference(0)\n  println(s\"Preference: $pref\")\ncatch\n  case e: Exception => println(s\"Error getting preference: ${e.getMessage}\")"}
{"id":"666eb3cb-94da-4ef3-8236-a98c08c435a4","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"object AlertThresholds:\n  def checkThresholds(temp: Double): Unit =\n    if temp > 50 then throw new Exception(\"Temperature threshold exceeded\")\n    println(\"Thresholds normal\")\n\ntry\n  AlertThresholds.checkThresholds(55)\ncatch\n  case e: Exception => println(\"Alert: \" + e.getMessage)"}
{"id":"c64119a0-31a5-44ad-aa6b-c8f1c21e30eb","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def saveAlertToDatabase(alertMessage: String): Unit =\n  if alertMessage.length > 200 then throw new RuntimeException(\"Alert message too long\")\n  println(\"Alert saved: \" + alertMessage)\n\ntry\n  saveAlertToDatabase(\"A\" * 210)\ncatch\n  case e: RuntimeException => println(\"Failed to save alert: \" + e.getMessage)"}
{"id":"907ce734-d5f9-42b5-a0c5-cb1e10437835","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def parseAlertJson(jsonString: String): Int =\n  if !jsonString.contains(\"alertId\") then throw new Exception(\"Missing alertId\")\n  123\n\ntry\n  parseAlertJson(\"{}\")\ncatch\n  case e: Exception => println(\"JSON parsing error: \" + e.getMessage)"}
{"id":"4f913ad6-5570-4984-ba8a-0eada86917bf","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def scheduleAlertDispatch(minutes: Int): Unit =\n  if minutes < 0 then throw new Exception(\"Schedule time must be non-negative\")\n  println(s\"Dispatch scheduled in $minutes minutes.\")\n\ntry\n  scheduleAlertDispatch(-5)\ncatch\n  case e: Exception => println(\"Scheduling failure: \" + e.getMessage)"}
{"id":"423f679d-a72f-4216-8c27-919ecbfc415a","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertDeliveryException extends Exception\n\ndef deliverWeatherAlert(recipient: String): Unit =\n  if recipient == \"invalid@email.com\" then throw new AlertDeliveryException\n  println(s\"Sent weather alert to $recipient\")\n\ntry\n  deliverWeatherAlert(\"invalid@email.com\")\ncatch\n  case _: AlertDeliveryException => println(\"Alert delivery failure.\")"}
{"id":"a8d7adf7-984e-49ce-a0e1-d687832a554f","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait WeatherNotificationError\ncase class NetworkUnavailable(reason: String) extends WeatherNotificationError\ncase object InvalidUserSubscribe extends WeatherNotificationError\n\ndef subscribeToAlerts(userEmail: String): Either[WeatherNotificationError, String] =\n  if userEmail.isEmpty then Left(InvalidUserSubscribe)\n  else if userEmail.endsWith(\"@fail.com\") then Left(NetworkUnavailable(\"Service down\"))\n  else Right(\"Successfully subscribed\")\n\nsubscribeToAlerts(\"\") match\n  case Left(err)   => println(s\"Error: $err\")\n  case Right(msg)  => println(msg)"}
{"id":"36ff612c-f6c6-41d1-bec0-8328e091cbff","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class AlertMessage(content: String)\ndef safeAlertLength(alert: AlertMessage): Option[Int] =\n  Option.when(alert.content.length < 100)(alert.content.length)\n\nval result = safeAlertLength(AlertMessage(\"A long alert message\"))\nprintln(result)"}
{"id":"b9ae85b3-d84b-4d97-8e7b-8c67998bce30","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef safeParseTemperature(tempString: String): Try[Double] =\n  Try(tempString.toDouble)\nval parsed = safeParseTemperature(\"twenty\")\nparsed match\n  case scala.util.Success(value) => println(s\"Temperature: $value\")\n  case scala.util.Failure(ex)    => println(\"Could not parse temperature\")"}
{"id":"48d96a39-8701-4b19-8a1f-09b1dc0891e1","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait AlertUpdateError\ncase object AlertNotFound extends AlertUpdateError\ncase object PermissionDenied extends AlertUpdateError\n\ndef updateAlert(alertId: Int, user: String): Either[AlertUpdateError, String] =\n  if alertId < 0 then Left(AlertNotFound)\n  else if user != \"admin\" then Left(PermissionDenied)\n  else Right(\"Alert updated successfully\")\n\nval updateResult = updateAlert(1, \"guest\")\nprintln(updateResult)"}
{"id":"acc7bda7-7131-4708-82c4-d418e1a9bcf8","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def safeRecipientNotification(recipient: String): Option[String] =\n  if recipient.contains(\"@\") then Some(\"Notification sent\") else None\nval sent = safeRecipientNotification(\"weather@now.com\")\nprintln(sent)"}
{"id":"db5213e5-1013-4429-b1f0-8114478f9ee6","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait AlertParsingError\ncase object MalformedJson extends AlertParsingError\ncase object MissingAlertId extends AlertParsingError\n\ndef parseAlert(json: String): Either[AlertParsingError, Int] =\n  if !json.startsWith(\"{\") then Left(MalformedJson)\n  else if !json.contains(\"alertId\") then Left(MissingAlertId)\n  else Right(100)\n\nval parsed = parseAlert(\"{alertId:100}\")\nprintln(parsed)"}
{"id":"83a1d4e9-3e33-4db2-b490-7042f3ee086b","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WeatherAlert(priority: Int, message: String)\ndef validateAlert(alert: WeatherAlert): Either[String, WeatherAlert] =\n  if alert.priority < 1 then Left(\"Priority is too low\")\n  else if alert.message.isBlank then Left(\"Message is blank\")\n  else Right(alert)\nprintln(validateAlert(WeatherAlert(0, \"Severe storm\")))"}
{"id":"7a5c2f94-a71a-4979-9d5e-2165b96cdfb7","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def trySaveDeviceToken(token: String): scala.util.Try[String] =\n  scala.util.Try {\n    require(token.length > 10, \"Invalid device token\")\n    \"Token saved!\"\n  }\nval result = trySaveDeviceToken(\"123\")\nprintln(result)"}
{"id":"8dcb4f43-46d0-4f9f-8bab-3c4a2f83974e","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"sealed trait DispatchError\ncase object InvalidDispatchTime extends DispatchError\n\ndef scheduleDispatch(timeMinutes: Int): Either[DispatchError, String] =\n  if timeMinutes < 0 then Left(InvalidDispatchTime)\n  else Right(\"Dispatch scheduled\")\nprintln(scheduleDispatch(-5))"}
{"id":"d19abeda-3e0c-4d85-a49b-4abb6a4a47ce","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class UserProfile(email: String, active: Boolean)\ndef getActiveUserEmail(profile: UserProfile): Option[String] =\n  if profile.active then Some(profile.email) else None\nval maybeEmail = getActiveUserEmail(UserProfile(\"john@weather.com\", false))\nprintln(maybeEmail)"}
{"id":"95cd0739-1e33-4568-a0e9-a2152881e010","timestamp":1746100886505,"category":"throws","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def safeLoadWeatherFeed(feedId: Int): Either[String, String] =\n  if feedId <= 0 then Left(\"Invalid feed ID\")\n  else Right(\"Feed loaded successfully\")\nprintln(safeLoadWeatherFeed(-1))"}
{"id":"e3e250f1-30c2-4ec4-9ca2-f4811c0cafcb","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class PaymentTransaction(amount: Double, cardNumber: String)\nsealed trait TransactionValidationError\ncase object AmountTooHigh extends TransactionValidationError\ncase object InvalidCardFormat extends TransactionValidationError\n\ndef validateTransaction(txn: PaymentTransaction): Either[TransactionValidationError, PaymentTransaction] =\n  if txn.amount > 10000 then Left(AmountTooHigh)\n  else if !txn.cardNumber.matches(\"\\\\d{16}\") then Left(InvalidCardFormat)\n  else Right(txn)\n"}
{"id":"c0e3ad84-c173-4387-8de8-a3d10719117a","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class FraudulentTransactionException(msg: String) extends Exception(msg)\nobject FraudRiskAnalyzer {\n  def analyze(transactionId: String): Int = {\n    if transactionId.isEmpty then throw new FraudulentTransactionException(\"Transaction ID missing\")\n    else 22 // risk score\n  }\n}\nval riskLevel = try {\n  FraudRiskAnalyzer.analyze(\"ID1234\")\n} catch {\n  case e: FraudulentTransactionException => -1\n}"}
{"id":"6e25653c-c0b6-4496-94b3-cc91605e8ece","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait RuleViolation\ncase class BlacklistedCard(cardNumber: String) extends RuleViolation\ncase object InvalidTransactionAmount extends RuleViolation\n\ndef checkTransactionRules(card: String, amount: Double): Option[RuleViolation] =\n  if card == \"0000111122223333\" then Some(BlacklistedCard(card))\n  else if amount < 0 then Some(InvalidTransactionAmount)\n  else None\n"}
{"id":"d8ec4b01-fb7b-4345-84ee-ad00d69295b2","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class CardCheckException(details: String) extends Exception(details)\ndef isCardValid(cardNum: String): Boolean =\n  if cardNum.startsWith(\"9999\") then throw new CardCheckException(\"Card blacklisted\")\n  else true\ntry {\n  isCardValid(\"9999888877776666\")\n} catch {\n  case e: CardCheckException => false\n}\n"}
{"id":"0bde18b3-6cdd-4705-8be3-f4cbd121f96b","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\ndef parseAmount(input: String): Try[Double] =\n  Try(input.toDouble)\nval attemptedAmount = parseAmount(\"350.75\").getOrElse(0.0)\n"}
{"id":"51852a0a-986d-4f84-ae83-b72822afd8a6","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def checkForSuspiciousLocation(location: String): String = {\n  if location == \"Unknown\" then throw new Exception(\"Suspicious location detected\")\n  else \"Location OK\"\n}\nvar result = \"\"\ntry {\n  result = checkForSuspiciousLocation(\"Unknown\")\n} catch {\n  case _: Exception => result = \"Fraud Alert\"\n}\n"}
{"id":"df64d29d-2a0e-4b6b-b045-97548fcce673","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait RiskDetectionError\ncase object IPBlacklisted extends RiskDetectionError\ncase object DeviceCompromised extends RiskDetectionError\n\ndef analyzeDevice(ip: String, device: String): Either[RiskDetectionError, String] =\n  if ip == \"192.0.2.0\" then Left(IPBlacklisted)\n  else if device == \"stolen-phone\" then Left(DeviceCompromised)\n  else Right(\"Device cleared\")\n"}
{"id":"8361b21f-6358-4f46-a4d0-1e59a53d53ae","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class PaymentDeclinedException(reason: String) extends Exception(reason)\ndef processPayment(amount: Double): Boolean =\n  if amount > 5000 then throw new PaymentDeclinedException(\"Amount exceeds limit\")\n  else true\nvar success = false\ntry {\n  success = processPayment(7000)\n} catch {\n  case _: PaymentDeclinedException => success = false\n}\n"}
{"id":"e2269f98-5af4-4647-a58b-c00e6ad27b18","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\ndef decodeFraudScore(json: String): Try[Int] =\n  Try(json.toInt)\nval result = decodeFraudScore(\"abc\").recover { case _ => -1 }.get\n"}
{"id":"c3d472df-07ad-4346-b216-2022cba2ad20","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def verifyUserEmail(email: String): Boolean = {\n  if !email.contains(\"@\") then throw new Exception(\"Invalid email for verification\")\n  else true\n}\nval verified = try {\n  verifyUserEmail(\"test_at_domain.com\")\n} catch {\n  case _: Exception => false\n}\n"}
{"id":"c6abcbb7-79ae-4d35-8c2e-140fb8153c95","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait AlertGenerationError\ncase object ContactInfoMissing extends AlertGenerationError\ncase object NotificationFailure extends AlertGenerationError\n\ndef sendFraudAlert(contact: Option[String]): Either[AlertGenerationError, String] =\n  contact match\n    case Some(addr) => Right(s\"Alert sent to $addr\")\n    case None => Left(ContactInfoMissing)\n"}
{"id":"550ea411-8df3-40e8-b458-afb6a6bdf64b","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def escalateToManualReview(transactionId: String): Unit = {\n  if transactionId.length < 5 then throw new Exception(\"Transaction ID too short for review\")\n}\ntry {\n  escalateToManualReview(\"abc\")\n} catch {\n  case e: Exception => println(\"Manual review failed: \" + e.getMessage)\n}\n"}
{"id":"0ef49a59-5d05-474f-ae48-371133e864c6","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class PaymentInfo(userId: String, amount: Double)\nsealed trait FraudDetectionError\ncase object NegativeAmount extends FraudDetectionError\n\ndef detectFraud(payment: PaymentInfo): Either[FraudDetectionError, String] =\n  if payment.amount < 0 then Left(NegativeAmount)\n  else Right(\"No fraud detected\")\n"}
{"id":"45b3ec29-f431-4646-a816-14a1bfabb192","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class BankMismatchException(msg: String) extends Exception(msg)\ndef verifyBankAccount(userBank: String, recipientBank: String): Boolean =\n  if userBank != recipientBank then throw new BankMismatchException(\"Bank details do not match\")\n  else true\ntry {\n  verifyBankAccount(\"BANKA\", \"BANKB\")\n} catch {\n  case _: BankMismatchException => false\n}\n"}
{"id":"148173bc-b283-406c-be59-af2bf25b6e86","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\ncase class Event(eventType: String)\ndef safeEventParse(input: String): Try[Event] =\n  Try(Event(input))\nval parsed = safeEventParse(\"Payment\")\n"}
{"id":"ead2f391-bdf4-4848-9b6d-da215c93d19d","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def inspectTransactionHistory(history: List[Double]): String = {\n  if history.exists(_ > 100000) then throw new Exception(\"Unusual transaction detected\")\n  \"History OK\"\n}\nval verdict = try {\n  inspectTransactionHistory(List(120000, 2500, 3300))\n} catch {\n  case _: Exception => \"Manual inspection required\"\n}\n"}
{"id":"6cb04e48-de70-4f78-a92f-40ec092a7d72","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait VerificationError\ncase object PhoneMismatch extends VerificationError\n\ndef verifyPhoneNumber(submitted: String, expected: String): Either[VerificationError, String] =\n  if submitted == expected then Right(\"Phone verified\")\n  else Left(PhoneMismatch)\n"}
{"id":"0be7ee57-0f70-4ebe-ba5e-ebe56370c6e2","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def flagRepetitiveTransactions(ids: List[String]): String = {\n  if ids.distinct.length < ids.length then throw new Exception(\"Repetitive transactions detected\")\n  \"All transactions unique\"\n}\nval outcome = try {\n  flagRepetitiveTransactions(List(\"T1\", \"T2\", \"T1\"))\n} catch {\n  case _: Exception => \"Investigate fraud\"\n}\n"}
{"id":"e00c390e-449f-4b84-9a6d-ccd7f40c85a6","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\ndef safeFraudLabel(f: Double): Try[String] =\n  Try(if f > 0.8 then \"High Risk\" else \"Low Risk\")\nval fraudResult = safeFraudLabel(0.9)\n"}
{"id":"255ebfc5-8e1f-4c0e-85ad-d91a63120c30","timestamp":1746100916502,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class InvalidPaymentChannelException extends Exception(\"Unknown payment channel\")\ndef validatePaymentChannel(channel: String): Boolean =\n  if channel != \"card\" && channel != \"bank\" then throw new InvalidPaymentChannelException()\n  else true\ntry {\n  validatePaymentChannel(\"crypto\")\n} catch {\n  case _: InvalidPaymentChannelException => println(\"Channel not accepted.\")\n}\n"}
{"id":"b040abf2-9dfc-431c-a73e-b38e0b16b039","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class Payment(id: String, amount: Double, userId: String)\ncase class Transaction(id: String, status: String)\nsealed trait PaymentValidationError\ncase object SuspiciousLocation extends PaymentValidationError\ncase object ExceededAmountLimit extends PaymentValidationError\n\ndef validatePayment(payment: Payment): Either[PaymentValidationError, Transaction] =\n  if payment.amount > 10000 then Left(ExceededAmountLimit)\n  else if payment.userId == \"suspicious_user\" then Left(SuspiciousLocation)\n  else Right(Transaction(payment.id, \"validated\"))"}
{"id":"1116e4bb-fe37-4247-b233-8df713304dec","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class SuspiciousTransactionException(message: String) extends Exception(message)\n\ndef checkTransaction(transactionId: String, checksPassed: Boolean): Boolean =\n  if !checksPassed then\n    throw new SuspiciousTransactionException(s\"Transaction $transactionId failed checks.\")\n  true"}
{"id":"d4c3e6a0-d404-4f54-9a5c-94c62c118183","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait FraudDetectionError\ncase object PhoneMismatch extends FraudDetectionError\ncase object DeviceMismatch extends FraudDetectionError\n\ncase class PaymentInfo(phone: String, deviceId: String)\n\ndef analyzeDevice(payment: PaymentInfo): Either[FraudDetectionError, String] =\n  if payment.phone != \"123-456-7890\" then Left(PhoneMismatch)\n  else if payment.deviceId != \"trusted-device\" then Left(DeviceMismatch)\n  else Right(\"Device Trusted\")"}
{"id":"4e5d57ec-318d-4d43-bb0b-937f54dde8fb","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def analyzeGeoLocation(location: String): Boolean =\n  if location == \"unknown\" then\n    throw new RuntimeException(\"Possible GeoLocation Fraud Detected!\")\n  true"}
{"id":"d934f396-185c-434c-b6a0-2a715c41f70c","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseTransactionAmount(amountStr: String): Try[Double] =\n  Try(amountStr.toDouble)"}
{"id":"e18493be-7a03-48a6-a772-dbb5b90fbd48","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def raiseFraudAlert(userId: String, reason: String): Unit =\n  throw new IllegalStateException(s\"Alert for $userId: $reason\")\n\ntry\n  raiseFraudAlert(\"u1234\", \"Multiple rapid failed payments\")\ncatch\n  case e: IllegalStateException => println(e.getMessage)"}
{"id":"57982413-143f-4669-a3f7-13a175ab8818","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object CardBlacklisted extends PaymentError\ncase object LimitExceeded extends PaymentError\n\ndef checkBlacklist(cardNumber: String): Option[PaymentError] =\n  if cardNumber.startsWith(\"9999\") then Some(CardBlacklisted)\n  else None"}
{"id":"e262eca3-e7d3-41d1-a661-a56da1395ed5","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def processCustomerPayment(amount: Double): String =\n  try\n    if amount <= 0 then throw new IllegalArgumentException(\"Negative amount!\")\n    else if amount > 5000 then throw new Exception(\"Threshold exceeded!\")\n    \"Payment processed\"\n  catch\n    case ex: IllegalArgumentException => \"Invalid payment amount\"\n    case _: Exception => \"Fraud threshold breach\""}
{"id":"837c2677-c73c-4d87-95e2-ddc095bdea85","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safePaymentCheck(amount: Double): Try[String] =\n  Try {\n    require(amount > 0, \"Amount must be positive\")\n    \"Payment checked successfully\"\n  }"}
{"id":"7c89c35f-fe65-47c7-a3d6-525ce060a2f9","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"case class Card(number: String, expiry: Int)\n\ndef expireCardCheck(card: Card): String =\n  if card.expiry < 2024 then\n    throw new Exception(\"Card expired: Possible fraud attempt\")\n  \"Card valid\""}
{"id":"b662518b-ba09-430f-9e2f-31579aa27370","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait VerificationError\ncase object OTPMismatch extends VerificationError\ncase object OTPExpired extends VerificationError\n\ndef verifyOTP(otp: String, expected: String, isExpired: Boolean): Either[VerificationError, String] =\n  if isExpired then Left(OTPExpired)\n  else if otp != expected then Left(OTPMismatch)\n  else Right(\"OTP Verified\")"}
{"id":"fa7bf5f5-4459-43c8-86ca-4961e4149bce","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def reportUnusualActivity(accountId: String, riskScore: Int): Unit =\n  if riskScore > 80 then\n    throw new SecurityException(s\"Fraud risk detected for $accountId\")\n  ()"}
{"id":"4a64c7c5-141b-4f0e-b3a9-aff6fc55fb21","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait FraudFlaggingError\ncase object AccountFlagged extends FraudFlaggingError\ncase class FlaggingSuccess(flagId: String)\n\ndef flagAccount(accountId: String, suspicious: Boolean): Either[FraudFlaggingError, FlaggingSuccess] =\n  if suspicious then Left(AccountFlagged)\n  else Right(FlaggingSuccess(accountId))"}
{"id":"fc877a00-2d13-4560-8b49-186c698e929a","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def handleCardMismatch(cardHolderInput: String, record: String): String =\n  try\n    if cardHolderInput != record then throw new IllegalArgumentException(\"Card holder mismatch\")\n    \"Card holder verified\"\n  catch\n    case _: IllegalArgumentException => \"Mismatch detected: Possible fraud\""}
{"id":"6266e37b-8c5f-43aa-8435-36e81e8b1bb1","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeTokenGeneration(paymentId: String, active: Boolean): Try[String] =\n  Try {\n    if !active then sys.error(\"Inactive payment for token generation\")\n    s\"token-$paymentId\"\n  }"}
{"id":"194e639c-9675-4af9-833d-f564cedee268","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def updateRiskScore(userId: String, score: Int): Unit =\n  try\n    if score < 0 then throw new IllegalArgumentException(\"Negative risk score\")\n    else println(s\"Risk score updated for $userId\")\n  catch\n    case e: Exception => println(\"Error updating risk score: \" + e.getMessage)"}
{"id":"8c2f8267-0ecf-44dc-9962-d44cb849310d","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"sealed trait TransactionReviewError\ncase object HighVelocityFraud extends TransactionReviewError\ncase object AmountExceedsDailyLimit extends TransactionReviewError\ncase class SuccessfulReview(txnId: String)\n\ndef reviewTransaction(velocity: Int, amount: Double, txnId: String): Either[TransactionReviewError, SuccessfulReview] =\n  if velocity > 15 then Left(HighVelocityFraud)\n  else if amount > 2000 then Left(AmountExceedsDailyLimit)\n  else Right(SuccessfulReview(txnId))"}
{"id":"2bf94562-3020-4ff3-8657-7b5a64647414","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def exceptionIfSuspicious(activity: String): String =\n  if activity == \"unusual\" then\n    throw new IllegalAccessException(\"Suspicious user activity detected!\")\n  \"Activity normal\""}
{"id":"766de02f-85cb-405c-9253-9b8c72219d46","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"case class PaymentAttempt(id: String, retries: Int)\ncase class TooManyFailedAttempts(message: String) extends Exception(message)\n\ndef checkRetries(attempt: PaymentAttempt): String =\n  if attempt.retries >= 3 then throw new TooManyFailedAttempts(\"Card locked due to retries\")\n  \"Payment attempt allowed\""}
{"id":"1cbe0ed0-3691-40fa-add1-982ad085a3bb","timestamp":1746100941591,"category":"throws","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class AccountVerificationError(message: String)\n\ndef validateAccountEmail(email: String): Either[AccountVerificationError, String] =\n  if !email.contains(\"@\") then Left(AccountVerificationError(\"Invalid email format\"))\n  else Right(\"Account email verified\")"}
{"id":"6d551649-8b3e-4ed6-ab68-9d5924f3bc81","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"case class ImageNotFound(imageId: String) extends Exception(s\"Image $imageId not found\")\ndef loadDicomImage(imageId: String): Array[Byte] = {\n  if (imageId == \"\") throw new ImageNotFound(imageId)\n  Array.fill(10)(0.toByte)\n}"}
{"id":"63223202-f79a-4aed-b5b0-36baa41ea830","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def parsePatientMeta(data: String): Map[String, String] = {\n  try {\n    val parts = data.split(\";\")\n    parts.map(_.split(\":\"))\n      .map { arr =>\n        if (arr.length != 2) throw new IllegalArgumentException(\"Malformed data\")\n        arr(0) -> arr(1)\n      }.toMap\n  } catch {\n    case e: Exception => throw new RuntimeException(\"Failed to parse patient metadata\", e)\n  }\n}"}
{"id":"fedccc08-76b0-4431-a79b-d8936b3fa13c","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def displayImageInViewer(imageBytes: Array[Byte]): Unit = {\n  if (imageBytes.length == 0)\n    throw new IllegalArgumentException(\"Cannot display: empty image data\")\n  println(\"Rendering MRI scan...\")\n}"}
{"id":"84a5f462-4218-45d5-bbd5-9352dddff9df","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class PatientInfoMissing(msg: String) extends Exception(msg)\ndef fetchPatientSummary(patientId: String): String = {\n  if (patientId == null) throw new PatientInfoMissing(\"Patient ID is missing\")\n  \"Patient summary\"\n}"}
{"id":"f5ac72a3-961d-4a4d-b826-d46629183aeb","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def loadSegmentationMask(path: String): Array[Int] = {\n  try {\n    if (!path.endsWith(\".seg\")) throw new IllegalArgumentException(\"Invalid segmentation mask file\")\n    Array(1,2,3,4,5)\n  } catch {\n    case e: Exception => throw e\n  }\n}"}
{"id":"c5ed82c9-160d-4c46-8831-5c5201a27010","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def updateViewingWindow(level: Int, width: Int): Unit = {\n  if (level < 0 || width < 0)\n    throw new IllegalArgumentException(\"Window parameters cannot be negative\")\n}"}
{"id":"e9cb6718-25ff-4c9b-9987-9a855be01be8","timestamp":1746100962932,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object DicomServer {\n  def connect(url: String): Unit = {\n    if (url == null || !url.startsWith(\"dicom://\")) throw new Exception(\"Invalid DICOM server URL\")\n    println(\"Connected to DICOM server\")\n  }\n}"}
{"id":"99fc26d5-e2d1-498d-8274-f961bdcf05d8","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getSeriesDescription(seriesId: String): String = {\n  try {\n    if (seriesId.isEmpty)\n      throw new Exception(\"Series ID not provided\")\n    \"Series: Head MRI\"\n  } catch {\n    case e: Exception =>\n      println(\"Error: \" + e.getMessage)\n      \"Unknown series\"\n  }\n}"}
{"id":"ad3a0531-d520-46c3-8a21-8d6abd3170c6","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def show3DRendering(volume: Option[Array[Short]]): Unit = {\n  volume match {\n    case Some(arr) if arr.isEmpty =>\n      throw new Exception(\"3D volume data is empty\")\n    case Some(_) => println(\"3D volume rendering...\")\n    case None => throw new Exception(\"No 3D volume data supplied\")\n  }\n}"}
{"id":"76d1835b-6be3-4222-97dd-4afe8a436005","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def saveImageSnapshot(snapshot: Array[Byte], filePath: String): Boolean = {\n  try {\n    if (!filePath.endsWith(\".png\"))\n      throw new Exception(\"Snapshot file path must end with .png\")\n    true\n  } catch {\n    case _ : Exception => false\n  }\n}"}
{"id":"614c1023-552e-4158-ad1c-f3fa7355d970","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait ImagingError\ncase object DicomFileMissing extends ImagingError\ncase class CorruptImageFile(path: String) extends ImagingError\ndef readDicomFile(path: String): Either[ImagingError, Array[Byte]] = {\n  if (!path.endsWith(\".dcm\")) Left(DicomFileMissing)\n  else if (path.contains(\"corrupt\")) Left(CorruptImageFile(path))\n  else Right(Array.fill(10)(1.toByte))\n}"}
{"id":"62a6eb92-3142-4952-84cb-2f65f1a0e6fe","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef decodePixelData(data: Array[Byte]): Try[Array[Int]] = Try {\n  if (data.isEmpty) throw new RuntimeException(\"Empty pixel data\")\n  data.map(_.toInt)\n}"}
{"id":"a991e1bb-e381-4e76-b0cd-63bed292d736","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait PatientDataError\ncase object PatientRecordAbsent extends PatientDataError\ndef retrievePatientRecord(patientUid: String): Either[PatientDataError, String] = {\n  if (patientUid.nonEmpty) Right(\"Patient demographic data\")\n  else Left(PatientRecordAbsent)\n}"}
{"id":"2038f1fb-92e3-416a-a80f-28b9e385d275","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def parseAnnotationJson(jsonStr: String): Option[Map[String, String]] = {\n  if (jsonStr.trim.isEmpty) None\n  else Some(Map(\"annotation\" -> \"Lesion Segment\"))\n}"}
{"id":"ec294398-3c09-40b2-8797-21682d0ef94b","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait ExportError\ncase object FileAlreadyExists extends ExportError\ndef exportDicomSeries(seriesId: String, path: String): Either[ExportError, Unit] = {\n  if (path.endsWith(\"existing.dcm\")) Left(FileAlreadyExists)\n  else Right(println(\"Exported DICOM series\"))\n}"}
{"id":"27d8e075-a558-4a05-81ea-02aaaee8d4dc","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"import scala.util.Try\ndef safeResizeVolume(volume: Array[Short], newSize: Int): Try[Array[Short]] = Try {\n  if (newSize <= 0) throw new IllegalArgumentException(\"Invalid volume size\")\n  Array.fill(newSize)(0.toShort)\n}"}
{"id":"bba0f024-214d-4eb1-80c4-59c802df9b5f","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait MaskApplyError\ncase object MaskNotFound extends MaskApplyError\ndef applySegmentationMask(mask: Option[Array[Int]], imageSize: Int): Either[MaskApplyError, Array[Int]] =\n  mask match {\n    case Some(arr) if arr.length == imageSize => Right(arr)\n    case Some(_) => Left(MaskNotFound)\n    case None => Left(MaskNotFound)\n  }"}
{"id":"4e9b88d1-f3b4-47c0-9caa-0131cfaffc15","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def safeGetSeries(series: List[String], idx: Int): Option[String] =\n  if (idx >= 0 && idx < series.length) Some(series(idx))\n  else None"}
{"id":"9a7bf7c5-7b73-417a-9a4a-6fd83c955c01","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"import scala.util.Try\ndef tryLoadThumbnail(imageBytes: Array[Byte]): Try[Array[Byte]] = Try {\n  if (imageBytes.length < 10) throw new Exception(\"Image data insufficient for thumbnail\")\n  imageBytes.take(10)\n}"}
{"id":"17c40ec8-15fd-49da-8b45-478563d2d61b","timestamp":1746100962933,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait WindowAdjustError\ncase object InvalidWindowParameters extends WindowAdjustError\ndef adjustWindow(level: Int, width: Int): Either[WindowAdjustError, (Int, Int)] = {\n  if (level >= 0 && width > 0) Right((level, width))\n  else Left(InvalidWindowParameters)\n}"}
{"id":"80777719-cd7a-4af8-b860-ec6e37846ab4","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class DicomLoadError(message: String)\ndef loadDicomFile(filename: String): Either[DicomLoadError, Array[Byte]] =\n  if filename.endsWith(\".dcm\") then\n    Right(Array.fill(256)(0.toByte))\n  else\n    Left(DicomLoadError(s\"Unsupported format for file: $filename\"))"}
{"id":"395ab86f-d32f-4c24-9d48-82aead58c6eb","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def loadVolume(path: String): Array[Byte] =\n  if path.isEmpty then throw new IllegalArgumentException(\"Path cannot be empty\")\n  if !path.endsWith(\".nii\") then throw new RuntimeException(\"Only Nifti files supported\")\n  Array.tabulate(512)(i => (i % 256).toByte)"}
{"id":"eee89fc7-5ba8-4443-8807-9f2d49575ff5","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait SegmentationError\ncase object MaskNotFound extends SegmentationError\ncase object InvalidMaskDimensions extends SegmentationError\n\ndef readSegmentationMask(file: String): Either[SegmentationError, Array[Array[Int]]] =\n  if file.contains(\"nomask\") then Left(MaskNotFound)\n  else if !file.endsWith(\".mask\") then Left(InvalidMaskDimensions)\n  else Right(Array.ofDim[Int](128,128))"}
{"id":"d1ce9a80-29b7-4603-8e07-965c13049725","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getSlice(imageSlices: Seq[Array[Int]], index: Int): Array[Int] =\n  try\n    imageSlices(index)\n  catch case ex: IndexOutOfBoundsException =>\n    throw new RuntimeException(\"Requested image slice does not exist\")"}
{"id":"8a9b299b-07c9-479f-8a1f-111e24b2d099","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait ViewerError\ncase object InvalidZoomLevel extends ViewerError\n\ncase class ImageView(state: String)\ndef setZoom(level: Double): Either[ViewerError, ImageView] =\n  if level > 0.1 && level < 10.0 then Right(ImageView(s\"Zoom:$level\"))\n  else Left(InvalidZoomLevel)"}
{"id":"376aaede-894c-4e0a-a7ab-47837350c302","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def showImage(imageOpt: Option[Array[Byte]]): Array[Byte] =\n  imageOpt match\n    case Some(img) => img\n    case None => throw new NoSuchElementException(\"No image data to display.\")"}
{"id":"091c4d26-c83d-4839-850c-185bfa29f091","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"import scala.util.Try\ndef parseVoxelValue(str: String): Try[Int] =\n  scala.util.Try(str.toInt)"}
{"id":"42bce820-0f9e-44a0-95e1-28b0fc57f75a","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def adjustWindowLevel(pixels: Array[Int], window: Int, level: Int): Array[Int] =\n  if window < 1 then throw new RuntimeException(\"Invalid window: Must be positive\")\n  pixels.map(v => (v - level + window / 2).max(0))"}
{"id":"1fa17b27-2ab1-43c2-9c8b-9f2606be7d9e","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class ImageReadError(detail: String)\ndef readPatientImage(patientId: String): Either[ImageReadError, Array[Short]] =\n  if patientId.nonEmpty then Right(Array.fill(1024)(42.toShort))\n  else Left(ImageReadError(\"Missing patient ID.\"))"}
{"id":"b4fc8817-3863-4e01-8e74-1f7bcf2a7b24","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def parseDicomHeader(header: String): Map[String, String] =\n  try\n    header.split(\";\").map(_.split(\":\")).map(arr => arr(0) -> arr(1)).toMap\n  catch case _: Exception => throw new RuntimeException(\"Corrupted DICOM header.\")"}
{"id":"bfd1b57b-af3a-4f3c-989e-c8db2d8851f3","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait RenderingError\ncase class ColorMapUnsupported(mode: String) extends RenderingError\n\ndef renderColorMap(data: Array[Int], mode: String): Either[RenderingError, Array[Int]] =\n  if mode == \"grayscale\" then Right(data)\n  else Left(ColorMapUnsupported(mode))"}
{"id":"8aafb07a-f3bb-44f5-aa93-8c6dbe54d83b","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def displaySeries(series: List[Array[Byte]], idx: Int): Array[Byte] =\n  try\n    if idx < 0 || idx >= series.length then throw new IndexOutOfBoundsException(\"Invalid series index\")\n    series(idx)\n  catch case e: Exception => throw new RuntimeException(\"Could not display series\")"}
{"id":"6cb18caa-fa60-426e-887f-637904ab0d8a","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class MetadataParsingError(desc: String)\ndef parseImageMetadata(tags: Map[String, String]): Either[MetadataParsingError, Int] =\n  tags.get(\"Resolution\") match\n    case Some(value) => Either.cond(value.forall(_.isDigit), value.toInt, MetadataParsingError(\"Non-numeric resolution\"))\n    case None => Left(MetadataParsingError(\"Missing Resolution tag\"))"}
{"id":"28ddbe20-925f-4c8c-bdd8-b6e88297cbc7","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def saveLabeledImage(path: String, labelMask: Array[Boolean]): Unit =\n  if path.isEmpty then throw new IllegalArgumentException(\"Path cannot be empty for saving.\")\n  if labelMask.isEmpty then throw new RuntimeException(\"Empty label mask.\")\n  ()"}
{"id":"f2d789fa-b9b8-41e0-bd1c-70dd11af07e8","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class FileOpenError(file: String)\ndef openDicomDirectory(folder: String): Either[FileOpenError, List[String]] =\n  if folder == \"/valid\" then Right(List(\"image1.dcm\", \"image2.dcm\"))\n  else Left(FileOpenError(folder))"}
{"id":"fa5dfd07-1087-4d33-bee1-36aff7097461","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def normalizeImageValues(values: Array[Int]): Array[Double] =\n  try\n    val min = values.min\n    val max = values.max\n    values.map(v => (v - min).toDouble / (max - min))\n  catch case ex: Exception => throw new RuntimeException(\"Image normalization failed.\")"}
{"id":"5dcfc7dc-f16a-425b-b3f4-043bf3840c4c","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"import scala.util.{Try,Success,Failure}\ndef tryLoadNifti(filename: String): Try[Array[Float]] =\n  scala.util.Try(Array.fill(256)(0.75f))"}
{"id":"51f8ce57-1a0f-42fe-a441-9ac4432fa410","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def removeArtifact(image: Array[Int], artifactId: Int): Array[Int] =\n  if artifactId < 0 then throw new IllegalArgumentException(\"Invalid artifact ID.\")\n  image.filter(_ != artifactId)"}
{"id":"200ba16c-44cc-447c-9b86-b45a9bb5e9dc","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class OverlayError(reason: String)\ndef applyOverlay(base: Array[Int], overlay: Option[Array[Int]]): Either[OverlayError, Array[Int]] =\n  overlay match\n    case Some(mask) if mask.length == base.length =>\n      Right(base.zip(mask).map((b, o) => b + o))\n    case _ => Left(OverlayError(\"Invalid overlay mask.\"))"}
{"id":"eadb4296-1710-4392-80ee-206477fc9106","timestamp":1746100987261,"category":"throws","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"sealed trait ThumbnailError\ncase object EmptyImageArray extends ThumbnailError\n\ndef generateThumbnails(images: Seq[Array[Byte]]): Either[ThumbnailError, Seq[Array[Byte]]] =\n  if images.nonEmpty then Right(images.take(5))\n  else Left(EmptyImageArray)"}
{"id":"52390393-fa16-4583-9040-d8ade927fd24","timestamp":1746101028322,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkCreationRequest(amount: BigDecimal, currency: String)\nsealed trait PaymentLinkError\ncase object InvalidAmount extends PaymentLinkError\ncase object UnsupportedCurrency extends PaymentLinkError\n\ndef validatePaymentLinkRequest(req: PaymentLinkCreationRequest): Either[PaymentLinkError, PaymentLinkCreationRequest] =\n  if req.amount <= 0 then Left(InvalidAmount)\n  else if req.currency != \"USD\" then Left(UnsupportedCurrency)\n  else Right(req)"}
{"id":"0a45135d-1b5b-48c1-b674-0bd04f183345","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkCreationException(message: String) extends Exception(message)\n\nobject PaymentLinkService {\n  def createPaymentLink(amount: BigDecimal, currency: String): String = {\n    if (amount <= 0)\n      throw new PaymentLinkCreationException(\"Amount must be positive.\")\n    if (currency != \"USD\")\n      throw new PaymentLinkCreationException(\"Only USD is supported.\")\n    s\"link-for-$amount-$currency\"\n  }\n}"}
{"id":"132eda20-15d2-4bcc-8bd0-976e4abbcc19","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkValidationError\ncase object PaymentLinkIdNotFound extends PaymentLinkValidationError\ncase object PaymentLinkExpired extends PaymentLinkValidationError\n\ncase class PaymentLinkDetails(id: String, valid: Boolean)\n\ndef getActivePaymentLink(id: String): Either[PaymentLinkValidationError, PaymentLinkDetails] =\n  if id.isEmpty then Left(PaymentLinkIdNotFound)\n  else if id == \"expired\" then Left(PaymentLinkExpired)\n  else Right(PaymentLinkDetails(id, true))"}
{"id":"035dfd9e-a8ff-4c9c-b9a4-ded9031c715c","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkNotFoundException extends Exception(\"Payment link not found.\")\n\nobject PaymentLinkRepository {\n  def fetchPaymentLink(linkId: String): PaymentLinkDetails = {\n    if (linkId.isEmpty)\n      throw new PaymentLinkNotFoundException\n    else\n      PaymentLinkDetails(linkId, true)\n  }\n}"}
{"id":"bf419865-d83a-44a0-a78c-10eb286b9f81","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkProcessingError\ncase object DuplicatePaymentLink extends PaymentLinkProcessingError\ncase object InvalidPaymentLinkStatus extends PaymentLinkProcessingError\n\ncase class PaymentLink(id: String, status: String)\n\ndef processPaymentLink(link: PaymentLink): Either[PaymentLinkProcessingError, String] =\n  link.status match\n    case \"active\"  => Right(s\"Processed ${link.id}\")\n    case \"pending\" => Left(InvalidPaymentLinkStatus)\n    case _ if link.id == \"duplicate\" => Left(DuplicatePaymentLink)\n    case _ => Right(s\"Handled ${link.id}\")"}
{"id":"9907d1e9-06f6-455d-bf9f-b05f1b624c68","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class DuplicatePaymentLinkException extends Exception\n\nobject PaymentLinkProcessor {\n  def process(link: PaymentLink): String = {\n    if (link.id == \"duplicate\")\n      throw new DuplicatePaymentLinkException\n    if (link.status == \"invalid\")\n      throw new RuntimeException(\"Invalid payment link status.\")\n    s\"Processed ${link.id}\"\n  }\n}"}
{"id":"e05adb89-9398-4801-87fe-f2657ca71c14","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safelyGeneratePaymentLinkId(userId: String): Try[String] =\n  Try {\n    if userId.isEmpty then throw new IllegalArgumentException(\"User ID missing.\")\n    \"plink-\" + userId.take(8)\n  }"}
{"id":"e2be8993-8aa0-4cf9-89e9-c08459593d02","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkIdGenerator {\n  def generate(userId: String): String = {\n    try {\n      if (userId == null)\n        throw new NullPointerException(\"User ID is null.\")\n      else\n        \"plink-\" + userId.take(8)\n    } catch {\n      case e: Exception => \"error-invalid-user-id\"\n    }\n  }\n}"}
{"id":"d4e8732f-8b51-478c-8cde-2e8a82e5fb3f","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkAccessError\ncase class PaymentLinkUnauthorized(userId: String) extends PaymentLinkAccessError\n\ncase class PaymentLinkInfo(linkId: String, owner: String)\n\ndef verifyAccess(link: PaymentLinkInfo, userId: String): Either[PaymentLinkAccessError, PaymentLinkInfo] =\n  if link.owner == userId then Right(link)\n  else Left(PaymentLinkUnauthorized(userId))"}
{"id":"a56c3b96-b904-491f-8633-b974cbbcf8ef","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkAccessVerifier {\n  def verify(link: PaymentLinkInfo, userId: String): PaymentLinkInfo = {\n    if (link.owner != userId)\n      throw new SecurityException(\"User not authorized to access this payment link\")\n    link\n  }\n}"}
{"id":"accf5e6a-c467-4d34-9df6-452b11b39746","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def findPaymentLinkByCode(code: String): Option[PaymentLinkDetails] =\n  if code.nonEmpty then Some(PaymentLinkDetails(code, true))\n  else None"}
{"id":"4c3f5754-9d3e-433f-9e35-4259944093fe","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkFinder {\n  def findByCode(code: String): PaymentLinkDetails = {\n    if (code.isEmpty)\n      throw new NoSuchElementException(\"Payment link code missing.\")\n    PaymentLinkDetails(code, true)\n  }\n}"}
{"id":"ed80c01f-8ee3-466f-b147-f383087184ef","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkUpdateError\ncase object PaymentLinkLocked extends PaymentLinkUpdateError\n\ncase class PaymentLinkUpdateRequest(id: String, amount: BigDecimal)\n\ndef updatePaymentLink(req: PaymentLinkUpdateRequest, locked: Boolean): Either[PaymentLinkUpdateError, PaymentLinkUpdateRequest] =\n  if locked then Left(PaymentLinkLocked)\n  else Right(req)"}
{"id":"23750ac9-a38d-464d-80d1-4f6e28d0c8ab","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkUpdater {\n  def update(req: PaymentLinkUpdateRequest, locked: Boolean): PaymentLinkUpdateRequest = {\n    if (locked)\n      throw new IllegalStateException(\"Payment link is locked.\")\n    req\n  }\n}"}
{"id":"4f8c6ab9-5502-426c-91b0-8a9921acb6ff","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def parsePaymentLinkRequest(json: String): Option[PaymentLinkCreationRequest] =\n  if json.startsWith(\"{\\\"amount\\\"\") then Some(PaymentLinkCreationRequest(100, \"USD\"))\n  else None"}
{"id":"6e19dd27-f92e-45d1-9044-556df26cc408","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkRequestParser {\n  def parse(json: String): PaymentLinkCreationRequest = {\n    if (!json.startsWith(\"{\\\"amount\\\"\"))\n      throw new IllegalArgumentException(\"Invalid payment link request JSON.\")\n    PaymentLinkCreationRequest(100, \"USD\")\n  }\n}"}
{"id":"172dec35-c7ea-4915-81e0-6c888405743f","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safelyDeletePaymentLink(link: PaymentLinkDetails): Try[String] =\n  Try {\n    if !link.valid then throw new RuntimeException(\"Link invalid.\")\n    s\"Deleted ${link.id}\"\n  }"}
{"id":"7fa2358d-69d7-466b-adc0-5b79261ff5cf","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkDeleter {\n  def delete(link: PaymentLinkDetails): String = {\n    try {\n      if (!link.valid)\n        throw new RuntimeException(\"Payment link is invalid.\")\n      s\"Deleted ${link.id}\"\n    } catch {\n      case _: Exception => \"Could not delete payment link.\"\n    }\n  }\n}"}
{"id":"77b8046a-8a70-419f-bcf5-2b068b13879a","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def markPaymentLinkAsExpired(linkId: String): Option[String] =\n  if linkId == \"\" then None\n  else Some(s\"Marked $linkId as expired\")"}
{"id":"7ca96ce0-6fc3-4729-8aaa-1089b7b81ca3","timestamp":1746101028323,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkExpiryMarker {\n  def mark(linkId: String): String = {\n    if (linkId == \"\")\n      throw new IllegalArgumentException(\"Payment link ID cannot be empty.\")\n    s\"Marked $linkId as expired\"\n  }\n}"}
{"id":"5397887d-497a-4864-b67b-8b7fc8a1eb85","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLinkId(id: String)\ncase class PaymentLinkNotFound(id: PaymentLinkId)\ncase class PaymentLinkDeactivated(id: PaymentLinkId)\nsealed trait PaymentLinkError\nobject PaymentLinkError {\n  case class NotFound(id: PaymentLinkId) extends PaymentLinkError\n  case class Deactivated(id: PaymentLinkId) extends PaymentLinkError\n}\ndef fetchActivePaymentLink(id: PaymentLinkId): Either[PaymentLinkError, String] = {\n  if id.id == \"404\" then Left(PaymentLinkError.NotFound(id))\n  else if id.id == \"999\" then Left(PaymentLinkError.Deactivated(id))\n  else Right(s\"PaymentLinkInfo#${id.id}\")\n}"}
{"id":"2493c816-658e-46a2-90cf-410c7c069d98","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkMissingException(val linkId: String) extends Exception(s\"Payment Link $linkId not found\")\ndef getPaymentLinkSecret(linkId: String): String = {\n  if(linkId.isEmpty) throw new PaymentLinkMissingException(linkId)\n  s\"secret-for-$linkId\"\n}\ndef retrievePaymentSecret(linkId: String): String = {\n  try {\n    getPaymentLinkSecret(linkId)\n  } catch {\n    case e: PaymentLinkMissingException => \"DEFAULT_SECRET\"\n  }\n}"}
{"id":"1d78e634-9118-4855-8d3f-7dfdd965296a","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkValidationError\nobject PaymentLinkValidationError {\n  case object InvalidAmount extends PaymentLinkValidationError\n  case object InvalidCurrency extends PaymentLinkValidationError\n}\ndef validatePaymentLinkInput(amount: BigDecimal, currency: String): Either[PaymentLinkValidationError, Unit] = {\n  if amount <= 0 then Left(PaymentLinkValidationError.InvalidAmount)\n  else if currency.length != 3 then Left(PaymentLinkValidationError.InvalidCurrency)\n  else Right(())\n}"}
{"id":"5a7cccb6-c590-4a89-862e-65db4c8bbbcf","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class CurrencyMismatchException(cur: String) extends Exception(s\"Unsupported currency: $cur\")\ndef checkCurrency(linkId: String, currency: String): String = {\n  if(currency != \"USD\" && currency != \"EUR\")\n    throw new CurrencyMismatchException(currency)\n  s\"Currency $currency is valid for PaymentLink $linkId\"\n}"}
{"id":"b74a4d8c-5bde-4c45-a216-17e2b61c14c9","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"import scala.util.Try\ncase class PaymentLink(id: String)\ndef tryToActivatePaymentLink(link: PaymentLink): Try[PaymentLink] = Try {\n  if link.id.startsWith(\"deactivated\") then\n    throw new IllegalStateException(\"Cannot activate deactivated link\")\n  else PaymentLink(link.id)\n}"}
{"id":"a2989eb7-6648-416d-bebc-ea31ee503859","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def getPaymentAmount(linkId: String): BigDecimal = {\n  if(linkId == \"unknown\")\n    throw new RuntimeException(\"Payment link not found\")\n  else 25.00\n}\ndef safeAmountRetrieval(linkId: String): Option[BigDecimal] = {\n  try Some(getPaymentAmount(linkId))\n  catch {\n    case _: RuntimeException => None\n  }\n}"}
{"id":"9d3d3463-4e84-4ad6-a039-69270bfbfffa","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkManagerError\ncase object InvalidStatusTransition extends PaymentLinkManagerError\ndef updatePaymentLinkStatus(current: String, next: String): Either[PaymentLinkManagerError, String] = {\n  if current == \"closed\" && next == \"active\" then Left(InvalidStatusTransition)\n  else Right(next)\n}"}
{"id":"3a4e4d62-8a82-4bed-b297-bd9b30518eeb","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkInactiveException extends Exception(\"Payment link is inactive\")\ndef processLink(linkId: String, active: Boolean): Boolean = {\n  if(!active) throw new PaymentLinkInactiveException\n  true\n}"}
{"id":"1133fa32-5a30-4e49-a3cc-d3dc1106af53","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"import scala.util.Try\ncase class PaymentLinkInfo(id: String, active: Boolean)\ndef parsePaymentLinkInfo(payload: String): Try[PaymentLinkInfo] = Try {\n  val parts = payload.split(\":\")\n  if parts.length != 2 then throw new IllegalArgumentException(\"Malformed payload\")\n  PaymentLinkInfo(parts(0), parts(1) == \"true\")\n}"}
{"id":"5a65fada-f68d-421e-9511-34a095201b32","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def deactivatePaymentLink(linkId: String): Unit = {\n  if linkId == \"blocked\" then throw new IllegalAccessException(\"Blocked link\")\n}\ndef tryDeactivate(linkId: String): Boolean = {\n  try {\n    deactivatePaymentLink(linkId)\n    true\n  } catch {\n    case _: IllegalAccessException => false\n  }\n}"}
{"id":"b323c58d-722d-45eb-b4c0-262e62d008fd","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkOperationError\nobject PaymentLinkOperationError {\n  case object AlreadyDeactivated extends PaymentLinkOperationError\n}\ndef safelyDeactivateLink(isActive: Boolean): Either[PaymentLinkOperationError, Boolean] = {\n  if !isActive then Left(PaymentLinkOperationError.AlreadyDeactivated)\n  else Right(true)\n}"}
{"id":"97ebc8d7-0c36-4a6e-a78c-9ddacb5cba9f","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class ExpiredPaymentLinkException extends Exception(\"Link has expired\")\ndef fetchLinkOrThrow(id: String, expired: Boolean): String = {\n  if expired then throw new ExpiredPaymentLinkException\n  s\"Link-$id\"\n}"}
{"id":"e5e06425-4936-4f87-b9c9-15622f8fb8d5","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def findPaymentLinkById(linkId: String): Option[String] = {\n  if linkId.nonEmpty && linkId.forall(_.isDigit) then Some(s\"PL-$linkId\")\n  else None\n}\ndef getOwnerFromLinkId(linkId: String): Option[String] = {\n  findPaymentLinkById(linkId).map(_ => \"owner-123\")\n}"}
{"id":"1aa0a928-44ce-4b79-b59c-b14d313f2ce2","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def requireValidToken(token: String): Unit = {\n  if token != \"wix-secure\" then throw new SecurityException(\"Invalid token\")\n}\ndef validateAndProcess(token: String): Boolean = {\n  try {\n    requireValidToken(token)\n    true\n  } catch {\n    case _: SecurityException => false\n  }\n}"}
{"id":"f104fbfe-2ab7-4777-a957-09b1dd7a91cd","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait PaymentLinkCreationError\nobject PaymentLinkCreationError {\n  case object EmptyTitle extends PaymentLinkCreationError\n  case object TitleTooLong extends PaymentLinkCreationError\n}\ndef createNewPaymentLink(title: String): Either[PaymentLinkCreationError, String] = {\n  if title.isEmpty then Left(PaymentLinkCreationError.EmptyTitle)\n  else if title.length > 60 then Left(PaymentLinkCreationError.TitleTooLong)\n  else Right(s\"link:${title.hashCode}\")\n}"}
{"id":"846bb147-90d3-4973-9eac-7a72d6867121","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def deletePaymentLink(linkId: String): Unit = {\n  if linkId == \"default\" then throw new Exception(\"Cannot delete reserved link\")\n}\ndef performLinkDeletion(linkId: String): Boolean = {\n  try {\n    deletePaymentLink(linkId)\n    true\n  } catch {\n    case _: Exception => false\n  }\n}"}
{"id":"8bb74840-dc8f-46b0-83c3-94edb5430723","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef readPaymentLinkAmount(link: String): Try[BigDecimal] = Try {\n  if link == \"faulty\" then throw new ArithmeticException(\"Corrupted amount\")\n  BigDecimal(\"10.99\")\n}\ndef recoverAmount(link: String): BigDecimal = {\n  readPaymentLinkAmount(link).getOrElse(BigDecimal(0))\n}"}
{"id":"8f1acce0-6b8a-4afe-9ebb-d0e70aeeb485","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def unsafeEncodeLink(linkId: String): String = {\n  if linkId.contains(\"/\") then throw new IllegalArgumentException(\"Illegal char in id\")\n  java.util.Base64.getEncoder.encodeToString(linkId.getBytes)\n}\ndef safeEncodeLink(linkId: String): String = {\n  try\n    unsafeEncodeLink(linkId)\n  catch {\n    case _: IllegalArgumentException => \"INVALID_ID\"\n  }\n}"}
{"id":"3c56e2cb-9c84-4182-bc90-6856b7c94fd1","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"sealed trait LinkPublishingError\nobject LinkPublishingError {\n  case object InvalidLocale extends LinkPublishingError\n}\ndef publishPaymentLink(locale: String): Either[LinkPublishingError, String] = {\n  if locale.nonEmpty && (locale == \"en-US\" || locale == \"fr-FR\") then Right(\"published\")\n  else Left(LinkPublishingError.InvalidLocale)\n}"}
{"id":"12b1aca5-9fe9-4ca5-8bd1-e72ebb325a8b","timestamp":1746101055579,"category":"throws","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkAccessDeniedException extends Exception(\"No access to this Payment Link\")\ndef accessPaymentLink(linkId: String, isAdmin: Boolean): String = {\n  if !isAdmin then throw new PaymentLinkAccessDeniedException\n  s\"Access granted to $linkId\"\n}"}
{"id":"9e7fe274-ba96-4fdc-a9c9-b300540bfaea","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait TranslationError\ncase object UnsupportedLanguage extends TranslationError\ncase object EmptyInput extends TranslationError\ncase class NetworkError(reason: String) extends TranslationError\n\ndef translateText(text: String, languageCode: String): Either[TranslationError, String] =\n  if text.isEmpty then Left(EmptyInput)\n  else if languageCode != \"en\" && languageCode != \"fr\" then Left(UnsupportedLanguage)\n  else Right(s\"[$languageCode] $text\")"}
{"id":"66f38ae0-ce65-4e9e-9a16-061fbcff43c5","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def translateOrThrow(text: String, targetLanguage: String): String =\n  if text == null || text.isEmpty then throw new IllegalArgumentException(\"Input text is empty\")\n  else if targetLanguage != \"en\" && targetLanguage != \"es\" then throw new RuntimeException(\"Language not supported\")\n  else s\"[$targetLanguage] $text\""}
{"id":"09619273-a522-4142-b582-275a88919735","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeParseConfidence(confidenceStr: String): Try[Double] =\n  Try(confidenceStr.toDouble)"}
{"id":"e71e1761-d4b6-4300-9259-af60c9a7951f","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def getTranslation(text: String, lang: String): String =\n  try {\n    if lang == \"de\" then throw new UnsupportedOperationException(\"German not available\")\n    s\"Translated $text to $lang\"\n  } catch {\n    case e: UnsupportedOperationException => \"Error: \" + e.getMessage\n  }"}
{"id":"ff1110ab-7ec9-4575-838c-c6270054de98","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ChatBotError\ncase class DetectionError(details: String) extends ChatBotError\ncase class TranslationServiceError(msg: String) extends ChatBotError\n\ncase class DetectedLanguage(code: String)\n\ndef detectLanguage(text: String): Either[ChatBotError, DetectedLanguage] =\n  if text.trim.isEmpty then Left(DetectionError(\"No text provided\"))\n  else Right(DetectedLanguage(\"en\"))"}
{"id":"9c386d4e-a969-4eff-892a-79c1571529f8","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def fetchLanguageMetadata(lang: String): String =\n  try {\n    if lang == \"zz\" then throw new IllegalArgumentException(\"Invalid language code\")\n    s\"Metadata for language: $lang\"\n  } catch {\n    case e: IllegalArgumentException => \"Failed: \" + e.getMessage\n  }"}
{"id":"4612c75a-5559-41b3-96d7-6021ff36484d","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class TranslationResult(original: String, translated: String)\n\ndef performTranslation(input: String): Option[TranslationResult] =\n  if input.forall(_.isLetter) then\n    Some(TranslationResult(input, s\"Translation of $input\"))\n  else\n    None"}
{"id":"e995243c-d351-485a-a609-64f4093b70ba","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def parseLocaleOrThrow(info: String): String =\n  try {\n    if info.length != 2 then throw new RuntimeException(\"Locale string must be two characters long\")\n    info.toUpperCase\n  } catch {\n    case e: RuntimeException => \"Error: \" + e.getMessage\n  }"}
{"id":"a047acb3-705b-48e0-8108-390b4788d21b","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait BotValidationError\ncase object MissingInput extends BotValidationError\ncase object TextTooLong extends BotValidationError\n\ndef validateUserMessage(message: String): Either[BotValidationError, String] =\n  if message.isEmpty then Left(MissingInput)\n  else if message.length > 200 then Left(TextTooLong)\n  else Right(message)"}
{"id":"e0043241-d1d4-497e-9874-acb965dee0f7","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def getSupportedLanguages(m: String): List[String] =\n  try {\n    if m == \"\" then throw new Exception(\"Input required\")\n    List(\"en\", \"fr\", \"es\")\n  } catch {\n    case e: Exception => List(e.getMessage)\n  }"}
{"id":"b651dfdf-2e2e-4b10-9be3-5a5a11be09ce","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class LanguageTag(tag: String)\ndef extractLanguageTag(line: String): Option[LanguageTag] =\n  val tagPattern = \"[a-z]{2}\".r\n  tagPattern.findFirstIn(line).map(LanguageTag(_))"}
{"id":"54657a3d-31f7-41f3-9650-dda035beb841","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def chatBotResponse(input: String): String =\n  try {\n    if input == null then throw new NullPointerException(\"Null user input\")\n    \"Chatbot: \" + input.reverse\n  } catch {\n    case _: NullPointerException => \"Oops! Something went wrong.\"\n  }"}
{"id":"670beba8-c8b3-4011-aab8-8799b0bd6737","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def mapTextToLanguage(text: String, code: String): Option[String] =\n  if code == \"en\" || code == \"fr\" then Some(s\"[$code] $text\")\n  else None"}
{"id":"79154c1a-ec99-405b-bdb2-5c6fc5001f12","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def languageDetectionOrThrow(sentence: String): String =\n  if sentence.trim == \"\" then\n    throw new IllegalArgumentException(\"Empty input; cannot detect language.\")\n  else if sentence.endsWith(\"?\") then\n    \"en\"\n  else\n    \"fr\""}
{"id":"7e130bb6-1aa8-49f9-af80-e4b6f28eaef8","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef attemptTranslation(s: String): Try[String] =\n  Try {\n    if s.forall(_.isDigit) then throw new Exception(\"Input cannot be only digits\")\n    \"Translated: \" + s\n  }"}
{"id":"113c44aa-b47d-407b-b066-0e51669b9acb","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def replyWithDetectedLanguage(msg: String): String =\n  try {\n    if msg.contains(\"bonjour\") then \"fr\"\n    else if msg == \"\" then throw new RuntimeException(\"No message to detect\")\n    else \"en\"\n  } catch {\n    case e: Exception => s\"Detection failed: ${e.getMessage}\"\n  }"}
{"id":"25cf6da1-c34c-4014-997e-e70713a3eac7","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ResponseError\ncase class LengthExceeded(max: Int) extends ResponseError\ncase object MalformedMessage extends ResponseError\n\ndef safeReply(message: String): Either[ResponseError, String] =\n  if message.isEmpty then Left(MalformedMessage)\n  else if message.length > 150 then Left(LengthExceeded(150))\n  else Right(s\"Reply: $message\")"}
{"id":"6750195e-94a3-4531-9942-3a94720b412c","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def fetchTranslationOrRaise(sentence: String, lang: String): String =\n  if sentence == null then throw new NullPointerException(\"Sentence is null\")\n  else if lang == \"jp\" then throw new UnsupportedOperationException(\"Japanese unsupported\")\n  else s\"[$lang] $sentence\""}
{"id":"ddedf342-93e4-4c31-8daa-7f008e1c1e92","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def upperCaseOrNone(s: String): Option[String] =\n  if s.exists(_.isLower) then Some(s.toUpperCase) else None"}
{"id":"96b0a5cc-56f1-45c0-93eb-05807937285a","timestamp":1746101079921,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def responseWithErrorHandling(input: String): String =\n  try {\n    if input.nonEmpty then \"Reponse: OK\"\n    else throw new Exception(\"Empty input\")\n  } catch {\n    case e: Exception => \"Error: \" + e.getMessage\n  }"}
{"id":"e048885d-6469-4943-ac9e-2fe558ab2630","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object Translator {\n  def translateText(text: String, targetLang: String): String = {\n    if (text.isEmpty) {\n      throw new IllegalArgumentException(\"Input text cannot be empty\")\n    }\n    if (targetLang != \"en\" && targetLang != \"es\") {\n      throw new UnsupportedOperationException(\"Target language not supported\")\n    }\n    s\"[$targetLang] $text\"\n  }\n}"}
{"id":"47ac8648-e84f-4b0d-ba2c-e6f5a9726ac5","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def detectLanguage(phrase: String): String = {\n  try {\n    if (phrase.contains(\"¿\")) \"es\"\n    else if (phrase.matches(\".*[a-zA-Z].*\")) \"en\"\n    else throw new RuntimeException(\"Unable to detect language\")\n  } catch {\n    case ex: RuntimeException => \"unknown\"\n  }\n}"}
{"id":"974ca015-5482-4671-b8a8-0e43c970c34d","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class InputValidationException(msg: String) extends Exception(msg)\ndef validateQuery(query: String): Unit = {\n  if (query.trim.isEmpty) {\n    throw new InputValidationException(\"Query cannot be blank\")\n  }\n}"}
{"id":"e8ff4c0b-85c6-4a83-8ffa-c811afccfe31","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def parseUserMessage(message: String): (String, String) = {\n  try {\n    val parts = message.split(\":\", 2)\n    if (parts.length != 2) {\n      throw new IllegalArgumentException(\"Message must contain ':' delimiter\")\n    }\n    (parts(0).trim, parts(1).trim)\n  } catch {\n    case ex: Exception => (\"unknown\", \"invalid\")\n  }\n}"}
{"id":"509893de-5f9e-40dd-ba24-e0b903ffc13f","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def getSupportedLanguages(): List[String] = {\n  try {\n    List(\"en\", \"es\", \"fr\", \"de\")\n  } catch {\n    case _: Exception => throw new Exception(\"Failed to retrieve supported languages\")\n  }\n}"}
{"id":"fb1197e9-e52e-45df-9b2e-c8054a85301a","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object TranslatorLogger {\n  def recordError(error: Throwable): Unit = {\n    println(\"Translation bot error: \" + error.getMessage)\n  }\n  def translateWithLogging(sentence: String, language: String): String = {\n    try {\n      if (sentence.isEmpty) throw new Exception(\"Sentence missing\")\n      s\"[$language] $sentence\"\n    } catch {\n      case ex: Exception =>\n        recordError(ex)\n        \"Translation failed\"\n    }\n  }\n}"}
{"id":"9ab22e72-1a57-4ed9-ba63-453e47e11ac5","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def getBotResponse(input: String): String = {\n  try {\n    if (input.toLowerCase == \"hello\") \"¡Hola!\"\n    else if (input.toLowerCase == \"bye\") \"¡Adiós!\"\n    else throw new Exception(\"Unknown input\")\n  } catch {\n    case ex: Exception => ex.getMessage\n  }\n}"}
{"id":"77bb2aef-6cf4-4dfd-ad2c-0efa77e03a2b","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def handleTranslationRequest(request: String, lang: String): String = {\n  if (lang == \"xx\") {\n    throw new RuntimeException(\"Language xx is not supported.\")\n  } else {\n    s\"[$lang] $request\"\n  }\n}"}
{"id":"3cde612e-7278-472f-a140-acc09f9edb1d","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"def getLanguageCode(country: String): String = {\n  try {\n    country match {\n      case \"Spain\" => \"es\"\n      case \"USA\" => \"en\"\n      case _ => throw new Exception(\"Country not recognized\")\n    }\n  } catch {\n    case e: Exception => \"unknown\"\n  }\n}"}
{"id":"796b795d-4f4c-4080-a305-b8a844f3e8aa","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class BotConnectionException(msg: String) extends Exception(msg)\ndef sendMessageToTranslationBot(msg: String): String = {\n  if (msg.startsWith(\"error\")) {\n    throw new BotConnectionException(\"Connection failed for message: \" + msg)\n  }\n  \"Bot received: \" + msg\n}"}
{"id":"54463715-c89e-43b8-97fb-20552f3435af","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait TranslationError\ncase object NoInputProvided extends TranslationError\ncase object LanguageNotSupported extends TranslationError\ncase class SuccessResponse(translation: String)\ndef performTranslation(text: String, target: String): Either[TranslationError, SuccessResponse] = {\n  if (text.isEmpty) Left(NoInputProvided)\n  else if (target != \"en\" && target != \"es\") Left(LanguageNotSupported)\n  else Right(SuccessResponse(s\"[$target] $text\"))\n}"}
{"id":"5c52ac93-eeca-4fd2-97e5-fb5669128d92","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ParseMessageError\ncase object MissingDelimiter extends ParseMessageError\ncase object EmptyMessage extends ParseMessageError\ndef parseBotMessage(msg: String): Either[ParseMessageError, (String, String)] = {\n  if (msg.isEmpty) Left(EmptyMessage)\n  else {\n    msg.split(\":\", 2).toList match {\n      case user :: text :: Nil => Right((user.trim, text.trim))\n      case _ => Left(MissingDelimiter)\n    }\n  }\n}"}
{"id":"efb92b2f-97f7-4560-a063-84325847246c","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def optionDetectLanguage(sentence: String): Option[String] = {\n  if (sentence.matches(\"[a-zA-Z]+\")) Some(\"en\")\n  else if (sentence.contains(\"¿\")) Some(\"es\")\n  else None\n}"}
{"id":"905880fd-2e9e-40da-91e0-f7b6d997481f","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ResponseBuilderError\ncase object MissingContent extends ResponseBuilderError\ndef buildBotResponse(content: Option[String]): Either[ResponseBuilderError, String] = {\n  content match {\n    case Some(value) => Right(s\"Bot: $value\")\n    case None => Left(MissingContent)\n  }\n}"}
{"id":"e78027cc-eca9-4577-8677-e4b4a71fa179","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def safeTranslate(input: String, language: String): Option[String] = {\n  if (input.nonEmpty && (language == \"en\" || language == \"es\")) Some(s\"Translated: $input to $language\")\n  else None\n}"}
{"id":"3ce2f2f1-76b6-4058-af3c-cc33610613bf","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"import scala.util.Try\ncase class ChatUser(name: String)\ndef safeGetUsername(params: Map[String, String]): Try[ChatUser] = Try {\n  val username = params.getOrElse(\"username\", throw new Exception(\"Missing username\"))\n  ChatUser(username)\n}"}
{"id":"92b3caf6-ce56-4c01-8bc6-c2df2f389ae3","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ChatBotApiError\ncase object ApiTimeout extends ChatBotApiError\ncase object InvalidApiKey extends ChatBotApiError\ndef checkApiKey(key: String): Either[ChatBotApiError, String] = {\n  if (key == \"abc123\") Right(\"Key valid\")\n  else Left(InvalidApiKey)\n}"}
{"id":"08337e7f-8ac8-4b68-8a0d-9477fa330c4d","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"import scala.util.Try\ncase class PhraseDetected(language: String)\ndef tryDetectLanguage(text: String): Try[PhraseDetected] = Try {\n  if (text.contains(\"holla\")) PhraseDetected(\"es\")\n  else if (text.contains(\"hello\")) PhraseDetected(\"en\")\n  else throw new Exception(\"Detection failed\")\n}"}
{"id":"93ff8482-6be5-4567-a5b1-627d85cf9fac","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def composeTranslations(sentence: String, languages: List[String]): Either[String, List[String]] = {\n  if (sentence.isEmpty) Left(\"No sentence provided\")\n  else Right(languages.map(lang => s\"[$lang] $sentence\"))\n}"}
{"id":"72a41abd-a382-4522-bee6-43eccea1bd4d","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"sealed trait ConnectionError\ncase object Disconnected extends ConnectionError\ndef connectToTranslationBot(isConnected: Boolean): Either[ConnectionError, String] = {\n  if (isConnected) Right(\"Connected to bot\")\n  else Left(Disconnected)\n}"}
{"id":"0e487ad4-20d0-4f2f-a802-5419c97fd009","timestamp":1746101107069,"category":"throws","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"def extractLanguageFromMessage(msg: String): Option[String] = {\n  val knownLanguages = Set(\"en\", \"es\")\n  msg.split(\" \").find(knownLanguages.contains)\n}"}
{"id":"789fbdbb-5c0d-44b3-9a6b-b50ec5f7c1a4","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class PowerReading(timestamp: Long, kilowatts: Double)\nsealed trait DashboardError\ncase object NoReadingsFound extends DashboardError\n\ndef latestReading(readings: List[PowerReading]): Either[DashboardError, PowerReading] =\n  readings.sortBy(_.timestamp).lastOption.toRight(NoReadingsFound)"}
{"id":"1b7c3c68-3e24-4258-b97c-73ff7e143974","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ConsumptionRecord(appliance: String, usageKwh: Double)\nsealed trait ValidationError\ncase class NegativeUsage(appliance: String) extends ValidationError\n\ndef validateUsage(record: ConsumptionRecord): Either[ValidationError, ConsumptionRecord] =\n  if record.usageKwh < 0 then Left(NegativeUsage(record.appliance)) else Right(record)"}
{"id":"00cbe23a-c10f-4b7c-afe0-ded1d23e7b98","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object DashboardExceptions:\n  class DeviceNotFoundException(name: String) extends Exception(s\"Device '$name' not found\")\n\ndef getDevicePowerUsage(device: String, usages: Map[String, Double]): Double =\n  if usages.contains(device) then usages(device)\n  else throw new DashboardExceptions.DeviceNotFoundException(device)"}
{"id":"bfe62440-697d-4e65-a51b-0d10c176331c","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def averageDailyConsumption(records: List[Double]): Double =\n  if records.isEmpty then throw new IllegalArgumentException(\"No records for calculation\")\n  else records.sum / records.size\n\ntry\n  val avg = averageDailyConsumption(List())\ncatch\n  case e: IllegalArgumentException => println(s\"Error: ${e.getMessage}\")"}
{"id":"549a0b9b-cbda-4db8-896e-2d198528d6ac","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseMeterValue(reading: String): Try[Double] =\n  Try(reading.toDouble)"}
{"id":"084cc318-83cf-4087-8919-eff3c85e59b4","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait AnalysisError\ncase object EmptyHistory extends AnalysisError\ncase class SpikeDetected(value: Double) extends AnalysisError\n\ndef checkForSpike(history: List[Double]): Either[AnalysisError, Double] =\n  history match\n    case Nil => Left(EmptyHistory)\n    case values if values.max > 5000 => Left(SpikeDetected(values.max))\n    case _ => Right(history.max)"}
{"id":"a7b99b24-dfcc-46a0-ab19-31b63cd59ce7","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def calculateConsumptionIncrease(prev: Double, curr: Double): Double =\n  if prev < 0 || curr < 0 then throw new RuntimeException(\"Negative values not allowed\")\n  (curr - prev) / prev\n\ntry\n  println(calculateConsumptionIncrease(-10, 150))\ncatch\n  case e: Exception => println(e.getMessage)"}
{"id":"fdd8e308-1be7-4154-937a-7f088894d206","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def retrieveBuildingEnergyData(id: String): String =\n  id match\n    case \"B001\" => \"Building B001 consumption data\"\n    case _ => throw new Exception(\"Unknown building ID\")"}
{"id":"ced9e0af-b321-4a82-b712-8d80eea8a1db","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait MeterError\ncase object MeterOffline extends MeterError\ncase class InvalidMeterData(details: String) extends MeterError\ncase class Meter(value: Double)\n\ndef safelyReadMeter(raw: String, online: Boolean): Either[MeterError, Meter] =\n  if !online then Left(MeterOffline)\n  else\n    raw.toDoubleOption match\n      case Some(v) => Right(Meter(v))\n      case None => Left(InvalidMeterData(raw))"}
{"id":"39cb5314-06f1-4492-9b81-a52e2e33370b","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def sumSectionConsumptions(sections: Map[String, Double]): Double =\n  if sections.isEmpty then throw new NoSuchElementException(\"No sections provided\")\n  sections.values.sum"}
{"id":"2628505d-cec1-4ed6-ac69-365e088c06c5","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def computeDailyCost(usage: Double, rate: Double): Option[Double] =\n  if usage < 0 || rate < 0 then None else Some(usage * rate)"}
{"id":"2f3c0497-e971-4a9e-b7c2-2dd075a2f3be","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait GenerationError\ncase object NoSolarPanels extends GenerationError\n\ndef calculateSolarGeneration(panels: Int, output: Double): Either[GenerationError, Double] =\n  if panels == 0 then Left(NoSolarPanels) else Right(panels * output)"}
{"id":"b41fb1ab-16ed-4be8-8ccb-f5f9488bd659","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def fetchHourlyRecord(records: Map[Int, Double], hour: Int): Double =\n  records.get(hour) match\n    case Some(v) => v\n    case None => throw new IllegalArgumentException(\"Hour not recorded\")"}
{"id":"9744d657-6d88-4000-af9c-b32fbf7975b9","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def earliestOutage(outages: List[Long]): Long =\n  if outages.isEmpty then throw new Exception(\"No outages recorded\")\n  outages.min\n\ntry\n  println(earliestOutage(Nil))\ncatch\n  case e: Exception => println(e.getMessage)"}
{"id":"62e8520e-1a00-4b0a-934d-f8d00b507198","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDivideEnergy(a: Double, b: Double): Try[Double] =\n  Try(a / b)"}
{"id":"7ece914e-ee26-4878-b4bc-6b4d20629c0d","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ApplianceUsage(appliance: String, value: Double)\n\ndef findUsageByName(usages: List[ApplianceUsage], name: String): Option[ApplianceUsage] =\n  usages.find(_.appliance == name)"}
{"id":"be8c8cae-41e1-4c10-9101-5abb9cb6f366","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def meterInputAsDouble(input: String): Double =\n  try input.toDouble\n  catch case e: NumberFormatException => throw new Exception(\"Invalid meter value\")"}
{"id":"0ca596b8-4adc-4379-8a8e-23389b35a7bf","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait AlertValidationError\ncase object NullMessage extends AlertValidationError\ncase object TooShortMessage extends AlertValidationError\n\ndef validateAlertMessage(msg: String): Either[AlertValidationError, String] =\n  if msg == null then Left(NullMessage)\n  else if msg.length < 4 then Left(TooShortMessage)\n  else Right(msg)"}
{"id":"72eb57ba-fe8c-4b8b-9cac-52f21bd4068f","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def transformEnergyUnit(value: Double, from: String, to: String): Double =\n  (from, to) match\n    case (\"kWh\", \"Wh\") => value * 1000\n    case (\"Wh\", \"kWh\") => value / 1000\n    case _ => throw new UnsupportedOperationException(\"Unsupported energy unit\")"}
{"id":"915e7731-4ed2-4a4d-af0e-24d0b05fd958","timestamp":1746101139426,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def parseReadingOrZero(raw: String): Double =\n  try raw.toDouble\n  catch case _ : Throwable => 0.0"}
{"id":"596f5ad4-30ee-4779-9ed2-bc93244f49e4","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait EnergyDashboardError\ncase object DeviceNotFound extends EnergyDashboardError\ncase object InvalidConsumptionValue extends EnergyDashboardError\ncase class FailedToStoreReading(reason: String) extends EnergyDashboardError\n\ndef addEnergyReading(deviceId: String, consumption: Double): Either[EnergyDashboardError, String] =\n  if deviceId.isEmpty then Left(DeviceNotFound)\n  else if consumption < 0 then Left(InvalidConsumptionValue)\n  else Right(\"Reading successfully added\")"}
{"id":"5fd1f0f3-9484-4426-8225-5c0a8a72e971","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def retrieveTotalConsumption(userId: String): Double = {\n  if (userId == null || userId == \"\") throw new IllegalArgumentException(\"User ID is required\")\n  if (userId == \"blocked_user\") throw new RuntimeException(\"User access blocked\")\n  124.7\n}"}
{"id":"c68438a2-bfb7-41c7-a8ea-dec1c7822b24","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ConsumptionQueryError(message: String)\n\ndef fetchConsumptionForDate(date: String): Option[Double] =\n  if date.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\") then Some(45.3)\n  else None"}
{"id":"a4f7f622-6a48-427c-8f4a-79224d799e7c","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def recordSmartMeterData(meterId: String, reading: Double): String = {\n  if (reading < 0) throw new IllegalArgumentException(\"Negative reading not allowed\")\n  if (meterId == \"\") throw new NoSuchElementException(\"Meter ID required\")\n  \"Data recorded\"\n}"}
{"id":"f6a2aa1c-b8e8-46cb-aef0-095b37d59286","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait DeviceError\ncase object MeterOffline extends DeviceError\ncase object MeterMalfunction extends DeviceError\n\ndef checkMeterState(meterId: String): Either[DeviceError, String] =\n  if meterId == \"offline123\" then Left(MeterOffline)\n  else if meterId == \"fail999\" then Left(MeterMalfunction)\n  else Right(\"Meter operational\")"}
{"id":"0f0086de-c061-4376-bd1c-f48ce1985357","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def loadBuildingConsumption(buildingId: String): Double = {\n  try {\n    if (buildingId.length < 3) throw new IllegalArgumentException(\"Invalid building Id\")\n    372.2\n  } catch {\n    case _: IllegalArgumentException => 0.0\n  }\n}"}
{"id":"06879ca1-2ff3-4eec-814f-43cda4bccbc3","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseSensorValue(value: String): Try[Double] =\n  Try(value.toDouble)"}
{"id":"95129584-5ca1-47de-ad65-ce016818de84","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getEnergyCost(rate: Double, usage: Double): Double = {\n  if (rate < 0.0) throw new NumberFormatException(\"Invalid rate\")\n  if (usage < 0.0) throw new ArithmeticException(\"Usage cannot be negative\")\n  rate * usage\n}"}
{"id":"b28e7c8e-e3d0-4cd3-8896-c54499502c0d","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class UserValidationError(reason: String)\n\ndef validateUserAccess(userId: String): Either[UserValidationError, Boolean] =\n  if userId == \"suspended\" then Left(UserValidationError(\"User suspended\"))\n  else Right(true)"}
{"id":"539e46e1-e8ae-4320-ba2f-e070f2fe616b","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def monitorGridStatus(region: String): String = {\n  try {\n    if (region == \"down_zone\") throw new IllegalStateException(\"Grid down\")\n    \"Grid online\"\n  } catch {\n    case e: IllegalStateException => \"Error: \" + e.getMessage\n  }\n}"}
{"id":"c3b0585f-6ea0-4a6f-aa77-cd2a9b07fa7f","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"sealed trait DashboardCalculationError\ncase object DivisionByZero extends DashboardCalculationError\ncase object NoReadingsAvailable extends DashboardCalculationError\n\ndef calculateAverageEnergy(readings: List[Double]): Either[DashboardCalculationError, Double] =\n  if readings.isEmpty then Left(NoReadingsAvailable)\n  else if readings.length == 0 then Left(NoReadingsAvailable)\n  else Right(readings.sum / readings.size)\n"}
{"id":"6bf05186-3ec2-499d-815e-a2296dd80236","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def updateTariffPlan(planId: String): String = {\n  if (planId == null) throw new NullPointerException(\"Plan Id is null\")\n  if (planId == \"OBSOLETE\") throw new UnsupportedOperationException(\"Tariff plan obsolete\")\n  \"Tariff updated\"\n}"}
{"id":"9c84346d-d389-461f-9eea-880581a304e7","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def parseReadingInput(input: String): Option[Double] =\n  try Some(input.trim.toDouble)\n  catch case _: NumberFormatException => None"}
{"id":"96fa0fb2-dc73-44e9-b8fd-52bfd9215581","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def storeUserPreferences(userId: String, preferences: Map[String, String]): Boolean = {\n  try {\n    if (preferences.contains(\"illegal\")) throw new RuntimeException(\"Illegal Preference\")\n    true\n  } catch {\n    case _: RuntimeException => false\n  }\n}"}
{"id":"ef9c6039-b8c6-417d-88a8-92e0cafc8a67","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"import scala.util.Try\ncase class MeterProcessingError(msg: String)\n\ndef processMeterReading(reading: String): Either[MeterProcessingError, Double] =\n  Try(reading.toDouble).toEither.left.map(_ => MeterProcessingError(\"Invalid meter reading\"))"}
{"id":"ffd76d73-7b11-44ec-80e6-f96f7aa34561","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def refreshEnergySourcesStatus(sources: List[String]): Unit = {\n  sources.foreach(source => {\n    if (source == \"disconnected\") throw new Exception(\"Source disconnected\")\n  })\n}"}
{"id":"e4d3135a-7ee0-455e-affd-cba9c764d93d","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def fetchAlertStatus(alertId: String): Option[String] =\n  if alertId == \"expired\" then None else Some(\"Active\")"}
{"id":"cfd69479-742b-4a1b-9828-d0ab142e2ae4","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def persistConsumptionReport(reportId: String): String = {\n  try {\n    if (reportId.endsWith(\"ERR\")) throw new IllegalStateException(\"Invalid report Id\")\n    \"Report persisted\"\n  } catch {\n    case ex: IllegalStateException => \"Failed: \" + ex.getMessage\n  }\n}"}
{"id":"c495618f-69f4-4b05-aad1-0ee727726b0e","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDivisionEnergy(numerator: Double, denominator: Double): Try[Double] =\n  Try(numerator/denominator)"}
{"id":"c33ca592-628e-4851-9a89-ccd8d6301fe7","timestamp":1746101163712,"category":"throws","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def connectSensor(sensorId: String): Boolean = {\n  try {\n    if (sensorId == \"blocked_sensor\") throw new Exception(\"Sensor connection failed\")\n    true\n  } catch {\n    case _: Exception => false\n  }\n}"}
{"id":"49b5858c-64d5-4dde-b537-1537eed70619","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Ballot(id: String, choices: List[String])\nsealed trait BallotValidationError\ncase object MissingVoterId extends BallotValidationError\ncase object NoChoicesSelected extends BallotValidationError\n\ndef validateBallot(ballot: Ballot): Either[BallotValidationError, Ballot] =\n  if ballot.id.isEmpty then Left(MissingVoterId)\n  else if ballot.choices.isEmpty then Left(NoChoicesSelected)\n  else Right(ballot)"}
{"id":"7811433e-1cc3-4888-8c8a-a794849943b6","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class InvalidTallyDataException(msg: String) extends Exception(msg)\n\nobject VoteTallying {\n  def tallyVotes(results: Map[String, Int]): Int = {\n    if (results.values.exists(_ < 0))\n      throw new InvalidTallyDataException(\"Negative vote counts detected\")\n    results.values.sum\n  }\n}"}
{"id":"8f33873d-ece1-4bea-a721-ff89604653fb","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait VoterLookupError\ncase object VoterNotRegistered extends VoterLookupError\ncase class DatabaseError(details: String) extends VoterLookupError\n\ndef findVoter(voterId: String, voterRegistry: Map[String, String]): Either[VoterLookupError, String] =\n  voterRegistry.get(voterId)\n    .toRight(VoterNotRegistered)"}
{"id":"923950b2-396f-4b00-8c5c-66c33ca6b011","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def parseVotes(voteString: String): Option[Int] =\n  try voteString.toIntOption \n  catch case _: Exception => None"}
{"id":"76c7a169-9f47-4920-bee3-fbba84006319","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef readBallotCount(input: String): Try[Int] =\n  Try(input.toInt)\n\nval result = readBallotCount(\"22\").map(_ + 1)"}
{"id":"9ee5e4bb-0975-4e1a-982b-b7ae9ff404d3","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def computeTallyPercent(totalVotes: Int, candidateVotes: Int): Double =\n  if (totalVotes == 0) throw new ArithmeticException(\"Total votes cannot be zero\")\n  else (candidateVotes.toDouble / totalVotes) * 100"}
{"id":"f755b9f1-6476-4d5c-a94c-e2d192030e2b","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait AuthenticationError\ncase object MissingToken extends AuthenticationError\ncase object InvalidToken extends AuthenticationError\n\ndef authenticateUser(token: Option[String]): Either[AuthenticationError, String] =\n  token match\n    case Some(validToken) if validToken.nonEmpty => Right(validToken)\n    case Some(_)                                => Left(InvalidToken)\n    case None                                   => Left(MissingToken)"}
{"id":"30438f49-46d0-41f2-ba24-4403826a7d7e","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"object AuditTrailVerifier {\n  def verifyAuditTrail(auditEntries: List[String]): Boolean = {\n    try {\n      require(auditEntries.nonEmpty, \"Audit trail is empty\")\n      auditEntries.forall(_.startsWith(\"ENTRY:\"))\n    } catch {\n      case _: IllegalArgumentException => false\n    }\n  }\n}"}
{"id":"11d3742b-c8f1-4964-b0f2-b9b29188b38d","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait VoteRecordingError\ncase object BallotAlreadyRecorded extends VoteRecordingError\ncase class DatabaseWriteFailure(reason: String) extends VoteRecordingError\n\ndef recordVote(ballotId: String, alreadyRecorded: Set[String]): Either[VoteRecordingError, String] =\n  if alreadyRecorded.contains(ballotId) then\n    Left(BallotAlreadyRecorded)\n  else\n    Right(\"Vote accepted\")"}
{"id":"0a015b7a-1264-4823-bc05-6f2ab68052d7","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class BallotFormatException(msg: String) extends Exception(msg)\n\ndef decodeBallot(data: String): Ballot = {\n  if (!data.contains(\",\"))\n    throw new BallotFormatException(\"Ballot data must contain a comma separator\")\n  val parts = data.split(\",\")\n  Ballot(parts(0), parts.tail.toList)\n}"}
{"id":"0b89e5f4-3d25-4902-8715-f5bbb966aaf5","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safelyDecryptVote(encrypted: String, decryptionKey: String): Try[String] =\n  Try {\n    if (decryptionKey != \"secret\") throw new Exception(\"Invalid Key\")\n    encrypted.reverse\n  }"}
{"id":"8cb4601c-37a6-4ff3-a411-4cc838aae1cd","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def publishResults(results: Map[String, Int]): Unit = {\n  try {\n    require(results.nonEmpty, \"No results to publish\")\n    println(s\"Results: $results\")\n  } catch {\n    case e: IllegalArgumentException => println(\"Publish failed: \" + e.getMessage)\n  }\n}"}
{"id":"f05c7455-dbcd-43b1-8f9a-f83a0145c1a9","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait TallyingError\ncase object EmptyVoteList extends TallyingError\ncase object InvalidVote extends TallyingError\n\ndef computeMajority(votes: List[String]): Either[TallyingError, String] =\n  if votes.isEmpty then Left(EmptyVoteList)\n  else\n    val grouped = votes.groupBy(identity).view.mapValues(_.size)\n    grouped.maxByOption(_._2).map(_._1).toRight(InvalidVote)"}
{"id":"a71af7c9-55f0-40be-9c44-cfe44a3084cb","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class CountingError(msg: String) extends Exception(msg)\ndef findHighestVote(candidates: Map[String, Int]): String = {\n  if (candidates.isEmpty) throw new CountingError(\"No candidates to evaluate\")\n  candidates.maxBy(_._2)._1\n}"}
{"id":"e9cb10cf-bef5-4515-8045-b0da049ee88c","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def safeAddBallotToList(newBallot: Ballot, ballots: List[Ballot]): Option[List[Ballot]] =\n  if ballots.exists(_.id == newBallot.id) then None\n  else Some(newBallot :: ballots)"}
{"id":"09d25054-9883-4d8a-8cd6-b7d7603eea35","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"object DecryptionChecker {\n  def checkDecryption(ciphertext: String, key: String): String = {\n    try {\n      if (key.isEmpty) throw new Exception(\"Missing decryption key\")\n      ciphertext.reverse\n    } catch {\n      case e: Exception => \"Failed: \" + e.getMessage\n    }\n  }\n}"}
{"id":"e62a88a2-060a-42ee-862b-9556bf9069de","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait ElectionResultError\ncase object NoWinningCandidate extends ElectionResultError\n\ndef getWinningCandidate(counts: Map[String, Int]): Either[ElectionResultError, String] =\n  counts.maxByOption(_._2).map(_._1).toRight(NoWinningCandidate)"}
{"id":"72e77aad-ab4a-461c-9434-067564eabb4b","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def verifyBallotIntegrity(ballot: Ballot): Ballot = {\n  if (ballot.choices.distinct.size != ballot.choices.size)\n    throw new IllegalArgumentException(\"Duplicate selections on ballot\")\n  ballot\n}"}
{"id":"846dc1fe-24aa-47bc-af3a-e1a5c585c3c0","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeParseCount(input: String): Try[Int] = Try(input.trim.toInt)\nval validCount = safeParseCount(\"007\").getOrElse(0)"}
{"id":"b4a103b0-5539-4e00-87f5-663f207483fa","timestamp":1746101188874,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def appendToResultsLog(log: StringBuilder, message: String): Unit = {\n  try {\n    log.append(message).append(\"\\n\")\n  } catch {\n    case _: Exception => ()\n  }\n}"}
{"id":"557fac29-a102-4dc5-9bb2-1d2189ca8732","timestamp":1746102563209,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Ballot(candidate: String)\nsealed trait TallyError\ncase object InvalidBallot extends TallyError\n\ndef countVote(ballot: Ballot): Either[TallyError, Int] =\n  if ballot.candidate.isEmpty then Left(InvalidBallot)\n  else Right(1)"}
{"id":"c0534ebf-8eb2-4ceb-9fc7-efe6065f16ba","timestamp":1746102563209,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class InvalidVoterException(message: String) extends Exception(message)\n\ndef recordVoterParticipation(voterId: String, participated: Boolean): Unit =\n  if !participated then throw new InvalidVoterException(\"Voter did not participate\")"}
{"id":"e157c9c7-b822-4987-9699-30e7fa2b1381","timestamp":1746102563209,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait VoteProcessingError\ncase object SignatureMissing extends VoteProcessingError\ncase object SignatureInvalid extends VoteProcessingError\n\ndef verifyVoteSignature(signature: Option[String]): Either[VoteProcessingError, Unit] =\n  signature match\n    case None => Left(SignatureMissing)\n    case Some(sig) if sig.length < 10 => Left(SignatureInvalid)\n    case Some(_) => Right(())"}
{"id":"ddc752a3-724f-429c-9c36-3ab0066c4583","timestamp":1746102563209,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def parseCandidate(candidateField: String): String =\n  try\n    if candidateField.trim.isEmpty then throw new Exception(\"Candidate name missing\")\n    candidateField.trim\n  catch\n    case ex: Exception => \"UnknownCandidate\""}
{"id":"0fbf3264-2805-4b34-88bb-af6748178932","timestamp":1746102563209,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseVoteCount(countStr: String): Try[Int] =\n  Try(countStr.toInt)"}
{"id":"df0dea37-e499-4808-9c8e-7b36488f73a5","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def validateElectionId(electionId: String): Unit =\n  try\n    if !electionId.startsWith(\"E-\") then throw new IllegalArgumentException(\"Invalid election ID\")\n  catch\n    case ex: IllegalArgumentException => println(\"Invalid id: \" + ex.getMessage)"}
{"id":"f9741373-cff7-4329-bc95-95cc0b684974","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait AuditTrailError\ncase object NoAuditTrailFound extends AuditTrailError\n\ndef fetchAuditTrail(recordId: Long): Option[String] =\n  if recordId <= 0 then None\n  else Some(s\"Audit for $recordId\")"}
{"id":"1a2f116a-3d07-49ed-ba46-a800644c92ba","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def processTallyFile(filename: String): Int =\n  try\n    if !filename.endsWith(\".csv\") then throw new Exception(\"Unsupported file format\")\n    42 // fake tally\n  catch\n    case ex: Exception => -1"}
{"id":"ae33e956-23c7-43b0-ba50-bf6e6ce2f7ad","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class ElectionResult(validBallots: Int, invalidBallots: Int)\nsealed trait ElectionTallyError\ncase object NegativeBallotCount extends ElectionTallyError\n\ndef validateResult(result: ElectionResult): Either[ElectionTallyError, ElectionResult] =\n  if result.validBallots < 0 || result.invalidBallots < 0 then Left(NegativeBallotCount)\n  else Right(result)"}
{"id":"b3a0b4e1-1bf3-4f71-878e-9100679a2ba5","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def storeTallyResults(electionId: String): Unit =\n  try\n    if electionId.isEmpty then throw new Exception(\"Missing election id\")\n  catch\n    case ex: Exception => println(ex.getMessage)\n    case _ : Throwable => println(\"Unknown error.\")"}
{"id":"caae7038-381f-4017-973a-0f9637ad8d95","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait VoteDecryptionError\ncase object DecryptionFailed extends VoteDecryptionError\n\ndef decryptVote(encrypted: String): Either[VoteDecryptionError, String] =\n  if encrypted.take(3) == \"ENC\" then Right(s\"VoteFor:${encrypted.drop(3)}\")\n  else Left(DecryptionFailed)"}
{"id":"b9759264-5366-41e7-8671-b6c0397a6317","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def calculateMajority(votes: List[String]): String =\n  try\n    if votes.isEmpty then throw new RuntimeException(\"No votes provided\")\n    votes.groupBy(identity).maxBy(_._2.size)._1\n  catch\n    case ex: RuntimeException => \"MajorityUnknown\""}
{"id":"8273dba0-36e5-4d60-9dbf-41fe3edf020a","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeDivideVotes(total: Int, groups: Int): Try[Int] =\n  Try(total / groups)"}
{"id":"baa76790-09e8-4bf3-85f7-0f7e1b112acf","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def authenticateTallyOfficer(officerCode: String): Boolean =\n  try\n    if officerCode != \"CERTIFIED_OFFICER\" then throw new Exception(\"Unauthorized access\")\n    true\n  catch\n    case _: Exception => false"}
{"id":"8a2277dc-5731-4927-8955-d018d49a3016","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait BatchPublishError\ncase object DatabaseOffline extends BatchPublishError\n\ncase class TallyBatch(votes: Int)\ndef publishTallyBatch(batch: TallyBatch): Either[BatchPublishError, String] =\n  if batch.votes <= 0 then Left(DatabaseOffline)\n  else Right(\"Batch published successfully\")"}
{"id":"886a97f4-a8f1-469c-881e-a16553575a56","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class VoteDuplicationException(msg: String) extends Exception(msg)\n\ndef checkDuplicateVote(voterId: String, recordedVoters: Set[String]): Unit =\n  if recordedVoters.contains(voterId) then throw new VoteDuplicationException(\"Duplicate vote detected.\")"}
{"id":"5d5ffe8d-e38a-46a8-911d-0fc61fafe585","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryParseElectionYear(value: String): Try[Int] =\n  Try(value.toInt)"}
{"id":"475f245d-2398-45e2-9397-95871f4cbac0","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def ensureBallotTiming(ballotTimestamp: Long, closeTimestamp: Long): String =\n  try\n    if ballotTimestamp > closeTimestamp then throw new Exception(\"Ballot cast after poll closed\")\n    \"Ballot accepted\"\n  catch\n    case ex: Exception => \"Rejected: \" + ex.getMessage"}
{"id":"d8eaa90d-86ff-4e52-a4dc-82b9613daffc","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"sealed trait VoterEligibilityError\ncase object VoterUnderage extends VoterEligibilityError\ncase object NotInElectoralRoll extends VoterEligibilityError\n\ndef checkVoterEligibility(age: Int, inRegister: Boolean): Either[VoterEligibilityError, Boolean] =\n  if age < 18 then Left(VoterUnderage)\n  else if !inRegister then Left(NotInElectoralRoll)\n  else Right(true)"}
{"id":"928d9e08-5eb1-4cb5-8cdc-0124c9b9f982","timestamp":1746102563210,"category":"throws","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def removeInvalidTallyEntry(entryId: String): String =\n  try\n    if entryId.isBlank then throw new Exception(\"Empty entry id\")\n    \"Entry removed\"\n  catch\n    case ex: Exception => \"Failed: \" + ex.getMessage"}
{"id":"776cc0f5-a400-4997-af68-f44f8f50420e","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"object BookLookupService {\n  def findBookByIsbn(isbn: String): Option[CatalogRecord] =\n    LibraryCatalog.records.find(_.isbn == isbn)\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"2a514007-0ba4-464f-a189-d4ff03aafd66","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class BookNotFoundException(message: String) extends Exception(message)\n\nobject CatalogSearcher {\n  def searchByTitle(title: String): CatalogRecord = {\n    val result = LibraryCatalog.records.find(_.title == title)\n    if result.isEmpty then throw new BookNotFoundException(s\"Book with title '$title' not found.\")\n    result.get\n  }\n}"}
{"id":"6435fc4a-2a58-4eab-8c41-9549b917dd02","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait SearchError\ncase object TitleNotFound extends SearchError\n\nobject Catalog {\n  def getBookByTitle(title: String): Either[SearchError, CatalogRecord] =\n    LibraryCatalog.records.find(_.title == title).toRight(TitleNotFound)\n}"}
{"id":"697f055a-e782-49b6-9760-373eb985cbbe","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object DigitalLibrary {\n  def getAuthorByIsbn(isbn: String): String = {\n    val record = LibraryCatalog.records.find(_.isbn == isbn)\n    if (record.isDefined) record.get.author\n    else throw new NoSuchElementException(s\"No book with ISBN $isbn found.\")\n  }\n}"}
{"id":"2d92badc-4c6e-46ce-816e-d7b19853f3e2","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"import scala.util.Try\n\nobject RecentPublicationSearcher {\n  def findRecentPublication(year: Int): Try[CatalogRecord] =\n    Try(LibraryCatalog.records.find(_.publicationYear == year).get)\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String, publicationYear: Int)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\", 1996),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\", 2010)\n  )\n}"}
{"id":"4767a105-45db-461a-ac68-f968fd5b4652","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object PublicationYearChecker {\n  def checkPublicationYear(isbn: String, year: Int): Boolean = {\n    try {\n      val record = LibraryCatalog.records.find(_.isbn == isbn).get\n      record.publicationYear == year\n    } catch {\n      case _: Exception => false\n    }\n  }\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String, publicationYear: Int)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\", 1996),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\", 2010)\n  )\n}"}
{"id":"589f997a-4746-4b26-8ce4-8dc30251f9fb","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait UserQueryError\ncase object EmptyQuery extends UserQueryError\ncase object TooBroadQuery extends UserQueryError\ncase object SearchBackendUnavailable extends UserQueryError\n\nobject UserQueryValidator {\n  def validateQuery(query: String): Either[UserQueryError, String] =\n    if query.trim.isEmpty then Left(EmptyQuery)\n    else if query.length < 3 then Left(TooBroadQuery)\n    else Right(query)\n}"}
{"id":"af3a9032-17ce-4133-9990-ca477828cfd4","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class InvalidSearchQueryException(msg: String) extends Exception(msg)\n\nobject QueryService {\n  def runCatalogQuery(rawQuery: String): CatalogResult = {\n    if (rawQuery.trim.isEmpty) throw new InvalidSearchQueryException(\"Query cannot be empty.\")\n    CatalogResult(s\"Results for '$rawQuery'\")\n  }\n}\n\ncase class CatalogResult(resultDescription: String)"}
{"id":"ec79d4ad-7d24-47d5-bc12-e732e137677f","timestamp":1746102596892,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"object SafeAuthorLookup {\n  def findAuthorByBookId(bookId: Int): Option[String] =\n    LibraryCatalog.entries.get(bookId).map(_.author)\n}\n\ncase class CatalogEntry(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val entries = Map(\n    1 -> CatalogEntry(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    2 -> CatalogEntry(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"f479d295-5788-462c-993c-9a02cf5764f7","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object BookRetriever {\n  def getFirstBookByAuthor(author: String): CatalogRecord = {\n    try {\n      LibraryCatalog.records.find(_.author == author).get\n    } catch {\n      case _: NoSuchElementException => throw new Exception(\"No book found for given author\")\n    }\n  }\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"a88069fe-031d-4e37-8b7b-5256bfa262fc","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SearchFailure(reason: String)\n\nobject KeywordSearcher {\n  def searchByKeyword(keyword: String): Either[SearchFailure, CatalogRecord] =\n    LibraryCatalog.entries.values.find(_.title.contains(keyword))\n      .toRight(SearchFailure(s\"No result for '$keyword'\"))\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val entries = Map(\n    1 -> CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    2 -> CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"1f47a3f0-ef2a-44bc-a290-4762ac0580f3","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class LibraryCatalogDownException(msg: String) extends Exception(msg)\n\nobject RemoteSearchService {\n  def fetchSearchResults(query: String): List[CatalogRecord] = {\n    try {\n      if (query == \"timeout\") throw new LibraryCatalogDownException(\"Catalog backend timeout\")\n      LibraryCatalog.records.filter(_.title.contains(query))\n    } catch {\n      case e: Exception => throw e\n    }\n  }\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"5ce46509-93cf-41f1-9745-28c31809a780","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait ResultParsingError\ncase class JsonParseError(details: String) extends ResultParsingError\n\nobject ResultParser {\n  def parseCatalogJson(json: String): Either[ResultParsingError, CatalogResult] =\n    if json.startsWith(\"{result\") then Right(CatalogResult(\"Success\"))\n    else Left(JsonParseError(\"Malformed catalog result JSON\"))\n}\n\ncase class CatalogResult(status: String)"}
{"id":"7a12ef0d-e5c2-44a2-a717-02a31abc0162","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object PublisherIDResolver {\n  def resolvePublisherId(publisherName: String): Int = {\n    try {\n      if (publisherName == \"Penguin\") 1001\n      else throw new Exception(\"Unknown publisher\")\n    } catch {\n      case ex: Exception => throw ex\n    }\n  }\n}"}
{"id":"312cfa0f-3079-402b-882d-73683617749d","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait CatalogFetchError\ncase object ResourceNotAccessible extends CatalogFetchError\ncase class BackendMalfunction(reason: String) extends CatalogFetchError\n\nobject CatalogProxy {\n  def fetchCatalogResource(resourceId: Int): Either[CatalogFetchError, String] =\n    if resourceId == 1 then Right(\"Digital Manuscript\")\n    else if resourceId < 0 then Left(BackendMalfunction(\"Negative ID\"))\n    else Left(ResourceNotAccessible)\n}"}
{"id":"4e37a603-e3fa-470f-a2af-5722180e70c4","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class MetadataParseException(message: String) extends Exception(message)\n\nobject MetadataExtractor {\n  def extractMetadata(field: String): String = {\n    field match {\n      case \"ISBN\" => \"9780140449136\"\n      case \"author\" => \"Jane Austen\"\n      case _ => throw new MetadataParseException(s\"Metadata field '$field' unknown.\")\n    }\n  }\n}"}
{"id":"12b88b08-5b29-4859-8274-10cbc64251e1","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"import scala.util.Try\n\nobject YearFieldParser {\n  def extractYearField(value: String): Try[Int] =\n    Try(value.trim.toInt)\n}"}
{"id":"49477169-9385-4493-9448-d5a4bd54124b","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object FormatChecker {\n  def checkIsEpub(format: String): Boolean = {\n    try {\n      if (format.toLowerCase != \"epub\") throw new Exception(\"Format is not EPUB\")\n      true\n    } catch {\n      case _: Exception => false\n    }\n  }\n}"}
{"id":"ae353492-a377-4274-a2d0-6906c533c672","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"object RecordUniquenessValidator {\n  def validateUniqueness(isbn: String): Option[String] =\n    if LibraryCatalog.records.exists(_.isbn == isbn) then None\n    else Some(s\"ISBN $isbn is unique.\")\n}\n\ncase class CatalogRecord(isbn: String, title: String, author: String)\n\nobject LibraryCatalog {\n  val records = List(\n    CatalogRecord(\"9780140449136\", \"The Odyssey\", \"Homer\"),\n    CatalogRecord(\"9780679783272\", \"To Kill a Mockingbird\", \"Harper Lee\")\n  )\n}"}
{"id":"80d01ab4-7938-4998-afb2-c5edee00b5ff","timestamp":1746102596893,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class MalformedPaginationParameter(msg: String) extends Exception(msg)\n\nobject PageRangeFetcher {\n  def getPageRange(from: Int, to: Int): List[Int] = {\n    if (from > to) throw new MalformedPaginationParameter(\"Invalid page range\")\n    (from to to).toList\n  }\n}"}
{"id":"9797cc8c-5da2-4bdc-8078-ac41f5d2ef65","timestamp":1746102616452,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class BookRecord(title: String, author: String, year: Int)\n\ndef findBookByTitle(books: List[BookRecord], searchTitle: String): Option[BookRecord] =\n  books.find(_.title.equalsIgnoreCase(searchTitle))"}
{"id":"fd3d8146-2963-4b0a-9429-893a803970fa","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait CatalogSearchError\ncase object BookNotFound extends CatalogSearchError\n\ncase class CatalogEntry(isbn: String, title: String)\n\ndef lookupByIsbn(isbn: String, entries: List[CatalogEntry]): Either[CatalogSearchError, CatalogEntry] =\n  entries.find(_.isbn == isbn).toRight(BookNotFound)"}
{"id":"47249860-8aa6-473f-96b2-3d19d4e5d2c6","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ndef parseYearString(yearString: String): Try[Int] =\n  Try(yearString.toInt)"}
{"id":"45648297-bd83-417f-9058-bb59af81fda6","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait LibraryQueryError\ncase object EmptyQuery extends LibraryQueryError\ncase object NoResultsFound extends LibraryQueryError\n\ndef searchCatalog(query: String, records: List[String]): Either[LibraryQueryError, List[String]] =\n  if query.trim.isEmpty then Left(EmptyQuery)\n  else {\n    val results = records.filter(_.contains(query))\n    if results.isEmpty then Left(NoResultsFound) else Right(results)\n  }"}
{"id":"7179f602-c708-47ad-8986-e516725d64be","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getFirstAvailableCopy(availability: List[Boolean]): Option[Int] =\n  availability.indexWhere(_ == true) match\n    case -1 => None\n    case idx => Some(idx)"}
{"id":"4da5f88a-4cf1-407b-9367-14516ee06306","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait FieldParseError\ncase object YearParseFailure extends FieldParseError\n\ncase class Book(title: String, year: Int)\n\ndef safeCreateBook(title: String, yearStr: String): Either[FieldParseError, Book] =\n  yearStr.toIntOption.toRight(YearParseFailure).map(Book(title, _))"}
{"id":"cde38b90-8176-42f9-a8e1-09914f9d9931","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"import scala.util.Try\n\ncase class UserRequest(id: String)\n\ndef safeRequestIdToInt(request: UserRequest): Try[Int] =\n  Try(request.id.toInt)"}
{"id":"57acfcff-a00f-4f9b-973f-37663c48d4e5","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class DigitalResource(id: String, format: String)\n\ndef extractPdfResource(resources: List[DigitalResource]): Option[DigitalResource] =\n  resources.find(_.format == \"PDF\")"}
{"id":"c4a59e6e-7f56-4779-b506-e2746c80aa5b","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"sealed trait ResourceAccessError\ncase object AccessDenied extends ResourceAccessError\ncase object ResourceMissing extends ResourceAccessError\n\ncase class AccessRequest(user: String, resourceId: String)\n\ndef grantAccess(request: AccessRequest, accessibleIds: Set[String], userHasPermission: Boolean): Either[ResourceAccessError, String] =\n  if !userHasPermission then Left(AccessDenied)\n  else if !accessibleIds.contains(request.resourceId) then Left(ResourceMissing)\n  else Right(\"Access granted\")"}
{"id":"b5fe151c-fafd-49fd-b622-7a8667f3bdec","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SearchQuery(text: String, filters: Map[String, String])\n\ndef enrichQuery(query: Option[SearchQuery]): Either[String, SearchQuery] =\n  query.toRight(\"Query is missing\")"}
{"id":"10cda76c-6672-4c03-95ab-94e1133143f3","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"case class CatalogSearchException(msg: String) extends Exception(msg)\n\ndef getBookAuthor(books: List[(String, String)], title: String): String = {\n  books.find(_._1 == title) match {\n    case Some((_, author)) => author\n    case None => throw CatalogSearchException(\"Book not found\")\n  }\n}"}
{"id":"31070fc0-2919-4356-a870-c1ee5b7f9084","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def findAvailableBook(bookTitles: List[String], requestedTitle: String): String = {\n  try {\n    val idx = bookTitles.indexOf(requestedTitle)\n    if (idx == -1) throw new NoSuchElementException(\"Title not available\")\n    bookTitles(idx)\n  } catch {\n    case ex: Exception => \"Book unavailable\"\n  }\n}"}
{"id":"a2db9395-c8a4-4511-9940-1baa4c5593a9","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class InvalidQueryException(val detail: String) extends Exception(detail)\n\ndef validateQuery(query: String): Unit = {\n  if (query.isEmpty) throw new InvalidQueryException(\"Provided query is empty\")\n}"}
{"id":"6f2443ce-e7fd-46a5-bd9e-8f6429a0642e","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getYearPublishedOrThrow(record: Map[String, String]): Int = {\n  record.get(\"year\") match {\n    case Some(yearStr) =>\n      try {\n        yearStr.toInt\n      } catch {\n        case _: NumberFormatException => throw new RuntimeException(\"Invalid year format\")\n      }\n    case None => throw new RuntimeException(\"Year field missing\")\n  }\n}"}
{"id":"6a738f99-dede-4bac-a1d1-20470651ab28","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def findAuthorUnsafe(entries: Array[(String, String)], bookTitle: String): String = {\n  val entry = entries.find(_._1 == bookTitle)\n  if (entry == null) throw new RuntimeException(\"No book entry found\")\n  entry.get._2\n}"}
{"id":"6093b6a7-ba16-435a-ae81-9258bdec660e","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getResourceFileFormat(resourceId: String, files: Map[String, String]): String = {\n  try {\n    files(resourceId)\n  } catch {\n    case _: NoSuchElementException => throw new Exception(\"File format not found\")\n  }\n}"}
{"id":"61739b72-286f-4193-aa40-15c18d65d125","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def parseCatalogId(idInput: String): Int = {\n  try {\n    idInput.toInt\n  } catch {\n    case e: NumberFormatException => throw new IllegalArgumentException(\"Invalid catalog id\")\n  }\n}"}
{"id":"6763a9c0-0b11-4cbf-80e3-82a472217406","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def logSearchError(logFunc: String => Unit, searchFunc: () => Unit): Unit = {\n  try {\n    searchFunc()\n  } catch {\n    case e: Exception => logFunc(e.getMessage)\n  }\n}"}
{"id":"62e50795-b77a-4433-b2f6-eaf539709a7a","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def findMatchingGenre(books: List[(String, String)], genre: String): String = {\n  val result = books.filter(_._2 == genre)\n  if(result.isEmpty) throw new Exception(\"No books of specified genre\")\n  result.head._1\n}"}
{"id":"6902a703-486c-4cc3-9c79-f8ab3590c640","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def checkAvailability(bookStatus: Map[String, Boolean], bookId: String): Boolean = {\n  if(bookStatus.contains(bookId)) {\n    bookStatus(bookId)\n  } else {\n    throw new Exception(\"Book ID not found in catalog\")\n  }\n}"}
{"id":"dba6d3eb-3cd8-4805-b49d-9073659a61a7","timestamp":1746102616453,"category":"throws","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def handleRequest(requestData: String): String = {\n  try {\n    if (requestData.isEmpty) throw new Exception(\"Empty request\")\n    \"Request processed: \" + requestData\n  } catch {\n    case e: Exception => s\"Error: ${e.getMessage}\"\n  }\n}"}
{"id":"72ec105f-d805-49e5-9f09-8dd0c8451966","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object TicketQRCodeChecker:\n  def validateQRCode(qrValue: String): Either[TicketQRValidationError, ValidatedTicket] =\n    if qrValue.isEmpty then Left(EmptyQRCodeError())\n    else if qrValue.forall(_.isLetter) then Left(MalformedQRCodeError())\n    else Right(ValidatedTicket(qrValue))\n\nsealed trait TicketQRValidationError\ncase class EmptyQRCodeError() extends TicketQRValidationError\ncase class MalformedQRCodeError() extends TicketQRValidationError\ncase class ValidatedTicket(code: String)"}
{"id":"4713e1a7-e584-4530-b603-3641406820c1","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketQRParser:\n  def parse(qr: String): ValidTicket =\n    if qr.isEmpty then throw new InvalidTicketQRCodeException(\"QR code is empty.\")\n    else ValidTicket(qr)\n  \nclass InvalidTicketQRCodeException(msg: String) extends Exception(msg)\ncase class ValidTicket(qr: String)"}
{"id":"2786a2e6-b477-403f-8ea6-56fc6f49987c","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QREventTicket(id: String)\nsealed trait QRScanError\ncase object TicketNotFound extends QRScanError\ncase object TicketExpired extends QRScanError\n\ndef scanTicket(qrCode: String): Either[QRScanError, QREventTicket] =\n  if qrCode == \"\" then Left(TicketNotFound)\n  else if qrCode == \"expired\" then Left(TicketExpired)\n  else Right(QREventTicket(qrCode))"}
{"id":"f28390f0-92a5-4e60-b079-2d8770e5dc6d","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def validateTicketQRCode(qrInput: String): TicketStatus =\n  try\n    if qrInput == \"\" then throw new QRCodeEmptyException()\n    else TicketStatus(qrInput, true)\n  catch\n    case e: Exception => TicketStatus(qrInput, false)\n\nclass QRCodeEmptyException extends Exception\ncase class TicketStatus(qr: String, isValid: Boolean)"}
{"id":"2696f704-5541-49d8-89a5-7516431ab257","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait TicketValidationError\ncase object QRCodeUnreadable extends TicketValidationError\ncase object QRCodeFake extends TicketValidationError\n\ncase class AttendeeTicket(id: String, checkedIn: Boolean)\n\ndef checkinAttendee(qrCode: String): Either[TicketValidationError, AttendeeTicket] =\n  if qrCode.startsWith(\"??\") then Left(QRCodeUnreadable)\n  else if qrCode.length < 8 then Left(QRCodeFake)\n  else Right(AttendeeTicket(qrCode, true))"}
{"id":"8b964e33-f666-47da-b766-3c93cfa28da0","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def markTicketScanned(ticketId: String): Boolean =\n  if ticketId.isEmpty then throw new IllegalArgumentException(\"Ticket ID missing\")\n  else true\n\ntry\n  markTicketScanned(\"\")\ncatch\n  case e: IllegalArgumentException => false"}
{"id":"3acf44ec-2c89-47e1-985f-182c4c55117f","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait QRVerificationError\ncase object QRExpired extends QRVerificationError\ncase object QRAlreadyUsed extends QRVerificationError\n\ncase class VerifiedEntry(id: String)\n\ndef verifyQRCodeEntry(qrCode: String, used: Boolean, expired: Boolean): Either[QRVerificationError, VerifiedEntry] =\n  if expired then Left(QRExpired)\n  else if used then Left(QRAlreadyUsed)\n  else Right(VerifiedEntry(qrCode))"}
{"id":"f07503f4-1751-4276-9624-436d59bd6c1e","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketNotValidException(reason: String) extends Exception(reason)\n\ndef ensureValidTicket(qr: String, revoked: Boolean): String =\n  if revoked then throw new TicketNotValidException(\"Ticket is revoked.\")\n  else qr\n\ntry\n  ensureValidTicket(\"TICKET123\", true)\ncatch\n  case ex: TicketNotValidException => \"Error: \" + ex.getMessage"}
{"id":"40e64418-fddb-4b0f-b31c-5ff7fbfcd9fc","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait EntryScanError\ncase class TicketBlacklisted(ticket: String) extends EntryScanError\ncase object TicketUsed extends EntryScanError\ncase class EventTicket(code: String)\n\ndef processTicketScan(qrCode: String, isBlacklisted: Boolean, alreadyUsed: Boolean): Either[EntryScanError, EventTicket] =\n  if isBlacklisted then Left(TicketBlacklisted(qrCode))\n  else if alreadyUsed then Left(TicketUsed)\n  else Right(EventTicket(qrCode))"}
{"id":"e96cf362-9c62-4f50-a3fb-143c0bd6ed16","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def scanQRCode(qr: String): String =\n  if qr == null then throw new NullPointerException(\"QR code cannot be null\")\n  else qr.reverse\n\ntry\n  scanQRCode(null)\ncatch\n  case npe: NullPointerException => \"Invalid scan\""}
{"id":"bde4d56f-3c7f-47a7-adc7-f2f8047bb3bb","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait TicketDecodeError\ncase object QRFormatInvalid extends TicketDecodeError\ncase object TicketNotRegistered extends TicketDecodeError\n\ncase class DecodedTicket(id: String)\n\ndef decodeTicket(qr: String): Either[TicketDecodeError, DecodedTicket] =\n  if !qr.startsWith(\"EVT-\") then Left(QRFormatInvalid)\n  else if qr.drop(4).isEmpty then Left(TicketNotRegistered)\n  else Right(DecodedTicket(qr.drop(4)))"}
{"id":"bd096aec-8196-41af-86a3-7a2c0f11f642","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRCodeTamperingException extends Exception\n\ndef detectTamper(qrValue: String): Boolean =\n  if qrValue.contains(\"tampered\") then throw new QRCodeTamperingException\n  else true\n\ndef safeTamperCheck(qr: String): Boolean =\n  try detectTamper(qr) catch { case _: QRCodeTamperingException => false }"}
{"id":"a7bb48b5-fe5a-4caa-af65-67a50dac7ae4","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"import scala.util.Try, scala.util.Success, scala.util.Failure\n\ndef attemptTicketActivation(qr: String): Try[String] =\n  Try {\n    if qr.trim.isEmpty then throw new Exception(\"Empty QR code\")\n    else \"ActivationCode123\"\n  }"}
{"id":"f5e17022-b5f8-464e-b72c-e75b41b6ebff","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class UsedTicketException(id: String) extends Exception(s\"Ticket $id already used.\")\ndef preventReuse(qr: String, used: Boolean): Unit =\n  if used then throw new UsedTicketException(qr)\n\ntry\n  preventReuse(\"TKT20\", true)\ncatch\n  case e: UsedTicketException => ()"}
{"id":"3af28db5-af95-4ed9-93cc-f1c075f5c1ee","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait TicketError\ncase object InvalidQRCodeFormat extends TicketError\ncase object TicketRevoked extends TicketError\n\ndef validateTicketStructure(qr: String, revoked: Boolean): Option[TicketError] =\n  if !qr.matches(\"[A-Z]{8}\") then Some(InvalidQRCodeFormat)\n  else if revoked then Some(TicketRevoked)\n  else None"}
{"id":"63991ee6-eccc-4204-ae0f-9ff3eb21f210","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def checkTicketForEvent(qrCode: String, eventId: String): String =\n  if qrCode.isEmpty || eventId.isEmpty then\n    throw new Exception(\"QR code or event ID missing\")\n  else \"OK\"\n\ntry\n  checkTicketForEvent(\"\", \"EV20\")\ncatch\n  case e: Exception => \"Error: QR code or event ID missing\""}
{"id":"46309c85-bae4-4d7d-b331-19711da457f8","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait TicketQRStatus\ncase object TicketMissing extends TicketQRStatus\ncase object TicketCorrupt extends TicketQRStatus\ncase class TicketFound(ticketRef: String) extends TicketQRStatus\n\ndef findTicket(qr: String): TicketQRStatus =\n  if qr.isEmpty then TicketMissing\n  else if !qr.contains(\"-\") then TicketCorrupt\n  else TicketFound(qr)"}
{"id":"aea2149b-f172-44cf-84a5-2f07f245c4ab","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class EmptyScanException extends Exception(\"Scan was empty\")\n\ndef handleScan(qrCode: String): String =\n  if qrCode.isEmpty then throw new EmptyScanException\n  else s\"Scanned: $qrCode\"\n\ntry handleScan(\"\") catch { case _: EmptyScanException => \"Error: Scan required\" }"}
{"id":"b781a79a-ded9-4840-a60a-c3c4a01c0623","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def parseValidQRCode(qrValue: String): Option[String] =\n  if qrValue.matches(\"EVT-[0-9]+\") then Some(qrValue)\n  else None\n\nval maybeCode: Option[String] = parseValidQRCode(\"EVT-2024\")"}
{"id":"2b3ccfb2-02d6-49fc-8c4f-91608aa15266","timestamp":1746102646455,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketValidationException(reason: String) extends Exception(reason)\n\ndef checkTicketExpiration(qr: String, expiration: Long, timeNow: Long): Boolean =\n  if timeNow > expiration then throw new TicketValidationException(\"Ticket expired\")\n  else true\n\ntry checkTicketExpiration(\"ABC123\", 1000L, 2000L) catch { case ex: TicketValidationException => false }"}
{"id":"62580da8-2cdd-4e21-9e89-d5e6228e8d39","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"case class TicketQRCode(qrData: String)\nclass InvalidQRCodeException(msg: String) extends Exception(msg)\ndef parseQRCode(qrCode: TicketQRCode): String = {\n  if (qrCode.qrData.isEmpty)\n    throw new InvalidQRCodeException(\"QR code data cannot be empty\")\n  else\n    qrCode.qrData.reverse\n}"}
{"id":"c62123d1-ebd7-4662-bf32-0fa1da8cc936","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketQRValidator {\n  def validateTicketId(ticketId: String): Boolean = {\n    if (ticketId.forall(_.isDigit)) true\n    else throw new RuntimeException(\"Invalid ticket ID format\")\n  }\n}"}
{"id":"cda6c3fb-bda3-4ce5-9e55-3dc34926fa85","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def fetchEventForQRCode(qrCode: String): String = {\n  if (qrCode.startsWith(\"event-\")) qrCode.drop(6)\n  else throw new IllegalArgumentException(\"QR code does not reference an event\")\n}"}
{"id":"383c93cc-35d9-4acb-b275-feaa8b1a1e9f","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRCodeExpiredException(msg: String) extends Exception(msg)\ndef validateQRExpiration(expiryTimestamp: Long, now: Long): Unit = {\n  if (now > expiryTimestamp) {\n    throw new QRCodeExpiredException(\"QR code has expired\")\n  }\n}"}
{"id":"b94a1199-927f-429c-893c-3f11b448383e","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object QRCodeScanHandler {\n  def recordScan(qrCode: String, db: scala.collection.mutable.Set[String]): Unit = {\n    if (db.contains(qrCode))\n      throw new Exception(\"QR code already used\")\n    else db += qrCode\n  }\n}"}
{"id":"642daee8-7d2d-4bf5-8108-8669c33cabb4","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def getUserFromQR(userCode: String): String = {\n  try {\n    require(userCode.nonEmpty, \"User code missing\")\n    userCode.toUpperCase\n  } catch {\n    case ex: IllegalArgumentException =>\n      throw new Exception(\"User code extraction failed\", ex)\n  }\n}"}
{"id":"96debf7f-3466-4b22-8f2c-697e756700ce","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def decodeQRContent(qrContent: Array[Byte]): String = {\n  if (qrContent.isEmpty) throw new RuntimeException(\"QR content is empty\")\n  else new String(qrContent)\n}"}
{"id":"b2d9e512-4c1e-4e79-b4b1-6596ec82793f","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def markTicketUsed(ticketId: String, usageRegister: scala.collection.mutable.Map[String, Boolean]) = {\n  try {\n    if (usageRegister.getOrElse(ticketId, false))\n      throw new Exception(\"Ticket has already been used\")\n    else\n      usageRegister(ticketId) = true\n  } catch {\n    case ex: Exception => println(s\"Error: ${ex.getMessage}\")\n  }\n}"}
{"id":"05c8790d-1298-4647-b216-8edd0a60e71e","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketErrorLogger {\n  def logValidationFailure(qrCode: String): Unit = {\n    try {\n      if (qrCode.isEmpty) throw new Exception(\"Missing QR code to log failure\")\n      println(s\"Logged failure for QR: $qrCode\")\n    } catch {\n      case _: Exception => println(\"Unable to log QR failure\")\n    }\n  }\n}"}
{"id":"7154546d-366f-4396-96ca-c711d5f8a4ea","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def scanTicket(qr: String): String = {\n  if (qr == \"blocked\") throw new SecurityException(\"Blocked ticket QR\")\n  else s\"Scanned: $qr\"\n}"}
{"id":"fc784c8e-23db-416c-befa-3b9bd4ed8d77","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait QRValidationError\ndef validateTicketQR(qr: String): Either[QRValidationError, String] =\n  if (qr.isEmpty) Left(QRValidationError.InvalidFormat)\n  else if (qr.length < 10) Left(QRValidationError.TooShort)\n  else Right(qr)\nobject QRValidationError {\n  case object InvalidFormat extends QRValidationError\n  case object TooShort extends QRValidationError\n}"}
{"id":"af725bd4-8191-4320-a715-035dba4c5a52","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef parseEventIdFromQR(qr: String): Try[Int] =\n  Try(qr.dropWhile(!_.isDigit).toInt)"}
{"id":"48b7639d-2979-48d4-a9db-5aa216a8d6ca","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class TicketScan(qrCode: String)\ncase class ScanResult(success: Boolean, error: Option[String])\ndef processTicketScan(scan: TicketScan): ScanResult =\n  if (scan.qrCode.trim.isEmpty)\n    ScanResult(success = false, error = Some(\"QR code missing\"))\n  else\n    ScanResult(success = true, error = None)"}
{"id":"46350499-6deb-4c2e-bf3b-029144faab1c","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"sealed trait TicketValidationFailure\ncase object TicketNotFound extends TicketValidationFailure\ncase object TicketExpired extends TicketValidationFailure\ndef validateTicket(ticketId: String, now: Long, expiry: Long): Either[TicketValidationFailure, String] =\n  if (ticketId.isEmpty) Left(TicketNotFound)\n  else if (now > expiry) Left(TicketExpired)\n  else Right(ticketId)"}
{"id":"3c3fac77-7925-424e-8170-70e30658e292","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def extractUserId(qr: String): Option[String] = {\n  val idx = qr.indexOf(\"user-\")\n  if (idx >= 0) Some(qr.substring(idx + 5, idx + 13)) else None\n}"}
{"id":"4c12d45f-4c18-424b-8790-85c793c43a47","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class Ticket(qr: String, valid: Boolean)\ndef safeTicketUse(ticket: Ticket): Option[String] = {\n  if (ticket.valid) Some(ticket.qr)\n  else None\n}"}
{"id":"192d700c-d6ae-4ef1-a0b1-441a15dbe46b","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def checkQRCodeFormat(qr: String): Either[String, String] =\n  if (qr.matches(\"TKT-[0-9A-Z]+\")) Right(qr)\n  else Left(\"QR code format invalid\")"}
{"id":"a54e038e-b9f5-43e8-9899-60156b79d3fa","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"import scala.util.Try\ndef decodeTicketPayload(payload: Array[Byte]): Try[String] =\n  Try(new String(payload, \"UTF-8\"))"}
{"id":"62aae2bd-bb63-4aee-aebf-5252b44b27e1","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def verifyTicketUsage(qrCode: String, alreadyUsed: Set[String]): Either[String, Unit] =\n  if (alreadyUsed.contains(qrCode)) Left(\"Ticket has already been used\")\n  else Right(())"}
{"id":"d1df6159-b8f7-440e-b80f-b1554a2345a1","timestamp":1746102666211,"category":"throws","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def eventForQR(qrCode: String, eventRegistry: Map[String,String]): Option[String] =\n  eventRegistry.get(qrCode)"}
{"id":"5342f4a7-6317-4275-924c-c84c96806051","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"case class DronePosition(lat: Double, lon: Double)\ncase class NoAccessiblePathException(message: String) extends Exception(message)\nobject PathFinder {\n  def findOptimalPath(start: DronePosition, end: DronePosition): List[DronePosition] = {\n    if (start == end) throw new NoAccessiblePathException(\"Start and end positions are identical\")\n    List(start, end)\n  }\n}"}
{"id":"f41418e6-8156-4637-ade6-8c5663df1411","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def validateDroneBatteryLevel(batteryLevel: Double): Unit = {\n  if (batteryLevel < 20.0) throw new Exception(\"Insufficient battery for delivery path optimization\")\n}"}
{"id":"dcc30300-966a-4e42-83cb-4813baaa590d","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class PathOptimizationException(msg: String) extends Exception(msg)\ndef calculatePathLength(points: List[(Double, Double)]): Double = {\n  if (points.length < 2) throw new PathOptimizationException(\"At least two points needed\")\n  points.sliding(2).map {\n    case List((x1, y1), (x2, y2)) => math.hypot(x2 - x1, y2 - y1)\n    case _ => 0.0\n  }.sum\n}"}
{"id":"b2abb020-da8f-43a5-a3ec-5610ccba9823","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getDroneSpeed(droneId: String): Double = {\n  if (droneId.isEmpty) throw new IllegalArgumentException(\"Drone ID not provided\")\n  18.5 // Returns constant speed for example\n}"}
{"id":"6187af25-6856-45df-9e99-89ea777e0343","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"object AltitudeValidator {\n  def ensureAllowedAltitude(altitude: Double): Unit = {\n    if (altitude < 10 || altitude > 120)\n      throw new RuntimeException(\"Altitude out of supported range for drone optimization\")\n  }\n}"}
{"id":"9676d940-8388-4e0e-bde0-4b697dc7f084","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def assignDeliveryJobToDrone(droneId: String, jobId: String): String = {\n  try {\n    if (droneId.isEmpty || jobId.isEmpty)\n      throw new Exception(\"Invalid drone/order ID\")\n    s\"Assigned job $jobId to drone $droneId\"\n  } catch {\n    case ex: Exception => s\"Error during assignment: ${ex.getMessage}\"\n  }\n}"}
{"id":"33449290-75ab-490c-a66e-40c3e3e10858","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DeliveryZoneNotFoundException(message: String) extends Exception(message)\ndef selectDeliveryZone(zones: List[String], destination: String): String = {\n  try {\n    zones.find(_ == destination).getOrElse(throw new DeliveryZoneNotFoundException(\"Destination not in any delivery zone\"))\n  } catch {\n    case ex: Exception => \"Zone Selection Failed: \" + ex.getMessage\n  }\n}"}
{"id":"8500dc1d-5b48-495e-a639-3b30a8e380d5","timestamp":1746102722946,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"object WeatherCheck {\n  def ensureWeatherSafe(windSpeed: Double): Unit = {\n    if (windSpeed > 25.0)\n      throw new Exception(\"Unsafe wind conditions for drone path optimization\")\n  }\n}"}
{"id":"572f3171-5788-44ea-8eb3-f827988d5d36","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getOptimizedRoute(droneId: String, destination: String): String = {\n  try {\n    if (droneId == \"000\") throw new Exception(\"Drone not available for route optimization\")\n    \"Optimized route\"\n  } catch {\n    case _: Exception => \"Error computing route\"\n  }\n}"}
{"id":"44819edc-88f6-4c29-bf52-48aeccac7acc","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class RestrictedAirspaceException extends Exception(\"Restricted airspace encountered during path calculation\")\ndef checkForRestrictedAirspace(path: List[(Double, Double)]): Unit = {\n  if (path.contains((0.0, 0.0))) throw new RestrictedAirspaceException\n}"}
{"id":"e09386f6-3ebe-4f2e-888f-49dbf8270dad","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait PathOptimizationError\ncase object InsufficientBattery extends PathOptimizationError\ncase object NoAvailableRoute extends PathOptimizationError\ncase class OptimizedPath(waypoints: List[(Double, Double)])\ndef computeOptimizedPath(battery: Double, candidates: List[List[(Double, Double)]]): Either[PathOptimizationError, OptimizedPath] = {\n  if (battery < 20.0) Left(InsufficientBattery)\n  else candidates.headOption match {\n    case Some(path) => Right(OptimizedPath(path))\n    case None => Left(NoAvailableRoute)\n  }\n}"}
{"id":"a5bb3166-3b3d-42f4-b5f5-b656bc0ef988","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class BatteryWarning(message: String)\ndef validateDroneEnergy(energy: Double): Option[BatteryWarning] =\n  if (energy < 15.0) Some(BatteryWarning(\"Low drone battery. Optimize path or recharge.\")) else None"}
{"id":"5f53c31f-91d5-4380-bd94-45e569350da5","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait AirspaceCheckError\ncase object BlockedByNoFlyZone extends AirspaceCheckError\ndef verifyPathForNoFlyZones(path: List[String], noFlyZones: Set[String]): Either[AirspaceCheckError, List[String]] = {\n  if (path.exists(noFlyZones.contains)) Left(BlockedByNoFlyZone)\n  else Right(path)\n}"}
{"id":"d76fbac1-d536-4286-b29a-d40d22400757","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"import scala.util.Try case class Route(segments: List[String])\ndef tryOptimizeRoute(segments: List[String]): scala.util.Try[Route] = scala.util.Try(Route(segments).copy(segments = segments.reverse))"}
{"id":"211fd407-1be1-4f6a-90a2-c27924fa9681","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait AltitudeValidationError\ncase object AltitudeTooLow extends AltitudeValidationError\ncase object AltitudeTooHigh extends AltitudeValidationError\ndef validateAltitudeRange(altitude: Double): Either[AltitudeValidationError, Double] =\n  if (altitude < 10.0) Left(AltitudeTooLow)\n  else if (altitude > 120.0) Left(AltitudeTooHigh)\n  else Right(altitude)"}
{"id":"c3f8a998-732f-4c3b-8673-65cbec3357cd","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class ObstacleDetected(location: String)\ndef checkObstaclesOnPath(path: List[String], obstacles: Set[String]): Option[ObstacleDetected] =\n  path.find(obstacles.contains).map(ObstacleDetected.apply)"}
{"id":"dd88044a-5794-4a07-92dd-6581f80b2af8","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait DroneAssignmentError\ncase object DroneBusy extends DroneAssignmentError\ncase object DroneIdUnknown extends DroneAssignmentError\ndef assignDrone(id: String, busyDrones: Set[String], knownDrones: Set[String]): Either[DroneAssignmentError, String] = {\n  if (!knownDrones.contains(id)) Left(DroneIdUnknown)\n  else if (busyDrones.contains(id)) Left(DroneBusy)\n  else Right(s\"Drone $id assigned successfully\")\n}"}
{"id":"2341f2bc-0559-41d9-a355-2b6103243be8","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait WeatherInputError\ncase object WeatherDataUnavailable extends WeatherInputError\ndef fetchWeatherInfo(location: String, data: Map[String, String]): Either[WeatherInputError, String] =\n  data.get(location).toRight(WeatherDataUnavailable)"}
{"id":"9fbed25f-ea65-4333-996c-825414af6a6d","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"import scala.util.Try\ncase class DeliveryRoute(path: List[String])\ndef safelyBuildDeliveryRoute(steps: List[String]): scala.util.Try[DeliveryRoute] =\n  scala.util.Try(DeliveryRoute(steps))"}
{"id":"84e219a8-2cc9-4d86-bf9b-bb42a489e2c5","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait DeliveryZoneSelectionError\ncase object DeliveryZoneNotFound extends DeliveryZoneSelectionError\ndef selectZone(zones: List[String], target: String): Either[DeliveryZoneSelectionError, String] =\n  zones.find(_ == target).toRight(DeliveryZoneNotFound)"}
{"id":"505ef0cd-b0db-4d3b-89d3-cdbd738b44ae","timestamp":1746102722947,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait RouteSpeedError\ncase object DroneSpeedUnknown extends RouteSpeedError\ndef getDroneRouteSpeed(droneId: String, speeds: Map[String, Double]): Either[RouteSpeedError, Double] =\n  speeds.get(droneId).toRight(DroneSpeedUnknown)"}
{"id":"1e62aaaa-fbac-445a-85ad-4a87f00950c3","timestamp":1746102750696,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class Coordinates(latitude: Double, longitude: Double)\ndef validateCoordinates(coords: Coordinates): Option[Coordinates] =\n  if coords.latitude < -90 || coords.latitude > 90 then None\n  else if coords.longitude < -180 || coords.longitude > 180 then None\n  else Some(coords)"}
{"id":"512fb6f1-4375-4df8-a358-66eaf5582385","timestamp":1746102750696,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def calculateDeliveryTime(distance: Double, speed: Double): Double =\n  if (speed <= 0) throw new IllegalArgumentException(\"Drone speed must be positive.\")\n  distance / speed"}
{"id":"9ec3cd68-1452-4dd5-8786-8528a5a8f2a3","timestamp":1746102750696,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait PathOptimizationError\ncase object NoAvailableRoute extends PathOptimizationError\ncase object DeliveryPointNotFound extends PathOptimizationError\n\ndef findOptimalRoute(destination: String, availableRoutes: Map[String, List[String]]): Either[PathOptimizationError, List[String]] =\n  availableRoutes.get(destination) match\n    case Some(route) if route.nonEmpty => Right(route)\n    case Some(_) => Left(NoAvailableRoute)\n    case None => Left(DeliveryPointNotFound)"}
{"id":"3fcab155-8a20-4b30-8e72-a9d8672e59b1","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class DroneBatteryError(message: String) extends Exception(message)\ndef updateDroneBattery(droneId: Int, newLevel: Double): Unit =\n  if (newLevel < 0 || newLevel > 100) throw new DroneBatteryError(\"Battery level out of bounds.\")\n  println(s\"Drone $droneId battery updated to $newLevel%\")"}
{"id":"aed5be29-5c14-41ad-aa62-fddac354098b","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"import scala.util.Try\ndef parseWaypoint(str: String): Try[(Double, Double)] =\n  Try {\n    val parts = str.split(\",\")\n    (parts(0).toDouble, parts(1).toDouble)\n  }"}
{"id":"7cab24df-d1e9-4763-aa02-770d77c477a1","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def planDetourPath(obstacles: List[(Double, Double)]): List[(Double, Double)] =\n  if (obstacles.isEmpty) throw new RuntimeException(\"No obstacles provided for detour planning.\")\n  obstacles.map(obs => (obs._1 + 0.01, obs._2 + 0.01))"}
{"id":"da43bf7e-e452-42dc-9dfe-222f5c99ab05","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait OptimizationIssue\ncase object ExceedsMaxPayload extends OptimizationIssue\ncase object UnsafeWeather extends OptimizationIssue\n\ndef optimizePayloadWeight(weight: Double, maxWeight: Double, isWeatherSafe: Boolean): Either[OptimizationIssue, Double] =\n  if (!isWeatherSafe) Left(UnsafeWeather)\n  else if (weight > maxWeight) Left(ExceedsMaxPayload)\n  else Right(weight)"}
{"id":"411019df-3aab-4e10-90a2-6247b4356d8c","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def estimateBatteryRequired(distance: Double, consumptionRate: Double): Double =\n  try {\n    if (consumptionRate <= 0) throw new IllegalArgumentException(\"Invalid consumption rate.\")\n    distance * consumptionRate\n  } catch {\n    case ex: Exception =>\n      println(s\"Failed to estimate battery: ${ex.getMessage}\")\n      -1\n  }"}
{"id":"741f9f9c-ae0f-4fba-ab7d-7ff95df9642d","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"import scala.util.Try\ndef safeComputeElevationAdjustment(pointA: (Double, Double), pointB: (Double, Double)): Try[Double] =\n  Try {\n    Math.abs(pointA._1 - pointB._1) * 0.05 + Math.abs(pointA._2 - pointB._2) * 0.03\n  }"}
{"id":"e46fcd50-4e3c-4441-84a8-079e674c961b","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def reserveAirspace(droneId: String, region: String): Unit =\n  try {\n    if (region.isEmpty) throw new Exception(\"Airspace region required.\")\n    println(s\"Airspace for drone $droneId reserved in region $region.\")\n  } catch {\n    case ex: Exception =>\n      println(s\"Reservation failed: ${ex.getMessage}\")\n  }"}
{"id":"180c2cc3-005d-48f6-a234-3666aeb448fe","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait PathPlanningError\ncase class ObstacleDetected(coords: (Double, Double)) extends PathPlanningError\ncase object MaxRangeExceeded extends PathPlanningError\n\ndef planPathWithObstacleAvoidance(start: (Double, Double), end: (Double, Double), obstacles: List[(Double, Double)], maxRange: Double): Either[PathPlanningError, List[(Double, Double)]] =\n  if (obstacles.exists(obs => obs == start || obs == end)) Left(ObstacleDetected(start))\n  else if (Math.abs(start._1 - end._1) + Math.abs(start._2 - end._2) > maxRange) Left(MaxRangeExceeded)\n  else Right(List(start, end))"}
{"id":"190b729e-62a0-47d8-a29e-4fb9f13bbcdd","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class RouteAssignmentFailure(message: String) extends Exception(message)\ndef assignRouteToDrone(route: List[(Double, Double)], droneId: String): Unit =\n  if (route.isEmpty) throw new RouteAssignmentFailure(s\"No route available for drone $droneId.\")\n  println(s\"Route assigned to drone $droneId.\")"}
{"id":"1c029da0-61ec-4348-818f-8935f3e27f6b","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def extractLandingZone(zones: List[(Double, Double)], preference: (Double, Double)): Option[(Double, Double)] =\n  zones.find(zone => zone == preference)"}
{"id":"eae4d819-27f1-400d-a608-c9da025eb8da","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getWeatherCondition(region: String): String =\n  try {\n    if (region == \"restricted\") throw new Exception(\"Weather data not available.\")\n    \"Clear\"\n  } catch {\n    case ex: Exception =>\n      s\"Error: ${ex.getMessage}\"\n  }"}
{"id":"2af1c6fb-2fd7-4dd4-9e8c-afa077aec3d5","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"import scala.util.Try\ndef parseDroneConfig(input: String): Try[Map[String, String]] =\n  Try {\n    input.split(\";\").map(_.split(\"=\")).collect {\n      case Array(k, v) => k -> v\n    }.toMap\n  }"}
{"id":"3b12f4f8-2209-4a78-ad0f-c765e52b7718","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getDropOffPointAddress(addresses: List[String], index: Int): String =\n  if (index < 0 || index >= addresses.length) throw new IndexOutOfBoundsException(\"Drop-off point index out of bounds.\")\n  addresses(index)"}
{"id":"66547006-1806-4bf0-a0b7-05ebdba1caec","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def selectAlternativeDrone(drones: List[(String, Double)]): Option[(String, Double)] =\n  drones.find(_._2 > 50.0)"}
{"id":"07c8bd0b-cb3b-4e72-a445-5681bb90cd00","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def recalculatePathLength(path: List[(Double, Double)]): Double =\n  if (path.size < 2) throw new IllegalArgumentException(\"Path too short to calculate length.\")\n  (path zip path.tail).map { case (a, b) =>\n    val dx = a._1 - b._1\n    val dy = a._2 - b._2\n    Math.sqrt(dx*dx + dy*dy)\n  }.sum"}
{"id":"34b39952-740c-4006-852a-e62d00888c6d","timestamp":1746102750697,"category":"throws","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"sealed trait FlightRestrictionError\ncase object NoFlyZone extends FlightRestrictionError\ncase object InvalidFlightAltitude extends FlightRestrictionError\n\ndef checkFlightRestrictions(region: String, altitude: Double): Either[FlightRestrictionError, String] =\n  if (region == \"NFZ\") Left(NoFlyZone)\n  else if (altitude < 10 || altitude > 120) Left(InvalidFlightAltitude)\n  else Right(\"Allowed\")"}
{"id":"5f40f760-a84c-4799-9c9e-b6aa03fd7838","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimDetails(policyNumber: String, amount: Double)\nsealed trait ClaimSubmissionError\ncase object InvalidPolicyNumber extends ClaimSubmissionError\ncase object InvalidClaimAmount extends ClaimSubmissionError\n\ndef validateClaim(details: ClaimDetails): Either[ClaimSubmissionError, ClaimDetails] =\n  if details.policyNumber.isEmpty then Left(InvalidPolicyNumber)\n  else if details.amount <= 0 then Left(InvalidClaimAmount)\n  else Right(details)"}
{"id":"e188a78f-89af-4acc-92a2-4890a755c654","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def submitClaim(claimId: Int): String = {\n  if (claimId <= 0) {\n    throw new IllegalArgumentException(\"Claim ID must be positive\")\n  }\n  // follow-up steps for submission\n  \"Submission Successful\"\n}\n\ntry {\n  submitClaim(-12)\n} catch {\n  case ex: IllegalArgumentException => \"Invalid claim submission\"\n}"}
{"id":"2b575a14-2760-403e-9354-0031653525cc","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseClaimAmount(amountStr: String): Try[Double] =\n  Try(amountStr.toDouble).filter(_ > 0)"}
{"id":"2a46e177-2c68-4973-8bbb-c92f9c152959","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def findPolicyHolder(policyNumber: String): String = {\n  if (policyNumber != \"123456\") {\n    throw new RuntimeException(\"Policy holder not found\")\n  }\n  \"Derek Carter\"\n}\n\ntry {\n  findPolicyHolder(\"abcdef\")\n} catch {\n  case _: Throwable => \"Unknown policy holder\"\n}"}
{"id":"d877dd6c-253c-4cf8-a016-8fe8521bf0d4","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait PortalError\ncase class DocumentUploadError(reason: String) extends PortalError\n\ndef uploadDocument(fileSize: Int): Either[PortalError, String] =\n  if fileSize > 5_000_000 then Left(DocumentUploadError(\"Max size exceeded\"))\n  else Right(\"Document uploaded successfully\")"}
{"id":"0599db22-987c-44c3-bd2e-844bb6dc5bfa","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def calculateReimbursement(total: Double): Double = {\n  if (total < 0) {\n    throw new IllegalStateException(\"Reimbursement cannot be negative\")\n  }\n  total * 0.8\n}\n\ntry {\n  calculateReimbursement(-100)\n} catch {\n  case ex: IllegalStateException => 0.0\n}"}
{"id":"5a1a4376-1d87-4c52-b998-bfb422c7ae92","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def validateSupportingDocuments(documents: List[String]): Option[List[String]] =\n  if documents.isEmpty then None else Some(documents.filter(_.endsWith(\".pdf\")))"}
{"id":"278da095-61d3-4a92-a4ba-779cd432f584","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class SubmissionValidationException(msg: String) extends Exception(msg)\n\ndef checkSubmissionFields(fields: Map[String, String]): Unit = {\n  if (!fields.contains(\"policyNumber\")) {\n    throw new SubmissionValidationException(\"Missing policy number\")\n  }\n}\n\ntry {\n  checkSubmissionFields(Map(\"claimAmount\" -> \"700\"))\n} catch {\n  case ex: SubmissionValidationException => println(ex.getMessage)\n}"}
{"id":"695e7577-6c11-499f-aff0-902aeaa4604c","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimReference(number: String)\nsealed trait ClaimReferenceError\ncase object EmptyClaimReference extends ClaimReferenceError\n\ndef validateClaimReference(ref: String): Either[ClaimReferenceError, ClaimReference] =\n  if ref.trim.isEmpty then Left(EmptyClaimReference)\n  else Right(ClaimReference(ref.trim))"}
{"id":"3ad96a4d-fc03-4704-858d-446b2a37e23f","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def fetchClaimStatus(claimNumber: String): String = {\n  if (claimNumber == \"\") {\n    throw new NullPointerException(\"Claim number is required\")\n  }\n  \"Approved\"\n}\n\ntry {\n  fetchClaimStatus(\"\")\n} catch {\n  case _: NullPointerException => \"Unknown\"\n}"}
{"id":"37c5eeab-b209-48a6-8dd0-8047a8053ab4","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parsePolicyId(id: String): Try[Int] = Try(id.toInt).filter(_ > 0)"}
{"id":"0e33fb09-c5f0-43cc-a7e8-1479e7737d7c","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def checkApprovalAmount(claimAmount: Double): Double = {\n  if (claimAmount > 10000) {\n    throw new Exception(\"Amount exceeds approval limit\")\n  }\n  claimAmount\n}\n\ntry {\n  checkApprovalAmount(20000)\n} catch {\n  case ex: Exception => -1.0\n}"}
{"id":"11e408be-ab53-47dc-ae46-3c76dcb18e83","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait AttachmentError\ncase object MissingAttachment extends AttachmentError\n\ndef extractFirstEvidenceAttachment(files: List[String]): Either[AttachmentError, String] =\n  files.find(_.startsWith(\"evidence_\")).toRight(MissingAttachment)"}
{"id":"e7849b95-e483-4734-b537-b69a733330f1","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def registerNewPolicyHolder(name: String): String = {\n  if (name == null || name.isBlank) {\n    throw new IllegalArgumentException(\"Invalid policy holder name\")\n  }\n  \"Policy holder registered\"\n}\n\ntry {\n  registerNewPolicyHolder(\"\")\n} catch {\n  case ex: IllegalArgumentException => \"Registration failed\"\n}"}
{"id":"3ec82980-7785-47e4-afbb-321aa5c26da3","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait ClaimDecisionError\ncase class DecisionParseError(msg: String) extends ClaimDecisionError\n\ndef parseDecision(decisionStr: String): Either[ClaimDecisionError, Boolean] =\n  decisionStr.toLowerCase match\n    case \"approve\" => Right(true)\n    case \"deny\" => Right(false)\n    case v => Left(DecisionParseError(s\"Unknown decision '$v'\"))"}
{"id":"dcbfab31-46d7-4792-836f-296e38897c8c","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimNotFoundException(msg: String) extends Exception(msg)\n\ndef getClaimByReference(ref: String): String = {\n  if (ref.trim.isEmpty) {\n    throw new ClaimNotFoundException(\"Claim reference is empty\")\n  }\n  \"Claim details information\"\n}\n\ntry {\n  getClaimByReference(\"\")\n} catch {\n  case _: ClaimNotFoundException => \"Not found\"\n}"}
{"id":"44c67705-9718-4210-b5fb-66c4e492b2a1","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\n\ndef trySubmitOnlineForm(formContent: String): Try[String] = Try {\n  require(formContent.nonEmpty, \"Form content is empty\")\n  \"Form submitted online\"\n}"}
{"id":"7469bbba-b40b-4a45-a3aa-e8de6ee9691e","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def removeClaim(claimNumber: String): Unit = {\n  if (claimNumber.isBlank) {\n    throw new IllegalArgumentException(\"Claim number required for removal\")\n  }\n}\n\ntry {\n  removeClaim(\"\")\n} catch {\n  case ex: IllegalArgumentException => println(\"Removal failed\")\n}"}
{"id":"2d5ecffc-fa70-49fd-b9ec-308b883a867b","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait PolicyValidationError\ncase class InvalidPolicy(reason: String) extends PolicyValidationError\n\ndef checkPolicyNumberFormat(policy: String): Either[PolicyValidationError, String] =\n  if policy.matches(\"[A-Z]{2}\\d{6}\") then Right(policy) else Left(InvalidPolicy(\"Bad format\"))"}
{"id":"154a1ea8-0053-4061-b9a3-75b110359b12","timestamp":1746102770665,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"object IncompleteClaimException extends Exception(\"Incomplete claim details\")\n\ndef submitFinalClaim(details: Map[String, String]): String = {\n  if (!details.contains(\"insuredName\") || !details.contains(\"incidentDate\")) {\n    throw IncompleteClaimException\n  }\n  \"Final claim submitted\"\n}\n\ntry {\n  submitFinalClaim(Map(\"incidentDate\" -> \"2024-05-01\"))\n} catch {\n  case ex: Exception => \"Submission failed\"\n}"}
{"id":"22577fe2-d9cd-4153-be93-6beefb5e4f43","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimDetails(policyNumber: String, claimAmount: Double, incidentDesc: String)\nsealed trait SubmissionError\ncase object InvalidPolicyNumber extends SubmissionError\ncase object ExceedsCoverage extends SubmissionError\n\ndef validateClaim(details: ClaimDetails, maxCoverage: Double): Either[SubmissionError, ClaimDetails] =\n  if details.policyNumber.isEmpty then Left(InvalidPolicyNumber)\n  else if details.claimAmount > maxCoverage then Left(ExceedsCoverage)\n  else Right(details)"}
{"id":"bf62cd77-67d3-42ff-9ad3-c607334cf121","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class PolicyLookupException(msg: String) extends Exception(msg)\n\ndef getPolicyHolderName(policyNumber: String): String =\n  if policyNumber == \"\" then throw new PolicyLookupException(\"Policy number missing\")\n  else if policyNumber == \"0000\" then throw new PolicyLookupException(\"Policy not found\")\n  else \"Alice Smith\""}
{"id":"32eb8d0f-e158-4a78-a880-3f936b1d4b9e","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class Claimant(email: String)\ndef validateClaimantEmail(claimant: Claimant): Option[Claimant] =\n  if claimant.email.contains(\"@\") then Some(claimant)\n  else None"}
{"id":"dec04932-03f4-499a-80ae-9ce7f7a1405c","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def calculateClaimPayout(amount: Double, deductible: Double): Double =\n  if amount <= 0 then throw new IllegalArgumentException(\"Claim amount must be positive\")\n  else if deductible < 0 then throw new IllegalArgumentException(\"Deductible cannot be negative\")\n  else amount - deductible"}
{"id":"52dd33fb-c21c-4526-b0df-b7256307c539","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait FileUploadError\ncase object FileTooLarge extends FileUploadError\ncase object InvalidFileType extends FileUploadError\ncase class UploadedFile(name: String, size: Int, mimeType: String)\ndef checkUploadedFile(file: UploadedFile): Either[FileUploadError, UploadedFile] =\n  if file.size > 1024 * 1024 then Left(FileTooLarge)\n  else if file.mimeType != \"application/pdf\" then Left(InvalidFileType)\n  else Right(file)"}
{"id":"97230541-16a2-4a09-9943-4c9e8bced628","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def saveClaimToDatabase(claimId: String, amount: Double): Unit =\n  try\n    val idNum = claimId.toInt\n    if amount > 10000 then throw new RuntimeException(\"Claim amount exceeds approval limit\")\n  catch\n    case ex: Exception => println(\"Database save error: \" + ex.getMessage)"}
{"id":"cad2ab1a-aae9-49e2-bdba-e8a696b066aa","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\ndef computeAdjustedLoss(claimAmount: Double, adjustmentFactor: Double): Try[Double] =\n  Try {\n    if adjustmentFactor < 0 then sys.error(\"Negative adjustment factor\")\n    claimAmount * adjustmentFactor\n  }"}
{"id":"02cd45e4-75b4-4a87-9124-c53a0534e7b8","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class MissingRequiredDocumentException(msg: String) extends Exception(msg)\ndef processDocumentUpload(documentType: String): String =\n  if documentType != \"proof_of_loss\" then\n    throw new MissingRequiredDocumentException(\"Proof of loss required\")\n  else \"Upload accepted\""}
{"id":"19376093-2f90-49c0-bcb9-282306966b14","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"sealed trait PolicyVerificationError\ncase object PolicySuspended extends PolicyVerificationError\ncase object PolicyExpired extends PolicyVerificationError\ndef verifyPolicyStatus(active: Boolean, expired: Boolean): Either[PolicyVerificationError, String] =\n  if expired then Left(PolicyExpired)\n  else if !active then Left(PolicySuspended)\n  else Right(\"Policy verified\")"}
{"id":"423460cd-e390-43af-9cb1-e084ad1eaa96","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def updateClaimStatus(claimId: String, status: String): Unit =\n  try\n    if status != \"submitted\" && status != \"approved\" then\n      throw new IllegalArgumentException(\"Unsupported status\")\n    // Pretend to update a database\n  catch\n    case e: Exception => println(s\"Failed to update claim $claimId: ${e.getMessage}\")"}
{"id":"81d7c676-5b47-4404-94a9-742846d72da7","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\ndef parseClaimAmount(amountStr: String): Try[Double] =\n  Try(amountStr.toDouble)"}
{"id":"a99feb71-fb86-4ae4-87c6-82a5bf3be01c","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getPaymentReferenceNumber(claimNumber: String): String =\n  if claimNumber.length < 6 then\n    throw new IllegalArgumentException(\"Invalid claim number for payment reference\")\n  else\n    s\"PAY${claimNumber.takeRight(6)}\""}
{"id":"0ad5ecbe-f94a-477a-b488-c0c6b9f7568f","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimSubmission(attachments: List[String])\ndef attachmentsPresent(submission: ClaimSubmission): Option[ClaimSubmission] =\n  if submission.attachments.isEmpty then None else Some(submission)"}
{"id":"0694187f-7b9a-4e33-a19d-4150f85d6899","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def computePremiumReduction(loyaltyYears: Int): Double =\n  try\n    if loyaltyYears < 0 then throw new Exception(\"Loyalty years cannot be negative\")\n    loyaltyYears * 5.0\n  catch\n    case e: Exception => 0.0"}
{"id":"ba1e7895-2196-46b2-8578-f3504aeb215b","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class VehicleClaim(vin: String, isInsured: Boolean)\nsealed trait VehicleClaimError\ncase object UninsuredVehicle extends VehicleClaimError\ndef validateVehicleClaim(claim: VehicleClaim): Either[VehicleClaimError, VehicleClaim] =\n  if claim.isInsured then Right(claim)\n  else Left(UninsuredVehicle)"}
{"id":"8a7c177d-30b9-45bc-a5c7-e3859500ec25","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def checkAdjusterAssignment(adjusterId: String): String =\n  try\n    if adjusterId.isEmpty then\n      throw new NoSuchElementException(\"No adjuster assigned to claim\")\n    else adjusterId\n  catch\n    case _: Throwable => \"Unassigned\""}
{"id":"dcb4a99b-fa4d-40ea-86d5-295f93c69e67","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"import scala.util.Try\ncase class ClaimPhoto(fileName: String)\ndef getPhotoExtension(photo: ClaimPhoto): Try[String] =\n  Try(photo.fileName.split('.').last)"}
{"id":"4a299515-29bc-4441-8ab0-9361c73dba53","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getPolicyHolderContact(policyNumber: String): String =\n  if policyNumber.startsWith(\"CANCELLED\") then\n    throw new Exception(\"Cannot get contact for cancelled policy\")\n  else\n    \"contact@example.com\""}
{"id":"735f17f2-de7a-4204-8afb-c8d6b024829d","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class BankDetails(iban: String)\ndef validateBankDetails(details: BankDetails): Option[BankDetails] =\n  if details.iban.matches(\"[A-Z]{2}\\d{14}\") then Some(details) else None"}
{"id":"2d9dd637-824b-4708-94bb-0cea62f7b67f","timestamp":1746102791546,"category":"throws","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def recalculateDeductible(deductible: Double): Double =\n  try\n    if deductible < 0 then throw new Exception(\"Deductible cannot be negative\")\n    deductible * 0.95\n  catch\n    case ex: Exception => -1.0"}
{"id":"3863025c-7d25-406e-b243-769fd16d5af3","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class StudentAssessmentError(message: String)\ncase class Assessment(score: Double, studentId: String)\ndef parseAssessment(raw: String): Either[StudentAssessmentError, Assessment] = {\n  raw.split(\",\") match {\n    case Array(id, scoreStr) =>\n      scala.util.Try(scoreStr.toDouble).toOption match {\n        case Some(score) => Right(Assessment(score, id))\n        case None => Left(StudentAssessmentError(\"Invalid score format\"))\n      }\n    case _ => Left(StudentAssessmentError(\"Malformed input\"))\n  }\n}"}
{"id":"46d30149-a33a-4697-ad15-53daea0a76c7","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def getStudentProgress(studentId: String): Option[Double] = {\n  val records = Map(\"s1001\" -> 0.82, \"s1002\" -> 0.56)\n  records.get(studentId)\n}"}
{"id":"f5890db2-fb95-4a23-b69d-ccb67d83e4fd","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait EnrollmentError\ncase object StudentNotFound extends EnrollmentError\ncase object CourseNotFound extends EnrollmentError\ncase class AlreadyEnrolled(courseId: String) extends EnrollmentError\n\ndef enrollStudent(studentId: String, courseId: String, enrollments: Set[(String, String)]): Either[EnrollmentError, Set[(String, String)]] = {\n  if (studentId.isEmpty) Left(StudentNotFound)\n  else if (courseId.isEmpty) Left(CourseNotFound)\n  else if (enrollments.contains((studentId, courseId))) Left(AlreadyEnrolled(courseId))\n  else Right(enrollments + ((studentId, courseId)))\n}"}
{"id":"ca1e1d9d-200b-4af4-a2e9-731a4db9b4d6","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def safeGradeAverage(grades: List[Double]): Option[Double] = {\n  if (grades.isEmpty) None\n  else Some(grades.sum / grades.length)\n}"}
{"id":"de45feaf-0bec-4210-a0b1-c999f60b93f6","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"import scala.util.Try\ncase class AnalysisResult(summary: String)\ndef tryAnalyzeLearningPatterns(data: String): scala.util.Try[AnalysisResult] = {\n  scala.util.Try {\n    if (data.isEmpty) throw new IllegalArgumentException(\"No analytics data\")\n    AnalysisResult(s\"Processed $data successfully\")\n  }\n}"}
{"id":"dca18d30-6587-4318-879b-1846a2770f96","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait PerformanceQueryError\ncase object NoPerfDataFound extends PerformanceQueryError\ndef fetchPerformance(studentId: String, db: Map[String, Double]): Either[PerformanceQueryError, Double] = {\n  db.get(studentId).toRight(NoPerfDataFound)\n}"}
{"id":"df824735-5dce-4b88-9715-8959265d4e84","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def extractFirstFeedback(feedback: List[String]): Option[String] = \n  feedback.headOption"}
{"id":"e5ee7e9a-3533-45ad-83f5-ddb9b5e4bf3e","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait SubmissionError\ncase object PlagiarismDetected extends SubmissionError\ncase object SubmissionLate extends SubmissionError\n\ndef validateSubmission(isPlagiarized: Boolean, isLate: Boolean): Either[SubmissionError, String] = {\n  if (isPlagiarized) Left(PlagiarismDetected)\n  else if (isLate) Left(SubmissionLate)\n  else Right(\"Submission accepted\")\n}"}
{"id":"7197ea98-7e87-49d0-b8e1-2d9a9f1476f5","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def safeConvertGradeToLetter(numeric: Double): Option[String] = {\n  if (numeric >= 90) Some(\"A\")\n  else if (numeric >= 80) Some(\"B\")\n  else if (numeric >= 70) Some(\"C\")\n  else None\n}"}
{"id":"e704187a-230f-41be-8733-54ae760ec03d","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"import scala.util.Try\ndef parseTimeSpent(minutesStr: String): Try[Int] = {\n  scala.util.Try(minutesStr.toInt)\n}"}
{"id":"7118bc09-5281-49fb-8fa5-53c931ab06dc","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class StudentNotRegisteredException(msg: String) extends Exception(msg)\ndef getStudentAttendance(studentId: String): Double = {\n  val attendanceRecords = Map(\"2001\" -> 0.95)\n  if (!attendanceRecords.contains(studentId)) {\n    throw new StudentNotRegisteredException(s\"No attendance for $studentId\")\n  }\n  attendanceRecords(studentId)\n}"}
{"id":"41198a96-5b0f-4448-bf2d-0d31e494ac28","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getAssessmentScoreUnsafe(assessmentId: String): Double = {\n  val scores = Map(\"a101\" -> 84.0)\n  if (scores.contains(assessmentId)) scores(assessmentId)\n  else throw new NoSuchElementException(\"Assessment not found\")\n}"}
{"id":"f9fca1c3-0f6d-4a71-b737-ff7c0d9e9acd","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def enrollmentCount(courseId: String): Int = {\n  try {\n    val courseEnrollments = Map(\"CS101\" -> 28)\n    courseEnrollments(courseId)\n  } catch {\n    case _: Exception =>\n      throw new RuntimeException(\"Course does not exist\")\n  }\n}"}
{"id":"725ae3bc-745e-482a-8940-4da1892413fe","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def calculateProgressOrThrow(studentId: String): Double = {\n  val progress = Map(\"stu123\" -> 0.88)\n  if (!progress.contains(studentId)) throw new Exception(\"Student progress unavailable\")\n  progress(studentId)\n}"}
{"id":"4d6904e3-50cf-4631-a4e4-0514afac9ca7","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getGradesFromFile(filename: String): List[Double] = {\n  try {\n    if (filename == \"\") throw new IllegalArgumentException(\"Filename required\")\n    List(95.5, 87.0)\n  } catch {\n    case ex: Exception =>\n      throw new Exception(s\"Failed to read grades: ${ex.getMessage}\")\n  }\n}"}
{"id":"91bfd9c1-7a78-4d93-99e7-331d3a727b06","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class AnalyticsFileNotFound(msg: String) extends Exception(msg)\ndef readLearningAnalyticsFile(file: String): String = {\n  if (file != \"analytics.csv\") throw new AnalyticsFileNotFound(\"File not found\")\n  \"student1, 90\"\n}"}
{"id":"3a22998d-b325-4b8c-a0ef-457b0559e9dc","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def unsafeStudentLookup(id: String): String = {\n  val students = Map(\"alpha\" -> \"Susan Lee\")\n  students.getOrElse(id, throw new Exception(\"Student record not found\"))\n}"}
{"id":"cc989c2a-b2b4-46a5-8423-01e4c533d7ce","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getAverageSessionLength(sessionDurations: List[Int]): Double = {\n  try {\n    sessionDurations.sum.toDouble / sessionDurations.length\n  } catch {\n    case _: Exception => throw new ArithmeticException(\"No sessions to compute average\")\n  }\n}"}
{"id":"ac4a4a8e-256d-4f5f-b747-232511aa84a9","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def findCourseEnrollmentUnsafe(studentId: String, enrollments: Map[String, String]): String = {\n  try {\n    enrollments(studentId)\n  } catch {\n    case _: Exception => throw new Exception(\"Enrollment not found for student\")\n  }\n}"}
{"id":"ac0860ff-eb81-4d3e-8dc2-209cd10b380f","timestamp":1746102816950,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def unsafeFeedbackAccess(feedbackList: List[String], index: Int): String = {\n  if (index < 0 || index >= feedbackList.length) {\n    throw new IndexOutOfBoundsException(s\"No feedback at position $index\")\n  }\n  feedbackList(index)\n}"}
{"id":"7833670f-da51-4e56-836f-6679c1796854","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class AssessmentProcessingError(message: String)\ncase class ProcessedAssessment(score: Double)\ndef analyzeAssessment(rawScore: String): Either[AssessmentProcessingError, ProcessedAssessment] = \n  rawScore.toDoubleOption match\n    case Some(score) if score >= 0 && score <= 100 => Right(ProcessedAssessment(score))\n    case Some(score) => Left(AssessmentProcessingError(s\"Invalid score range: $score\"))\n    case None => Left(AssessmentProcessingError(\"Score is not a number\"))"}
{"id":"14cd6ca4-3a96-45fe-908a-c803beb1dae6","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class GradeCalculationException(message: String) extends Exception(message)\ndef calculateStudentGrade(score: Double): String =\n  if (score < 0 || score > 100)\n    throw new GradeCalculationException(\"Score out of range\")\n  else if (score >= 90) \"A\"\n  else if (score >= 80) \"B\"\n  else if (score >= 70) \"C\"\n  else if (score >= 60) \"D\"\n  else \"F\""}
{"id":"b76c984d-4b6f-4c86-ba6e-5d50cd07cf0a","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait StudentProfileError\ncase object StudentNotFound extends StudentProfileError\ncase class StudentProfile(id: String, name: String)\ndef getStudentProfile(studentId: String): Option[StudentProfile] =\n  if studentId == \"123\" then Some(StudentProfile(\"123\", \"Jane Doe\"))\n  else None"}
{"id":"7048ed00-2af7-4049-9198-35fb8ee54edf","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def parseGradeInput(input: String): Option[Int] =\n  try input.toIntOption match\n    case Some(score) if score >= 0 && score <= 100 => Some(score)\n    case _ => None\n  catch case _ => None"}
{"id":"ef73705c-fe56-46a7-8542-cb4799a8a2ff","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def persistQuizResult(resultId: String): Unit =\n  try\n    if (resultId.isEmpty) throw new Exception(\"Missing result ID\")\n    // Some persistence logic here\n  catch\n    case e: Exception => println(s\"Quiz result persistence failed: ${e.getMessage}\")"}
{"id":"f1eaa5a6-5603-44ea-88ad-2645e216cc6f","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait CourseEnrollmentError\ncase object CourseNotAvailable extends CourseEnrollmentError\ncase class Enrolled(courseId: String)\ndef enrollInCourse(studentId: String, courseId: String): Either[CourseEnrollmentError, Enrolled] =\n  if courseId == \"CS101\" then Right(Enrolled(courseId))\n  else Left(CourseNotAvailable)"}
{"id":"8a6f720e-16b6-4cdc-8738-5bba9f943e5a","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def computeEngagementIndex(clicks: Int, duration: Int): Either[String, Double] =\n  if duration == 0 then Left(\"Duration cannot be zero\")\n  else Right(clicks.toDouble / duration)"}
{"id":"6288ed70-153f-4754-9763-886fbcfbd30b","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def calculateSessionTime(login: String, logout: String): Int =\n  try\n    val start = login.toInt\n    val end = logout.toInt\n    if (end < start) throw new Exception(\"Logout before login\")\n    end - start\n  catch\n    case e: Exception => throw new Exception(\"Session time calculation failed: \" + e.getMessage)"}
{"id":"439cadb3-772a-4269-9af8-ca50633d2da7","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class AttendanceError(message: String)\ncase class AttendanceRecord(studentId: String, present: Boolean)\ndef recordAttendance(studentId: String, present: Boolean): Either[AttendanceError, AttendanceRecord] =\n  if studentId.nonEmpty then Right(AttendanceRecord(studentId, present))\n  else Left(AttendanceError(\"Missing student ID\"))"}
{"id":"043df40e-c3c6-4fdc-982d-11a10d86cdb8","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def fetchActivityScore(activityId: String): Double =\n  if (activityId == \"\") throw new RuntimeException(\"Empty activity ID\")\n  else if (activityId == \"A1\") 25.5\n  else throw new RuntimeException(\"Activity not found\")"}
{"id":"b83bc88b-ff1e-4325-b14c-02b27769835b","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def submitAssignment(assignmentId: String): Either[String, String] =\n  if assignmentId.isEmpty then Left(\"Assignment ID required\")\n  else Right(\"Submission successful\")"}
{"id":"77680fc1-794b-4a6c-b26a-2433c84d09dd","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getModuleGrade(studentId: String, moduleCode: String): String =\n  try\n    if (studentId == \"\" || moduleCode == \"\") throw new Exception(\"Invalid identifiers\")\n    \"B+\"\n  catch\n    case e: Exception => throw new Exception(\"Could not retrieve module grade: \" + e.getMessage)"}
{"id":"ada840b2-4438-4399-9b90-561dfaaf0437","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"import scala.util.Try\ndef safelyParseEngagementMetric(metric: String): Try[Int] =\n  Try(metric.toInt)"}
{"id":"30f49012-2c31-4ccc-9af7-c7deafe49b30","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def calculateLearningPathProgress(learningPathId: String): Double =\n  try\n    if (learningPathId == \"\") throw new Exception(\"Learning path missing\")\n    0.85\n  catch\n    case e: Exception => 0.0"}
{"id":"6371223d-ff70-4c59-8023-cd53fe34cb29","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"sealed trait QuizError\ncase object InvalidQuizId extends QuizError\ncase class QuizScore(quizId: String, score: Int)\ndef getQuizScore(quizId: String): Either[QuizError, QuizScore] =\n  if quizId == \"Q1\" then Right(QuizScore(\"Q1\", 94))\n  else Left(InvalidQuizId)"}
{"id":"42e7aa2e-998c-4b93-81e2-66f5033ca7f8","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def logDashboardAccess(studentId: String): Unit =\n  try\n    if (studentId.isEmpty) throw new Exception(\"Student identifier is missing\")\n  catch\n    case e: Exception => println(\"Dashboard access log failed: \" + e.getMessage)"}
{"id":"0c469829-8ec8-4b55-899d-137e11adc5d5","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\ndef parseAndDivide(metric: String, divisor: Int): Try[Double] =\n  Try(metric.toDouble / divisor)"}
{"id":"b322db9e-c2f6-4772-81d8-e63b21809bb5","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def detectAnomalousBehavior(eventType: String): Unit =\n  try\n    if (eventType != \"login\" && eventType != \"submission\") throw new Exception(\"Unknown event type\")\n  catch\n    case e: Exception => println(\"Anomalous behavior: \" + e.getMessage)"}
{"id":"a0109daf-0345-4864-8ac7-da95dd3cf762","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class LearningResourceError(error: String)\ndef loadLearningResource(resourceId: String): Either[LearningResourceError, String] =\n  if resourceId == \"RES101\" then Right(\"Resource Loaded\")\n  else Left(LearningResourceError(\"Resource not found\"))"}
{"id":"1fbbd628-5fc6-42a4-8d72-971cc93b35bd","timestamp":1746102840765,"category":"throws","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def updateStudentProgression(studentId: String, newLevel: Int): Unit =\n  try\n    if (studentId.isEmpty || newLevel < 0) throw new IllegalArgumentException(\"Invalid progression update\")\n  catch\n    case e: IllegalArgumentException => println(\"Progression update failed: \" + e.getMessage)"}
{"id":"0cb0a824-affe-4ee8-ba87-6622df450854","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"case class RecipeNotFoundException(name: String) extends Exception(s\"Recipe '$name' not found\")\ndef getRecipeByName(name: String): Recipe = {\n  val recipes = List(Recipe(\"Pasta\", List(\"Noodles\"), 20))\n  recipes.find(_.name == name) match {\n    case Some(recipe) => recipe\n    case None => throw new RecipeNotFoundException(name)\n  }\n}"}
{"id":"2b118e25-1379-46c9-aa70-28a651ec8307","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def parseIngredientAmount(ingredient: String, amount: String): Double = {\n  try {\n    amount.toDouble\n  } catch {\n    case e: NumberFormatException => throw new IllegalArgumentException(s\"Invalid amount '$amount' for ingredient '$ingredient'\")\n  }\n}"}
{"id":"70203779-73b5-41d4-b886-7becba9c04d8","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def recommendRecipeForUser(user: User, recipes: List[Recipe]): Recipe = {\n  if (user.preferences.isEmpty) throw new Exception(\"No user preferences given\")\n  recipes.headOption.getOrElse(throw new Exception(\"No recipes available\"))\n}"}
{"id":"88d1d759-473b-404d-8122-648d14cbd90c","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class UserPreferenceLoader {\n  def loadPreferences(userId: Long): Map[String, Int] = {\n    try {\n      if (userId < 0) throw new RuntimeException(\"Invalid user ID\")\n      Map(\"spicy\" -> 2)\n    } catch {\n      case ex: Exception => throw new PreferenceLoadException(userId)\n    }\n  }\n}\nclass PreferenceLoadException(id: Long) extends Exception(s\"Could not load preferences for user $id\")"}
{"id":"4a5083cf-db16-4943-8769-8209af483c70","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def computeRecipeScore(user: User, recipe: Recipe): Int = {\n  try {\n    if (user.allergies.exists(recipe.ingredients.contains))\n      throw new Exception(\"Allergy found in recipe\")\n    42\n  } catch {\n    case _: Exception => -1\n  }\n}"}
{"id":"71902f9a-10d0-465e-8791-386395348fe8","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def logRecipeRecommendation(userId: Long, recipe: Recipe): Unit = {\n  try {\n    if (userId == 0) throw new Exception(\"Invalid userId\")\n    val logMsg = s\"User $userId recommended ${recipe.name}\"\n    println(logMsg)\n  } catch {\n    case ex: Exception => println(\"Logging failed: \" + ex.getMessage)\n  }\n}"}
{"id":"044559d1-ef43-4408-88b2-b7e359e68a35","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def getFavoriteCuisine(user: User): String = {\n  try {\n    user.favorites.headOption.getOrElse(throw new Exception(\"No favorite found\"))\n  } catch {\n    case ex: Exception => \"unknown\"\n  }\n}"}
{"id":"a3dedc2b-8bfa-4094-a7ed-f714a529c05e","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def filterRecipesIfVegan(recipes: List[Recipe], vegan: Boolean): List[Recipe] = {\n  try {\n    if (vegan) recipes.filter(_.isVegan)\n    else recipes\n  } catch {\n    case _: Exception => throw new Exception(\"Vegan filtering failed\")\n  }\n}"}
{"id":"cdd971e1-474e-47cb-9c8a-3a7730e765e6","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def loadUserHistory(userId: Long): List[Recipe] = {\n  try {\n    if (userId < 10) throw new Exception(\"User history not found\")\n    List(Recipe(\"Soup\", List(\"Water\"), 10))\n  } catch {\n    case ex: Exception => throw ex\n  }\n}"}
{"id":"479ee511-a4b1-4117-b9be-b55e4699402b","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"object RecommendationRunner {\n  def start(user: User): Unit = {\n    try {\n      val rec = recommendRecipeForUser(user, Nil)\n      println(rec.name)\n    } catch {\n      case ex: Exception => println(s\"Error: ${ex.getMessage}\")\n    }\n  }\n}"}
{"id":"cc3213ff-8031-426d-9653-e7ef041fac7a","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"sealed trait RecommendationError\ncase class AllergyConflict(ingredient: String) extends RecommendationError\ncase object NoRecipesAvailable extends RecommendationError\n\ndef recommendRecipe(user: User, recipes: List[Recipe]): Either[RecommendationError, Recipe] =\n  if (recipes.isEmpty) Left(NoRecipesAvailable)\n  else if (user.allergies.exists(recipes.head.ingredients.contains))\n    Left(AllergyConflict(user.allergies.head))\n  else Right(recipes.head)"}
{"id":"6c93976e-497c-4877-b7d5-bb9fc6ba8653","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeParseCookingTime(time: String): Option[Int] =\n  scala.util.Try(time.toInt).toOption"}
{"id":"523e9683-938e-4bd2-b6d6-e028f0d584e0","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"sealed trait ParseIngredientError\ncase object IngredientMissing extends ParseIngredientError\ncase object InvalidAmountFormat extends ParseIngredientError\n\ndef parseIngredientLine(line: String): Either[ParseIngredientError, (String, Int)] =\n  line.split(\":\") match {\n    case Array(name, amount) =>\n      scala.util.Try(amount.trim.toInt).toOption.toRight(InvalidAmountFormat).map(n => (name.trim, n))\n    case _ => Left(IngredientMissing)\n  }"}
{"id":"b81224b8-a5c2-44d6-b293-dbc0b6da1c46","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"trait Recommender\ncase class NotEnoughRecipes extends Throwable\n\ndef selectRandomRecipe(recipes: List[Recipe]): scala.util.Try[Recipe] =\n  scala.util.Try(recipes(scala.util.Random.nextInt(recipes.length)))\n    .recoverWith { case _: Throwable => scala.util.Failure(NotEnoughRecipes()) }"}
{"id":"8ce48cd0-5f57-409a-807f-c5794c40cfac","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeGetFavoriteCuisine(user: User): Option[String] =\n  user.favorites.headOption"}
{"id":"2bdb0f0a-3e77-430f-b54e-5b6074b350d5","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"sealed trait PreferenceError\ncase object UserUnknown extends PreferenceError\n\ndef getUserCuisinePreference(userId: Long): Either[PreferenceError, String] =\n  if (userId == 999) Left(UserUnknown)\n  else Right(\"Italian\")"}
{"id":"d134ef84-95ac-4c06-8139-19ba6b872d68","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def parseUserSuppliedRating(input: String): Either[String, Int] =\n  scala.util.Try(input.toInt).toEither.left.map(_ => s\"Invalid rating: $input\")"}
{"id":"2036e852-8d65-4c71-8f8a-4dfebed24a26","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def findRecipeByName(recipes: List[Recipe], name: String): Option[Recipe] =\n  recipes.find(_.name == name)"}
{"id":"99bcf0fe-cbc1-406b-9380-ccc5a7c4358d","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recommendVegan(recipes: List[Recipe]): Option[Recipe] =\n  recipes.find(_.isVegan)"}
{"id":"b182c517-4a39-4547-93d7-ceb8ffd26073","timestamp":1746102859506,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def computePersonalizedScore(user: User, recipe: Recipe): Either[String, Int] =\n  if (user.allergies.exists(recipe.ingredients.contains))\n    Left(\"Recipe contains allergens for user\")\n  else Right(80)"}
{"id":"b675cbb8-8e00-4d2b-9f45-4d02a83b422b","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class User(id: String, preferences: List[String])\ncase class Recipe(name: String, ingredients: List[String])\nsealed trait RecipeRecommendationError\ncase object UserNotFound extends RecipeRecommendationError\ncase object NoMatchingRecipes extends RecipeRecommendationError\n\ndef recommendRecipes(user: User, recipes: List[Recipe]): Either[RecipeRecommendationError, List[Recipe]] =\n  val matches = recipes.filter(r => r.ingredients.exists(user.preferences.contains))\n  if matches.isEmpty then Left(NoMatchingRecipes)\n  else Right(matches)\n"}
{"id":"286378b3-f097-4af9-8ff8-7379f992d5cf","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class RecommendationEngine {\n  def findRecipeByName(name: String, recipes: List[String]): String = {\n    for (r <- recipes) {\n      if (r == name) return r\n    }\n    throw new NoSuchElementException(\"Recipe not found\")\n  }\n}\n\nobject Runner {\n  def main(args: Array[String]): Unit = {\n    try {\n      val engine = new RecommendationEngine\n      engine.findRecipeByName(\"Sushi\", List(\"Pizza\", \"Salad\"))\n    } catch {\n      case e: NoSuchElementException => println(e.getMessage)\n    }\n  }\n}\n"}
{"id":"d9986bba-eb41-43e4-bc23-ea149e5b1e12","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"sealed trait PreferenceError\ncase object EmptyPreferenceList extends PreferenceError\n\ndef topPreference(preferences: List[String]): Either[PreferenceError, String] =\n  preferences.headOption.toRight(EmptyPreferenceList)\n"}
{"id":"bc1d5079-c621-4a3f-9c6d-84cfe92f61d7","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def parseRating(ratingStr: String): Option[Int] =\n  scala.util.Try(ratingStr.toInt).toOption.filter(r => r >= 1 && r <= 5)\n"}
{"id":"38c2d813-0c4a-49ca-8674-85ba1bc40520","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class IngredientMismatchException(msg: String) extends Exception(msg)\n\ndef findRecipesWithIngredients(selected: List[String], recipes: Map[String, List[String]]): List[String] = {\n  if (selected.isEmpty) throw new IngredientMismatchException(\"No ingredients selected\")\n  recipes.filter { case (_, ings) => selected.forall(ings.contains) }.keys.toList\n}\n"}
{"id":"b0b67d5f-5363-4e74-8384-30437e1597af","timestamp":1746102877775,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeGetFirstIngredient(ingredients: List[String]): Option[String] =\n  ingredients.headOption\n"}
{"id":"c332d17e-99f5-43c8-a97c-a0154b24da1e","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"sealed trait UserPreferenceError\ncase object PreferenceNotFound extends UserPreferenceError\n\ndef lookupPreference(userPreferences: Map[String,String], key: String): Either[UserPreferenceError, String] =\n  userPreferences.get(key).toRight(PreferenceNotFound)\n"}
{"id":"2c618e4d-342e-438d-aca7-2f80d9fd0f31","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class InvalidRecipeException(msg: String) extends Exception(msg)\n\ndef validateRecipe(recipe: Map[String, Any]): Unit = {\n  if (!recipe.contains(\"name\")) throw new InvalidRecipeException(\"Missing recipe name\")\n  if (!recipe.contains(\"ingredients\")) throw new InvalidRecipeException(\"Missing ingredients\")\n}\n"}
{"id":"c586bb67-ffa2-49a2-b96b-1ec2153a3ab6","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class RecommendationError(message: String)\n\ndef parseCalories(caloriesStr: String): Either[RecommendationError, Int] =\n  scala.util.Try(caloriesStr.toInt)\n    .toEither\n    .left.map(_ => RecommendationError(\"Invalid calorie input\"))\n"}
{"id":"94e5a8bb-6cf1-4f29-a6bf-6e8d8793c638","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recommendDiets(dietPref: Option[String]): Either[String, String] =\n  dietPref match {\n    case Some(diet) => Right(s\"Recommended diet: $diet\")\n    case None => Left(\"No dietary preferences defined.\")\n  }\n"}
{"id":"5b63938d-b76e-4e0e-ad90-91b316336c91","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class RecipeFileNotFoundException extends Exception(\"Recipe file not found.\")\n\ndef loadRecipeFile(filename: String): List[String] = {\n  if (filename.endsWith(\".txt\")) List(\"Apple Pie\", \"Potato Soup\")\n  else throw new RecipeFileNotFoundException\n}\n"}
{"id":"1ef7aaa5-bd78-4b2e-9192-a2c7e1d6edf1","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class AllergyException(msg: String) extends Exception(msg)\n\ndef checkAllergy(allergies: List[String], recipeIngredients: List[String]): Boolean = {\n  for (allergy <- allergies) {\n    if (recipeIngredients.contains(allergy)) throw new AllergyException(s\"Allergy detected for: $allergy\")\n  }\n  true\n}\n"}
{"id":"7775b21d-3db2-4790-9548-1546f6cd1af4","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def fetchRecipeRating(userId: String, recipeId: String): Option[Int] =\n  val key = userId + \":\" + recipeId\n  val database = Map(\"u1:r1\" -> 5, \"u2:r2\" -> 4)\n  database.get(key)\n"}
{"id":"9a5af76f-f2e8-4dab-bfcf-6019c5d09671","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class RecipeParsingError(reason: String)\n\ndef parseRecipeJson(json: String): Either[RecipeParsingError, Map[String, Any]] =\n  if json.trim.isEmpty then Left(RecipeParsingError(\"Empty JSON\"))\n  else Right(Map(\"name\" -> \"Lasagna\", \"ingredients\" -> List(\"pasta\", \"cheese\")))\n"}
{"id":"8c7b5ba5-587c-4cb0-a90b-a60056811c7a","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def trySuggest(recipes: List[String], query: String): String = {\n  try {\n    if (!recipes.contains(query)) throw new Exception(\"Suggestion not found\")\n    else query\n  } catch {\n    case _: Exception => \"Default Suggestion: Salad\"\n  }\n}\n"}
{"id":"be6d0921-2f14-4751-93f7-20ac25d74f1e","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def findVeganRecipe(recipes: List[(String, Boolean)]): Option[String] =\n  recipes.collectFirst { case (name, isVegan) if isVegan => name }\n"}
{"id":"342e0a0e-932c-4eba-8109-fadb20f595fa","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def validateUserAge(age: Int): Int = {\n  if (age < 0) throw new IllegalArgumentException(\"Age cannot be negative\")\n  else age\n}\n"}
{"id":"2dc66b87-7492-4cf9-9e43-4a6f45276028","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def parseIngredientCount(countStr: String): Either[String, Int] =\n  scala.util.Try(countStr.toInt) match {\n    case scala.util.Success(n) => Right(n)\n    case scala.util.Failure(_) => Left(\"Invalid ingredient count\")\n  }\n"}
{"id":"6d728878-76cf-4751-bcfc-44c4d6b08ca4","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class EmptyRecipeListException extends Exception(\"No recipes available.\")\n\ndef getFirstRecipe(recipes: List[String]): String = {\n  if (recipes.nonEmpty) recipes.head\n  else throw new EmptyRecipeListException\n}\n"}
{"id":"1945028d-2bad-4f36-ae49-27a186055c6b","timestamp":1746102877776,"category":"throws","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safelySelectCuisine(options: List[String], index: Int): Option[String] =\n  options.lift(index)\n"}
{"id":"88a35df0-4189-40f4-8fc8-2fd033c9d54d","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"case class Donation(donorId: Long, amount: Double, projectId: Long)\ncase class ProjectNotFound(id: Long) extends Exception(\"Project not found\")\ndef createDonation(donorId: Long, amount: Double, projectId: Long): Donation = {\n  if (amount <= 0) throw new IllegalArgumentException(\"Amount must be positive\")\n  if (!projectExists(projectId)) throw new ProjectNotFound(projectId)\n  Donation(donorId, amount, projectId)\n}\ndef projectExists(pid: Long): Boolean = pid == 1001L"}
{"id":"c0274f3d-13c8-4054-a733-3308b40178e3","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def updateCharityGoal(charityId: Long, newGoal: Double): Unit = {\n  try {\n    if (newGoal < 0) throw new IllegalArgumentException(\"Goal cannot be negative\")\n    val charityFound = charityId == 10L\n    if (!charityFound) throw new NoSuchElementException(\"Charity does not exist\")\n  } catch {\n    case _: IllegalArgumentException => println(\"Invalid goal amount\")\n    case _: NoSuchElementException => println(\"Charity missing\")\n  }\n}"}
{"id":"c1a8f704-88e2-4438-8a06-9303f1b5f929","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def allocateFunds(projectId: Long, amount: Double): String = {\n  if (amount > availableFunds(projectId))\n    throw new RuntimeException(\"Insufficient funds\")\n  \"Funds Allocated\"\n}\ndef availableFunds(projectId: Long): Double = 42.0"}
{"id":"6306e0fc-686c-46f2-a6d4-c92eddbc41b5","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"case class DonorNotFound(id: Long) extends Exception\ncase class ProjectOverfunded(projectId: Long) extends Exception\n\ndef donateToProject(donorId: Long, projectId: Long, amount: Double): Unit = {\n  if (donorId < 0) throw new DonorNotFound(donorId)\n  if (isOverfunded(projectId)) throw new ProjectOverfunded(projectId)\n}\ndef isOverfunded(id: Long): Boolean = id == 2L"}
{"id":"e005464e-18ce-4e70-b7b3-bce2363f7662","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def fetchDonation(id: Long): String = {\n  try {\n    if (id == 0L) throw new NoSuchElementException(\"Donation not found\")\n    \"Donation found\"\n  } catch {\n    case e: Exception => \"Error: \" + e.getMessage\n  }\n}"}
{"id":"dc9d293d-e257-4f8f-9dc9-84b30d8977de","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def registerVolunteer(volunteerId: Long, charityId: Long): Unit = {\n  if (existingVolunteer(volunteerId, charityId))\n    throw new IllegalStateException(\"Volunteer already registered\")\n}\ndef existingVolunteer(volunteerId: Long, charityId: Long): Boolean = volunteerId == 1L"}
{"id":"bfccc967-262c-48ad-b6cf-920295417baa","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def transferToCharity(charityId: Long, amount: Double): String = {\n  try {\n    if (!charityActive(charityId))\n      throw new IllegalStateException(\"Charity is Inactive\")\n    s\"Transferred $amount to $charityId\"\n  } catch {\n    case e: Exception => s\"Transfer failed: ${e.getMessage}\"\n  }\n}\ndef charityActive(id: Long): Boolean = id == 99L"}
{"id":"ff37b1b2-ce1f-433f-83ba-98dce680cabf","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def getCharityDetails(charityId: Long): String = {\n  if (charityId <= 0) throw new IllegalArgumentException(\"Invalid charity id\")\n  if (charityId != 501L) throw new NoSuchElementException(\"Charity not found\")\n  \"Charity Found\"\n}"}
{"id":"65aa5fa1-ef34-40c5-8ea7-565779b714cf","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def pledgeDonation(donorId: Long, amount: Double): Long = {\n  if (amount < 5)\n    throw new IllegalArgumentException(\"Minimum donation amount is $5\")\n  System.currentTimeMillis()\n}"}
{"id":"b9647931-2a57-4303-8938-779569c99632","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def processWithdrawal(userId: Long, charityId: Long, amount: Double): Unit = {\n  try {\n    if (amount <= 0) throw new IllegalArgumentException(\"Invalid amount\")\n    val permitted = userId == 77L\n    if (!permitted) throw new SecurityException(\"Not authorized\")\n  } catch {\n    case e: Exception => println(\"Withdrawal failed: \" + e.getMessage)\n  }\n}"}
{"id":"38ba9968-aac9-46f7-a296-a436112effbc","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait DonationPlatformError\ncase object DonationNegativeAmount extends DonationPlatformError\ncase object ProjectDoesNotExist extends DonationPlatformError\ncase class DonationMade(donorId: Long, projectId: Long, amount: Double)\ndef safeMakeDonation(donorId: Long, amount: Double, projectId: Long): Either[DonationPlatformError, DonationMade] = {\n  if (amount < 0) Left(DonationNegativeAmount)\n  else if (!projectExists(projectId)) Left(ProjectDoesNotExist)\n  else Right(DonationMade(donorId, projectId, amount))\n}\ndef projectExists(pid: Long): Boolean = pid == 42L"}
{"id":"35aae4ae-9493-4250-981b-7ee6bcc73237","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait RegistrationError\ncase object AlreadyRegistered extends RegistrationError\ncase object CharityNotPresent extends RegistrationError\ndef tryRegisterVolunteer(volunteerId: Long, charityId: Long, existing: Boolean): Either[RegistrationError, String] = {\n  if (existing) Left(AlreadyRegistered)\n  else if (charityId <= 0) Left(CharityNotPresent)\n  else Right(\"Registration successful\")\n}"}
{"id":"4797d68e-60d8-4959-a1e7-d8fdf954bce5","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait PledgeError\ncase object PledgeAmountTooLow extends PledgeError\ncase class PledgingSuccess(pledgeId: Long)\ndef attemptPledgeDonation(userId: Long, amount: Double): Either[PledgeError, PledgingSuccess] = {\n  if (amount < 5) Left(PledgeAmountTooLow)\n  else Right(PledgingSuccess(System.currentTimeMillis))\n}"}
{"id":"f5353806-3f02-4a33-abf1-b5e7d5ba21f3","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getDonationById(id: Long): Option[String] =\n  if (id > 0 && id < 100) Some(\"Donation record found\") else None"}
{"id":"e4b17a19-db4f-440b-9b35-d6198cb9527b","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeAllocateFunds(projectId: Long, amount: Double, available: Double): Try[String] =\n  Try {\n    require(amount > 0, \"Amount must be positive\")\n    require(amount <= available, \"Insufficient funds\")\n    \"Funds Allocated\"\n  }"}
{"id":"6cefd64d-3e36-41db-8e16-34b13635ab84","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait WithdrawalError\ncase object NotAuthorized extends WithdrawalError\ncase object NegativeWithdrawal extends WithdrawalError\ncase object CharityMissing extends WithdrawalError\ndef safeProcessWithdrawal(userId: Long, charityId: Long, amount: Double, permitted: Boolean, exists: Boolean): Either[WithdrawalError, Unit] = {\n  if (!permitted) Left(NotAuthorized)\n  else if (!exists) Left(CharityMissing)\n  else if (amount <= 0) Left(NegativeWithdrawal)\n  else Right(())\n}"}
{"id":"7c045758-30f5-407c-b763-7c7b8ae517a1","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def findCharity(charityId: Long): Option[String] =\n  if (Set(10L,20L,30L).contains(charityId)) Some(\"Charity details\") else None"}
{"id":"baaba048-6056-404d-bb6b-a4b4ccadcc66","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"import scala.util.Try\n\ndef safeCreateProject(name: String, initialGoal: Double): Try[(String, Double)] =\n  Try(require(initialGoal > 0, \"Initial goal must be positive\")).map(_ => (name, initialGoal))"}
{"id":"3bbf79b0-ba00-4826-9330-82f8ba185562","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait TransferError\ncase object CharityInactive extends TransferError\ncase class TransferSuccess(amount: Double, charityId: Long)\ndef safeTransferToCharity(charityId: Long, amount: Double, isActive: Boolean): Either[TransferError, TransferSuccess] = {\n  if (!isActive) Left(CharityInactive)\n  else Right(TransferSuccess(amount, charityId))\n}"}
{"id":"158eae3a-8f87-458d-a968-eaada61a71b9","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def safeFetchDonation(id: Long): Either[String, String] =\n  if (id == 0L) Left(\"Donation not found\") else Right(\"Donation found\")"}
{"id":"0dd7d536-8aca-4f39-818a-0883fdf6525e","timestamp":1746102897894,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def tryUpdateCharityGoal(charityId: Long, newGoal: Double, isPresent: Boolean): Option[String] =\n  if (newGoal < 0) None\n  else if (!isPresent) None\n  else Some(s\"Updated goal for $charityId to $newGoal\")"}
{"id":"e63fdb58-da2b-4992-bf15-8a31fb66eaf4","timestamp":1746102923703,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class DonationRequest(donorEmail: String, amount: Double)\nobject DonationValidator:\n  def validate(request: DonationRequest): Option[String] =\n    if request.amount <= 0 then Some(\"Donation amount must be positive.\")\n    else if !request.donorEmail.contains(\"@\") then Some(\"Donor email is invalid.\")\n    else None"}
{"id":"57c9fc38-365d-4e82-b0b5-3c2559fd4402","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait DonationError\ncase object InsufficientBalance extends DonationError\ncase object InvalidRecipient extends DonationError\ncase class Donation(amount: Double, recipient: String)\ndef processDonation(donorBalance: Double, donation: Donation): Either[DonationError, Double] =\n  if donorBalance < donation.amount then Left(InsufficientBalance)\n  else if donation.recipient.isEmpty then Left(InvalidRecipient)\n  else Right(donorBalance - donation.amount)"}
{"id":"b38a0e9e-261e-4564-ae90-97c2291a19b2","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"import scala.util.Try\ncase class Charity(id: Int, name: String)\ndef parseCharityId(idStr: String): Try[Int] = Try(idStr.toInt)\ndef findCharity(id: Int, charities: List[Charity]): Option[Charity] =\n  charities.find(_.id == id)"}
{"id":"3bbad2cc-2bce-4654-8efa-74de608488d3","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object PaymentDeclined extends PaymentError\ncase object CardExpired extends PaymentError\ncase object InvalidPaymentDetails extends PaymentError\ncase class Payment(cardNumber: String, expYear: Int, amount: Double)\ndef handlePayment(payment: Payment): Either[PaymentError, String] =\n  if payment.amount < 1 then Left(PaymentDeclined)\n  else if payment.expYear < 2024 then Left(CardExpired)\n  else if payment.cardNumber.length < 10 then Left(InvalidPaymentDetails)\n  else Right(\"Payment successful\")"}
{"id":"36b0e398-34d2-4e5f-9995-22fa13aa4787","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def findDonorByEmail(email: String, donors: List[String]): Option[String] =\n  donors.find(_ == email)"}
{"id":"77835064-1fb9-40fd-8097-f1b006db27cd","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"import scala.util.Try\ndef calculateGiftAid(amount: Double): Try[Double] =\n  Try {\n    require(amount > 0, \"Donation must be positive\")\n    amount * 0.25\n  }"}
{"id":"e00ac987-8986-486b-b971-857c6d15b514","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"case class User(id: Int, email: String)\ncase class UserNotFound(email: String) extends Throwable\nobject UserRepository:\n  def findUserByEmail(email: String, users: List[User]): User =\n    users.find(_.email == email).getOrElse(throw UserNotFound(email))"}
{"id":"e3083058-8b31-43ee-9d42-3fd866dc8c7e","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class PaymentException(message: String) extends Exception(message)\ndef processCardPayment(amount: Double, cardNo: String): String =\n  if cardNo.isEmpty then throw PaymentException(\"Card number missing\")\n  else if amount <= 0 then throw PaymentException(\"Invalid payment amount\")\n  else \"Card payment successful\""}
{"id":"fb05a82f-bae4-4a0e-8155-359790db49a8","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def submitDonation(amount: Double): String =\n  try {\n    if amount < 1 then throw new IllegalArgumentException(\"Minimal donation is 1\")\n    s\"Accepted donation: $$amount\"\n  } catch {\n    case e: IllegalArgumentException => s\"Failed: $${e.getMessage}\"\n  }"}
{"id":"758504c9-f1fb-48d1-87f2-fff2db10e9a3","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class CharityNotFound(name: String) extends Exception(s\"Charity $$name not found\")\ndef getCharityDetails(name: String, supportedCharities: List[String]): String =\n  if !supportedCharities.contains(name) then throw CharityNotFound(name)\n  else s\"Charity: $$name\""}
{"id":"6f7f575a-6491-42a3-94ae-609831399ba6","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def parseDonationReference(ref: String): String =\n  try {\n    if ref.matches(\"^D\\d{4}$\") then s\"Reference $$ref is valid\"\n    else throw new Exception(\"Invalid donation reference format\")\n  } catch {\n    case e: Exception => \"Reference check failed\"\n  }"}
{"id":"70af2d43-f081-4122-9782-78fac4d84fad","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def logTransactionFailure(message: String): Unit =\n  try {\n    println(s\"Transaction failed: $$message\")\n  } catch {\n    case _: Throwable => ()\n  }"}
{"id":"241d3384-21f1-44f9-a76e-0473146105ba","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"class DonationLimitExceeded extends Exception(\"Donation exceeded single transaction limit\")\ndef checkDonationLimit(amount: Double): Unit =\n  if amount > 10000 then throw new DonationLimitExceeded\n  ()"}
{"id":"9cc47e3d-1ab6-42f5-b236-b0232af6cee9","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"sealed trait DonationProcessingError\ncase object BlockchainUnavailable extends DonationProcessingError\ncase class BlockchainReceipt(id: String)\ndef processCryptoDonation(networkReachable: Boolean): Either[DonationProcessingError, BlockchainReceipt] =\n  if !networkReachable then Left(BlockchainUnavailable)\n  else Right(BlockchainReceipt(\"tx123\"))"}
{"id":"eac92e65-932e-4e48-8bb6-af38e4acb7a6","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def safeGetDonorNickname(nicknames: Map[String, String], donorId: String): Option[String] =\n  nicknames.get(donorId)"}
{"id":"90a97421-7f65-4759-a6df-ff9530a2c1b4","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class Recipient(name: String)\ndef findRecipient(name: String, recipients: List[Recipient]): Either[String, Recipient] =\n  recipients.find(_.name == name).toRight(\"Recipient not found\")"}
{"id":"495d1c85-4af5-46f7-8b5c-e401e55d1abf","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def safeDivideDonationToCauses(total: Double, count: Int): Option[Double] =\n  if count <= 0 then None else Some(total / count)"}
{"id":"3435d1c9-0ade-4967-9b53-81a672eb2b62","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"object DonationIDGenerator:\n  def generateId(prefix: String, seq: Int): Either[String, String] =\n    if prefix.isEmpty then Left(\"Prefix is required\")\n    else Right(s\"$$prefix-$$seq\")"}
{"id":"fc8fef2f-9db7-4ee2-86ce-14fb105c932b","timestamp":1746102923704,"category":"throws","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def storeGiftMessage(message: String): String =\n  try\n    if message.length > 250 then throw new Exception(\"Message too long\")\n    else \"Message stored successfully\"\n  catch\n    case e: Exception => s\"Error: $${e.getMessage}\""}
{"id":"c9eefc82-3151-42e7-9c20-c3ad10cf1438","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class ScoreUpdate(team: String, score: Int)\nsealed trait LiveUpdateError\ncase object InvalidTeamName extends LiveUpdateError\n\ndef incrementScore(update: ScoreUpdate): Either[LiveUpdateError, ScoreUpdate] =\n  if update.team.trim.isEmpty then Left(InvalidTeamName)\n  else Right(update.copy(score = update.score + 1))"}
{"id":"95e36394-0453-4676-9111-4332e9ccb247","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def parseScoreUpdate(payload: String): Either[String, (String, Int)] =\n  val parts = payload.split(\":\")\n  if parts.length == 2 && parts(1).forall(_.isDigit) then\n    Right((parts(0), parts(1).toInt))\n  else\n    Left(\"Malformed score update payload\")"}
{"id":"3613ab05-0b8d-447a-8fd7-756d8c83eba4","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"import scala.util.Try\n\ndef tryParseNewScore(line: String): Option[Int] =\n  Try(line.toInt).toOption"}
{"id":"d86d3d09-c9f9-4136-bb65-008718fb4ca0","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class MatchId(value: String)\nsealed trait SubscriptionError\ncase object InvalidMatchId extends SubscriptionError\n\ndef subscribeToMatch(id: MatchId): Either[SubscriptionError, String] =\n  if id.value.nonEmpty then Right(s\"Subscribed to ${id.value}\")\n  else Left(InvalidMatchId)"}
{"id":"a95b4e7c-4484-4842-8e6b-711d104b5c9c","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait ConnectionError\ncase object ConnectionTimeout extends ConnectionError\ncase object UnauthorizedUser extends ConnectionError\n\ndef connectToScoreFeed(token: String): Either[ConnectionError, String] =\n  if token == \"authorized\" then Right(\"Connected\")\n  else Left(UnauthorizedUser)"}
{"id":"ad8e4adc-915d-48c0-9fca-27283812a114","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeFetchCurrentScore(matchId: String): Option[Int] =\n  if matchId == \"live123\" then Some(17)\n  else None"}
{"id":"5328258f-6d8c-4d3d-91e0-5829dec645e2","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait UpdateStatus\ncase object UpdateSuccess extends UpdateStatus\ncase object UpdateConflict extends UpdateStatus\n\ndef updateTeamScore(team: String, newScore: Int): Either[UpdateStatus, Int] =\n  if newScore >= 0 then Right(newScore)\n  else Left(UpdateConflict)"}
{"id":"40a7e68b-f4aa-4de7-9167-82e12cd98148","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class PlayerStats(player: String, points: Int)\nsealed trait StatsError\ncase object PlayerNotFound extends StatsError\n\ndef retrievePlayerStats(name: String): Either[StatsError, PlayerStats] =\n  if name == \"Alex\" then Right(PlayerStats(\"Alex\", 21))\n  else Left(PlayerNotFound)"}
{"id":"9c812199-322e-4982-9ae6-091a66f3dc10","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"import scala.util.Try\n\ndef parseScoreIncrement(increment: String): Try[Int] =\n  Try(increment.trim.toInt)"}
{"id":"0f8be6c9-8716-487c-9f0e-ac64f3bf0df8","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safelyRemoveSubscriber(subscribers: List[String], subscriber: String): Option[List[String]] =\n  if subscribers.contains(subscriber) then Some(subscribers.filterNot(_ == subscriber))\n  else None"}
{"id":"f85dca9b-426f-4ace-a3c9-b1869d92ab5c","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def addScoreUpdate(updates: List[Int], update: Int): Option[List[Int]] =\n  if update >= 0 then Some(updates :+ update)\n  else None"}
{"id":"810cb607-86dd-4317-88fc-999e24c4ba53","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait FetchError\ncase object ScoreUnavailable extends FetchError\n\ndef fetchLatestScore(matchId: String): Either[FetchError, Int] =\n  if matchId == \"game100\" then Right(42)\n  else Left(ScoreUnavailable)"}
{"id":"0043d139-228c-4054-84f2-06c8621c47bf","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class MatchScore(home: Int, away: Int)\nsealed trait ScoreUpdateError\ncase object NegativeScoreNotAllowed extends ScoreUpdateError\n\ndef updateMatchScore(current: MatchScore, homeDelta: Int, awayDelta: Int): Either[ScoreUpdateError, MatchScore] =\n  val newHome = current.home + homeDelta\n  val newAway = current.away + awayDelta\n  if newHome >= 0 && newAway >= 0 then Right(MatchScore(newHome, newAway))\n  else Left(NegativeScoreNotAllowed)"}
{"id":"941da18f-b23e-45fb-873c-ed2d3c42dcdb","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def parseStreamScore(payload: String): Option[(String, Int)] =\n  val fields = payload.split(\",\")\n  if fields.length == 2 && fields(1).forall(_.isDigit) then\n    Some((fields(0), fields(1).toInt))\n  else None"}
{"id":"056e3721-b48f-4983-be5e-66f3cafe572f","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def getActiveGame(scores: Map[String, Int], gameId: String): Either[String, Int] =\n  scores.get(gameId).toRight(\"Game not found in live feed\")"}
{"id":"17f99c64-23e2-4a62-9110-2e2ae8ffba53","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait SubscriptionResult\ncase class Subscribed(channel: String) extends SubscriptionResult\ncase object AlreadySubscribed extends SubscriptionResult\n\ndef subscribeChannel(current: Set[String], channel: String): Either[SubscriptionResult, Subscribed] =\n  if current.contains(channel) then Left(AlreadySubscribed)\n  else Right(Subscribed(channel))"}
{"id":"77b2f3f8-5cd5-412a-8cd6-186ac86d422b","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait EventParseError\ncase object EventMalformed extends EventParseError\n\ncase class LiveEvent(team: String, score: Int)\n\ndef parseLiveEvent(payload: String): Either[EventParseError, LiveEvent] =\n  val parts = payload.split(\"-\")\n  if parts.length == 2 && parts(1).forall(_.isDigit) then\n    Right(LiveEvent(parts(0), parts(1).toInt))\n  else Left(EventMalformed)"}
{"id":"b9210d1e-f344-4a0d-85d2-a33511bf8c6a","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class Notification(subscriber: String, event: String)\nsealed trait NotificationError\ncase object InvalidSubscriber extends NotificationError\n\ndef sendNotification(to: String, event: String): Either[NotificationError, Notification] =\n  if to.nonEmpty then Right(Notification(to, event))\n  else Left(InvalidSubscriber)"}
{"id":"2ad87d7c-7e55-4002-b425-5285d81502c4","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def toIntList(scores: List[String]): Either[String, List[Int]] =\n  val parsed = scores.map(s => s.toIntOption)\n  if parsed.forall(_.isDefined) then Right(parsed.flatten)\n  else Left(\"At least one score could not be parsed\")"}
{"id":"2d271ed3-9789-4c1f-9bcd-579185a96cb1","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def logScoreUpdate(update: String): Unit =\n  try {\n    if update.isEmpty then throw new IllegalArgumentException(\"Empty update string\")\n    println(\"Score update logged: \" + update)\n  } catch {\n    case e: IllegalArgumentException => println(\"Score update failed: \" + e.getMessage)\n  }"}
{"id":"e61c3de6-b522-49fb-b1de-17b82cd29874","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def incrementScoreUnsafe(score: Int): Int =\n  if score < 0 then\n    throw new IllegalArgumentException(\"Score cannot be negative\")\n  else\n    score + 1"}
{"id":"ced14a06-caad-4d43-9bc0-a931848d0797","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class ScoreStreamNotConnected(message: String) extends RuntimeException(message)\n\ndef fetchStreamScore(streamId: String): Int =\n  if streamId != \"score_live\" then throw new ScoreStreamNotConnected(\"Stream not connected\")\n  11"}
{"id":"008bb7de-8891-4347-9720-79f0ef37fac6","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getScoreOrThrow(scores: Map[String, Int], matchId: String): Int =\n  if scores.contains(matchId) then scores(matchId)\n  else throw new NoSuchElementException(\"No live score for: \" + matchId)"}
{"id":"30d9987a-c42b-4717-ac68-ff89dd4bbb7f","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def updateSubscriberCount(subscribers: Int): Int =\n  try {\n    if subscribers < 0 then throw new Exception(\"Subscriber count cannot be negative\")\n    subscribers + 1\n  } catch {\n    case e: Exception => 0\n  }"}
{"id":"84799003-0f5c-47b5-b5ba-35bc7f3a23cf","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class InvalidScoreFormatException(msg: String) extends Exception(msg)\n\ndef parseScoreStrict(scoreString: String): Int =\n  if scoreString.forall(_.isDigit) then scoreString.toInt\n  else throw new InvalidScoreFormatException(\"Invalid score string format\")"}
{"id":"21eacb40-cb51-44fa-b1cb-7d1882a258a9","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def removeLiveChannel(channels: List[String], channel: String): List[String] =\n  try {\n    if !channels.contains(channel) then throw new Exception(\"Channel not subscribed\")\n    channels.filterNot(_ == channel)\n  } catch {\n    case e: Exception => channels\n  }"}
{"id":"8e64187f-72f1-479d-b963-635ee6ac37ba","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def handleScoreMessage(msg: String): Int =\n  try {\n    msg.toInt\n  } catch {\n    case _: NumberFormatException => -1\n  }"}
{"id":"e1f578b7-160f-4e4f-a659-0541fe2fb551","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def ensureNotGamePaused(gameStatus: String): Unit =\n  if gameStatus == \"paused\" then\n    throw new RuntimeException(\"Cannot update score: Game currently paused\")\n  ()"}
{"id":"87cffe78-8e96-4931-ab45-7e9351db4d78","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class NotificationDeliveryFailure(msg: String) extends Exception(msg)\n\ndef deliverNotificationUnsafe(user: String, notification: String): String =\n  if user == \"\" then throw new NotificationDeliveryFailure(\"No user specified\")\n  s\"Notification sent to $user: $notification\""}
{"id":"d51b170b-3578-4ef7-bf25-e1b359b0e74c","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def divideScores(current: Int, divisor: Int): Int =\n  try {\n    current / divisor\n  } catch {\n    case _: ArithmeticException => 0\n  }"}
{"id":"beb73438-53a1-4b92-aa83-9ecd24523ace","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def parseAndUpdateScore(input: String): Int =\n  val parts = input.split(\":\")\n  if parts.length != 2 then throw new IllegalArgumentException(\"Malformed input\")\n  val score = parts(1).toInt\n  score + 2"}
{"id":"bc2af408-fbf3-415e-af23-c9716d09da04","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def connectToFeedThrows(token: String): String =\n  if token != \"live_token\" then throw new Exception(\"Feed connection failed: Unauthorized\")\n  \"Successfully connected\""}
{"id":"23572292-956b-4895-91d5-6084ba7b2f03","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def validateScoreValue(value: Int): Unit =\n  try {\n    if value < 0 then throw new Exception(\"Negative score value\")\n    ()\n  } catch {\n    case e: Exception => ()\n  }"}
{"id":"e03ef382-9c71-4203-b6cb-bec14f0c7ea1","timestamp":1746102955389,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def ensureSubscriberActive(subscriber: String, activeList: Set[String]): Unit =\n  if !activeList.contains(subscriber) then\n    throw new IllegalStateException(\"Subscriber not active!\")"}
{"id":"d9335cf6-022e-4c27-be05-d074841333c2","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"object ScoreUpdater {\n  def updateLiveScore(matchId: Int, newScore: Int): Int = {\n    if (newScore < 0) throw new IllegalArgumentException(\"Score cannot be negative\")\n    // Pretend we're updating some database\n    newScore\n  }\n}"}
{"id":"33e0dc04-9fe3-40d4-b92e-5728b9ecab63","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class MatchNotFoundException(id: Int) extends Exception(s\"Match with id $id not found\")\n\nobject LiveScoreFetcher {\n  def fetchScore(matchId: Int): Int = {\n    if (matchId == 0) throw new MatchNotFoundException(matchId)\n    42 // placeholder example\n  }\n  def safeFetchScore(matchId: Int): Int = {\n    try fetchScore(matchId)\n    catch case e: Exception => -1\n  }\n}"}
{"id":"43727e79-71de-470a-a466-7b6695dd2fee","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"object ScoreParser {\n  def parseScore(scoreString: String): Int = {\n    try {\n      scoreString.toInt\n    } catch {\n      case _: NumberFormatException => throw new RuntimeException(\"Invalid score format\")\n    }\n  }\n}"}
{"id":"6eecab4e-46e2-46e7-b46d-8e97b41dd167","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"sealed trait ScoreUpdateError\ncase object InvalidScoreFormat extends ScoreUpdateError\ncase object MatchDoesNotExist extends ScoreUpdateError\n\ndef validateAndUpdate(matchId: Int, scoreInput: String): Either[ScoreUpdateError, Int] = {\n  if matchId < 1 then Left(MatchDoesNotExist)\n  else scoreInput.toIntOption match\n    case Some(newScore) if newScore >= 0 => Right(newScore)\n    case _ => Left(InvalidScoreFormat)\n}"}
{"id":"738d2f3c-abad-489d-9089-972a92c0f886","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"import scala.util.Try\n\ndef getNextGoalScorer(input: String): Option[String] =\n  Option(input).filter(_.nonEmpty)\n\nval scorer = getNextGoalScorer(\"Lionel Messi\") match\n  case Some(name) => s\"Next goal by $name\"\n  case None => \"No scorer available\"\n"}
{"id":"5c11f05c-e201-4d78-ae1f-befa00b6ed07","timestamp":1746102964653,"category":"throws","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"import scala.util.{Try, Success, Failure}\n\ncase class LiveScoreRequest(matchId: Int)\n\ndef fetchLiveScoreSafe(request: LiveScoreRequest): Try[Int] =\n  Try {\n    if request.matchId <= 0 then\n      throw new IllegalArgumentException(\"Invalid match ID\")\n    3 // Simulated score\n  }\n\nfetchLiveScoreSafe(LiveScoreRequest(5)).recover {\n  case _: IllegalArgumentException => 0\n}"}
{"id":"4d790baf-9ee7-4de7-8f27-e9aa179c43cd","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class CarNotFoundError(id: String)\nsealed trait FleetError\ncase class InvalidRentalPeriod(reason: String) extends FleetError\ncase class BookingConflict(carId: String) extends FleetError\ncase class Car(id: String, isAvailable: Boolean)\n\ndef findCarById(id: String, fleet: List[Car]): Either[CarNotFoundError, Car] =\n  fleet.find(_.id == id).toRight(CarNotFoundError(id))"}
{"id":"d06c7410-f6f7-4dd3-af6c-13d114c0e4f9","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class CarNotAvailableException(carId: String) extends Exception(s\"Car $carId is not available\")\n\ncase class Car(id: String, available: Boolean)\ndef rentCar(carId: String, fleet: List[Car]): Car = {\n  val carOpt = fleet.find(_.id == carId)\n  if (carOpt.isEmpty) throw new NoSuchElementException(s\"Car $carId not found\")\n  if (!carOpt.get.available) throw new CarNotAvailableException(carId)\n  carOpt.get\n}"}
{"id":"b97078d9-5a59-42d1-baea-d46afd512307","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait ReservationError\ncase object CarAlreadyReserved extends ReservationError\ncase object InvalidDateRange extends ReservationError\n\ncase class Reservation(carId: String, from: Int, to: Int)\ndef validateReservation(r: Reservation, reserved: List[Reservation]): Either[ReservationError, Reservation] =\n  if (r.to <= r.from) Left(InvalidDateRange)\n  else if (reserved.exists(res => res.carId == r.carId && (r.from <= res.to && r.to >= res.from))) Left(CarAlreadyReserved)\n  else Right(r)"}
{"id":"3bdf994a-18e1-4e82-88b6-6ccf8854167c","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def removeCarFromFleet(carId: String, fleet: collection.mutable.Buffer[String]): Unit = {\n  try {\n    if (!fleet.contains(carId)) throw new IllegalArgumentException(s\"No car with id $carId.\")\n    fleet -= carId\n  } catch {\n    case e: IllegalArgumentException => println(\"Failed to remove car: \" + e.getMessage)\n  }\n}"}
{"id":"1f66a93e-bc10-4a61-92f5-f349592eff4d","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ncase class Customer(id: String)\ncase class License(number: String)\nsealed trait LicenseError\ncase object LicenseNotValid extends LicenseError\n\ndef validateLicense(l: Option[License]): Either[LicenseError, License] =\n  l.filter(_.number.nonEmpty).toRight(LicenseNotValid)"}
{"id":"acdb87b8-bab9-4fcd-b0ae-bff44b4307d6","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class InvalidBookingPeriodException(msg: String) extends Exception(msg)\n\ncase class Booking(carId: String, from: Int, to: Int)\ndef submitBooking(booking: Booking): Booking = {\n  if (booking.from >= booking.to)\n    throw new InvalidBookingPeriodException(\"Start date after end date\")\n  booking\n}"}
{"id":"3fc9b438-ac18-4b5c-ab0f-9575c0d66a12","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class BookingRequest(customerId: String, carId: String)\nsealed trait BookingError\ncase object CustomerBlocked extends BookingError\ncase object CarUnderMaintenance extends BookingError\n\ndef tryBooking(request: BookingRequest, blockedCustomers: Set[String], underMaintenance: Set[String]): Either[BookingError, String] =\n  if (blockedCustomers.contains(request.customerId)) Left(CustomerBlocked)\n  else if (underMaintenance.contains(request.carId)) Left(CarUnderMaintenance)\n  else Right(\"Booked\")"}
{"id":"6f5daa09-dd4a-4c8c-b60c-ac77a8156ab8","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def calculateInvoice(amount: Double, discount: Option[Double]): Double = {\n  try {\n    val finalDiscount = discount.getOrElse(0.0)\n    if (finalDiscount < 0 || finalDiscount > 1) throw new IllegalArgumentException(\"Discount out of range\")\n    amount * (1 - finalDiscount)\n  } catch {\n    case e: Exception => 0.0\n  }\n}"}
{"id":"450e3164-20ef-4dd2-892a-47df9e9d8ee1","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ncase class Car(id: String)\ndef parseCarId(str: String): Try[Car] = Try {\n  if (str.startsWith(\"CAR-\") && str.length > 4) Car(str)\n  else throw new Exception(\"Invalid Car Id\")\n}"}
{"id":"0b16022a-6667-4355-a93e-f827e239d62c","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class InvalidCarStatusException(status: String) extends Exception(\"Invalid status: \" + status)\n\ndef updateCarStatus(carId: String, status: String): Unit = {\n  status match {\n    case \"available\" | \"rented\" | \"maintenance\" => ()\n    case _ => throw new InvalidCarStatusException(status)\n  }\n}"}
{"id":"11b851cb-d8c6-4f12-b189-0575474f223f","timestamp":1746102994613,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait FleetUpdateError\ncase class CarDoesNotExist(id: String) extends FleetUpdateError\ncase object FleetCapacityExceeded extends FleetUpdateError\n\ncase class Fleet(max: Int, cars: List[String])\ndef addCarToFleet(id: String, fleet: Fleet): Either[FleetUpdateError, Fleet] =\n  if (fleet.cars.contains(id)) Left(CarDoesNotExist(id))\n  else if (fleet.cars.size >= fleet.max) Left(FleetCapacityExceeded)\n  else Right(fleet.copy(cars = id :: fleet.cars))"}
{"id":"ff13b1bb-fe63-4d3d-8029-9babdd4077c3","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getRentalPrice(days: Int): Double = {\n  try {\n    if (days <= 0) throw new IllegalArgumentException(\"Days must be positive\")\n    30.0 * days\n  } catch {\n    case _: IllegalArgumentException => -1.0\n  }\n}"}
{"id":"8b338e0f-63ae-4c99-aee0-dd4986d04bbb","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait PaymentError\ncase object InsufficientFunds extends PaymentError\ncase object CardDeclined extends PaymentError\ncase object InvalidPaymentDetails extends PaymentError\n\ndef attemptPayment(cardNumber: String, amount: Double): Either[PaymentError, String] =\n  if (amount > 1000) Left(InsufficientFunds)\n  else if (cardNumber.length != 16) Left(InvalidPaymentDetails)\n  else Right(\"Payment Successful\")"}
{"id":"a1e42965-1c89-4bd7-a01d-450fa5ecb58e","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def extendRentalPeriod(current: Int, extension: Int): Int = {\n  try {\n    if (extension <= 0) throw new IllegalArgumentException(\"Extension must be positive\")\n    current + extension\n  } catch {\n    case _: IllegalArgumentException => current\n  }\n}"}
{"id":"82db52ca-cf54-48cf-944c-024107f08690","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ncase class MaintenanceRequest(carId: String, details: String)\ndef validateMaintenanceRequest(request: MaintenanceRequest): Try[MaintenanceRequest] = Try {\n  require(request.details.nonEmpty, \"Details required\")\n  request\n}"}
{"id":"d47e6e74-6bf3-4ecd-944c-b071270ada21","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def cancelBooking(bookingId: String, activeBookings: List[String]): String = {\n  try {\n    if (!activeBookings.contains(bookingId))\n      throw new NoSuchElementException(\"Booking does not exist\")\n    \"Cancelled\"\n  } catch {\n    case e: NoSuchElementException => e.getMessage\n  }\n}"}
{"id":"da76e4be-519a-4040-9dd3-4aac0d7c7001","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class ReturnCarError(reason: String)\ndef canReturnCar(isActiveRental: Boolean): Either[ReturnCarError, String] =\n  if (isActiveRental) Right(\"Return processed\")\n  else Left(ReturnCarError(\"No active rental for this car\"))"}
{"id":"bf0fb689-4b07-4843-bef5-bba14d1d632d","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def chargeExtra(distanceDriven: Double): Double = {\n  try {\n    if (distanceDriven < 0) throw new RuntimeException(\"Negative distance driven\")\n    if (distanceDriven > 1000)\n      throw new IllegalArgumentException(\"Excessive trip detected\")\n    0.05 * distanceDriven\n  } catch {\n    case _: IllegalArgumentException => 100.0\n    case _: Throwable => 0.0\n  }\n}"}
{"id":"25a96d76-02c1-4bff-9b7a-06b5b1d645d5","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ncase class Payment(amount: Double)\ndef safeCharge(payment: Payment): Try[Double] = Try {\n  require(payment.amount > 0, \"Amount must be positive\")\n  payment.amount * 1.1\n}"}
{"id":"bd7ec408-6976-4773-a983-ac9eced6a588","timestamp":1746102994614,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def lookupCustomer(id: String, customers: List[String]): String = {\n  try {\n    customers.find(_ == id).getOrElse(throw new NoSuchElementException(id))\n  } catch {\n    case e: NoSuchElementException => s\"Customer not found: $id\"\n  }\n}"}
{"id":"2bd6622a-6c35-4db6-92db-b6c2b913c1ff","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Car(id: String, available: Boolean)\ndef findAvailableCar(cars: List[Car]): Option[Car] =\n  cars.find(_.available)"}
{"id":"600f22c7-3312-42ef-a892-fc5e89536112","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait FleetError\ncase object CarNotFound extends FleetError\ndef getCarById(cars: List[Car], carId: String): Either[FleetError, Car] =\n  cars.find(_.id == carId).toRight(CarNotFound)"}
{"id":"6f0fc9a5-65b6-4fad-bf49-8e2ecfaa01d4","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ndef parseCarYear(yearString: String): Try[Int] =\n  Try(yearString.toInt)"}
{"id":"5e47475c-0905-4025-b199-d4d614101526","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait RentalError\ncase object CarNotAvailable extends RentalError\ncase object CustomerBanned extends RentalError\ncase class RentalResult(customer: String, car: Car)\ndef rentCar(car: Car, customerActive: Boolean): Either[RentalError, RentalResult] =\n  if (!car.available) Left(CarNotAvailable)\n  else if (!customerActive) Left(CustomerBanned)\n  else Right(RentalResult(\"customerId\", car.copy(available = false)))"}
{"id":"c7064001-9a50-42c7-9b46-fa064112378c","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def returnCar(carOpt: Option[Car]): Either[String, Car] =\n  carOpt.toRight(\"Car not found to return\")\ndef markCarReturned(car: Car): Car =\n  car.copy(available = true)"}
{"id":"758732f8-5367-4d0e-a438-659e9c84fcb9","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Reservation(id: String, valid: Boolean)\ndef cancelReservation(reservation: Reservation): Option[Reservation] =\n  if reservation.valid then Some(reservation.copy(valid = false))\n  else None"}
{"id":"5426e567-33c8-4bf3-ba0d-ef7c79e556a2","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"import scala.util.Try\ndef calculateTotalRentalCost(days: Int, ratePerDay: Double): Try[Double] =\n  Try {\n    require(days > 0)\n    require(ratePerDay >= 0.0)\n    days * ratePerDay\n  }"}
{"id":"48921f24-70dd-4fd8-a9de-73d699c93d17","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait ReservationError\ncase object ReservationNotFound extends ReservationError\ndef getReservationById(reservations: List[Reservation], id: String): Either[ReservationError, Reservation] =\n  reservations.find(_.id == id).toRight(ReservationNotFound)"}
{"id":"923a0205-50ca-4577-b497-be86e17e492a","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def parseLicenseNumber(license: String): Option[String] =\n  if license.matches(\"[A-Z]{2}-\\d{6}\") then Some(license)\n  else None"}
{"id":"37fdbfac-db10-41e4-bfcc-b2877f13be73","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"sealed trait AddCarError\ncase object DuplicateCar extends AddCarError\ndef addCarToFleet(fleet: List[Car], car: Car): Either[AddCarError, List[Car]] =\n  if fleet.exists(_.id == car.id) then Left(DuplicateCar)\n  else Right(car :: fleet)"}
{"id":"5f8d6954-ea1f-4799-a322-1c881c21e8aa","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class CarNotFound(message: String) extends Exception(message)\ndef fetchCar(carId: String, cars: List[Car]): Car =\n  cars.find(_.id == carId).getOrElse(throw new CarNotFound(\"Car not found\"))"}
{"id":"cbbfa6a0-d3d0-41ea-9d54-2ad4a2dc90ec","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def reserveCar(car: Car): Car =\n  if car.available then car.copy(available = false)\n  else throw new Exception(\"Car is not available for reservation\")"}
{"id":"60a18735-78f8-4506-bba6-2816c9291553","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def removeCarFromFleet(fleet: List[Car], targetId: String): List[Car] =\n  if fleet.exists(_.id == targetId) then fleet.filterNot(_.id == targetId)\n  else throw new Exception(\"Car to remove does not exist in fleet\")"}
{"id":"2b614324-4fb3-4f68-b17e-12ab25d109a8","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def parseRentalDays(input: String): Int =\n  try input.toInt\n  catch case _: NumberFormatException => throw new Exception(\"Invalid rental days input\")"}
{"id":"e3a4be18-e6c5-4aab-96c7-43173a3f9581","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def assignCarToCustomer(car: Car, customerId: String): Car =\n  if car.available then car.copy(available = false)\n  else throw new IllegalStateException(\"Car is currently unavailable\")"}
{"id":"834de5fc-2f80-4be9-908a-cf39ac7e9dfe","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getAvailableCars(cars: List[Car]): List[Car] =\n  try cars.filter(_.available)\n  catch case e: Exception => throw new RuntimeException(\"Failed to filter cars\", e)"}
{"id":"a10badf9-3b24-4964-bde2-b3b1e3412fc0","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def bookReservation(reservation: Reservation): Reservation =\n  if reservation.valid then reservation.copy(valid = false)\n  else throw new Exception(\"Reservation is already invalid\")"}
{"id":"79f4efa5-a97b-47ef-92ba-6be6ea0fda39","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def processReturn(car: Car, odometer: Int): Car =\n  if odometer >= 0 then car.copy(available = true)\n  else throw new IllegalArgumentException(\"Negative odometer reading\")"}
{"id":"da031315-d090-47b8-8854-0e29884b650c","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def checkAndGetCar(cars: List[Car], id: String): Car =\n  try cars.find(_.id == id).get\n  catch case _: NoSuchElementException => throw new Exception(\"No car found with specified ID\")"}
{"id":"9e6def06-4e5a-4d1c-9a26-cc54549ae9ea","timestamp":1746103011214,"category":"throws","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def updateRentalPeriod(days: Int): Int =\n  if days <= 0 then throw new Exception(\"Rental period must be positive\")\n  else days"}
