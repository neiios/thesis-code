{"id":"6678c47d-8859-4974-b294-d2087f876784","timestamp":1746097427115,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CustomerInfo(name: String, email: String)\n\ndef fetchCustomerInfo(customerId: String): Option[CustomerInfo] = {\n  val info = DatabaseSimulator.lookupCustomer(customerId) // may return null\n  Option(info)\n}"}
{"id":"0cf02030-a7ab-4422-a200-7ced4f7357c8","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def calculateDiscount(coupon: Option[String]): Double = {\n  coupon match {\n    case Some(code) if code == \"SAVE10\" => 10.0\n    case _ => 0.0\n  }\n}"}
{"id":"95230f45-05e2-45a6-9250-3d567922dd66","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getShippingAddress(userId: String): String = {\n  val address = LegacyAddressBook.findAddress(userId)\n  if (address != null) address else \"Address not found\"\n}"}
{"id":"4f63f62b-6d11-49dc-a778-ce48763bff55","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def applyPromoCode(promo: String): Option[Double] = {\n  Some(promo).filter(_ == \"FREESHIP\").map(_ => 0.0)\n}"}
{"id":"50fd5f0b-395c-47d6-9584-5abb5b580d05","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def updateInventory(productId: String, quantity: Int): Boolean = {\n  val inventoryService = InventoryRemoteService()\n  val result = inventoryService.reserveStock(productId, quantity)\n  if (result != null) result.isSuccessful else false\n}"}
{"id":"07bb70cb-9a92-4508-9e6e-0e20826f4cde","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def safeGetCouponValue(code: String): Option[Double] = {\n  Option(CouponSystem.getValue(code)).filter(_ > 0)\n}"}
{"id":"bfe51e62-ec09-4c63-91a3-0d41f2ae7fad","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getOrderNote(orderId: String): String = {\n  val note = OrderDatabase.fetchOrderNote(orderId)\n  if (note == null) \"No note provided\"\n  else note\n}"}
{"id":"f696bbd5-f722-4372-8c44-4d644dd23c94","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class Cart(items: List[String])\n\ndef getItemCount(cart: Option[Cart]): Int = {\n  cart.map(_.items.size).getOrElse(0)\n}"}
{"id":"2df9ef09-d2f5-4ba1-b94b-de7b9d36a988","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def checkPromoEligibility(customerId: String): Option[String] = {\n  val promo = CustomerLoyaltyService.bestOffer(customerId)\n  Option(promo)\n}"}
{"id":"4fdbfbdf-38ad-428f-b6a7-0661339fe9d7","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getGiftWrapMessage(itemId: String): String = {\n  val message = GiftWrapDB.getMessage(itemId)\n  if (message != null) message else \"No gift message\"\n}"}
{"id":"c6f6f6f3-5d85-4e2f-a633-2a48e63e4cb4","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class PaymentInfo(cardNumber: String, expiry: String)\n\ndef safePaymentInfo(userId: String): Option[PaymentInfo] = {\n  Option(JavaPayAPI.retrievePayment(userId))\n}"}
{"id":"3917aa8f-b3b9-4994-a7a7-f9e68bbe4579","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def assignShippingPartner(orderId: String): String = {\n  val partner = ShippingAPI.selectPartner(orderId)\n  if (partner == null) \"DefaultCarrier\"\n  else partner\n}"}
{"id":"c461e329-2dac-4689-be26-5dcfac37d00f","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def giftNoteForOrder(order: Option[Order]): String = {\n  order.flatMap(_.giftNote).getOrElse(\"No gift note\")\n}"}
{"id":"6b3faf40-80d4-4ac6-8bb8-4c0581ee7fee","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def findOrderStatus(orderId: String): String = {\n  val status = ExternalOrderTracker.getStatus(orderId)\n  if (status != null) status else \"Unknown\"\n}"}
{"id":"973b3c0e-d24f-4c7b-9225-de174ea4c1be","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def fetchDiscount(userId: String): Option[Double] = {\n  Option(JavaDiscountService.discountForUser(userId))\n}"}
{"id":"5dc92fc0-e0c3-4bc0-a39c-d44136ff10e6","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def retrieveLoyaltyPoints(customerId: String): Int = {\n  val points = LoyaltyEngine.queryPoints(customerId)\n  if (points != null) points.toInt else 0\n}"}
{"id":"06733d59-2f9c-41a8-aaa8-5b6028be7c43","timestamp":1746097427116,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def cartSubtotal(cart: Option[ShoppingCart]): Double = {\n  cart.flatMap(_.subtotal).getOrElse(0.0)\n}"}
{"id":"44181cab-af32-4f86-aa16-d3730ed3cce8","timestamp":1746097427117,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def refundStatus(transactionId: String): String = {\n  val status = RefundModule.checkStatus(transactionId)\n  if (status == null) \"Unavailable\" else status\n}"}
{"id":"69fe59fd-b1e2-4640-b7a4-73ffd08c3536","timestamp":1746097427117,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def defaultBillingAddress(billingOption: Option[String]): String = {\n  billingOption.fold(\"No billing address\")(identity)\n}"}
{"id":"46ac9d04-c2fe-42db-b0f9-ac8f8112db13","timestamp":1746097427117,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def resolveGiftCardBalance(cardNumber: String): java.lang.Double = {\n  val balance = JavaGiftCardService.getBalance(cardNumber)\n  if (balance == null) 0.0 else balance\n}"}
{"id":"f82d2c7e-a069-4c43-bca1-e22d06f99e4a","timestamp":1746097449329,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class OrderSummary(orderId: String, totalAmount: Double)\ndef findOrderSummary(orderId: String): Option[OrderSummary] = {\n  val orderDbResult: OrderSummary | Null = legacyOrderDbFetch(orderId)\n  Option(orderDbResult)\n}\ndef legacyOrderDbFetch(orderId: String): OrderSummary | Null =\n  if orderId == \"A100\" then OrderSummary(\"A100\", 125.0) else null"}
{"id":"a1bef7da-ca70-42eb-b650-615adc1bfdc5","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def validateCoupon(couponCode: String): String = {\n  val validCoupon = oldCouponSystemCheck(couponCode)\n  if(validCoupon != null) validCoupon else null\n}\ndef oldCouponSystemCheck(code: String): String | Null =\n  if code == \"SAVE10\" then \"Valid\" else null"}
{"id":"75977252-ce87-4c38-85ea-b511d1255d6f","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class PaymentStatus(status: String)\ndef fetchPaymentStatus(orderId: String): Option[PaymentStatus] =\n  Option(getPaymentStatusFromService(orderId))\ndef getPaymentStatusFromService(orderId: String): PaymentStatus | Null =\n  if orderId.nonEmpty then PaymentStatus(\"Paid\") else null"}
{"id":"6dd86934-4d29-4645-9bc4-fc542bfdd6f3","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getShippingProvider(orderId: String): String = {\n  val provider = fetchLegacyShippingProvider(orderId)\n  if (provider == null) \"Unknown Provider\"\n  else provider\n}\ndef fetchLegacyShippingProvider(orderId: String): String | Null =\n  if orderId == \"EXPRESS\" then \"DHL\" else null"}
{"id":"1a6e9d53-6dde-4272-b7af-3ba0a8a97507","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class Address(line1: String, city: String)\ndef toOptionAddress(line1: String | Null, city: String | Null): Option[Address] =\n  (Option(line1), Option(city)) match\n    case (Some(l), Some(c)) => Some(Address(l, c))\n    case _ => None"}
{"id":"541661ee-45be-464d-82ac-85936a7977bb","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getBillingEmail(customerId: String): String = {\n  val email = databaseEmailLookup(customerId)\n  if(email != null) email else null\n}\ndef databaseEmailLookup(id: String): String | Null =\n  if id == \"C200\" then \"customer@email.com\" else null"}
{"id":"c6f976ce-6ebe-4b5b-9b55-646c4e1232cc","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def calculateDiscount(optionalDiscount: Option[Double]): Double =\n  optionalDiscount.getOrElse(0.0)"}
{"id":"6a3dbb0a-9bcc-42a3-b452-1a15a390120d","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"case class CartItem(name: String, price: Double)\ndef legacyCartItemLookup(id: String): CartItem | Null =\n  if id == \"SKU100\" then CartItem(\"Shirt\", 29.99) else null\ndef addItemToCart(itemId: String): CartItem = {\n  val item = legacyCartItemLookup(itemId)\n  if(item != null) item else null\n}"}
{"id":"e04901b7-1ff9-4754-9f27-ecfba48c3a30","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class CheckoutSession(id: String)\ndef getCheckoutSession(token: String | Null): Option[CheckoutSession] =\n  Option(token).map(CheckoutSession(_))"}
{"id":"8001ed50-9564-4ec9-b848-c3390d963861","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getGiftMessage(orderId: String): String = {\n  val msg = fetchGiftMessageFromOldSystem(orderId)\n  if(msg == null) \"\" else msg\n}\ndef fetchGiftMessageFromOldSystem(orderId: String): String | Null =\n  if orderId == \"O999\" then \"Happy Birthday!\" else null"}
{"id":"89845e67-b3cc-4101-a294-adde4c1f903a","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def safeLegacyPaymentIdFetch(ref: String): Option[String] =\n  Option(legacyPaymentReference(ref))\ndef legacyPaymentReference(ref: String): String | Null =\n  if ref.startsWith(\"PAY\") then s\"PAY-${ref}\" else null"}
{"id":"142ab3ca-1932-48f8-9e39-ff28db5a137a","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getLoyaltyPoints(userId: String): Integer = {\n  val result = oldPointsSystem(userId)\n  if(result != null) result else null\n}\ndef oldPointsSystem(id: String): Integer | Null =\n  if id == \"U888\" then Integer.valueOf(120) else null"}
{"id":"7790633a-7642-4241-b976-e32104dd9669","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def totalCartPrice(items: List[Option[Double]]): Double =\n  items.flatten.sum"}
{"id":"62050c32-0072-49cf-9c0d-b998a8b5c6de","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"case class Promo(description: String)\ndef matchPromoCode(code: String): Promo | Null =\n  if code == \"BIGSALE\" then Promo(\"Big Sale 50% OFF\") else null\ndef getPromoOption(code: String): Option[Promo] =\n  Option(matchPromoCode(code))"}
{"id":"9043846a-d0d6-4866-91a6-4717c209168d","timestamp":1746097449330,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getReviewerName(reviewId: String): String = {\n  val name = fetchReviewerName(reviewId)\n  if(name == null) \"Anonymous\" else name\n}\ndef fetchReviewerName(reviewId: String): String | Null =\n  if reviewId == \"REV1\" then \"Prime Buyer\" else null"}
{"id":"2de4b4eb-f2d8-475e-b1fd-6f98665b8ecd","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def applyVoucher(code: Option[String]): String =\n  code.fold(\"No voucher applied!\")(c => s\"Voucher $c applied\")"}
{"id":"f2944c5c-d8fc-4b02-a6da-a9b9ef5dea4a","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def findContactNumber(orderId: String): String = {\n  val contact = javaStyleFindContact(orderId)\n  if (contact != null) contact else null\n}\ndef javaStyleFindContact(orderId: String): String | Null =\n  if orderId == \"Z123\" then \"+1234567890\" else null"}
{"id":"01729523-d07a-4fdf-92f2-6b29de8ab65b","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def getShippingTrackingUrl(trackingOption: Option[String]): String =\n  trackingOption.map(t => s\"https://tracking.example.com/$t\").getOrElse(\"No tracking available\")"}
{"id":"003313ac-591d-43fb-8f0f-47d6081cf10e","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getCustomerLoyaltyTier(customerId: String): String = {\n  val tier = legacyTierLookup(customerId)\n  if (tier == null) \"\" else tier\n}\ndef legacyTierLookup(id: String): String | Null =\n  if id == \"VIP\" then \"Gold\" else null"}
{"id":"dc302fef-3c41-49d1-b69c-89d3c4caefac","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":true,"code":"def getAppliedCoupons(coupons: List[Option[String]]): List[String] =\n  coupons.flatten"}
{"id":"d72aeecd-cb3b-4fda-9d39-adf67e15cd8b","timestamp":1746097449331,"category":"null_checks","topicUsed":"E-commerce checkout","isIdiomatic":false,"code":"def getOrderGiftWrapStatus(orderId: String): String = {\n  val status = oldGiftWrapLookup(orderId)\n  if (status != null) status else null\n}\ndef oldGiftWrapLookup(id: String): String | Null =\n  if id == \"GIFT\" then \"Yes\" else null"}
{"id":"5de9544f-8d4f-4942-a7d6-31351f147a04","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class AccountDetails(accountNumber: String, balance: Double)\ndef findAccountDetails(accountId: String): Option[AccountDetails] = {\n  val dbResult: AccountDetails | Null = legacyFetchAccount(accountId)\n  Option(dbResult)\n}"}
{"id":"76d32f62-d5f3-4a1e-80e6-8adf615c58fc","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class TransferReceipt(val referenceId: String, val status: String)\ndef sendMoneyViaJava(toAccount: String, amount: Double): TransferReceipt = {\n  val receipt = JavaBankingSystem.initiateTransfer(toAccount, amount)\n  if (receipt == null) new TransferReceipt(\"000\", \"FAILED\") else receipt\n}"}
{"id":"82f8ca90-cda5-4d64-846b-fd661565b71a","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def getSessionToken(userId: String): Option[String] = {\n  val token: String | Null = ExternalAuth.generateSessionTokenForUser(userId)\n  Option(token)\n}"}
{"id":"7aae52f5-fee2-4ae7-9235-824872cf0e06","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class Transaction(id: String, amount: Double)\ndef latestTransaction(userId: String): Option[Transaction] = {\n  Option(fetchTransactionFromDb(userId))\n}"}
{"id":"cf659b23-859c-4505-996e-cb87918168f1","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class UserProfile(val email: String, val phone: String)\ndef getUserProfile(userId: String): UserProfile = {\n  val result = LegacyUserDb.fetchProfile(userId)\n  if (result != null) result else new UserProfile(\"\", \"\")\n}"}
{"id":"d6505b58-bc99-487b-890d-3c1becd319e4","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def accountHolderName(accountId: String): String = {\n  val value: String | Null = LegacyAccount.findName(accountId)\n  Option(value).getOrElse(\"Unknown Holder\")\n}"}
{"id":"319318d1-da9d-4f5a-9a13-6121977416c5","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def safeCardNumber(cardNumber: String | Null): Option[String] = Option(cardNumber)\ndef maskCardNumber(cardNumber: String | Null): String = {\n  safeCardNumber(cardNumber).map(_ => \"**** **** **** 1234\").getOrElse(\"No Card\")\n}"}
{"id":"3163cd69-aa0c-4685-aa12-3f671323ed5d","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def upgradeToPremium(userId: String): Boolean = {\n  val result = JavaPremium.upgradeUser(userId)\n  if (result == null) false else true\n}"}
{"id":"080977f1-75f2-4e43-bde0-14941d886f2d","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def findPayee(payeeId: String): Option[String] = {\n  Option(PayeeDirectory.findNameById(payeeId))\n}"}
{"id":"6eea6a65-275d-4c02-a88c-0902848005b1","timestamp":1746097465501,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"case class TransactionMessage(message: String)\ndef lastTransactionMessage(accountId: String): String = {\n  val msg = LegacyTransactions.lastMessage(accountId)\n  if (msg == null) \"No recent transaction\" else msg\n}"}
{"id":"c38208d9-af31-4031-bb6d-e5e804025ce9","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def mobileDeviceId(userSession: UserSession): Option[String] = Option(userSession.deviceId)"}
{"id":"982cd16f-ec74-4078-8cfe-b5d02dbc6b50","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def getLoanStatus(applicationId: String): String = {\n  val status = JavaLoanApi.checkStatus(applicationId)\n  if (status != null) status else \"Processing\"\n}"}
{"id":"70c938d1-67d6-42ad-aa0d-0900d424f1a2","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def maybeCustomerEmail(maybeEmail: String | Null): Option[String] = Option(maybeEmail)\ndef safeUppercaseEmail(email: String | Null): String = {\n  Option(email).map(_.toUpperCase).getOrElse(\"Email Not Provided\")\n}"}
{"id":"748c0dbd-3dbb-4578-b310-43f3d1a22ade","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def fetchAccountAlias(aliasId: String): String = {\n  val alias = LegacyAliasDirectory.retrieve(aliasId)\n  if (alias != null) alias else \"Unknown Alias\"\n}"}
{"id":"f4cc76a2-c766-4677-8593-dbbc9a415cef","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def optionalBranchCode(branch: Null | String): Option[String] = Option(branch)\ndef uppercaseBranchCode(branch: String | Null): String = {\n  Option(branch).fold(\"No Branch\")(_.toUpperCase())\n}"}
{"id":"a29ddcaa-18e5-4b78-9dcd-171fbc2f0b46","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def resetDeviceBinding(userId: String): Boolean = {\n  val result = DeviceSecurity.legacyUnbind(userId)\n  if (result == null) false else result\n}"}
{"id":"28302d0e-8940-4385-9823-454992a11bf3","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def accountStatus(accountData: Null | String): Option[String] = Option(accountData).filter(_.nonEmpty)"}
{"id":"467e3ab8-a344-4675-8d44-c0ae02350beb","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def fetchOtp(phoneNumber: String): String = {\n  val code = JavaOtpService.getCode(phoneNumber)\n  if (code == null) \"OTP not available\" else code\n}"}
{"id":"163f5e10-ad66-4052-a45d-18b9150c1548","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def findTransactionById(transactionId: String): Option[Double] = {\n  val amt: java.lang.Double | Null = JavaTransactionHistory.fetchAmount(transactionId)\n  Option(amt).map(_.doubleValue)\n}"}
{"id":"936d2e9f-6274-435c-9ed1-40e05129a0e8","timestamp":1746097465502,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def getCashbackAmount(purchaseId: String): Double = {\n  val amount = CashbackService.retrieveAmount(purchaseId)\n  if (amount == null) 0.0 else amount\n}"}
{"id":"d6bc8bfc-02a4-4cad-b80d-8ae8e723c2b8","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class CustomerProfile(id: Int, email: String)\ndef findEmailByCustomerId(customerId: Int, profiles: List[CustomerProfile]): Option[String] =\n  profiles.find(_.id == customerId).map(_.email)"}
{"id":"19613aa0-bfc4-4fc9-84a4-62b62e43444f","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class TransactionDetails(val amount: Double, val description: String)\ndef getTransactionDescription(details: TransactionDetails): String =\n  if details != null then details.description else \"No details available\""}
{"id":"052734e0-72ba-46f4-a413-52c182aa01e8","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def fetchMobileTokenFromApi(apiResponse: String | Null): Option[String] =\n  Option(apiResponse).filter(_.nonEmpty)"}
{"id":"a2ad3a0d-ab6e-4bc2-a4ba-df91e1816822","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object SessionTokenProvider {\n  def getSessionToken: String = null // Simulate token retrieval failure\n}\ndef isUserSessionValid: Boolean =\n  if SessionTokenProvider.getSessionToken != null then true else false"}
{"id":"a9e09965-4687-4e87-bbc6-8c92e858cd11","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def phoneNumberOrDefault(userPhone: String | Null): String =\n  Option(userPhone).getOrElse(\"N/A\")"}
{"id":"b789a47c-899d-408c-a913-373b787e7189","timestamp":1746097490470,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class AccountSummary(ref: String)\ndef getSummaryReference(summary: AccountSummary): String =\n  if summary == null then \"Summary not found\" else summary.ref"}
{"id":"8ece7862-e966-4999-ab9c-a47becadaa1b","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class Beneficiary(id: Int, nickname: Option[String])\ndef displayBeneficiaryNickname(beneficiary: Beneficiary): String =\n  beneficiary.nickname.getOrElse(\"(No Nickname)\")"}
{"id":"ffe44171-362e-4e4a-a2af-d047fd62f961","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def getLoanLimitFromApi(apiReply: String): String =\n  if apiReply == null then \"Loan limit unavailable\" else apiReply"}
{"id":"d51ae117-9447-4d0f-a4f0-7f636210e407","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class UserProfile(id: Int, email: String | Null)\ndef safeEmail(profile: UserProfile): Option[String] =\n  Option(profile.email)"}
{"id":"c1cf8a5b-5a5f-488d-9816-82223f0a241f","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object CardLookup {\n  def javaCardLookup(cardNumber: String): String = null // simulate missing card\n}\ndef getCardOwner(cardNumber: String): String =\n  val owner = CardLookup.javaCardLookup(cardNumber)\n  if owner != null then owner else \"Unknown owner\""}
{"id":"3f92b15f-807d-4c67-af7e-2654b44714c6","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def transactionStatusText(status: Option[String]): String =\n  status.fold(\"Status missing!\")(_ + \" in process\")"}
{"id":"53d4568c-d747-4c4f-8ca9-6a141bc07cec","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"def getBankBranchInfo(branch: String): String =\n  if branch == null then \"Branch unknown\" else s\"Branch: $branch\""}
{"id":"986a5a6f-dafe-4b39-a83e-5255b8973e2c","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class AppNotification(content: String)\ndef notificationPreview(notification: Option[AppNotification]): String =\n  notification.map(_.content).getOrElse(\"No notification to show\")"}
{"id":"42ef5907-b8ce-48b6-9af4-2595ada077f0","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def safeFindAccountNumber(account: String | Null): Option[String] =\n  Option(account).filter(_.length > 6)"}
{"id":"bf5f7da3-952d-48e9-b0d6-630c47ea5961","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class CreditScore(val value: Integer)\ndef creditScoreMessage(creditScore: CreditScore): String =\n  if creditScore != null && creditScore.value != null then s\"Score: ${creditScore.value}\" else \"No score available\""}
{"id":"bb4f0c2f-5f52-4f1b-86e9-d7ef4ec188ca","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def maybePinCode(rawPin: String | Null): Option[Int] =\n  Option(rawPin).flatMap(pin => scala.util.Try(pin.toInt).toOption)"}
{"id":"37ad4c79-a6c3-4bef-9546-bb442d38b22b","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"class DeviceInfo(val platform: String)\ndef devicePlatformOrDefault(info: DeviceInfo): String =\n  if info == null then \"(unknown)\" else info.platform"}
{"id":"4d07a7e5-cccf-425a-b5dd-9042af1f6bca","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"def getLoanApplicationId(rawId: String | Null): Option[String] =\n  Option(rawId).filter(_.forall(_.isDigit))"}
{"id":"5600d820-3ddb-4c2c-ad2b-e6f043e930f0","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":false,"code":"object PushMessageService {\n  def fetchMessageForUser(userName: String): String = null\n}\ndef displayPushMessage(user: String): String =\n  val msg = PushMessageService.fetchMessageForUser(user)\n  if msg != null then msg else \"No message found\""}
{"id":"f52cebd7-409d-4b80-a7bd-614c2516a1a8","timestamp":1746097490471,"category":"null_checks","topicUsed":"Mobile banking app","isIdiomatic":true,"code":"case class DocumentUpload(fileName: String | Null)\ndef describeUpload(upload: DocumentUpload): Option[String] =\n  Option(upload.fileName).map(name => s\"Uploaded: $name\")"}
{"id":"62659d22-0be6-4334-94b9-398c3cf1bc45","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class VirtualAppointment(patientId: String, doctorId: String, slot: String)\ndef findVirtualAppointmentById(appointmentId: String): Option[VirtualAppointment] =\n  Option(getJavaAppointmentById(appointmentId))\ndef getJavaAppointmentById(appointmentId: String): VirtualAppointment | Null =\n  if appointmentId == \"A100\" then VirtualAppointment(\"P157\", \"D36\", \"10AM-11AM\") else null"}
{"id":"26f3106c-855a-433a-a3f9-040e20531f61","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def findPatientNameOrEmpty(patientId: String, lookup: String => String | Null): String =\n  Option(lookup(patientId)).getOrElse(\"\")"}
{"id":"52e22ca2-17f5-4f88-92f9-0c927d98a207","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class Doctor(name: String, specialty: String)\ndef maybeDoctor(specialty: String): Option[Doctor] =\n  Option(unsafeJavaFindDoctor(specialty))\ndef unsafeJavaFindDoctor(s: String): Doctor | Null =\n  if s == \"Dermatology\" then Doctor(\"Green\", s) else null\nval result = maybeDoctor(\"Dermatology\").map(_.name).getOrElse(\"No Doctor\")"}
{"id":"98413e92-0bfc-486d-b4db-4ca5fee299bd","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def getAvailableSlots(doctorId: String): List[String] | Null =\n  if doctorId == \"D501\" then List(\"9AM\", \"10AM\") else null\ndef printFirstSlot(doctorId: String): Unit =\n  val slotsOpt = Option(getAvailableSlots(doctorId))\n  println(slotsOpt.flatMap(_.headOption).getOrElse(\"No slots\"))"}
{"id":"b29c4c44-da63-4fb9-9c73-512d4b86c1fd","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def validateAppointmentCode(code: String | Null): Option[String] =\n  Option(code).filter(_.startsWith(\"APT\"))"}
{"id":"6db222b4-6d05-42c6-9df1-1ce70e622704","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def safeRescheduleSlot(slot: String | Null): Option[String] =\n  Option(slot).filter(_.nonEmpty)"}
{"id":"108850cd-93a0-45f5-9f5e-14aaf1696ca8","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class ConsultationSummary(appointmentId: String, notes: String)\ndef safeSummaryLookup(lookup: String => ConsultationSummary | Null, appointmentId: String): Option[ConsultationSummary] =\n  Option(lookup(appointmentId))"}
{"id":"96d9b74b-c2ea-4b0b-96d8-364ed6381560","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def patientPhoneOption(phoneFromLegacy: String | Null): Option[String] =\n  Option(phoneFromLegacy).map(_.trim).filter(_.nonEmpty)"}
{"id":"8e807140-7817-464e-bfad-4708bb6ac407","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def joinTelemedicineSession(sessionCode: String | Null): Option[String] =\n  Option(sessionCode).flatMap(code =>\n    if code.startsWith(\"TM\") then Some(code) else None\n  )"}
{"id":"76a0b71c-4f7e-4ab3-8047-669577a83d54","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class AppointmentSlot(time: String)\ndef selectPreferredSlot(slots: List[AppointmentSlot]): Option[AppointmentSlot] =\n  slots.find(_.time.endsWith(\"PM\"))"}
{"id":"c178a9c1-b0ce-4244-b3be-b5648433d424","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"case class Appointment(patientId: String, doctorId: String, time: String)\ndef fetchAppointment(appointmentId: String): Appointment | Null =\n  if appointmentId == \"APT123\" then Appointment(\"P123\", \"D111\", \"2PM-3PM\") else null\ndef printAppointment(appointmentId: String): Unit =\n  val appointment = fetchAppointment(appointmentId)\n  if(appointment != null)\n    println(s\"Appointment for ${appointment.patientId} at ${appointment.time}\")\n  else\n    println(\"Appointment not found\")"}
{"id":"7852d2f4-544f-48f5-a176-1ba21665e5cc","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getDoctorNote(appointmentId: String): String | Null =\n  if appointmentId == \"A567\" then \"Follow up in one week.\" else null\ndef printDoctorNote(appointmentId: String): Unit =\n  val note = getDoctorNote(appointmentId)\n  if(note == null) println(\"No doctor note available.\")\n  else println(note)"}
{"id":"3124e93d-5d04-4cb1-888d-07726710e4ab","timestamp":1746097515786,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def checkLegacyPatientEntry(patientId: String): String | Null =\n  if patientId == \"P888\" then \"John Doe\" else null\ndef printPatientName(patientId: String): Unit =\n  if(checkLegacyPatientEntry(patientId) != null)\n    println(checkLegacyPatientEntry(patientId))\n  else\n    println(\"Unknown patient\")"}
{"id":"d99d2341-6c3f-4396-bb26-66df8b19a868","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"case class SessionLink(url: String)\ndef getSessionLinkOrNull(sessionId: String): SessionLink | Null =\n  if sessionId == \"S1001\" then SessionLink(\"https://telehealth/join/S1001\") else null\ndef showSessionLink(sessionId: String): Unit =\n  val link = getSessionLinkOrNull(sessionId)\n  if(link == null) println(\"No valid session.\")\n  else println(link.url)"}
{"id":"b3131b36-8a37-4a55-a62c-251ee57f1ea8","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def retrieveAvailableTimeSlot(doctorId: String): String | Null =\n  if doctorId == \"D215\" then \"11AM-12PM\" else null\ndef scheduleForAvailableTime(doctorId: String): String =\n  val slot = retrieveAvailableTimeSlot(doctorId)\n  if(slot != null) s\"Scheduled at $slot\" else \"No slots available\""}
{"id":"c07e156e-6c51-4b9e-a41c-ae3313db4c10","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getPatientEmailOrNull(patientId: String): String | Null =\n  if patientId == \"P404\" then null else \"someone@example.com\"\ndef emailGreeting(patientId: String): String =\n  val email = getPatientEmailOrNull(patientId)\n  if(email == null) \"No email on record\" else s\"Email: $email\""}
{"id":"1809fc1f-5454-44b7-af46-2d6aa7016b62","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def nextAvailableTelehealthSlotOrNull(doctorId: String): String | Null =\n  doctorId match\n    case \"D792\" => \"4PM\"\n    case _ => null\ndef confirmSlot(doctorId: String): Unit =\n  val slot = nextAvailableTelehealthSlotOrNull(doctorId)\n  if(slot == null) println(\"No telehealth slot\")\n  else println(s\"Slot: $slot\")"}
{"id":"da3d649c-394a-43c8-80d3-fcb813732e72","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def updateAppointmentStatusToCompleted(appointmentId: String): String | Null =\n  if appointmentId == \"A55\" then \"completed\" else null\ndef isAppointmentCompleted(appointmentId: String): Boolean =\n  val status = updateAppointmentStatusToCompleted(appointmentId)\n  status != null && status == \"completed\""}
{"id":"fc0cd61d-8e01-4a4c-96c8-0fcb5348293a","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getAppointmentDetailsFromDB(appointmentId: String): String | Null =\n  if appointmentId == \"A888\" then \"Patient: P888, Time: 5PM\" else null\ndef showDetailsIfExists(appointmentId: String): Unit =\n  val details = getAppointmentDetailsFromDB(appointmentId)\n  if(details != null) println(details) else println(\"No details found\")"}
{"id":"3db68a15-acf4-446e-9395-75c1f5a5288b","timestamp":1746097515787,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def doctorSpecialtyOrNull(doctorId: String): String | Null =\n  if doctorId == \"D302\" then null else \"Pediatrics\"\ndef specialtyInfo(doctorId: String): String =\n  val spec = doctorSpecialtyOrNull(doctorId)\n  if(spec == null) \"Specialty not listed\" else s\"Specialty: $spec\""}
{"id":"7fa5e2d1-3285-4b78-8de4-ab9c44ce8834","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class PatientProfile(name: String, contact: String)\ndef getPatientProfile(details: String): Option[PatientProfile] =\n  Option(retrievePatientProfileJavaStyle(details))\n\ndef retrievePatientProfileJavaStyle(details: String): PatientProfile =\n  if details == \"\" then null else PatientProfile(details, \"123-456\")"}
{"id":"48533481-d089-4489-8c8c-ab342b936e23","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getNextAppointment(patientId: String): String = {\n  val appointment = fetchAppointmentFromDb(patientId)\n  if (appointment != null) appointment else \"No appointment found\"\n}\n\ndef fetchAppointmentFromDb(patientId: String): String =\n  if (patientId == \"\") null else \"2024-07-01 09:00\""}
{"id":"c1e131c8-de53-4901-892c-653372a13950","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def verifyProviderAvailability(providerId: String): Option[Boolean] =\n  Option(javaProviderAvailable(providerId)).map(_.booleanValue)\n\ndef javaProviderAvailable(id: String): java.lang.Boolean =\n  if id == \"dr42\" then java.lang.Boolean.TRUE else null"}
{"id":"1bb349fc-37ec-4a28-81fc-f7d35f0cc33d","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def checkAppointmentSlot(slotId: String): Boolean = {\n  val status = lookupSlotJavaStyle(slotId)\n  if (status != null) status.booleanValue else false\n}\n\ndef lookupSlotJavaStyle(slotId: String): java.lang.Boolean =\n  if (slotId.startsWith(\"open\")) java.lang.Boolean.TRUE else null"}
{"id":"5687d7a6-b860-4684-b321-bde0462a2260","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def lookupScheduledTime(appointmentId: String): Option[String] =\n  Option(getTimeFromJavaSystem(appointmentId))\n\ndef getTimeFromJavaSystem(appointmentId: String): String =\n  if appointmentId.isEmpty then null else \"2024-09-22T14:00\""}
{"id":"6a45ab8c-b019-48d9-892e-b29469eb84f4","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class Appointment(patient: String, time: String)\ndef scheduleAppointment(patient: String, time: String): Option[Appointment] =\n  Option(if patient.isEmpty || time.isEmpty then null else Appointment(patient, time))"}
{"id":"50f91139-2e32-4fd5-a51d-906625c26609","timestamp":1746097537187,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def findRoomForSession(sessionId: String): String = {\n  val room = fetchRoomFromDb(sessionId)\n  if (room == null) \"No room available\" else room\n}\n\ndef fetchRoomFromDb(sessionId: String): String =\n  if (sessionId == \"123\") null else \"Room-9\""}
{"id":"23c905be-0d11-4b53-bd34-a60effafcfe5","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def getProviderSpecialty(providerId: String): Option[String] =\n  Option(hypotheticalJavaProviderSpecialty(providerId))\n\ndef hypotheticalJavaProviderSpecialty(id: String): String =\n  if id == \"\" then null else \"Cardiology\""}
{"id":"47cef92f-761b-4910-a770-f19dd28aea89","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def isUserRegistered(userId: String): Boolean = {\n  val registration = javaCheckRegistration(userId)\n  registration != null && registration\n}\n\ndef javaCheckRegistration(u: String): java.lang.Boolean =\n  if (u == \"u2\") null else java.lang.Boolean.TRUE"}
{"id":"87371ecd-6c58-43c0-b60f-6fd301642b66","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def getAppointmentStatus(appointmentId: String): Option[String] =\n  Option(retrieveStatusFromJava(appointmentId))\n\ndef retrieveStatusFromJava(id: String): String =\n  if id == \"badId\" then null else \"Confirmed\""}
{"id":"9096a561-a2ca-473e-bdd7-4cdc49e0eacf","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"class InsuranceVerifier:\n  def verifyCoverage(patientId: String): Option[String] =\n    Option(javaCoverageCheck(patientId)).filter(_.nonEmpty)\n\n  def javaCoverageCheck(id: String): String =\n    if id == \"\" then null else \"Covered\""}
{"id":"961c0132-87f7-495e-afee-1adfdcde303e","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def setNotificationPreference(userId: String, preference: String): String = {\n  val saved = savePreferenceInJava(userId, preference)\n  if (saved == null) \"Error\" else saved\n}\n\ndef savePreferenceInJava(u: String, p: String): String =\n  if (p.nonEmpty) \"Saved\" else null"}
{"id":"1ab8281c-3e38-4cdf-8d9a-1b216fe7e580","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"case class ScheduleSlot(time: String, available: Boolean)\ndef nextAvailableSlot(possibleSlots: List[ScheduleSlot]): Option[String] =\n  possibleSlots.find(_.available).map(_.time)"}
{"id":"2ce09cab-3375-41a8-86fa-fd91ab10a923","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getLastConsultationNote(patientId: String): String = {\n  val note = fetchConsultationNoteJava(patientId)\n  if (note != null) note else \"No notes\"\n}\n\ndef fetchConsultationNoteJava(pid: String): String =\n  if (pid == \"none\") null else \"Follow up in two weeks.\""}
{"id":"cd0e0075-215b-485a-99ee-5293424d6bf5","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def findProviderBySpecialty(specialty: String): Option[String] =\n  val provider = javaProviderLookup(specialty)\n  Option(provider)\n\ndef javaProviderLookup(s: String): String =\n  if s == \"Cardiology\" then \"Dr. Patel\" else null"}
{"id":"c0014a07-9b00-49af-a27f-63ca36c292ca","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getVideoLinkForSession(sessionId: String): String = {\n  val link = simulateJavaVideoLink(sessionId)\n  if (link == null) \"Unavailable\" else link\n}\n\ndef simulateJavaVideoLink(sid: String): String =\n  if (sid == \"abc\") null else \"https://video.telemed/sid\""}
{"id":"63a6b886-ac1b-4a1f-9f5c-12bb6d2a0a4c","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def searchAvailableAppointments(patientId: String): List[String] =\n  Option(hypotheticalJavaAvailableSlots(patientId)).map(_.toList).getOrElse(Nil)\n\ndef hypotheticalJavaAvailableSlots(pid: String): Array[String] =\n  if pid == \"\" then null else Array(\"09:00\", \"13:00\")"}
{"id":"6786647f-95cd-4146-8518-294fc3a8a116","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def checkIfSessionStarted(sessionId: String): Boolean = {\n  val started = javaSessionStarted(sessionId)\n  if (started != null) started.booleanValue else false\n}\n\ndef javaSessionStarted(sid: String): java.lang.Boolean =\n  if (sid == \"stopped\") null else java.lang.Boolean.TRUE"}
{"id":"1ecb7cc9-cfab-442b-aef6-9977c926d940","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":true,"code":"def updateAppointmentStatus(appointmentId: String, newStatus: String): Option[String] =\n  Option(javaStatusUpdate(appointmentId, newStatus))\n\ndef javaStatusUpdate(id: String, status: String): String =\n  if id.isEmpty then null else status"}
{"id":"7875f04c-408b-471d-8855-900291dfadaf","timestamp":1746097537188,"category":"null_checks","topicUsed":"Telemedicine appointment scheduling","isIdiomatic":false,"code":"def getAppointmentSummary(appointmentId: String): String = {\n  val summary = javaFetchSummary(appointmentId)\n  if (summary == null) \"No summary available\" else summary\n}\n\ndef javaFetchSummary(id: String): String =\n  if (id == \"bad\") null else s\"Appointment summary for $id\""}
{"id":"046b9158-d294-4b07-ae59-5e644ea99a57","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class StepRecord(userId: String, steps: Int)\ndef getActiveMinutes(record: StepRecord): Option[Int] =\n  Some(record.steps / 100)\nval record: StepRecord = StepRecord(\"alice\", 3450)\nval minutesActive = getActiveMinutes(record).getOrElse(0)"}
{"id":"68001f1a-914e-4d5e-afde-22c864c40049","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"object HeartRateAnalyzer:\n  def maxHeartRate(readings: List[Int]): Option[Int] =\n    readings match\n      case Nil => None\n      case xs => Some(xs.max)\nval peakHeart = HeartRateAnalyzer.maxHeartRate(List(72,88,110)).getOrElse(0)"}
{"id":"d34bab77-5f1a-4cb3-8539-3f0257cc3179","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def caloriesBurned(session: Option[Double]): Double =\n  session.getOrElse(0.0)\nval todayCalories = caloriesBurned(Some(532.5))"}
{"id":"57936ce2-6727-4f10-bcad-a180df1e9772","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def sleepDuration(hours: Option[Double]): String =\n  hours.fold(\"No data\") { h => s\"Slept $h hours\" }\nsleepDuration(None)"}
{"id":"abf712a5-257e-4ff2-bd07-61396e8a03e1","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class WorkoutSession(typeOfExercise: String, durationMinutes: Int)\ndef findLongestSession(sessions: List[WorkoutSession]): Option[WorkoutSession] =\n  sessions match\n    case Nil => None\n    case xs => Some(xs.maxBy(_.durationMinutes))\nval sessionOpt = findLongestSession(List())"}
{"id":"2f4b6d69-d0a2-4aff-ad29-1a157989cc45","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def getUserWeight(user: String): Option[Double] =\n  val weightDb = Map(\"carla\" -> 67.4)\n  weightDb.get(user)\nval carlaWeight = getUserWeight(\"carla\").getOrElse(0.0)"}
{"id":"caf80510-1ad0-42fd-9b2b-e25709db8754","timestamp":1746097556336,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def safeStepCount(javaStepCount: String | Null): Option[Int] =\n  Option(javaStepCount).flatMap(str => str.toIntOption)\nsafeStepCount(null)"}
{"id":"30891cc5-1474-4415-a33e-0959aba79a89","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def restingHeartRate(hr: Option[Int]): Boolean =\n  hr.exists(_ < 60)\nrestingHeartRate(Some(55))"}
{"id":"c1a5a882-407f-4cee-babe-c9809bce0dbe","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def hasSleepGoal(sleepGoal: Option[Double]): Boolean =\n  sleepGoal.exists(_ >= 7)\nhasSleepGoal(None)"}
{"id":"3b4275a4-0a1c-45f2-848d-39d875b47c66","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def displayGoalStatus(goal: Option[Int]): String =\n  goal.map(_ => \"Goal Set!\").getOrElse(\"No goal set\")\ndisplayGoalStatus(Some(10000))"}
{"id":"f5d67ed0-2907-4cde-b64a-f37027683c74","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class HydrationTracker:\n  var ouncesDrank: java.lang.Integer = null\n  def recordDrink(ounces: Int): Unit =\n    ouncesDrank = ounces\n  def getOunces(): java.lang.Integer =\n    ouncesDrank\nval tracker = new HydrationTracker\nif (tracker.getOunces() == null) println(\"No data\")"}
{"id":"d3739925-bae0-47e1-9114-3cda47405d28","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def fetchStepGoal(userId: String): java.lang.Integer =\n  if (userId == \"steve\") 12000\n  else null\nval steveGoal = fetchStepGoal(\"john\")\nif (steveGoal != null) println(steveGoal)"}
{"id":"6670b7d9-e239-486b-8956-8f91f81cf726","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def sessionCaloriesBurned(sessionId: String): java.lang.Double =\n  if (sessionId == \"evening\") 305.0\n  else null\nval burned = sessionCaloriesBurned(\"morning\")\nif (burned == null) println(\"No result\")"}
{"id":"1f19fa93-90fe-472e-bbba-c69acfa3a7c9","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def sleepQualityFromJava(nightId: String): String =\n  if (nightId == \"bad\") null else \"Good\"\nval quality = sleepQualityFromJava(\"bad\")\nif (quality == null) println(\"No data\")"}
{"id":"aa76c835-4ab4-4824-8155-b590534b96a4","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def bestDayStepCount(javaResults: Array[Integer]): Integer =\n  if (javaResults.length > 0) javaResults.max else null\nval maxSteps = bestDayStepCount(Array())\nif (maxSteps == null) 0 else maxSteps"}
{"id":"99a56442-aebb-4a48-a6a2-c3ed477e4a68","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class FitnessDevice:\n  def lastSyncTime: String = null\nval device = new FitnessDevice\nif (device.lastSyncTime == null) println(\"Never synced\")"}
{"id":"c06aa8aa-1a1b-489e-9498-9fd92fb3dbfb","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def findUserWeightLegacy(user: String): Double =\n  if (user == \"rose\") 62.0 else null.asInstanceOf[Double]\nval weight = findUserWeightLegacy(\"jack\")"}
{"id":"b21e3383-df1c-4e32-8774-fdf761cb9efe","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class ActivityGoalDb:\n  def getGoal(userId: String): Integer =\n    if (userId == \"elaine\") 8000 else null\nval db = new ActivityGoalDb\nval elaineGoal = db.getGoal(\"bob\")\nif (elaineGoal != null) println(elaineGoal)"}
{"id":"4c06cb9a-7dc0-4840-8e49-e43434fe7a9e","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getLastActiveTime(userId: String): String =\n  if (userId == \"amy\") \"2024-05-01T12:00:00\" else null\nval lastActive = getLastActiveTime(\"steve\")\nif (lastActive == null) \"No data\" else lastActive"}
{"id":"eff74727-05f7-4fc8-9736-da1e1879020d","timestamp":1746097556337,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def fetchHydrationLevel(userId: String): java.lang.Double =\n  if (userId == \"lucas\") 1.5 else null\nval hydration = fetchHydrationLevel(\"lucas\")\nif (hydration != null) println(hydration)"}
{"id":"df16b156-cbf7-4fef-9de0-d7227209d99c","timestamp":1746097575587,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"case class StepRecord(userId: String, steps: Int)\ndef getTopStepCount(stepRecords: List[StepRecord]): Option[StepRecord] = {\n  stepRecords.sortBy(-_.steps).headOption\n}"}
{"id":"399c717d-0a67-4bdb-8dba-b09eb388f743","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"object UserCalories {\n  def getActiveCalories(userId: String): java.lang.Integer = {\n    if (userId == \"unknown\") null else 275\n  }\n  def caloriesForDay(userId: String): Int = {\n    val cals = getActiveCalories(userId)\n    if (cals != null) cals else 0\n  }\n}"}
{"id":"a3402b50-b3e1-4629-9b91-557113e9656f","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def safeHeartRate(heartRate: java.lang.Integer): Option[Int] = Option(heartRate).map(_.toInt)\n\nval result: Option[Int] = safeHeartRate(null)\n"}
{"id":"0a023955-018c-4b00-864b-b2a582f1f6fa","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"class SleepStats {\n  def last7DaysAverage(userSleepRecords: Array[SleepData]): Double = {\n    var sum = 0.0\n    var count = 0\n    for (rec <- userSleepRecords) {\n      if (rec != null) {\n        sum += rec.hours\n        count += 1\n      }\n    }\n    if (count == 0) 0.0 else sum / count\n  }\n}\ncase class SleepData(hours: Double)\n"}
{"id":"3c898397-4a95-4728-bb42-9f417122d317","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def findMaxDistance(distances: List[Option[Double]]): Option[Double] = {\n  distances.flatten match {\n    case Nil => None\n    case xs  => Some(xs.max)\n  }\n}"}
{"id":"961df735-8968-4541-b84b-5923540f7355","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"object FitnessAlerts {\n  def javaStyleGetNotification(userId: String): String = {\n    if (userId == \"none\") null else s\"Alert for $userId\"\n  }\n  def sendAlert(userId: String): Unit = {\n    val alertMsg = javaStyleGetNotification(userId)\n    if (alertMsg != null) println(alertMsg)\n  }\n}"}
{"id":"2654478c-3dbb-4bac-805a-3d273346928b","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def wrapJavaSleepRecord(javaSleep: JavaSleepRecord): Option[Int] = Option(javaSleep).map(_.durationMinutes)\n\nclass JavaSleepRecord(val durationMinutes: Int)\n"}
{"id":"99dc8b3b-f479-4078-81d2-cfd1fdd2e2d7","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getFirstActiveDay(dayActivities: Array[DayActivity]): DayActivity = {\n  for (i <- 0 until dayActivities.length) {\n    if (dayActivities(i) != null && dayActivities(i).isActive) return dayActivities(i)\n  }\n  null\n}\nclass DayActivity(val isActive: Boolean)\n"}
{"id":"a612a9f2-a429-411e-88c0-0a984da739f5","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def getLatestWeightEntry(entries: List[Option[Double]]): Option[Double] =\n  entries.reverse.collectFirst { case Some(weight) => weight }\n"}
{"id":"324fcd89-0490-4f3e-aad7-346a2e27cb21","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def fetchUserProfile(userId: String): UserProfile = {\n  if (userId == \"\") null else UserProfile(userId, 28)\n}\ncase class UserProfile(id: String, age: Int)\n"}
{"id":"237a7eb0-8265-4cf0-980b-29aa05823074","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def safeHydrationLevel(level: java.lang.Double): Option[Double] = Option(level).map(_.doubleValue())\n\nval optLevel = safeHydrationLevel(2.0)\n"}
{"id":"43a3b878-ec84-4a46-b33a-6cf22ef2521b","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getDistanceSummary(summary: DistanceSummary): Double = {\n  if (summary != null) summary.totalKm else 0.0\n}\nclass DistanceSummary(val totalKm: Double)\n"}
{"id":"ffb6ef7b-8f1c-4bd4-9274-b58970cc4412","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def bestHeartRateSample(samples: List[HeartRateSample]): Option[HeartRateSample] =\n  samples.filter(_.bpm > 100).headOption\ncase class HeartRateSample(bpm: Int)\n"}
{"id":"18ea7ee0-413c-4f8f-9fac-5bb5685b332e","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def dailyGoalString(userGoal: String): String = {\n  if (userGoal != null) userGoal else \"No goal set\"\n}\n"}
{"id":"570cd009-bf8a-4a3c-a076-0243038110cc","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def stepsAboveGoal(today: Option[Int], goal: Int): Boolean =\n  today.exists(steps => steps > goal)\n"}
{"id":"544fd9a1-5f35-4e64-be77-2ba56ff2e814","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def lastWorkoutTime(userId: String): java.time.LocalDateTime = {\n  if (userId == \"inactive\") null else java.time.LocalDateTime.now()\n}\n\ndef getWorkoutHour(userId: String): Int = {\n  val time = lastWorkoutTime(userId)\n  if (time != null) time.getHour else -1\n}\n"}
{"id":"0de3c939-14d5-4162-857e-8d27c964b019","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def getActiveMinutes(record: Option[MinuteRecord]): Int =\n  record.fold(0)(_.activeMinutes)\ncase class MinuteRecord(activeMinutes: Int)\n"}
{"id":"f54891cc-37ca-4270-90db-4d43c6f4d652","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def checkSleepQuality(sleep: SleepQuality): String = {\n  if (sleep == null) \"Unknown\" else sleep.quality\n}\nclass SleepQuality(val quality: String)\n"}
{"id":"9cf8f165-5ffe-486a-a4c9-ab86140b36b0","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def optionalUserDisplayName(name: String): Option[String] = Option(name)\n\nval display: String = optionalUserDisplayName(null).getOrElse(\"Anonymous\")\n"}
{"id":"8651d471-9e20-4552-9667-985bf9d7ca7c","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":false,"code":"def getLastLoggedMealRecord(records: Array[MealRecord]): MealRecord = {\n  for (i <- records.length - 1 to 0 by -1)\n    if (records(i) != null) return records(i)\n  null\n}\nclass MealRecord(val mealType: String)\n"}
{"id":"942c7532-f375-4c0a-8352-1e9b3f0fb286","timestamp":1746097575588,"category":"null_checks","topicUsed":"Fitness tracker analytics","isIdiomatic":true,"code":"def getCaloriesBurned(record: Option[CaloriesSession]): Int =\n  record.map(_.calories).getOrElse(0)\ncase class CaloriesSession(calories: Int)\n"}
{"id":"8e622910-4166-442d-a4ae-5b6369e19217","timestamp":1746097631579,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, name: String, price: BigDecimal)\ndef getActivePlanOption(planId: String): Option[PricingPlan] = {\n  Option(fetchActivePricingPlan(planId))\n}\n\ndef fetchActivePricingPlan(planId: String): PricingPlan = {\n  if planId == \"basic\" then PricingPlan(\"basic\", \"Basic Plan\", 9.99)\n  else null\n}\n"}
{"id":"9a3fb3d0-7491-4053-b985-75206953c512","timestamp":1746097631579,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanService {\n  def getPlanById(planId: String): PricingPlan = {\n    val plan = fetchPlanFromDatabase(planId)\n    if (plan != null) plan else null\n  }\n  def fetchPlanFromDatabase(planId: String): PricingPlan = {\n    if (planId == \"premium\") new PricingPlan(planId, \"Premium\", 29.99) else null\n  }\n}\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"54137989-2bc7-4c9f-b974-bd9e383c01a4","timestamp":1746097631579,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def getPlanPriceOption(plan: PricingPlan): Option[BigDecimal] = {\n  Option(plan).map(_.price)\n}\ncase class PricingPlan(id: String, name: String, price: BigDecimal)\n"}
{"id":"8fed5c78-6b28-4d11-b22f-36a1c2872a10","timestamp":1746097631579,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getPlanNameIfNotNull(plan: PricingPlan): String = {\n  if (plan != null) plan.name else \"No Plan\"\n}\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"08697976-6d68-416b-80b8-505767005b31","timestamp":1746097631579,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, title: String, price: BigDecimal)\ndef upgradeToBusinessPlan(plan: Option[PricingPlan]): Option[PricingPlan] = {\n  plan.filter(_.title != \"Business\").map(_ => PricingPlan(\"business\", \"Business\", 49.99))\n}\n"}
{"id":"a6b4fa24-814a-4268-9a65-9aae92c47a50","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def cancelPricingPlan(planId: String): PricingPlan = {\n  val cancelledPlan = removePlanEntry(planId)\n  if (cancelledPlan != null) cancelledPlan else null\n}\ndef removePlanEntry(planId: String): PricingPlan = null\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"39c54e60-2215-43fb-ab2b-7382c88f3229","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def planPriceOrDefault(planOpt: Option[PricingPlan]): BigDecimal = {\n  planOpt.map(_.price).getOrElse(BigDecimal(0))\n}\ncase class PricingPlan(id: String, name: String, price: BigDecimal)\n"}
{"id":"4ebad7b8-e5d5-475e-be05-0800cd79b845","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getDeletedPlanName(plan: PricingPlan): String = {\n  if (plan != null) {\n    if (plan.isDeleted) plan.name else \"Not Deleted\"\n  } else {\n    \"Plan Not Found\"\n  }\n}\nclass PricingPlan(val id: String, val name: String, val price: Double, val isDeleted: Boolean)\n"}
{"id":"90256255-ee6a-4cb5-b2b4-b257969a8f85","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def safeCreatePlan(planId: String): Option[PricingPlan] = {\n  Option(javaCreatePlan(planId))\n}\ndef javaCreatePlan(planId: String): PricingPlan = null\ncase class PricingPlan(id: String, name: String, price: Double)\n"}
{"id":"3593bf29-85ae-410e-8d95-ea115e9853e9","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def findPlan(planId: String): PricingPlan = {\n  val plan = searchPlan(planId)\n  if (plan != null) plan else null\n}\ndef searchPlan(planId: String): PricingPlan = null\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"7a8549fd-ab78-40ab-9105-9cde17a50828","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, displayName: String, price: BigDecimal)\ndef getDisplayName(plan: Option[PricingPlan]): String =\n  plan.map(_.displayName).getOrElse(\"Unknown Plan\")\n"}
{"id":"02cef0bb-726c-465b-bdbe-48743df4b61a","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def isPlanUpgradable(plan: PricingPlan): Boolean = {\n  if (plan != null && plan.name == \"Starter\") true else false\n}\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"fd1a462a-2576-4e18-a47f-f5d3d898f304","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, tier: String, amount: Double)\ndef premiumPlanExists(plans: List[PricingPlan]): Boolean =\n  plans.exists(p => Option(p).exists(_.tier == \"Premium\"))\n"}
{"id":"10414961-ae27-423e-acba-0f0384e8df52","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getPlanTierOrNull(plan: PricingPlan): String = {\n  if (plan != null) plan.tier else null\n}\nclass PricingPlan(val id: String, val tier: String, val price: Double)\n"}
{"id":"80652de6-958c-4c09-812d-3898bce456c0","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, name: String, recurring: Boolean)\ndef countRecurringPlans(plans: List[PricingPlan]): Int =\n  plans.count(_.recurring)\n"}
{"id":"ed465f22-4020-4e28-a636-539e7735fbbe","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def assignNullToNonExistingPlan(planId: String): PricingPlan = {\n  val found = findPlanById(planId)\n  if (found != null) found else null\n}\ndef findPlanById(planId: String): PricingPlan = null\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"6b5685f9-1654-4a1a-96e4-cc7a15245120","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, label: String, active: Boolean)\ndef filterActivePlans(plans: Option[List[PricingPlan]]): List[PricingPlan] =\n  plans.getOrElse(Nil).filter(_.active)\n"}
{"id":"5d9d1991-b3b8-407a-8eda-348c1ada5b87","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def updatePlanPrice(plan: PricingPlan, newPrice: Double): PricingPlan = {\n  if (plan != null) new PricingPlan(plan.id, plan.name, newPrice)\n  else null\n}\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"d6d9e610-b910-4845-bed4-42234c8d6aba","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(id: String, tier: String, enabled: Boolean)\ndef enablePlan(plan: Option[PricingPlan]): Option[PricingPlan] =\n  plan.map(_.copy(enabled = true))\n"}
{"id":"5176e606-1b2b-455a-8ac9-2f1811d6e0cf","timestamp":1746097631580,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def downgradeToFreeIfNull(plan: PricingPlan): PricingPlan = {\n  if (plan != null) plan else new PricingPlan(\"free\", \"Free\", 0.0)\n}\nclass PricingPlan(val id: String, val name: String, val price: Double)\n"}
{"id":"db2579bb-ab2b-4cce-b22a-637ce6285021","timestamp":1746097651260,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"case class PricingPlan(name: String, price: BigDecimal)\ndef findPricingPlanById(planId: String): Option[PricingPlan] = {\n  val plan = Database.findPlanOrNull(planId)\n  Option(plan)\n}"}
{"id":"985bc021-3bc3-4bdd-bc0d-ffbf326f7ecc","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"object LegacyPricingApi {\n  def getPlanName(planId: String): String = {\n    if (planId == null) null\n    else {\n      if (planId == \"monthly\") \"Monthly Plan\" else null\n    }\n  }\n}"}
{"id":"6fad57ba-b506-4e5f-a275-5904015da110","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def getAnnualPlanPrice(planId: String): Option[BigDecimal] =\n  Option(PricingPlanService.fetchPlanPriceOrNull(planId)).filter(_ > 0)"}
{"id":"2b3ba9f6-7065-41d8-8b42-ed6f6d8cc041","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"class PricingPlanManager {\n  def fetchPlan(planId: String): PricingPlan = {\n    val plan = LegacyDatabase.retrievePlan(planId)\n    if (plan != null) plan else null\n  }\n}"}
{"id":"f1b0374c-118f-424f-a304-61e0cc9c1047","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def safeGetDiscountForPlan(plan: PricingPlan): Option[Double] =\n  Option(PricingDiscountApi.getDiscountOrNull(plan.name))"}
{"id":"b8ab8076-b18b-4f2f-a178-2d4d50516af0","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"object PricingPlanValidator {\n  def isValid(plan: PricingPlan): Boolean = {\n    Option(plan).exists(_.price > 0)\n  }\n}"}
{"id":"1eeae4fe-9f2e-44a0-9847-e3c1398aff35","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getPlanDescription(planId: String): String = {\n  val description = JavaPlanMetadata.getDescription(planId)\n  if (description == null) \"Unknown plan\" else description\n}"}
{"id":"fae8ded8-f23c-4b23-a466-f2ab267b62e2","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def findFeaturedPlanName: Option[String] =\n  Option(LegacyPlatform.featuredPlanNameOrNull)\n    .filter(_.nonEmpty)\n    .map(_.trim)"}
{"id":"cca26de4-b709-47ec-a93c-a9e49f789c40","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def fetchPlanWithNullCheck(planId: String): PricingPlan = {\n  val result = ExternalPlanRepository.lookupPlan(planId)\n  if (result != null) result else null\n}"}
{"id":"fae29e44-931b-4d44-a705-38c11fd6429d","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def getOptionalFeaturedPlan: Option[PricingPlan] =\n  Option(LegacyDatabase.getFeaturedPlanOrNull)"}
{"id":"88b66519-e240-415b-9331-41ae8c1c93f5","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def calculatePlanDiscountedPrice(plan: PricingPlan): BigDecimal = {\n  val discount = PricingDiscountService.getDiscountOrNull(plan.name)\n  if (discount != null) plan.price - discount else plan.price\n}"}
{"id":"56238e67-2d4d-424f-92fd-dc9d866011c2","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def updatePlanStatus(plan: PricingPlan): Option[PricingPlan] =\n  Option(plan).filter(_.price > 0).map(_.copy(name = plan.name + \" [Updated]\"))"}
{"id":"9427c05e-db7f-4d61-9b99-7e9df5e76937","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getLegacyPlanOrNull(planId: String): PricingPlan = {\n  val plan = OldPlanProvider.fetchPlan(planId)\n  if (plan == null) null else plan\n}"}
{"id":"5bd64da2-19a0-4b85-b793-a87f1d672e96","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def optionalPlanPrice(plan: PricingPlan): Option[BigDecimal] =\n  Option(plan).map(_.price).filter(_ > 0)"}
{"id":"5ed81530-18a8-4644-b0a5-3977c9ef1b83","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"object DeprecatedPricingFetcher {\n  def retrievePlanPrice(planId: String): BigDecimal = {\n    val price = JavaPricingEngine.getPlanPrice(planId)\n    if (price != null) price else BigDecimal(0)\n  }\n}"}
{"id":"3048b79a-647a-40e7-b907-10b5c5ae7e8b","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def planNameFold(plan: PricingPlan): String =\n  Option(plan).map(_.name).fold(\"No plan\")(identity)"}
{"id":"20e809be-17dd-4587-b65c-95f4f40f35aa","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def planDescriptionSafely(plan: PricingPlan): Option[String] =\n  Option(LegacyPlanInfoProvider.getDescriptionOrNull(plan.name))"}
{"id":"ce723ce0-dfb0-48d9-ac86-629dfbf97974","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def discountOrZero(plan: PricingPlan): Double = {\n  val value = PricingDiscountProvider.fetchDiscount(plan.name)\n  if (value != null) value else 0.0\n}"}
{"id":"bae49869-f82f-4491-92ff-caea83828963","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":false,"code":"def getTrialPlan(planId: String): PricingPlan = {\n  val plan = JavaPlanFetcher.getTrialPlanOrNull(planId)\n  if (plan != null) plan else null\n}"}
{"id":"af8c9705-1c18-474b-91ec-64b79d6a5a9c","timestamp":1746097651261,"category":"null_checks","topicUsed":"Wix backend service for managing Pricing Plans","isIdiomatic":true,"code":"def optionalTrialPlanId(plan: PricingPlan): Option[String] =\n  Option(LegacyIdResolver.getTrialPlanIdOrNull(plan.name))"}
{"id":"2b58d9a8-e3e0-4d5f-8d77-959bc5734f1f","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object LightController {\n  def turnOn(deviceName: String): Unit = {\n    println(s\"Turning on $deviceName\")\n  }\n  def turnOff(deviceName: String): Unit = {\n    println(s\"Turning off $deviceName\")\n  }\n  def getStatus(deviceName: String): String = {\n    if (deviceName == null) {\n      \"Error: No device specified\"\n    } else {\n      \"Online\"\n    }\n  }\n}\n"}
{"id":"e08dfe63-4297-4193-8897-8a515c84261d","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmartDoorLock {\n  var lockStatus: String = null\n  def setLockStatus(newStatus: String): Unit = {\n    if (newStatus != null) {\n      lockStatus = newStatus\n    }\n  }\n  def getLockStatus: String = {\n    if (lockStatus == null) \"Unknown\" else lockStatus\n  }\n}\n"}
{"id":"5a6111a6-2d0b-423e-9f18-7c333db95eab","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object Thermostat {\n  def fetchTemperature(roomId: String): java.lang.Integer = {\n    if (roomId == null) null else 22\n  }\n  def printTemperature(roomId: String): Unit = {\n    val temp = fetchTemperature(roomId)\n    if (temp != null) println(s\"Room $roomId temperature: $temp°C\")\n  }\n}\n"}
{"id":"2b45289b-d461-437a-8894-62dc9e77071e","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class CameraFeed(val deviceId: String) {\n  def captureImage(): Array[Byte] = {\n    if (deviceId == null) return null\n    Array[Byte](1,2,3,4)\n  }\n}\n"}
{"id":"5f0bae93-f4f9-4c4e-b45c-a51ffd3b8687","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object AlarmManager {\n  def getAlarmTime(device: String): String = {\n    if (device == null) return null\n    \"07:00\"\n  }\n  def triggerAlarm(device: String): Unit = {\n    val time = getAlarmTime(device)\n    if (time != null) println(s\"Alarm on $device set to $time\")\n  }\n}\n"}
{"id":"d363cba7-a916-4ea1-a652-d37022362b28","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SpeakerSystem {\n  private var lastPlayed: String = null\n  def playAudio(track: String): Unit = {\n    lastPlayed = if (track != null) track else null\n  }\n  def getLastPlayed: String = lastPlayed\n}\n"}
{"id":"c0650b51-4d67-4cd7-9e9f-bc9dca8e3245","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object SmartFan {\n  def setSpeed(level: java.lang.Integer): Unit = {\n    if (level == null) println(\"No speed set\")\n    else println(s\"Speed set to $level\")\n  }\n  def getCurrentSpeed: java.lang.Integer = null\n}\n"}
{"id":"21b5de62-0c50-4c5c-952d-d64d38220984","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class MotionSensor(val sensorId: String) {\n  var lastMotionTime: String = null\n  def updateMotionTime(time: String): Unit = {\n    if (time != null) lastMotionTime = time\n  }\n  def getLastMotionTime: String = lastMotionTime\n}\n"}
{"id":"c7b3bc9f-c68f-475a-8a73-f5fa0bb6f0c7","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"object SprinklerController {\n  def activate(zone: String): Unit = {\n    if (zone == null) println(\"Sprinkler zone unknown\")\n    else println(s\"Zone $zone activated\")\n  }\n  def getZoneStatus(zone: String): String = {\n    if (zone != null) \"Active\" else null\n  }\n}\n"}
{"id":"b6d47845-85b9-4660-82a2-ff7b25b8c796","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class Doorbell(val chimeId: String) {\n  def playChime(): Unit = {\n    if (chimeId == null) {\n      println(\"No chime specified\")\n      return\n    }\n    println(s\"Playing chime $chimeId\")\n  }\n}\n"}
{"id":"54cb13c1-878f-45a4-8941-75babff6074b","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class LightSwitch(id: String)\nobject LightSwitchManager {\n  def getLightSwitch(id: String): Option[LightSwitch] =\n    Option(id).map(LightSwitch(_))\n  def safeToggle(id: String): String =\n    getLightSwitch(id).fold(\"Light switch not found\")(sw => s\"Toggled ${sw.id}\")\n}\n"}
{"id":"9dbb826d-118e-49ef-ac3a-b4f451662020","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"class ThermostatControl(val room: String) {\n  def fetchCurrentTemperature: Option[Double] = {\n    val javaTemp: java.lang.Double = if (room == \"LivingRoom\") 21.5 else null\n    Option(javaTemp).map(_.toDouble)\n  }\n  def displayTemperature(): String =\n    fetchCurrentTemperature.map(t => s\"$room: $t°C\").getOrElse(\"Temperature unavailable\")\n}\n"}
{"id":"47b58d99-ddf7-4712-9f59-3e5d896b51d0","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"object DoorSensor {\n  def getBatteryLevel(sensorId: String): Option[Int] = Option(sensorId).map(_.length * 10)\n  def needsAttention(sensorId: String): Boolean = getBatteryLevel(sensorId).exists(_ < 20)\n}\n"}
{"id":"f19ef00c-ca22-41dd-a69c-7f3e0ae65932","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class SurveillanceCamera(deviceName: String)\nobject SurveillanceSystem {\n  def fetchCamera(deviceName: String): Option[SurveillanceCamera] = Option(deviceName).map(SurveillanceCamera(_))\n  def cameraOnline(deviceName: String): Boolean =\n    fetchCamera(deviceName).isDefined\n}\n"}
{"id":"a30b38a6-4aae-4110-97e2-61fb005bd843","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"object VoiceAssistant {\n  def getRecognizedCommand(input: String): Option[String] = Option(input).filter(_.startsWith(\"turn\"))\n  def handleCommand(cmd: String): String =\n    getRecognizedCommand(cmd).getOrElse(\"Unrecognized or empty command.\")\n}\n"}
{"id":"6a4f6102-5e6c-42d0-b385-001a06ede1b5","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"class SmartCurtainController {\n  def getCurrentPosition: Option[Int] = Option(null)\n  def openIfClosed(): String =\n    getCurrentPosition.fold(\"Curtain state unknown\")(p => if (p == 0) \"Opening curtain\" else \"Already open\")\n}\n"}
{"id":"c0d7d746-f282-46d6-a2b6-20596e5f3cea","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"object HeaterControl {\n  def maybeSetTemperature(target: java.lang.Integer): Option[String] = Option(target).map(t => s\"Setting temperature to $t\")\n  def statusMessage(target: java.lang.Integer): String = maybeSetTemperature(target).getOrElse(\"No temperature provided\")\n}\n"}
{"id":"b1090eac-01fe-4002-aede-fb4e6b2fab4a","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class WindowBlind(id: String)\nobject WindowBlindManager {\n  def findBlind(id: String): Option[WindowBlind] = Option(id).map(WindowBlind(_))\n  def safeRaise(id: String): String = findBlind(id).map(blind => s\"Raised ${blind.id}\").getOrElse(\"No such blind\")\n}\n"}
{"id":"3a812309-749d-44a0-9f4a-a932d657a71f","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"object ApplianceMonitor {\n  def getLatestReading(device: String): Option[Double] = Option(device).filter(_.startsWith(\"Meter\")).map(_ => 105.5)\n}\n"}
{"id":"db17c960-609a-4fc5-80a5-a0f9e7de0b71","timestamp":1746097677373,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"class IrrigationValve(val zone: String) {\n  def getStatus: Option[String] = Option(zone).map(z => if (z.nonEmpty) \"Open\" else \"Closed\")\n  def printStatus(): String = getStatus.getOrElse(\"Status unknown\")\n}\n"}
{"id":"478ca614-a146-4e8a-ab5b-e0bc4e7fa597","timestamp":1746097693859,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"case class Thermostat(id: String, temperature: Double)\ndef readThermostatTemp(t: Thermostat | Null): Double =\n  if (t != null) t.temperature else 0.0"}
{"id":"31106324-fab8-4a96-b4d2-81483b2e79c4","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"def getDeviceName(device: SmartDevice): String =\n  if (device != null) device.name else \"Unknown device\""}
{"id":"07b680c7-ec7a-401a-9c4a-feb725b825f8","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class LightController(val room: String)\ndef activateLight(controller: LightController): Boolean =\n  if (controller != null) {\n    // Simulate activation\n    true\n  } else false"}
{"id":"479dfb65-796f-4fc9-ad25-1d9955cb0693","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"def getDoorStatus(doorSensor: DoorSensor): String =\n  if (doorSensor != null) doorSensor.status else null"}
{"id":"11fc48dd-5c5e-45c8-9fdd-ce940cb9bcb8","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class Fan(val speed: Int)\ndef adjustFanSpeed(fan: Fan): Unit =\n  if (fan != null) {\n    // adjust speed logic\n    ()\n  }"}
{"id":"16b05b35-c537-4e66-a39c-81fa4949deec","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"def fetchCameraFeed(camera: Camera): Array[Byte] =\n  if (camera != null) camera.getFeed else null"}
{"id":"e98ad797-b720-4fa7-8b80-11a325e1eea3","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class SmartPlug(val state: String)\ndef togglePlug(plug: SmartPlug): String =\n  if (plug == null) null else if (plug.state == \"ON\") \"OFF\" else \"ON\""}
{"id":"6515283a-6487-451a-960f-bbfcd2234fe8","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"def getHumidity(sensor: HumiditySensor): java.lang.Double =\n  if (sensor != null) sensor.currentHumidity else null"}
{"id":"d8bc9cf3-3c3c-4bb5-8f44-3a83efa59fef","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"class RobotVacuum(var batteryLevel: Int)\ndef getVacuumBattery(vacuum: RobotVacuum): Int =\n  if (vacuum != null) vacuum.batteryLevel else -1"}
{"id":"a8ec9471-dd53-494b-a55c-0abc15c2b137","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":false,"code":"def findActiveScene(sceneManager: SceneManager): Scene =\n  if (sceneManager != null) sceneManager.activeScene else null"}
{"id":"71611314-bb80-441d-9747-55dde1517f6f","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class LightBulb(id: String, isOn: Boolean)\ndef switchLight(light: LightBulb): LightBulb =\n  Option(light).map(lb => lb.copy(isOn = !lb.isOn)).getOrElse(LightBulb(\"unknown\", false))"}
{"id":"84056c49-86c4-4f00-a337-bffaa8c011a8","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def getSensorStatus(sensor: Sensor | Null): Option[String] =\n  Option(sensor).map(_.status)"}
{"id":"052eb644-1af5-45aa-89c3-ecd6004198cf","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def safeGetDeviceIp(device: HomeDevice | Null): Option[String] =\n  Option(device).flatMap(d => Option(d.ipAddress))"}
{"id":"0209c77f-aaf6-4d90-9394-0c1975ae9121","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def readTemperature(sensor: TemperatureSensor | Null): Double =\n  Option(sensor).map(_.temperature).getOrElse(0.0)"}
{"id":"19cada07-a1b2-47a8-9eba-dcd38c4bb0aa","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def smartLockStatus(lock: SmartLock | Null): Option[String] =\n  Option(lock).map(_.lockStatus)"}
{"id":"0a2c407b-a4cb-4ece-875e-691cfc6f3bb4","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"case class CurtainController(state: String)\ndef openCurtain(controller: CurtainController | Null): Option[CurtainController] =\n  Option(controller).map(_.copy(state = \"open\"))"}
{"id":"93c08320-7a6b-4719-9d93-8028e2074de9","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def activeAlarms(alarmSystem: AlarmSystem | Null): List[String] =\n  Option(alarmSystem).map(_.getActiveAlarms).getOrElse(Nil)"}
{"id":"972c0129-4cda-409f-8b51-d59198a284ce","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def backupBatteryLevel(panel: ControlPanel | Null): Option[Int] =\n  Option(panel).map(_.batteryBackupLevel)"}
{"id":"e35916cd-df4f-42aa-91da-622a189c9af2","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def changeRoomVolume(controller: AudioController | Null, delta: Int): Option[Int] =\n  Option(controller).map(ac => ac.volume += delta).map(_ => controller.volume)"}
{"id":"96155d75-9ed1-4c08-8169-79faa714dfe4","timestamp":1746097693860,"category":"null_checks","topicUsed":"Smart home device control","isIdiomatic":true,"code":"def getIrrigationStatus(system: IrrigationSystem | Null): String =\n  Option(system).fold(\"offline\")(_.currentStatus)"}
{"id":"e5534b6b-dde5-448c-8ca9-b0602900ff91","timestamp":1746097708797,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class PassengerRequest(passengerId: String, destination: String)\ndef findDriverForRequest(request: PassengerRequest): Option[String] =\n  val drivers = List(\"alex\", \"jamal\", \"priya\")\n  drivers.find(_.nonEmpty)\n"}
{"id":"9d7111fd-d95c-4d76-94fd-50620398ce31","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getDriverName(driverId: String): String =\n  if(driverId == null) \"Unknown Driver\"\n  else driverId.toUpperCase()\n"}
{"id":"90326c05-de4d-43da-975f-10200a9304db","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def wrapNullableVehicle(vehicleId: String): Option[String] =\n  Option(vehicleId)\n"}
{"id":"29e70680-2ddc-4f42-adfc-eea594342b12","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"class JavaStyleRiderService {\n  def fetchLatestRequest(riderId: String): PassengerRequest = null\n}\ndef getLatestRequestSafe(riderService: JavaStyleRiderService, riderId: String): PassengerRequest =\n  val req = riderService.fetchLatestRequest(riderId)\n  if(req != null) req else null\n"}
{"id":"c8dfd568-1833-49e7-ba05-86de4a85742a","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def assignVehicleToDriver(vehicleId: String, driverId: String): Option[String] =\n  Option(vehicleId).flatMap { vId =>\n    Option(driverId).map(dId => s\"$dId assigned $vId\")\n  }\n"}
{"id":"185e5d89-474c-4655-9b46-cb2ef7df2e3e","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"object DispatchLogger {\n  def logRideAssignment(driver: String, request: Option[PassengerRequest]): Unit =\n    request match\n      case Some(req) => println(s\"$driver assigned to ${req.passengerId}\")\n      case None => println(\"No ride assigned\")\n}\n"}
{"id":"680d31cc-7743-4f27-97ec-cc707cbe9944","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getCurrentRide(requestId: String): String =\n  val rideId = possiblyNullRideId(requestId)\n  if(rideId != null)\n    rideId\n  else\n    null\n\ndef possiblyNullRideId(requestId: String): String =\n  if(requestId == \"active\") \"ride42\" else null\n"}
{"id":"2c5a24be-7456-4084-8768-9d41b3cc2928","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class Ride(driverId: String, requestId: String)\ndef optionifyRide(ride: Ride): Option[Ride] =\n  Option(ride)\n"}
{"id":"175fd214-40a7-4319-a2a6-a4b96f1e785e","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getEstimatedPickupTime(driverId: String): Option[Int] =\n  Option(driverId).filter(_.nonEmpty).map(_ => 7)\n"}
{"id":"fafc287f-1948-4809-8c79-08a3db1dede9","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def fetchDispatchCenterOrNull(centerCode: String): String =\n  if(centerCode.startsWith(\"NY\")) centerCode else null\n"}
{"id":"3ec20a58-0de5-4498-a52f-18c61eecdb0e","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def findAvailableVehicle(passengerLocation: String): String =\n  val id = if(passengerLocation == null) null else passengerLocation.reverse\n  if(id != null) id else null\n"}
{"id":"19984d65-5b83-4eb1-aa7c-22865ef80f56","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def safeWrapAssignment(driver: String): Option[String] =\n  Option(driver).filter(_.nonEmpty)\n"}
{"id":"ffea8360-e273-453d-8494-20de86837cfd","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"object RideSharingStatus {\n  def statusForAssignment(assignment: Option[String]): String =\n    assignment.fold(\"No assignment\")(id => s\"Assigned: $id\")\n}\n"}
{"id":"b3cd7fc3-462c-4c71-a244-92be38506157","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def cancelRideIfInactive(rideStatus: String): String =\n  if(rideStatus != null && rideStatus == \"inactive\") \"canceled\" else rideStatus\n"}
{"id":"6fda6185-baa7-43c9-aa29-c5608c9fcbd6","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def updateDispatchQueue(queueId: String, dispatcher: String): String =\n  if(queueId == null || dispatcher == null) null\n  else s\"$queueId updated by $dispatcher\"\n"}
{"id":"dff7b615-fbff-406c-9756-2f42757ced1d","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getOptionalVehicle(vehicleId: String): Option[String] =\n  Option(vehicleId).filter(_.nonEmpty)\n"}
{"id":"2a4f69c6-6d58-4164-bce2-f14b7d1079a5","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def assignDriverOrReturnNone(passengerId: String, driverId: String): Option[String] =\n  for\n    pid <- Option(passengerId)\n    did <- Option(driverId)\n  yield s\"$did assigned to $pid\"\n"}
{"id":"32b0bd80-e5ff-43d8-9cec-6382d68100b1","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def fetchDriverLocation(driverId: String): String =\n  if(driverId == null) null else s\"loc-$driverId\"\n"}
{"id":"d6a98fc3-a482-4ff0-83c2-d9c4ed9f217e","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getRideFeedbackOrNull(rideId: String): String =\n  if(rideId == null)\n    null\n  else if(rideId == \"1001\")\n    \"Great driver!\"\n  else\n    null\n"}
{"id":"86a2ef75-f7fb-4094-a0e6-da6a0b2e970f","timestamp":1746097708798,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getRequestOrElseNone(requestId: String): Option[String] =\n  Option(requestId).map(rid => s\"REQ-$rid\")\n"}
{"id":"cc923a98-752f-4f2d-8384-0c8276696545","timestamp":1746097757758,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class RideRequest(riderId: String, pickupLocation: String)\ndef getRequestOption(request: RideRequest | Null): Option[RideRequest] = Option(request)"}
{"id":"eb333a13-6a30-4a25-8ac3-29fca0b5856a","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def assignDriverOption(driverId: String | Null): Option[String] = Option(driverId).filter(_.nonEmpty)"}
{"id":"b56153ed-e9ae-4d2f-85f4-4f3cc92bd891","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"case class Vehicle(vehicleId: String, active: Boolean)\ndef activeVehicle(vehicle: Vehicle | Null): Option[Vehicle] = Option(vehicle).filter(_.active)"}
{"id":"2f337197-c240-4095-8bba-f47925dc5a93","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getEstimatedFareOption(fare: java.lang.Double | Null): Option[Double] = Option(fare).map(_.doubleValue)"}
{"id":"71a15308-58b8-42b2-92e7-ed7c1b47050b","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def dispatchToAvailableDriver(driverName: String | Null, request: RideRequest): Option[String] =\n  Option(driverName).map(d => s\"Dispatching request for ${request.riderId} to $d\")"}
{"id":"80ac37e1-3379-4467-b6aa-abca5321f5d4","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def tripRatingToOption(rating: java.lang.Integer | Null): Option[Int] = Option(rating).map(_.intValue)"}
{"id":"a3f1879c-5c7c-450b-b641-869bf7080da3","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def findVehicleOption(vehicleId: String | Null): Option[String] = Option(vehicleId).filter(_.startsWith(\"VEH-\"))"}
{"id":"878dc85b-73c2-4448-be1f-75ac3026b6b9","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getDispatchTimeOption(dispatchTime: Long | Null): Option[Long] = Option(dispatchTime)"}
{"id":"fffd5e48-b6ca-4573-a7f3-f0d16a880bca","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def pickFirstAvailableDriver(maybeDriver: String | Null): String =\n  Option(maybeDriver).getOrElse(\"No driver available\")"}
{"id":"e5eeca5a-3d53-4ae5-b573-d17504aed1cc","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getRiderNotesOption(notes: String | Null): Option[String] = Option(notes).filter(_.trim.nonEmpty)"}
{"id":"5e6c92aa-f4b6-404d-bfb8-313969a777c2","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def scheduleRideOption(rideTime: java.time.LocalDateTime | Null): Option[java.time.LocalDateTime] = Option(rideTime)"}
{"id":"582e8664-845d-4af0-88b3-fb19e9824854","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def updateDriverAssignmentOption(driver: String | Null, ride: RideRequest): String =\n  Option(driver).map(d => s\"Driver $d assigned to ${ride.riderId}\").getOrElse(\"No available driver\")"}
{"id":"15d6895c-5873-43ab-ad21-517f668ea90b","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def cancelReasonOption(cancelReason: String | Null): Option[String] = Option(cancelReason)"}
{"id":"026a743d-c45c-4eec-8c2a-4b3e764ad64a","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def safePickupLocation(location: String | Null): String = Option(location).getOrElse(\"Unknown Location\")"}
{"id":"ce946f49-aaad-4b71-b99b-bbf93f22f749","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def optionalSurgeMultiplier(multiplier: java.lang.Double | Null): Option[Double] = Option(multiplier).map(_.doubleValue)"}
{"id":"ebf89b48-cddb-4cf1-b693-dfbe56f65756","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def fetchActiveTripOption(tripId: String | Null): Option[String] = Option(tripId)\n\nfetchActiveTripOption(\"TRIP-024\").getOrElse(\"No Active Trip\")"}
{"id":"4c52c1a3-bf6c-4601-a897-d97eef22793a","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def getRiderContactOption(contact: String | Null): Option[String] = Option(contact)"}
{"id":"02451831-4efd-4f67-9c07-d718bf6c4436","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def lookupRideStatusOption(status: String | Null): Option[String] = Option(status).filter(_ == \"Active\")"}
{"id":"1f04814c-92d3-4766-bc3a-7e5b5301df9b","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def optionToUpperCaseDriver(driver: String | Null): Option[String] = Option(driver).map(_.toUpperCase)"}
{"id":"66942df6-8bd8-4750-9081-c0096c6d6681","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":true,"code":"def unwrapOrLogEx(dispatchId: String | Null): String = \n  Option(dispatchId).getOrElse { println(\"Missing dispatch id\"); \"DISPATCH-UNKNOWN\" }"}
{"id":"bab1c2b4-3202-440d-ac7c-8f972f67b3de","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def getRideRequest(requestId: String): RideRequest =\n  val result = simulateFindRideRequest(requestId)\n  if (result == null) null else result\n\ndef simulateFindRideRequest(id: String): RideRequest | Null = if id == \"R1\" then RideRequest(\"R1\",\"Downtown\") else null"}
{"id":"fac04bf0-a416-4b12-b513-fc56895fa08b","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def assignBackupDriver(driverName: String | Null): String =\n  if (driverName != null) driverName else null"}
{"id":"ad6aed2c-05cc-44c0-aa80-9e2883dc604b","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def checkCancelledTrip(tripStatus: String | Null): Boolean =\n  if(tripStatus == null) false else tripStatus == \"Cancelled\""}
{"id":"c6adea25-e52b-4b60-92a9-fd1678c08dbd","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def unsafeGetVehicle(vehicle: Vehicle | Null): String =\n  if(vehicle == null) null else vehicle.vehicleId"}
{"id":"375e0597-db33-4adc-92e2-d7e140715130","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def findAvailableVehicle(vehicleList: Array[Vehicle] | Null): Vehicle | Null =\n  if(vehicleList != null && vehicleList.length > 0) vehicleList(0) else null"}
{"id":"9d07238e-c7a6-417f-8118-40044def61e8","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def driverContactOrNull(contact: String | Null): String =\n  if(contact != null) contact else null"}
{"id":"a26e2063-3c63-44ea-9ee1-6f89fa1e63f4","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def javaStyleGetRideStatus(rideId: String): String | Null =\n  val status = simulateJavaRideStatus(rideId)\n  if(status != null) status else null\n\ndef simulateJavaRideStatus(rideId: String): String | Null = if rideId == \"ABC\" then \"Active\" else null"}
{"id":"d56d435a-32d9-430f-b108-415e48b77992","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def dispatchVehicle(vehicleId: String | Null): Boolean =\n  if(vehicleId != null) true else false"}
{"id":"28a1b527-46ea-4f6d-b738-fa58a5a964ce","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def dispatchTimeOrNull(time: Long | Null): Long | Null =\n  if(time != null) time else null"}
{"id":"b7cd3e44-cd76-4f46-9ca7-ec20a15718b0","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def incompleteTripRating(rating: java.lang.Integer | Null): Int =\n  if(rating == null) 0 else rating.intValue"}
{"id":"64081bc3-1db1-49da-b20b-4310b41e2f60","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def setPickupLocation(location: String | Null): String =\n  if(location != null) location else \"No location\""}
{"id":"43590293-f3d2-41e9-b2e8-568f4b88f202","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def matchDriverOrNull(driver: String | Null): String | Null =\n  if(driver != null && driver.startsWith(\"DRV-\")) driver else null"}
{"id":"955d018c-2508-476b-972d-7a53c8459809","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def scheduleRiderNotification(message: String | Null): String =\n  if(message == null) \"Unable to notify.\" else message"}
{"id":"d60f77ba-3736-4b56-ac8b-c055922e244d","timestamp":1746097757759,"category":"null_checks","topicUsed":"Ride-sharing dispatch","isIdiomatic":false,"code":"def cancelDispatch(reason: String | Null): Unit =\n  if(reason != null) println(s\"Dispatch cancelled: $reason\")"}
{"id":"44ffc182-7ec6-4ad1-9942-4608fde4bf9c","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Passenger(name: String, email: Option[String])\ndef getPassengerEmail(passenger: Passenger): String =\n  passenger.email.getOrElse(\"No Email Registered\")"}
{"id":"b7329645-2393-4eca-9514-ae07ee629bcd","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def findBookingReference(ticketId: String): String =\n  null"}
{"id":"227d2106-272f-43a3-b597-e57840f882da","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Flight(gate: Option[String])\ndef getGateInfo(flight: Flight): String =\n  flight.gate.fold(\"Gate Not Assigned\")(gate => s\"Boarding Gate: $gate\")"}
{"id":"3b1ff02d-3ab1-4ec0-be10-d7e9f6aec457","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class Ticket(val number: String, val seat: String)\ndef getSeatNumber(ticket: Ticket): String =\n  if(ticket != null) ticket.seat else \"Seat Unknown\""}
{"id":"18eb5f01-dec9-46d2-852c-d567033a5f98","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def safeTicketLookup(reference: String): Option[String] =\n  val resultFromLegacySystem: String = null\n  Option(resultFromLegacySystem)"}
{"id":"a60a8c0e-e007-4998-9cd4-53a58643eb9a","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def cancelReservation(reservationId: String): Boolean =\n  if(reservationId == null) false else true"}
{"id":"6ab3c509-dfcc-4065-a694-1425038bddea","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class BoardingPass(seat: Option[String])\ndef seatDisplay(boardingPass: BoardingPass): String =\n  boardingPass.seat.getOrElse(\"Unassigned\")"}
{"id":"b53df4c8-5a7e-4415-823f-800206ef3c6b","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def updatePassengerPhone(passenger: Passenger, newPhone: String): Passenger =\n  if(newPhone != null) passenger.copy(email = Some(newPhone)) else passenger"}
{"id":"6a2e8f18-fca9-40b6-9299-5357f8df31db","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def parseLuggageCount(luggageInfo: String): Option[Int] =\n  Option(luggageInfo).flatMap(info => info.toIntOption)"}
{"id":"fd481711-4150-4c10-8148-a53fbb73f95b","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getFlightNumber(flight: Flight): String =\n  if(flight == null) \"Unknown Flight\" else flight.hashCode().toString"}
{"id":"ca2a6f9d-cfbf-4d1e-af1c-6aa079bb9066","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Reservation(ticketNumber: Option[String])\ndef ticketStatus(reservation: Reservation): String =\n  reservation.ticketNumber.fold(\"Not Issued\")(num => s\"Ticket No: $num\")"}
{"id":"54149d88-6454-401a-b960-9222ff4fc149","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def assignMealPreference(passenger: Passenger, preference: String): Unit =\n  if(passenger == null || preference == null) return\n  println(s\"Assigned $preference to ${passenger.name}\")"}
{"id":"8ef1b03d-95eb-44aa-b7c0-ad030aa87a88","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def findAvailableFlight(from: String, to: String): Option[Flight] =\n  Option(null)"}
{"id":"ea01721b-c76e-4918-bfe5-d5abee409689","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getPassengerLoyaltyTier(passenger: Passenger): String =\n  if(passenger == null) null else \"Gold\""}
{"id":"19c63dec-e968-47e2-b09c-2e094208d056","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def printBoardingZone(passenger: Passenger): Unit =\n  Option(passenger.email).flatten match\n    case Some(email) => println(s\"Zone for $email: A\")\n    case None => println(\"Unknown boarding zone\")"}
{"id":"5663d3ea-bd60-4ff4-8971-88f0797a75c2","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def checkIn(ticket: Ticket): Boolean =\n  if(ticket != null) true else false"}
{"id":"fa529136-f54f-4665-abca-dc6bdbe7e073","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def firstAvailableSeat(seats: List[String]): Option[String] =\n  seats.headOption"}
{"id":"c548acfd-308b-4f00-8120-b3f442323621","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def retrieveFlightAttendant(name: String): String =\n  if(name == null) null else s\"Attendant: $name\""}
{"id":"a27d6395-ecdc-45f7-8fe0-aa5b38cb312b","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def showCheckInCounter(flight: Flight): String =\n  Option(flight.gate).flatten.getOrElse(\"Go to Information Desk\")"}
{"id":"22833dce-2f79-44ae-bdfa-c4696d21ec45","timestamp":1746097773499,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def findReservationByReference(reference: String): Reservation =\n  if(reference == null) null else Reservation(Some(\"TK123\"))"}
{"id":"4230d0fc-a98d-49e5-9e4a-ec7e7c6b68ed","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class Passenger(name: String, passportNumber: String)\ndef findPassenger(passengerId: String): Option[Passenger] =\n  val result = javaFindPassenger(passengerId) // Simulated Java API\n  Option(result)\ndef javaFindPassenger(passengerId: String): Passenger | Null =\n  if passengerId == \"P123\" then Passenger(\"Ava Green\", \"X9999999\") else null"}
{"id":"617848d7-42f7-4713-a5a6-d498cd223855","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getBookingReference(bookingId: String): String | Null =\n  if bookingId == \"B100\" then \"BRX7890\"\n  else null\nval reference = getBookingReference(\"B404\")\nif(reference == null) println(\"Booking reference not found\")\nelse println(\"Reference: \" + reference)"}
{"id":"99b1f36e-e555-4f03-bfd9-cd2eb56c5c59","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def ticketIssueDate(ticketNumber: String): Option[String] =\n  Option(fakeJavaIssueDate(ticketNumber))\ndef fakeJavaIssueDate(ticketNumber: String): String | Null =\n  if ticketNumber == \"TK001\" then \"2024-06-20\"\n  else null"}
{"id":"6a94107f-ae84-4530-81f2-c53d94994735","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class Flight(val flightNumber: String, val departure: String, val arrival: String)\ndef findFlight(flightNumber: String): Flight | Null =\n  if flightNumber == \"AC404\" then Flight(\"AC404\", \"Toronto\", \"Paris\")\n  else null\nval fl = findFlight(\"AC404\")\nif(fl != null) println(\"Flight found: \" + fl.departure)\nelse println(\"Flight not found\")"}
{"id":"d60fae74-a63e-4983-bf58-d882623182a6","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def retrieveSeatMap(flightNo: String): Option[List[String]] =\n  Option(fakeJavaSeatMap(flightNo))\ndef fakeJavaSeatMap(flightNo: String): List[String] | Null =\n  if flightNo == \"LH123\" then List(\"1A\", \"1B\", \"2A\")\n  else null"}
{"id":"879857b0-b7e7-40f3-8021-a3f98a476aa3","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def fetchBaggageInfo(passengerId: String): String | Null =\n  if passengerId == \"P500\" then \"2 Checked Bags\"\n  else null\nval info = fetchBaggageInfo(\"P501\")\nif(info == null) println(\"No baggage information available.\")\nelse println(info)"}
{"id":"65d9247a-9e4c-49a1-b951-db052609eb62","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def getMealOption(ticketNumber: String): Option[String] =\n  Option(javaGetMeal(ticketNumber))\ndef javaGetMeal(ticketNumber: String): String | Null =\n  if ticketNumber == \"TK900\" then \"Vegetarian\"\n  else null"}
{"id":"9f3e2e24-7a17-4758-9604-060a30bdd753","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"class FlightCrew(val crewName: String)\ndef assignCrewToFlight(flightNo: String): FlightCrew | Null =\n  if flightNo == \"SU205\" then FlightCrew(\"Alpha Crew\")\n  else null\nval assigned = assignCrewToFlight(\"AB321\")\nif(assigned != null) println(assigned.crewName)\nelse println(\"No crew assigned\")"}
{"id":"a0dd785d-dbe9-467a-862a-29c1186e51a1","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def findGateForFlight(flightNo: String): Option[String] =\n  Option(possiblyNullGate(flightNo))\ndef possiblyNullGate(flightNo: String): String | Null =\n  if flightNo == \"EK350\" then \"D4\"\n  else null"}
{"id":"97382aa2-a0f0-438d-8a3e-69379a6ff924","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def reservationStatus(reservationId: String): String | Null =\n  if reservationId == \"RS1000\" then \"Confirmed\"\n  else null\nval status = reservationStatus(\"RS2000\")\nif(status != null) println(\"Status: \" + status)\nelse println(\"Reservation status unknown\")"}
{"id":"40613ef3-bde6-4a2c-8179-655903e448c0","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def getFrequentFlyerPoints(cardNumber: String): Option[Int] =\n  Option(javaFrequentFlyer(cardNumber))\ndef javaFrequentFlyer(cardNumber: String): Integer | Null =\n  if cardNumber == \"FF7777\" then 14500 else null"}
{"id":"f694a35d-93e9-4223-a983-68b94089dbe4","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getLoungeAccess(passengerId: String): String | Null =\n  if passengerId == \"VIP001\" then \"Lounge A\"\n  else null\nval lounge = getLoungeAccess(\"VIP010\")\nif(lounge != null) println(\"Access: \" + lounge)\nelse println(\"No lounge access\")"}
{"id":"39caa0b3-ad9c-403f-8cbb-e4cb75d7e27c","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"case class BoardingPass(section: String, seat: String)\ndef getBoardingPassDetails(ticketNumber: String): Option[BoardingPass] =\n  Option(convertNullBoardingPass(javaBoardingPass(ticketNumber)))\ndef javaBoardingPass(ticketNumber: String): BoardingPass | Null =\n  if ticketNumber == \"TICK101\" then BoardingPass(\"B\", \"12C\") else null\ndef convertNullBoardingPass(bp: BoardingPass | Null): BoardingPass | Null = bp"}
{"id":"3413f43a-fbfe-4718-8176-969530a728cd","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getTravelInsuranceStatus(reservationId: String): String | Null =\n  if reservationId == \"RS333\" then \"Active\"\n  else null\nval tiStatus = getTravelInsuranceStatus(null)\nif(tiStatus == null) println(\"No insurance\")\nelse println(tiStatus)"}
{"id":"ab21673d-1325-46ed-9959-6f5cbe82b28b","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def scheduledDepartureDate(ticketNumber: String): Option[String] =\n  Option(javaDeparture(ticketNumber))\ndef javaDeparture(ticketNumber: String): String | Null =\n  if ticketNumber == \"T150\" then \"2024-07-01\"\n  else null"}
{"id":"4d6a290d-7adc-4a61-a69a-141d1f06a316","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def findPetReservation(passengerId: String): String | Null =\n  if passengerId == \"P888\" then \"Cat in Cargo\"\n  else null\nval pet = findPetReservation(\"P999\")\nif(pet == null) println(\"No pet reservation\")\nelse println(pet)"}
{"id":"552f8de4-f83d-48ec-b2b9-1ca04d50be9b","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def getSpecialAssistanceRequest(ticketNumber: String): Option[String] =\n  Option(possiblyNullAssistance(ticketNumber))\ndef possiblyNullAssistance(ticketNumber: String): String | Null =\n  if ticketNumber == \"AS101\" then \"Wheelchair\"\n  else null"}
{"id":"3da01753-b7ea-4583-851d-716061268a57","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def lookupCompanionTicket(primaryTicketNo: String): String | Null =\n  if primaryTicketNo == \"TK555\" then \"TK556\"\n  else null\nval companion = lookupCompanionTicket(\"TK000\")\nif(companion != null) println(\"Companion ticket: \" + companion)\nelse println(\"No companion ticket found\")"}
{"id":"4a10219d-eb04-418f-92d1-39b4434b85e0","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":true,"code":"def checkUpgradeEligibility(passengerId: String): Option[Boolean] =\n  Option(javaUpgradeEligibility(passengerId)).map(_ == true)\ndef javaUpgradeEligibility(passengerId: String): java.lang.Boolean | Null =\n  if passengerId == \"PPlatinum\" then java.lang.Boolean.TRUE\n  else null"}
{"id":"b5195658-5ae0-46a6-b0ed-1f5809edc06f","timestamp":1746097800741,"category":"null_checks","topicUsed":"Airline ticketing system","isIdiomatic":false,"code":"def getBulkheadSeatAvailability(flightNo: String): String | Null =\n  if flightNo == \"NH12\" then \"Available\"\n  else null\nval bulkheadSeat = getBulkheadSeatAvailability(\"NH13\")\nif(bulkheadSeat == null) println(\"No bulkhead seat available\")\nelse println(\"Bulkhead seat: \" + bulkheadSeat)"}
{"id":"9c71a0a3-ed77-4bc8-84ba-a7e67fcf130f","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class Room(number: Int, name: String)\ndef findRoomByNumber(roomNumber: Int, rooms: List[Room]): Option[Room] =\n  rooms.find(_.number == roomNumber)\n"}
{"id":"51674937-ccdf-49c2-9b7f-d1f807a5829a","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def getGuestFullName(firstName: String, lastName: String): String =\n  if (firstName != null && lastName != null) firstName + \" \" + lastName else null\n"}
{"id":"45d391e0-121d-4adf-ae51-9b6c3229f448","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getReservationComment(comment: String): Option[String] =\n  Option(comment).filter(_.nonEmpty)\n"}
{"id":"dd841f36-050b-4060-a99d-20da52c49b96","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"object NullHotelRoomService {\n  def getLastCheckedRoomStatus(roomService: NullRoomService): String =\n    val status = roomService.fetchRoomStatus()\n    if (status != null) status else \"Unknown\"\n}\n"}
{"id":"fec0c5ed-14e7-45f7-be0d-d48ec0db79eb","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def lookupBookingId(bookingId: String): Option[Int] =\n  Option(bookingId).flatMap(id => scala.util.Try(id.toInt).toOption)\n"}
{"id":"6971a627-d7d0-4442-9f41-1dc7f1c2e8ae","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def getDiscountCode(booking: Booking): String =\n  if (booking != null && booking.code != null) booking.code else null\n"}
{"id":"267dcf3b-f50f-47b3-b985-2fe6109e7fb0","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def safeGuestPhone(guestPhone: String): Option[String] =\n  Option(guestPhone).filter(_.matches(\"\\\\d{10}\"))\n"}
{"id":"f927fa78-7358-4cd3-bfc3-925feca267bb","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def findAvailableRoom(roomList: Array[Room]): Room =\n  for (r <- roomList) {\n    if (r != null && r.name != null && r.name.nonEmpty) return r\n  }\n  null\n"}
{"id":"effec191-de91-4b06-8868-0a04ba33a191","timestamp":1746097817043,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class GuestProfile(email: String)\ndef getGuestEmail(profile: GuestProfile): Option[String] =\n  Option(profile.email).filter(_.contains(\"@\"))\n"}
{"id":"ce261de4-3560-4e26-90b5-fe3a8ec2e75a","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def fetchHotelRating(javaHotelService: JavaHotelService, hotelId: Int): Integer =\n  val rating = javaHotelService.getRating(hotelId)\n  if (rating != null) rating else -1\n"}
{"id":"9014aea5-931f-4e2f-9514-ad76817c9785","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def toOptionReservation(legacyReservation: LegacyReservation): Option[Reservation] =\n  Option(legacyReservation).map(lr => Reservation(lr.id, lr.guestName))\n"}
{"id":"dff0df3e-259e-4330-a0ad-4781f62e7f11","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def getCheckInDate(reservation: Reservation): String =\n  if (reservation != null && reservation.checkIn != null) reservation.checkIn else \"\"\n"}
{"id":"8d7465dd-7f0f-47ba-b7f5-9f55672913c6","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getOptionalSpecialRequest(specialRequest: String): Option[String] =\n  Option(specialRequest).filter(_.nonEmpty)\n"}
{"id":"daa1f5f8-0e3c-4287-a90f-cf4350c638ae","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def guestToUpperCase(guest: Guest): String =\n  if (guest != null && guest.fullName != null) guest.fullName.toUpperCase else \"\"\n"}
{"id":"7395d9c3-abcf-4bec-bd37-957cb600342d","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def nextAvailableRoom(floor: List[Room]): Option[Room] =\n  floor.find(_.available)\n"}
{"id":"f0bf79d0-3ad6-44e3-bd5b-75632d361ad8","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def cancelBooking(booking: HotelBooking): Boolean =\n  if (booking != null) {\n    booking.status = \"Canceled\"\n    true\n  } else {\n    false\n  }\n"}
{"id":"6712f8bb-7bd1-4415-93a3-8584e6e4cab1","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def findReservationByEmail(reservations: Seq[Reservation], email: String): Option[Reservation] =\n  reservations.find(r => Option(r.email).exists(_ == email))\n"}
{"id":"ce0e2007-633a-47ce-8f4b-2946419d4190","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def tryUpdateRoomStatus(roomService: RoomService, roomNumber: Int, status: String): Boolean =\n  val room = roomService.getRoom(roomNumber)\n  if (room != null) {\n    room.status = status\n    true\n  } else {\n    false\n  }\n"}
{"id":"4eaa2dd2-b44c-488d-afe9-d001ae11d8dc","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getLoyaltyPoints(guest: Guest): Option[Int] =\n  Option(guest).flatMap(g => Option(g.loyaltyPoints))\n"}
{"id":"69c97ce3-3b97-48d5-b776-42b741b11188","timestamp":1746097817044,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def printReservationSummary(reservation: Reservation): Unit =\n  if (reservation != null && reservation.summary != null) {\n    println(reservation.summary)\n  }\n"}
{"id":"9480ab50-eebd-44b9-9591-bddfb8cb061a","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"case class GuestProfile(name: String, email: String)\ndef findGuestProfile(email: String): Option[GuestProfile] = {\n  val guest = javaGuestDatabaseFindByEmail(email) // returns null if not found\n  Option(guest)\n}"}
{"id":"b23ee68a-f8b5-42a6-8731-869ad0d2106f","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def lookupReservationById(id: Long): Reservation = {\n  val reservation = legacyReservationLookup(id) // may return null\n  if (reservation == null) null else reservation\n}"}
{"id":"ef18041d-f41f-4485-a643-a2fcc8dbff55","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getAvailableRoomNumber(roomList: List[Int]): Option[Int] =\n  roomList.headOption"}
{"id":"79eb469c-5299-4e19-b7d4-c62d7b4caab2","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def getGuestPhoneNumber(guest: GuestProfile): String = {\n  if (guest.phoneNumber == null) \"Unknown\"\n  else guest.phoneNumber\n}"}
{"id":"33fe8b2c-15f8-4be1-8af8-7aecc827b373","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def retrieveBooking(confirmationNumber: String): Option[Booking] = {\n  val booking = possibleNullBookingLookup(confirmationNumber) // may return null\n  Option(booking)\n}"}
{"id":"6b64a906-1a4a-4734-a386-cdc23ffbcf5d","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def cancelRoom(room: Room): Boolean = {\n  if (room == null) false\n  else {\n    room.status = \"Cancelled\"\n    true\n  }\n}"}
{"id":"a7b72610-ac9e-4894-beb8-bed289e88634","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def safeGuestEmail(profile: GuestProfile): Option[String] =\n  Option(profile.email)"}
{"id":"e0b37110-55ee-4a4f-a7ba-e4a0b31edbca","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def assignRoomToReservation(reservation: Reservation, room: Room): Reservation = {\n  if (reservation == null || room == null) null\n  else {\n    reservation.copy(assignedRoom = Some(room))\n  }\n}"}
{"id":"74450f16-16cd-4bd5-b4c5-588b6bd086fb","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def guestLoyaltyStatus(membershipNumber: String): Option[String] = {\n  Option(lookupLoyaltyProgram(membershipNumber)).flatMap(_.status)\n}"}
{"id":"3e530552-0dbb-4272-8460-5c4cb44c62ec","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def createBookingOrNull(guest: GuestProfile, room: Room): Booking = {\n  if (guest == null || room == null) null\n  else Booking(guest, room)\n}"}
{"id":"ffae994c-9bec-456f-996e-f8f79f720bcb","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getSpecialRequest(booking: Booking): Option[String] =\n  Option(booking.specialRequest)"}
{"id":"8dd73aeb-7b50-43d4-9e02-c447047421e5","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def checkPayment(paymentRef: String): Payment = {\n  val payment = legacyPaymentCheck(paymentRef) // could be null\n  if (payment != null) payment else null\n}"}
{"id":"2cbe884a-458b-44f3-9412-8cfc51a69132","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def wrapNullAmenity(amenity: JavaAmenity): Option[Amenity] =\n  Option(amenity)"}
{"id":"1e1a44f3-b5aa-4e3a-a358-b90a44782ae2","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def updateGuestRewardsPoints(guest: GuestProfile, points: Int): GuestProfile = {\n  if (guest != null) {\n    guest.copy(rewardsPoints = guest.rewardsPoints + points)\n  } else null\n}"}
{"id":"974fe4ef-8b3c-4367-ae49-07a06d6aee56","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def reservationNotesSummary(reservation: Reservation): String =\n  Option(reservation.notes).getOrElse(\"No notes available.\")"}
{"id":"ab56ad3f-97c9-45e7-b3ea-8d7312baf646","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def findRoomServiceById(id: Int): RoomService = {\n  val service = legacyFindService(id)\n  if (service == null) null else service\n}"}
{"id":"7a86b713-5d28-45c3-bb05-13a81047e81e","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def getReservationGuestName(booking: Booking): Option[String] =\n  Option(booking.guest).map(_.name)"}
{"id":"5b029a00-3d73-4290-a298-e19e4f256cee","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def setReservationStatus(reservation: Reservation, status: String): Unit = {\n  if (reservation != null) {\n    reservation.status = status\n  }\n}"}
{"id":"98987b98-0169-40b9-8af9-a40f2c59b595","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":true,"code":"def roomUpgradeOption(room: Room): Option[String] =\n  Option(room.upgradeAvailable).filter(_.nonEmpty)"}
{"id":"00c9dc60-fdbf-4e15-9607-17fe43406b4a","timestamp":1746097832173,"category":"null_checks","topicUsed":"Hotel reservation engine","isIdiomatic":false,"code":"def transferPayment(payment: Payment, toAccount: String): Boolean = {\n  if (payment == null || toAccount == null) false\n  else {\n    performTransfer(payment, toAccount)\n    true\n  }\n}"}
{"id":"a67f1949-814d-43c9-8c6f-5f8c52a0529c","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class DeliveryAddress(street: String, city: String, postalCode: String)\n\ndef findAddressByCustomerId(customerId: Int): Option[DeliveryAddress] = {\n  val address = Database.getCustomerDeliveryAddress(customerId)\n  Option(address)\n}"}
{"id":"9965bd04-1409-4e62-a5bf-8fe6189f0e42","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def calculateEstimatedArrivalTime(order: Order): Option[Int] = {\n  Option(order.pickupTime).flatMap { pickup =>\n    Option(order.estimatedTravelTime).map { travelTime =>\n      pickup + travelTime\n    }\n  }\n}"}
{"id":"88602c3a-50ff-449c-828f-52653694898e","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class Courier(name: String, currentLocation: Option[String])\n\ndef isCourierNearby(courier: Courier, location: String): Boolean = {\n  courier.currentLocation.contains(location)\n}"}
{"id":"f49fc281-039c-4d01-a166-941270cba3f5","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getOrderTipAmount(order: Order): Option[Double] = Option(order.tipAmount)\n\ndef formatTipAmount(order: Order): String = {\n  getOrderTipAmount(order).map(_.toString).getOrElse(\"No tip\")\n}"}
{"id":"d278857f-c140-42ad-9a27-521501fd5815","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def findAssignedCourier(orderId: Int): Option[Courier] = {\n  val courier = CourierDatabase.getCourierForOrder(orderId)\n  Option(courier)\n}"}
{"id":"64e59bee-bf5e-4ea4-82e4-7ae0220f5709","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def calculateDiscountCost(cost: Double, discount: Option[Double]): Double = {\n  discount.fold(cost)(d => cost - d)\n}"}
{"id":"f5254d19-5bf7-4177-a805-9d4aebd72ee4","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getDeliveryInstructions(orderId: Int): Option[String] = {\n  Option(MockJavaApis.fetchDeliveryInstructions(orderId))\n}\n\ndef showInstructions(orderId: Int): String = {\n  getDeliveryInstructions(orderId).getOrElse(\"No instructions\")\n}"}
{"id":"7a5a4a07-52c4-4942-9c1f-0bdb508e2bc7","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class FoodOrder(items: List[String], notes: Option[String])\n\ndef hasSpecialInstructions(order: FoodOrder): Boolean = {\n  order.notes.exists(_.nonEmpty)\n}"}
{"id":"154de59f-5600-4b74-bd16-d22f778f6d41","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getAvailableVehicleTypes(driverId: Int): Option[List[String]] = {\n  Option(JavaVehicleApi.getVehicleList(driverId)).map(_.toList)\n}"}
{"id":"234d6634-0b78-419c-b710-4aea8ac1e64c","timestamp":1746097847767,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def nextDropoffAddress(route: List[DeliveryAddress]): Option[DeliveryAddress] = {\n  route.headOption\n}"}
{"id":"71ada258-ce3e-4043-b209-58b9f1d735ca","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def setOrderPickupTime(order: Order, time: Int): Order = {\n  if (order != null) {\n    order.pickupTime = time\n    order\n  } else {\n    null\n  }\n}"}
{"id":"5a82ac89-1aa5-4b43-b4a3-74c122e7d8f7","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def checkIfDriverIsAvailable(driver: Driver): Boolean = {\n  if (driver.status != null && driver.status == \"available\") {\n    true\n  } else {\n    false\n  }\n}"}
{"id":"25982cf5-bc61-4287-95c5-75ed67649e1b","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getRestaurantPhoneNumber(restaurant: Restaurant): String = {\n  if (restaurant.phoneNumber != null) {\n    restaurant.phoneNumber\n  } else {\n    null\n  }\n}"}
{"id":"2ee2116e-1a5a-42e6-bb02-380a61ad1d7e","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def assignOrderToCourier(order: Order, courier: Courier): Boolean = {\n  if (order != null && courier != null) {\n    order.assignedCourier = courier\n    true\n  } else {\n    false\n  }\n}"}
{"id":"39e46588-e70f-43b0-a125-bb943137999c","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getPaymentMethod(order: Order): PaymentMethod = {\n  if (order.payment != null) {\n    order.payment\n  } else {\n    null\n  }\n}"}
{"id":"b10053c2-dfa5-4cf1-a192-cff20786f58d","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def attemptToFetchItemFromWarehouse(itemCode: String): InventoryItem = {\n  val item = WarehouseApi.javaLikeFetchItem(itemCode)\n  if (item != null) item else null\n}"}
{"id":"07c51c0a-6f00-4a37-9df9-051f0d68588c","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getScheduledDeliveryTime(order: Order): Integer = {\n  if (order.scheduledTime != null) {\n    order.scheduledTime\n  } else {\n    null\n  }\n}"}
{"id":"dd21ff56-7328-470a-a71b-9694eecf2bda","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getDriverEmail(driver: Driver): String = {\n  if (driver != null && driver.email != null) {\n    driver.email\n  } else {\n    null\n  }\n}"}
{"id":"99cb9d1e-df63-4db3-bc13-0b66667adeb5","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def findFirstActiveOrder(orders: Array[Order]): Order = {\n  for (o <- orders) {\n    if (o != null && o.status != null && o.status == \"active\") {\n      return o\n    }\n  }\n  null\n}"}
{"id":"0cb0fd64-d774-4d14-b068-e7e4c8841935","timestamp":1746097847768,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getLastKnownCourierLocation(courier: Courier): String = {\n  if (courier != null && courier.lastLocation != null) {\n    courier.lastLocation\n  } else {\n    null\n  }\n}"}
{"id":"c44a435a-fb86-4d1d-bac1-8b52a05e65e5","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"case class DeliveryVehicle(id: String, currentOrderId: Option[String])\ndef getActiveOrder(vehicle: DeliveryVehicle): Option[String] =\n  vehicle.currentOrderId"}
{"id":"aeb88fdc-cd6d-4391-af79-9160b03fa418","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def findCourierByPhone(phone: String): Courier =\n  if (phone.length == 0) null\n  else new Courier(phone)\nclass Courier(number: String)"}
{"id":"d8ce688a-5a17-4c90-9030-2f032279284d","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def fetchRestaurantPartner(name: String): Option[RestaurantPartner] =\n  Option(possibleNullRestaurantPartner(name))\nclass RestaurantPartner(val name: String)\ndef possibleNullRestaurantPartner(name: String): RestaurantPartner =\n  if (name.startsWith(\"A\")) new RestaurantPartner(name) else null"}
{"id":"6e8dc059-5a64-452b-a1bc-9028ad5c837f","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Order(val id: String, val assignedCourier: Courier)\ndef checkAssignedCourier(order: Order): String =\n  if (order.assignedCourier != null) order.assignedCourier.number\n  else \"No courier assigned\""}
{"id":"99f724e1-17e2-4ea4-a2e4-ab38c261d91a","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getDeliveryWindow(schedule: DeliverySchedule): Option[(Int, Int)] =\n  Option(schedule.windowStart).flatMap { start =>\n    Option(schedule.windowEnd).map { end => (start, end) }\n  }\nclass DeliverySchedule(val windowStart: java.lang.Integer, val windowEnd: java.lang.Integer)"}
{"id":"a62a513b-988a-4fc9-93aa-3c173cff712a","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Route(val waypoints: Array[String])\ndef getFirstWaypoint(route: Route): String =\n  if (route.waypoints != null && route.waypoints.length > 0) route.waypoints(0)\n  else null"}
{"id":"b35059be-4a45-4228-a7ee-0380486a729a","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def safeGetCustomerNote(orderNote: String): Option[String] =\n  Option(orderNote).filter(_.nonEmpty)"}
{"id":"9312f94b-9361-42e9-991d-44eb3a4d62c8","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliveryAssignment(val packageId: String, val driver: Driver)\nclass Driver(val driverName: String)\ndef getDriverName(assignment: DeliveryAssignment): String =\n  if (assignment.driver != null) assignment.driver.driverName\n  else \"Unknown\""}
{"id":"cff781aa-0b1f-4f19-a650-0ec8af918115","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def noteSummary(note: String): Option[Int] =\n  Option(note).map(_.length).filter(_ > 10)"}
{"id":"f5d9ace5-3437-4fe0-a5ec-59a96b06d93f","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"def getActiveSlot(slots: Array[TimeSlot]): TimeSlot =\n  if (slots != null && slots.length > 0) slots(0) else null\nclass TimeSlot(val start: Int, val end: Int)"}
{"id":"e5a89ca5-26ff-493a-af43-547049d0b9ed","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getCourierLocation(city: String): Option[Location] =\n  Option(queryDatabaseForLocation(city))\nclass Location(val latitude: Double, val longitude: Double)\ndef queryDatabaseForLocation(city: String): Location =\n  if (city == \"New York\") new Location(40.7128, -74.0060) else null"}
{"id":"61d54fd6-56d9-4f85-9200-b3804bda5a9b","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliveryRequest(var status: String)\ndef isRequestPending(request: DeliveryRequest): Boolean =\n  if (request != null && request.status != null && request.status == \"Pending\")\n    true\n  else false"}
{"id":"974a714e-4fdb-4797-b106-3cfe653f3500","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def safeDriverLicense(driver: Driver): Option[String] =\n  Option(driver.licenseNumber).map(_.toUpperCase)\nclass Driver(val licenseNumber: String)"}
{"id":"fab6f382-431b-456d-be1f-5cacb3e55229","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Package(val description: String)\ndef packageDescription(pkg: Package): String =\n  if (pkg == null || pkg.description == null) \"No description\" else pkg.description"}
{"id":"31181861-1e86-45e7-8ef6-2ab96fdc2997","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getFoodTemperature(order: Order): Option[Double] =\n  Option(order.temperature).filter(_ > 0)\nclass Order(val temperature: java.lang.Double)"}
{"id":"67f2d55b-1a1f-447f-8d49-459d15d933b1","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class DeliveryCustomer(val rating: java.lang.Double)\ndef getRating(customer: DeliveryCustomer): Double =\n  if (customer != null && customer.rating != null) customer.rating.doubleValue()\n  else 0.0"}
{"id":"bf7bc9f4-48ff-4193-92af-a1d4e157e5c6","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getLatestDispatchId(dispatch: DispatchData): Option[String] =\n  Option(dispatch.latestId)\nclass DispatchData(val latestId: String)"}
{"id":"47d24e90-5029-4fa3-b7f6-4e25a395c1f5","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Vehicle(val registration: String)\ndef getVehicleId(vehicle: Vehicle): String =\n  if (vehicle != null) vehicle.registration else null"}
{"id":"8fe705dc-e7ee-4084-a833-0e9fb34b41a3","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":true,"code":"def getCourierBonus(courier: Courier): Option[Int] =\n  Option(courier.bonus).map(_ * 2)\nclass Courier(val bonus: java.lang.Integer)"}
{"id":"12ce169c-9c1f-4ec9-a9cc-8aa6d5fe8c19","timestamp":1746097865243,"category":"null_checks","topicUsed":"Food delivery logistics","isIdiomatic":false,"code":"class Restaurant(val menu: Array[String])\ndef getFirstMenuItem(restaurant: Restaurant): String =\n  if(restaurant.menu != null && restaurant.menu.length > 0) restaurant.menu(0)\n  else null"}
{"id":"f8854ffd-93f7-4147-9471-1f393d4dbfdc","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Track(title: String, duration: Int)\ndef findTrackByTitle(tracks: List[Track], title: String): Option[Track] =\n  tracks.find(_.title == title)\n\nval playlist = List(Track(\"Sunrise\", 200), Track(\"Twilight\", 180))\nval result: Option[Track] = findTrackByTitle(playlist, \"Twilight\")\nresult.map(_.duration).getOrElse(0)"}
{"id":"618fd274-fe2b-4601-afb8-68a39e03050e","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def getAlbumArtUrl(albumId: String): String =\n  null\n\nval artUrl = getAlbumArtUrl(\"al987\")\nif (artUrl != null) {\n  artUrl.length\n} else {\n  0\n}"}
{"id":"e6f0735d-340d-4d0b-9f86-9d61b59539d8","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def getCurrentListener(userId: String): String =\n  if userId == \"\" then null else \"listenerName\"\n\nval listener = getCurrentListener(\"\")\nif (listener != null) {\n  listener.toUpperCase\n} else {\n  \"Guest\"\n}"}
{"id":"dcd76179-8716-473b-9c94-6ed709440a1e","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def fetchArtistBio(name: String): Option[String] =\n  Option(javaArtistBio(name))\n\ndef javaArtistBio(artist: String): String =\n  if artist == \"Luna\" then \"Dream-pop artist.\" else null\n\nval bio = fetchArtistBio(\"Nova\").getOrElse(\"No bio available.\")"}
{"id":"e1a3b080-270a-4b68-a3c2-84bce9e4bfaf","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Playlist(id: String, tracks: List[String])\ndef playlistDuration(playlist: Option[Playlist], durationLookup: String => Int): Int =\n  playlist.map(_.tracks.map(durationLookup).sum).getOrElse(0)\nval emptyPlaylist = None\nplaylistDuration(emptyPlaylist, _ => 120)"}
{"id":"479d862a-7d73-4616-b992-c2e6784bbb6d","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def getFeaturedTrack(): String =\n  null\n\nval featured = getFeaturedTrack()\nif (featured != null) {\n  println(featured)\n} else {\n  println(\"No featured track.\")\n}"}
{"id":"9aed577d-b366-416d-81bd-7c1cf507c1fd","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def findLyrics(trackId: String): Option[String] =\n  Option(simulateJavaLyrics(trackId))\ndef simulateJavaLyrics(id: String): String = if id == \"tx123\" then \"Sing along!\" else null\nval lyricsText = findLyrics(\"tx000\").fold(\"No lyrics found.\")(_.toUpperCase)"}
{"id":"8898a240-86c6-47fc-aacf-0079ce9586e8","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class Library(val tracks: Array[String]) {\n  def getTrackByIndex(idx: Int): String =\n    if (idx >= 0 && idx < tracks.length) tracks(idx) else null\n}\nval library = new Library(Array(\"Melody\", \"Harmony\"))\nval t = library.getTrackByIndex(5)\nif (t != null) t.toLowerCase() else \"No track\""}
{"id":"25ea3990-9b7f-4713-bb0a-3f46aedff574","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"val possibleNextTrack: String = null\nval playing: Boolean = if (possibleNextTrack != null) true else false"}
{"id":"fec92fc1-d8ab-4c34-a0f9-608f23ff06fe","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def safeGetPodcastTitle(x: String): Option[String] =\n  Option(x)\nsafeGetPodcastTitle(null).getOrElse(\"Untitled Podcast\")"}
{"id":"31cc490b-28bc-460b-979c-eb65418ab3f6","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Artist(name: String, genre: String)\ndef selectArtist(name: String): Option[Artist] =\n  Option(javaArtistLookup(name))\ndef javaArtistLookup(n: String): Artist = if n == \"SkyFlow\" then Artist(\"SkyFlow\", \"Ambient\") else null\nselectArtist(\"Moon\") match\n  case Some(artist) => artist.genre\n  case None        => \"Unknown\""}
{"id":"e5c5d918-a236-445c-8a94-31ff58f482ad","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def fetchStreamUrl(songId: String): String =\n  null\nval url = fetchStreamUrl(\"track981\")\nif (url == null) println(\"Stream unavailable\")\nelse println(url)"}
{"id":"f3b25cc8-e27d-48e0-99c0-8d5b97d66110","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"val cachedAlbum: String = null\nif (cachedAlbum == null) println(\"Fetch from server\") else println(cachedAlbum)"}
{"id":"5e982199-641e-4f6b-a49c-2504849a3672","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def wrapJavaSongData(data: String): Option[String] =\n  Option(data)\nval safeData = wrapJavaSongData(null).getOrElse(\"Unavailable song data\")"}
{"id":"351ed909-7ca2-47c1-8fa0-79c6dfcb2c1e","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class UserProfile(id: String, subscription: Option[String])\ndef hasPremiumAccess(user: UserProfile): Boolean =\n  user.subscription.exists(_ == \"Premium\")\nhasPremiumAccess(UserProfile(\"u001\", None))"}
{"id":"6be2fed8-0ae3-4f6f-a318-dff7a5d200a1","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def recentPlaylist(owner: String): Option[String] =\n  val result: String = if owner == \"DJX\" then \"Late Night Mix\" else null\n  Option(result)\nrecentPlaylist(\"Alice\").getOrElse(\"No playlist found\")"}
{"id":"361ba87a-4149-4d4a-81bd-fcad5fc83543","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class Mixer {\n  def getActiveSession(id: String): String = if (id == \"MX001\") \"ActiveSession\" else null\n}\nval mixer = new Mixer\nval session = mixer.getActiveSession(\"OTHERID\")\nif (session != null) println(session) else println(\"No session\")"}
{"id":"41f1c25e-3ff3-4ea0-b36a-de4ad6097bf2","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def getUserQueue(userId: String): Array[String] = null\nval queue = getUserQueue(\"Adam\")\nif (queue != null && queue.length > 0) println(\"Queue loaded\") else println(\"Queue empty\")"}
{"id":"ae7634dd-38b4-4d41-a4ed-980f051e226b","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def playlistOwner(playlistId: String): Option[String] =\n  val result = if playlistId == \"Top100\" then \"curator89\" else null\n  Option(result).filter(_.nonEmpty)\nplaylistOwner(\"DailyMix\").getOrElse(\"Unknown Owner\")"}
{"id":"6dd9787e-cd8a-41bf-abff-a9a8fb8128a0","timestamp":1746097884052,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def updateCurrentTrack(current: String): String =\n  if (current == null) \"Unknown Track\" else current\nupdateCurrentTrack(null)"}
{"id":"f194b176-5c7a-4d7e-9218-bcd0d7792eba","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Track(title: String, artist: String)\ndef findTrackByTitle(tracks: List[Track], title: String): Option[Track] =\n  tracks.find(_.title == title)\n\nval allTracks = List(Track(\"Dreamscape\", \"Nia Echo\"))\nval result = findTrackByTitle(allTracks, \"Dreamscape\").getOrElse(Track(\"Unknown\", \"Unknown\"))"}
{"id":"97c739df-1e2a-4adf-9273-5e6462c12db3","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def fetchPlaylistIdFromAPI(playlistName: String): String =\n  if playlistName == \"focus\" then \"pl12345\" else null\n\nval focusId = fetchPlaylistIdFromAPI(\"energy\")\nif (focusId == null) println(\"Playlist not found\") else println(s\"Playlist ID: $focusId\")"}
{"id":"de4ccd36-6839-4465-8b39-a96d472da4d8","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def getAlbumCoverOrNone(albumCover: String | Null): Option[String] =\n  Option(albumCover)\n\nval coverOption = getAlbumCoverOrNone(null)\nval coverUrl = coverOption.getOrElse(\"/images/default-cover.jpg\")"}
{"id":"9d628406-c496-48f5-ac3e-538b192851c4","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class AudioStream(var codec: String)\ndef initializeCodec(stream: AudioStream): Unit =\n  if (stream != null) stream.codec = \"AAC\"\nval brokenStream: AudioStream = null\ninitializeCodec(brokenStream)"}
{"id":"ec4c3646-7a57-4f71-990b-ddba1295f9d7","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class UserSetting(equalizer: String)\ndef userEqualizerSetting(setting: Option[UserSetting]): String =\n  setting.map(_.equalizer).getOrElse(\"flat\")\nval userSetting: Option[UserSetting] = None\nval eqValue = userEqualizerSetting(userSetting)"}
{"id":"b5ada3ed-ce47-4c5c-838c-7166198df37f","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def lookupArtistFromExternalAPI(name: String): String =\n  if name == \"Ava Pulse\" then \"Ava Pulse\" else null\nval artistRaw = lookupArtistFromExternalAPI(\"Unknown Artist\")\nif (artistRaw == null) println(\"Artist not found\") else println(artistRaw)"}
{"id":"0d9d34d7-9002-493f-bbc8-5b51d481798c","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def safeQueueTrack(potentialTrack: String | Null): Option[String] =\n  Option(potentialTrack)\nval current = safeQueueTrack(\"Shadow Dance\")\nval next = safeQueueTrack(null)"}
{"id":"d4db7e1f-23f3-4997-a013-48b3a327154b","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def extractTrackIdFromUrl(url: String): String =\n  if (url.contains(\"track/\")) \"t0019\" else null\nval trackId = extractTrackIdFromUrl(\"music.com/album/track/heatwave\")\nif (trackId != null) println(s\"ID: $trackId\")"}
{"id":"4d009c7a-5ac0-41a5-9d11-864f428002e5","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def findPremiumSubscription(user: String): Option[String] =\n  if user == \"premiumUser\" then Some(\"active\") else None\nval subStatus = findPremiumSubscription(\"casualListener\").getOrElse(\"inactive\")"}
{"id":"b7c2bf4b-719b-48ee-9a28-7f72218917d6","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def fetchLyrics(song: String): String =\n  if song == \"Silent Code\" then \"Encrypted silence...\" else null\nval lyrics = fetchLyrics(\"Silent Code\")\nif (lyrics != null) println(lyrics)"}
{"id":"a212299c-d260-44ba-88fe-71f5329d1c78","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def findRecentlyPlayedSong(recent: List[String]): Option[String] =\n  recent.headOption\nval song = findRecentlyPlayedSong(Nil).getOrElse(\"No recent tracks\")"}
{"id":"e3f7d023-35c6-40d1-a359-c11afd6a6d4a","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"class StreamingSession(var currentUser: String)\ndef checkUserInSession(session: StreamingSession): Boolean =\n  if (session == null) false else session.currentUser == \"Patricia\"\nval badSession: StreamingSession = null\nval valid = checkUserInSession(badSession)"}
{"id":"a652aa4b-a7e3-4085-963b-558d2a18eef7","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def albumArtUrl(coverRaw: String | Null): String =\n  Option(coverRaw).getOrElse(\"/art/default.jpg\")\nval imageLink = albumArtUrl(null)"}
{"id":"a9a2c149-77bb-443c-a31a-65602bf24240","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def externalAdProvider(song: String): String =\n  if (song.length > 5) \"ad123\" else null\nval adId = externalAdProvider(\"Mix\")\nif (adId == null) println(\"No ad available.\")"}
{"id":"a966b11e-6578-4f87-a2bd-0db6f8b286da","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def getDeviceName(rawName: String | Null): Option[String] =\n  Option(rawName).filter(_.nonEmpty)\nval device = getDeviceName(\"\")\nval name = device.getOrElse(\"Unknown Device\")"}
{"id":"529eb73d-3974-4c85-9992-69a7f1743034","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def retrieveUserProfileFromLegacy(name: String): String =\n  if (name.startsWith(\"guest\")) null else s\"Profile for $name\"\nval profile = retrieveUserProfileFromLegacy(\"guest47\")\nif (profile == null) println(\"No profile.\")"}
{"id":"1cf736b4-328e-4978-b3c6-043e7b0aa362","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"case class Recommendation(track: String)\ndef recommendTrack(rec: Option[Recommendation]): String =\n  rec.map(_.track).fold(\"Try Discover Weekly\")(_.toUpperCase)\nval msg = recommendTrack(Some(Recommendation(\"Chillwave Vibes\")))"}
{"id":"3927283a-ea84-46f7-b520-e718e8703f5e","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def javaSearchPlaylist(name: String): String =\n  if (name == \"focus\") \"focus-list-983\" else null\nval res = javaSearchPlaylist(\"study\")\nif (res != null && res.length > 5) println(res)"}
{"id":"d0cd84f2-f698-4297-ad9e-cc71963c551b","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":true,"code":"def getBitrateConfig(bitrate: String | Null): Option[String] =\n  Option(bitrate)\nval setBitrate = getBitrateConfig(\"320kbps\").exists(_ == \"320kbps\")"}
{"id":"f3732c71-d3f8-46fd-a86d-320a4b74c007","timestamp":1746097903455,"category":"null_checks","topicUsed":"Digital music streaming","isIdiomatic":false,"code":"def findCollabFeatureTrack(name: String): String =\n  if (name.contains(\"feat.\")) name else null\nval track = findCollabFeatureTrack(\"Sol Resonance feat. Jade Lotus\")\nif (track != null) println(s\"Found collab: $track\")"}
{"id":"5d255bbc-7c94-4e06-9846-7e3d17725f62","timestamp":1746097922649,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class UserProfile(username: String, displayName: String)\ndef findTutorProfile(username: String): Option[UserProfile] =\n  val javaProfile: UserProfile | Null = getJavaTutorProfile(username)\n  Option(javaProfile)\ndef getJavaTutorProfile(username: String): UserProfile | Null =\n  if username == \"alice\" then\n    UserProfile(\"alice\", \"Alice Tutor\")\n  else\n    null"}
{"id":"688a24e6-1611-446c-9519-1c9958d7addf","timestamp":1746097922649,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getStudentEmail(studentId: Int): String = {\n  val email: String = fetchEmailFromExternalSystem(studentId)\n  if (email != null) email else \"no-email@notfound.com\"\n}\ndef fetchEmailFromExternalSystem(studentId: Int): String =\n  if (studentId == 42) \"bob@student.com\" else null"}
{"id":"a487e654-ea40-4c57-aa69-533ddb16cb11","timestamp":1746097922649,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Lesson(material: String, isUploaded: Boolean)\ndef getUploadedLesson(materialId: String): Option[Lesson] =\n  val lesson: Lesson | Null = legacyLessonFinder(materialId)\n  Option(lesson)\ndef legacyLessonFinder(materialId: String): Lesson | Null =\n  if materialId == \"pdf123\" then Lesson(\"Scala Basics.pdf\", true) else null"}
{"id":"d8c24fcb-5815-4a62-9cd6-27c8c964d112","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getTutorRating(tutorName: String): Int = {\n  val rating: java.lang.Integer = fetchRatingFromLegacySystem(tutorName)\n  if (rating != null) rating else 0\n}\ndef fetchRatingFromLegacySystem(tutorName: String): java.lang.Integer =\n  if (tutorName == \"Chris\") 5 else null"}
{"id":"c4d4add0-aa6f-44d5-bda5-46c91d39dddd","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def studentTokenOption(token: String | Null): Option[String] =\n  Option(token)\n\ndef logStudentActivity(token: String | Null): String =\n  studentTokenOption(token).map(t => s\"Logged in: $t\").getOrElse(\"Anonymous login\")"}
{"id":"233c8765-df37-4396-92fd-52497dab01e3","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class Course(val title: String, val instructor: String)\ndef findCourseByTitle(title: String): Course | Null =\n  if (title == \"Scala Programming\") new Course(\"Scala Programming\", \"Emma Tutor\") else null\n\ndef getInstructor(course: Course | Null): String =\n  if (course != null) course.instructor else \"No instructor assigned\""}
{"id":"51e446ff-2291-44f1-b8a2-df5b100a756f","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def parseAssignmentSubmission(submission: String | Null): Option[String] =\n  Option(submission).filter(_.length > 10).map(_.trim)\n\ndef processSubmission(submission: String | Null): String =\n  parseAssignmentSubmission(submission).getOrElse(\"Invalid submission\")"}
{"id":"8edf983f-fae0-44bb-953b-75bab6ed31ea","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getStudentSession(sessionId: String): StudentSession = {\n  val session: StudentSession = fetchSessionFromDb(sessionId)\n  if (session != null) session else null\n}\nclass StudentSession(val sid: String)\ndef fetchSessionFromDb(sessionId: String): StudentSession =\n  if (sessionId == \"sess123\") new StudentSession(\"sess123\") else null"}
{"id":"8faae714-be90-40d5-ad98-9bddd4235db2","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def maybeGetTutorBio(tutorId: Int): Option[String] =\n  Option(fetchBioFromLegacySystem(tutorId)).filter(_.nonEmpty)\ndef fetchBioFromLegacySystem(tutorId: Int): String | Null =\n  if tutorId == 1 then \"Scala specialist with 10 years experience\" else null"}
{"id":"117545a0-0cc3-4f58-9508-d3ed4d16d781","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def courseDescriptionOrFallback(courseId: String): String = {\n  val description: String = fetchCourseDescFromLegacy(courseId)\n  if (description != null) description else \"Description not available.\"\n}\ndef fetchCourseDescFromLegacy(courseId: String): String =\n  if (courseId == \"scala-course\") \"Learn Scala 3\" else null"}
{"id":"e438c4e1-01de-409a-b0f3-1527e8694470","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Feedback(content: String)\ndef getFeedback(studentId: Int): Option[Feedback] =\n  Option(legacyFeedbackService(studentId))\ndef legacyFeedbackService(studentId: Int): Feedback | Null =\n  if studentId == 100 then Feedback(\"Great lesson!\") else null"}
{"id":"68deb65d-d558-4468-82ac-9901545815cb","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getLessonMaterial(materialId: String): String = {\n  val material: String = callLegacyMaterialService(materialId)\n  if (material != null) material else \"Material not found\"\n}\ndef callLegacyMaterialService(materialId: String): String =\n  if (materialId == \"mat21\") \"Calculus.pdf\" else null"}
{"id":"d48ba323-cfc2-454d-996f-5d8088645e21","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def findMeetingLink(sessionId: String | Null): Option[String] =\n  Option(sessionId).flatMap(id => Option(getLegacyMeetingLink(id)))\ndef getLegacyMeetingLink(id: String): String | Null =\n  if id == \"s-17\" then \"https://meetings.platform.com/s-17\" else null"}
{"id":"fece6f15-8ac2-4745-938c-6add4ec45350","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getTutorAvatarOrDefault(tutorUsername: String): String = {\n  val avatarUrl: String = fetchAvatarFromLegacy(tutorUsername)\n  if (avatarUrl != null) avatarUrl else \"default-avatar.png\"\n}\ndef fetchAvatarFromLegacy(tutorUsername: String): String =\n  if (tutorUsername == \"aliceTutor\") \"avatar-alice.png\" else null"}
{"id":"55a2f0fd-aa91-47f6-8861-2a1ce890cddb","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def studentOptionalPhone(phone: String | Null): Option[String] =\n  Option(phone).filter(_.startsWith(\"+\"))\ndef displayStudentContact(phone: String | Null): String =\n  studentOptionalPhone(phone).getOrElse(\"No phone on file\")"}
{"id":"c711acfe-d85c-4ba3-acd5-7320fa946731","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class Session(val code: String)\ndef retrieveSessionOrNull(sessionCode: String): Session | Null =\n  if (sessionCode == \"A1B2\") new Session(\"A1B2\") else null\n\ndef sessionCodeOrEmpty(session: Session | Null): String =\n  if (session != null) session.code else \"\""}
{"id":"d2779667-86c6-4a74-86cf-49245fac2f9e","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def getCourseOption(courseId: String): Option[String] =\n  Option(legacyCourseLookup(courseId))\ndef legacyCourseLookup(courseId: String): String | Null =\n  if courseId == \"C-101\" then \"Intro to Machine Learning\" else null"}
{"id":"3d5d6240-5f75-45c6-b4c2-be778f2529c3","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getQuizResult(studentId: Int): java.lang.Integer = {\n  val result: java.lang.Integer = oldQuizResultRetriever(studentId)\n  if (result != null) result else 0\n}\ndef oldQuizResultRetriever(studentId: Int): java.lang.Integer =\n  if (studentId == 11) 80 else null"}
{"id":"d42f23d5-8b37-4f9e-ab7a-542ed2889b9d","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def extractOptionalRecordingUrl(meetingId: String): Option[String] =\n  Option(legacyRecordingUrlRetriever(meetingId))\ndef legacyRecordingUrlRetriever(meetingId: String): String | Null =\n  if meetingId == \"R987\" then \"https://videos.platform.com/rec987\" else null"}
{"id":"2ff4dc6b-312f-44dd-8356-13d24f8f7a9f","timestamp":1746097922650,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def findStudentNotes(studentId: Int): String = {\n  val notes: String = getLegacyNotes(studentId)\n  if (notes != null) notes else \"No notes found\"\n}\ndef getLegacyNotes(studentId: Int): String =\n  if (studentId == 30) \"Reviewed math concepts.\" else null"}
{"id":"218026da-48d8-4f1b-a4cb-29ff10045f14","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Tutor(id: Int, fullName: String)\ndef getTutorById(id: Int): Option[Tutor] =\n  val tutor = fetchTutorFromLegacySystem(id)\n  Option(tutor)\n\ndef fetchTutorFromLegacySystem(id: Int): Tutor =\n  if id == 101 then Tutor(101, \"Emily Carter\") else null\nval maybeTutor = getTutorById(101)\nval tutorName = maybeTutor.map(_.fullName).getOrElse(\"Unknown Tutor\")"}
{"id":"6597b7c4-59c9-404a-a3f3-b2f73c4e0b07","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getStudentEmail(studentUsername: String): String = {\n  val email = fetchStudentEmail(studentUsername)\n  if (email != null) email else \"email@notfound.edu\"\n}\ndef fetchStudentEmail(studentUsername: String): String =\n  if (studentUsername == \"hayley123\") \"hayley@school.com\" else null\nval email = getStudentEmail(\"sarah88\")"}
{"id":"a6c6daa2-fe50-4d0f-9dd4-87e2b9873b3b","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Session(id: Int, tutor: String, student: String)\ndef findSessionByStudent(student: String): Option[Session] =\n  Option(legacySessionLookup(student))\n\ndef legacySessionLookup(student: String): Session =\n  if student == \"alex.duke\" then Session(42, \"nina.chen\", \"alex.duke\") else null\nfindSessionByStudent(\"alex.duke\") match\n  case Some(session) => session.tutor\n  case None => \"Session not found\""}
{"id":"0aa4afb8-7325-4ea7-9fa9-b54795c02256","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class Lesson(val topic: String, val material: String)\ndef createLessonIfMaterialAvailable(topic: String, material: String): Lesson = {\n  if (material == null) null else new Lesson(topic, material)\n}\nval lessonOption = createLessonIfMaterialAvailable(\"Physics\", null)"}
{"id":"cd0ca2cb-2585-408f-8895-a7a2b401dd1f","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def findTutorRating(tutorId: Int): Option[Double] =\n  val rating = javaTutorServiceGetRating(tutorId)\n  Option(rating)\ndef javaTutorServiceGetRating(tutorId: Int): java.lang.Double =\n  if tutorId == 55 then 4.9 else null\nval avgRating = findTutorRating(55).getOrElse(0.0)"}
{"id":"2df927ec-4456-49cd-bc96-339f7279f0e7","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getCourseMaterials(courseName: String): Array[String] = {\n  val materials = legacyMaterialsService(courseName)\n  if (materials != null) materials else Array()\n}\ndef legacyMaterialsService(courseName: String): Array[String] =\n  if (courseName == \"Algebra\") Array(\"Slides\", \"Quiz\") else null\nval materials = getCourseMaterials(\"History\")"}
{"id":"61eca121-fbee-4dc0-bc86-adec417c2bf9","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Assignment(student: String, score: Int)\ndef findHighestScore(assignments: List[Assignment]): Option[Int] =\n  assignments.map(_.score).sorted.lastOption\ndef studentAssignments = List(Assignment(\"lucy.thomas\", 92))\nval bestScore = findHighestScore(studentAssignments)"}
{"id":"3df20b05-b912-4fdb-b132-701d404b49d6","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def updateLastLoginTimestamp(userId: Int): Boolean = {\n  val user = databaseUserFetch(userId)\n  if (user != null) {\n    user.lastLogin = System.currentTimeMillis()\n    true\n  } else {\n    false\n  }\n}\nclass UserAccount(var lastLogin: Long)\ndef databaseUserFetch(userId: Int): UserAccount =\n  if (userId == 17) new UserAccount(0) else null\nupdateLastLoginTimestamp(99)"}
{"id":"b82e7e78-5286-43d0-aea3-7c7cc16320b2","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def safeStudentPhoneNumber(rawNumber: String): Option[String] =\n  Option(validatePhone(rawNumber)).filter(_.length == 10)\ndef validatePhone(rawNumber: String): String =\n  if rawNumber.forall(_.isDigit) then rawNumber else null\nval studentContact = safeStudentPhoneNumber(\"1234567890\").getOrElse(\"Invalid\")"}
{"id":"0398a896-7c9f-4408-be81-31580e83ae62","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getActiveSessionId(studentId: Int): Int = {\n  val sessionId = legacyActiveSessionIdFetch(studentId)\n  if (sessionId != null) sessionId else -1\n}\ndef legacyActiveSessionIdFetch(studentId: Int): Integer =\n  if (studentId == 76) 5512 else null\nval active = getActiveSessionId(21)"}
{"id":"ef0d1f1d-b0e7-4003-81e6-4b3064293930","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def sessionFee(sessionId: Int): Option[Double] =\n  Option(legacyFeeFinder(sessionId))\ndef legacyFeeFinder(sessionId: Int): java.lang.Double =\n  if sessionId == 88 then 35.00 else null\nval feeResult = sessionFee(88).fold(\"Not found\")(_.toString)"}
{"id":"a9eebb40-dee3-4cdd-bb19-d46682d84b58","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"class TutorProfile(var bio: String)\ndef clearTutorBio(profile: TutorProfile): Unit = {\n  if (profile != null) profile.bio = \"\"\n}\nval maybeProfile = null\nclearTutorBio(maybeProfile)"}
{"id":"e96efed6-cff4-408b-830e-517db39337e3","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def fetchStudentByEmail(email: String): Option[String] =\n  Option(legacyStudentEmailLookup(email)).map(_.toUpperCase)\ndef legacyStudentEmailLookup(email: String): String =\n  if email == \"jon@school.org\" then \"Jonathan\" else null\nfetchStudentByEmail(\"jon@school.org\")"}
{"id":"1d4198ac-f3ea-4300-9f11-5787b332ccfe","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getLessonMaterialUrl(materialName: String): String = {\n  val url = legacyMaterialUrlProvider(materialName)\n  if (url == null) \"No URL\" else url\n}\ndef legacyMaterialUrlProvider(materialName: String): String =\n  if (materialName == \"IntroVideo\") \"http://video.site/intro\" else null\nval videoUrl = getLessonMaterialUrl(\"Worksheet1\")"}
{"id":"84d11ac1-205f-4a7d-81eb-83269a645606","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"case class Classroom(id: String)\ndef findClassroomById(id: String): Option[Classroom] =\n  Option(legacyFindClassroom(id))\n\ndef legacyFindClassroom(id: String): Classroom =\n  if id == \"A101\" then Classroom(\"A101\") else null\nval classroomOpt = findClassroomById(\"B202\")"}
{"id":"3350eedf-f750-4e16-8262-5f851d8f6a5c","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def setSessionFeedback(sessionId: Int, feedback: String): Boolean = {\n  val session = fetchSession(sessionId)\n  if (session == null) false\n  else {\n    session.feedback = feedback\n    true\n  }\n}\nclass TutoringSession { var feedback: String = \"\" }\ndef fetchSession(sessionId: Int): TutoringSession =\n  if (sessionId == 900) new TutoringSession else null\nsetSessionFeedback(901, \"Great!\")"}
{"id":"b0bfdc11-46db-4b32-8a66-291e2b3a7416","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def retrieveTutorLanguage(tutorId: Int): Option[String] =\n  Option(javaFindTutorLanguage(tutorId))\ndef javaFindTutorLanguage(tutorId: Int): String =\n  if tutorId == 33 then \"French\" else null\nval language = retrieveTutorLanguage(33).getOrElse(\"English\")"}
{"id":"be6fc1e0-567a-45c5-a3d2-627fab566378","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getStudentParentContact(studentId: Int): String = {\n  val contact = legacyParentContact(studentId)\n  if (contact != null && contact.length > 0) contact else \"Unknown Parent\"\n}\ndef legacyParentContact(studentId: Int): String =\n  if (studentId == 212) \"parent123@domain.com\" else null\nval parent = getStudentParentContact(111)"}
{"id":"a59218e9-d8bf-46e6-b64c-27acc546cd4e","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":true,"code":"def safeLessonNote(note: String): Option[String] =\n  Option(note).filter(_.nonEmpty)\nval noteContent = safeLessonNote(null).getOrElse(\"No Note Provided\")"}
{"id":"7f0fc53c-67d4-4d18-813a-34a7ef7a97ce","timestamp":1746097951236,"category":"null_checks","topicUsed":"Online tutoring platform","isIdiomatic":false,"code":"def getTutorSpecialties(tutorUsername: String): Array[String] = {\n  val specialties = legacySpecialtiesFetch(tutorUsername)\n  if (specialties == null) Array() else specialties\n}\ndef legacySpecialtiesFetch(tutorUsername: String): Array[String] =\n  if (tutorUsername == \"rebecca.dawson\") Array(\"Math\", \"Physics\") else null\nval list = getTutorSpecialties(\"unknown.tutor\")"}
{"id":"6a855b22-f3d9-40e3-939e-70edf4f6fba0","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Listing(id: Int, address: String, price: Int)\ndef findListingById(listings: List[Listing], searchId: Int): Option[Listing] =\n  listings.find(_.id == searchId)"}
{"id":"478a64f6-bccb-4a4a-a4f0-9bb34c50035f","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"class Agent(val name: String, val phoneNumber: String)\ndef getAgentPhoneNumber(agent: Agent): String =\n  if (agent != null) agent.phoneNumber else \"No phone available\""}
{"id":"1bad79f3-05fd-44d3-b8d4-abff709192bf","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def getCityFromLocation(location: String | Null): Option[String] =\n  Option(location).map(_.split(\",\").headOption).flatten"}
{"id":"9645efa5-4b44-418e-a471-911c62198ce8","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"object ListingSearchUtil:\n  def firstAvailableListing(listings: List[Listing]): Option[Listing] =\n    listings.headOption"}
{"id":"c016d33e-4894-43fb-9f7e-15ae65ffbbd5","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def fetchListingByMLS(mls: String): Listing =\n  if (mls != null && mls.nonEmpty) new Listing(42, \"8 Main Street, Springfield\", 450000) else null"}
{"id":"f47a3d54-f4bd-4b5c-a048-5d4e6803d91f","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def wrapNullableContact(contact: String | Null): Option[String] =\n  Option(contact)"}
{"id":"63994c73-1087-459b-82e6-49a2cf3b0e95","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getAgentEmail(agent: Agent): String =\n  if (agent == null) null else agent.name + \"@realtypro.com\""}
{"id":"1ee73bb6-495a-45fd-87d6-40a38c0bad37","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"case class PropertyFeatures(garden: Boolean, garage: Boolean)\ndef featuresDescription(features: PropertyFeatures | Null): String =\n  if (features != null)\n    s\"Garden: ${features.garden}, Garage: ${features.garage}\"\n  else\n    \"No features data\""}
{"id":"1038f362-cc0f-4446-a247-6eb0eccd8319","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def safeAddressToUpper(address: String | Null): Option[String] =\n  Option(address).map(_.toUpperCase)"}
{"id":"9645a0d9-ec44-4163-9dd9-3fbb7411cbde","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def findLuxuryListingOpt(listings: List[Listing]): Option[Listing] =\n  listings.find(_.price > 1000000)"}
{"id":"48169330-6c07-40a2-b7b1-a819d168b5f0","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getListingTitle(title: String): String =\n  if (title == null) \"Unknown title\" else title"}
{"id":"6d2d4e13-4260-45a3-8554-596682c75033","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def bedroomsAsOption(bedrooms: Integer | Null): Option[Int] =\n  Option(bedrooms).map(_.intValue)\n\ndef meetsBedroomRequirement(bedroomsOpt: Option[Int]): Boolean =\n  bedroomsOpt.exists(_ >= 3)"}
{"id":"2d76dfd0-437d-4e0b-8d9f-ef4793163c51","timestamp":1746097976485,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def listingMLSNumber(listing: Listing | Null): String =\n  if (listing != null) listing.id.toString else \"No MLS number\""}
{"id":"ee3709a3-8ddd-4f22-b7b1-0465762357de","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def getZipCodeId(zipCode: String | Null): Option[Int] =\n  Option(zipCode).flatMap(z => scala.util.Try(z.toInt).toOption)"}
{"id":"61be9498-d28e-4d53-afd6-1b72adb6721d","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def showAgentIfPresent(agent: Agent | Null): String =\n  if (agent != null) s\"Agent: ${agent.name}\" else \"No agent found\""}
{"id":"775be92a-50ca-4b73-89cc-e1cc40a7c37b","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def selectListingWithPhoto(photoUrl: String | Null, fallback: String): String =\n  Option(photoUrl).getOrElse(fallback)"}
{"id":"3f780861-9d3b-4653-befa-ab1371eb39ed","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def propertyDescription(desc: String): String =\n  if (desc != null) desc else \"Description not available\""}
{"id":"5e40c233-f1d6-4447-866e-49769fc0b1bd","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class Neighborhood(name: String, rating: Int)\ndef getTopNeighborhoodName(n: Option[Neighborhood]): String =\n  n.map(_.name).getOrElse(\"No neighborhood info\")"}
{"id":"e5629028-4eba-4809-9627-60522a1a1ef4","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def findListingByAgent(agentName: String | Null, listings: java.util.List[Listing]): Listing =\n  if (agentName == null) return null\n  val it = listings.iterator()\n  while (it.hasNext) {\n    val l = it.next()\n    if (l.address.contains(agentName)) return l\n  }\n  null"}
{"id":"99349b36-6473-4cd5-830a-382e05333958","timestamp":1746097976486,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def filterListingsWithPool(hasPool: java.lang.Boolean | Null, listings: List[Listing]): List[Listing] =\n  Option(hasPool).filter(_ == true).map(_ => listings.filter(_.address.contains(\"Pool\"))).getOrElse(Nil)"}
{"id":"8cbb07a5-e77c-4700-a235-5ea15fbe4726","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"case class PropertyListing(id: String, price: Double, address: String, bedrooms: Int)\ndef findListingById(id: String, listings: List[PropertyListing]): Option[PropertyListing] =\n  listings.find(_.id == id)"}
{"id":"8738e7b2-a36f-4710-b2f2-54f0afbc60d5","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getPrimaryPhoto(listing: PropertyListing): String = \n  if (listing == null) null\n  else listing.address + \"/photo.jpg\""}
{"id":"a3c8e835-3b45-44cf-945b-78fe6dbfe769","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def extractNeighborhood(listing: PropertyListing | Null): Option[String] =\n  Option(listing).map(_.address.split(\",\").tail.headOption.getOrElse(\"\").trim).filter(_.nonEmpty)"}
{"id":"19a5d300-3576-4bf2-a2a0-81ad0feb679c","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"class JavaStyleAgentFinder {\n  def findAgentName(agentId: String): String = null // Simulates Java API\n}\ndef agentContactOption(finder: JavaStyleAgentFinder, id: String): Option[String] =\n  Option(finder.findAgentName(id))"}
{"id":"01658bbb-4f64-4ca6-9401-6de87bb9f681","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def countAvailableUnits(units: java.util.List[Integer]): Option[Int] =\n  Option(units).map(_.size)\n"}
{"id":"c1cd85b0-d3a4-4ad4-ae18-93287e0f655f","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def isPetFriendly(listing: PropertyListing): Boolean =\n  if (listing == null) false\n  else listing.bedrooms >= 2"}
{"id":"cd07453e-a249-4cc8-af18-48d6c497084d","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getListingDescription(listing: PropertyListing): String =\n  if (listing == null) \"Listing not available\" else s\"${listing.address}, ${listing.price}\""}
{"id":"628e0141-e8d9-4fb8-8b5e-ed7555121ca3","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def findFirstExpensiveListing(list: List[PropertyListing]): Option[PropertyListing] =\n  list.find(_.price > 1000000).map(listing => listing)\n"}
{"id":"cab822cb-fa02-439a-8971-db409b168749","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"class ExternalDatabase {\n  def lookupListingByMLS(mls: String): PropertyListing = null\n}\ndef safeListingFetch(db: ExternalDatabase, mls: String): Option[PropertyListing] =\n  Option(db.lookupListingByMLS(mls))"}
{"id":"4c2bcfce-ba1c-4111-a1c6-75f80d3047d2","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def displayPrice(listing: PropertyListing): String =\n  Option(listing).map(_.price.toString).getOrElse(\"No Price Available\")"}
{"id":"41925398-6c27-40ed-b089-f0e6034a642c","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def updateOwnerName(listing: PropertyListing, owner: String): PropertyListing =\n  if (listing != null) listing.copy(address = owner + \" \" + listing.address)\n  else null"}
{"id":"8fd9616d-aec1-4589-8b08-da21db231524","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getParkingInfo(listing: PropertyListing): String =\n  if (listing == null) \"Unknown\" else \"Garage Included\""}
{"id":"f02f41f5-364a-4402-8848-376d16961882","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def withGarage(listing: PropertyListing | Null): Option[PropertyListing] =\n  Option(listing).filter(_.address.toLowerCase.contains(\"garage\"))"}
{"id":"358ca503-19aa-4aec-b8ea-35618e5fa057","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def filterListingsWithMinimumBedrooms(listings: List[PropertyListing], min: Int): List[PropertyListing] =\n  listings.filter(_.bedrooms >= min)"}
{"id":"830f64b2-8045-4ade-9bbb-d9ff0f0d6015","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getAgentPhoneNumber(agent: AnyRef): String =\n  if (agent != null) agent.toString + \"-555-1234\" else null"}
{"id":"0f538890-d2c1-4eef-9907-ec6b187b815f","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def getOpenHouseDate(listing: PropertyListing | Null): Option[String] =\n  Option(listing).flatMap(l => Some(l.address.split(\" \").headOption.getOrElse(\"No Date\")))"}
{"id":"78474729-54f7-4efa-bad6-980697237f80","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def findNullSafeAddress(listing: PropertyListing): String =\n  if (listing == null) null else listing.address"}
{"id":"c30d3355-d9d2-4cc7-9a0e-6f9a6ebc1416","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def getSquareFootage(listing: AnyRef): Int =\n  if (listing != null) 1000 else 0"}
{"id":"69ab1a25-544e-469e-a4e4-da504f32be89","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":true,"code":"def propertyTypeFromJava(javaObj: AnyRef): Option[String] =\n  Option(javaObj).map(_.toString).filter(_.nonEmpty)"}
{"id":"7649b30e-ace9-4206-93f5-42bbc09d7eb7","timestamp":1746097991948,"category":"null_checks","topicUsed":"Real-estate listing search","isIdiomatic":false,"code":"def nullIfNoMatchingListing(listings: List[PropertyListing], price: Double): PropertyListing =\n  val found = listings.filter(l => l.price == price)\n  if (found.isEmpty) null else found.head"}
{"id":"0c8379c1-0c71-4dd9-b25c-b8d795a2b939","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"object WalletNullCheck {\n  def getBalance(walletId: String): Double = {\n    val wallet = findWalletById(walletId)\n    if (wallet != null) wallet.balance else 0.0\n  }\n  def findWalletById(walletId: String): CryptoWallet = {\n    if (walletId == \"BTC123\") CryptoWallet(\"BTC123\", 1.6)\n    else null\n  }\n}\ncase class CryptoWallet(id: String, balance: Double)\n"}
{"id":"caee1401-feb9-4b23-8d02-752664117b2e","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"object TransactionStatusFetcher {\n  def getTransactionStatus(txHash: String): String = {\n    val status = fetchStatusFromNode(txHash)\n    if (status != null) status\n    else \"UNKNOWN\"\n  }\n  def fetchStatusFromNode(hash: String): String = null\n}\n"}
{"id":"8751403a-de29-4825-af55-2b8690a6da03","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletOwnerChecker(val owner: String) {\n  def isOwner(entered: String): Boolean = {\n    if (owner != null) owner.equals(entered)\n    else false\n  }\n}\n"}
{"id":"1647f340-c5a9-4c0f-9874-ccb952450529","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"object HardwareWalletConnector {\n  def connect(deviceName: String): HardwareWallet = {\n    val device = findDevice(deviceName)\n    if (device != null) device connect()\n    else null\n  }\n  def findDevice(name: String): HardwareDevice = null\n}\ntrait HardwareDevice {\n  def connect(): HardwareWallet\n}\nclass HardwareWallet\n"}
{"id":"0b7b99ae-0b72-48c5-8b44-b67205282f08","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletPinValidator {\n  def validatePin(pin: String): Boolean = {\n    if (pin != null && pin.length == 6) true\n    else false\n  }\n}\n"}
{"id":"1cae2eec-828a-4f81-b89e-eb3348da720d","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"object AccountRecovery {\n  def recoverSeed(phrase: String): String = {\n    if (phrase != null && phrase.split(\" \").length == 12)\n      phrase\n    else\n      null\n  }\n}\n"}
{"id":"736ee8d3-d5eb-4a2e-8dfe-6907099615b0","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class LegacyExternalService {\n  def fetchBackup(walletId: String): String = null\n}\nobject BackupRestorer {\n  def restore(walletId: String, service: LegacyExternalService): String = {\n    val backup = service.fetchBackup(walletId)\n    if (backup != null) s\"Backup restored: $backup\" else \"No backup found\"\n  }\n}\n"}
{"id":"97a6291c-bf54-4b88-be13-78ddc311c780","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class WalletAliasSetter {\n  def setAlias(wallet: Wallet, alias: String): Boolean = {\n    if (wallet != null && alias != null) {\n      wallet.alias = alias\n      true\n    } else {\n      false\n    }\n  }\n}\nclass Wallet(var alias: String)\n"}
{"id":"ecf318ec-facd-4648-acb4-28e9b69350ec","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"object SignatureVerifier {\n  def checkSignature(signature: String): Boolean = {\n    if (signature != null && signature.nonEmpty)\n      signature.startsWith(\"SIG_\")\n    else\n      false\n  }\n}\n"}
{"id":"ef2de8f9-bf9e-42aa-96bd-69390a2bfc6b","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class FiatConversion {\n  def convertToFiat(wallet: CryptoWallet, rate: Double): Double = {\n    if (wallet != null) wallet.balance * rate else 0.0\n  }\n}\ncase class CryptoWallet(balance: Double)\n"}
{"id":"bf0ae7bd-f116-4af2-8b2a-3b29dc08795b","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class UserWallet(address: String, balance: Double)\nobject WalletBalanceOption {\n  def getBalanceOpt(wallet: Option[UserWallet]): Double =\n    wallet.map(_.balance).getOrElse(0.0)\n}\n"}
{"id":"6bc5770b-8a58-4a18-a8cc-ec918fb983a8","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object OptionAddressValidator {\n  def validateAddress(address: Option[String]): Boolean =\n    address.exists(_.length == 42)\n}\n"}
{"id":"e9523a28-71fe-43e7-87fd-9831c7dd38a9","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class Transaction(id: String, amount: Double)\nobject SafeTransactionLookup {\n  def findTransaction(id: String, txs: List[Transaction]): Option[Transaction] =\n    txs.find(_.id == id)\n}\n"}
{"id":"f1e75eb5-8c24-4d25-97bf-640454904d80","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class Mnemonic(words: List[String])\nobject MnemonicChecker {\n  def isValidMnemonic(m: Option[Mnemonic]): Boolean =\n    m.exists(_.words.size == 12)\n}\n"}
{"id":"719d3cdc-6025-406b-b7b0-2a3fc7f09ee1","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object WalletBackupRestorer {\n  def restoreBackup(backup: String | Null): Option[String] =\n    Option(backup).filter(_.nonEmpty)\n}\n"}
{"id":"bda27daf-5d1f-4bd3-80b4-d3be4f4c87f2","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object OptionWalletDemo {\n  case class Wallet(id: String, balance: Double)\n  def getWalletSafe(walletId: String): Option[Wallet] = {\n    if (walletId == \"ETH456\") Some(Wallet(\"ETH456\", 10.5))\n    else None\n  }\n}\n"}
{"id":"dd13bdaa-9738-4573-9da2-fc4994a4185b","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object HardwareWalletOptionConnector {\n  case class HardwareWallet(serial: String)\n  def tryConnect(device: String | Null): Option[HardwareWallet] =\n    Option(device).map(HardwareWallet(_))\n}\n"}
{"id":"6145a7fc-ee5d-4449-9e81-1be46c85e22d","timestamp":1746098007615,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object AddressNormalizer {\n  def normalizeAddress(address: Option[String]): String =\n    address.map(_.toLowerCase).getOrElse(\"unknown\")\n}\n"}
{"id":"8f5a460e-ca41-464b-990c-29941b5dfa12","timestamp":1746098007616,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletPrivateKey(key: String)\nobject SafePrivateKeyExtractor {\n  def extractPrivateKey(raw: String | Null): Option[WalletPrivateKey] =\n    Option(raw).filter(_.startsWith(\"0x\")).map(WalletPrivateKey(_))\n}\n"}
{"id":"0e906ce6-e5c6-45e5-b9ee-8363ec7327e6","timestamp":1746098007616,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"object WalletOptionChaining {\n  case class Wallet(address: String, balance: Double)\n  def getWalletBalance(address: Option[String]): Double =\n    address.flatMap(a => Option.when(a.startsWith(\"0x\"))(Wallet(a, 2.0))).map(_.balance).getOrElse(0.0)\n}\n"}
{"id":"a23c701d-0a8b-469e-8a92-b2c0a54538f0","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletDetails(address: String, balance: BigDecimal)\ndef findWalletByAddress(address: String): Option[WalletDetails] =\n  val dbResult: WalletDetails = null\n  Option(dbResult)"}
{"id":"7748a434-f64b-46c0-91ca-7d2f5582ebdd","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def fetchTransactionHash(transactionId: String): String =\n  null"}
{"id":"e9be266d-9a77-48b5-b719-11f058270e83","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class WalletSeed(mnemonic: String)\ndef getWalletSeed(source: String): Option[WalletSeed] =\n  val result: WalletSeed = legacyGetSeedFromSource(source)\n  Option(result)\ndef legacyGetSeedFromSource(src: String): WalletSeed =\n  null"}
{"id":"5f30912a-5b49-44de-a407-7302e270d4de","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def getWalletLabel(walletId: String): String =\n  if (walletId eq null) null else \"Main Wallet\""}
{"id":"5061a8a4-417e-4ebb-82cf-d6a0f4e74a80","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def saveWalletToDatabase(walletRef: String): Option[String] =\n  Option(possibleNullWalletSave(walletRef))\ndef possibleNullWalletSave(ref: String): String =\n  null"}
{"id":"6acf7755-de9c-4c8a-8a05-72ee5aa6e457","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def getWalletPublicKey(walletId: String): String =\n  var pubKey: String = null\n  if (walletId.length == 0) pubKey = null else pubKey = \"pubKeyValue\"\n  pubKey"}
{"id":"8a0ed9af-76d2-4d21-bc15-ffb71b13ed6b","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def walletDescription(walletObj: AnyRef): Option[String] =\n  Option(walletObj).map(_.toString)"}
{"id":"4e853704-bb94-4e93-97d2-9607a0d10e1c","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def validatePrivateKey(privateKey: String): Boolean =\n  if (privateKey == null) false\n  else privateKey.length == 64"}
{"id":"7b31ba9d-f5e7-4fd3-b969-670ae15b4855","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"case class Wallet(address: String, balance: BigDecimal)\ndef findWallet(addr: String): Option[Wallet] =\n  val possibleWallet: Wallet = if addr == \"\" then null else Wallet(addr, 0.5)\n  Option(possibleWallet)"}
{"id":"f4a83d7e-da1c-4383-a8d9-cca66e55a4dc","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def getWalletPassphrase(userId: String): String =\n  val passphrase = javaStylePassphraseLookup(userId)\n  if (passphrase != null) passphrase else null\ndef javaStylePassphraseLookup(id: String): String =\n  null"}
{"id":"02789ce6-cbdc-40c6-988d-966e9308f40f","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def wrapNullTransactionSignature(signature: String): Option[String] =\n  Option(signature)"}
{"id":"56fc2de2-d3eb-4cc5-9508-2faaf195d7bf","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def checkWalletImportResult(result: String): Boolean =\n  if (result != null && result == \"SUCCESS\") true else false"}
{"id":"44864b3c-5ba2-4f74-bfad-3ccece623219","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"val importedPrivateKey: Option[String] = Option(javaKeyProvider())\ndef javaKeyProvider(): String =\n  null"}
{"id":"a5d9ef10-498a-4801-9081-2865fc62d75e","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def recoverWalletFile(fileRef: String): String =\n  val recovered = simulatedWalletFileRecovery(fileRef)\n  if (recovered == null) null else recovered\ndef simulatedWalletFileRecovery(ref: String): String =\n  null"}
{"id":"d5ec3d8d-ee40-4b9b-8b8c-f785e510cf76","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def transactionFeeEstimate(possibleFee: java.lang.Long): Option[Long] =\n  Option(possibleFee).map(_.longValue)"}
{"id":"10f84fcd-bb46-4592-9dd9-aaf423abfa2d","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def checkIfAddressValid(possibleAddress: String): Boolean =\n  if (possibleAddress != null) possibleAddress.startsWith(\"1\") else false"}
{"id":"75525f9a-6657-4253-9c2f-fcfc272cd7b4","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def parseWalletJson(json: String): Option[Map[String, String]] =\n  if (json == null || json.isEmpty) None else Some(Map(\"address\" -> \"1a2b3c\"))"}
{"id":"d05da772-bbcd-4d54-a63e-fcc7500fa6db","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"class TransactionSigner {\n  def signTransaction(raw: String): String =\n    if (raw == null) null else raw.reverse\n}"}
{"id":"eae11dce-859a-4fa9-9a71-50b681644151","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":true,"code":"def getActiveWallet(wallets: List[String]): Option[String] =\n  wallets.find(_.nonEmpty)"}
{"id":"f1648efc-76b6-4e9d-9fa4-e266f0b46a0d","timestamp":1746098022354,"category":"null_checks","topicUsed":"Cryptocurrency wallet management","isIdiomatic":false,"code":"def walletBackupCode(maybeCode: String): String =\n  if (maybeCode == null) null else maybeCode.take(8)"}
{"id":"a4a37111-4bd6-42f6-8ea8-1bdc75af12b8","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class ProductStock(productId: String, quantity: Int)\ndef findStockLevel(productId: String, inventory: Map[String, ProductStock]): Option[Int] =\n  inventory.get(productId).map(_.quantity)"}
{"id":"c7af05d2-a981-4685-9f34-a9026f0cab37","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def getWarehouseLocation(zone: String | Null): Option[String] =\n  Option(zone).filter(_.nonEmpty)"}
{"id":"c7580bbc-5b27-4f5b-8cbc-10a3a16b78bc","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def findItemOrNull(itemCode: String, items: Map[String, String]): String =\n  val name = items.get(itemCode).orNull\n  name"}
{"id":"2d92956a-13a5-4cf9-b08f-205c86657c56","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class BinReference(val binId: String)\ndef getBinReference(binId: String): BinReference =\n  if (binId == null) null else new BinReference(binId)"}
{"id":"76349a45-42bf-46a7-a6ef-5c7ad85de444","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def supplierContactOrNone(supplierContact: String | Null): Option[String] =\n  Option(supplierContact)"}
{"id":"4d7a24f0-8524-42a5-8314-7d619d85d26c","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def fromLegacySystem(productCode: String): String =\n  if (productCode == \"\") null else productCode"}
{"id":"96c8adae-3f1a-4294-8146-ffd1ae0668d6","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def updateInventoryCount(productId: String, count: java.lang.Integer): Option[Int] =\n  Option(count).map(_.intValue)"}
{"id":"190f4839-55cd-4adb-9f7a-b804cfed16fe","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"object WarehouseChecker:\n  def itemExists(inventory: Map[String, Int], itemId: String): Option[Boolean] =\n    inventory.get(itemId).map(_ > 0)"}
{"id":"d098c1cc-d350-43e1-a240-0c3ef3363fc6","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getRestockDateOrNull(itemId: String, restockMap: Map[String, String]): String =\n  val result = restockMap.get(itemId)\n  if (result.isDefined) result.get else null"}
{"id":"2742450f-bd40-4757-983a-6651e487a68a","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def calculateReorderLevel(stock: java.lang.Integer): Int =\n  if (stock == null) 10 else stock"}
{"id":"d908018f-700e-4be9-a43e-fc589c7ba16d","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def shelfLabelOrNull(bin: AnyRef): String =\n  if (bin != null) bin.toString else null"}
{"id":"7f507d73-5c82-4295-b001-a5d2f31c63f6","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def wrapNullableLocation(location: String | Null): Option[String] =\n  Option(location)"}
{"id":"28167430-fd60-479e-b574-3e7e2bfb536d","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def getProductDescription(productId: String, descriptions: Map[String, String]): Option[String] =\n  descriptions.get(productId).filter(_.nonEmpty)"}
{"id":"bdc85df0-c131-4ec7-b56f-84c71b6fdcd3","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getNullIfNotFound(productSku: String, lookup: Map[String, String]): String =\n  val item = lookup.get(productSku)\n  if (item.isDefined) item.get else null"}
{"id":"95ea6ca2-67b0-4260-9600-15768f9b9182","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def findExpiredBatch(batches: List[(String, java.util.Date)]): Option[String] =\n  batches.find((_, date) => Option(date).exists(_.before(new java.util.Date))).map(_._1)"}
{"id":"5f6b8877-98f8-4c51-bc42-4e8f3ebd169a","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def supplierNameIfPresent(supplier: String | Null): String =\n  if (supplier != null) supplier else \"Unknown\""}
{"id":"77f03beb-e25d-4179-9862-bef8e6a031f5","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def findWarehouseManager(contactInfo: Map[String, String], location: String): Option[String] =\n  contactInfo.get(location)"}
{"id":"89aa7366-a443-490a-8035-8d6352637bcd","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getItemWeightOrNull(item: { def getWeight(): java.lang.Double } | Null): java.lang.Double =\n  if (item != null) item.getWeight() else null"}
{"id":"95bb035b-172e-4682-82c0-9bd723a9e460","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def boxBarcodeOption(barcode: String | Null): Option[String] =\n  Option(barcode).filter(_.matches(\"\\d{12}\"))"}
{"id":"5d550db5-1105-441b-b018-5a89a3a62a5e","timestamp":1746098032364,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def printInventoryStatus(record: { def getStatus(): String } | Null): Unit =\n  val status = if (record != null) record.getStatus() else \"Unavailable\"\n  println(status)"}
{"id":"3c9c7e23-795b-4a0e-afcb-0d35fcdec9f2","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Product(sku: String, description: String)\ndef findProductBySku(sku: String): Option[Product] = {\n  warehouseProducts.find(_.sku == sku)\n}\nval warehouseProducts = List(\n  Product(\"A100\", \"Steel Bolts\"),\n  Product(\"B200\", \"Wooden Pallets\")\n)\nval found = findProductBySku(\"A100\").map(_.description).getOrElse(\"Product Not Found\")"}
{"id":"166f62f5-fe50-41d5-b41d-c87187d8b8e3","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getInventoryLevel(locationId: Int): java.lang.Integer = {\n  if (locationId == 10) 150\n  else null\n}\nval stock = getInventoryLevel(99)\nif (stock == null) println(\"No inventory data found.\")\nelse println(s\"Stock at location: $stock\")"}
{"id":"80644bc0-6b35-42a1-b368-f9be15ba5d12","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def safeSupplierName(rawName: String): Option[String] = Option(rawName)\nval supplierName: String = null\nval nameForReport = safeSupplierName(supplierName).getOrElse(\"Unknown Supplier\")"}
{"id":"c964be86-8e22-43d7-8b88-8bffc588f71c","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class InventoryItem(val sku: String, var currentCount: Int)\ndef updateItemCount(item: InventoryItem, count: Int): InventoryItem = {\n  if (item != null) {\n    item.currentCount = count\n    item\n  } else {\n    null\n  }\n}\nval nullItem: InventoryItem = null\nupdateItemCount(nullItem, 50)"}
{"id":"471f6b7b-6a26-4bc0-8e9a-80cc872d6f3b","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def locateBin(binCode: String): Option[String] = \n  Option(possiblyJavaBinLocator(binCode))\ndef possiblyJavaBinLocator(code: String): String = if (code == \"A-12\") \"Aisle A, Bin 12\" else null\nval binLocation = locateBin(\"A-12\").getOrElse(\"Location not found\")"}
{"id":"804b12be-a2dc-49b1-813d-b8625e7a2837","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getCategoryDescription(sku: String): String = {\n  if (sku == \"B200\") \"Bulk Goods\"\n  else null\n}\nval desc = getCategoryDescription(\"X900\")\nif (desc != null) println(desc) else println(\"No description available.\")"}
{"id":"92e291de-4113-4bce-8358-64c81c1dc821","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class StockEntry(itemSku: String, count: Int)\nval entries: List[StockEntry] = List(StockEntry(\"A100\", 55))\ndef findStockEntry(sku: String): Option[StockEntry] = entries.find(_.itemSku == sku)\nval maybeEntry = findStockEntry(\"A100\").map(_.count).getOrElse(0)"}
{"id":"4248f847-0411-47cf-845b-67e9e6b12e60","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class RestockRequest(val id: Int, val note: String)\ndef getRestockNote(request: RestockRequest): String = {\n  if (request != null) request.note else \"No note\"\n}\ngetRestockNote(null)"}
{"id":"683432d9-2ebc-49ec-a1f4-29e4c5246dbc","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Location(id: String, section: String)\ndef findLocation(section: String): Option[Location] = \n  warehouseLocations.find(_.section == section)\nval warehouseLocations = List(Location(\"L1\", \"East\"))\nval locationInfo = findLocation(\"East\").map(_.id).getOrElse(\"Unassigned\")"}
{"id":"b7575220-201d-474b-821a-6f56d8cf8974","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def javaSupplierContact(sku: String): String = if (sku == \"B200\") \"555-1234\" else null\nval contact = javaSupplierContact(\"A100\")\nif (contact != null) println(contact) else println(\"No contact available\")"}
{"id":"544118de-52a1-4115-b9ca-ab3293d77dd2","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def retrieveLastStockCheck(sku: String): Option[String] = Option(getStockCheckFromLegacy(sku))\ndef getStockCheckFromLegacy(sku: String): String = if (sku == \"A100\") \"2024-04-22\" else null\nval lastCheck = retrieveLastStockCheck(\"A100\").getOrElse(\"No data\")"}
{"id":"725ce6c4-c1cf-4a41-9ec6-f778a31ef9d8","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getShelfLabel(shelfId: Int): String = {\n  if (shelfId == 2) \"Steel Tools\"\n  else null\n}\nval result = getShelfLabel(7)\nif (result == null) println(\"No label\") else println(result)"}
{"id":"dc0aa4dd-cc8c-401c-aced-a02def3e9674","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class InventoryUpdate(sku: String, delta: Int)\nval updates = List(InventoryUpdate(\"B200\", 10))\ndef safeUpdate(sku: String): Option[Int] = updates.find(_.sku == sku).map(_.delta)\nval delta = safeUpdate(\"B200\").fold(0)(_ + 100)"}
{"id":"088fe9ab-c48f-4a64-8115-124c90062d39","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def findEmployeeBadge(employeeId: Int): String = {\n  if (employeeId == 2345) \"STAFF-002\"\n  else null\n}\nval badge = findEmployeeBadge(2121)\nif (badge != null) println(badge) else println(\"No badge found\")"}
{"id":"22982f62-0111-4e51-85b6-6b6cc5c88118","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"case class Supplier(name: String, rating: Int)\nval suppliers = List(Supplier(\"WidgetCo\", 5))\ndef goodSupplierOption: Option[Supplier] = suppliers.find(_.rating >= 5)\ngoodSupplierOption.filter(_.name.startsWith(\"W\"))"}
{"id":"09be59a8-e325-464e-9cac-7b3e7ea4ff1c","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getPickTicket(ref: String): String = {\n  if (ref == \"PT-009\") \"Ready for pickup\"\n  else null\n}\nval ticket = getPickTicket(\"PT-000\")\nif (ticket == null) println(\"No ticket info\") else println(ticket)"}
{"id":"e969c815-ed7a-4ff0-8dd4-99690ae3d19e","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def safeGetBatch(batchId: String): Option[String] = Option(batchId)\nsafeGetBatch(null).getOrElse(\"No batch found\")"}
{"id":"5a563740-b685-45ea-bd23-133b0ee816d7","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"class DamagedGoods(val id: Int, val report: String)\ndef getReport(goods: DamagedGoods): String = {\n  if (goods != null) goods.report else \"None reported\"\n}\ngetReport(null)"}
{"id":"9eb9815d-9065-4812-8e73-2c22559d2e5d","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":true,"code":"def checkRestockNeeded(stockLevel: Int): Option[String] =\n  Option.when(stockLevel < 10)(\"Restock Needed\")\ncheckRestockNeeded(5).getOrElse(\"Stock sufficient\")"}
{"id":"a8c02101-30e6-49e3-9f59-2b3aa301fe63","timestamp":1746098049906,"category":"null_checks","topicUsed":"Warehouse inventory tracking","isIdiomatic":false,"code":"def getOrderReference(orderNum: Int): String = {\n  if (orderNum == 4421) \"Delivered\"\n  else null\n}\nval status = getOrderReference(9332)\nif (status != null) println(s\"Order $status\") else println(\"Order reference missing\")"}
{"id":"21d317c2-d776-4674-b976-b69134d7635a","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserReport(reporterId: String, reportedContentId: String, reason: String)\ndef findUserReport(report: UserReport | Null): Option[UserReport] = Option(report)"}
{"id":"919524e8-686c-4663-98e7-3e7f3ff5587d","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getFlaggedContent(contentId: String): String = if (contentId == \"\") null else \"FlaggedPost\"\ndef moderateFlaggedContent(contentId: String): String = {\n  val flagged = getFlaggedContent(contentId)\n  if (flagged == null) \"Content not found\" else \"Moderating: \" + flagged\n}"}
{"id":"c7efb4c4-6b4d-4c30-9671-be606c40ff33","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def reviewContentForViolations(text: String): Option[String] =\n  Option(text).filter(txt => txt.contains(\"offensive\")).map(_ => \"Violation Found\")"}
{"id":"067dd088-a300-4502-a1ec-85d0106bcdb9","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getModeratorNote(contentId: String): String = null\ndef printModeratorNote(contentId: String): Unit = {\n  val note = getModeratorNote(contentId)\n  if (note != null) println(note)\n}"}
{"id":"83f00796-562f-4830-bc35-424a065e7444","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class Comment(content: String, userId: String)\ndef approvedComment(comment: String | Null): Option[Comment] =\n  Option(comment).map(Comment(_, \"reviewer\"))"}
{"id":"02dcc5a5-ad23-4d23-9d01-664c9d0bfb94","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getRemovedReason(contentId: String): String = null\ndef handleRemovedReason(contentId: String): String = {\n  val reason = getRemovedReason(contentId)\n  if (reason == null) \"No reason provided\" else reason\n}"}
{"id":"c18b20a4-b3a4-4e79-8e31-9d114cfb3208","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def checkPostForSpam(post: String): Option[String] =\n  Option(post).filter(_.toLowerCase.contains(\"buy now\")).map(_ => \"Spam Detected\")"}
{"id":"05280755-ba4d-4295-82a3-cba081bb7b2d","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def fetchReportedAccount(accountId: String): String = null\ndef banIfReported(accountId: String): Boolean = {\n  val account = fetchReportedAccount(accountId)\n  if (account != null) true else false\n}"}
{"id":"d47f7df4-02d1-4d59-a053-98daed55c4d2","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def wrapJavaModeratorResponse(response: String | Null): Option[String] = Option(response)\nval warningOpt = wrapJavaModeratorResponse(\"Potential hate speech\")\nval safeWarning = warningOpt.getOrElse(\"No warning issued\")"}
{"id":"a0bb3895-f27b-4872-b1b7-a449df3f4786","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getDeletedComment(commentId: String): String = null\nval res = getDeletedComment(\"abc123\")\nif (res != null) println(\"Comment: \" + res)"}
{"id":"6f92d249-e063-4d0b-9f22-c25b74653648","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def safeFetchUserWarning(userId: String): Option[String] = Option(getUserWarning(userId))\ndef getUserWarning(userId: String): String | Null = if (userId.length < 3) null else \"Warning recorded\"\nval warningMessage = safeFetchUserWarning(\"jo\") getOrElse \"No warning for user\""}
{"id":"45653f55-6e1b-471b-9a81-941c8900578e","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getModerator(username: String): String = null\nval moderator = getModerator(\"johnDoe\")\nif (moderator == null) println(\"No such moderator\")"}
{"id":"3c3e8c63-e342-4b5a-a63d-ac1fcf488d1f","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def filterReportedPosts(reports: List[String | Null]): List[String] =\n  reports.flatMap(report => Option(report)).filter(_.startsWith(\"report\"))"}
{"id":"d588e005-ffbb-44e2-8913-1cd84181bfcc","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def javaStylePostTitle(titleId: String): String = null\ndef displayTitle(titleId: String): Unit = {\n  val title = javaStylePostTitle(titleId)\n  if (title != null) println(title)\n}"}
{"id":"9d0be36a-53f7-478b-a077-b52756d0b56e","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def findContentModerator(moderatorName: String): Option[String] =\n  Option(moderatorName).filter(_.nonEmpty)\ndef assignModerator(contentId: String, modName: String): String =\n  findContentModerator(modName) match {\n    case Some(name) => s\"$contentId assigned to $name\"\n    case None => s\"No moderator available for $contentId\"\n  }"}
{"id":"3b957fc1-a76b-4101-ba36-3559c879b8f2","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getViolationIdOrNull(comment: String): String = if (comment.contains(\"profanity\")) \"V-123\" else null\ndef checkViolation(comment: String): Boolean = {\n  val id = getViolationIdOrNull(comment)\n  if (id != null) true else false\n}"}
{"id":"e9b77fa7-9d08-4ab3-9974-f8401f664cfb","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def userAppealStatus(appeal: String | Null): Option[String] = Option(appeal)\ndef processUserAppealStatus(appeal: String | Null): String =\n  userAppealStatus(appeal).fold(\"No appeal found\")(status => s\"Appeal: $status\")"}
{"id":"8a2d311d-1485-4f26-824b-f4b5828611a5","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getSuspendedAccount(accountId: String): String = null\ndef notifyOnSuspension(accountId: String): Unit = {\n  val susp = getSuspendedAccount(accountId)\n  if (susp != null) println(\"Suspended: \" + susp)\n}"}
{"id":"8e30e5b4-ef71-4175-bc5b-475296e5fd59","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def extractProfileWarning(javaProfileWarning: String | Null): Option[String] = Option(javaProfileWarning)\nval warningMsg = extractProfileWarning(null).getOrElse(\"No Profile Warning\")"}
{"id":"97ce5457-05fe-440d-b806-829475d666a1","timestamp":1746098089639,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getAdminAction(actionId: String): String = null\nval adminAction = getAdminAction(\"A102\")\nif (adminAction == null) println(\"No action recorded\")"}
{"id":"2778a2e1-8d41-43fc-bf30-9280bcaf3b31","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class ModerationResult(isFlagged: Boolean, reason: Option[String])\ndef checkContentForAbuse(text: String): Option[ModerationResult] =\n  val lower = text.toLowerCase\n  if lower.contains(\"hate\") then\n    Some(ModerationResult(true, Some(\"hate speech\")))\n  else if lower.contains(\"spam\") then\n    Some(ModerationResult(true, Some(\"spam detected\")))\n  else\n    None"}
{"id":"a31520c6-09a8-41ab-8bcc-74b4d363e535","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def fetchUserProfileFromLegacy(userId: String): String =\n  // Mimicking java method, can return null\n  if userId == \"banned_user\" then null else \"profile for \" + userId\n\ndef getUserProfileBio(userId: String): String =\n  val profile = fetchUserProfileFromLegacy(userId)\n  if (profile != null) profile else \"no profile available\""}
{"id":"1be75196-b36c-417b-9065-9b407a48c133","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def lastReportedContent(userReports: List[String]): Option[String] =\n  userReports.lastOption.map(_.trim).filter(_.nonEmpty)"}
{"id":"596822f3-c819-47eb-8512-718fcafc0e38","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"class CommentModeration {\n  def checkForOffensive(comment: String): String =\n    if (comment == null)\n      \"invalid comment\"\n    else if (comment.toLowerCase.contains(\"offensive\"))\n      \"offensive\"\n    else\n      \"clean\"\n}"}
{"id":"6b524c4d-1c8e-4bd4-a8df-d249d24988af","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def normalizePost(post: String): Option[String] =\n  Option(post).map(_.trim).filter(_.nonEmpty)"}
{"id":"5e12345d-dc0d-4a28-8893-179a25ee2c5d","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getReportedPostText(postId: String): String =\n  if (postId == \"removed\")\n    null\n  else\n    s\"Content of $postId\"\n\ndef assignModeratorResponse(postId: String): String =\n  val text = getReportedPostText(postId)\n  if (text == null) \"Post not found\" else \"Moderation response for: \" + text"}
{"id":"c4d0abe4-dfdb-4137-840a-550a3b01ece0","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def wrapLegacyModeratorId(id: String): Option[String] =\n  Option(id).filter(_.matches(\"mod-\\\\d+\"))"}
{"id":"e3208315-259e-4592-834e-6ea76403d096","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def checkIfMediaAttachmentIsNull(mediaUrl: String): Boolean =\n  if (mediaUrl == null) true else false"}
{"id":"57c7a3b3-5931-4820-b79d-07e73748312b","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"case class UserFeedback(content: String, flagged: Boolean)\ndef flaggedFeedbackMessage(feedback: Option[UserFeedback]): String =\n  feedback.filter(_.flagged).map(_.content).getOrElse(\"No flagged feedback found.\")"}
{"id":"3ad4fc57-bc1a-4414-8f22-063c30c601ed","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def reviewQueueHead(queue: Array[String]): String =\n  if (queue == null || queue.isEmpty) null else queue(0)"}
{"id":"bce33677-5c1a-4bd6-8d85-2713ac5f995c","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def extractOptionalLink(text: String): Option[String] =\n  val urlPattern = \"(https?://\\\\S+)\".r\n  urlPattern.findFirstIn(text)"}
{"id":"31094e3a-2f73-4682-8128-bef244fbc403","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def processPostFlag(flagReason: String): String =\n  if (flagReason == null) \"No reason provided\" else flagReason.toUpperCase"}
{"id":"0ce689c4-f6b2-44cf-a850-8df3db1f4468","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def moderatorNoteForContent(content: String): Option[String] =\n  Option(content).filter(_.startsWith(\"Note:\"))"}
{"id":"4e1c31ab-05c4-4f71-a307-2e3c56c5d843","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getModeratorNotes(postId: String): String =\n  if (postId == null) null else s\"Notes for $postId\""}
{"id":"b572df03-9c04-479d-acc7-1ab5e61ce79f","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def maybeGetUserSettings(settings: java.util.Map[String, String]): Option[String] =\n  Option(settings).flatMap(s => Option(s.get(\"language\")))"}
{"id":"b935c25a-c2b2-4666-86f9-71eaedfb02ee","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getPostMediaUrl(mediaUrls: Array[String]): String =\n  if (mediaUrls == null || mediaUrls.length == 0) null else mediaUrls(0)"}
{"id":"ccb16497-bb6a-454e-85f3-cc6975bd941f","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def rejectedPostReason(reason: String): Option[String] =\n  Option(reason).filter(_.nonEmpty).map(_.capitalize)"}
{"id":"211193bd-a945-4f48-9412-a19b4698ee61","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def legacyFetchModerationLog(entryId: Long): String =\n  if (entryId < 0) null else \"ModerationLog: \" + entryId\n\ndef safeLogPrint(entryId: Long): Unit =\n  val log = legacyFetchModerationLog(entryId)\n  if (log != null) println(log)"}
{"id":"901a0e47-e2b1-4d89-9bd3-ce47e0509f48","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":true,"code":"def flaggedBySystem(comment: String): Option[String] =\n  Option(comment).filter(_.contains(\"AI-flag\")).map(c => s\"System flagged: $c\")"}
{"id":"642d636d-f65c-4c89-9f10-2070a3030cf2","timestamp":1746098106994,"category":"null_checks","topicUsed":"Social media content moderation","isIdiomatic":false,"code":"def getModeratorUsername(user: String): String =\n  if (user == null) \"anonymous moderator\" else user"}
{"id":"9ab9e673-c4ee-494b-b797-ea59030f035b","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class Article(id: String, title: String, content: String)\ndef getRecommendedArticles(userPreferences: String): Option[List[Article]] =\n  val articles = fetchArticlesForPreferences(userPreferences)\n  Option(articles)\n"}
{"id":"f8beb44d-6aa5-4ce4-8c3b-7b76d57d4172","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def fetchUserFeed(userId: String): List[String] =\n  val feed: List[String] = getFeedFromServer(userId)\n  if (feed != null) feed else List.empty\n"}
{"id":"b9840b49-d5be-436e-8f95-eab6d6e9a320","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def personalizedHeadline(article: Article): Option[String] =\n  Option(article.title).filter(_.nonEmpty)\n"}
{"id":"009827a7-f349-4ab9-8f00-bcfde3357d58","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getLastReadArticle(userId: String): Article =\n  val article = legacyGetLastRead(userId)\n  if (article != null) article else Article(\"0\", \"Untitled\", \"No Content\")\n"}
{"id":"dab5222c-394f-49f6-9e51-9d62e55e68b5","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def userPreferencesOption(preferences: UserPreferences): Option[UserPreferences] =\n  Option(preferences)\n"}
{"id":"a9e3442a-f411-4b99-9dd7-2511c783f353","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def fetchBreakingNewsMessage(feed: NewsFeed): String =\n  if (feed == null) \"No News Available\" else feed.latestHeadline\n"}
{"id":"97db396b-9840-4bfd-a440-eabbadda1385","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def mostReadArticleTitle(mostRead: Article): Option[String] =\n  Option(mostRead).map(_.title)\n"}
{"id":"d5379374-a74c-4745-92a7-b9c2e815928c","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getAuthorBio(authorId: String): String =\n  val bio = retrieveAuthorBioFromDb(authorId)\n  if (bio != null) bio else \"Bio not found.\"\n"}
{"id":"ace0c7a1-5c76-460f-b6d2-1c378febc416","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def recommendedTopics(user: NewsUser): Option[List[String]] =\n  Option(user).flatMap(u => Option(u.recommendedTopics))\n"}
{"id":"1670e154-3d61-4000-8121-94ecd0584f3c","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getUnreadCount(feed: PersonalizedFeed): Int =\n  if (feed == null) 0 else feed.unreadArticlesCount\n"}
{"id":"eff81da9-4acb-4e79-a881-1770351be88f","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def latestTrendOption(trend: String): Option[String] =\n  Option(trend).filter(_.nonEmpty)\n"}
{"id":"b7a2d848-b5b3-4f5c-8173-03cf0bcd717b","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def articleSummaryLegacy(article: Article): String =\n  val summary = javaApiGenerateSummary(article)\n  if (summary != null) summary else \"Summary not available.\"\n"}
{"id":"2e271b4a-7d2b-4e4f-a0c8-d66466acbad8","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def filterFavoriteTags(tag: String): Option[String] =\n  Option(tag).filter(_.toLowerCase.startsWith(\"fav\"))\n"}
{"id":"8ba70d70-f38d-4f2d-9687-07222eab0e14","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getUserInterestScore(userProfile: UserProfile): Double =\n  if (userProfile == null) 0.0 else userProfile.interestScore\n"}
{"id":"da1e742b-abb2-4a3c-bb2d-77a713504a04","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class FeedItem(article: Article, timestamp: Long)\ndef getFeedHighlights(feedItems: List[FeedItem]): Option[FeedItem] =\n  feedItems.find(_.article.title.nonEmpty)\n"}
{"id":"f1edfdde-d202-4774-812a-824e8500151e","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getNewsDigest(digestId: String): NewsDigest =\n  val digest = legacyDigestLookup(digestId)\n  if (digest != null) digest else NewsDigest.nil\n"}
{"id":"2807cdf1-8e3c-4347-9f57-3c7dc56547a5","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def trendingTopicOption(topic: String): Option[String] =\n  Option(topic).filter(_.length > 5)\n"}
{"id":"dabcf4cd-6042-4725-8a26-9759740f8ed1","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def legacyFetchTopHeadline(): String =\n  val headline = externalHeadlineProvider()\n  if (headline != null) headline else \"No headline available\"\n"}
{"id":"8943d245-c874-4a37-90b7-8fac1d68c37e","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def safeGetArticleContent(article: Article): Option[String] =\n  Option(article.content).filter(_.nonEmpty)\n"}
{"id":"7c87a91c-2610-4616-8a0a-1e1c8ff9b717","timestamp":1746098120154,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def removeNullLikes(likes: Array[String]): Array[String] =\n  likes.filter(like => like != null)\n"}
{"id":"167acfa1-226d-4ace-aa41-5e127f2dd96d","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class UserProfile(preferredCategories: List[String])\n\ndef getUserInterest(userId: Int): Option[List[String]] =\n  Option(Database.fetchUserPreferences(userId))\n    .map(prefs => prefs.split(\",\").toList)"}
{"id":"47b908df-f8ca-43c2-8f64-8bb2331bfcb8","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def getNewsArticleTitle(article: NewsArticle): Option[String] =\n  Option(article.title)\n    .filter(_.nonEmpty)"}
{"id":"ef3e1dee-4f1d-48e1-8a3e-ce79d0076eb0","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class NewsFeedItem(content: String, author: String)\ndef formatFeedItem(feedItem: Option[NewsFeedItem]): String =\n  feedItem.map(item => s\"${item.author}: ${item.content}\")\n    .getOrElse(\"[No Content Available]\")"}
{"id":"596e065d-d544-46d9-9388-f3bc108003c6","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def getPersonalizationScore(user: UserProfile): Option[Double] =\n  Option(user)\n    .flatMap(up => Option(up.preferredCategories))\n    .filter(_.nonEmpty)\n    .map(_.length * 1.5)"}
{"id":"101dd371-9226-4987-aaeb-b53eaa015583","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def safeArticleSummary(article: NewsArticle): Option[String] =\n  Option(article.summary).filter(_.length > 50)"}
{"id":"68879eb0-08fe-478d-aedc-771319b41fde","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def fetchUserNewsList(userId: String): Option[List[NewsArticle]] =\n  Option(JavaNewsFeed.getArticlesForUser(userId)).map(_.toList)"}
{"id":"964ebc4b-b245-4cb8-b8ea-755fb4f5caba","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"case class PersonalizedFeed(articles: List[NewsArticle])\ndef topArticle(feed: PersonalizedFeed): Option[NewsArticle] =\n  feed.articles.headOption"}
{"id":"035ece85-85e8-45c0-a6f0-e37ac56d64e8","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def recommendCategory(user: Option[UserProfile]): Option[String] =\n  user.flatMap(u => u.preferredCategories.headOption)"}
{"id":"4843be48-edc0-4b9f-90aa-f98e98aed976","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def highlightBreakingNews(maybeArticle: Option[NewsArticle]): String =\n  maybeArticle.map(_.title).getOrElse(\"No breaking news right now.\")"}
{"id":"b2205493-3fcd-4484-a0e4-215963ea9f24","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def userLanguagePreference(userId: Int): Option[String] =\n  Option(LegacyUserSettings.languageForUser(userId))"}
{"id":"93383c86-8847-4b64-bef3-271bae67186b","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def getTrendingKeywords(feed: List[NewsArticle]): Option[List[String]] =\n  Option(feed).filter(_.nonEmpty).map(_.flatMap(_.keywords))"}
{"id":"8f8f549c-a5ad-446d-bab9-79514feb208c","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def favoriteJournalist(user: Option[UserProfile]): Option[String] =\n  user.flatMap(profile =>\n    profile.preferredCategories.find(_ == \"journalist\")\n  )"}
{"id":"bcf01189-630b-4e24-b392-5702495a9d8a","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def previewArticle(article: NewsArticle): Option[String] =\n  Option(article.body)\n    .map(text => text.take(100))"}
{"id":"619a3a8a-c7f9-47df-b228-8c607d879eea","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def personalizedGreeting(profile: Option[UserProfile]): String =\n  profile.fold(\"Welcome!\")(user => s\"Welcome, interested in ${user.preferredCategories.mkString(\", \")}\")"}
{"id":"cea9755d-28b6-478c-bc5a-7562f5cbcf23","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def recommendFromSummary(article: Option[NewsArticle]): Option[String] =\n  article.filter(_.summary != null)\n    .flatMap(a => Option(a.summary))\n    .filter(_.length > 20)"}
{"id":"d6897a05-8051-4fa3-9ceb-66056b1da728","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def safeGetAuthorName(article: NewsArticle): Option[String] =\n  Option(article.authorName)\n    .filter(_.nonEmpty)"}
{"id":"0c4f4479-7d8e-4810-abb1-b011829ab06e","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def selectRecentFeed(feedOpt: Option[PersonalizedFeed]): Option[NewsArticle] =\n  feedOpt.flatMap(_.articles.sortBy(_.publicationDate).reverse.headOption)"}
{"id":"9294584a-bf6c-423c-bc67-16b3d473078f","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def getSubscribedTopics(user: UserProfile): List[String] =\n  Option(user.subscriptions).getOrElse(Nil)"}
{"id":"26bfc793-0bb6-45b0-aa35-7ac535c80cf8","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def extractLocation(news: NewsArticle): Option[String] =\n  Option(news.location)\n    .filter(_.nonEmpty)\n    .map(_.capitalize)"}
{"id":"f6843119-9beb-476d-bfe8-40ac7ece0597","timestamp":1746098155039,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":true,"code":"def getRelatedArticles(history: Option[List[NewsArticle]]): List[NewsArticle] =\n  history.getOrElse(List.empty[NewsArticle])"}
{"id":"6d691d2d-a3c0-46de-8dcc-6debede09592","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class LegacyFeedManager {\n  def getLatestNews(username: String): NewsArticle = null\n}\ndef topNewsForUser(user: String): NewsArticle = {\n  val manager = new LegacyFeedManager\n  val article = manager.getLatestNews(user)\n  if (article != null) article else new NewsArticle(\"No News\",\"\",null,null,null)\n}"}
{"id":"e7d4fa5c-6e07-42bd-b280-b7cc5ec4ad3f","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def newsCategoryOrDefault(news: NewsArticle): String = {\n  if (news.category == null) \"General\" else news.category\n}"}
{"id":"3c671e09-e947-4ac1-b3c5-00d5ffc91ae5","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def authorDisplayName(article: NewsArticle): String = {\n  if (article.authorName != null) article.authorName else \"Anonymous\"\n}"}
{"id":"be6885a2-304d-45b8-a814-c9bac9276d21","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getFirstSavedFeed(feeds: Array[PersonalizedFeed]): PersonalizedFeed = {\n  if (feeds != null && feeds.length > 0) feeds(0) else null\n}"}
{"id":"13b45987-be88-47d2-a1a6-ac1e32709a2d","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def shownSummary(article: NewsArticle): String = {\n  if (article.summary == null) \"No summary available.\" else article.summary\n}"}
{"id":"b4b652e9-5fbf-47e1-b26a-5b2fc2b9b2a9","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def findUserFavorites(user: UserProfile): List[String] = {\n  if (user.favoriteTopics != null) user.favoriteTopics else List()\n}"}
{"id":"e6ce5f69-c907-4f04-8cfb-b632bc0dae4a","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"class ExternalNewsService {\n  def fetchRelevantArticle(topic: String): NewsArticle = null\n}\ndef getRelevantArticle(service: ExternalNewsService, topic: String): NewsArticle = {\n  val article = service.fetchRelevantArticle(topic)\n  if (article != null) article else new NewsArticle(\"\",\"\",null,null,null)\n}"}
{"id":"a1bf6c57-1940-41a8-a9bd-9bccd47102d3","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getJournalistBio(journalist: Journalist): String = {\n  if (journalist.bio != null) journalist.bio else \"Bio not available.\"\n}"}
{"id":"2c937de1-8dc6-45f8-a8c0-8e0c89350e08","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def preferredLanguageOrEn(profile: UserProfile): String = {\n  if (profile.language != null) profile.language else \"en\"\n}"}
{"id":"f14d2ba8-9365-45e5-80be-f56c0d730f9a","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def feedTitleOrDefault(feed: PersonalizedFeed): String = {\n  if (feed.title == null) \"My News Feed\" else feed.title\n}"}
{"id":"81b32794-0fa0-4977-a22e-6a4867411e99","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getTopicImage(topic: String): String = {\n  val img = DeprecatedTopicImageService.fetchImage(topic)\n  if (img == null) \"default.png\" else img\n}"}
{"id":"c9b2efde-f48e-4c4d-8274-dc00ca8625f4","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def safeFetchUserFeed(userService: UserAccountService, userId: Int): Feed = {\n  val feed = userService.getFeedOrNull(userId)\n  if (feed != null) feed else new Feed(List(),null)\n}"}
{"id":"e02438aa-b14e-48f3-999d-3a1517604508","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getFeedSourceName(feed: PersonalizedFeed): String = {\n  if (feed.sourceName != null) feed.sourceName else \"Unknown Source\"\n}"}
{"id":"b4781e7b-6265-4d8e-ac6e-cecadc593ac1","timestamp":1746098155040,"category":"null_checks","topicUsed":"Personalized news feed","isIdiomatic":false,"code":"def getBookmarkTitleOrUntitled(bookmark: Bookmark): String = {\n  if (bookmark.title == null) \"Untitled\" else bookmark.title\n}"}
{"id":"4f5c3951-ce9d-4c57-9c14-0a2db74bccc7","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingStation(id: Int, name: String, location: String)\n\ndef findStationById(id: Int): Option[ChargingStation] =\n  val stations = List(\n    ChargingStation(1, \"Downtown FastCharge\", \"Main St\"),\n    ChargingStation(2, \"Mall EV Point\", \"Mall Road\")\n  )\n  stations.find(_.id == id)\n"}
{"id":"ae673277-f69d-4a7c-89c2-5911eaff4990","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getConnectorTypeOrNone(stationId: Int): Option[String] =\n  val connectors = Map(1 -> \"Type2\", 2 -> \"CCS\")\n  connectors.get(stationId)\n"}
{"id":"b6cd0875-9d81-429a-bb64-7b939c9e2565","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def safeFindNearestCharger(location: String): Option[String] =\n  val chargers = Map(\"Avenue Park\" -> \"FastCharge Central\")\n  Option(chargers.getOrElse(location, null))\n"}
{"id":"572417dc-2239-424c-9763-57b5b679e8b1","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def printOperatorNameIfExists(station: Option[ChargingStation]): Unit =\n  station.map(_.name).foreach(println)\n"}
{"id":"99a0b574-8d6c-48dd-af69-91914a9d4513","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getStationContact(email: String): Option[String] =\n  val contacts = Map(\"support@evhub.com\" -> \"123-456-7890\")\n  contacts.get(email)\n"}
{"id":"cce5f188-6e0f-4c34-b2f3-a00abe715847","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def isAvailable(station: Option[ChargingStation], requiredType: String): Boolean =\n  station.exists(_.name.contains(requiredType))\n"}
{"id":"3744a760-43f9-4e71-b525-b9e78d37f395","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def fallbackToDefaultStation(stationName: Option[String]): String =\n  stationName.getOrElse(\"Default Charging Hub\")\n"}
{"id":"03b469be-0eda-4292-a8d3-36d0901ceea0","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def stationLogoUrl(station: Option[ChargingStation]): Option[String] =\n  station.flatMap(s => Option(s\"/assets/${s.id}_logo.png\"))\n"}
{"id":"114a3965-656b-476c-97ae-7350dc218d6c","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def filterFastCharging(stations: List[ChargingStation]): List[ChargingStation] =\n  stations.filter(_.name.contains(\"Fast\"))\n"}
{"id":"14313469-e3ea-4148-801e-4645d8b1b5df","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getPowerRating(station: Option[ChargingStation]): Option[Int] =\n  station.map(_.id * 11)\n"}
{"id":"fe500ac4-e85f-4775-ae56-b8064044b3e0","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def javaFindStation(name: String): ChargingStation =\n  if (name == \"Sun Power\") ChargingStation(3, \"Sun Power\", \"Green Lane\") else null\n\ndef safeFindStationByJava(name: String): Option[ChargingStation] =\n  Option(javaFindStation(name))\n"}
{"id":"98010994-f31a-4e2b-a655-85f682f2daa8","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def distanceToStation(currentLocation: Option[String], stationLocation: Option[String]): Option[Double] =\n  for\n    curr <- currentLocation\n    station <- stationLocation\n  yield 1.2\n"}
{"id":"0672fd17-1fd5-425e-82d7-ba6e8a47f713","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def maybeGetStationPhone(station: Option[ChargingStation]): Option[String] =\n  station.filter(_.location == \"Main St\").map(_ => \"555-1001\")\n"}
{"id":"3b4d17ef-9ad9-4b4d-8e4b-cab71456633a","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def stationOrAlternative(station: Option[ChargingStation], alternative: ChargingStation): ChargingStation =\n  station.fold(alternative)(identity)\n"}
{"id":"9fd21d29-7437-4b68-9d12-518835cd36d1","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def displayStationDetails(station: Option[ChargingStation]): String =\n  station.map(s => s\"${s.name}@${s.location}\").getOrElse(\"No Station Found\")\n"}
{"id":"47bc8cc6-2bfe-43da-a395-1380f8087a31","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getChargerCount(station: Option[ChargingStation]): Option[Int] =\n  station.flatMap(s => Option(4))\n"}
{"id":"6ffc6de6-a4f8-4f9d-b0b2-faddcf850695","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"class StationDirectory(stations: Map[Int, String]) {\n  def getStationName(id: Int): Option[String] = stations.get(id)\n}\n"}
{"id":"604a4b03-1652-4078-924d-491ee673a204","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def maybeOperator(station: Option[ChargingStation]): Option[String] =\n  station.map(_.name.split(\" \").headOption.getOrElse(\"Unknown\"))\n"}
{"id":"a141c132-df7c-41c2-92f7-66b115072b03","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def isChargingStationNearby(location: Option[String]): Boolean =\n  location.exists(_ == \"Green Lane\")\n"}
{"id":"8a9c40a5-9ee4-48be-8147-4ef5d2a7e0fb","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getStationWebsiteOrDefault(site: Option[String]): String =\n  site.getOrElse(\"https://evcharge.com/default\")\n"}
{"id":"8276c081-b33a-412a-9a76-0508c529c797","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargingSpot(val id: Int, val name: String, val address: String)\ndef getNearestSpot(location: String): ChargingSpot =\n  if (location == \"Main St\") new ChargingSpot(1, \"Downtown EV Point\", \"Main St\") else null\n\ndef printNearestSpot(location: String): Unit = {\n  val spot = getNearestSpot(location)\n  if (spot != null) println(spot.name)\n}\n"}
{"id":"174185f3-f6a3-474f-85ef-be8ccb32b6e2","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getStationHtml(id: Int): String =\n  val stationNames = Map(5 -> null, 6 -> \"Rapid EV Station\")\n  val name = stationNames.getOrElse(id, null)\n  if (name != null) s\"<h1>$name</h1>\" else \"<h1>Not Found</h1>\"\n"}
{"id":"2ba12260-bae9-4e53-b922-9140f374f877","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def javaOperatorName(javaObj: AnyRef): String =\n  if (javaObj != null) javaObj.toString else \"Unknown Operator\"\n"}
{"id":"97293ef3-cd9c-4981-9e28-f38d40b3896a","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getChargerTypeFromLegacyDb(id: Int): String =\n  val dbResult = if (id == 7) \"CHAdeMO\" else null\n  if (dbResult != null) dbResult else \"Unknown\"\n"}
{"id":"1e6323a2-1f3f-48fb-a65c-53fcaad37746","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def lastInspected(station: ChargingStation): String =\n  if (station != null && station.id == 1) \"2024-05-20\" else null\n"}
{"id":"9a15e764-9cf6-4a11-8f0d-a2de40ed1a64","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def showContactNumber(contact: String): Unit =\n  if (contact != null) println(contact)\n"}
{"id":"f0f97970-af89-4187-8c0d-4f49f2a97b17","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def checkAvailabilityInApi(id: Int): Boolean =\n  val apiResult = if (id == 10) \"available\" else null\n  apiResult != null\n"}
{"id":"21e1f503-9a28-4335-8c83-1e7186d05c08","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class NetworkStation(val reference: String, val network: String)\ndef getNetworkInfo(network: String): NetworkStation =\n  if (network == \"ChargeNow\") new NetworkStation(\"Ref-1\", network) else null\n"}
{"id":"4f2033f1-10e4-48b6-abfc-b85af614a684","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def unsafeStationIdExtraction(station: ChargingStation): Int =\n  if (station != null) station.id else -1\n"}
{"id":"7570de9e-d15d-4b4f-9044-53246b1d37a7","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getBillingInfo(accountId: String): String =\n  val info = if (accountId == \"EV123\") \"Active\" else null\n  if (info != null) info else \"No Info\"\n"}
{"id":"d4c1d96e-5346-4800-80aa-b1094a3567bd","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def findLegacyStationByName(name: String): ChargingStation =\n  if (name == \"Green Point\") ChargingStation(4, \"Green Point\", \"Eco Lane\") else null\n"}
{"id":"f437a5e6-98a2-496d-9063-35f453acf433","timestamp":1746098180034,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def printStationLogo(logoUrl: String): Unit =\n  if (logoUrl != null) println(logoUrl)\n"}
{"id":"946c582d-f87c-49a6-88d1-4bf45b0ba877","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"case class ChargingStation(id: String, name: String, location: String)\ndef findNearestStationOrNone(userLocation: String, stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.find(_.location == userLocation)\n    .orElse(stations.headOption)"}
{"id":"86b2aca0-5ed6-46ce-9338-0b18df81ea5d","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getChargerDetailsOrNone(stationId: String): Option[String] =\n  val chargerInfo = JavaChargerService.fetchChargerById(stationId)\n  Option(chargerInfo).map(_.toString)"}
{"id":"cfe45892-283a-483b-b4e3-fa6d8429a5e8","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def getAvailableStationsCount(city: String, stations: List[ChargingStation]): Option[Int] =\n  val filtered = stations.filter(_.location == city)\n  Option.when(filtered.nonEmpty)(filtered.size)"}
{"id":"a65aad58-862d-4baf-b77c-689572dfd082","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":true,"code":"def selectFastChargingStation(area: String, stations: List[ChargingStation]): Option[ChargingStation] =\n  stations.find(_.name.contains(\"Fast Charger\"))\n    .filter(_.location == area)\n    .orElse(None)"}
{"id":"673da17f-ed0d-44c1-96c9-b4dc33f826ed","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"class ChargingNetworkFinder {\n  def findStationByIdOrNull(stations: Array[ChargingStation], soughtId: String): ChargingStation = {\n    var i = 0\n    while (i < stations.length) {\n      if (stations(i) != null && stations(i).id == soughtId) {\n        return stations(i)\n      }\n      i += 1\n    }\n    null\n  }\n}"}
{"id":"2496c0ae-c46b-48a7-9197-53aa8e045dea","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def getStationLocationById(stations: List[ChargingStation], id: String): String = {\n  val s = stations.find(_.id == id).orNull\n  if (s != null) s.location else null\n}"}
{"id":"dbd7e3b6-6093-44b7-80d6-ed26e290ea56","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def checkChargerAvailability(station: ChargingStation): Boolean = {\n  if (station != null && station.name != null) {\n    station.name.contains(\"Available\")\n  } else {\n    false\n  }\n}"}
{"id":"af2ffa08-56bf-432f-bbde-21e2edf7c9f9","timestamp":1746098188654,"category":"null_checks","topicUsed":"Electric vehicle charging station locator","isIdiomatic":false,"code":"def fetchStationNameFromLegacyJava(stationNumber: Int): String = {\n  val legacyName = LegacyJavaEVService.getStationName(stationNumber)\n  if (legacyName != null) legacyName else \"Unknown Station\"\n}"}
{"id":"4fec7d9f-2c06-44c9-b08e-bb0966a52365","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class CropSensorData(temperature: Double, humidity: Double)\ndef safeSensorReading(sensor: AnyRef): Option[CropSensorData] = Option(sensor).map(_.asInstanceOf[CropSensorData])"}
{"id":"013ef5d7-ecd9-4007-bb36-99bf10299095","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getSoilMoistureLevel(fieldId: String): Double = {\n  var moisture: java.lang.Double = ExternalSoilMoistureAPI.getLevel(fieldId)\n  if (moisture == null) -1.0 else moisture.doubleValue()\n}"}
{"id":"1a323256-78ef-4c56-9ef8-d8ea91f8778d","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def findCropDiseaseStatus(cropId: String): Option[String] = {\n  val diseaseStatus: String = ExternalDiseaseAPI.statusFor(cropId)\n  Option(diseaseStatus)\n}"}
{"id":"76ed209c-9a75-4563-bda2-ac14a44ee445","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def retrieveIrrigationSchedule(plotId: Int): String = {\n  val schedule = IrrigationRepository.scheduleForPlot(plotId)\n  if (schedule == null) \"Unknown\" else schedule\n}"}
{"id":"9dfd16c0-abae-4ad6-b7a6-86ac9b3743d3","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def healthyLeafCount(maybeObservation: Option[LeafObservation]): Int = {\n  maybeObservation.map(_.healthyCount).getOrElse(0)\n}"}
{"id":"c10aa703-500c-4fc2-a538-45326245bfbd","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def fetchWeatherReport(region: String): WeatherReport = {\n  val report = WeatherService.getLatest(region)\n  if (report != null) report else new WeatherReport(0.0, 0.0)\n}"}
{"id":"efbc984e-98c9-4cf4-8a97-7188e8607b43","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class FieldMonitor(id: String, lastSoilPh: Option[Double])\ndef averagePhLevel(monitors: List[FieldMonitor]): Double = {\n  val phs = monitors.flatMap(_.lastSoilPh)\n  if phs.isEmpty then 7.0 else phs.sum / phs.size\n}"}
{"id":"b81fd890-5971-40ff-8fcb-ad8d545ec6ed","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getCropHealthStatus(cropId: String): String = {\n  val status = CropDatabase.lookupHealth(cropId)\n  if (status != null) status else \"No Data\"\n}"}
{"id":"faf51095-98c8-47b5-8058-d765b008ca45","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def sensorReadingToOption(reading: java.lang.Double): Option[Double] = Option(reading).map(_.toDouble)"}
{"id":"057300da-a14b-4e63-aaa9-f0676695a9c6","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def fetchPestAlert(fieldId: String): String = {\n  val alert = PestIntegrationJavaApi.getAlertForField(fieldId)\n  if (alert == null) \"No Alert\" else alert\n}"}
{"id":"8e52c222-014a-43b3-b4b5-233777f9d9d5","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def lastHarvestTimestamp(field: FieldStatus): Option[Long] = Option(field.lastHarvestTimestamp)"}
{"id":"7551981a-055b-4f68-88f7-d49b53643b62","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def plotSupervisorName(plot: FarmPlot): Option[String] = Option(plot.supervisorName)"}
{"id":"bb816c31-d0cf-48df-8cdb-feaae3997488","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getFertilizerRecommendation(cropType: String): String = {\n  val fertilizer = FertilizerJavaAPI.recommend(cropType)\n  if (fertilizer != null) fertilizer else \"N/A\"\n}"}
{"id":"72682f82-478b-42a5-86b5-195ddf9aa27d","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def cropGrowthStage(optStage: Option[String]): String = {\n  optStage.map(_.capitalize).getOrElse(\"Unknown Stage\")\n}"}
{"id":"e03f4391-bb12-4a3b-ab83-62b2e3d332ac","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def retrieveSensorArray(serial: String): SensorArray = {\n  val result = FieldSensorDB.getArrayBySerial(serial)\n  if(result != null) result else new SensorArray(serial, Array.empty)\n}"}
{"id":"c5177b92-99a1-45b2-a79b-3c5666cc8647","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def soilSampleQuality(sample: Option[SoilSample]): String =\n  sample.map(_.quality).getOrElse(\"Unrated\")"}
{"id":"93abf342-3064-4baf-bfee-879e7c47be93","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getActiveCrop(plotName: String): Crop = {\n  val crop = CropRegistry.activeOnPlot(plotName)\n  if (crop != null) crop else new Crop(\"Unknown-Crop\")\n}"}
{"id":"9feb04cc-6efe-4e88-903f-b32dcdfc69b5","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def weatherStationStatus(maybeStatus: Option[StationStatus]): String = {\n  maybeStatus.fold(\"Unknown\")(s => s.statusDetail)\n}"}
{"id":"712288fe-d8a4-4380-9e23-a640bc6a782e","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def fetchFieldReport(fieldId: Int): FieldReport = {\n  val report = JavaMonitoringApi.getReport(fieldId)\n  if (report == null) new FieldReport(fieldId, \"No Data\") else report\n}"}
{"id":"6d21a559-4499-404c-88ba-02454e1d5217","timestamp":1746098204062,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def latestYieldMeasurement(yieldValue: java.lang.Double): Option[Double] =\n  Option(yieldValue).map(_.toDouble)"}
{"id":"09663352-26b7-4341-8177-b8e9728e67e1","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class SoilSample(moisture: Double, temperature: Double)\ndef getSoilSampleOrNone(sample: SoilSample | Null): Option[SoilSample] =\n  Option(sample)"}
{"id":"2f37ca44-659b-4611-a71f-6d3e3517f02f","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def retrieveRainfallMeasurement(sensor: RainfallSensor): Option[Double] =\n  Option(sensor.getLatestMeasurement)\n    .filter(_ >= 0)"}
{"id":"2bc8774a-c53c-4989-80fe-16dc5963fd64","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def cropHealthStatus(status: String | Null): Option[String] =\n  Option(status).map(_.toUpperCase)"}
{"id":"50c36e3f-893b-40f0-87be-fc725f9b45be","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"case class CropLocation(fieldId: String, latitude: Double, longitude: Double)\ndef safeCropLocationLookup(fieldId: String): Option[CropLocation] =\n  Option(JavaCropDB.findLocation(fieldId))"}
{"id":"a24da617-99d5-4f95-b79b-2964004330c4","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def sensorBatteryLevel(sensor: FieldSensor): Option[Int] =\n  Option(sensor.batteryLevel)\n    .filter(_ > 5)"}
{"id":"00b8f749-c141-45a7-9f86-e03173d99103","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def getLatestIrrigationEvent(field: IrrigationField): Option[IrrigationEvent] =\n  Option(field.lastIrrigationEvent)\n    .filter(_.durationMinutes > 0)"}
{"id":"2761f349-782c-4582-915a-744465242884","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def safeFertilizerDosage(kg: java.lang.Double | Null): Option[Double] =\n  Option(kg).map(_.doubleValue).filter(_ > 0)"}
{"id":"38978889-9d85-49ea-a954-669b4dcf5cbe","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def safeWeatherAlert(alert: WeatherAlert | Null): Option[WeatherAlert] =\n  Option(alert)\n    .filter(a => a.severity != \"LOW\")"}
{"id":"552e2a62-fb08-4296-ba02-aa85210bd550","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def getHarvestPrediction(yieldEstimator: YieldEstimator): Option[Double] =\n  Option(yieldEstimator.predictHarvest)\n    .filter(_ > 0)"}
{"id":"9fbf1867-1bf6-4220-beec-b6693f45fe5e","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":true,"code":"def safeCropGrowthStage(stage: CropStage | Null): Option[CropStage] =\n  Option(stage)"}
{"id":"1aafb0dc-43aa-4993-89d3-b6c275b9b479","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getSoilPhLevel(sample: SoilSample): Double =\n  if (sample != null && sample.ph != null) sample.ph.doubleValue else -1.0"}
{"id":"06eb9fa3-99ef-4136-9509-fbfa5e9e1796","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getPlantDiseaseReport(field: CropField): String =\n  val report = field.retrieveLatestDiseaseReport()\n  if (report != null) report else \"No disease report available\""}
{"id":"89ebf1d6-aaaf-4556-9178-98a23c3a6df0","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def fetchSatelliteImage(fieldId: String): SatelliteImage =\n  val img = ExternalSatelliteService.getImageOrNull(fieldId)\n  if (img != null) img else null"}
{"id":"6f3073ea-cfe0-4b68-8d52-4b481ddf9fef","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def pesticideUsageSummary(season: String): String =\n  val summary = PesticideAnalyticsService.getSummary(season)\n  if (summary == null) \"Summary unavailable\" else summary"}
{"id":"d6228f19-76e3-429f-8941-583d030af057","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def soilTemperatureValue(sensor: SoilTempSensor): java.lang.Double =\n  val temp = sensor.readTemperature\n  if (temp != null) temp else null"}
{"id":"841f3309-e376-41be-ba0c-6da22dd369f3","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def irrigationHistory(field: CropField): IrrigationRecord =\n  val history = field.getLatestIrrigationRecord\n  if (history != null) history else null"}
{"id":"f533d406-904b-4a83-8dbb-7f1472991880","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def getNextCropRotation(plan: RotationPlan): CropVariety =\n  val variety = plan.suggestNextVariety\n  if (variety == null) null else variety"}
{"id":"91923eed-24d1-4ac9-afdf-d50376a09067","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def monitorSensorHealth(sensor: FieldSensor): String =\n  if (sensor == null) \"No sensor available\"\n  else if (sensor.status == null) \"Unknown status\"\n  else sensor.status"}
{"id":"634affc9-901a-4bbb-9710-5f115f3288d6","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def retrieveCropImage(cropId: String): Array[Byte] =\n  val image = CropImageRepository.getCropImageOrNull(cropId)\n  if (image != null) image else null"}
{"id":"021b8a79-6904-448f-8cbe-cfd2888c3c9b","timestamp":1746098217710,"category":"null_checks","topicUsed":"Agricultural crop monitoring","isIdiomatic":false,"code":"def lastWeatherAlert(farmId: String): WeatherAlert =\n  val alert = WeatherAlertService.getLatestAlertForFarm(farmId)\n  if (alert != null) alert else null"}
{"id":"b7968502-62c9-43c0-9bb5-17b571a48e83","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"case class TemperatureSensorReading(deviceId: String, temperature: Double)\ndef extractTemperature(reading: TemperatureSensorReading | Null): Double = {\n  if (reading != null) reading.temperature else 0.0\n}"}
{"id":"dd6f0946-ba94-4a83-87fb-31a57fda5cff","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class HumidityAggregator {\n  var lastUpdate: java.util.Date = null\n  def updateTimestamp(newTimestamp: java.util.Date): Unit = {\n    if (newTimestamp != null) {\n      lastUpdate = newTimestamp\n    }\n  }\n}"}
{"id":"68f64ce4-5f90-416c-b5e6-cb6a816c29a3","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def mergeSensorIds(primary: String, secondary: String): String = {\n  if (primary != null) primary else if (secondary != null) secondary else null\n}"}
{"id":"5b036ba0-547d-49ca-ad78-cc46c035af5f","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def averagePressure(readings: Array[Double]): java.lang.Double = {\n  if (readings != null && readings.nonEmpty) readings.sum / readings.length else null\n}"}
{"id":"4c87d909-ca7b-460b-9282-4101c37dbc87","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class LocationAggregator {\n  private var latestLocation: String = null\n  def setLocation(location: String): Unit = {\n    if (location != null) {\n      latestLocation = location\n    }\n  }\n  def getLocation: String = latestLocation\n}"}
{"id":"e368da52-8a0a-435e-b2c1-8fccda7426e2","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"object SensorBatchProcessor {\n  def firstAvailableReading(readings: Array[String]): String = {\n    if (readings != null && readings.nonEmpty) {\n      readings.find(_ != null).getOrElse(null)\n    } else null\n  }\n}"}
{"id":"d34adb83-1a2f-4345-a38a-c1f6f7c7e539","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def combineLightLevels(sensorA: java.lang.Integer, sensorB: java.lang.Integer): java.lang.Integer = {\n  if (sensorA != null && sensorB != null) sensorA + sensorB else null\n}"}
{"id":"9ff39fa6-287b-41a0-b704-66f51bff8221","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def getLatestMotion(sensorReadings: List[String]): String = {\n  if (sensorReadings != null && sensorReadings.nonEmpty) sensorReadings.last else null\n}"}
{"id":"06581ba3-b98d-4f7e-945c-51ac0a33de28","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class SensorCluster {\n  var sensorNodes: Array[String] = null\n  def addNode(nodeId: String): Unit = {\n    if (sensorNodes == null) {\n      sensorNodes = Array(nodeId)\n    } else {\n      sensorNodes = sensorNodes :+ nodeId\n    }\n  }\n}"}
{"id":"62f2a93b-799f-4ef7-baaf-595b12e5bfb8","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def retrieveAggregatedEnergy(energyRecord: AnyRef): Double = {\n  if (energyRecord != null) {\n    energyRecord.hashCode.toDouble\n  } else 0.0\n}"}
{"id":"4bafb99f-89dd-4a16-8932-cc8a3beb170f","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class TemperatureSensorReading(deviceId: String, temperature: Double)\ndef extractTemperature(reading: TemperatureSensorReading | Null): Option[Double] = {\n  Option(reading).map(_.temperature)\n}"}
{"id":"bb586e92-65d6-4af1-9ff4-22894e9a5126","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def safeHumidityAverage(values: Seq[Double] | Null): Option[Double] = {\n  Option(values).filter(_.nonEmpty).map(l => l.sum / l.size)\n}"}
{"id":"c6ac714c-4607-48d6-a413-86cce02a5b26","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def locationOption(location: String): Option[String] =\n  Option(location).filter(_.nonEmpty)"}
{"id":"9392ea61-1f8e-44e1-ae93-5fc5a737678f","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class EnergySample(sensorId: String, energy: Double)\ndef aggregateEnergy(samples: List[EnergySample]): Option[Double] = {\n  Option(samples).filter(_.nonEmpty).map(_.map(_.energy).sum)\n}"}
{"id":"3c2b42e3-243a-4677-8ecf-a0c106a9c0de","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def safeLightReading(raw: String | Null): Option[Int] = Option(raw).flatMap(l => l.toIntOption)"}
{"id":"263b7812-5b42-4ab1-8b86-85dd0595509f","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"object MotionDetector {\n  def latestMotion(sensorIds: List[String]): Option[String] = {\n    sensorIds.lastOption\n  }\n}"}
{"id":"de494c92-e995-4398-9bed-4547769a7382","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def clusterNodesOption(nodes: Array[String] | Null): Option[Array[String]] = Option(nodes)"}
{"id":"0e9e6abf-4d52-4fc3-985a-741d11715088","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def aggregatePressure(pressures: Seq[Double]): Option[Double] =\n  if pressures.isEmpty then None else Some(pressures.sum / pressures.size)"}
{"id":"0c7d8382-ad11-475b-85ce-8c11e5e3bfa4","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def latestCO2Level(levels: List[Option[Double]]): Option[Double] = {\n  levels.reverse.collectFirst { case Some(level) => level }\n}"}
{"id":"4d6142d9-9c16-46a5-8a4f-ef7bc4f2210e","timestamp":1746098230330,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def mergedSensorIds(primary: Option[String], secondary: Option[String]): Option[String] = {\n  primary orElse secondary\n}"}
{"id":"00b5a534-e9ad-48ae-a626-2186fc50c97f","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"case class SensorReading(sensorId: String, value: Double)\ndef extractTemperature(reading: SensorReading | Null): Double = {\n  if (reading == null) -999.0 else reading.value\n}"}
{"id":"759e3bd8-6f0c-4099-acb6-d8636eca1416","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"object LegacySensorApi {\n  def fetchHumidity(sensorLocation: String): java.lang.Double = null\n}\ndef getHumidityOrDefault(sensorLocation: String): Double = {\n  val humidity = LegacySensorApi.fetchHumidity(sensorLocation)\n  if (humidity != null) humidity else 0.0\n}"}
{"id":"358d174d-fc9e-48ca-bc78-ba276bb8581b","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class SensorAggregator {\n  def findLatestReading(readings: Array[SensorReading]): SensorReading = {\n    if (readings != null && readings.nonEmpty) readings.maxBy(_.value) else null\n  }\n}"}
{"id":"d1ac3487-a12f-4ded-b27e-c19e4a657ede","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def parseMotionEvent(rawEvent: java.lang.String): MotionSensorEvent = {\n  if (rawEvent == null) null else MotionSensorEvent(rawEvent)\n}"}
{"id":"13295e46-0c55-4df6-810a-2f4c7212b194","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def getSensorData(sensorInterface: SensorInterface): SensorPacket = {\n  val packet = sensorInterface.poll()\n  if (packet == null) new SensorPacket(\"unknown\", 0L, -1.0) else packet\n}"}
{"id":"19c9749d-e2fb-4624-a2cd-a8b14afca03d","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def retrievePressure(sensorId: String): java.lang.Double = null\ndef computePressureDiff(pressure1: java.lang.Double, pressure2: java.lang.Double): Double = {\n  if (pressure1 != null && pressure2 != null) pressure1 - pressure2 else 0.0\n}"}
{"id":"1ad355fb-413c-465f-a030-d001b19a6207","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"class IoTGateway {\n  def forwardReading(reading: SensorReading): String = {\n    if (reading == null) \"No Data\" else s\"Forwarded: ${reading.sensorId}\"\n  }\n}"}
{"id":"9d98b9c5-a0ed-4252-9f03-401fba156bc9","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def updateSensorMap(sensorMap: java.util.Map[String, java.lang.Double],\n                    sensorKey: String, value: java.lang.Double): Unit = {\n  if (sensorMap != null && sensorKey != null)\n    sensorMap.put(sensorKey, value)\n}"}
{"id":"667b2423-a355-4be0-ad4b-f7d7a42d0868","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def concatLocations(loc1: String, loc2: String): String = {\n  if (loc1 == null) loc2\n  else if (loc2 == null) loc1\n  else loc1 + \",\" + loc2\n}"}
{"id":"d5fd2ee3-a431-4b42-adaf-6aa0cddca806","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":false,"code":"def calibrateReading(calibrator: Calibrator | Null, \n                     input: SensorPacket): SensorPacket | Null = {\n  if (calibrator == null) null else calibrator.calibrate(input)\n}"}
{"id":"f63919ae-afee-411e-8b62-587b6ac88a88","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"case class SensorPacket(sensorId: String, timestamp: Long, measurement: Double)\nobject SensorUtils:\n  def optionalReading(reading: SensorPacket | Null): Option[SensorPacket] = Option(reading)"}
{"id":"cd316cc7-5cc7-4282-9730-98097dfe0546","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def meanTemperature(readings: Seq[TemperatureSample]): Option[Double] = {\n  val valid = readings.filter(_.value != null)\n  if valid.nonEmpty then Some(valid.map(_.value).sum / valid.size)\n  else None\n}"}
{"id":"e9432abe-40e7-498c-8588-8b7a8414f5c7","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def safeHumidity(rawHumidity: java.lang.Double): Option[Double] = Option(rawHumidity)\ndef formatHumidity(reading: Option[Double]): String = {\n  reading.fold(\"No data\")(h => f\"$h%.2f%%\")\n}"}
{"id":"d3723b44-05ff-41e3-8e03-4196a11b9318","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def findMaxPressure(samples: List[PressureData]): Option[Double] =\n  samples.map(_.pressure).reduceOption(_ max _)\n"}
{"id":"400980cd-b547-4c73-b8a6-741d3f7fd6f3","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def aggregateActiveSensors(stations: Seq[StationReading]): Option[Int] =\n  Option(stations).filter(_.nonEmpty).map(_.count(_.isActive))\n"}
{"id":"27ac3dee-bcd3-48f8-b1a2-cd8d9149a7df","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def lastMotionEvent(events: Seq[MotionSensorEvent]): Option[MotionSensorEvent] = {\n  events.lastOption\n}"}
{"id":"af621aec-3177-4872-a77e-cfa5f91bb95e","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def safeSensorName(maybeName: String | Null): Option[String] = Option(maybeName)\ndef displaySensorName(optName: Option[String]): String =\n  optName.getOrElse(\"Unnamed Sensor\")"}
{"id":"08adb27e-a983-43ef-93e6-fdb75296b7e2","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def validReadingCount(values: Seq[Option[Double]]): Int =\n  values.count(_.exists(_ > 0.0))\n"}
{"id":"91f219fd-d80e-4e8a-a03c-89331f6aae24","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def mergeReadings(a: Option[SensorPacket], b: Option[SensorPacket]): Option[SensorPacket] =\n  a.orElse(b)\n"}
{"id":"6b186004-a604-4ad5-8626-799bc56ecf71","timestamp":1746098249396,"category":"null_checks","topicUsed":"IoT sensor data aggregation","isIdiomatic":true,"code":"def filterValidTemperatures(temperatures: List[Option[Double]]): List[Double] =\n  temperatures.flatten\n"}
{"id":"831aa3f9-ed3c-407b-8535-626b4293578c","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class BusStop(id: Int, name: String, connections: List[Int])\ndef findNextStop(route: List[BusStop], currentStopId: Int): Option[BusStop] =\n  route.find(_.id == currentStopId).flatMap { stop =>\n    stop.connections.headOption.flatMap(nextId => route.find(_.id == nextId))\n  }"}
{"id":"bbd5b916-d275-41d5-9c4f-ecbf81d95566","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getTrainArrivalTime(schedule: java.util.Map[String, String], station: String): String = {\n  val arrival = schedule.get(station)\n  if (arrival != null) arrival else \"No data\"\n}"}
{"id":"e875d23b-1b12-4037-a6fa-a5e596174980","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def safeTransferConnection(conn: String): Option[String] =\n  Option(conn).filter(_.startsWith(\"Transfer\"))"}
{"id":"111cd916-0c5c-43af-9ecd-b7f42c6de6b3","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def fetchBusRouteById(routeId: Int): Route = {\n  val possibleRoute = JavaRouteService.findRouteById(routeId)\n  if (possibleRoute != null) possibleRoute else null\n}"}
{"id":"034a9b5a-59ad-40b7-bc08-4ee77458188f","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def safeHeadwayValue(headway: java.lang.Integer): Option[Int] =\n  Option(headway).map(_.intValue)"}
{"id":"e1b7a2da-1d81-49b2-a3b6-6c6a85da4b59","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getStopNameIfNotNull(busStop: BusStop): String = {\n  if (busStop != null) busStop.name else \"Unknown stop\"\n}"}
{"id":"28645f35-996a-4fc7-9465-9a26c2023444","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def wrapNullableTrain(train: Train): Option[Train] =\n  Option(train).filter(_.status == \"OnTime\")"}
{"id":"9aa6cdbb-d2ef-4d05-9526-437e94c87da1","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def checkStationCode(station: Station): Boolean = {\n  if (station != null) station.code.matches(\"[A-Z]{3}\") else false\n}"}
{"id":"a7a0a76c-70ad-42d5-900d-9566e6044bd6","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def findEarliestDeparture(departures: List[Option[Departure]]): Option[Departure] =\n  departures.flatten.sortBy(_.time).headOption"}
{"id":"b2d28711-cade-4c0f-9b0a-ba9c5e1230cd","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def routeDescriptionOrNone(route: Route): Option[String] =\n  Option(route).map(_.description)"}
{"id":"33b28677-5790-47a1-8dbe-f787de2b10b5","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getFirstTransfer(stopList: java.util.List[Station]): Station = {\n  val first = if (stopList != null && !stopList.isEmpty) stopList.get(0) else null\n  if (first != null && first.isTransfer) first else null\n}"}
{"id":"4bf6ea83-1eba-45d6-926d-4ceb8d87a467","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def safeGetStationSchedule(schedule: java.util.Map[String, java.util.List[String]], station: String): Option[List[String]] =\n  Option(schedule.get(station)).map(_.toArray.toList.map(_.toString))"}
{"id":"5acfd7de-2415-4320-be6e-5c7b18074d83","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getConnectionIfPresent(connection: Connection): String = {\n  if (connection != null) connection.route else \"No connection\"\n}"}
{"id":"2053d95d-7465-431c-b940-0f33c663a1cc","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def maybeActiveBus(bus: java.lang.String): Option[String] =\n  Option(bus).filter(_.nonEmpty)"}
{"id":"bb009c93-ad43-4ca6-9fd6-d6d84b870c66","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def isTramActive(tram: Tram): Boolean = {\n  if (tram != null && tram.status == \"Active\") true else false\n}"}
{"id":"d2fff7e4-8219-4707-a053-6f79f67ba3c0","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def getBusByNumber(buses: List[Option[Bus]], number: String): Option[Bus] =\n  buses.collect { case Some(bus) if bus.number == number => bus }.headOption"}
{"id":"a82b8aee-73ff-422f-997d-eeed6067e4d2","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def displayDeparture(departure: Departure): Unit = {\n  if (departure != null) println(departure.time) else println(\"No departure info\")\n}"}
{"id":"610caeeb-af4f-4eb3-bd62-f576a99b7902","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def passengerCountOrZero(count: java.lang.Integer): Int =\n  Option(count).fold(0)(_.intValue)"}
{"id":"73715d95-556c-4be5-8074-e3218a4fef88","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def tripStatusOrDelayed(trip: Trip): String = {\n  if (trip != null && trip.status != null) trip.status else \"Delayed\"\n}"}
{"id":"c88a906d-ce0a-43db-bace-bc06cd74c318","timestamp":1746098261682,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class StopTime(station: String, time: Option[String])\ndef formatStopTime(stopTime: StopTime): String =\n  stopTime.time.getOrElse(\"Time unavailable\")"}
{"id":"3880d100-35a2-45c2-8d8b-1454e415e9aa","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"case class Station(name: String, latitude: Double, longitude: Double)\ndef getTransferStation(connection: AnyRef): Station = {\n  if (connection != null) connection.asInstanceOf[Station]\n  else null\n}"}
{"id":"488bb0a7-7e44-477d-ba1c-e49bdc69eb05","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def findNextBus(routeSchedule: Array[String], currentTime: String): String = {\n  for (time <- routeSchedule) {\n    if (time != null && time > currentTime) return time\n  }\n  null\n}"}
{"id":"2ab7339d-417c-4f61-960b-bc43f52d291e","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Journey(val start: Station, val end: Station, val duration: Integer)\ndef totalDuration(journey: Journey): Int = {\n  if (journey != null && journey.duration != null) journey.duration\n  else 0\n}"}
{"id":"e4b69129-d715-4137-ac22-bffddd4d2f4b","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getPlatform(arrivalInfo: java.util.Map[String, String], stationName: String): String = {\n  val platform = arrivalInfo.get(stationName)\n  if (platform != null) platform\n  else \"No platform info\"\n}"}
{"id":"7ee56891-3135-429c-a913-564bc3e3fc2d","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def setLastCheckpoint(tripLog: java.util.Map[String, String], checkpoint: String): Unit = {\n  if (tripLog != null && checkpoint != null) {\n    tripLog.put(\"lastCheckpoint\", checkpoint)\n  }\n}"}
{"id":"13d46ec2-3ecb-4d6e-89d9-b213e0cef4a2","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getBusByLicense(licenseMap: java.util.Map[String, Bus], license: String): Bus = {\n  if (license != null) {\n    val bus = licenseMap.get(license)\n    if (bus != null) bus else null\n  } else null\n}"}
{"id":"b3d5cb7a-cdde-42bc-a10f-774d5b5a769a","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def printRouteName(route: TransitRoute): Unit = {\n  if (route != null && route.name != null) {\n    println(route.name)\n  }\n}"}
{"id":"79655a32-5efc-48bd-a53d-7f183dd1d626","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def getArrivalTime(schedule: java.util.Map[String, String], stopId: String): String = {\n  val at = schedule.get(stopId)\n  if (at != null) at else \"Unknown\"\n}"}
{"id":"cd4af479-f302-4bcf-bc72-550326ecc68a","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"class Rider(val id: Int, var favoriteStation: Station)\ndef resetFavorite(rider: Rider): Unit = {\n  if (rider != null) rider.favoriteStation = null\n}"}
{"id":"8cbd1743-8d57-40c9-b08e-ac8e0587fb62","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":false,"code":"def displayConnectionDetails(connection: Connection): Unit = {\n  if (connection != null) {\n    println(s\"From: ${connection.fromStation}\")\n    println(s\"To: ${connection.toStation}\")\n  }\n}"}
{"id":"1fc4d3eb-826b-4522-a714-9343529623d4","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class Station(name: String, latitude: Double, longitude: Double)\ndef safeStationName(station: Station): Option[String] = Option(station).map(_.name)"}
{"id":"19083b44-ea2a-47e8-9648-452a1c7804ce","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def nextDeparture(optTimes: Option[List[String]], after: String): Option[String] =\n  optTimes.flatMap(_.find(_ > after))"}
{"id":"f72ef067-0784-452a-82cb-680798bd2cc6","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class RouteSegment(routeName: String, from: Station, to: Station)\ndef firstSegmentName(route: List[RouteSegment]): Option[String] =\n  route.headOption.map(_.routeName)"}
{"id":"7b675e27-b9c4-49c4-85a9-2e7916b45d03","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def safePlatform(platform: String): Option[String] = Option(platform)\ndef platformMessage(platformOpt: Option[String]): String =\n  platformOpt.getOrElse(\"Platform info unavailable\")"}
{"id":"997a53e9-b9a6-4dce-887f-08efedc4a66c","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def lastCheckpoint(tripLog: Option[Map[String, String]]): Option[String] =\n  tripLog.flatMap(_.get(\"lastCheckpoint\"))"}
{"id":"5e784561-5672-4ba1-82af-1f18f817230c","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def findBusByLicense(licenseMap: Map[String, Bus], license: Option[String]): Option[Bus] =\n  license.flatMap(licenseMap.get)"}
{"id":"bc266d21-8602-463d-adf6-655ed71587a8","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class TransitRoute(name: String, lineColor: String)\ndef lineColorOf(route: Option[TransitRoute]): String =\n  route.map(_.lineColor).getOrElse(\"Unknown\")"}
{"id":"a63ffd88-4406-4c80-b062-6363aacb922a","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"def arrivalTime(schedule: Map[String, String], stopId: Option[String]): Option[String] =\n  stopId.flatMap(schedule.get)"}
{"id":"40de1b18-63d8-4374-808a-dee2cfd118f8","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class Rider(id: Int, favoriteStation: Option[Station])\ndef favoriteExists(rider: Rider): Boolean = rider.favoriteStation.isDefined"}
{"id":"f742f4f5-d636-4a5f-8e5d-4dce598012e5","timestamp":1746098288454,"category":"null_checks","topicUsed":"Public transit route planning","isIdiomatic":true,"code":"case class Connection(fromStation: String, toStation: String)\ndef displayConnection(conn: Option[Connection]) = \n  conn.fold(println(\"No connection\")) { c =>\n    println(s\"From: ${c.fromStation}, To: ${c.toStation}\")\n  }"}
{"id":"55715097-c242-4d6a-85b7-c3f746305a23","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object InventoryLookup {\n  def findProductName(barcode: String): Option[String] = {\n    val rawName = simulateLegacyProductNameLookup(barcode)\n    Option(rawName)\n  }\n  def simulateLegacyProductNameLookup(barcode: String): String = {\n    if (barcode == \"12345\") \"Milk\" else null\n  }\n}\n"}
{"id":"4f32e03d-2278-4138-aed4-32bfb14e0330","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class DiscountCalculator {\n  def calculateDiscountAmount(amount: Double, loyaltyCardId: String): Double = {\n    val discountRate = getDiscountRateFromLegacy(loyaltyCardId)\n    if (discountRate != null) amount * discountRate else 0.0\n  }\n\n  def getDiscountRateFromLegacy(cardId: String): java.lang.Double = {\n    if (cardId == \"L123\") 0.05 else null\n  }\n}\n"}
{"id":"feab547c-be6d-437d-b124-6d90d6c7f6bc","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class POSUser(id: String, name: String)\nobject UserRetriever {\n  def retrieveUser(userId: String): Option[POSUser] = {\n    Option(legacyUserFetch(userId)).map { userData =>\n      val parts = userData.split(\"-\")\n      POSUser(parts(0), parts(1))\n    }\n  }\n  def legacyUserFetch(userId: String): String = if (userId == \"U999\") null else s\"$userId-Jamie\"\n}\n"}
{"id":"280e1a5c-76d9-4985-b878-da02ab889f40","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object Storefront {\n  def getStoreManagerName(storeId: String): String = {\n    val managerName = legacyGetManagerName(storeId)\n    if (managerName == null) \"Unknown Manager\" else managerName\n  }\n  def legacyGetManagerName(id: String): String = {\n    if (id == \"S1\") \"Pat Lee\" else null\n  }\n}\n"}
{"id":"6901f8a4-02db-4df2-a40d-d19a908896d2","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object OrderCommentExtractor {\n  def orderCommentToUpper(orderId: String): Option[String] = {\n    Option(retrieveOrderCommentLegacy(orderId)).map(_.toUpperCase)\n  }\n  def retrieveOrderCommentLegacy(orderId: String): String = {\n    if (orderId == \"O357\") \"Handle with care\" else null\n  }\n}\n"}
{"id":"aa844e27-1a64-4df7-a6d2-f50a52d0d848","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object TerminalScanner {\n  def getLastScannedBarcode(terminalId: String): String = {\n    val barcode = legacyScanFetch(terminalId)\n    if (barcode == null) \"NO_BARCODE\" else barcode\n  }\n  def legacyScanFetch(terminalId: String): String = {\n    if (terminalId == \"T200\") \"9876543210\" else null\n  }\n}\n"}
{"id":"2b6583d7-8b37-4dbf-a831-2e28dff755dc","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object OptionBasedCashDrawer {\n  def openDrawerIfConnected(drawerId: String): Boolean = {\n    Option(legacyDrawerStatus(drawerId)).exists(_ == \"CONNECTED\")\n  }\n  def legacyDrawerStatus(drawerId: String): String = if (drawerId == \"CD1\") \"CONNECTED\" else null\n}\n"}
{"id":"0c39e374-0ffa-4e4a-bb5d-b57cbdaa4572","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object ReceiptPrinter {\n  def getPrinterQueue(printerId: String): String = {\n    val queue = fetchPrinterQueueLegacy(printerId)\n    if (queue != null) queue else \"DEFAULT_QUEUE\"\n  }\n  def fetchPrinterQueueLegacy(id: String): String = if (id == \"P301\") \"Q1\" else null\n}\n"}
{"id":"06fc924f-728f-4585-93b6-b73c140f63a4","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object OptionTransactionNote {\n  def fetchNoteOrDefault(transactionId: String): String = {\n    Option(legacyTransactionNote(transactionId)).getOrElse(\"No note\")\n  }\n  def legacyTransactionNote(transactionId: String): String = {\n    if (transactionId == \"T555\") \"Manual override\" else null\n  }\n}\n"}
{"id":"c1d21999-3c08-41fc-b769-90886a305eb1","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object PaymentProcessor {\n  def processPayment(amount: Double, method: String): String = {\n    val response = javaStylePaymentMethod(amount, method)\n    if (response == null) \"FAILED\" else response\n  }\n  def javaStylePaymentMethod(amount: Double, method: String): String = {\n    if (method == \"CARD\") \"APPROVED\" else null\n  }\n}\n"}
{"id":"4b6eea28-f620-413e-a8b9-a4ce2619fe36","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object SaleTimeParser {\n  def parseSaleTime(cashRegisterId: String): Option[java.time.LocalTime] = {\n    Option(legacyGetSaleTime(cashRegisterId)).map(java.time.LocalTime.parse)\n  }\n  def legacyGetSaleTime(registerId: String): String = if (registerId == \"CR12\") \"09:45:00\" else null\n}\n"}
{"id":"7724fa1c-0e40-426a-a1a9-1e52ea53135a","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class ItemDescriptionService {\n  def getItemDescription(id: String): String = {\n    val desc = fetchLegacyDescription(id)\n    if (desc == null) \"Unavailable\" else desc\n  }\n  def fetchLegacyDescription(id: String): String = if (id == \"I77\") \"Coffee Mug\" else null\n}\n"}
{"id":"b93fa943-4df1-46d8-812c-1ccf23173fa8","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class LoyaltyMember(memberId: String, points: Int)\nobject LoyaltyInfo {\n  def fetchMemberPoints(memberId: String): Option[LoyaltyMember] = {\n    Option(legacyMemberPoints(memberId)).map(points => LoyaltyMember(memberId, points))\n  }\n  def legacyMemberPoints(memberId: String): java.lang.Integer = if (memberId == \"M321\") 4000 else null\n}\n"}
{"id":"d0bf2226-85d1-48e4-8078-5e9d444f9ab9","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object GiftCardSystem {\n  def deactivateIfNull(cardId: String): Boolean = {\n    val status = legacyGiftCardStatus(cardId)\n    if (status == null) false else (status == \"ACTIVE\")\n  }\n  def legacyGiftCardStatus(cardId: String): String = {\n    if (cardId == \"GC12\") \"ACTIVE\" else null\n  }\n}\n"}
{"id":"3f1bee34-98e9-4c3e-ab1f-90b7f7b8c651","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object RefundReasonHelper {\n  def getRefundReasonUpper(orderId: String): Option[String] = {\n    Option(fromLegacySystem(orderId)).map(_.toUpperCase)\n  }\n  def fromLegacySystem(orderId: String): String = if (orderId == \"REF10\") \"customer request\" else null\n}\n"}
{"id":"df309ee8-fa47-4c10-a183-0ac8821dbdf9","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object CashierReport {\n  def assignReportNull(cashierId: String): String = {\n    if (cashierId == \"C204\") \"ReportReady\" else null\n  }\n  def isReportReady(cashierId: String): Boolean = {\n    val report = assignReportNull(cashierId)\n    if (report != null) true else false\n  }\n}\n"}
{"id":"16acdf0d-3abf-42bb-94b1-18a14cf258c1","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object OptionBarcodeLookup {\n  def findBarcodePrefix(productName: String): Option[String] = {\n    Option(legacyBarcodeFromName(productName)).filter(_.startsWith(\"A\"))\n  }\n  def legacyBarcodeFromName(name: String): String = if (name == \"Apple\") \"A111\" else null\n}\n"}
{"id":"bbee2073-440d-4bc4-9f04-6e7e246ae6da","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object LedgerUpdater {\n  def updateLedger(entryId: String): Unit = {\n    val legacyValue = fetchLegacyLedgerEntry(entryId)\n    if (legacyValue == null)\n      throw new Exception(\"Entry missing\")\n    println(s\"Ledger updated: $legacyValue\")\n  }\n  def fetchLegacyLedgerEntry(entryId: String): String = if (entryId == \"E111\") \"stockin\" else null\n}\n"}
{"id":"3cb7e205-b957-4282-ba7d-7f0db7d0893d","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object CashDrop {\n  def checkDropAmount(safeId: String): Option[Int] = {\n    Option(oldDropLookup(safeId)).map(Integer.parseInt)\n  }\n  def oldDropLookup(safeId: String): String = if (safeId == \"SAFE7\") \"250\" else null\n}\n"}
{"id":"b82d5535-901b-4b34-a054-a12679b7c535","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object ExpiredCouponRemover {\n  def removeCoupon(couponCode: String): Boolean = {\n    val flag = simulateJavaCouponRemove(couponCode)\n    if (flag == null) false else flag\n  }\n  def simulateJavaCouponRemove(couponCode: String): java.lang.Boolean = if (couponCode == \"C100\") true else null\n}\n"}
{"id":"814038c1-8702-443b-a191-1a442cb419c8","timestamp":1746098320040,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object OptionTerminalIdChecker {\n  def validateTerminalId(terminalId: String): Boolean = {\n    Option(terminalIdFromLegacy(terminalId)).exists(_.startsWith(\"T\"))\n  }\n  def terminalIdFromLegacy(input: String): String = if (input == \"T123\") \"T123\" else null\n}\n"}
{"id":"183c1422-abec-4395-9e92-35ac58507e72","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"case class Receipt(orderTotal: Double, paymentType: String)\ndef validateReceipt(receipt: Receipt | Null): Boolean =\n  if (receipt == null) false\n  else receipt.orderTotal > 0"}
{"id":"0979d84c-61c0-4d0f-9f4b-c98014173162","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class PaymentGateway {\n  def findTransactionById(transactionId: String): String | Null =\n    if transactionId == \"T100\" then \"APPROVED-T100\" else null\n}\ndef getTransactionStatus(transactionId: String): String = {\n  val gateway = PaymentGateway()\n  val status = gateway.findTransactionById(transactionId)\n  if (status == null) \"UNKNOWN\" else status\n}"}
{"id":"d6d8c1f9-1a7e-49dd-87b0-185577cd59a0","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def lookupCashier(name: String): String | Null =\n  if name == \"Alex\" then \"C123\" else null\nval cashierCode = lookupCashier(\"Morgan\")\nif (cashierCode != null) println(\"Cashier code found: \" + cashierCode)\nelse println(\"No such cashier\")"}
{"id":"d3e8b637-fde9-4600-b887-aef8f52bb91e","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def scanBarcode(barcode: String): String | Null =\n  if barcode.length == 12 then \"ITEM-OK\" else null\nval result = scanBarcode(\"12345\")\nif (result == null) println(\"Barcode not recognized\")\nelse println(\"Scanned: \" + result)"}
{"id":"9cb9340f-e078-42e1-8d72-0c75a2eca233","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class DiscountProvider {\n  def getDiscountCode(level: Int): String | Null =\n    if level > 3 then \"DISC10\" else null\n}\nval discount = DiscountProvider().getDiscountCode(2)\nif (discount != null) println(\"Applying discount: \" + discount)\nelse println(\"No discount applied\")"}
{"id":"6af4ac4c-d45f-4ed2-8c5e-b977d06fd11c","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"object StoreTerminal {\n  def connectTerminal(terminalId: String): java.lang.Boolean =\n    if terminalId == \"POS-01\" then java.lang.Boolean.TRUE else null\n}\nval isConnected = StoreTerminal.connectTerminal(\"POS-99\")\nif (isConnected == null) println(\"Connection failed\")\nelse if (isConnected) println(\"Terminal is connected\")\nelse println(\"Terminal not connected\")"}
{"id":"86ea2f3f-e5d3-4eb4-bfe5-4bfcb915ee52","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def getLoyaltyPoints(customerId: String): Integer =\n  if customerId == \"GUEST\" then null else 200\nval loyalty = getLoyaltyPoints(\"GUEST\")\nif (loyalty == null) println(\"No loyalty points available\")\nelse println(\"Loyalty points: \" + loyalty)"}
{"id":"718e8606-fa0f-4dfe-a67f-10f12f1d477a","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"class VendorService {\n  def fetchVendorName(vendorCode: String): String | Null =\n    if vendorCode == \"VN-102\" then \"Best Supplies\" else null\n}\ndef printVendor(vendorCode: String) = {\n  val vendor = VendorService().fetchVendorName(vendorCode)\n  if (vendor == null) println(\"Vendor not found\")\n  else println(\"Vendor: \" + vendor)\n}\nprintVendor(\"VN-103\")"}
{"id":"fc5905e5-6e65-4788-9250-8f2c3ca23412","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def retrieveCouponByCode(coupon: String): java.lang.Double =\n  if coupon == \"SAVE5\" then 5.0 else null\nval value = retrieveCouponByCode(\"EXTRA10\")\nif (value == null) println(\"Invalid coupon\")\nelse println(\"Coupon value: $\" + value)"}
{"id":"367da2b0-ebfd-46cd-b871-7ba65318b391","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":false,"code":"def findInventory(itemCode: String): Int =\n  if itemCode == \"STOCK-OUT\" then null else 42\nval currentStock = findInventory(\"STOCK-OUT\")\nif (currentStock == null) println(\"Out of stock\")\nelse println(\"Stock: \" + currentStock)"}
{"id":"acd39a29-4448-4099-b4ec-c85f5c7d39fc","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"case class Receipt(orderTotal: Double, paymentType: String)\ndef safeReceiptTotal(receipt: Receipt | Null): Option[Double] =\n  Option(receipt).map(_.orderTotal)"}
{"id":"7924aca3-5b9e-4f87-808d-acb825c00989","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def safeLookupCashier(name: String): Option[String] =\n  Option(if name == \"Alex\" then \"C123\" else null)"}
{"id":"407f7c2d-5032-42d4-8100-1909ea5870e6","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def barcodeResult(barcode: String): Option[String] =\n  Option(if barcode.length == 12 then \"ITEM-OK\" else null)\nval outcome = barcodeResult(\"123456789012\")\nprintln(outcome.getOrElse(\"Barcode not recognized\"))"}
{"id":"58724156-a143-4011-ae73-de789a4cc84e","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"class DiscountOptionProvider {\n  def getDiscountCode(level: Int): Option[String] =\n    Option(if level > 3 then \"DISC10\" else null)\n}\nval discount = DiscountOptionProvider().getDiscountCode(5)\nprintln(discount.getOrElse(\"No discount\"))"}
{"id":"e86219aa-381e-4974-92cc-d109df70cefe","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"object TerminalStatus {\n  def tryConnectTerminal(terminalId: String): Option[Boolean] =\n    Option(if terminalId == \"POS-01\" then true else null)\n  def terminalMessage(id: String): String =\n    tryConnectTerminal(id).fold(\"Connection failed!\")(_ => \"Connected!\")\n}\nprintln(TerminalStatus.terminalMessage(\"POS-02\"))"}
{"id":"44413217-4a0b-4357-ab61-83e3ad7defa5","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def getSafeLoyaltyPoints(customerId: String): Option[Int] =\n  Option(if customerId == \"REGULAR\" then 200 else null)\nval points = getSafeLoyaltyPoints(\"REGULAR\")\nprintln(points.map(_ * 2).getOrElse(0))"}
{"id":"cffb741c-cc3b-48a6-9df6-10688b61d1cf","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def printVendorSafe(vendorCode: String): Unit = {\n  val vendorOption = Option(if vendorCode == \"VN-202\" then \"SuperMart\" else null)\n  vendorOption.fold(println(\"Vendor not found\"))(name => println(\"Vendor: \" + name))\n}\nprintVendorSafe(\"VN-203\")"}
{"id":"0645732b-e77d-47ff-8590-cc72b31424e4","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def findInventorySafe(itemCode: String): Option[Int] =\n  Option(if itemCode == \"IN-STOCK\" then 21 else null)\nval qtyMsg = findInventorySafe(\"IN-STOCK\") match\n  case Some(qty) => s\"Stock: $qty\"\n  case None => \"Out of stock\"\nprintln(qtyMsg)"}
{"id":"a93c318a-8e57-44b9-b41f-02edea244f57","timestamp":1746098350352,"category":"null_checks","topicUsed":"Retail point-of-sale integration","isIdiomatic":true,"code":"def retrieveCouponOption(coupon: String): Option[Double] =\n  Option(if coupon == \"SAVE10\" then 10.0 else null)\nprintln(retrieveCouponOption(\"NOPE\").getOrElse(0.0))"}
{"id":"2d16aa06-2391-4b4a-b92b-efc90953c8bb","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class LoanDetails(principal: Double, rate: Double, term: Int)\ndef safeLoadLoanDetails(input: LoanDetails | Null): Option[LoanDetails] = Option(input)"}
{"id":"db80b292-fe61-4b7a-89cd-5f1acc7b9db8","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def getInterestRateFromApi(creditScore: Int): java.lang.Double = if creditScore > 700 then 3.2 else null\nval maybeRate = Option(getInterestRateFromApi(720))\nmaybeRate.map(rate => rate * 2).getOrElse(0.0)"}
{"id":"5e95d899-e6f2-405c-93b2-e25033f28dc2","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def monthlyPayment(maybePrincipal: Option[Double], rate: Double, months: Int): Double =\n  maybePrincipal.map { principal =>\n    val monthlyRate = rate / 12 / 100\n    val denominator = 1 - math.pow(1 + monthlyRate, -months)\n    principal * monthlyRate / denominator\n  }.getOrElse(0.0)"}
{"id":"a1f729ef-68f2-4e50-8800-2835335db90d","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def applicantName(name: String | Null): Option[String] = Option(name)\napplicantName(null).getOrElse(\"Unnamed Applicant\")"}
{"id":"fddb8315-7049-4a4a-80ec-486b400b6aa3","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"val borrowerEmployment: Option[String] = Option(null)\nval employmentStatus = borrowerEmployment.fold(\"Unknown\")(_ + \" employed\")"}
{"id":"29a6f3b1-b7c0-47b4-b402-8dc5450085df","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def getCoApplicant(applicants: List[String]): Option[String] = applicants.lift(1)\nval coApp = getCoApplicant(List(\"Anna\", \"John\")).getOrElse(\"No Co-Applicant\")"}
{"id":"9a2d2a20-439f-478e-bfba-0763dbff9f76","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def validateDownPayment(payment: Double): Option[Double] = if payment > 0 then Some(payment) else None\nvalidateDownPayment(-25000).getOrElse(0.0)"}
{"id":"315755e5-74cf-4ff1-bca8-17d9afba8181","timestamp":1746098385123,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def findMortgagePlan(plans: List[String], preferred: String): Option[String] = plans.find(_ == preferred)\nfindMortgagePlan(List(\"Fixed\", \"ARM\"), \"Jumbo\").getOrElse(\"Default Plan\")"}
{"id":"90b2d891-3652-45de-bcdb-0f03fc4f02c5","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"val maybeInsuranceQuote: Option[Double] = Option(null)\ndef finalMonthlyPayment(base: Double): Double =\n  maybeInsuranceQuote.fold(base)(insurance => base + insurance)"}
{"id":"2fc2cf92-f2a3-45d5-8f7c-c5eb8b336692","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class MortgageApplication(id: String, verified: Boolean)\ndef maybeVerify(app: Option[MortgageApplication]): Option[MortgageApplication] =\n  app.filter(_.verified)\nmaybeVerify(Some(MortgageApplication(\"abc\", false)))"}
{"id":"824dca95-8855-4260-aa55-c50aa593e960","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def legacyGetRefinanceQuote(zip: String): String = null\nval quoteOption = Option(legacyGetRefinanceQuote(\"94105\"))\nquoteOption.getOrElse(\"No Quote Available\")"}
{"id":"d450f3e6-da64-486a-987b-70d36459bffd","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def coldCallList(list: List[String]): Option[List[String]] =\n  Option(list).filter(_.nonEmpty)\ncoldCallList(Nil).getOrElse(List(\"Default Prospect\"))"}
{"id":"6f221e74-5169-47a4-934e-513ece1920b5","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def getLoanOfficer(email: String): String = null\nval officerName = Option(getLoanOfficer(\"agent@bank.com\")).getOrElse(\"Unknown Officer\")"}
{"id":"1a0b80af-3a7c-47c2-a552-ada1f876b4dc","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"val systemNote: Option[String] = None\nsystemNote.getOrElse(\"No System Notes Present\")"}
{"id":"a8668095-3241-4bcd-b899-516d413c77bb","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def applicantAnnualIncome(possibleIncome: java.lang.Double): Option[Double] = Option(possibleIncome).map(_.toDouble)\napplicantAnnualIncome(null).fold(0.0)(identity)"}
{"id":"411e795d-fe1a-4010-aaa5-78fd20a60c05","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def applicantMiddleName(name: String | Null): Option[String] = Option(name)\napplicantMiddleName(\"Maria\").exists(_.startsWith(\"M\"))"}
{"id":"738c85da-d29b-464a-89ed-0cdfef6bd573","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def insuranceProvider(maybeProvider: Option[String]): String = maybeProvider.filter(_.nonEmpty).getOrElse(\"Provider Not Specified\")"}
{"id":"7a82a14d-23dc-4210-8784-5e4faf30ceb3","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def safeLoadBank(bank: String | Null): Option[String] = Option(bank).filter(_.nonEmpty)\nsafeLoadBank(null).getOrElse(\"Unnamed Bank\")"}
{"id":"604202fe-01e2-424a-9d9d-844c203d4a92","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def preferredContact(contact: Option[String]): String = contact.fold(\"No Contact Given\")(identity)"}
{"id":"c1a8c1a7-3d9a-4c8c-a41c-188d398deb54","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def isEligibleForAutoApproval(app: Option[MortgageApplication]): Boolean =\n  app.exists(a => a.verified && a.id.startsWith(\"A\"))"}
{"id":"56bd234e-3886-4a38-9951-c2788ec0b2f4","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageApi {\n  def fetchQuote(applicantId: String): String = null\n}\nval api = new MortgageApi\nval quote = if (api.fetchQuote(\"abc\") != null) api.fetchQuote(\"abc\") else \"No Quote\""}
{"id":"bd8b46e6-8188-4721-9df3-f56c367ab39b","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def getDownPaymentAmount(input: String): java.lang.Double = if (input == \"\") null else input.toDouble\nval dp = getDownPaymentAmount(\"0\")\nif (dp != null) dp else 0.0"}
{"id":"3d40b533-26fa-4eeb-9cf8-d675df453115","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def checkApplicationStatus(status: String): String = if (status != null) status else \"Status Unknown\""}
{"id":"7c7bad7e-0696-4114-a8a8-87e67c611992","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def refiOfferOrNull(score: Int): String = if (score < 650) null else \"Refinance Available\"\nval offer = refiOfferOrNull(600)\nif (offer == null) \"Not qualified\" else offer"}
{"id":"0d5c6436-bb5b-41f3-b8d9-60b80ae87acf","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def coSignerName(names: Array[String]): String = if (names != null && names.length > 1) names(1) else null"}
{"id":"7f1e4426-a898-4e97-8f91-168af06fe7cf","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"var lenderPhone: String = null\nif (lenderPhone == null) lenderPhone = \"000-000-0000\""}
{"id":"15e88ab1-0f97-47e5-9e0d-7c0cb3ec317a","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def contactCustomerService(ticket: String): String = null\nval custRep = if (contactCustomerService(\"TICK123\") != null) contactCustomerService(\"TICK123\") else \"Service Unavailable\""}
{"id":"d88cd103-8006-4836-a07b-9bc97c408460","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def parseRate(rate: String): java.lang.Double =\n  try rate.toDouble catch case _: Exception => null"}
{"id":"587ae344-fcb5-494e-9cbf-47bf05df7121","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def getApplicantIncomeOrNull(json: String): java.lang.Double = null\nval income = getApplicantIncomeOrNull(\"{}\"); if (income != null) income else -1"}
{"id":"e67772cc-285c-4704-9d61-0a831123b700","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def legacyLoanLookup(loanNumber: String): String = if (loanNumber == null) \"No Record\" else \"Record for \" + loanNumber"}
{"id":"fd4b7fc5-b3e9-418f-92bf-7ae4b23373cf","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"val homeValue: java.lang.Double = null\nval formatted = if (homeValue != null) homeValue.toString else \"Value Missing\""}
{"id":"cd1b31d8-6e66-4683-9ee8-f7fb9d3bcadf","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def riskNoticeOrNull(profile: Map[String, String]): String = null\nval notice = if (riskNoticeOrNull(Map.empty) == null) \"No Risks\" else riskNoticeOrNull(Map.empty)"}
{"id":"eaa27506-b16a-47b8-9544-ba3b52aa073d","timestamp":1746098385124,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def unresolvedLead(id: java.lang.Integer): String = if (id != null) s\"Lead $id resolved\" else \"Lead Unknown\""}
{"id":"a7375acb-249d-4a46-a659-2c05677bc6bf","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"case class LoanApplicant(name: String, annualIncome: Double)\ndef safeGetApplicantIncome(applicant: LoanApplicant): Option[Double] =\n  Option(applicant).map(_.annualIncome)"}
{"id":"52bf7652-9ad2-461d-8944-95e162cd3531","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def calculateMonthlyPayment(principal: Double, interestRate: Double, termYears: Int): Double =\n  val monthlyRate = interestRate / 12.0 / 100.0\n  val numberOfPayments = termYears * 12\n  principal * monthlyRate / (1 - Math.pow(1 + monthlyRate, -numberOfPayments))\n\ndef getMonthlyPayment(optPrincipal: Option[Double], optRate: Option[Double], optYears: Option[Int]): Option[Double] =\n  for\n    principal <- optPrincipal\n    rate <- optRate\n    years <- optYears\n  yield calculateMonthlyPayment(principal, rate, years)"}
{"id":"04e6ed5c-e409-4327-8f68-6f6d96a0ef3d","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def findPropertyValue(userInput: String): Option[Double] =\n  Option(userInput).filter(_.nonEmpty).map(_.toDoubleOption).flatten"}
{"id":"bace1497-8db9-488f-a428-11f517d42a70","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":true,"code":"def applicantNameLength(applicant: Option[LoanApplicant]): Int =\n  applicant.map(_.name.length).getOrElse(0)"}
{"id":"d07031c8-bc75-4ad9-b6c7-0593f201835b","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"class MortgageApplication(val applicantName: String, val loanAmount: Double)\n\ndef getApplicationFromLegacySystem(id: String): MortgageApplication =\n  if (id == \"\") null\n  else new MortgageApplication(\"Emily Clark\", 245000)\n\ndef printApplicantFromLegacy(id: String): Unit =\n  val app = getApplicationFromLegacySystem(id)\n  if (app != null)\n    println(app.applicantName)\n  else\n    println(\"No application found\")"}
{"id":"4be33ae7-3a59-43f8-b643-234c3e813c38","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def legacyFetchInterestRate(loanType: String): java.lang.Double =\n  if (loanType == \"fixed\") 3.9\n  else null\n\ndef showInterestRate(loanType: String): Unit =\n  val rate = legacyFetchInterestRate(loanType)\n  if (rate != null)\n    println(s\"Current rate: $rate%\")\n  else\n    println(\"Interest rate not available\")"}
{"id":"bb7bb958-3962-45a2-8e93-b2fa62b83351","timestamp":1746098393075,"category":"null_checks","topicUsed":"Online mortgage calculator","isIdiomatic":false,"code":"def getRepaymentSummary(mortgageId: String): String =\n  val summary = if (mortgageId == null) null else s\"Repayment details for $mortgageId\"\n  if (summary != null)\n    summary\n  else\n    \"Invalid mortgage ID\""}
{"id":"f430eb21-dbe6-4341-977c-eee8e785edee","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class SensorReading(sensorId: String, value: Double)\ndef getSensorReading(sensorId: String): Option[SensorReading] = {\n  val rawValue: java.lang.Double = retrieveSensorValue(sensorId) // might be null\n  Option(rawValue).map(v => SensorReading(sensorId, v))\n}\n\ndef retrieveSensorValue(sensorTag: String): java.lang.Double = \n  if sensorTag == \"temperature\" then 45.5 else null\n"}
{"id":"9d5f1bc2-0874-49be-afcc-03ab53667997","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def lastVibrationLevel(machineId: String): java.lang.Double = {\n  if machineId == \"mixer01\" then 0.08 else null\n}\n\nval vibration: java.lang.Double = lastVibrationLevel(\"compressor09\")\nif (vibration != null) {\n  println(\"Vibration: \" + vibration)\n} else {\n  println(\"No Data\")\n}\n"}
{"id":"0680e4a8-3797-4586-98a3-b02666ce7547","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def parseTelemetryField(field: String): Option[Int] = \n  Option(field).flatMap(f => f.toIntOption)\n\nval rpmOpt: Option[Int] = parseTelemetryField(\"1200\")\nval rpm: Int = rpmOpt.getOrElse(0)\n"}
{"id":"a843acb9-9f4d-4ec4-850e-a0c8fbd65fec","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getMachineStatus(machineTag: String): String = {\n  if (machineTag == \"drill2\") \"Running\"\n  else null\n}\n\nval status = getMachineStatus(\"press3\")\nif (status == null) {\n  println(\"Status unknown\")\n} else {\n  println(\"Status: \" + status)\n}\n"}
{"id":"edf44564-d0ce-47b5-a226-4a1a7a11a62a","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class OilLevelReading(level: Double)\n\ndef safeOilLevelReading(rawLevel: java.lang.Double): Option[OilLevelReading] =\n  Option(rawLevel).filter(_ > 0).map(OilLevelReading(_))\n\nval oilLevelOpt = safeOilLevelReading(null)\n"}
{"id":"00e2c9c9-f0f0-4093-918d-245c8e4f104a","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class TelemetryDatabase {\n  def fetchPressureValue(assetTag: String): java.lang.Double =\n    if (assetTag.startsWith(\"pump\")) 3.8 else null\n}\n\nval db = new TelemetryDatabase\nval fetchedValue = db.fetchPressureValue(\"tank12\")\nif (fetchedValue != null) println(fetchedValue)\n"}
{"id":"dca155f7-f6ae-4864-8462-610e4dbfd2f6","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def optionalTemperature(reading: java.lang.Double): Option[Double] = Option(reading)\n\nval machineTemperature = getRawTempFromDevice(\"plasmaCutter\")\nval temperature: Option[Double] = optionalTemperature(machineTemperature)\n\ndef getRawTempFromDevice(asset: String): java.lang.Double = null\n"}
{"id":"638f8576-d852-4f7b-8d0c-544a46f82d33","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def fetchMotorCurrent(phase: String): java.lang.Double = {\n  if phase == \"A\" then 14.3 else null\n}\n\nval current = fetchMotorCurrent(\"C\")\nif(current == null) println(\"Current unavailable\")\nelse println(s\"Current is $current\")\n"}
{"id":"21dda297-0917-4c69-8dce-278176ddaec7","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def extractHumidity(data: Map[String, Any]): Option[Double] =\n  data.get(\"humidity\").flatMap {\n    case v: java.lang.Double => Option(v)\n    case _ => None\n  }\n\nval result = extractHumidity(Map(\"humidity\" -> null))\n"}
{"id":"95e69688-e59d-4caa-bb7d-4c82102add02","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def retrieveAlarmMessage(machineSn: String): String =\n  if machineSn.endsWith(\"7\") then \"Overload detected\" else null\n\nval alarm = retrieveAlarmMessage(\"pressor17\")\nif (alarm != null) println(alarm)\n"}
{"id":"d5df6112-77bc-4016-8c2f-34184a9ced62","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def getValveState(signal: java.lang.Boolean): Option[Boolean] = Option(signal).map(_.booleanValue)\n\nval valveSignal: java.lang.Boolean = java.lang.Boolean.FALSE\nval state: Option[Boolean] = getValveState(valveSignal)\n"}
{"id":"cc56e3ae-f11b-44f8-a681-6131de36e6e3","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"val torqueReading: java.lang.Double = null\nif (torqueReading == null) {\n  println(\"No torque data recorded\")\n} else {\n  println(\"Torque: \" + torqueReading)\n}\n"}
{"id":"38f42f3f-b319-4123-80af-9194dde39dc3","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def parseActuatorResponse(response: String): Option[Long] = \n  Option(response).flatMap(s => s.toLongOption)\n\nval rpsCount = parseActuatorResponse(null)\n"}
{"id":"e5f01712-72ae-4961-9b61-46bb12125ddd","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def rawPowerFactor(meterId: String): java.lang.Float =\n  if meterId == \"PQ-14\" then 0.96f else null\n\nval pf = rawPowerFactor(\"BYP-8\")\nif (pf != null) println(\"Power Factor: \" + pf)\n"}
{"id":"a2e60c54-892e-473f-b976-938a69d810ad","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class MachineSerial(serial: String)\ndef wrapSerial(serial: String): Option[MachineSerial] =\n  Option(serial).filter(_.nonEmpty).map(MachineSerial(_))\n\nval wrapped = wrapSerial(null)\n"}
{"id":"ba7e24e6-d98c-4a10-8fb8-62225bdaf130","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class TelemetryArchive {\n  def findFaultTimestamp(eventCode: Int): java.lang.Long =\n    if eventCode == 900 then 1689867302000L else null\n}\n\nval archive = new TelemetryArchive\nval timestamp = archive.findFaultTimestamp(42)\nif (timestamp == null) println(\"No timestamp\")\n"}
{"id":"f79fd927-4420-4873-8243-9de4666438f8","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def lastEncoderReading(encoderValue: java.lang.Integer): Option[Int] = {\n  Option(encoderValue).map(_.toInt).filter(_ > 0)\n}\n\nval lastReading = lastEncoderReading(null)\n"}
{"id":"c0fea0be-9ead-454c-8519-8c8cb19d8dca","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def fetchPumpRuntime(pumpTag: String): java.lang.Long =\n  if pumpTag == \"AuxPump\" then 90000L else null\n\nval pumpTime = fetchPumpRuntime(\"MainPump\")\nif (pumpTime == null) {\n  println(\"Runtime not available\")\n}\n"}
{"id":"90213801-9369-45a7-bfd9-65d8fac37545","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def mapControllerStatus(rawStatus: java.lang.Integer): Option[String] =\n  Option(rawStatus).map {\n    case 1 => \"Operational\"\n    case 2 => \"Error\"\n    case _ => \"Unknown\"\n  }\n\nval status = mapControllerStatus(null)\n"}
{"id":"5b05cfdc-1c86-4082-966d-cd1a7ea1f14d","timestamp":1746098417676,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"case class TemperatureAlert(message: String)\ndef temperatureAlertOrNull(temp: java.lang.Double): TemperatureAlert = {\n  if (temp == null) null\n  else if (temp > 95.0) TemperatureAlert(\"High Temperature\")\n  else null\n}\n\nval alert = temperatureAlertOrNull(98.1)\nif(alert != null) println(alert.message)\n"}
{"id":"64790a91-d8c5-4385-9078-720478ce7102","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class SensorReading(machineId: String, temperature: Double)\ndef safeTemperature(reading: SensorReading | Null): Double =\n  Option(reading).map(_.temperature).getOrElse(0.0)"}
{"id":"fbba7165-611a-46a3-a878-c9391bcccb06","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"object MachineStateChecker:\n  def isOperational(state: String | Null): Boolean =\n    if (state == null) false\n    else state == \"RUNNING\""}
{"id":"9529f08a-b0cb-47a3-9b48-afdaa77da35e","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def lastVibrationLevel(readings: List[VibrationRecord]): Option[Double] =\n  readings.lastOption.map(_.level)"}
{"id":"790900b8-a10e-41e0-9586-b6c070c332d6","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class ErrorLogFetcher:\n  def fetchLatestError(machineId: String): String = null"}
{"id":"bb4011c7-92c9-470d-92b2-18adee0c9004","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def wrapProductionRate(rate: java.lang.Double | Null): Option[Double] =\n  Option(rate).map(_.doubleValue)"}
{"id":"28198011-a534-4375-82b7-bde823b28091","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"object CoolingFanController:\n  def currentSpeedSetting(): Integer = null"}
{"id":"c43d37ec-9a19-44fd-8ee6-70fcf9c9a0b1","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def extractPressureValue(pressure: java.lang.Double | Null): Double =\n  Option(pressure).fold(1.0)(_.doubleValue)"}
{"id":"3cd9f087-abeb-4143-9215-e23ff62216c6","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getOilQualityLevel(sensorOutput: String | Null): String =\n  if (sensorOutput == null) \"UNKNOWN\"\n  else sensorOutput"}
{"id":"7508ff3f-3b2a-43b5-b925-69e247665289","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class MotorStatus(current: Option[Double])\ndef averageCurrent(statuses: List[MotorStatus]): Double =\n  statuses.flatMap(_.current).sum / statuses.flatMap(_.current).size"}
{"id":"0f78e8a1-69d8-47e9-a8a8-df72751a074f","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def retrieveLastAlert(log: AlertLog | Null): Alert | Null =\n  if (log != null) log.lastAlert\n  else null"}
{"id":"28130969-00d4-4d91-a96a-a68c8ea5f8cf","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def checkSensorCalibration(cal: CalibrationData | Null): Option[CalibrationData] =\n  Option(cal)"}
{"id":"5c517e08-d880-476b-9a4c-45add5a108f7","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"object MaintenanceScheduler:\n  def getNextService(machineId: String): java.time.LocalDate = null"}
{"id":"177d0ec1-d840-4bbd-8297-0ec8f753805c","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"case class PowerReading(voltage: Double, current: Double)\ndef safeCurrent(reading: PowerReading | Null): Option[Double] =\n  Option(reading).map(_.current)"}
{"id":"b6e56781-743f-4417-b0cf-33b4021f68f1","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def getOperatorNote(notes: java.util.Map[String, String], id: String): String =\n  val note = notes.get(id)\n  if (note == null) \"No note found\"\n  else note"}
{"id":"91e305a1-0868-4bce-9cad-df7c5ce235b2","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def calculateTemperatureDelta(t1: java.lang.Double | Null, t2: java.lang.Double | Null): Option[Double] =\n  for\n    first <- Option(t1)\n    second <- Option(t2)\n  yield second - first"}
{"id":"03f3d112-c73c-4785-873b-1d514824a2a0","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"class NetworkDiagnostic:\n  def pingDevice(ipAddress: String): Boolean = false\n  def lastResponseTime(): java.lang.Long = null"}
{"id":"1cedd2ad-9671-4f45-97ac-bda04128bf2a","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def summarizeVibrationReadout(readout: String | Null): Option[String] =\n  Option(readout).filter(_.nonEmpty)"}
{"id":"3f35b1b3-56ae-4f4b-935f-38f636919f99","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"case class Alarm(code: String, description: String)\ndef getCriticalAlarm(alarm: Alarm | Null): String =\n  if (alarm != null && alarm.code == \"CRIT\") alarm.description\n  else \"No critical alarm\""}
{"id":"20ded504-67cf-4683-872a-2fe7f2606de3","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":true,"code":"def batteryVoltage(optVoltage: java.lang.Double | Null): Double =\n  Option(optVoltage).getOrElse(12.0)"}
{"id":"432b994c-13e7-49c0-a6b1-3ec2007e9018","timestamp":1746098432271,"category":"null_checks","topicUsed":"Telemetry for industrial machinery","isIdiomatic":false,"code":"def fetchStatusCode(status: MachineStatus | Null): String =\n  if (status == null) null\n  else status.code"}
{"id":"71f10063-42d9-451e-9eca-399c8c6798de","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"object LobbySessionManager:\n  def findPlayerById(playerId: String): Option[VRPlayer] =\n    Option(Database.lookupPlayer(playerId))\n      .filter(_.isActive)\n"}
{"id":"32798265-757e-4268-9a9b-ff62d22f6180","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class VRDeviceService:\n  def getHeadsetForPlayer(playerUsername: String): VRHeadset =\n    val device = SystemDeviceAPI.findHeadset(playerUsername)\n    if (device == null) null else device\n"}
{"id":"aac81bfd-5571-4532-b040-40f3c8b809f0","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class GameRoom(roomCode: String, owner: VRPlayer, players: List[VRPlayer])\n\ndef addPlayerToRoom(room: GameRoom, newPlayer: VRPlayer): Option[GameRoom] =\n  Option(room).map(r => r.copy(players = newPlayer :: r.players))\n"}
{"id":"cb3da2b4-4755-4cca-870e-5d1a241aee15","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"object VirtualLobbyChat:\n  def sendMessageIfConnected(session: VRChatSession, message: String): Unit =\n    if (session != null && session.isConnected()) session.send(message)\n"}
{"id":"9bfef035-6a4e-4e0d-8ecd-21cc9d527ed9","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getActiveLobbySession(sessionLookup: String): Option[VRLobbySession] =\n  Option(GameLobbyRegistry.session(sessionLookup)).filter(_.isActive)\n"}
{"id":"58bf2698-9139-45c2-b1fd-d8437fc5bf8c","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class PlayerAvatarLoader:\n  def loadAvatar(playerHandle: String): VRAvatar =\n    val avatar = AvatarDB.getAvatar(playerHandle)\n    if (avatar == null) null else avatar\n"}
{"id":"491896b0-7985-43ab-957b-0379c98276d5","timestamp":1746098454287,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def currentHostName(roomCode: String): Option[String] =\n  Option(LobbyDirectory.findRoom(roomCode)).map(_.owner.username)\n"}
{"id":"0edcce52-ee8d-4732-8cfa-cafe25f995d2","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"object VRLobbyInvitation:\n  def sendInviteToPlayer(targetUsername: String): Boolean =\n    val invite = InviteService.create(targetUsername)\n    if (invite == null) false else invite.deliver()\n"}
{"id":"78fe6fe5-8528-4855-9609-832f51938579","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def connectedFriendsCount(player: VRPlayer): Int =\n  Option(player.friendsList).map(_.count(_.isOnline)).getOrElse(0)\n"}
{"id":"cb609409-72a8-4285-b978-5eee02221dfd","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def getPlayerChatHistory(lobbyId: String, username: String): VRChatHistory =\n  val chat = ChatStore.fetchChat(lobbyId, username)\n  if (chat == null) VRChatHistory.empty else chat\n"}
{"id":"f9839e9c-2a2f-48fc-973f-49520be3610b","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRGameLobby(lobbyName: String, maxPlayers: Int, host: VRPlayer)\n\ndef maybeLobbyName(lobby: VRGameLobby): Option[String] =\n  Option(lobby).map(_.lobbyName)\n"}
{"id":"31e041ad-836b-48bc-b9ba-a5fe923bb8ca","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def findLobbyModerator(lobbyId: String): VRPlayer =\n  val mod = LobbyStaffLookup.getModerator(lobbyId)\n  if (mod != null) mod else null\n"}
{"id":"7aa786eb-d6e2-4eef-a7d1-27d9522db716","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def safeGetCurrentRoomPlayerList(player: VRPlayer): Option[List[VRPlayer]] =\n  Option(player.currentRoom).map(_.players)\n"}
{"id":"b12cc271-2b0a-4342-b774-f34ae746058a","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def firstOnlineFriendOrNull(player: VRPlayer): VRPlayer =\n  val friends = player.friendsList\n  if (friends != null)\n    friends.find(_.isOnline).orNull\n  else\n    null\n"}
{"id":"d77e00c1-cd45-4662-90c7-76009ecf0a65","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getOptionalActiveLobby(ownerUsername: String): Option[VRGameLobby] =\n  Option(LobbyDirectory.activeLobbyForOwner(ownerUsername))\n"}
{"id":"36918c85-6d8f-4f06-8e3d-f398ca7616d2","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def getLobbyVoiceChannelOrNull(lobbyId: String): VRVoiceChannel =\n  val channel = VoiceSystem.lookupChannel(lobbyId)\n  if (channel != null) channel else null\n"}
{"id":"8e705f46-691b-4bc9-a68f-09f118485c94","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getPlayerRoomCode(player: VRPlayer): Option[String] =\n  Option(player.currentRoom).flatMap(room => Option(room.roomCode))\n"}
{"id":"7dd09ce5-177e-43b2-8644-335be517a997","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def avatarNameOrUnknown(playerHandle: String): String =\n  val avatar = AvatarDB.getAvatar(playerHandle)\n  if (avatar == null || avatar.name == null) \"Unknown\" else avatar.name\n"}
{"id":"6c899bdf-0733-4416-9472-7244ba27b5e3","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def optionalFriendDisplayName(possibleFriend: VRPlayer): Option[String] =\n  Option(possibleFriend).flatMap(p => Option(p.displayName))\n"}
{"id":"86df3ca8-c1fe-4965-a457-293e348f1df2","timestamp":1746098454288,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def fetchChatChannelOrNull(channelId: String): VRChatChannel =\n  val chan = NetworkSystem.getChatChannel(channelId)\n  if (chan == null) null else chan\n"}
{"id":"8fa507e8-fe43-424a-99aa-cc63d0b97c96","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class VRPlayerProfile(nickname: String, gear: String)\n\ndef findProfileInLobby(lobby: List[VRPlayerProfile], nickname: String): Option[VRPlayerProfile] =\n  lobby.find(_.nickname == nickname)"}
{"id":"7ab18715-2f0c-45d4-9fc2-bc404cf7ea4c","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class LobbySeat(slot: Int, occupant: String)\n\ndef getSeatOccupant(seat: LobbySeat): Option[String] =\n  Option(seat.occupant).filter(_.nonEmpty)"}
{"id":"e23c6bfc-a4f2-41e1-a019-404c18a95491","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def invitePlayerByTag(tag: String, fetchByTag: String => VRPlayerProfile | Null): Option[VRPlayerProfile] =\n  Option(fetchByTag(tag))"}
{"id":"15534489-3dbf-4ff3-b478-55d888ea5d64","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getActiveSession(lobbyId: String, lookup: String => VRSession | Null): Option[VRSession] =\n  Option(lookup(lobbyId))"}
{"id":"9c8367ab-291a-455e-ad64-322b7fa53f09","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getSpectatorName(spectatorId: Int, idToName: Int => String | Null): Option[String] =\n  Option(idToName(spectatorId)).filter(_.nonEmpty)"}
{"id":"fa85124c-9b1e-4df6-b9c8-8b283df2a352","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"case class GameRoom(roomId: String, host: Option[String])\n\ndef isRoomAvailable(room: GameRoom): Boolean =\n  room.host.isEmpty"}
{"id":"e1e60346-3b3f-48b9-9462-3108b16c0b77","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def safeEquipmentListing(player: VRPlayerProfile | Null): Option[String] =\n  Option(player).map(_.gear)"}
{"id":"86f0b645-ccca-46ba-a515-6dfe03ea1fda","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def getLobbyOwnerName(lobby: VRGamingLobby): Option[String] =\n  Option(lobby.ownerName).filter(_.nonEmpty)"}
{"id":"cb018fa6-6edf-45e1-9078-5a50a47bba5c","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def findReadyPlayer(lobbyPlayers: List[VRPlayerProfile]): Option[VRPlayerProfile] =\n  lobbyPlayers.find(_.gear == \"Ready\")"}
{"id":"e94ebf5a-a6a3-4a36-8a83-bcf9a00a5866","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":true,"code":"def fetchSessionTokenOrNone(authResult: VRAuthResult): Option[String] =\n  Option(authResult.sessionToken).filter(_.nonEmpty)"}
{"id":"61a2d040-47c2-4309-b302-bb01970d41aa","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class VRFriendRequest(val sender: String, val receiver: String)\n\ndef sendFriendRequest(request: VRFriendRequest): Boolean =\n  if (request == null) false else true"}
{"id":"18e84202-fa44-49b1-97ce-36ef880a5945","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def lookupPlayerById(playerId: Int): VRPlayerProfile =\n  if (playerId == 0) null else VRPlayerProfile(\"Spectator\", \"BasicVRGear\")"}
{"id":"83542d89-e165-4ded-a21a-1a977ad49a65","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def legacyFindLobbyRoom(roomName: String): GameRoom =\n  if (roomName == \"\") null else GameRoom(roomName, null)"}
{"id":"daa74cd1-e5fb-4d44-87f1-7cbc47efa6f6","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def addSpectatorToLobby(lobby: VRGamingLobby, spectator: String): VRGamingLobby =\n  if (lobby == null || spectator == null) null else lobby.addSpectator(spectator)"}
{"id":"206752ad-19f5-4441-8e4e-50adb3b1b229","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def unsafeGetLobbyHost(lobby: VRGamingLobby): String =\n  if (lobby == null || lobby.ownerName == null) null else lobby.ownerName"}
{"id":"2230f9d9-4f3e-4170-b4ea-14237366ddac","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"class VRSession(val sessionId: String, val host: String)\n\ndef getSessionHostIfExists(session: VRSession): String =\n  if (session == null) null else session.host"}
{"id":"b471dd90-5f0d-4f54-a7cd-3dd05020aec7","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def setRoomHost(room: GameRoom, host: String): GameRoom =\n  if (room == null || host == null) null else GameRoom(room.roomId, host)"}
{"id":"5503c07f-9a95-452b-982e-422e3130658e","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def joinLobbyIfPresent(lobby: VRGamingLobby, user: String): Boolean =\n  if (lobby == null || user == null) false else true"}
{"id":"88e64711-51c3-49ec-af2b-1a1a61213ef2","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def fetchPlayerNickname(playerProfile: VRPlayerProfile): String =\n  if (playerProfile == null) null else playerProfile.nickname"}
{"id":"3b362645-873e-49c0-9a8c-596581868812","timestamp":1746098465730,"category":"null_checks","topicUsed":"Virtual reality gaming lobby","isIdiomatic":false,"code":"def lobbyHasSpectator(lobby: VRGamingLobby, spectator: String): Boolean =\n  if (lobby == null || spectator == null) false else lobby.spectators.contains(spectator)"}
{"id":"7609ef5f-247c-4638-bc03-a1df8b843e9b","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class EmployeeAttendance(employeeId: Int, clockInTime: Option[Long], clockOutTime: Option[Long])\n\ndef attendanceDuration(record: EmployeeAttendance): Option[Long] =\n  for\n    in <- record.clockInTime\n    out <- record.clockOutTime\n  yield out - in"}
{"id":"8c71e8b5-d503-480d-984c-e595e45a11a7","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def findEmployeeByBadge(badgeId: String): Employee = null  // returns null if not found\n\ndef printClockIn(employee: Employee): Unit =\n  if (employee != null) println(employee.toString)\n  else println(\"Employee not found\")"}
{"id":"5b8c2ead-ffe8-4a9d-9bd4-b214c8470a7e","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"object EmployeeTrackingService:\n  def fetchLastClockOut(employeeId: Int): Long = null\n\ndef getLastClockOut(employeeId: Int): Option[Long] =\n  Option(EmployeeTrackingService.fetchLastClockOut(employeeId))"}
{"id":"5e936a2d-c00b-4ce0-8e5c-fb41cb95cc4a","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class ShiftReport(val employee: Employee, val hoursWorked: java.lang.Double)\n\ndef compareHours(oldReport: ShiftReport, newReport: ShiftReport): Boolean =\n  if (oldReport.hoursWorked != null && newReport.hoursWorked != null)\n    newReport.hoursWorked > oldReport.hoursWorked\n  else false"}
{"id":"31f6c67b-1559-4d24-aa25-11fafec03c59","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def employeeStatus(lastClockOut: Option[Long]): String =\n  lastClockOut.fold(\"Never clocked out\")(_ => \"Clock-out recorded\")"}
{"id":"c1972f6c-c3d7-4bf8-85d3-a1a14f49f9af","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def fetchManagerComment(employeeId: Int): String = null\n\ndef managerCommentLength(employeeId: Int): Int =\n  val comment = fetchManagerComment(employeeId)\n  if (comment != null) comment.length else 0"}
{"id":"a4d76f34-225a-43df-88e8-9f8419ec707e","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class TimeEntry(employeeId: Int, timestamp: Long, entryType: String)\n\ndef getFirstClockIn(entries: List[TimeEntry]): Option[Long] =\n  entries.find(_.entryType == \"IN\").map(_.timestamp)"}
{"id":"c0114a8a-16c9-4cf6-b8c9-51fb32d23615","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getProjectCode(employeeId: Int): String = null // Java method imitation\n\ndef uppercaseProject(employeeId: Int): String =\n  val code = getProjectCode(employeeId)\n  if (code != null) code.toUpperCase else \"No Project\""}
{"id":"a57eb0d3-e40b-41e9-9976-1cd3e37f5bae","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def lookupShift(employeeName: String): Option[Shift] =\n  Option(findShiftByName(employeeName))\n\ndef shiftStartHour(name: String): String =\n  lookupShift(name).map(s => s.startHour.toString).getOrElse(\"Unknown\")"}
{"id":"5b557712-c5f2-4dcb-b138-7fe2b180c262","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getSupervisor(employeeId: Int): Supervisor = null\n\ndef printSupervisorName(employeeId: Int): Unit =\n  val supervisor = getSupervisor(employeeId)\n  if (supervisor != null) println(supervisor.name)\n  else println(\"Supervisor not assigned\")"}
{"id":"d8253582-b54c-478d-96ae-3353452efc73","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def locateDepartment(id: Int): Department = null\n\ndef getDepartmentName(id: Int): Option[String] =\n  Option(locateDepartment(id)).map(_.name)"}
{"id":"ef69f2d3-17c7-4f47-9e8d-49027c1f3eae","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class Team(val employees: Array[Employee])\n\ndef countNullEntries(team: Team): Int =\n  var count = 0\n  for (e <- team.employees)\n    if (e == null) count += 1\n  count"}
{"id":"ab5af79a-c5d2-423a-9023-d8a2a068e153","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def timeEntryDurationMaybe(clockIn: Long | Null, clockOut: Long | Null): Option[Long] =\n  Option(clockIn).flatMap(in => Option(clockOut).map(out => out - in))"}
{"id":"e5b4ebd6-2196-448e-a08a-9d78e75eef54","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getOvertimeHours(employeeId: Int): java.lang.Double = null\n\ndef isEligibleForBonus(employeeId: Int): Boolean =\n  val hours = getOvertimeHours(employeeId)\n  if (hours != null && hours > 10) true else false"}
{"id":"da03a032-7962-4507-9b57-98b9e62335b0","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def employeeNoteOption(note: String | Null): Option[String] =\n  Option(note).filter(_.nonEmpty)"}
{"id":"80800754-b166-4a4f-9cd4-8209efaa1ad3","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def searchForEmployeeBadge(employeeBadgeId: String): Employee = null\n\ndef checkEmployeeBadgeFound(badgeId: String): Boolean =\n  val emp = searchForEmployeeBadge(badgeId)\n  emp != null"}
{"id":"2b326f13-1dc5-47a2-ad69-5f96074efd08","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def optionalClockIn(employee: Employee): Option[Long] =\n  Option(employee.clockInTimestamp)\n\ndef clockInMillis(employee: Employee): Long =\n  optionalClockIn(employee).getOrElse(0L)"}
{"id":"535d3e36-57c8-4aba-9351-6f4a450aa512","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getDetailsOrNull(name: String): EmployeeDetails = null\n\ndef displayEmployeeEmail(name: String): String =\n  val details = getDetailsOrNull(name)\n  if (details != null) details.email else \"Email not available\""}
{"id":"d52dcaf5-71c6-4c43-8bf2-09598de64415","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class ClockRecord(employeeId: Int, clockIn: Option[Long], clockOut: Option[Long])\n\ndef isClockOutAfterIn(record: ClockRecord): Boolean =\n  record.clockIn.exists(in => record.clockOut.exists(out => out > in))"}
{"id":"299d1fb9-2362-4e46-9c70-bbac0f5a4efb","timestamp":1746098481436,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getPayrollEntryById(entryId: Int): PayrollEntry = null\n\ndef payrollAmountOrZero(entryId: Int): Double =\n  val entry = getPayrollEntryById(entryId)\n  if (entry != null) entry.amount else 0.0"}
{"id":"5cd717fd-200c-4fbf-83c5-429acb81eeb8","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"case class TimeEntry(employeeId: Long, checkIn: Long, checkOut: Long)\ndef getOvertimeHours(entry: TimeEntry | Null): Int =\n  if entry == null then 0 else ((entry.checkOut - entry.checkIn) / 3600 - 8).toInt"}
{"id":"8e9cf43d-1b04-455e-8ba4-d49549bd7578","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class EmployeeLookup {\n  def findEmployeeByBadge(badgeCode: String): String | Null =\n    if badgeCode == \"A123\" then \"Rebecca Lloyd\" else null\n}\ndef verifyEmployeeBadge(badge: String): Boolean =\n  val emp = (new EmployeeLookup).findEmployeeByBadge(badge)\n  if emp == null then false else true"}
{"id":"a6366cc1-48e2-4048-b7ef-d180516e6fe8","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class PunchClockDatabase {\n  def lastPunchForUser(userId: Long): java.util.Date | Null =\n    if userId == 1L then new java.util.Date() else null\n}\ndef secondsSinceLastPunch(userId: Long): Long =\n  val last = (new PunchClockDatabase).lastPunchForUser(userId)\n  if last == null then -1L else (System.currentTimeMillis() - last.getTime) / 1000"}
{"id":"28b601a0-5bf4-4fbe-830a-90a08f0b3c94","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def getManagerNotes(employeeId: Int): String | Null =\n  if employeeId == 101 then \"Left early on Wednesday\" else null\ndef notesSummary(employeeId: Int): String =\n  val notes = getManagerNotes(employeeId)\n  if notes != null then s\"Notes: $notes\" else \"No manager notes available\""}
{"id":"08b41729-dc03-420e-a632-a2791c6d448d","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class TimesheetApi {\n  def fetchTimesheetForDate(eid: Long, date: String): String | Null =\n    if date == \"2024-06-20\" then s\"$eid:08:30-17:00\" else null\n}\ndef printTimesheet(eid: Long, date: String): Unit =\n  val data = (new TimesheetApi).fetchTimesheetForDate(eid, date)\n  if data == null then println(\"No timesheet record found.\")\n  else println(data)"}
{"id":"70efcfc1-1c06-4c84-b69b-a8f2da3c57ba","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def calculateBreakDuration(breakStart: java.sql.Timestamp | Null, breakEnd: java.sql.Timestamp | Null): Int =\n  if breakStart != null && breakEnd != null then\n    ((breakEnd.getTime - breakStart.getTime) / 60000).toInt\n  else\n    0"}
{"id":"cbd84a3c-fcad-40d0-9eff-d14d4aa5084a","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"object HolidayService {\n  def nextHoliday(employeeId: Int): String | Null =\n    if employeeId == 42 then \"2024-07-04\" else null\n}\ndef daysUntilVacation(employeeId: Int): Int =\n  val holiday = HolidayService.nextHoliday(employeeId)\n  if holiday == null then 999 else 10"}
{"id":"a285cb3d-7585-49f0-8ce2-3507bc951a44","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def loadShiftType(shiftCode: String): String | Null =\n  if shiftCode == \"N\" then null else \"Day Shift\"\ndef showShiftInfo(employeeShift: String): String =\n  val shiftType = loadShiftType(employeeShift)\n  if shiftType == null then \"Unknown shift\" else shiftType"}
{"id":"3c3eddc4-c2b4-46fe-9d70-55ead70fbd07","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"class LegacyTimeService {\n  def getScheduledStart(employee: String): java.time.LocalTime | Null =\n    if employee == \"James Lee\" then java.time.LocalTime.of(9, 0) else null\n}\ndef printScheduledStart(employee: String): Unit =\n  val start = (new LegacyTimeService).getScheduledStart(employee)\n  if start == null then println(\"No scheduled start\") else println(start)"}
{"id":"a9f0301f-6af4-4a51-ab0d-a714a2229683","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":false,"code":"def previousAttendanceRecord(employeeId: Int): String | Null =\n  if employeeId == 76 then \"2024-06-18 09:04\" else null\ndef attendanceSummary(employeeId: Int): String =\n  val record = previousAttendanceRecord(employeeId)\n  if record != null then s\"Last attendance: $record\" else \"No previous attendance found\""}
{"id":"596e87ca-48a4-4125-9a12-b59b38d018fa","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class AttendanceDay(employeeId: Long, checkIn: Option[Long], checkOut: Option[Long])\ndef totalWorkedTime(day: AttendanceDay): Long =\n  (day.checkIn, day.checkOut) match\n    case (Some(start), Some(end)) => end - start\n    case _ => 0L"}
{"id":"97f5f301-29e5-44af-8b80-893f1c2b4215","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def fetchShiftNotes(employeeId: Long): Option[String] =\n  Option(new java.util.Random().nextInt(2)).filter(_ == 1).map(_ => \"Covered for late coworker.\")\ndef printShiftNotes(employeeId: Long): String =\n  fetchShiftNotes(employeeId).getOrElse(\"No shift notes available.\")"}
{"id":"2c5cd74d-b647-4a82-b134-15d3df18f2f8","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def safeManagerName(rawName: String | Null): Option[String] =\n  Option(rawName)\ndef managerDisplay(employeeId: Int, getManager: Int => String | Null): String =\n  safeManagerName(getManager(employeeId)).fold(\"Manager unknown\")(identity)"}
{"id":"118ad3a9-a1bc-4e5d-bd35-e2720aa4a24b","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class Punch(employeeId: Long, punchType: String)\ndef validatePunch(punch: Option[Punch]): Boolean =\n  punch.exists(_.punchType == \"OUT\")"}
{"id":"853b95a6-61ca-4a90-986d-36549057f15f","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def lookupEmployeeStartTime(employeeId: Int): Option[java.time.LocalTime] =\n  Option(if employeeId % 2 == 0 then java.time.LocalTime.of(8,0) else null)\ndef startTimeString(employeeId: Int): String =\n  lookupEmployeeStartTime(employeeId).fold(\"Unscheduled\")(t => s\"Starts at $t\")"}
{"id":"b3a6c9d4-2e38-462d-b8b5-5c92a5aafab1","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def getTimeCorrectionReason(correctionCode: String | Null): Option[String] =\n  Option(correctionCode).filter(_.nonEmpty)\ndef showCorrectionReason(code: String | Null): String =\n  getTimeCorrectionReason(code).getOrElse(\"No correction required.\")"}
{"id":"a0e7ba4f-3611-4bb5-993e-03181024ae2a","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def getAttendanceMessage(entry: Option[Long]): String =\n  entry.map(ts => s\"Employee checked in at $ts\").getOrElse(\"Check-in missing\")"}
{"id":"36e1d924-0c2a-41f0-a596-0e9202cf227b","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def findOvertimeMinutes(employeeId: Long): Option[Int] =\n  Option(employeeId).filter(_ > 0).map(_ => 45)\ndef overtimeDisplay(eid: Long): String =\n  findOvertimeMinutes(eid).map(m => s\"$m min OT\").getOrElse(\"No overtime\")"}
{"id":"ddc5f7fe-0af3-4e60-843b-2423097725a8","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def wrapJavaAttendance(attendance: java.lang.Boolean | Null): Option[Boolean] =\n  Option(attendance).map(_.booleanValue)\ndef attendanceOk(javaAttendance: java.lang.Boolean | Null): String =\n  wrapJavaAttendance(javaAttendance).fold(\"Not marked present\")(_ => \"Present\")"}
{"id":"5ec168ff-831b-4a48-921c-44ef81bbf703","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"case class EmployeeNote(employeeId: Int, content: String)\ndef nonEmptyNotes(notes: List[EmployeeNote | Null]): List[EmployeeNote] =\n  notes.flatMap(note => Option(note))"}
{"id":"2dccc92f-0e6a-4161-9d50-b42ee8fe74d0","timestamp":1746098501392,"category":"null_checks","topicUsed":"Employee time tracking","isIdiomatic":true,"code":"def mostRecentBreak(start: Option[Long], end: Option[Long]): Option[(Long, Long)] =\n  for\n    s <- start\n    e <- end\n  yield (s, e)"}
{"id":"390b853c-9d71-4c7f-a923-e7702ee04de3","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"case class WeatherAlert(alertType: String, message: String)\ndef findAlertMessage(alert: WeatherAlert | Null): String =\n  if (alert != null) alert.message else \"No alert available\"\n"}
{"id":"8318bd55-fca8-438e-832a-4697b23aa7de","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class NotificationSender {\n  def sendEmail(recipient: String, subject: String, content: String): Boolean = true\n  def sendWeatherAlert(alertMessage: String | Null, recipient: String): Boolean = {\n    if (alertMessage != null) {\n      sendEmail(recipient, \"Weather Alert\", alertMessage)\n    } else {\n      false\n    }\n  }\n}\n"}
{"id":"9c0e3759-c4c6-47d4-b855-9828ad233a93","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"object AlertRetriever {\n  def getCurrentWeatherAlert(): WeatherAlert | Null = null\n  def getAlertType(): String = {\n    val alert = getCurrentWeatherAlert()\n    if (alert == null) \"No Alert\" else alert.alertType\n  }\n}\n"}
{"id":"80f0bc7a-a95d-4553-8787-0e11a78fc1e8","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getSubscriberEmail(subscriberId: Int): String | Null = {\n  if (subscriberId == 101) \"user101@weatherapp.com\" else null\n}\ndef sendCriticalAlert(subscriberId: Int, alert: String): Boolean = {\n  val email = getSubscriberEmail(subscriberId)\n  if (email != null) true\n  else false\n}\n"}
{"id":"e6207c02-8dae-4cfe-b542-ee36b4f46128","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertDatabase {\n  def fetchLastAlert(city: String): WeatherAlert | Null = null\n}\ndef printLastAlertForCity(city: String, db: AlertDatabase): Unit = {\n  val alert = db.fetchLastAlert(city)\n  if (alert != null) {\n    println(s\"Alert in $city: ${alert.message}\")\n  } else {\n    println(\"No recent alerts.\")\n  }\n}\n"}
{"id":"905b1638-c1f8-4cd4-8b4d-950fb44d307f","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getPhoneNumber(user: String): String | Null =\n  if (user == \"admin\") \"+1234567890\" else null\ndef sendSmsAlert(phone: String | Null, alertText: String): Boolean =\n  if (phone != null) true else false\n"}
{"id":"334968ce-118d-4790-b09e-3121d958c38a","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class JavaLikeAlertProvider {\n  def getUrgentAlert(region: String): WeatherAlert | Null = null\n}\ndef getUrgentAlertMessage(region: String, provider: JavaLikeAlertProvider): String = {\n  val alert = provider.getUrgentAlert(region)\n  if (alert == null) \"No urgent alerts\" else alert.message\n}\n"}
{"id":"b7fb3a9b-add2-4e95-81b6-ad6119d04993","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getAlertTimestamp(alert: WeatherAlert | Null): Long =\n  if (alert != null) System.currentTimeMillis() else -1\n"}
{"id":"cdba3b3e-24f8-42c2-9504-41d51570dff7","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"object AlertChecker {\n  def isSevere(alert: WeatherAlert | Null): Boolean = {\n    if (alert != null && alert.alertType == \"Severe\") true else false\n  }\n}\n"}
{"id":"262dc85c-65e0-4e3f-b9cd-33b2fee062b3","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertLogger {\n  def log(alert: WeatherAlert | Null): Unit = {\n    if (alert != null) {\n      println(s\"Logging alert: ${alert.alertType}\")\n    } else {\n      println(\"No alert to log.\")\n    }\n  }\n}\n"}
{"id":"921a6e55-22b7-47b9-a5e7-697507e48b60","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def safeGetAlertMessage(alert: WeatherAlert | Null): Option[String] =\n  Option(alert).map(_.message)\n"}
{"id":"f152e9ef-4d34-424b-bd89-d33b633da5fd","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WeatherAlert(alertType: String, message: String)\ndef showAlert(alertOpt: Option[WeatherAlert]): String =\n  alertOpt.map(_.message).getOrElse(\"No weather alert.\")\n"}
{"id":"826da4d9-ac56-4059-bae8-133bb1cfcd94","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def sendOptionalAlert(alert: Option[WeatherAlert], recipient: String): Boolean =\n  alert.exists(a => recipient.nonEmpty)\n"}
{"id":"b535149b-0010-455c-b50b-84c25be62e35","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def wrapNullableAlert(alert: WeatherAlert | Null): Option[WeatherAlert] =\n  Option(alert)\n"}
{"id":"1b507afd-4e5e-4361-b718-d318a1e25c44","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def notifyIfAlert(alert: Option[WeatherAlert]): Unit =\n  alert.foreach(a => println(s\"Notification: ${a.message}\"))\n"}
{"id":"fd61cdd5-fc42-4d09-b18c-edc86dc59b3d","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"object RegionAlertFinder {\n  def find(region: String): Option[WeatherAlert] =\n    if (region == \"Midwest\") Some(WeatherAlert(\"Flood\", \"Rising waters detected.\")) else None\n  def printIfExist(region: String): Unit = {\n    find(region).foreach(alert => println(alert.message))\n  }\n}\n"}
{"id":"03056049-741e-4898-aac8-62f96360ce9c","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def getSubscriberContact(id: Int): Option[String] =\n  if (id == 123) Some(\"user123@weatheralert.com\") else None\ndef contactSubscriber(id: Int): String =\n  getSubscriberContact(id).getOrElse(\"Contact not found.\")\n"}
{"id":"8de4ab06-b142-4a82-b897-01229a85be16","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def sendPushAlert(alertOpt: Option[WeatherAlert], deviceId: String): String =\n  alertOpt.fold(\"No alert to push.\")(_.message)\n"}
{"id":"ee55ce75-01a8-47df-894a-9b26a91c5b12","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def currentAlertType(alert: Option[WeatherAlert]): String =\n  alert.map(_.alertType).getOrElse(\"None\")\n"}
{"id":"5f813740-b99c-4495-923c-a140bb14d386","timestamp":1746098518063,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def filterSevere(alertOpt: Option[WeatherAlert]): Option[WeatherAlert] =\n  alertOpt.filter(_.alertType == \"Severe\")\n"}
{"id":"1dd2fdb9-c854-4b54-9d91-f2ea5858460d","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"case class AlertMessage(location: String, severity: String)\n\ndef toAlertMessageNull(raw: String): AlertMessage = {\n  if (raw == null) {\n    null\n  } else {\n    val parts = raw.split(\",\")\n    if (parts.length == 2) new AlertMessage(parts(0), parts(1)) else null\n  }\n}"}
{"id":"23948b8a-3822-4dca-b870-14eae90d23a6","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherAlertChannel(var channelName: String)\n\nval notificationService: WeatherAlertChannel = null\n\nif (notificationService != null) {\n  notificationService.channelName = \"Push\"\n}"}
{"id":"b6ad8f87-8785-421f-86cb-70fe3bf9eb52","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getAlertFromAPI(locationId: Int): String = {\n  if (locationId < 0) null else s\"Severe weather in area $locationId\"\n}\n\nval alertMsg = getAlertFromAPI(-1)\nif (alertMsg != null) {\n  println(alertMsg)\n}"}
{"id":"77998de9-2f87-4b63-b8ba-30285afcdff1","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def checkWeatherAlertSubscriber(subscriber: String): Boolean = {\n  if (subscriber == null) false else subscriber.nonEmpty\n}\n\nval result = checkWeatherAlertSubscriber(null)"}
{"id":"817c4953-1946-41df-8a04-330951d70b70","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getNotificationTime(alert: String): String =\n  if (alert == null) null else \"07:00 AM\"\n\nval nextTime = getNotificationTime(null)"}
{"id":"d15c4583-bb9b-49f6-b1f3-ee62f1f59d8a","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"object WeatherAlertResolver {\n  def getLatestNotification(): String = null\n}\n\nval notification = WeatherAlertResolver.getLatestNotification()\nif (notification != null) println(notification)"}
{"id":"3494e9c5-fd49-42f2-a603-676c5a839762","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class WeatherUser(var phone: String)\n\ndef getUserPhone(user: WeatherUser): String = {\n  if (user == null) null\n  else user.phone\n}\n\nval user = null\nval phone = getUserPhone(user)"}
{"id":"90fb2825-99f4-44e6-9daa-3fd316f2ea9f","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"class AlertSubscription(val endpoint: String)\n\ndef getSubscription(): AlertSubscription = null\n\nval subscription = getSubscription()\nif (subscription != null) {\n  println(subscription.endpoint)\n}"}
{"id":"f33a7d0e-4008-46fa-908e-7c07c5ea0044","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def nullIfSevereLevel(level: String): String =\n  if (level == \"severe\") null else level\n\nval status = nullIfSevereLevel(\"severe\")"}
{"id":"97414d47-1053-4816-83bb-ab249bc218d0","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":false,"code":"def getEmailForAlert(alertId: Int): String = {\n  if (alertId == 42) null else s\"contact$alertId@weather.com\"\n}\n\nval contact = getEmailForAlert(42)"}
{"id":"98acd91d-9479-4f88-8094-8ab32ff92fea","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class Alert(location: String, condition: String)\n\ndef parseAlert(raw: String): Option[Alert] = {\n  Option(raw).flatMap { s =>\n    val parts = s.split(\",\")\n    if parts.length == 2 then Some(Alert(parts(0), parts(1))) else None\n  }\n}\n\nval alertOpt = parseAlert(\"Seattle,Rain\")"}
{"id":"00488fe9-1b1d-4060-891b-15caf0edd92a","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def safeGetUserPreference(preference: String): Option[String] =\n  Option(preference).filter(_.nonEmpty)\n\nval pref = safeGetUserPreference(null)\nval fallback = pref.getOrElse(\"Default\")"}
{"id":"6db6e7f4-7972-4513-b96e-9ce7d8919570","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def wrapPossiblyNullAlert(alert: String): Option[String] =\n  Option(alert)\n\nval maybeAlert = wrapPossiblyNullAlert(null)\nmaybeAlert.fold(println(\"No alert received\"))(println)"}
{"id":"17b9daab-3628-4503-a1d9-46a274a73798","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class NotificationChannel(name: String)\n\ndef findNotificationChannel(name: String): Option[NotificationChannel] =\n  Option(name).map(NotificationChannel(_))\n\nval channelOpt = findNotificationChannel(\"SMS\")"}
{"id":"2104cea6-0ce0-4260-98c7-3d6ef93c817f","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def sendAlertIfSubscribed(user: Option[String], alert: String): String =\n  user.map(u => s\"Sending alert $alert to $u\").getOrElse(\"No subscriber found\")\n\nval result = sendAlertIfSubscribed(None, \"Flood warning\")"}
{"id":"a2c61f77-4b4b-45c4-b7f9-c5cfcec0bea2","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def getAlertLevel(alert: Option[String]): String =\n  alert.map(_.toUpperCase).getOrElse(\"UNKNOWN\")\n\nval alertLevel = getAlertLevel(Some(\"low\"))"}
{"id":"28ab5127-7e84-48e2-8ce3-be3a327b775d","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"case class WeatherAlert(severity: String, area: String)\n\ndef filterSevere(alertOpt: Option[WeatherAlert]): Option[WeatherAlert] =\n  alertOpt.filter(_.severity == \"severe\")\n\nval maybeAlert = filterSevere(Some(WeatherAlert(\"moderate\", \"West\")))"}
{"id":"5231b526-4aa8-4053-988d-5eb26458874c","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def flatMapAlert(alertOpt: Option[String]): Option[Int] =\n  alertOpt.flatMap(msg => if (msg.nonEmpty) Some(msg.length) else None)\n\nval lenOpt = flatMapAlert(Some(\"Storm warning\"))"}
{"id":"d3c9119b-f00f-4349-9ef5-09b31546903b","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def alertRecipientExists(recipientOpt: Option[String]): Boolean =\n  recipientOpt.exists(_.contains(\"@\"))\n\nval valid = alertRecipientExists(Some(\"admin@weather.com\"))"}
{"id":"30b3e126-4a24-480b-a45f-a0235312fda5","timestamp":1746098537747,"category":"null_checks","topicUsed":"Weather alert notification service","isIdiomatic":true,"code":"def isAlertMessageMissing(msg: Option[String]): Boolean =\n  msg.forall(_.isEmpty)\n\nval isEmpty = isAlertMessageMissing(None)"}
{"id":"f4965195-d3af-401d-9167-f18c279d3921","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class PaymentTransaction(id: String, amount: Double, country: String)\n\ndef getFraudAlertMessage(transaction: PaymentTransaction): Option[String] =\n  Option(transaction.country).filter(_ == \"HU\").map(_ => s\"High risk country: ${transaction.country}\")"}
{"id":"111bab44-6130-4919-8ae3-03aa3cccf211","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def detectSuspiciousDevice(deviceId: String): Option[String] =\n  Option(deviceId).filter(_.startsWith(\"fraud-\")).map(_ => \"Suspicious device detected\")"}
{"id":"5c2fe7ac-3faf-425b-bda9-31dacf993a02","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def wrapNullableTransaction(nullableTxn: PaymentTransaction): Option[PaymentTransaction] =\n  Option(nullableTxn)\n\ndef isTransactionPresent(txnOpt: Option[PaymentTransaction]): Boolean = txnOpt.isDefined"}
{"id":"4b62ad3e-4e49-408b-bbed-60d9562701b8","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def validateAccountHolder(email: String): Option[String] =\n  Option(email).filter(_.contains(\"@\")).map(_ => s\"Email validated: $email\")"}
{"id":"9e28d74e-e23c-4b61-a9f9-3cfba0e6c373","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def retrieveRiskScore(cardNumber: String): Option[Int] =\n  Option(cardNumber).filter(_ == \"1234567890123456\").map(_ => 95)\n\ndef isHighRisk(scoreOpt: Option[Int]): Boolean = scoreOpt.exists(_ > 90)"}
{"id":"bd77f0bd-615e-48c3-b1c2-2f6bc6761d0c","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def fetchRuleForMerchant(merchantId: String): Option[String] =\n  Option(merchantId).map(id => if id == \"MERCHANT123\" then Some(\"Blacklisted\") else None).flatten"}
{"id":"ae9a2172-c7a5-4088-8600-e3b2d23d7982","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class UserProfile(name: String, ip: String)\n\ndef getIpCountry(profile: UserProfile): Option[String] =\n  Option(profile.ip).filter(_.startsWith(\"192.168\")).map(_ => \"Internal\")"}
{"id":"f4174591-4749-4adc-bf06-65906178af6b","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def parseTransactionNote(note: String): Option[String] =\n  Option(note).filter(_.nonEmpty).map(_.trim)\n\ndef flagEmptyNote(noteOpt: Option[String]): Boolean = noteOpt.isEmpty"}
{"id":"64cf463f-4022-422a-82da-be76bac58c9f","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def getEmailDomain(email: String): Option[String] =\n  Option(email).filter(_.contains(\"@\")).map(_.split(\"@\")(1)).filter(_.endsWith(\".ru\"))"}
{"id":"6e8e6e6c-c7a0-49c9-8d03-35f8f80e6874","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class BatchPayment(transactions: List[PaymentTransaction])\n\ndef getFirstLargeTransaction(batch: BatchPayment): Option[PaymentTransaction] =\n  batch.transactions.find(_.amount > 10000)"}
{"id":"365ed0cb-ec0b-4701-9584-8a3467433121","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def findIssuerCountry(cardNumber: String): String = {\n  if (cardNumber == null) return null\n  if (cardNumber.startsWith(\"4\")) \"USA\"\n  else null\n}"}
{"id":"9cefabf3-c950-4bb9-9165-ebf946945873","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"class TransactionHistory(var lastTransaction: PaymentTransaction)\ndef getLastTransactionAmount(history: TransactionHistory): Double = {\n  if (history == null || history.lastTransaction == null) return 0.0\n  history.lastTransaction.amount\n}"}
{"id":"2548c9c4-d744-4d97-81a3-5e1178d5e366","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getSuspiciousMerchant(merchantName: String): String = {\n  if (merchantName != null && merchantName.contains(\"FraudMart\")) \"Blacklisted\"\n  else null\n}"}
{"id":"155a1870-30ff-433a-928c-3d93dfedaf0b","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def oldExtractCardHolder(details: java.util.Map[String, String]): String = {\n  val holder = details.get(\"card_holder\")\n  if (holder == null) null else holder.toUpperCase()\n}"}
{"id":"a51dfc8b-9a5c-419d-9514-4bb4a095aa11","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def basicRuleCheck(ruleResult: java.lang.Boolean): Boolean = {\n  if (ruleResult == null) false\n  else ruleResult\n}"}
{"id":"c2b74a7d-38d9-438a-9aed-72a1a50ae90f","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def legacyFraudFlag(transactionId: String): String = {\n  if (transactionId == null) null\n  else if (transactionId.startsWith(\"FRAUD\")) \"Flagged\"\n  else null\n}"}
{"id":"df7de1ce-1045-4828-881b-5eb81d23fb7d","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getNullRiskScore(cardId: String): Integer = {\n  if (cardId == null) null\n  else if (cardId.length == 16) 88\n  else null\n}"}
{"id":"26c8b083-cdc4-4a32-b78e-cabc558cee95","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def riskyPaymentCountry(country: String): String = {\n  if(country == null) null\n  else if (country.equals(\"PT\")) \"HighRisk\"\n  else null\n}"}
{"id":"db4480b2-3dc3-4e96-a9e5-e82a214264b0","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def extractPaymentNoteField(noteField: java.util.Map[String, String]): String = {\n  if (noteField == null) null\n  else noteField.get(\"note\")\n}"}
{"id":"ce3237de-64ac-45e5-85f2-5675c9b8ed10","timestamp":1746098559114,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def verifyCardBin(bin: String): String = {\n  if(bin != null && bin.startsWith(\"9999\")) \"SuspiciousBin\"\n  else null\n}"}
{"id":"74c4ab62-86fe-4a1d-baf9-382add8dac25","timestamp":1746098573675,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class TransactionRecord(cardNumber: String, amount: Double, merchant: String)\ndef findSuspiciousMerchant(transaction: TransactionRecord): Option[String] =\n  Option(transaction.merchant).filter(_.toLowerCase.contains(\"scam\"))"}
{"id":"05fa9634-0e3c-4a7d-a085-0312d8bf2b82","timestamp":1746098573675,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getCardHolderName(accountId: String): String =\n  if (accountId == null) null\n  else accountId.reverse  // fake fetch logic"}
{"id":"768b84fd-70c6-42a4-a952-6ad52cd50a32","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def parseRiskScore(rawScore: java.lang.Integer): Option[Int] =\n  Option(rawScore).filter(_ > 50).map(_.toInt)"}
{"id":"4a423002-a571-4f44-89a2-4b35948a7404","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def fetchTransactionDetails(transactionId: String): TransactionRecord =\n  if (transactionId == null)\n    null\n  else\n    TransactionRecord(transactionId, 24.99, \"trusted-merchant.com\")"}
{"id":"73681169-d9c8-4729-9c7e-f23f1eb6b5c2","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def validateDeviceFingerprint(fingerprint: String): Boolean =\n  Option(fingerprint)\n    .exists(_.matches(\"[A-F0-9]{32}\"))"}
{"id":"8f728275-4c07-471d-9497-ffbd9415fd47","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def retrievePaymentLocation(paymentId: String): String =\n  if (paymentId == null || paymentId.isEmpty)\n    null\n  else\n    \"London\""}
{"id":"8b47bca8-6bcb-4c52-a630-c2ba6af6a48a","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"case class UserProfile(userId: String, deviceIp: Option[String])\ndef getDeviceIp(user: UserProfile): String =\n  user.deviceIp.getOrElse(\"unknown-device-ip\")"}
{"id":"d883d100-c341-4f52-9c21-56fe509a9cd0","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getFlaggedCountryCode(userId: String): String =\n  if (userId == null)\n    null\n  else if (userId.startsWith(\"X\"))\n    \"IR\"\n  else\n    null"}
{"id":"cba96beb-32cc-48cb-8a52-5bcb08e5c75b","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def suspiciousLoginDetected(ip: String, device: String): Option[String] =\n  Option(ip).flatMap(i => Option(device).map(d => s\"Suspicious login from $i on $d\"))"}
{"id":"aa1841e7-57b9-44e4-9e43-17b3ccf52155","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def fetchPreviousFraudAlert(transactionReference: String): String =\n  if (transactionReference == null)\n    null\n  else\n    \"alert-98765\"\n"}
{"id":"8fa7f25c-5ff9-466c-b8c7-1e2a7d65dc8f","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def paymentBlacklisted(bin: String): Option[String] =\n  Option(bin).filter(_.startsWith(\"6011\")).map(_ => \"Blacklisted BIN detected\")"}
{"id":"0356d61f-d097-42ea-b56d-41c4d3ea641c","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getManualReviewComment(alertId: String): String =\n  if (alertId != null && alertId.nonEmpty)\n    \"Manual review required\"\n  else\n    null"}
{"id":"201b158b-337b-485d-955f-fa003b8aa0db","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def riskTagForTransaction(transaction: Option[TransactionRecord]): String =\n  transaction.map(tr => if (tr.amount > 500) \"high-risk\" else \"normal-risk\").getOrElse(\"unknown-risk\")"}
{"id":"5ac55492-2706-4a2d-b6e7-733269b8f824","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getPaymentSourceType(paymentRecord: String): String =\n  if (paymentRecord == null)\n    null\n  else if (paymentRecord.contains(\"online\"))\n    \"internet\"\n  else\n    null"}
{"id":"7a0268fd-df9c-4380-9abe-ac4bfb83e71d","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def backgroundCheckScore(clientProfile: String): Option[Double] =\n  Option(clientProfile).map(_.length.toDouble * 1.5)"}
{"id":"6bbe5212-c5bb-481e-8296-4c2a76b75cca","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def getGeoLocationInfo(ipAddress: String): String =\n  if (ipAddress == null || ipAddress.trim == \"\")\n    null\n  else\n    \"US-California\""}
{"id":"a17dccba-5eb1-43e4-99a1-d82bc40666eb","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def recentChargebackNote(transactionId: String): Option[String] =\n  Option(transactionId).filter(_.length >= 8).map(_ => \"Chargeback potential detected.\")"}
{"id":"3a6eed9e-c53c-43cd-95b4-00a9f494468e","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def legacyScoreFromJava(customerId: String): java.lang.Double =\n  if (customerId == null)\n    null\n  else if (customerId.endsWith(\"0\"))\n    91.4\n  else\n    null"}
{"id":"93fbf28d-ffc0-4994-a2db-b2227ca3ed49","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":true,"code":"def deviceRisk(deviceId: String): Option[String] =\n  Option(deviceId).fold(\"Unsafe device\")(id => if (id.length < 6) \"Potential risk\" else \"Safe\") match  {\n    case \"Potential risk\" => Some(\"Potential device fraud\")\n    case \"Safe\" => None\n    case _ => Some(\"Unknown device state\")\n  }"}
{"id":"5b6d851b-2718-4059-9979-bdcb0db14c32","timestamp":1746098573676,"category":"null_checks","topicUsed":"Fraud detection in payments","isIdiomatic":false,"code":"def fetchFraudInvestigationReport(caseNumber: String): String =\n  if (caseNumber == null)\n    null\n  else if (caseNumber == \"123-ABCF\")\n    \"Open investigation\"\n  else\n    null"}
{"id":"008e28ab-da1c-4da8-b388-249021132b92","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object LoadDicomHeader {\n  def readDicomField(header: DicomHeader, tag: String): String = {\n    val value = header.getField(tag)\n    if (value != null) value else \"Unknown\"\n  }\n}"}
{"id":"0bbeec19-a00a-4b5b-969e-81ad833c623d","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class StudyDatabase {\n  def findSeriesById(seriesId: String): Series = {\n    val seq = queryDatabase(seriesId)\n    if (seq != null) seq else null\n  }\n  def queryDatabase(id: String): Series = {\n    // returns Series or null (Java interop)\n    null\n  }\n}"}
{"id":"2a48f300-ff2c-4420-acf3-9e1201a659b5","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object ParsePatientName {\n  def extractLastName(patientName: String): String = {\n    if (patientName != null && patientName.contains(\",\")) {\n      patientName.split(\",\")(0)\n    } else {\n      null\n    }\n  }\n}"}
{"id":"c4d60c9c-11f0-4119-bbe1-ffb288296da9","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class ImagingViewer {\n  def showImage(image: MedicalImage): Unit = {\n    if (image != null) {\n      displayImage(image)\n    } else {\n      println(\"Error: No image to display.\")\n    }\n  }\n  def displayImage(image: MedicalImage): Unit = println(\"Displaying image\")\n}"}
{"id":"02b55311-2001-430a-9c78-6a5bd814de68","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object PixelSpacingParser {\n  def getPixelSpacing(metadata: Map[String, String]): Double = {\n    val valStr = metadata.getOrElse(\"PixelSpacing\", null)\n    if (valStr != null) valStr.toDouble else 1.0\n  }\n}"}
{"id":"bc1cba6c-be2d-4fd9-862a-f4294d58b845","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class StudyLoader {\n  def loadStudyFromServer(server: PACSServer, studyId: String): ImagingStudy = {\n    val study = server.fetchStudy(studyId)\n    if (study == null) {\n      null\n    } else study\n  }\n}"}
{"id":"b7cd009c-47d6-4a4c-8528-8ddd48736917","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object SliceRetriever {\n  def retrieveSlice(volume: ImagingVolume, index: Int): ImageSlice = {\n    val slice = volume.getSlice(index)\n    if (slice != null) slice else null\n  }\n}"}
{"id":"f4b8674a-6742-426b-9b16-eb57af483a45","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"class SegmentationManager {\n  def addRegion(segmentation: SegmentationMask, region: ROI): SegmentationMask = {\n    if(segmentation == null){\n      null\n    } else {\n      segmentation.addRegion(region)\n      segmentation\n    }\n  }\n}"}
{"id":"4f3829b0-eb90-425f-adfe-9bbaea0342fc","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object AnnotationChecker {\n  def hasMeasurement(annotation: Annotation): Boolean = {\n    if (annotation != null && annotation.measurement != null) true\n    else false\n  }\n}"}
{"id":"83ae2e95-19f7-4c02-b7f1-2371238b366d","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"object SeriesExporter {\n  def exportSeries(series: ImageSeries, path: String): Boolean = {\n    if (series != null) {\n      // Dummy export\n      true\n    } else false\n  }\n}"}
{"id":"278d7334-9f29-4673-8538-c027bed96f21","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"object PatientIdExtractor {\n  def fromHeader(header: DicomHeader): Option[String] =\n    Option(header.getField(\"PatientID\"))\n}"}
{"id":"845c3a3f-3a8c-4e6a-bf8d-23ce76b347ed","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class StudyMeta(patientName: String, modality: String)\n\ndef description(meta: Option[StudyMeta]): String =\n  meta.map(m => s\"${m.patientName}, ${m.modality}\").getOrElse(\"No metadata\")"}
{"id":"17c6a85c-6886-465b-841a-6e39b8fbf5c8","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def getSeriesCount(study: Option[ImagingStudy]): Int =\n  study.map(_.series.size).getOrElse(0)"}
{"id":"bbf613d4-5922-49e5-a7c0-1ad5ffdc0f65","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"object DicomImageFactory {\n  def fromBinary(raw: Array[Byte]): Option[DicomImage] =\n    Option(DicomParser.parseImage(raw))\n}"}
{"id":"7f99ac4e-bbb9-4112-8d06-0f603986c7eb","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def selectFirstAnnotation(series: Option[ImageSeries]): Option[Annotation] =\n  series.flatMap(_.annotations.headOption)"}
{"id":"7f8ad316-4e43-4dee-9aa3-98a091a8a12f","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def getSliceThickness(headers: Map[String, String]): Option[Double] =\n  headers.get(\"SliceThickness\").map(_.toDouble)"}
{"id":"ce0855a4-215f-4a95-a193-9f5f23805bcc","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"object RoiStats {\n  def mean(mask: Option[SegmentationMask]): Double =\n    mask.map(_.intensities).filter(_.nonEmpty).map(_.sum / _.size.toDouble).getOrElse(0.0)\n}"}
{"id":"2120e0e8-af2d-4b0f-8878-77b6b90aabd1","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def modalityIsCT(header: Option[DicomHeader]): Boolean =\n  header.exists(_.getField(\"Modality\") == \"CT\")"}
{"id":"b9c5b3c8-bda2-4ad0-8899-27a9888d5870","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"object ViewerSettings {\n  def windowCenterOrDefault(settings: Option[ViewerConfig]): Int =\n    settings.map(_.windowCenter).getOrElse(40)\n}"}
{"id":"d404f703-861a-43a7-aae1-5bec6a5db5c7","timestamp":1746098589764,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def findPatient(studies: List[ImagingStudy], patientId: String): Option[ImagingStudy] =\n  studies.find(_.patientId == patientId)"}
{"id":"0ecd04ec-6fd3-4e40-bfb1-753fedc8e20c","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class DicomHeader(patientId: String, studyDate: String)\ndef parseDicomHeader(metadata: Map[String, String]): Option[DicomHeader] =\n  for\n    pid <- metadata.get(\"PatientID\")\n    sdt <- metadata.get(\"StudyDate\")\n  yield DicomHeader(pid, sdt)"}
{"id":"02f39313-654d-4239-9915-64eee08c7b11","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"class ScanSeries(val images: Array[MedicalImage])\ndef getFirstImage(series: ScanSeries): Option[MedicalImage] =\n  series.images.headOption"}
{"id":"bb38d19e-e891-4f61-8191-872170b3d89e","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"object VolumeCalculator:\n  def computeVolume(voxelCount: Option[Int], voxelSize: Option[Double]): Option[Double] =\n    for\n      count <- voxelCount\n      size  <- voxelSize\n    yield count * size"}
{"id":"a04ee5da-2c22-4d2a-b58b-134717316014","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def safePatientName(header: java.util.Map[String, String]): Option[String] =\n  Option(header.get(\"PatientName\"))"}
{"id":"4a12bb46-e644-4b76-82e1-aabd343bf88e","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"case class ImageModality(code: String)\ndef modalityOrDefault(header: Option[ImageModality]): String =\n  header.map(_.code).getOrElse(\"Unknown\")"}
{"id":"7e744194-9b0c-4703-94ea-dc48f76d95e9","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def selectValidImage(image: MedicalImage): Option[MedicalImage] =\n  Option(image).filter(_.pixels.nonEmpty)"}
{"id":"ba619d93-7811-4cb9-8b19-1ecbad9eab2e","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def displayIntensity(image: Option[MedicalImage]): String =\n  image.flatMap(_.getIntensity).map(_.toString).getOrElse(\"Not Available\")"}
{"id":"cf8cd527-5953-4ab9-b4d3-c48dfbfe0803","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def orientationLabel(matrix: Option[Array[Double]]): String =\n  matrix.fold(\"No orientation info\")(_ => \"Orientation found\")"}
{"id":"681cdc0a-6dfd-426b-9c74-5ed738735f8f","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def tryFindStudy(images: Seq[MedicalImage], studyId: String): Option[MedicalImage] =\n  images.find(_.studyId == studyId)"}
{"id":"d67a2e6a-d5e6-412d-950c-eb20e2f99fec","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def anonymizeHeader(header: Option[DicomHeader]): Option[DicomHeader] =\n  header.map(h => h.copy(patientId = \"ANON\"))"}
{"id":"5e56e981-c002-48e5-9695-f70efdfd31f6","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def javaGetDicomSlice(idx: Int): MedicalImage = null\ndef getDicomSliceOption(idx: Int): Option[MedicalImage] =\n  Option(javaGetDicomSlice(idx))"}
{"id":"69de48ab-7667-44ca-9d68-d645af563177","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def getImageContrastValue(optContrast: Option[Double]): String =\n  optContrast match\n    case Some(value) => s\"Contrast: $value\"\n    case None => \"Contrast: N/A\""}
{"id":"72c795b0-5a71-413d-8b28-561fe139ce30","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def getFirstNonEmptySeries(seriesList: Seq[ScanSeries]): Option[ScanSeries] =\n  seriesList.find(_.images.nonEmpty)"}
{"id":"84a50297-1c2c-4cb4-99a6-01c82be8e00a","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def lookupStudyDescription(metadata: Map[String, String]): Option[String] =\n  metadata.get(\"StudyDescription\")"}
{"id":"301c5669-f8c7-4978-b5ce-503282c45b65","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def calculateSliceSpacing(metadata: Option[Map[String, String]]): Option[Double] =\n  metadata.flatMap(_.get(\"SliceSpacing\")).flatMap(s => scala.util.Try(s.toDouble).toOption)"}
{"id":"73ffe5a3-7717-49b0-936d-ff1b6473eade","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def patientBirthDate(metadata: Map[String, String]): Option[String] =\n  metadata.get(\"PatientBirthDate\")"}
{"id":"66d7fb31-a6a4-45a1-aa90-76142c1f9d66","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def selectPreferredViewerConfig(configOpt: Option[ViewerConfig]): ViewerConfig =\n  configOpt.getOrElse(ViewerConfig.default)"}
{"id":"63bd7c38-867f-4d0a-ada8-48c583df6c93","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def centerPixelValue(image: Option[MedicalImage]): Option[Int] =\n  image.flatMap(_.centerPixelValue)"}
{"id":"a299914d-213f-4695-aa74-fd34aa166fc8","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def combineStudyIds(id1: Option[String], id2: Option[String]): Option[String] =\n  for\n    a <- id1\n    b <- id2\n  yield s\"$a-$b\""}
{"id":"77342ff0-5b97-44da-aabc-d585cdc9cb0b","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":true,"code":"def seriesDescription(header: Option[DicomHeader]): String =\n  header.map(_.studyDate).getOrElse(\"Description Missing\")"}
{"id":"4a3dce3c-d289-46ca-8252-90b4e2a8a250","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getSeriesFromJava(id: String): ImagingSeries = JavaImageLibrary.findSeries(id)\nif (getSeriesFromJava(\"SR12\") != null) println(\"Found series\") else println(\"Not found\")"}
{"id":"69e132bd-b2eb-43a8-8430-3002cba56675","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"val slice: MedicalImage = JavaImageLoader.loadImageSlice(\"IMG_005\")\nif (slice == null)\n  println(\"Error: Could not load image slice.\")\nelse\n  println(\"Slice loaded: \" + slice.id)"}
{"id":"564b5aa6-ed95-4aa7-a2c0-ca16041a8ed8","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def maybeGetPatientStudy(patientId: String): DicomStudy = HospitalDbAPI.fetchStudy(patientId)\nif (maybeGetPatientStudy(\"432\") == null)\n  println(\"No study found for patient.\")"}
{"id":"b0f51eeb-2ec1-4f49-9ffe-ecaa5e608dc4","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"val anonymized: DicomHeader = null\nif (anonymized == null) println(\"Header removal failed.\")"}
{"id":"960aec54-1e7c-4822-8a37-863dc181f56a","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getSeriesUID(header: java.util.Map[String, String]): String =\n  val result = header.get(\"SeriesInstanceUID\")\n  if (result != null) result else null"}
{"id":"3997426c-d2b9-4fdc-bd9f-9986e4ca4e40","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"val proprietaryTagValue = hospitalDicomStream.readTag(\"Private1234\")\nif (proprietaryTagValue != null) println(proprietaryTagValue) else println(\"Tag missing\")"}
{"id":"2ebe4bcd-50b2-4095-ab14-6899361a844b","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getReferencedInstance(image: MedicalImage): ReferencedInstance =\n  if (image.reference != null) image.reference else null"}
{"id":"b9eaf868-3269-4403-9ac0-a5912ffbafe2","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def findModalityCode(meta: java.util.Map[String, String]): String =\n  val code = meta.get(\"Modality\")\n  if (code != null) code else null"}
{"id":"aa1faadd-87e3-4e89-b6a8-1e524afdac10","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def checkAnnotation(annotation: ImageAnnotation): Boolean =\n  if (annotation == null) false else annotation.isVisible"}
{"id":"7bedbd64-ec93-44a7-a751-7912221f1547","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def displayWindowLevel(windowLevel: ViewingParameters): String =\n  if (windowLevel == null) \"No window/level\" else s\"${windowLevel.window}/${windowLevel.level}\""}
{"id":"83140a4a-278a-4574-b486-f006f747c67b","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def extractOrientation(header: DicomHeader): String =\n  if (header.orientation != null) header.orientation else \"Unknown\""}
{"id":"e4e9f3bd-242c-42e6-b7be-d670abc13b63","timestamp":1746098619443,"category":"null_checks","topicUsed":"Medical imaging data viewer","isIdiomatic":false,"code":"def getPatientInstitution(header: java.util.Map[String, String]): String =\n  val inst = header.get(\"InstitutionName\")\n  if (inst == null) \"-\" else inst"}
{"id":"7b25791a-e0b4-4ce3-80a1-372a14c2f8bd","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"case class PaymentLink(id: String, amount: Double, status: String)\ndef getPaymentLinkOrNull(linkId: String): PaymentLink = {\n  if (linkId == \"active-123\") PaymentLink(linkId, 120.0, \"ACTIVE\")\n  else null\n}"}
{"id":"6f6d968f-80f3-46e7-88be-6d1aa2318a37","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkRepository {\n  def fetchPaymentLinkById(linkId: String): PaymentLink = {\n    if (linkId != null && linkId.startsWith(\"plk_\"))\n      PaymentLink(linkId, 99.99, \"PENDING\")\n    else\n      null\n  }\n}"}
{"id":"545d5fae-fb26-40cd-a40a-982c0b9b7962","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"object PaymentLinkJavaCaller {\n  def findPaymentLinkFromJava(id: String): PaymentLink = {\n    if (id.length > 6) PaymentLink(id, 80.0, \"CREATED\") else null\n  }\n  def getStatus(linkId: String): String = {\n    val link = findPaymentLinkFromJava(linkId)\n    if (link != null) link.status else null\n  }\n}"}
{"id":"c8b4cc1b-1cd8-4126-9fb9-846dee6af151","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def markPaymentLinkAsProcessed(link: PaymentLink): String = {\n  if (link == null) \"Cannot mark null link as processed\"\n  else \"Payment Link \" + link.id + \" processed.\"\n}"}
{"id":"97c65280-4c2c-481c-b197-4993d80c8a8d","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def cancelPaymentLink(link: PaymentLink): Boolean = {\n  if (link != null && link.status != null && link.status == \"ACTIVE\") {\n    true\n  } else {\n    false\n  }\n}"}
{"id":"be9a08bd-523b-49bd-8901-0efbcfef4140","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def getPaymentLinkStatus(link: PaymentLink): String = {\n  if (link != null && link.status != null) link.status\n  else \"UNKNOWN\"\n}"}
{"id":"bfbee0a1-884b-4635-99ec-aaa720b82f78","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def duplicatePaymentLink(link: PaymentLink): PaymentLink = {\n  if (link == null) null\n  else PaymentLink(link.id + \"-copy\", link.amount, link.status)\n}"}
{"id":"8c21147f-badc-4dbf-b716-ffb2e31a9746","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def mergePaymentLinks(primary: PaymentLink, secondary: PaymentLink): PaymentLink = {\n  if (primary == null) secondary\n  else if (secondary == null) primary\n  else PaymentLink(primary.id, primary.amount + secondary.amount, primary.status)\n}"}
{"id":"e33b4b73-5cdf-47b9-9cb7-48f77ac0130a","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def computeLinkAmountOrNull(link: PaymentLink): java.lang.Double = {\n  if (link == null) null else link.amount\n}"}
{"id":"61dda7f1-050c-4610-8f91-5f1e14e04afc","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def notifyOnPending(link: PaymentLink): String = {\n  if (link != null && link.status == \"PENDING\")\n    s\"Notification sent for Payment Link ${link.id}\"\n  else\n    null\n}"}
{"id":"de4aea7b-c758-423f-b057-d97de605f9f3","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def findPaymentLink(linkId: String): Option[PaymentLink] =\n  if linkId == \"active-123\" then Some(PaymentLink(linkId, 120.0, \"ACTIVE\")) else None"}
{"id":"87c316ba-dec4-4f75-8f5e-f0d04980ff29","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def safelyGetStatus(maybeLink: Option[PaymentLink]): String =\n  maybeLink.map(_.status).getOrElse(\"NOT_FOUND\")"}
{"id":"a0e362a0-6780-463c-ae75-f9e04f71bbb4","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def cancelActivePaymentLink(optLink: Option[PaymentLink]): Boolean =\n  optLink.exists(_.status == \"ACTIVE\")"}
{"id":"8218a062-04b7-4eb0-883a-810f6e85ce33","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def safeDuplicatePaymentLink(linkOpt: Option[PaymentLink]): Option[PaymentLink] =\n  linkOpt.map(link => PaymentLink(link.id + \"-copy\", link.amount, link.status))"}
{"id":"df686c0f-3bb3-420e-9978-de82d2577323","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def mergePaymentLinksOpt(p: Option[PaymentLink], s: Option[PaymentLink]): Option[PaymentLink] =\n  (p, s) match {\n    case (Some(primary), Some(secondary)) =>\n      Some(PaymentLink(primary.id, primary.amount + secondary.amount, primary.status))\n    case (Some(l), None) => Some(l)\n    case (None, Some(l)) => Some(l)\n    case _ => None\n  }"}
{"id":"b0826797-c776-43ba-8368-3dd44bbef397","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def wrapNullableAmount(amount: java.lang.Double): Option[Double] =\n  Option(amount).map(_.doubleValue)"}
{"id":"a916d0a6-bf3f-4dfd-a0ad-a977de1002d8","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def notifyIfPending(link: Option[PaymentLink]): Option[String] =\n  link.filter(_.status == \"PENDING\").map(l => s\"Notification sent for Payment Link ${l.id}\")"}
{"id":"a956e4a0-b367-40e8-9def-a03c11072546","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def fetchPaymentLinkFromInterop(linkId: String): Option[PaymentLink] =\n  Option(if linkId.contains(\"java\") then PaymentLink(linkId, 11.11, \"CREATED\") else null)"}
{"id":"b17dfd06-bcf5-4445-bcf6-f13a40a2df0e","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def getProcessedStatus(optLink: Option[PaymentLink]): String =\n  optLink.fold(\"No link to process.\") { link => s\"Payment Link ${link.id} processed.\" }"}
{"id":"349bc9a8-ec8a-4813-a2be-df3b2d7fd6a3","timestamp":1746098633489,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def paymentLinkIsPending(link: Option[PaymentLink]): Boolean =\n  link.exists(_.status == \"PENDING\")"}
{"id":"c5a756c9-f003-44eb-a21f-d72ae0204567","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"case class PaymentLink(id: String, amount: BigDecimal)\ndef getActivePaymentLinkById(linkId: String, linkRepo: PaymentLinkRepository): Option[PaymentLink] =\n  Option(linkRepo.findById(linkId)).filter(_.isActive)"}
{"id":"5dadded9-5b05-4c10-b846-aa54894db2b1","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def getPaymentLinkOwner(link: PaymentLink): Option[String] =\n  Option(link.ownerId)"}
{"id":"7cc8c2ec-88f0-4b84-8ad8-b2e73fd7d46e","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"class PaymentLinkJavaGateway {\n  def fetchLink(linkId: String): PaymentLink = null\n}\ndef retrieveLinkOption(linkId: String, gateway: PaymentLinkJavaGateway): Option[PaymentLink] =\n  Option(gateway.fetchLink(linkId))"}
{"id":"fe5dfb24-6333-4c1a-a578-ffcd13f1e4ba","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def linkTitleOrDefault(paymentLink: PaymentLink): String =\n  Option(paymentLink.title).getOrElse(\"Untitled Payment Link\")"}
{"id":"63adbba1-5461-4ba8-a311-33f109123c27","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def maybeGetLinkAmount(link: PaymentLink): Option[BigDecimal] =\n  Option(link.totalAmount)"}
{"id":"956a533d-7463-4ccd-832b-fd233bf1a7e9","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def filterValidLinks(links: List[PaymentLink]): List[PaymentLink] =\n  links.filter(link => Option(link.status).contains(\"ACTIVE\"))"}
{"id":"1cc9f1d1-6fe1-4974-ac84-bfa3f8bfb292","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def findCustomerEmail(link: PaymentLink): Option[String] =\n  Option(link.customerEmail).filter(_.contains(\"@\"))"}
{"id":"9f6b292f-8e8a-474b-aabe-6f6b353d4991","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def setOptionalDiscount(link: PaymentLink, discount: Option[BigDecimal]): PaymentLink =\n  link.copy(discountAmount = discount.getOrElse(BigDecimal(0)))"}
{"id":"6db41d6f-6c67-4317-971b-97376fc377b2","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def linkShortUrl(link: PaymentLink): Option[String] =\n  Option(link.shortUrl)"}
{"id":"246f365b-df33-435f-b16c-3b708ac7ff5d","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def paymentLinkStatus(link: PaymentLink): String =\n  Option(link.status).fold(\"UNKNOWN\")(_.toUpperCase)"}
{"id":"f655e9a9-9198-450c-bd09-51cd80d9d949","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def getPaymentLinkRecipient(linkId: String, repo: PaymentLinkRepository): String =\n  Option(repo.findById(linkId)).flatMap(l => Option(l.recipientName)).getOrElse(\"No recipient\")"}
{"id":"23d03eab-7f75-4803-8fc8-6e5a7fd8dd69","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def deleteInactiveLinkOrNone(linkId: String, repo: PaymentLinkRepository): Option[String] =\n  Option(repo.findById(linkId)).filterNot(_.isActive).map(_.id)"}
{"id":"9aa1a06b-45a5-49da-97a0-f7c37494f25a","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def getLinkDescriptionOrDefault(link: PaymentLink): String =\n  Option(link.description).filter(_.nonEmpty).getOrElse(\"No description provided\")"}
{"id":"191faba1-b547-48f0-9001-94a339f6e55e","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def safeParseLinkAmount(amount: String): Option[BigDecimal] =\n  try Some(BigDecimal(amount)) catch case _: Throwable => None"}
{"id":"da6f1ece-b38c-4c5f-8d86-435946d70e9c","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def foldOverOptionalPromo(link: PaymentLink): String =\n  Option(link.promoCode).fold(\"No Promo\")(_ => \"Promo applied!\")"}
{"id":"01f878ca-6522-4f86-8620-9ade1d69fbb8","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def getPaymentLinkWithStatus(linkId: String, repo: PaymentLinkRepository): Option[(PaymentLink, String)] =\n  Option(repo.findById(linkId)).map(link => (link, Option(link.status).getOrElse(\"UNKNOWN\")))"}
{"id":"0a1767d4-4689-4f75-b573-77216a80f250","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def isPaymentLinkForEmail(link: PaymentLink, email: String): Boolean =\n  Option(link.customerEmail).exists(_.equalsIgnoreCase(email))"}
{"id":"74d77e56-a529-41c9-b0b6-c71912f7d4af","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"class PaymentLinkNullableJavaRepo {\n  def findByRecipient(recipient: String): PaymentLink = null\n}\ndef safeFindByRecipient(recipient: String, javaRepo: PaymentLinkNullableJavaRepo): Option[PaymentLink] =\n  Option(javaRepo.findByRecipient(recipient))"}
{"id":"728e6bd5-b94b-4383-b38e-96783a153f9e","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def optionalLinkExpirationDate(paymentLink: PaymentLink): Option[java.time.LocalDate] =\n  Option(paymentLink.expirationDate)\n"}
{"id":"e9edb2a6-6b9a-451c-a2e8-8f27328ded08","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":true,"code":"def withSafeDiscountAmount(link: PaymentLink): Option[BigDecimal] =\n  Option(link.discountAmount).filter(_ > 0)"}
{"id":"44274fd7-72a7-4603-9185-95600e3ae074","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class PaymentLinkRepository {\n  def findById(linkId: String): PaymentLink = null\n}\ndef getActiveLink(linkId: String, repo: PaymentLinkRepository): PaymentLink =\n  val link = repo.findById(linkId)\n  if (link != null && link.isActive) link else null"}
{"id":"c897be7d-63e4-4c51-8c55-8029b3aff89a","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class CustomerInfoJavaClient {\n  def getPaymentLinkOwner(link: PaymentLink): String = null\n}\ndef getOwnerOrNull(link: PaymentLink, client: CustomerInfoJavaClient): String =\n  val owner = client.getPaymentLinkOwner(link)\n  if (owner != null) owner else null"}
{"id":"2c36fb33-cea0-4f13-ae60-b8b4415410d9","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def unsafeTitle(link: PaymentLink): String =\n  if (link.title != null) link.title else null"}
{"id":"d6dd9a84-76cd-41da-b009-cb198a22a312","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def fetchLinkStatus(link: PaymentLink): String =\n  if (link.status == null) null else link.status.toLowerCase"}
{"id":"da4fc445-06a4-4afe-9932-ca50ea95eb06","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def returnNullIfInactive(link: PaymentLink): PaymentLink =\n  if (link.isActive) link else null"}
{"id":"17f05dea-d0e2-47e8-9668-808a2d5d208e","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def assignNullEmailIfMissing(link: PaymentLink): PaymentLink =\n  if (link.customerEmail == null) link.copy(customerEmail = null) else link"}
{"id":"40b8b0e5-a390-45a1-b47a-fe9b2dfca94f","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def linkShortUrlOrNull(link: PaymentLink): String =\n  if (link.shortUrl != null) link.shortUrl else null"}
{"id":"83b0996c-8d51-4767-96bc-40373b5fd781","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"class DiscountJavaApi {\n  def getActiveDiscount(linkId: String): java.math.BigDecimal = null\n}\ndef unsafeActiveDiscountAmount(linkId: String, api: DiscountJavaApi): java.math.BigDecimal =\n  val discount = api.getActiveDiscount(linkId)\n  if (discount != null) discount else null"}
{"id":"20a89ba8-24f8-4f50-a413-184b1ab38662","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def getNullablePromoCode(link: PaymentLink): String =\n  if (link.promoCode == null) null else link.promoCode"}
{"id":"1397db0b-8589-47e5-93a3-fa20eef6bc33","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def setExpirationDateOrNull(link: PaymentLink, expiration: java.time.LocalDate): PaymentLink =\n  if (expiration == null) link.copy(expirationDate = null) else link.copy(expirationDate = expiration)"}
{"id":"759b0c29-4225-410f-84ed-01556bbc2308","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def unsafeLinkDescription(link: PaymentLink): String =\n  if (link.description == null) null else link.description"}
{"id":"2af1db30-3af6-4f8e-8d69-500cdc35582d","timestamp":1746098665233,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def getDiscountOrNull(link: PaymentLink): java.math.BigDecimal =\n  if (link.discountAmount != null) link.discountAmount else null"}
{"id":"34b33149-fe59-4e73-822e-c1ec4858c1bc","timestamp":1746098665234,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def unsafeRecipientName(link: PaymentLink): String =\n  if (link.recipientName != null) link.recipientName else null"}
{"id":"761639de-4b39-43e0-bb13-ef80b1f6b2c4","timestamp":1746098665234,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def deleteLinkOrReturnNull(linkId: String, repo: PaymentLinkRepository): PaymentLink =\n  val link = repo.findById(linkId)\n  if (link != null && !link.isActive) null else link"}
{"id":"3af5786e-15ed-4364-8aaf-4b00d4fab597","timestamp":1746098665234,"category":"null_checks","topicUsed":"Wix backend service for managing Payment Links","isIdiomatic":false,"code":"def setNullIfDescriptionEmpty(link: PaymentLink): PaymentLink =\n  if (link.description == \"\") link.copy(description = null) else link"}
{"id":"83982180-2896-49ab-a1a4-996e561e17ab","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object TranslateUserInput1:\n  def translateText(text: String, targetLang: String): String =\n    if (text == null || targetLang == null) null\n    else s\"[${targetLang}] $text\""}
{"id":"9aebf9c0-bf8c-411c-bcdb-6857ddbf87bb","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class UserProfileDatabase1:\n  def fetchUserPreferredLanguage(username: String): String =\n    if (username == null) null\n    else if (username == \"alice\") \"en\"\n    else null"}
{"id":"984e0df1-9f15-4e19-902b-50e72e3ab922","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object BotResponseGenerator1:\n  def constructResponse(translatedMessage: String): String =\n    if (translatedMessage != null) s\"Bot: $translatedMessage\"\n    else \"Bot: Sorry, translation unavailable.\""}
{"id":"1064a7b2-9c0a-419f-a8d6-7209e27c1cf0","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class ExternalTranslationService1:\n  def callJavaApiForTranslation(message: String, language: String): String =\n    if (message == null || language == null) null\n    else s\"Translated($message) to $language\""}
{"id":"6dcc1b60-49c3-497d-a725-cfaa0e0b70c4","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object LanguageValidation1:\n  def isLanguageSupported(lang: String): Boolean =\n    if (lang == null) false\n    else List(\"en\",\"es\",\"fr\").contains(lang)"}
{"id":"abc0b303-17b6-4c07-b2c2-583f289d4843","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class SessionManager1:\n  var latestUserMessage: String = null\n  def setUserMessage(msg: String): Unit =\n    if (msg != null) latestUserMessage = msg\n  def getUserMessage: String = latestUserMessage"}
{"id":"b159868c-fc5b-4ff9-89e6-c1ab7a3aa28d","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object NullSafeFormatter1:\n  def formatTranslation(original: String, translated: String): String =\n    if (original == null || translated == null) \"Invalid input\"\n    else s\"Original: $original | Translated: $translated\""}
{"id":"8b6a6a83-8d6d-442f-b541-3ef5fcb54db3","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object ChatLogAppender1:\n  def appendMessage(log: java.util.List[String], message: String): Unit =\n    if (log != null && message != null) log.add(message)"}
{"id":"623ba37b-6003-4c11-99ab-8efdcad711bc","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class JavaLanguageApiBridge1:\n  def getLanguageNameByCode(code: String): String =\n    if (code == \"en\") \"English\"\n    else if (code == \"es\") \"Spanish\"\n    else null"}
{"id":"89efc3be-2d61-4862-babc-17a328a306b1","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object UserSessionValidator1:\n  def validateActiveSession(sessionId: String): Boolean =\n    if (sessionId == null) false\n    else sessionId.matches(\"session-\\\\d+\")"}
{"id":"eb50fd60-db43-409a-a4c9-ff9a85774feb","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object TranslationOptionHandler1:\n  def safeTranslateText(text: String, targetLang: String): Option[String] =\n    Option(text).flatMap(t => Option(targetLang).map(lang => s\"[$lang] $t\"))"}
{"id":"3e8d676d-7b48-482f-b5e8-590e01589bef","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"class UserProfileRepository2:\n  def findPreferredLanguage(username: String): Option[String] =\n    Option(username).collect {\n      case \"alice\" => \"en\"\n      case \"juan\"  => \"es\"\n    }"}
{"id":"0fb690e3-87d4-4c1d-a710-7b44807e93bf","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object BotResponseGenerator2:\n  def constructOptionResponse(translatedMessage: Option[String]): String =\n    translatedMessage.getOrElse(\"Bot: Sorry, translation unavailable.\")"}
{"id":"2d397274-9d6f-4a8d-80f2-7009265065e5","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"class ExternalTranslationService2:\n  def wrapJavaApiResponse(msg: String, lang: String): Option[String] =\n    Option(msg).flatMap(m => Option(lang).map(l => s\"Translated($m) to $l\"))"}
{"id":"c68f9942-1d49-40d4-8ea0-bde3b4f7bf86","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object LanguageValidation2:\n  def isLanguageSupportedOpt(lang: Option[String]): Boolean =\n    lang.exists(List(\"en\",\"es\",\"fr\").contains)"}
{"id":"89ce74f0-dd00-42e9-8743-5c6b6518b8e2","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"class SessionManager2:\n  private var latestUserMessage: Option[String] = None\n  def setUserMessage(msg: String): Unit =\n    latestUserMessage = Option(msg)\n  def getUserMessage: Option[String] = latestUserMessage"}
{"id":"f33f8166-b77e-4b86-9114-ed1db267f749","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object NullSafeFormatter2:\n  def formatTranslation(original: Option[String], translated: Option[String]): String =\n    (original, translated) match\n      case (Some(o), Some(t)) => s\"Original: $o | Translated: $t\"\n      case _ => \"Invalid input\""}
{"id":"865c325f-ea39-4c78-9356-9fc52218cdd4","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object ChatLogAppender2:\n  def appendMessage(log: Option[java.util.List[String]], message: Option[String]): Option[java.util.List[String]] =\n    for l <- log; m <- message do l.add(m)\n    log"}
{"id":"d5428d11-3550-4d69-b64a-7b1aefc9bbd3","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"class JavaLanguageApiBridge2:\n  def getLanguageNameByCodeOpt(code: String): Option[String] =\n    Option(code).collect {\n      case \"en\" => \"English\"\n      case \"es\" => \"Spanish\"\n    }"}
{"id":"0cf55d75-dd18-4b23-a7d2-9b6d7e020b14","timestamp":1746098680081,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object UserSessionValidator2:\n  def validateActiveSession(sessionId: Option[String]): Boolean =\n    sessionId.exists(_.matches(\"session-\\\\d+\"))"}
{"id":"9cff41d0-f287-4e1f-ab69-583bec021625","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object LanguageDetector {\n  def detect(input: String | Null): String = {\n    if (input == null) {\n      \"unknown\"\n    } else if (input.contains(\"Bonjour\")) {\n      \"French\"\n    } else if (input.contains(\"Hello\")) {\n      \"English\"\n    } else {\n      \"unknown\"\n    }\n  }\n}"}
{"id":"1062a855-d70e-42d9-a4ed-5486647872e0","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class UserSession {\n  var activeLanguage: String = null\n\n  def setActiveLanguage(language: String): Unit = {\n    if (language != null) {\n      activeLanguage = language\n    }\n  }\n  def getActiveLanguage(): String = {\n    if (activeLanguage == null) \"undetected\" else activeLanguage\n  }\n}"}
{"id":"e63acf52-cc23-4ad9-9181-e51dbbb07f3c","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object PhraseMemory {\n  def rememberPhrase(userPhrase: String): String = {\n    if (userPhrase == null) {\n      \"Phrase not remembered.\"\n    } else {\n      \"Remembered: \" + userPhrase\n    }\n  }\n}"}
{"id":"b4ffab7a-9c26-48dc-895d-7c2b83c90cb6","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object ExternalTranslator {\n  def translateWithLegacySystem(text: String, targetLang: String): String = {\n    // Hypothetical Java API that may return null\n    val translation = legacyTranslate(text, targetLang)\n    if (translation == null) {\n      \"[Translation unavailable]\"\n    } else {\n      translation\n    }\n  }\n  def legacyTranslate(input: String, lang: String): String = {\n    if (input == null || lang == null) null else s\"$input (in $lang)\"\n  }\n}"}
{"id":"eba1d09e-9a1a-4f06-94f5-f77578a5ab2d","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class ConversationHistory {\n  private var lastMessage: String = null\n  def update(message: String): Unit = {\n    if (message != null) lastMessage = message\n  }\n  def getLast(): String = lastMessage\n}"}
{"id":"ebe4215a-1bcc-48fb-8bff-92e705b7a983","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object NullLanguageFallback {\n  def getLanguage(userPreferred: String): String = {\n    if (userPreferred == null) \"English\"\n    else userPreferred\n  }\n}"}
{"id":"a1785379-862c-4066-b3ea-e8b8ddd83620","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class ChatBotName {\n  var displayName: String = null\n  def setDisplayName(name: String): Unit = {\n    if (name != null) displayName = name\n  }\n  def greet(): String = {\n    if (displayName == null) \"Hello!\" else s\"Hello, I'm $displayName!\"\n  }\n}"}
{"id":"3c882b65-d3f1-41da-b6b8-f12ea3c04d4f","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object MessageSanitizer {\n  def sanitize(input: String): String = {\n    if (input != null) input.trim else null\n  }\n}"}
{"id":"d9b0c93b-949f-4986-ae97-ddbc818782c5","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"object TranslationRequestHandler {\n  def handleRequest(requestPayload: String, langCode: String): String = {\n    if (requestPayload == null || langCode == null) {\n      \"Error: Invalid request\"\n    } else {\n      s\"Translating '$requestPayload' to $langCode\"\n    }\n  }\n}"}
{"id":"1ed36edb-047e-485e-852c-f27c1f588d75","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":false,"code":"class UserPreferredLanguage {\n  private var preferred: String = null\n  def setPreferred(lang: String): Unit = {\n    if (lang != null) preferred = lang\n  }\n  def getPreferred(): String = {\n    if (preferred != null) preferred else \"en\"\n  }\n}"}
{"id":"c7528262-a71c-41e2-930b-cce8512c5a02","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class DetectedLanguage(code: String)\nobject LanguageDetectorSafe {\n  def detect(input: String): Option[DetectedLanguage] = {\n    if input.contains(\"Bonjour\") then Some(DetectedLanguage(\"fr\"))\n    else if input.contains(\"Hello\") then Some(DetectedLanguage(\"en\"))\n    else None\n  }\n}"}
{"id":"7d80bbcc-542f-42bf-9911-0ffeea442c84","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object TranslationOptionUtil {\n  def safeTranslate(raw: String | Null, lang: String): Option[String] =\n    Option(raw).map(r => s\"$r translated to $lang\")\n}"}
{"id":"f7f9434d-0c0c-4895-b673-46b1666e6c44","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object NullSafeLanguageSelector {\n  def pickLanguage(preferred: Option[String]): String = \n    preferred.getOrElse(\"English\")\n}"}
{"id":"3c0cb93c-d1d0-4f3d-9a16-e9ac9e728c77","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"case class ChatMessage(content: String)\nobject MessageRetriever {\n  def getLastMessage(history: List[ChatMessage]): Option[ChatMessage] = {\n    history.lastOption\n  }\n}"}
{"id":"8171c6a8-28df-4169-978a-dc637bd48d7b","timestamp":1746098696691,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object MessageWrapper {\n  def wrapPossiblyNull(message: String | Null): Option[String] = Option(message)\n}"}
{"id":"cc286499-4f03-45bd-9798-4e99cf19cfd2","timestamp":1746098696692,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object OptionPatternMatcher {\n  def describeLanguage(opt: Option[String]): String = opt match\n    case Some(\"fr\") => \"French\"\n    case Some(\"en\") => \"English\"\n    case _ => \"Unknown language\"\n}"}
{"id":"787fe3aa-7709-42ca-9f74-34c3ad4bc012","timestamp":1746098696692,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object SafeReplyGenerator {\n  def generateReply(userText: String | Null): Option[String] =\n    Option(userText).filter(_.nonEmpty).map(text => s\"You said: $text\")\n}"}
{"id":"5c009341-d409-474e-8429-46dd33d1733b","timestamp":1746098696692,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object OptionFoldTranslator {\n  def translateOrDefault(textOpt: Option[String], target: String): String =\n    textOpt.fold(\"[Missing text]\")(_.toUpperCase + s\" ($target)\")\n}"}
{"id":"756389d3-c23e-4d38-93e7-84d41545b301","timestamp":1746098696692,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object ChainedTranslation {\n  def chainTranslate(msg: String | Null, lang: String): Option[String] =\n    Option(msg).map(_.trim).filter(_.nonEmpty).map(m => s\"Trans: $m -> $lang\")\n}"}
{"id":"43a7599a-21dd-433e-87de-22660525b5e0","timestamp":1746098696692,"category":"null_checks","topicUsed":"Language translation chat bot","isIdiomatic":true,"code":"object NullableToOptionExample {\n  def fromJavaApi(text: String | Null): Option[String] = Option(text)\n}"}
{"id":"7ade0a9d-a395-467d-b40c-282e0747f848","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"case class ConsumptionRecord(timestamp: Long, kilowattHours: Double)\n\ndef fetchConsumptionFromJavaApi(deviceId: String): ConsumptionRecord = {\n  // Simulate possible Java null return\n  if deviceId == \"device-404\" then null else ConsumptionRecord(1684354310L, 15.3)\n}\n\ndef totalConsumption(deviceId: String): Double = {\n  val record = fetchConsumptionFromJavaApi(deviceId)\n  if (record != null) record.kilowattHours else 0.0\n}"}
{"id":"19d219e5-59da-450e-a478-5e507ec032f9","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class SolarPanel(val panelId: String) {\n  var lastReading: ConsumptionRecord = null\n  def updateReading(newReading: ConsumptionRecord): Unit = {\n    lastReading = newReading\n  }\n  def getMostRecentKWh(): Double = {\n    if (lastReading != null) lastReading.kilowattHours else -1.0\n  }\n}"}
{"id":"bae23ba4-2aa0-4a51-95f4-20e912380932","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object GridStatusReader {\n  def getGridStatus(buildingId: String): String = {\n    // Simulates Java code that can return null\n    if buildingId == \"unknown\" then null else \"Active\"\n  }\n  def showStatus(buildingId: String): String = {\n    val status = getGridStatus(buildingId)\n    if (status != null) status else \"Unavailable\"\n  }\n}"}
{"id":"7f923789-6cbd-49cf-a7c0-8ce769d73944","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getConsumptionAlert(messageId: String): String = {\n  if (messageId == \"ALERT_0\") null else \"Consumption threshold breached!\"\n}\n\ndef displayAlert(messageId: String): String = {\n  val alert = getConsumptionAlert(messageId)\n  if (alert != null) s\"Alert: $alert\" else \"No alert.\"\n}"}
{"id":"e04d7816-987c-4e78-a98e-a451a043561d","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object MeterReader {\n  def retrieveMeterId(userId: String): String = {\n    if (userId == \"userX\") null else s\"MTR-$userId\"\n  }\n  def getMeterDisplay(userId: String): String = {\n    val id = retrieveMeterId(userId)\n    if (id != null) s\"Meter $id Ready\" else \"Meter unavailable\"\n  }\n}"}
{"id":"d70ae824-f62b-4426-8f7b-3fdeb71c0caa","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def fetchHourlyUsageFromApi(hour: Int): ConsumptionRecord = {\n  if (hour < 0 || hour > 23) null else ConsumptionRecord(System.currentTimeMillis(), 2.4 * hour)\n}\n\ndef safeUsageKWh(hour: Int): String = {\n  val usage = fetchHourlyUsageFromApi(hour)\n  if (usage != null) f\"${usage.kilowattHours}%.2f kWh\"\n  else \"No data for this hour.\"\n}"}
{"id":"58e57928-59ab-49b0-b933-67b35546fe2d","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class DeviceEnergyInfo {\n  private var status: String = null\n  def setStatus(newStatus: String | Null): Unit = {\n    status = newStatus\n  }\n  def statusMessage(): String = {\n    if (status != null) status else \"Status unknown\"\n  }\n}"}
{"id":"20ccf1fa-afbf-44e4-9bb1-e2d30051d830","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getPeakHourFromLegacyApi(roomName: String): Integer = {\n  if roomName == \"BoilerRoom\" then null else Integer.valueOf(18)\n}\n\ndef adjustDisplayForPeak(roomName: String): String = {\n  val peakHour = getPeakHourFromLegacyApi(roomName)\n  if (peakHour != null) s\"Peak hour is ${peakHour.intValue()}\"\n  else \"No peak hour for this room.\"\n}"}
{"id":"717f498d-2440-4db8-82a3-3cf8dc3997a3","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object BillingEngine {\n  def lastBillAmount(accountId: String): java.lang.Double = {\n    if accountId == \"zero\" then null else java.lang.Double.valueOf(98.5)\n  }\n  def formattedBill(accountId: String): String = {\n    val amount = lastBillAmount(accountId)\n    if (amount != null) f\"Amount: $$${amount.doubleValue()}%.2f\" else \"No bill available.\"\n  }\n}"}
{"id":"25138e84-daef-468c-b9c0-e3f8ccd6064d","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def fetchDeviceName(deviceSerial: String): String = {\n  if deviceSerial.contains(\"ERR\") then null else s\"Device-$deviceSerial\"\n}\n\ndef uppercaseDeviceName(deviceSerial: String): String = {\n  val d = fetchDeviceName(deviceSerial)\n  if (d != null) d.toUpperCase else \"INVALID DEVICE\"\n}"}
{"id":"eb406d9b-14a1-4df0-801b-f8b52f3f53ef","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def getEnergyReading(readingId: String): Option[ConsumptionRecord] = {\n  Option(fetchConsumptionFromJavaApi(readingId))\n}\n\ndef readingKWhOrDefault(readingId: String): Double = {\n  getEnergyReading(readingId).map(_.kilowattHours).getOrElse(0.0)\n}"}
{"id":"77899dab-4ed3-4430-ac31-1800cef649ad","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class DailyUsage(hour: Int, kilowatts: Double)\n\ndef safeUsageOption(hour: Int): Option[DailyUsage] = {\n  Option(fetchHourlyUsageFromApi(hour))\n}\n\ndef safeUsageMessage(hour: Int): String = {\n  safeUsageOption(hour).map(u => f\"${u.kilowatts}%.2f kWh\").getOrElse(\"No usage recorded.\")\n}"}
{"id":"1467e9f0-a6d4-4286-9bb5-f8e3688a1d91","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def deviceStatusAsOption(deviceId: String): Option[String] = {\n  Option(GridStatusReader.getGridStatus(deviceId))\n}\n\ndef checkDeviceStatus(deviceId: String): String = {\n  deviceStatusAsOption(deviceId).fold(\"Device not found.\")(s => s\"Grid Status: $s\")\n}"}
{"id":"1b499c38-6878-41df-a591-1bc923685ed6","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def optionalAlert(alertId: String): Option[String] =\n  Option(getConsumptionAlert(alertId))\n\ndef showOptionalAlert(alertId: String): String =\n  optionalAlert(alertId).getOrElse(\"No warning present.\")"}
{"id":"36594fd4-ea2b-42b0-89f0-15545a08925f","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def retrieveMeterOption(userId: String): Option[String] =\n  Option(MeterReader.retrieveMeterId(userId))\n\ndef meterStatusText(userId: String): String = {\n  retrieveMeterOption(userId).map(id => s\"Meter attached: $id\").getOrElse(\"Meter missing\")\n}"}
{"id":"44c97560-c491-4b89-9c67-67fb3ecd3bc1","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def legacyPeakHourOption(room: String): Option[Int] =\n  Option(getPeakHourFromLegacyApi(room)).map(_.intValue)\n\ndef peakDisplay(room: String): String =\n  legacyPeakHourOption(room).map(h => s\"Peak time: $h:00\").getOrElse(\"No peak\")"}
{"id":"61016b50-2ec3-4d45-95e6-9d925d573b87","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def lastBillOption(accId: String): Option[Double] =\n  Option(BillingEngine.lastBillAmount(accId)).map(_.doubleValue())\n\ndef billTextOrZero(accId: String): String =\n  lastBillOption(accId).map(amt => f\"$$$amt%.2f\").getOrElse(\"$0.00\")"}
{"id":"a205a089-5a9e-4273-b8f3-26c0a0011f47","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def deviceNameMaybe(serial: String): Option[String] =\n  Option(fetchDeviceName(serial))\n\ndef firstLetterOfName(serial: String): Char =\n  deviceNameMaybe(serial).map(_.head).getOrElse('_')"}
{"id":"e11bfb6e-8a18-4b7c-aab2-26d2ed466743","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def safeAverage(records: Seq[ConsumptionRecord]): Option[Double] =\n  Option(records).filter(_.nonEmpty).map(_.map(_.kilowattHours).sum / _.size)\n\ndef displayAverage(records: Seq[ConsumptionRecord]): String =\n  safeAverage(records).fold(\"No records.\")(_.toString)\n"}
{"id":"b81819ca-5393-4feb-a50f-cb2bbea3a6cd","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def maybePanel(panelId: String): Option[SolarPanel] =\n  Option(new SolarPanel(panelId)).filter(_.panelId.nonEmpty)\n\ndef lastPanelReading(panelId: String): Double =\n  maybePanel(panelId).flatMap(p => Option(p.lastReading)).map(_.kilowattHours).getOrElse(-1.0)\n"}
{"id":"d94e2c15-d586-4b56-84e6-ed744980ab71","timestamp":1746098751070,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def userConsumptionOrNone(user: String): Option[Double] =\n  Option(fetchConsumptionFromJavaApi(user)).map(_.kilowattHours)\n\ndef formattedUsage(user: String): String =\n  userConsumptionOrNone(user).map(u => f\"${u}%.4f kWh\").getOrElse(\"Unavailable\")"}
{"id":"a2a37513-bb40-4bd0-bca4-e3bb746568f2","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class EnergyMeter(id: String, location: String)\ndef findMeterById(meterId: String, meters: List[EnergyMeter]): Option[EnergyMeter] =\n  meters.find(_.id == meterId)\nval meters = List(EnergyMeter(\"001\", \"Server Room\"), EnergyMeter(\"002\", \"Lobby\"))\nval maybeMeter = findMeterById(\"002\", meters)\nmaybeMeter.map(m => s\"Meter at ${m.location}\").getOrElse(\"Meter not found\")"}
{"id":"7dbe56e5-8520-42b7-b380-08884c191655","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getLastEnergyReading(deviceId: String): java.lang.Double =\n  if (deviceId == \"meter123\") 82.5 else null\ndef averageReading(reading1: java.lang.Double, reading2: java.lang.Double): java.lang.Double =\n  if (reading1 != null && reading2 != null) (reading1 + reading2) / 2 else null\nval readingA = getLastEnergyReading(\"meter123\")\nval readingB = getLastEnergyReading(\"unknown\")\navgReading = averageReading(readingA, readingB)"}
{"id":"4be29a60-0f75-4b57-a9a0-871fbb3d12c0","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def javaStyledFindWidget(widgetId: String): EnergyWidget =\n  if (widgetId == \"W100\") EnergyWidget(\"W100\", \"Main Panel\") else null\nval widget = javaStyledFindWidget(\"no-such-widget\")\nif (widget != null) widget.display() else println(\"Widget not found\")"}
{"id":"e2315ca4-5fb6-42f8-a423-d89c6a269fee","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class UserSettings(theme: String)\ndef getUserSettings(userId: String): Option[UserSettings] =\n  Option(javaUserSettings(userId))\ndef javaUserSettings(userId: String): UserSettings =\n  if (userId == \"su-01\") UserSettings(\"dark\") else null\nval preferredTheme = getUserSettings(\"su-01\").map(_.theme).getOrElse(\"default\")"}
{"id":"b2f99dd2-244d-439b-a286-dde21ca33264","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def lastPowerOutageTimestamp(region: String): Long =\n  if (region == \"HQ\") 1683657912020L else null.asInstanceOf[Long]\nval lastOutage = lastPowerOutageTimestamp(\"Annex\")\nif (lastOutage != null) println(lastOutage) else println(\"No record\")"}
{"id":"1de0ff32-afc6-4313-8424-1433ce3ef23d","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def getConsumptionProfile(deviceId: String): Option[ConsumptionProfile] =\n  Option(callExternalJavaProfileService(deviceId))\ndef callExternalJavaProfileService(deviceId: String): ConsumptionProfile =\n  if (deviceId == \"METER1\") ConsumptionProfile(250.6) else null\nval profileOpt = getConsumptionProfile(\"METER1\")\nval usage = profileOpt.map(_.kwh).getOrElse(0.0)"}
{"id":"a9bacd74-2417-416f-be33-411a089bdfb0","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"case class EnergyAlert(id: String, message: String)\ndef getCriticalAlert(dashboardId: String): EnergyAlert =\n  if (dashboardId == \"dash-01\") EnergyAlert(\"A1\", \"Overload\") else null\nval alert = getCriticalAlert(\"unknown\")\nif (alert == null) println(\"No alert\") else println(alert.message)"}
{"id":"c0611966-1ac5-45b1-8369-323872e8b561","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def getCurrentConsumption(zone: String): Option[Double] =\n  javaGetZoneConsumption(zone) match\n    case null => None\n    case value => Some(value)\ndef javaGetZoneConsumption(zone: String): java.lang.Double =\n  if (zone == \"North\") 311.3 else null\nval consumption = getCurrentConsumption(\"North\").getOrElse(-1)\n"}
{"id":"5a7e31ff-82b6-497b-bcae-004f0184ae2d","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"class MeterPoint(val id: String, val label: String)\ndef findMeterLabel(meter: MeterPoint): String =\n  if (meter != null) meter.label else \"N/A\"\nval meterObj: MeterPoint = null\nval label = findMeterLabel(meterObj)"}
{"id":"a81d90f6-d7f1-48c9-bf83-228b2e7fce01","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class ApplianceStatus(device: String, isActive: Boolean)\ndef statusOrDefault(deviceId: String, statuses: Map[String, ApplianceStatus]): ApplianceStatus =\n  statuses.get(deviceId).getOrElse(ApplianceStatus(deviceId, false))\nval statuses = Map(\"A10\" -> ApplianceStatus(\"A10\", true))\nval deviceStat = statusOrDefault(\"A11\", statuses)"}
{"id":"61a900e4-c8ba-4b17-bb6f-2a6ca7c8de16","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getDashboardName(id: String): String =\n  val result = javaGetName(id)\n  if (result == null) \"Unnamed Dashboard\" else result\ndef javaGetName(id: String): String =\n  if (id == \"main\") \"Energy Master\" else null\nval dashboardLabel = getDashboardName(\"foo\")"}
{"id":"a35b56a2-e6fa-41f6-8146-e00c9c0afcfc","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"case class Building(name: String)\ndef getOptionalBuilding(buildingId: Int): Option[Building] =\n  Option(javaFindBuilding(buildingId))\ndef javaFindBuilding(buildingId: Int): Building =\n  if (buildingId == 5) Building(\"Innovation Tower\") else null\nval maybeBuilding = getOptionalBuilding(5)\nmaybeBuilding.foreach(b => println(b.name))"}
{"id":"29d245a9-579b-419e-b22a-3125991af2ea","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object SensorHub {\n  def getTemperature(sensorId: String): java.lang.Double =\n    if (sensorId != null && sensorId == \"T500\") 22.1 else null\n}\nval temp = SensorHub.getTemperature(null)\nif (temp != null) println(temp) else println(\"No data\")"}
{"id":"1472de98-c21d-4a3b-ba96-237469e6799e","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def meterDisplayName(meter: Option[EnergyMeter]): String =\n  meter.fold(\"Unknown Meter\")(_.location)\nval m: Option[EnergyMeter] = Some(EnergyMeter(\"085\", \"Lab\"))\nval name = meterDisplayName(m)\n"}
{"id":"6bcd237e-fdb1-49a9-81fe-9893d8d79532","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"class EnergySummary(val id: String, val kwh: Double)\ndef safeGetSummary(deviceId: String): Option[EnergySummary] =\n  Option(getSummaryFromLegacy(deviceId))\ndef getSummaryFromLegacy(deviceId: String): EnergySummary =\n  if (deviceId == \"good\") new EnergySummary(\"good\", 930) else null\nval summary = safeGetSummary(\"bad\").getOrElse(new EnergySummary(\"unknown\", 0.0))"}
{"id":"49514c6c-dee4-4243-a6cb-6c1ab6277738","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"def getYesterdayReport(panelName: String): ConsumptionReport =\n  if (panelName == \"EastPanel\") ConsumptionReport(1000) else null\nval report = getYesterdayReport(\"NoPanel\")\nif (report != null) println(report.kwh) else println(\"No report available\")"}
{"id":"7f7e6d58-ca24-4a40-99f6-f82992f4eb39","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def highestPowerDraw(devices: List[PowerDevice]): Option[PowerDevice] =\n  devices.sortBy(-_.draw).headOption\nval deviceList = List(PowerDevice(\"AC1\", 1.3), PowerDevice(\"OvenA\", 2.7))\nval maxDevice = highestPowerDraw(deviceList).map(_.id).getOrElse(\"none\")"}
{"id":"1128108c-e808-4072-a80c-b714174dc206","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":false,"code":"object DashboardJavaAPI {\n  def getEnergyModule(identifier: String): EnergyModule =\n    if (identifier == \"mod-1\") new EnergyModule(\"mod-1\") else null\n}\nval module = DashboardJavaAPI.getEnergyModule(\"unknown\")\nif (module == null) println(\"Missing module\") else println(module.id)"}
{"id":"d657b7b9-4d64-495d-8b6d-e69beb3efe29","timestamp":1746098782238,"category":"null_checks","topicUsed":"Energy consumption dashboard","isIdiomatic":true,"code":"def wrappedModule(identifier: String): Option[EnergyModule] =\n  Option(DashboardJavaAPI.getEnergyModule(identifier))\nval safeModule = wrappedModule(\"mod-1\")\nsafeModule.exists(_.id.startsWith(\"mod\"))"}
{"id":"45bd607c-0175-4fcf-92c2-37a8a567f4ad","timestamp":1746098796406,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Ballot(voterId: String, candidate: String)\ndef findBallot(ballots: List[Ballot], searchId: String): Option[Ballot] =\n  ballots.find(_.voterId == searchId)"}
{"id":"e0957c25-38ac-4988-8cd5-1763762e8252","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def getTallyReport(electionId: String): String =\n  null"}
{"id":"d3136a4f-d046-436c-8d91-680d615298d2","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def countValidVotes(possibleVotes: List[String]): Int =\n  possibleVotes.filter(_ != null).length"}
{"id":"78c51868-541d-4637-b7bc-dcb5c8a31927","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def fetchCandidateName(candidateId: String): String =\n  if (candidateId == null) null\n  else s\"Candidate: $candidateId\""}
{"id":"82da1f1c-7ed9-456f-9158-2af2fecc86f2","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def safeBallotLookup(ballotId: String): Option[String] =\n  val nativeBallot = javaBallotApiGet(ballotId) // Might be null\n  Option(nativeBallot)\n\ndef javaBallotApiGet(id: String): String =\n  if id == \"bad\" then null else \"Sample Ballot\""}
{"id":"b28f4b35-a958-4ef1-a311-e6043bcc5b26","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getDistrictResult(district: String): Option[Int] =\n  Option(getDistrictCount(district))\n\ndef getDistrictCount(district: String): Integer =\n  if district == \"unknown\" then null else 157"}
{"id":"ce7a34e8-716d-41bd-a13e-622492167bc0","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def nullifyVote(ballot: Ballot): Ballot =\n  null"}
{"id":"4526f2ef-7cc9-4c9e-b4d1-53370acdd226","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def selectWinningCandidate(result: Option[Map[String, Int]]): String =\n  result.flatMap(_.maxByOption(_._2)).map(_._1).getOrElse(\"No winner\")"}
{"id":"9419ba33-54e0-46c9-b6dd-54fad11485e0","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def totalVotes(tally: Map[String, Int]): Option[Int] =\n  Option(tally).map(_.values.sum)"}
{"id":"01025214-2a91-4a49-bb34-b590edb45006","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def isVoteValid(vote: String): Boolean =\n  vote != null && vote.startsWith(\"VOTE-\")"}
{"id":"3c77386b-4ce6-44c9-8762-beb20ad2c8d7","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getVerifiedVoterId(record: VoterRecord): Option[String] =\n  Option(record.voterId).filter(_.startsWith(\"ID-\"))\n\ncase class VoterRecord(voterId: String)"}
{"id":"93829a32-f5a4-4a36-9d81-1794b7f742dc","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def getVoterBallot(voterId: String): String =\n  val result = voteRepositoryLookup(voterId)\n  if (result != null) result else null\n\ndef voteRepositoryLookup(id: String): String =\n  if id == \"unknown\" then null else s\"ballot-$id\""}
{"id":"bc701609-9e88-4d4a-ac0e-f41469ff247a","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def countVotesSecured(maybeVotes: Option[List[Int]]): Int =\n  maybeVotes.fold(0)(_.sum)"}
{"id":"2e0e81c8-c324-44b3-89db-da6f40ee1502","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Election(name: String, ballots: List[Ballot])\ndef getFirstVoter(election: Election): Option[String] =\n  election.ballots.headOption.map(_.voterId)"}
{"id":"061e2a29-0ba8-45cf-8ee4-6e24eeb35f4a","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def nullSafeCandidateLookup(candidateId: String): Option[String] =\n  Option(candidateDbFind(candidateId))\n\ndef candidateDbFind(candidateId: String): String =\n  if candidateId == \"absent\" then null else candidateId.toUpperCase"}
{"id":"1d56ed04-9916-47a9-ad3e-284b46bf3422","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def hasSubmittedVote(voter: Voter): Boolean =\n  voter.submittedBallot != null\n\ncase class Voter(name: String, submittedBallot: String)"}
{"id":"53699691-fa07-4f54-ae6d-b8a5d92d2610","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def findLastVote(ballots: List[Ballot]): Option[Ballot] =\n  ballots.lastOption.filter(_ != null)"}
{"id":"1aaba5ec-bc01-492e-a73f-3735804f53d9","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def getElectionConfig(electionId: String): ElectionConfig =\n  null\n\ncase class ElectionConfig(rules: String)"}
{"id":"b2f06f7c-fcfc-47d7-83d6-aeac37f05a47","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def markBallotInvalid(ballot: Ballot): Ballot =\n  if (ballot == null) null else Ballot(ballot.voterId, \"INVALID\")\n\ncase class Ballot(voterId: String, candidate: String)"}
{"id":"f83db81a-3bd3-49c0-b7fe-9518ec22bd7b","timestamp":1746098796407,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def countAbsentBallots(ballots: List[Ballot]): Int =\n  ballots.count(_ == null)\n\ncase class Ballot(voterId: String, candidate: String)"}
{"id":"588ae548-2ae0-48a9-968e-25546aea666b","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Ballot(candidate: String)\ndef ballotFromLegacySystem(input: String): Ballot = new Ballot(input)\ndef tryParseBallot(input: String): Option[Ballot] = Option(ballotFromLegacySystem(input))"}
{"id":"ccbc2e23-8713-4258-963c-b6baa4d0f343","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def tallyVotes(votes: List[Option[String]]): Map[String, Int] = votes.flatten.groupBy(identity).view.mapValues(_.size).toMap"}
{"id":"ba536fe8-f8c2-484e-924f-b9473e9a8da6","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getCandidateName(vote: Option[String]): String = vote.getOrElse(\"Invalid Candidate\")"}
{"id":"b1a317b7-a884-4436-9674-7451bd2745a1","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def safeFindVoter(voters: List[String], voterId: String): Option[String] = voters.find(_ == voterId)"}
{"id":"1ae059e6-0618-4f9d-ad9c-776201df900c","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def fetchElectionResultFromJava(id: Int): String = null\ndef safeFetchElectionResult(id: Int): Option[String] = Option(fetchElectionResultFromJava(id))"}
{"id":"97b7a0eb-7112-4c06-8312-6e33545ccd9f","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class Tally(cand: String, count: Int)\ndef incrementTally(optTally: Option[Tally]): Tally = optTally.map(t => t.copy(count = t.count + 1)).getOrElse(Tally(\"Unknown\",1))"}
{"id":"31976075-a2bf-4170-aad9-24b5b14ac10c","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def printWinner(candidate: Option[String]): Unit = candidate.foreach(println)\n"}
{"id":"ed3659d0-7d8c-40c2-8a6f-63f9d7809d74","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def validateBallot(ballot: Option[BallotData]): Boolean = ballot.exists(_.isValid)"}
{"id":"e0f7ebba-9b56-49ae-b55d-5f3c7361397e","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def convertNullVote(vote: String): Option[String] = Option(vote).filter(_.nonEmpty)"}
{"id":"86c1c1b4-ded0-4825-a4be-d0c446d99987","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def countNonSpoiledVotes(ballots: List[Option[Ballot]]): Int = ballots.flatten.count(_.status == \"counted\")"}
{"id":"351e939f-5b65-4a11-ac06-8acc5c83f6f9","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getVoteOrDefault(vote: Option[String]): String = vote.fold(\"Abstain\")(identity)"}
{"id":"e257d47b-11a4-4334-9937-6f1948925572","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def findTotalVotes(votes: List[Option[Int]]): Int = votes.flatten.sum"}
{"id":"ca650f68-fd9f-4066-9a88-c79cc7b00bb7","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def candidateDisplayName(optName: Option[String]): String = optName.map(_.toUpperCase).getOrElse(\"UNSPECIFIED\")"}
{"id":"1e140c88-d905-4526-b5cd-9fcae3d3a8db","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def voteCountAboveThreshold(count: Option[Int], threshold: Int): Boolean = count.exists(_ > threshold)"}
{"id":"5e7a10bb-63d0-4afa-a690-70305e118e89","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getEligibleVoters(rawList: List[String]): List[String] = rawList.filter(_.nonEmpty).map(_.trim)"}
{"id":"ccc766dd-6f9a-494e-b637-3087e0f9b1ab","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"case class AuditLog(traceId: String)\ndef safeExtractLogId(log: Option[AuditLog]): String = log.map(_.traceId).getOrElse(\"no-log\")"}
{"id":"92c9b35e-94dd-40a2-8f90-e12c07c4bd60","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def safeVoteLookup(voterDatabase: Map[String, String], id: String): Option[String] = voterDatabase.get(id)"}
{"id":"c42a3e83-307b-4662-a161-85e031e63c09","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def firstValidCandidate(names: List[Option[String]]): Option[String] = names.flatten.headOption"}
{"id":"18d8ba74-7e5b-48e6-8155-9a21f0ad24d7","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def filterValidBallots(ballots: List[Option[BallotData]]): List[BallotData] = ballots.flatten.filter(_.isValid)"}
{"id":"16e6e184-e7a9-4e69-b2fc-923b2698868e","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":true,"code":"def getResultValue(res: Option[Int]): Int = res.getOrElse(-1)"}
{"id":"7d1999a1-b820-46a2-9188-441edd7fd5d2","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class LegacyBallot {\n  var candidate: String = null\n}\ndef unsafeGetCandidate(ballot: LegacyBallot): String = {\n  if (ballot.candidate != null) ballot.candidate else null\n}"}
{"id":"d2a74b45-4799-45e6-811d-83838bb0a548","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def findTallyResult(results: Array[String], name: String): String = {\n  for (res <- results) {\n    if (res != null && res == name) return res\n  }\n  null\n}"}
{"id":"447b8894-35b2-4565-92ce-7e7f6732f78e","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def retrieveVoterRegion(record: java.util.HashMap[String, String], voterId: String): String = {\n  val region = record.get(voterId)\n  if (region != null) region else null\n}"}
{"id":"08a7fd1b-a098-45d1-88ee-a5a013a8c77b","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def castBallotFromID(id: String): String = {\n  if (id == null) null else \"Accepted\"\n}"}
{"id":"537f70f8-e79f-4d32-a875-2fb087d64273","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def getFirstNonNullVote(results: List[String]): String = {\n  for (vote <- results) {\n    if (vote != null) return vote\n  }\n  null\n}"}
{"id":"0fd12d90-e033-496d-b80a-d5ef8bb601dd","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def validateTally(countStr: String): Boolean = {\n  if (countStr == null) false else true\n}"}
{"id":"d26d2501-0f8b-4be5-973a-0c3e85ec79fd","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def javaLegacyWinner(electionId: Int): String = {\n  if (electionId > 0) \"CandidateY\" else null\n}"}
{"id":"0cfc2df0-0afd-484d-8820-46312f496e77","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def fallbackToNullTally(tallies: List[Int]): Integer = {\n  if (tallies.isEmpty) null else Integer.valueOf(tallies.head)\n}"}
{"id":"54168181-aed1-4385-9ad1-cc0b44f11d92","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def nullIfInvalidResult(result: String): String = {\n  if (result.contains(\"invalid\")) null else result\n}"}
{"id":"dd74950d-561a-4c4f-baa0-6c98678e7f4f","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def checkNullBallotName(name: String): Boolean = {\n  if (name == null) false else true\n}"}
{"id":"6744e9c4-96fb-463a-914c-e52374fd272b","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def assignNullOnEmpty(candidate: String): String = {\n  if (candidate == \"\") null else candidate\n}"}
{"id":"1eed4334-5b09-4644-87ff-3575e7ba3353","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def oldSystemVoteCheck(votes: java.util.List[String]): String = {\n  var i = 0\n  while (i < votes.size()) {\n    val v = votes.get(i)\n    if (v != null) return v\n    i += 1\n  }\n  null\n}"}
{"id":"74076c5d-e300-4644-ac2f-fbbdf4962104","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def nullResultForMissingCandidate(candidates: List[String], search: String): String = {\n  if (candidates.contains(search)) search else null\n}"}
{"id":"86723eaf-02c8-476f-bf47-28fa8956f775","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"class TallyCounter {\n  var total: Integer = null\n  def setTotal(newTotal: Integer): Unit = {\n    total = newTotal\n  }\n}"}
{"id":"dc271baa-5cfa-4cd1-bf94-6b3f6e4494f6","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def validateRegionName(region: String): Boolean = {\n  if (region != null && region.nonEmpty) true else false\n}"}
{"id":"181ba736-af1c-45d2-9dba-cbde8c31b707","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def javaInteropResult(): String = null"}
{"id":"fcba86ac-1e07-4a2e-9d39-2cdde2346824","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def nonIdiomaticListResult(results: Array[String]): String = {\n  if (results == null || results.isEmpty) null else results(0)\n}"}
{"id":"7eaa438d-a22b-4a3a-a367-e86f724b75bf","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def nullVoteFallback(vote: String): String = {\n  if (vote != null) vote else null\n}"}
{"id":"075dd457-30db-468a-84ec-286c01ffd0ee","timestamp":1746098823952,"category":"null_checks","topicUsed":"Electronic voting tallying","isIdiomatic":false,"code":"def setNullVoteIfAbstain(voteText: String): String = {\n  if (voteText == \"Abstain\") null else voteText\n}"}
{"id":"2711ff29-1e5e-4bc9-8bea-c858cb1aa1cb","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class AuthorProfile(name: String, institution: String)\ndef findAuthorByEmail(email: String, authors: List[AuthorProfile]): Option[AuthorProfile] =\n  authors.find(_.name.contains(email))"}
{"id":"fd1fb4da-4a45-48f8-b1ad-7dfc1ed135c9","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def legacyGetBookTitle(bookId: String): String =\n  if(bookId == \"B123\") \"Effective Scala\" else null\nval bookTitle = legacyGetBookTitle(\"B456\")\nif(bookTitle != null)\n  println(bookTitle)\nelse\n  println(\"Book not found.\")"}
{"id":"d1318b9b-6e87-4ad3-8c0e-570b40efa4ac","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getPublicationYearFromSource(source: AnyRef): Option[Int] =\n  Option(source).map(_.hashCode % 2023)\nval yearOpt = getPublicationYearFromSource(null)\nprintln(yearOpt.getOrElse(-1))"}
{"id":"4ebcf758-16dc-4bea-9ab2-edd357db69ce","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class CatalogEntry(val title: String, val author: String)\ndef getEntryTitle(entry: CatalogEntry): String =\n  if(entry != null) entry.title else \"Unknown Title\""}
{"id":"b30362fe-d9c5-4985-b673-63b1defa5add","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def wrapLegacyAuthorName(name: String): Option[String] =\n  Option(name).filter(_.nonEmpty)\nval maybeAuthor = wrapLegacyAuthorName(null)\nprintln(maybeAuthor.getOrElse(\"No Author\"))"}
{"id":"e44dabea-08a5-4611-9807-370b9ad8d269","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class Book(val title: String)\ndef displayBookIfExists(book: Book): Unit =\n  if(book != null)\n    println(s\"Book: ${book.title}\")\n  else\n    println(\"No book information available.\")"}
{"id":"a1f39ede-49b5-4d81-bc1f-ab224e525a33","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def findFirstAvailableCopy(copies: List[String]): Option[String] =\n  copies.find(_ != null)\ndef printAvailableCopy(copies: List[String]): Unit =\n  findFirstAvailableCopy(copies).foreach(println)"}
{"id":"bf9b0e5b-243b-410d-9149-5dbf8d75262e","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"object DigitalCatalogUtils:\n  def javaStyleLookupSubject(subject: String): String =\n    if(subject == \"Scala\") \"Programming\" else null\nval subjectCategory = DigitalCatalogUtils.javaStyleLookupSubject(\"Literature\")\nif(subjectCategory == null)\n  println(\"Subject category unavailable.\")"}
{"id":"4c5b2e6e-2eeb-48bf-8815-d73a79fa24d6","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class LibraryResource(isbn: String, location: Option[String])\ndef getResourceLocation(resource: LibraryResource): String =\n  resource.location.getOrElse(\"Location unknown\")"}
{"id":"89e532df-9843-42a9-8e80-3160236c6590","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class Patron(val id: String, val preferredLanguage: String)\ndef printPatronLanguage(patron: Patron): Unit =\n  if(patron != null)\n    println(patron.preferredLanguage)\n  else\n    println(\"Patron not found.\")"}
{"id":"baf9e9a5-ac9f-47a6-a79f-96621a243b16","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getCoverImageUrl(bookId: String): Option[String] =\n  if(bookId == \"ID100\") Some(\"http://example.com/id100.jpg\") else None\ndef displayCoverImage(bookId: String): Unit =\n  getCoverImageUrl(bookId).foreach(println)"}
{"id":"599e0d34-5216-4012-af94-a31531b11ef5","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getLibrarySectionFromJavaStyle(id: Int): String =\n  if(id == 1) \"Fiction\" else null\nval section = getLibrarySectionFromJavaStyle(2)\nif(section != null) println(section)"}
{"id":"a8eb9570-af13-4fe4-b4da-f2ecab8d1fe6","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class DigitalArchive(pdfUrl: Option[String])\ndef fetchPdfUrl(archive: DigitalArchive): String =\n  archive.pdfUrl.getOrElse(\"PDF not found\")"}
{"id":"bc4c3ddd-5def-4e63-ad8b-399c3ff2e515","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class Publisher(val code: String, val name: String)\ndef getPublisherName(publisher: Publisher): String =\n  if(publisher != null && publisher.name != null)\n    publisher.name\n  else\n    \"Unknown Publisher\""}
{"id":"9ce6e99d-57d8-4b3d-aef0-0d43a9f5f58b","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def safeGetIsbn(maybeIsbn: String): Option[String] =\n  Option(maybeIsbn).filter(_.matches(\"[0-9Xx-]+\"))\nval isbnOption = safeGetIsbn(null)"}
{"id":"060c3953-7e42-495c-aa60-220736392ee9","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class Journal(val title: String, val issn: String)\ndef getJournalIssn(journal: Journal): String =\n  if(journal == null || journal.issn == null) \"Missing ISSN\" else journal.issn"}
{"id":"398ae73a-3958-450c-905f-597ca20fe1a7","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def findFullTextUrl(record: Map[String, String]): Option[String] =\n  record.get(\"fullTextUrl\").filter(_.startsWith(\"http\"))\ndef openFullText(record: Map[String, String]): String =\n  findFullTextUrl(record).getOrElse(\"URL unavailable\")"}
{"id":"beb0d8d4-e678-4410-8a0e-279ad36d1798","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def findUserByLibraryCard(id: String): String =\n  if(id == \"L12\") \"Alice Reader\" else null\nval userName = findUserByLibraryCard(\"none\")\nif(userName == null) println(\"User not found\")"}
{"id":"2b86bd3d-1f80-42ca-9284-de2ae13e020d","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class SearchResult(title: String, snippet: Option[String])\ndef previewSearchResult(result: SearchResult): String =\n  result.snippet.getOrElse(\"No snippet available\")"}
{"id":"9c40cc37-8096-47e9-86fc-50745b6dc32f","timestamp":1746098854035,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getDatabaseConnection(cfg: String): String =\n  if(cfg == \"prod\") \"Connected\" else null\nval dbStatus = getDatabaseConnection(\"test\")\nif(dbStatus == null)\n  println(\"Connection failed.\")\nelse\n  println(dbStatus)"}
{"id":"5cbe3339-f4a6-4bb8-950c-e7f27628b584","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class CatalogEntry(title: String, author: String, isbn: String)\n\ndef findEntryByIsbn(entries: List[CatalogEntry], isbn: String): Option[CatalogEntry] =\n  entries.find(_.isbn == isbn)\n\ndef getEntryTitleOrDefault(entries: List[CatalogEntry], isbn: String): String =\n  findEntryByIsbn(entries, isbn).map(_.title).getOrElse(\"Title Not Found\")"}
{"id":"48e916f6-9622-49f7-b2ff-dee8bd0b3115","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getAuthorMiddleName(authorRecord: java.util.Map[String, String]): String =\n  if (authorRecord == null) null\n  else\n    val middleName = authorRecord.get(\"middleName\")\n    if (middleName == null) null else middleName"}
{"id":"9321fc46-2dcd-4fdb-bbcc-2dd367ca81f5","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def normalizeSearchTerm(term: String): Option[String] =\n  Option(term).map(_.trim).filter(_.nonEmpty)"}
{"id":"907e90b3-234e-4711-9736-15753bd41c67","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"object LibraryUtils {\n  def safeWrapNullString(source: String): Option[String] = Option(source)\n}\n\nval publisherOption = LibraryUtils.safeWrapNullString(possiblyNullPublisher)\nval publisherDisplay = publisherOption.getOrElse(\"Unknown Publisher\")"}
{"id":"4471f534-fbf0-4e3f-8457-bebbb123368d","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class CatalogSearcher {\n  def searchTitleDeprecated(keyword: String): java.util.List[String] =\n    if (keyword == null) null\n    else new java.util.ArrayList[String]()\n}\n\nval results = (new CatalogSearcher).searchTitleDeprecated(null)\nif (results == null) println(\"No results returned\")"}
{"id":"9c14fab0-e17c-44e1-b622-f905c14bc65b","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getFirstSubjectFromEntry(entry: DigitalBookRecord): Option[String] =\n  Option(entry.subjects).flatMap(_.headOption)"}
{"id":"6ff1b2cb-26dc-4e2d-8971-344e17525a7b","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getBorrowerEmail(borrowerRecord: Map[String, String]): String =\n  val email = borrowerRecord.getOrElse(\"email\", null)\n  if (email == null) \"No Email On File\" else email"}
{"id":"7545da32-3229-4e8b-abba-f6cf14c16743","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class LibraryMember(id: String, name: String, preferredLanguage: Option[String])\n\ndef getDisplayLanguage(member: LibraryMember): String =\n  member.preferredLanguage.getOrElse(\"English\")"}
{"id":"80e5e60a-7378-46cf-9f91-f8e5288590f5","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def retrieveSummaryFromLegacyApi(catalogId: String): String =\n  val summary = LegacyApi.getSummaryById(catalogId)\n  if (summary == null) \"No summary available\"\n  else summary"}
{"id":"52032c3a-47cb-4ae0-b445-e023c22d7007","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"case class EbookFile(id: String, filename: String)\n\ndef safeGetFilename(ebook: EbookFile): Option[String] =\n  Option(ebook).map(_.filename)"}
{"id":"5f1687a5-d8a0-424a-bae6-e557ce661b2e","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def findOldestEdition(editions: List[LibraryBookEdition]): Option[LibraryBookEdition] =\n  editions.sortBy(_.publicationYear).headOption"}
{"id":"6cb438dd-3366-45be-967e-419c0a7263ee","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getDigitalAsset(assetId: String): DigitalAsset =\n  if (assetId == null) null\n  else findAssetById(assetId)"}
{"id":"f9759b9c-487a-4de7-880b-4bcb0e290d9a","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getOptionalPublisherName(metadata: CatalogMetadata): Option[String] =\n  Option(metadata).flatMap(m => Option(m.publisherName))"}
{"id":"6d4654a6-3260-4ff9-a813-50c456529341","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def checkEntryExists(entry: LibraryCatalogEntry): Boolean =\n  entry != null && entry.title != null"}
{"id":"9e8099e9-e2a7-4ed6-b703-fb288c888521","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"val maybeCatalogTag: Option[String] = Option(retrieveTagFromLegacySystem(catalogId))\nif maybeCatalogTag.exists(_.nonEmpty) then println(\"Tag found.\")\nelse println(\"No tag present.\")"}
{"id":"9e62ea58-b507-40e4-9b3d-e6dfcdcd01bd","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"class BookMetadata(val description: String)\ndef getDescriptionUppercase(meta: BookMetadata): String =\n  if (meta == null) null\n  else\n    val desc = meta.description\n    if (desc != null) desc.toUpperCase else null"}
{"id":"f38b5b6d-87dc-4a3d-8f96-3c3ce3ff2b1a","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def findBookByTitle(title: String, catalog: List[CatalogBook]): Option[CatalogBook] =\n  catalog.find(_.title.equalsIgnoreCase(title))"}
{"id":"1bac399d-74ee-4344-80c4-2cca692442c1","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getShelfLocation(locationCode: String): String =\n  if (locationCode != null) locationCode else \"Unknown Shelf\""}
{"id":"b1e662d8-f99f-4aac-bdcd-aad424e093fa","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":true,"code":"def getAvailableMediaTypes(record: MediaCatalogRecord): Option[List[String]] =\n  Option(record.mediaTypes).filter(_.nonEmpty)"}
{"id":"36a2e3cc-f939-4dba-a0ce-d57d30e26dbc","timestamp":1746098869111,"category":"null_checks","topicUsed":"Digital library catalog search","isIdiomatic":false,"code":"def getPreferredFormat(reader: LibraryReader): String =\n  if (reader == null) null\n  else if (reader.preferredFormat != null) reader.preferredFormat else \"PDF\""}
{"id":"38a8cc13-8c41-4141-8ba0-34a0a654d56b","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketQRValidator {\n  def extractQRContent(qrCode: String | Null): String = {\n    if (qrCode != null) qrCode else \"\"\n  }\n}\n"}
{"id":"6667368a-1e18-42d9-9cdf-336498b6bb25","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class EventTicketScanner {\n  def scanTicket(qrPayload: String | Null): Boolean = {\n    if (qrPayload == null) false else true\n  }\n}\n"}
{"id":"e1b78181-eca2-431a-8718-393344e9a257","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketRedemption {\n  def findTicketByQR(qrValue: String): Ticket | Null = {\n    if (qrValue == \"\") null else new Ticket(qrValue, false)\n  }\n}\nclass Ticket(val code: String, var redeemed: Boolean)\n"}
{"id":"674ff98e-5ed6-4ed5-8edc-7000d80bac1f","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRContentParser {\n  def parseAttendeeId(qrString: String): String | Null = {\n    if (qrString == null) null else qrString.split(\"-\")(0)\n  }\n}\n"}
{"id":"4ee9d542-5c6f-4681-a524-09376c981a22","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object JsonQRDecoder {\n  def decodeQR(jsonPayload: String): String | Null = {\n    if (jsonPayload != null && jsonPayload.length > 10) jsonPayload else null\n  }\n}\n"}
{"id":"6121e045-0c35-41f1-aac9-6231bb2b70d0","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketValidator {\n  def validateTicketCode(ticketCode: String | Null): Boolean = {\n    if (ticketCode == null) false else ticketCode.startsWith(\"EVT-\")\n  }\n}\n"}
{"id":"1d0a19a0-f513-474d-8aad-76f25536a60b","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object JavaInteropTicketService {\n  def javaFindTicket(qr: String): Ticket | Null = {\n    if (qr == \"ABC123\") new Ticket(qr, false) else null\n  }\n}\nclass Ticket(val code: String, var redeemed: Boolean)\n"}
{"id":"c7a95a8d-7cbb-4d18-a366-14e121293963","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QREventTracker {\n  def ticketHolderName(qr: String | Null): String = {\n    if (qr == null) \"Unknown\" else \"Attendee: \" + qr.reverse.take(5)\n  }\n}\n"}
{"id":"b732c529-d3dc-4c03-a83d-66aedbccf30a","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object AttendeeIDResolver {\n  def resolveIdFromQR(qrData: String | Null): Int = {\n    if (qrData == null) -1 else qrData.hashCode\n  }\n}\n"}
{"id":"8be2ed03-1f74-4bdf-8aff-10d69321e8e4","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QRCheckInHandler {\n  def checkIn(qrPayload: String): Boolean = {\n    if (qrPayload == null || qrPayload == \"\") false else true\n  }\n}\n"}
{"id":"382c61f3-9782-4443-9372-d5b17f424fa6","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class QRPayload(content: String)\n\nobject OptionalTicketValidator {\n  def validateQRContent(qrContent: String): Option[QRPayload] = {\n    Option(qrContent).filter(_.nonEmpty).map(QRPayload(_))\n  }\n}\n"}
{"id":"593d986d-e5a1-4228-bda3-79aa48071d32","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object AttendeeQRExtractor {\n  def extractAttendeeInfo(qrData: String | Null): Option[String] = {\n    Option(qrData).flatMap(s => if s.contains(\"ID:\") then Some(s) else None)\n  }\n}\n"}
{"id":"272f2a23-f91d-481b-ad2f-5091804dbefb","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class TicketInfo(eventId: String, ticketId: String)\n\nobject TicketInfoParser {\n  def parseTicketInfo(qrString: String): Option[TicketInfo] = {\n    Option(qrString)\n      .map(_.split(\"-\"))\n      .collect { case Array(eid, tid) => TicketInfo(eid, tid) }\n  }\n}\n"}
{"id":"fae87c02-e5d3-4aa2-af3c-ce1dcd38c2bb","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object QRRedemptionChecker {\n  def isTicketRedeemed(ticket: Option[Ticket]): Boolean = {\n    ticket.exists(_.redeemed)\n  }\n}\ncase class Ticket(code: String, redeemed: Boolean)\n"}
{"id":"d045783f-c798-4027-a085-762675daa009","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object SecureTicketFinder {\n  def findSecureTicket(qrPayload: String | Null): Option[Ticket] = {\n    Option(qrPayload).filter(_.startsWith(\"SECURE-\")).map(Ticket(_, false))\n  }\n}\ncase class Ticket(code: String, redeemed: Boolean)\n"}
{"id":"b2060471-a1f7-4854-8756-b9413301af98","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object QRPayloadHandler {\n  def uppercaseIfPresent(qr: Option[String]): Option[String] = {\n    qr.map(_.toUpperCase)\n  }\n}\n"}
{"id":"f5df67f5-5eee-4b1c-887c-b090ac0b0b15","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object QRScannerService {\n  def getTicketCode(qr: String | Null): Option[String] = {\n    Option(qr).flatMap(s => if s.length > 5 then Some(s) else None)\n  }\n}\n"}
{"id":"64effcf4-5858-4f0a-9eeb-86e8f13315d9","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object CheckInConfirmation {\n  def confirmCheckIn(ticket: Option[Ticket]): String = {\n    ticket.fold(\"Invalid Ticket\")(_ => \"Check-in Successful\")\n  }\n}\ncase class Ticket(code: String, redeemed: Boolean)\n"}
{"id":"cbe4cc96-93fa-4267-9e2c-f17bd78f9c09","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object EventIDExtractor {\n  def extractEventId(qr: String | Null): Option[String] = {\n    Option(qr).map(_.takeWhile(_ != '-'))\n  }\n}\n"}
{"id":"e307df01-61d8-45a0-b3cf-274d09f4f3da","timestamp":1746098895324,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object TicketCodeVerifier {\n  def verifyCode(qrCode: Option[String]): Boolean = {\n    qrCode.exists(_.startsWith(\"EVT\"))\n  }\n}\n"}
{"id":"f1a6115f-9e60-4318-9b72-669c63356e05","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class Ticket(id: String, qrData: String)\ndef validateQRCode(qrContent: String): Option[Ticket] =\n  val ticketId = parseTicketIdFromQR(qrContent)\n  ticketId.map(id => Ticket(id, qrContent))\ndef parseTicketIdFromQR(qrContent: String): Option[String] =\n  if qrContent.startsWith(\"EVT-\") then Some(qrContent.stripPrefix(\"EVT-\")) else None"}
{"id":"e40e1be8-83aa-4be7-89f5-8fb69c2b4689","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object QRCodeVerifier:\n  def decodeTicketOrNone(ticketQR: String): Option[String] =\n    Option(qrDecode(ticketQR))\n  def qrDecode(data: String): String =\n    if data.contains(\"VALID\") then data else null"}
{"id":"a7ac33ae-80bc-4ecc-b01c-54c83126e988","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def validateTicketHolderName(dataFromQR: String): Option[String] =\n  Option(dataFromQR)\n    .filter(_.nonEmpty)\n    .map(_.toUpperCase)\n    .filter(_.forall(_.isLetter))"}
{"id":"896d7e2b-5224-4cbb-945d-25fe0f8f3686","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def extractEventId(qrPayload: String): Option[Int] =\n  Option(qrPayload)\n    .filter(_.startsWith(\"event:\"))\n    .map(_.drop(6))\n    .flatMap(payload => payload.toIntOption)"}
{"id":"761befcf-9316-412e-bd6b-0e246038c755","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class ScannedTicket(eventId: Int, seat: String)\ndef parseScannedTicket(qr: String): Option[ScannedTicket] =\n  val split = qr.split(\"-\")\n  for\n    idStr <- split.lift(0)\n    seat <- split.lift(1)\n    id <- idStr.toIntOption\n  yield ScannedTicket(id, seat)"}
{"id":"6cf546ea-6da5-4e60-b16a-c235ca44fe6d","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"object QRTicketUtils:\n  def safeGetTicketStatus(status: String | Null): Option[String] =\n    Option(status).filter(_ != \"\")"}
{"id":"ec16b080-cdcf-47c9-bb1b-839a3f67aaff","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def validateTicketExpiration(qrScanTime: Option[Long], expirationEpoch: Long): Boolean =\n  qrScanTime.exists(_ <= expirationEpoch)"}
{"id":"72291c78-c291-4a28-bd6e-476ae392c6ff","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def participantFromQR(qrString: String): Option[String] =\n  Option(qrString)\n    .map(_.trim)\n    .filter(_.nonEmpty)\n    .filter(_.contains(\"-\"))\n    .map(_.split(\"-\")(1))"}
{"id":"a06a9679-8fbc-469c-8153-cd1280bd6725","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"case class EventTicket(id: String, isActive: Boolean)\ndef checkTicketStatus(ticket: Option[EventTicket]): Boolean =\n  ticket.exists(_.isActive)"}
{"id":"9360633e-75e1-415c-825b-ab7456395b8e","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":true,"code":"def scanAndValidateSeat(qr: String): Option[String] =\n  Option(qr)\n    .flatMap { data =>\n      val seat = data.split(\":\").lift(1)\n      seat\n    }\n    .filter(_.matches(\"[A-Z]\\d+\"))"}
{"id":"a322da28-3355-4acb-b8f0-0b9f6db0ca39","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def parseTicketIdFromJava(qrCode: String): String =\n  if (qrCode == null) {\n    null\n  } else {\n    if (qrCode.startsWith(\"TKT-\")) qrCode else null\n  }"}
{"id":"4b350641-256e-48f4-944a-75ae7739e2aa","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class TicketValidator {\n  def isQRCodeValid(qr: String): Boolean = {\n    if (qr != null && qr.contains(\"VALID\")) {\n      true\n    } else {\n      false\n    }\n  }\n}"}
{"id":"1829ffe6-6fc2-4ad4-9c6c-3ec906203e8a","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def getEventNameFromQrScan(qrResult: String): String = {\n  if (qrResult != null && qrResult.startsWith(\"EVENT::\")) {\n    qrResult.substring(7)\n  } else {\n    null\n  }\n}"}
{"id":"0fc1b999-8fdc-4a27-870b-db5115fd855b","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object TicketRetriever {\n  def fetchTicketFromDatabase(ticketId: String): String = {\n    if (ticketId == null) null\n    else \"TicketRecord\"\n  }\n}"}
{"id":"87c0776a-43f4-44c3-adf0-2555e8801c66","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def extractHolderName(qrValue: String): String = {\n  if (qrValue != null && qrValue.contains(\"HOLDER:\")) {\n    qrValue.split(\":\")(1)\n  } else {\n    null\n  }\n}"}
{"id":"a0a06d77-bc4d-4ead-a6d0-589c8edfd969","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"class QREventScanner {\n  def getTicketExpiration(epoch: java.lang.Long): java.lang.Long = {\n    if (epoch == null) 0L else epoch\n  }\n}"}
{"id":"b93880e8-1a02-4009-b9e1-13668c9d158c","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def checkIfSeatAssigned(qrInput: String): Boolean = {\n  if (qrInput != null && qrInput.nonEmpty) {\n    true\n  } else {\n    false\n  }\n}"}
{"id":"f4093134-6fd2-4e7a-976e-969f3102f200","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def parseSectionFromQR(qrString: String): String = {\n  if (qrString == null) null else qrString.split(\"-\")(0)\n}"}
{"id":"ea7ee9e6-2493-444a-9c85-23e88e72871d","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"object IncompleteTicket {\n  def markAsInvalid(ticketQR: String): String = {\n    if (ticketQR == null) \"INVALID\" else ticketQR\n  }\n}"}
{"id":"84219926-8243-4c96-9545-7c2b125c1039","timestamp":1746098922871,"category":"null_checks","topicUsed":"Event ticket QR validation","isIdiomatic":false,"code":"def legacyJavaDecode(qrData: String): String = {\n  if (qrData == null) {\n    null\n  } else {\n    \"Decoded-\" + qrData\n  }\n}"}
{"id":"e748ed40-3197-412d-93d6-461cd0d7666a","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def optimalDronePath(start: Location, end: Location): Option[Path] =\n  val cachedPath = retrieveCachedPath(start, end)\n  Option(cachedPath)\n"}
{"id":"e7d738cc-6272-4f5c-8642-2f806f209da0","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def calculateDroneBatteryUsage(route: Path): Option[Double] =\n  Option(route).map(_.segments.foldLeft(0.0)((acc, segment) => acc + segment.distance * segment.energyRate))\n"}
{"id":"7169af10-600b-40ec-ad78-e168dd6f0663","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DeliveryRequest(destination: Location, weight: Double)\ndef validatedRequest(request: DeliveryRequest): Option[DeliveryRequest] =\n  Option(request).filter(_.weight <= 5.0)\n"}
{"id":"c161088f-c95d-4fdb-aff6-e4fd3cf85bcc","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def loadWaypoint(name: String): Option[Waypoint] =\n  Option(javaWaypointLookup(name))\n"}
{"id":"b85055aa-e355-4a9a-b8f7-2728e6bd3ff6","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def droneIdFromTracking(trackingCode: String): Option[String] =\n  Option(possiblyNullDroneId(trackingCode))\n"}
{"id":"10d3a065-7c01-42b3-b710-76fd148a83d8","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def nextStop(path: Path): Option[Location] =\n  Option(path.waypoints.headOption).flatten\n"}
{"id":"c63f66ae-9038-43a6-9214-aeabd4e2a79d","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def fallbackRoute(primary: Option[Path], backup: Option[Path]): Path =\n  primary.orElse(backup).getOrElse(Path(List.empty, 0.0))\n"}
{"id":"611e22ea-e77f-4f14-ab9f-c18850e89de4","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def extractAvailableDrone(maybeDrone: Option[Drone]): String =\n  maybeDrone.fold(\"No Drone Available\")(_.identifier)\n"}
{"id":"87acf17e-b8a6-4fb7-bda6-534db7360a32","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def chooseExpressRoute(candidate: Option[Path]): Option[Path] =\n  candidate.filter(_.totalDistance < 20)\n"}
{"id":"7b90aa1b-2d40-4928-bf22-ff3abea5f9d4","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def deliveryFee(maybePath: Option[Path]): Double =\n  maybePath.map(_.totalDistance * 0.35).getOrElse(7.0)\n"}
{"id":"5f883940-f2f4-4fdb-90e2-06a003b28696","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getLandingZoneById(id: String): LandingZone =\n  val result = externalLandingZoneById(id)\n  if (result == null) null else result\n"}
{"id":"4d84091c-3ea5-4ca6-99a7-62440f3ea397","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def selectSpareDrone(drones: Array[Drone]): Drone =\n  var i = 0\n  while (i < drones.length) {\n    if (drones(i) != null) return drones(i)\n    i += 1\n  }\n  null\n"}
{"id":"bfc71a07-bc89-436c-ad64-1c14f620685a","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def unsafePathDistance(path: Path): Double =\n  if (path == null) 0.0 else path.totalDistance\n"}
{"id":"a03df3e6-f8e0-423a-b282-70d5d8b2a391","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def assignFallbackPilot(primary: Pilot, backup: Pilot): Pilot =\n  if (primary != null) primary else backup\n"}
{"id":"cc8fef7e-f180-4471-b7ae-64c3addac198","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def preferredPickupZone(zones: List[LandingZone]): LandingZone =\n  if (zones == null) null else zones.head\n"}
{"id":"cc18d2d0-bedf-439b-b813-b85d33a3c894","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def findRouteIfAny(start: Location, end: Location): Path =\n  val p = fetchPossiblePath(start, end)\n  if (p != null) p else null\n"}
{"id":"c3aa23d4-5edf-4682-bf0a-9394f08dfbbf","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getChargingStation(name: String): ChargingStation =\n  val s = legacyChargingStationLookup(name)\n  if (s == null) null else s\n"}
{"id":"07e26f5a-4ed2-4958-ba17-5f98f72c72b4","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def safeGetDroneBySerialNumber(serial: String): Drone =\n  val drone = oldSystemDroneLookup(serial)\n  if (drone != null) drone else null\n"}
{"id":"21563af7-10db-4633-a842-c7e48501d387","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getWaypointByName(name: String): Waypoint =\n  val w = possibleNullWaypoint(name)\n  if (w == null) null else w\n"}
{"id":"516a7883-7f5c-4911-a223-762c2df9c3e3","timestamp":1746098934954,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def deprecatedGetPackageById(pid: String): Package =\n  val pkg = legacyPackageFetch(pid)\n  if (pkg != null) pkg else null\n"}
{"id":"7282cb71-d00e-4610-9245-deb2bc7978f7","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class Waypoint(latitude: Double, longitude: Double)\ndef nextDeliveryWaypoint(route: List[Waypoint]): Option[Waypoint] =\n  route.headOption"}
{"id":"51c938c9-14c8-44a2-af0e-0438fd03d62e","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def calculateBatteryReserve(batteryPercent: Int): Option[Int] =\n  Option(batteryPercent).filter(_ > 0)"}
{"id":"39e9342c-242d-420d-97a7-1e4e00dc54b4","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def optimalPathLength(dronePath: List[Int]): Option[Int] =\n  Option(dronePath).filter(_.nonEmpty).map(_.sum)"}
{"id":"83015011-4676-46c7-9a56-2441a3a16994","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def resolveDeliveryHub(hubName: String): Option[String] =\n  Option(hubName).filter(_.nonEmpty)"}
{"id":"0b7b672c-6322-4412-b6ef-5a39a89bc3a0","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def getChargingStation(stationId: String): Option[String] =\n  Option(stationId).filter(_.startsWith(\"CS-\"))"}
{"id":"20bcb14c-763f-4f17-a0ff-91cc6d489b2b","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"case class DeliveryTask(destination: String, payloadKg: Double)\ndef getUrgentTask(tasks: List[DeliveryTask]): Option[DeliveryTask] =\n  tasks.find(_.payloadKg > 5.0)"}
{"id":"b169368a-ed7f-4eaa-83f7-db3ff08507a9","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def safeReachableWaypoint(possible: String): Option[String] =\n  Option(possible).flatMap(s => if s.nonEmpty then Some(s) else None)"}
{"id":"06b1add2-fb1b-4994-929e-ffab483db6b1","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def safeJavaDistance(distanceObj: AnyRef): Option[Double] =\n  Option(distanceObj).map(_.toString.toDoubleOption).flatten"}
{"id":"fc5e306e-0c3c-4c9d-bd5c-028cdb429397","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def backupDrone(droneId: String | Null): Option[String] =\n  Option(droneId)"}
{"id":"b01b95c3-4c69-42d5-bfbc-7a9d6ce4e008","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def deliveryWindow(time: String): Option[String] =\n  Some(time).filter(_.matches(\"\\\\d{2}:\\\\d{2}\"))"}
{"id":"4463fdc2-8c41-4a7c-ab6c-5ae990a16daf","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def assignPrimaryDrone(droneOpt: Option[String]): String =\n  droneOpt.getOrElse(\"No drone available\")"}
{"id":"f19d4502-2c9c-4f83-92d6-5068bd8565d4","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def checkWaypointAvailability(maybe: Option[Waypoint]): Boolean =\n  maybe.exists(w => w.latitude > 0 && w.longitude > 0)"}
{"id":"12d946b9-10c6-4689-96d5-84be0734a29e","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def droneReadyForLaunch(status: Option[String]): Boolean =\n  status.exists(_ == \"Ready\")"}
{"id":"9cbb81a2-2089-46ab-908a-c85c8e51da67","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def dronePayloadSafety(payload: Option[Double]): Boolean =\n  payload.forall(_ <= 2.5)"}
{"id":"d130ff5f-58b6-49e2-862f-9ffdccd2a423","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def selectAlternateRoute(route: Option[List[Waypoint]]): List[Waypoint] =\n  route.getOrElse(Nil)"}
{"id":"736cda89-6e32-4f1b-8faa-a6a8e0aecfc8","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def fallbackHub(hub: Option[String]): String =\n  hub.fold(\"No hub assigned\")(h => h)"}
{"id":"6455653d-05a0-4b6c-bd54-eb31853ea6be","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def parseHubFromJava(hubObj: AnyRef): Option[String] =\n  Option(hubObj).map(_.toString)"}
{"id":"0f72bfe4-e263-407f-b7a8-f38af1694a99","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"class FlightPath(val waypoints: List[Waypoint])\ndef getFinalWaypoint(path: FlightPath): Option[Waypoint] =\n  Option(path).flatMap(p => p.waypoints.lastOption)"}
{"id":"5d1c592e-6eda-472e-b6cf-6d97801a3eed","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":true,"code":"def safeBatteryValue(javaBatteryLevel: Integer): Option[Int] =\n  Option(javaBatteryLevel).map(_.intValue)\n"}
{"id":"6e812b82-2ac0-4a7e-b209-0b6645b42fba","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def getActiveMissionName(mission: String): String =\n  if (mission != null) mission else \"Unknown\"\n"}
{"id":"51e19768-db3b-431d-a0ce-ca4cd4cc7402","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def unsafeBatteryReserve(battery: java.lang.Integer): Int =\n  if (battery != null) battery.intValue else -1\n"}
{"id":"2d15917a-484a-48e7-8bc9-5f735c9f1376","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def closestWaypoint(waypoints: Array[AnyRef]): AnyRef =\n  if (waypoints != null && waypoints.nonEmpty) waypoints(0) else null\n"}
{"id":"a8480a22-1a84-4479-b3e7-72c4f7443791","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def legacyHubAssignment(hubId: String): String =\n  if (hubId == null) \"DEFAULT\" else hubId\n"}
{"id":"b2b89fb3-20af-45d2-8e35-dfc0433ecffe","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def javaOptionalChargingStation(stationObj: Object): String =\n  if (stationObj != null) stationObj.toString else null\n"}
{"id":"e7390040-0823-427a-ad62-5946bb70f4fc","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def traditionalHubSearch(hubs: Array[String]): String =\n  if (hubs != null && hubs.length > 0) hubs(0) else null\n"}
{"id":"f6bf980d-7135-45ff-a4a2-7ae81c2ae09e","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def droneIDSanityCheck(id: String): String =\n  if (id != null && id.startsWith(\"DRN\")) id else null\n"}
{"id":"fd91e0e8-8cc2-41c8-af47-7ec388a81b8c","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def fallbackToFirstPayloadWeight(weights: Array[Double]): Double =\n  if (weights != null && weights.length > 0) weights(0) else 0.0\n"}
{"id":"5f856686-eabd-41bc-8e03-1b0f43ae07fa","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def invalidDistance(distance: java.lang.Double): Double =\n  if (distance != null) distance.doubleValue else -1.0\n"}
{"id":"d4a22c1f-1ae1-4fdc-8030-6ee8d882dd8e","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"class FaultyFlightLog(val entries: Array[String])\ndef getLastLogEntry(log: FaultyFlightLog): String =\n  if (log != null && log.entries != null && log.entries.nonEmpty) log.entries.last else null\n"}
{"id":"f11d2c79-fcb5-44d5-9b92-5a7282f1fadd","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def traditionalMissionList(missions: java.util.List[String]): String =\n  if (missions != null && !missions.isEmpty) missions.get(0) else null\n"}
{"id":"486771c6-2f59-4e0a-ab80-f7933dcef1a5","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def checkWaypointCompletion(waypoint: AnyRef): Boolean =\n  if (waypoint != null) true else false\n"}
{"id":"13d3882c-828e-4415-956a-459b5da66311","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def unsafePayloadValue(payload: java.lang.Double): Double =\n  if (payload != null) payload.doubleValue else 0.0\n"}
{"id":"11a7cbdd-13b3-450a-88b7-08afde7c01f4","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def errorProneDroneStatus(status: String): String =\n  if (status != null) status else null\n"}
{"id":"1d7c7dc7-976d-4b90-9b65-1240eda0e47d","timestamp":1746098956973,"category":"null_checks","topicUsed":"Drone delivery path optimization","isIdiomatic":false,"code":"def legacyRouteCheck(route: Array[AnyRef]): AnyRef =\n  if (route != null && route.nonEmpty) route.last else null\n"}
{"id":"d204d61f-071a-466b-a9c9-686b7e4d7249","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimReference(referenceNumber: String)\ndef getClaimReference(optRef: Option[String]): Option[ClaimReference] =\n  optRef.map(ClaimReference(_))\n"}
{"id":"8fda8c20-cd46-4f5e-8443-3ae08f3dbfcd","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"case class PolicyHolder(id: String, name: String)\ndef findPolicyHolderById(identifier: String): PolicyHolder =\n  if (identifier == \"\") null else PolicyHolder(identifier, \"Taylor Evans\")\n"}
{"id":"0efe76e4-56d8-43ee-bb71-9989fe6f1ddb","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def safeAdjustorEmail(javaEmail: String): Option[String] =\n  Option(javaEmail).filter(_.contains(\"@\"))\n"}
{"id":"c7dd8b28-dfd9-4425-ae6b-31e08925d29f","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class ClaimSubmissionResult(val confirmationId: String)\ndef createClaimSubmissionResult(success: Boolean): ClaimSubmissionResult =\n  if (success) new ClaimSubmissionResult(\"CNF12345\") else null\n"}
{"id":"8c3ef581-3277-4631-9a73-d4c497c8de28","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class DamageReport(photoLink: String)\ndef maybeDamageReport(photo: String | Null): Option[DamageReport] =\n  Option(photo).map(DamageReport(_))\n"}
{"id":"c33e42d1-e05e-4605-bd49-f2b2b3c7ae1e","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getPolicyDocumentNumber(document: String): String =\n  if (document == null) \"NoDocument\" else document\n"}
{"id":"c23b6b40-9d80-4598-af41-feab46b9c7ba","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def adjustorFullName(maybeFirstName: Option[String], maybeLastName: Option[String]): Option[String] =\n  for\n    firstName <- maybeFirstName\n    lastName <- maybeLastName\n  yield s\"$firstName $lastName\"\n"}
{"id":"1c7fc294-fc81-4c4d-8e7f-786e6cc53ebc","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def claimDetailsOrNull(policyId: String): String =\n  if (policyId == \"123\") \"Fire damage, Policy 123\" else null\n"}
{"id":"ced668f7-0c12-4469-b762-7932c128bb96","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class SubmissionStatus(message: String)\ndef parseStatusOrNone(status: String | Null): Option[SubmissionStatus] =\n  Option(status).map(SubmissionStatus(_))\n"}
{"id":"195c00e7-aab3-492c-8842-2e6878aaec5c","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class IncidentReport(val description: String)\ndef javaIncidentReport(input: String): IncidentReport =\n  if (input != null && input.length > 0) new IncidentReport(input) else null\n"}
{"id":"67edc7c7-b73e-4c78-a6f4-505d862aa898","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class UploadedClaimFile(fileName: String, size: Long)\ndef safeGetUploadedFile(fileName: String | Null, size: java.lang.Long | Null): Option[UploadedClaimFile] =\n  for\n    f <- Option(fileName)\n    s <- Option(size)\n  yield UploadedClaimFile(f, s)\n"}
{"id":"0ec8184d-4071-4e07-94ff-634037f257bf","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def beneficiaryNumberOrNull(beneficiary: Map[String, String], numberKey: String): String =\n  val number = beneficiary.get(numberKey)\n  if (number.isDefined) number.get else null\n"}
{"id":"0c595bbd-1239-4d94-b30d-90c3b31b7d97","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimForm(formId: String, description: String)\ndef getExistingClaimForm(formId: String | Null): Option[ClaimForm] =\n  Option(formId).map(fid => ClaimForm(fid, \"Standard accident claim\"))\n"}
{"id":"ff442e24-acac-488b-8f53-5623da65c2ad","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def insurerAddressOrFallback(insurer: String, address: String): String =\n  if (address != null) address else \"Unknown Address\"\n"}
{"id":"53b74507-eb70-4a90-a0e5-1cff4c96d1fa","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def validateAdjustorSignature(signature: String | Null): Option[Boolean] =\n  Option(signature).map(_.nonEmpty)\n"}
{"id":"6e43567a-82c1-4ea3-af34-61895b3c5a1b","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"class EvidenceUploader {\n  def uploadEvidence(evidence: String): String =\n    if (evidence == null) null else s\"Uploaded $evidence\"\n}\n"}
{"id":"bea375ec-dd86-4e33-b939-9151437f25be","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def claimantMiddleName(name: String | Null): Option[String] =\n  Option(name).filter(_.nonEmpty)\n"}
{"id":"fba00dfb-900e-4d05-a1b9-55591d1dd1e8","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getRejectedReason(message: String): String =\n  if (message != null) message else \"No reason provided\"\n"}
{"id":"7283e115-fb7e-4cb2-897d-9aa85a7685d2","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimContactNumber(number: String)\ndef safeContactNumber(num: String | Null): Option[ClaimContactNumber] =\n  Option(num).map(ClaimContactNumber(_))\n"}
{"id":"ee585b32-8d11-4bed-b9fa-947bf61451ca","timestamp":1746098971987,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def adjustorMobile(javaMobile: String): String =\n  if (javaMobile == null) \"Unknown\" else javaMobile\n"}
{"id":"4a4c995f-115c-4efa-ad96-b913aa848241","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimantProfile(name: String, email: String)\ndef findClaimantProfileByEmail(email: String): Option[ClaimantProfile] = {\n  val result: ClaimantProfile | Null = legacyClaimantLookup(email)\n  Option(result)\n}"}
{"id":"a0963f37-1e8b-487b-997c-5591900b453f","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def getPolicyNumberOrDefault(submission: InsuranceSubmission): String = {\n  Option(submission.policyNumber).getOrElse(\"UNKNOWN-POLICY\")\n}"}
{"id":"19c911b5-923e-4aaf-b894-9b4d270f8872","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class ClaimDocument(documentId: String, uploaded: Boolean)\ndef documentStatus(doc: ClaimDocument | Null): Option[String] = {\n  Option(doc).map(d => if d.uploaded then \"Uploaded\" else \"Pending\")\n}"}
{"id":"865f3b07-0413-4237-98f4-80f1298f5e26","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def safeGetClaimAmount(claimDetails: ClaimDetails | Null): Option[Double] = {\n  Option(claimDetails).flatMap(details => Option(details.amount))\n}"}
{"id":"32200d2f-3d53-43a7-aa36-e8feb8ce1737","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def claimantFullName(maybeClaimant: Option[ClaimantInfo]): String = {\n  maybeClaimant.map(_.fullName).getOrElse(\"Unknown Claimant\")\n}"}
{"id":"73d53877-7b91-4290-a5be-6353dec6cc6c","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def validateContactNumber(maybeContact: Option[String]): Boolean = {\n  maybeContact.exists(number => number.length == 10)\n}"}
{"id":"cee1b04f-1c73-40ad-ab64-4d7a5a4ddaa8","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def claimantEmail(claimInfo: ClaimSubmission | Null): Option[String] = {\n  Option(claimInfo).flatMap(c => Option(c.email))\n}"}
{"id":"ea827e63-2a72-4354-9bed-fb7adc6a2a57","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def updateClaimStatus(claim: Option[InsuranceClaim], newStatus: String): Option[InsuranceClaim] = {\n  claim.map(c => c.copy(status = newStatus))\n}"}
{"id":"87ed725b-f985-4003-8953-ec6210dd885b","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"def getAdjusterPhoneNumber(submission: InsuranceSubmission): Option[String] = {\n  Option(submission.adjusterPhone)\n}"}
{"id":"a1fca1cc-0ee2-4ccf-8ce0-9e65ee4c985f","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":true,"code":"case class BankDetails(account: String, ifsc: String)\ndef retrieveBankDetails(claim: Option[ClaimRequest]): Option[BankDetails] = {\n  claim.flatMap(c => Option(c.bankDetails))\n}"}
{"id":"0b600a68-46f9-4e22-a1db-289ca65a6a82","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def isAttachmentPresent(attachment: Attachment | Null): Boolean = {\n  if (attachment != null) true else false\n}"}
{"id":"6d519d23-8f9a-4cf2-936d-64d9182e5465","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getClaimIdLegacy(claim: InsuranceClaim): String = {\n  val claimId = legacyClaimIdFetcher(claim)\n  if (claimId == null) \"MISSING-ID\" else claimId\n}"}
{"id":"4f76df4b-3b53-44fa-9fbf-12ce5501bfa4","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def fetchClaimEvaluator(submission: InsuranceSubmission): Adjuster = {\n  val evaluator = legacyFetchAdjuster(submission.id)\n  if (evaluator != null) evaluator else DefaultAdjuster\n}"}
{"id":"6cf3a3dd-5a4a-4386-80c9-aacac858ae6b","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def printClaimantMobile(claimant: Claimant | Null): Unit = {\n  if(claimant != null) println(claimant.mobile)\n}"}
{"id":"20998225-40a6-4b02-856a-ed4b45a5d3c9","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def claimAmountOrZero(details: ClaimDetails | Null): Double = {\n  if (details != null) details.amount else 0.0\n}"}
{"id":"f70f0479-fd3d-4db7-84ef-ccd6fb0b5de2","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def riskAssessment(maybeRisk: RiskScore | Null): String = {\n  if (maybeRisk == null) \"Not Assessed\" else maybeRisk.score.toString\n}"}
{"id":"83e8f77c-e77a-46c8-abe6-1f8b387e7b2d","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getPolicyholderAddress(policy: InsurancePolicy | Null): String = {\n  if (policy == null) \"Address Not Found\" else policy.address\n}"}
{"id":"56193f43-d20b-464b-aa39-d6a708337974","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def failIfClaimTypeInvalid(claimType: String | Null): Unit = {\n  if(claimType == null) throw IllegalArgumentException(\"Claim type required\")\n}"}
{"id":"49c1fe83-c4cf-4bf9-8a51-821ff834e965","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def markClaimReviewed(claim: InsuranceClaim | Null): InsuranceClaim | Null = {\n  if (claim != null) claim.copy(reviewed = true) else null\n}"}
{"id":"f6be3485-2c9f-4846-a1e3-bd9aee199e09","timestamp":1746098992503,"category":"null_checks","topicUsed":"Insurance claim submission portal","isIdiomatic":false,"code":"def getSubmissionReferenceNo(submission: InsuranceSubmission | Null): String = {\n  if (submission != null) submission.referenceNo else null\n}"}
{"id":"4262032c-c2e2-431e-8eda-1fece10c3112","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"object QuizScoreAnalyzer:\n  def getStudentScore(studentId: String): Option[Int] =\n    val scoreFromDatabase: Integer = fetchQuizScoreFromJavaDb(studentId)\n    Option(scoreFromDatabase).map(_.toInt)\n\ndef fetchQuizScoreFromJavaDb(studentId: String): Integer =\n  if studentId == \"S100\" then 88 else null\n\nval scoreOpt = QuizScoreAnalyzer.getStudentScore(\"S100\")\nval displayedScore = scoreOpt.getOrElse(0)"}
{"id":"d68a791c-2b82-427a-b66f-09b3c0b6f3c6","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"class AssignmentSubmission(val timestamp: String)\nobject SubmissionChecker:\n  def submissionTime(option: Option[AssignmentSubmission]): String =\n    option.map(_.timestamp).getOrElse(\"No submission\")\n\nval submission = Option(new AssignmentSubmission(\"2024-05-31T10:30\"))\nval msg = SubmissionChecker.submissionTime(submission)"}
{"id":"45910b03-b30c-436b-af27-60015dc53f8b","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def filterActiveEnrollment(enrollmentStatus: String | Null): Option[String] =\n  Option(enrollmentStatus).filter(_ == \"Active\")\n\nval result = filterActiveEnrollment(null)\nval output = result.getOrElse(\"No active enrollment\")"}
{"id":"c3ab88a3-fe08-4d10-a7b0-f99737b771a6","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def safeRetrieveFeedback(jFeedback: String | Null): Option[String] =\n  Option(jFeedback).map(_.trim).filter(_.nonEmpty)\n\nval cleaned = safeRetrieveFeedback(\"  Needs Improvement  \").getOrElse(\"No Feedback\")"}
{"id":"e3fba0a0-4f49-4f5c-913b-fe090804a3af","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def courseRatingIfProvided(input: java.lang.Integer): Option[Int] =\n  Option(input).map(_.toInt)\n\nval ratingOpt = courseRatingIfProvided(null).getOrElse(0)"}
{"id":"c3768ac2-3b5e-45c9-8219-87e4bb2c25d9","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class AttendanceRecord(studentId: String, daysPresent: Int)\ndef firstAttendance(records: List[AttendanceRecord] | Null): Option[AttendanceRecord] =\n  Option(records).flatMap(_.headOption)\n\nval attendance = firstAttendance(null)\nval result = attendance.getOrElse(AttendanceRecord(\"N/A\", 0))"}
{"id":"2b9687ac-e2d1-48fb-9046-b5c24144d3ff","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def finalExamResult(score: java.lang.Double): Option[Double] =\n  Option(score).filter(_ >= 60.0).map(_.toDouble)\n\nval resultOpt = finalExamResult(null)\nval passed = resultOpt.exists(_ >= 70.0)"}
{"id":"55f24246-2a7e-4756-99f9-7157d3b6efd9","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"object FeedbackUtils:\n  def wordCount(feedback: Option[String]): Int =\n    feedback.map(_.split(\" \").length).getOrElse(0)\n\nval count = FeedbackUtils.wordCount(Some(\"Great learning material\"))"}
{"id":"ef7c298f-0a2a-45fc-9060-cf7f9caf1a16","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def extractStudentEmail(javaEmail: String | Null): Option[String] =\n  Option(javaEmail).filter(_.contains(\"@\"))\n\nval email = extractStudentEmail(\"student@uni.edu\")\nval fallback = email.getOrElse(\"anonymous@unknown\")"}
{"id":"64542382-36ce-4ea3-b34b-02020785e509","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def safeAccessPeerReview(peerReview: String | Null): Option[String] =\n  Option(peerReview).filter(_.nonEmpty)\n\nval reviewOpt = safeAccessPeerReview(null)\nval displayed = reviewOpt.getOrElse(\"No review submitted\")"}
{"id":"5abbbba6-724f-4769-b1f2-a798b19ca44d","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"object GradeRetriever:\n  def getStudentGrade(studentName: String): java.lang.Double =\n    if studentName == \"Oliver\" then 92.0 else null\n\ndef retrieveGrade(studentName: String): Double =\n  val grade = GradeRetriever.getStudentGrade(studentName)\n  if grade != null then grade else -1.0\n\nval oliverGrade = retrieveGrade(\"Oliver\")"}
{"id":"ae693825-74f9-47ab-8408-636a45378af4","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def enrollmentCountJava(courseId: String): Integer =\n  if courseId == \"MATH101\" then 43 else null\n\ndef handleEnrollmentCount(courseId: String): Int =\n  val count = enrollmentCountJava(courseId)\n  if count == null then 0 else count\n\nval mathEnrollment = handleEnrollmentCount(\"MATH101\")"}
{"id":"81b0b397-58b2-4fc6-8662-71790767434c","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class StudentProgress(val level: String)\ndef fetchProgressFromLegacy(studentId: String): StudentProgress =\n  if studentId == \"STU100\" then new StudentProgress(\"Intermediate\") else null\n\ndef getProgressLevel(studentId: String): String =\n  val progress = fetchProgressFromLegacy(studentId)\n  if progress != null then progress.level else \"Unknown\"\n\nval progressLevel = getProgressLevel(\"STU100\")"}
{"id":"a1073c6c-819a-4dfb-a3fa-1c1683abc8d6","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def checkAssignmentTitle(assignmentTitle: String): Boolean =\n  if assignmentTitle == null then false\n  else assignmentTitle.nonEmpty\n\nval titleValid = checkAssignmentTitle(null)"}
{"id":"80443860-f764-4cc2-aa10-8640be33460b","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getSurveyAnswerLegacy(answerId: Int): String =\n  if answerId == 200 then \"Yes\" else null\n\ndef processSurveyAnswer(answerId: Int): String =\n  val answer = getSurveyAnswerLegacy(answerId)\n  if answer != null then answer else \"No answer provided\"\n\nval answerString = processSurveyAnswer(100)"}
{"id":"7de13ada-b0da-4ed6-86be-9f7d6a1229f1","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"class ResourceDownload(val fileName: String)\ndef latestDownloadLegacy(studentId: String): ResourceDownload =\n  if studentId == \"A201\" then new ResourceDownload(\"lecture1.pdf\")\n  else null\n\ndef getDownloadedResourceName(studentId: String): String =\n  val download = latestDownloadLegacy(studentId)\n  if download == null then \"No download\" else download.fileName\n\nval file = getDownloadedResourceName(\"A201\")"}
{"id":"4d0f7a85-aab2-4f28-873d-6d851b2fbcef","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def retrieveForumPostText(jForumPost: String): String =\n  if jForumPost != null then jForumPost.toUpperCase else \"No post\"\n\nval upperText = retrieveForumPostText(null)"}
{"id":"890adcd8-431a-4d41-abe8-1c539ca8e2df","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getSessionDurationJava(sessionId: String): Integer =\n  if sessionId == \"S50\" then 120 else null\n\ndef getSessionMinutes(sessionId: String): Int =\n  val duration = getSessionDurationJava(sessionId)\n  if duration != null then duration else -1\n\nval durationMinutes = getSessionMinutes(\"X100\")"}
{"id":"2b3a6739-02d8-4842-a5b5-20bb229cefce","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def lookupQuizAttempt(jQuizResult: java.lang.String): String =\n  if jQuizResult == null then \"No attempt recorded\" else jQuizResult\n\nval attempt = lookupQuizAttempt(null)"}
{"id":"c9faeb7b-bb4e-4ec9-97ee-7bc914ebb4e1","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getStudentDashboardURL(jDashboardURL: String): String =\n  if jDashboardURL != null then jDashboardURL else \"Unavailable\"\n\nval dashboard = getStudentDashboardURL(null)"}
{"id":"7ed13132-c764-4972-8923-7128c8676bc7","timestamp":1746099014155,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getInactiveStudentsLegacy(courseCode: String): Array[String] =\n  if courseCode == \"CS101\" then Array(\"stu1\", \"stu2\") else null\n\ndef countInactive(courseCode: String): Int =\n  val arr = getInactiveStudentsLegacy(courseCode)\n  if arr != null then arr.length else 0\n\nval inactiveCount = countInactive(\"CS101\")"}
{"id":"3b51f5d1-da6f-42c5-a266-19e5c0212221","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class StudentAssessment(score: Double, feedback: String)\ndef getStudentAssessment(name: String): Option[StudentAssessment] = {\n  val rawAssessment = javaStyleAssessmentLookup(name)\n  Option(rawAssessment)\n}\ndef javaStyleAssessmentLookup(name: String): StudentAssessment | Null =\n  if name == \"Ada\" then StudentAssessment(92.0, \"Excellent\") else null"}
{"id":"e2d6ffe4-c8ce-48f9-b7f9-bbe88be9cd34","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def calculateAverageGrade(grades: List[Int]): Option[Double] =\n  if grades.nonEmpty then Some(grades.sum.toDouble / grades.length) else None"}
{"id":"8375b02e-bbb4-46e5-bd4d-c783911582c5","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getLatestQuizScore(studentId: String): Int = {\n  val score = databaseFetchQuizScore(studentId)\n  if (score != null) {\n    score\n  } else {\n    -1\n  }\n}\ndef databaseFetchQuizScore(studentId: String): Integer | Null = if (studentId == \"s100\") 85 else null"}
{"id":"6ce78eab-09bf-42c8-95c2-7c5a9d1c20fd","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class CourseProgress(unitsCompleted: Int)\ndef findCourseProgress(studentId: String): Option[CourseProgress] =\n  Option(fetchProgressFromExternalSystem(studentId))\ndef fetchProgressFromExternalSystem(studentId: String): CourseProgress | Null =\n  if studentId == \"s99\" then CourseProgress(10) else null"}
{"id":"46786488-c061-49e1-ba0f-8cd36fd0ce1d","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def printSemesterGPA(studentName: String): Unit = {\n  val gpa = lookupGPAViaLegacySystem(studentName)\n  if (gpa != null) {\n    println(s\"GPA: $gpa\")\n  } else {\n    println(\"No GPA available.\")\n  }\n}\ndef lookupGPAViaLegacySystem(studentName: String): java.lang.Double | Null =\n  if (studentName == \"Aiden\") 3.7 else null"}
{"id":"b6ffcec5-3584-4c47-8211-2fb0c906caeb","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def getLearningPathway(studentEmail: String): Option[String] =\n  Option(legacyLearningPathwaySystem(studentEmail))\ndef legacyLearningPathwaySystem(studentEmail: String): String | Null =\n  if studentEmail.endsWith(\"@school.edu\") then \"STEM Pathway\" else null"}
{"id":"fbac8af0-4d47-407b-8f2b-0d35d12e2cb2","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def markAsInactiveIfNoSubmission(report: StudentSubmissionReport | Null): String =\n  if(report == null) \"Inactive\" else \"Active\"\nclass StudentSubmissionReport(val submittedAssignments: Int)"}
{"id":"0ee82897-46ba-4f90-9519-27624cc7ac41","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def fetchStudentAttendance(studentId: String): Option[Int] =\n  Option(attendanceSystem(studentId))\ndef attendanceSystem(studentId: String): Integer | Null =\n  if studentId == \"110045\" then 12 else null"}
{"id":"e47c6436-6b51-405c-876c-3c0f8cb46c17","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def countCompletedModules(modules: List[String]): Option[Int] =\n  Option(modules)\n    .filter(_.nonEmpty)\n    .map(_.length)"}
{"id":"ee545654-3174-4381-a74a-62e4785e5ba6","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def calculateFeedbackLength(feedback: String | Null): Int =\n  if (feedback != null) feedback.length else 0"}
{"id":"85b4117b-eb4b-4173-af35-91f19632d6da","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def updateStudentProfile(studentId: String, newEmail: String): String | Null =\n  if(newEmail.endsWith(\"@alumni.edu\")) null else newEmail"}
{"id":"61f55383-f46c-4c89-9f04-3595bba999bc","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def getCourseRecommendation(studentYear: Int): Option[String] =\n  Option(recommendationLookup(studentYear))\ndef recommendationLookup(studentYear: Int): String | Null =\n  if studentYear == 3 then \"Advanced Analytics\" else null"}
{"id":"bd443912-49a3-4de9-9820-d88d45e96cb9","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def fetchSessionNotes(sessionId: String): String = {\n  val notes = legacyNotesProvider(sessionId)\n  if(notes == null) \"No notes found.\" else notes\n}\ndef legacyNotesProvider(sessionId: String): String | Null = if(sessionId == \"S01\") \"Session began at 9:00\" else null"}
{"id":"5b8278df-a47b-4498-b2e7-0e6185a417cc","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def getTimeOnTask(activity: String): Option[Int] =\n  Option(legacyActivityTracker(activity))\ndef legacyActivityTracker(activity: String): Integer | Null =\n  if activity == \"quiz\" then 29 else null"}
{"id":"146e2a09-806d-4d11-ac64-87eca4941d8e","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getPeerReviewScore(reviewerId: String): java.lang.Double | Null =\n  if(reviewerId == \"peer42\") 4.5 else null"}
{"id":"495aff0c-8205-447f-b796-379209fe0450","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"def extractLearningObjective(topic: String): Option[String] =\n  Option(null)\n    .orElse(Some(s\"Understand $topic effectively\"))\n    .filter(_.contains(\"Understand\"))"}
{"id":"b67b7260-286c-4248-8669-065dd17f5153","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":true,"code":"case class EngagementMetrics(videosWatched: Int)\ndef wrapNullToOption(metrics: EngagementMetrics | Null): Option[EngagementMetrics] =\n  Option(metrics)"}
{"id":"82343f1a-555b-4e3a-9ce4-2ef325d9ae31","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def fetchDiscussionReplyCount(threadId: String): Integer | Null =\n  if(threadId.startsWith(\"T\")) 14 else null\n\ndef showDiscussionReplyCount(threadId: String): String = {\n  val replyCount = fetchDiscussionReplyCount(threadId)\n  if(replyCount != null) replyCount.toString else \"No replies\"\n}"}
{"id":"31a88584-a9dd-4fd0-94a1-f6c487abae05","timestamp":1746099031533,"category":"null_checks","topicUsed":"Education learning analytics","isIdiomatic":false,"code":"def getResourceCompletion(studentId: String): Integer | Null =\n  if(studentId == \"stu42\") null else 5"}
{"id":"0189ad60-0d82-46ab-80e5-16e78b21782d","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Recipe(name: String, ingredients: List[String])\ndef getRecipeById(id: String): Option[Recipe] =\n  recipesDatabase.find(_.id == id)\nval userFavorite: Option[Recipe] = getRecipeById(\"r42\")\nval favoriteName = userFavorite.map(_.name).getOrElse(\"No favorite recipe\")"}
{"id":"e1c815b0-1e0d-4c65-a25a-7ead1932b00a","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def fetchNutritionInfo(recipeName: String): String =\n  if (recipeName == null) null\n  else {\n    // Simulate fetching nutrition info\n    \"Calories: 250\"\n  }\nval nutrition = fetchNutritionInfo(null)\nif (nutrition != null) println(nutrition)"}
{"id":"b51f14d7-a0d2-4354-a444-3ffbd426204c","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recommendRecipe(preferences: Option[List[String]]): Option[String] =\n  preferences.flatMap(_.headOption).map(pref => s\"We recommend $pref Delight!\")\nval recommendation = recommendRecipe(Some(List(\"Quinoa\", \"Avocado\")))\nprintln(recommendation.getOrElse(\"No recommendation available\"))"}
{"id":"582e568f-4e15-47ab-8bc6-2a3f9f94e34d","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def lookupUserRestrictions(username: String): String =\n  if (username == null) return null\n  if (username == \"alice\") \"nuts\"\n  else null\nval restriction = lookupUserRestrictions(null)\nif (restriction != null) println(s\"Allergy: $restriction\") else println(\"No allergy info\")"}
{"id":"cb9217b1-fd60-4133-a8af-4409fa186c42","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeJavaRecipeTitle(javaTitle: String): Option[String] =\n  Option(javaTitle)\nval titleOption = safeJavaRecipeTitle(null)\nprintln(titleOption.getOrElse(\"Untitled Recipe\"))"}
{"id":"6f8c0ca1-a1ff-4b0f-a2cb-ec857f794b1f","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def fetchRecipeTags(recipeId: String): Array[String] =\n  if (recipeId == null) null\n  else Array(\"vegan\", \"gluten-free\")\nval tags = fetchRecipeTags(null)\nif (tags != null) println(tags.mkString(\", \"))"}
{"id":"dd605139-4847-40d1-b401-e7f0a304d2f1","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def personalizedGroceryList(userIngredients: Option[List[String]]): List[String] =\n  userIngredients.getOrElse(List(\"Milk\", \"Bread\"))\nval groceryList = personalizedGroceryList(None)\ngroceryList.foreach(println)"}
{"id":"935c7b32-64d6-4dcd-a351-c01e3224f792","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class UserPreferencesDatabase {\n  def findDietType(username: String): String = {\n    if (username == null) return null\n    if (username == \"ben\") \"vegetarian\" else null\n  }\n}\nval db = new UserPreferencesDatabase()\nval diet = db.findDietType(null)\nif (diet != null) println(diet) else println(\"Unknown diet\")"}
{"id":"27e40465-0ca8-4109-9f4b-d2ce863b1c67","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safelyGetIngredient(ingredient: String): Option[String] =\n  Option(ingredient).filter(_.nonEmpty)\nval maybeIngredient = safelyGetIngredient(\"\")\nprintln(maybeIngredient.getOrElse(\"No ingredient provided\"))"}
{"id":"da5daa8c-2d5b-447f-8757-0f508079439b","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def getAlternateRecipe(recipe: String): String =\n  if (recipe == null) null\n  else s\"$recipe (Low-Sodium)\"\nval alt = getAlternateRecipe(null)\nif (alt != null) println(alt)"}
{"id":"37599a56-79b7-4dc5-9576-22ec334cdec7","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def extractDietaryInfo(recipeNotes: Option[String]): String =\n  recipeNotes.filter(_.contains(\"gluten-free\")).getOrElse(\"No dietary info\")\nval info = extractDietaryInfo(Some(\"This is a gluten-free meal.\"))\nprintln(info)"}
{"id":"9d459a63-55b3-43a6-90b4-a5f6f70ca452","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class JavaRecipeBook {\n  def searchRecipeByName(name: String): String =\n    if (name == null) null else \"Tomato Soup\"\n}\nval book = new JavaRecipeBook()\nval foundRecipe = book.searchRecipeByName(null)\nif (foundRecipe != null) println(foundRecipe) else println(\"Recipe not found\")"}
{"id":"a0557e8a-7675-4420-9720-3627e75dada3","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def getUserLastCooked(userId: String): Option[String] =\n  if userId == \"eve\" then Some(\"Spinach Pie\") else None\nval lastCooked = getUserLastCooked(\"alice\").getOrElse(\"Never cooked before\")\nprintln(lastCooked)"}
{"id":"c3d8b144-1eb2-48ee-bbe9-784690eef6df","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def fetchFavoriteCuisine(userEmail: String): String =\n  if (userEmail == null) null\n  else if (userEmail.contains(\"@spice.com\")) \"Indian\" else null\nval favCuisine = fetchFavoriteCuisine(null)\nif (favCuisine != null) println(favCuisine)"}
{"id":"4899ed04-9148-4318-9048-9f7c35110898","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def applyUserDietPreference(recipe: String, dietOption: Option[String]): String =\n  dietOption match\n    case Some(diet) => s\"$recipe ($diet friendly)\"\n    case None => recipe\nval result = applyUserDietPreference(\"Pasta\", Some(\"Vegan\"))\nprintln(result)"}
{"id":"95e9bf22-f559-4db5-ba56-12ebe962c0b7","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class PersonalizedRecommendationSystem {\n  def nextRecommendation(previous: String): String =\n    if (previous == null) null else \"Quiche Lorraine\"\n}\nval recommender = new PersonalizedRecommendationSystem()\nval next = recommender.nextRecommendation(null)\nif (next != null) println(next) else println(\"No recommendation\")"}
{"id":"20b747ef-fbb9-4f0e-a409-de52395583d0","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeGetCalorieCount(calorieStr: String): Option[Int] =\n  Option(calorieStr).flatMap(s => scala.util.Try(s.toInt).toOption)\nval calories = safeGetCalorieCount(\"300\").getOrElse(0)\nprintln(calories)"}
{"id":"fd4575d8-5622-4019-a571-a087160acc4d","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def getUserSavedRecipes(username: String): Array[String] =\n  if (username == null) null\n  else Array(\"Ratatouille\", \"Minestrone\")\nval saved = getUserSavedRecipes(null)\nif (saved != null) saved.foreach(println)"}
{"id":"6cd8cf4d-3849-4e04-aa5b-ab1448f274da","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recommendVeganOption(recipe: Option[String]): Option[String] =\n  recipe.filter(_.toLowerCase.contains(\"vegan\"))\nval veganRec = recommendVeganOption(Some(\"Vegan Curry\"))\nprintln(veganRec.getOrElse(\"No vegan recommendation\"))"}
{"id":"f0c4032f-3dcb-4c5d-a0a4-5dd3de232d88","timestamp":1746099056092,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def findRecipeRating(recipeId: String): java.lang.Integer =\n  if (recipeId == null) null\n  else 5\nval rating = findRecipeRating(null)\nif (rating != null) println(s\"Rating: $rating stars\") else println(\"No rating\")"}
{"id":"e96b6973-7dab-45f2-a864-b7feedb8e0d9","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"case class RecipeDetails(name: String, ingredients: List[String], instructions: String)\ndef fetchRecipeFromJavaApi(recipeId: String): RecipeDetails = {\n  // simulate Java API call that might return null\n  if (recipeId == \"42\") null else RecipeDetails(\"Pasta Primavera\", List(\"pasta\", \"vegetables\"), \"Boil pasta. Add veggies.\")\n}\ndef getSafeRecipe(recipeId: String): RecipeDetails = {\n  val recipe = fetchRecipeFromJavaApi(recipeId)\n  if (recipe == null) RecipeDetails(\"Unknown Recipe\", List(), \"No instructions available.\")\n  else recipe\n}"}
{"id":"d0da93d4-0886-4f04-a56f-e10136993999","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def recommendRecipeBasedOnPreferences(preferences: Array[String]): String = {\n  if (preferences == null) {\n    return null\n  }\n  if (preferences.contains(\"vegan\")) {\n    \"Vegan Quinoa Bowl\"\n  } else {\n    null\n  }\n}"}
{"id":"98060785-c812-414c-9796-381d0612d0f8","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"object IngredientChecker {\n  def checkAllergicIngredient(ingredient: String): Boolean = {\n    if (ingredient == null) false\n    else ingredient.equalsIgnoreCase(\"peanut\")\n  }\n}"}
{"id":"7959a55d-7b20-47d3-a6de-3531166414fd","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class UserProfile(val favoriteCuisine: String) {\n  def isVegetarian: java.lang.Boolean = {\n    if (favoriteCuisine == null)\n      null\n    else\n      favoriteCuisine.equalsIgnoreCase(\"Vegetarian\")\n  }\n}"}
{"id":"90367bd8-d0ff-438a-a5a9-38158afeac58","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def getRatingFromLegacyDb(recipeName: String): java.lang.Integer = {\n  if (recipeName == null) null\n  else if (recipeName == \"Lentil Soup\") 5 else null\n}"}
{"id":"90275174-1635-4698-8ee9-198c17bcd2cc","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def findRecipeById(recipeId: String): String = {\n  if (recipeId != null && recipeId == \"100\") {\n    \"Spicy Tofu Bowl\"\n  } else {\n    null\n  }\n}"}
{"id":"cca14c48-30e2-4462-92a9-67740d7d5bf8","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def userPreferredRecipes(userPreferences: java.util.List[String]): String = {\n  if (userPreferences == null) {\n    return null\n  }\n  if (userPreferences.contains(\"gluten-free\")) {\n    \"Chickpea Salad\"\n  } else {\n    null\n  }\n}"}
{"id":"3dc13a2f-37ac-47a6-87da-0ddc8a571c31","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def getLastViewedRecipe(lastViewed: String): String = {\n  if (lastViewed == null)\n    null\n  else\n    lastViewed\n}"}
{"id":"621dac3c-d50d-419f-85fb-46c95ede97f0","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"class RecipeIngredientFinder {\n  def findIngredient(recipeName: String, ingredient: String): String = {\n    if (recipeName == null || ingredient == null)\n      null\n    else if (recipeName == \"Fruit Parfait\" && ingredient == \"Yogurt\")\n      \"Yogurt\"\n    else\n      null\n  }\n}"}
{"id":"bab0089b-c55e-4b37-9fba-cb5033f9848d","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":false,"code":"def fetchAlternativeRecipe(mainIngredient: String): String = {\n  if(mainIngredient == null) {\n    null\n  } else if(mainIngredient == \"eggplant\") {\n    \"Eggplant Parmesan\"\n  } else {\n    null\n  }\n}"}
{"id":"fb5cfe1d-aaf7-461d-8bd8-5f512b221df1","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"case class Recipe(title: String, ingredients: List[String])\ndef safeRecipeLookup(recipeTitle: String): Option[Recipe] = {\n  Option(recipeTitle).filter(_.nonEmpty).map(title => Recipe(title, List(\"tomato\", \"onion\")))\n}"}
{"id":"2d18ba65-5315-4852-8d73-a3203c02875d","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def veganSubstituteOption(ingredient: String): Option[String] = {\n  Option(ingredient).flatMap {\n    case \"cheese\" => Some(\"vegan cheese\")\n    case \"milk\" => Some(\"soy milk\")\n    case _ => None\n  }\n}"}
{"id":"74a514ca-9e8c-4218-b00d-40cd373f87d2","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def userFavoriteRecipeOption(favorite: String): Option[String] = Option(favorite).filter(_.nonEmpty)"}
{"id":"bd2c3e73-66a0-4534-884b-6feb10c7b4a5","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def getPersonalizedRecipeSuggestion(userId: String): Option[String] = {\n  Option(userId).flatMap {\n    case \"user_123\" => Some(\"Grilled Portobello Burger\")\n    case \"user_456\" => Some(\"Moroccan Couscous\")\n    case _ => None\n  }\n}"}
{"id":"09994a4b-8795-483b-8020-2fd6586e8fb4","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recipeRatingOption(recipeName: String): Option[Int] = {\n  Option(recipeName).flatMap(name => if (name == \"Stir Fry\") Some(5) else None)\n}"}
{"id":"bbf237bb-00c4-4654-8c5f-b2566620982e","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def getCalorieInfo(recipe: String): Option[Int] = {\n  Option(recipe).map(_.toLowerCase) match {\n    case Some(\"fruit smoothie\") => Some(220)\n    case Some(\"caesar salad\") => Some(360)\n    case _ => None\n  }\n}"}
{"id":"3756b362-be95-469d-8c11-e7658a0b78de","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def getRecommendedIngredient(ingredient: String): Option[String] = {\n  Option(ingredient).filter(_.nonEmpty).map(_.capitalize)\n}"}
{"id":"f78545fb-fe2e-4fe6-a82f-619c23dd792c","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def recommendDairyAlternative(ingredient: String): Option[String] = {\n  Option(ingredient).collect {\n    case \"milk\" => \"almond milk\"\n    case \"butter\" => \"coconut oil\"\n  }\n}"}
{"id":"9b04fb99-a5e0-499e-bd39-2b0ad3af9817","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def safeParseUserSubmittedRecipe(recipeJson: String): Option[String] = {\n  Option(recipeJson).filter(_.contains(\"name\")).map(_ => \"Valid Recipe\")\n}"}
{"id":"a015a697-7a36-4dd1-83fb-8d45492c3b22","timestamp":1746099077486,"category":"null_checks","topicUsed":"Personalized recipe recommender","isIdiomatic":true,"code":"def suggestBasedOnAllergies(allergy: String): Option[String] = {\n  Option(allergy).map(_.toLowerCase).filter(_ == \"walnut\").map(_ => \"Recommend nut-free desserts\")\n}"}
{"id":"f597a24c-e16c-4dff-98e3-e413ba4b396e","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class DonorProfile(donorId: String, name: String)\ndef findDonorProfile(id: String): Option[DonorProfile] = Option(queryDatabaseForDonor(id))\ndef queryDatabaseForDonor(id: String): DonorProfile = if id.nonEmpty then DonorProfile(id, \"Priya\") else null\nval donorOpt = findDonorProfile(\"D100\")\nval donorName = donorOpt.map(_.name).getOrElse(\"Guest\")"}
{"id":"b8d7c51c-2f7b-440f-8080-36fa6ea847a1","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getDonationAmount(campaignId: String): java.lang.Integer = if campaignId == \"C202\" then 2500 else null\nval donationOpt = Option(getDonationAmount(\"C202\")).map(_.toInt)\nval amt = donationOpt.fold(0)(_ + 500)"}
{"id":"efd6317a-8820-4436-b7fe-96c1cbd9273d","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def legacyFindCharityById(charityId: String): String = if charityId == \"CHARITABLE123\" then \"Water Relief\" else null\nval charity: String = legacyFindCharityById(\"UNKNOWN\")\nif (charity == null) println(\"Charity not found\") else println(s\"Charity: $charity\")"}
{"id":"06a2b3eb-5a41-466b-8b3b-2e61062c8098","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"case class Campaign(title: String, description: String)\ndef getCampaignFromExternalSource(code: String): Campaign =\n  if code == \"FOOD2024\" then Campaign(\"Food Supplies\", \"Helping the needy\") else null\nval result = getCampaignFromExternalSource(\"MED2023\")\nif (result != null) println(result.title) else println(\"No campaign found\")"}
{"id":"9b0bfcc6-b3f3-42b3-b7e3-61c7b667ab02","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def safeGetDonorEmail(donor: AnyRef): Option[String] = Option(donor).collect { case d: Donor => d.email }\nclass Donor(val name: String, val email: String)\nval emailOpt = safeGetDonorEmail(new Donor(\"Lena\", \"lena@example.com\"))\nval email = emailOpt.getOrElse(\"not_provided@charity.org\")"}
{"id":"e7a551db-3d97-4813-a2ed-e6999af9b425","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"val legacyContact: String = null\nval message = if (legacyContact == null) \"No contact provided\" else s\"Contact: $legacyContact\"\nprintln(message)"}
{"id":"bcc5d893-3484-4011-93b6-d433400b5b0c","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def fetchBeneficiaryReference(ref: String): String = if ref == \"BEN102\" then \"Sarah J\" else null\nval name = fetchBeneficiaryReference(\"BEN101\")\nif (name == null) println(\"Beneficiary not found\") else println(name)"}
{"id":"d5819fd4-90f5-4398-961a-79087e9cbb10","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def updateCampaignGoal(goal: java.lang.Integer): Option[Int] = Option(goal).map(_.toInt)\nval adjustedGoal = updateCampaignGoal(null).getOrElse(10000)"}
{"id":"cdeb4e8a-ba5e-4e57-ab0f-a52467456a1b","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getDonationReceipt(donationId: Long): Option[String] = Option(callJavaReceiptSystem(donationId))\ndef callJavaReceiptSystem(donationId: Long): String = if donationId > 0 then s\"RCT$donationId\" else null\nval receipt = getDonationReceipt(200L).getOrElse(\"Pending\")"}
{"id":"b0d8412f-da29-454a-8cf3-85267ff63b43","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def assignCharityEventCoordinator(event: String): String = if event == \"FUNDRAISE2024\" then \"Nicole\" else null\nval coordinator = assignCharityEventCoordinator(\"VOLUNTEERDAY\")\nif (coordinator != null) println(s\"Coordinator assigned: $coordinator\") else println(\"No coordinator assigned\")"}
{"id":"8743ca79-6c34-4a77-abe1-f0619c753ea0","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"val possibleOrganization: String = null\nval org = Option(possibleOrganization).getOrElse(\"Unknown Organization\")"}
{"id":"4b413b3e-b414-40b1-9330-f4081a6983b5","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def javaLegacyGetPledge(status: String): DonorPledge = if status == \"confirmed\" then DonorPledge(\"Alice\", 450) else null\ncase class DonorPledge(name: String, amount: Int)\nval pledgeOpt = Option(javaLegacyGetPledge(\"pending\"))\nval donor = pledgeOpt.map(_.name).getOrElse(\"No donor found\")"}
{"id":"900c4b62-2e6a-4979-8401-1d63271d56a4","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def findVolunteerByUsername(username: String): Volunteer = if username == \"james22\" then new Volunteer(\"James\",\"james@email.com\") else null\nclass Volunteer(val name: String, val email: String)\nval volunteer = findVolunteerByUsername(\"unknown99\")\nif (volunteer == null) println(\"Volunteer not found\") else println(volunteer.name)"}
{"id":"d090c6ea-11f5-4266-8f7e-cdd1b4bc8ff4","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def getApprovedGrantOrNull(grantId: String): Grant = if grantId == \"2023-HEAL01\" then Grant(\"2023-HEAL01\", 6000) else null\ncase class Grant(grantId: String, amount: Int)\nval grant = getApprovedGrantOrNull(\"X\")\nif (grant != null) println(grant.amount) else println(0)"}
{"id":"1b94e8f4-e309-4601-bfc7-764e0f991c71","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def legacyFindDonationCampaign(id: String): String = if id == \"ENV-2304\" then \"Clean Up River\" else null\nval campaign = legacyFindDonationCampaign(\"FOOD-1002\")\nif (campaign == null) println(\"Campaign not found\")\nelse println(campaign)"}
{"id":"cd2518b7-2f45-49ec-a253-cc73ea960662","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def optionSafeDonorPhone(phoneNumber: String | Null): Option[String] = Option(phoneNumber)\nval contactOpt = optionSafeDonorPhone(null)\nval displayPhone = contactOpt.fold(\"N/A\")(_.reverse)"}
{"id":"9c419546-db2c-41e3-8ac4-37dee462396d","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def recentDonationAmountOrNull(memberId: Int): java.lang.Double = if memberId == 42 then 105.55 else null\ndef latestDonationOpt(memberId: Int): Option[Double] = Option(recentDonationAmountOrNull(memberId)).map(_.toDouble)\nval resultAmount = latestDonationOpt(7).getOrElse(0.0)"}
{"id":"58e53663-24e7-41c8-a514-6814535c62b4","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def retrieveFundraiserByTag(tag: String): Fundraiser = if tag == \"HELPCHILDREN\" then Fundraiser(\"Kids Fund\", true) else null\ncase class Fundraiser(name: String, active: Boolean)\nval fundraiser = retrieveFundraiserByTag(\"\")\nif (fundraiser != null) println(fundraiser.name) else println(\"No fundraiser found\")"}
{"id":"fcbc1269-6c28-4b50-a77e-ab31ae1b764d","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def getDonorAliasOrNull(userId: String): String = if userId == \"U789\" then \"GenerousSoul\" else null\nval donorAlias = getDonorAliasOrNull(\"U123\")\nif (donorAlias != null) println(donorAlias) else println(\"Alias not set\")"}
{"id":"936531ee-1a06-48b0-9e29-8e6c0ad672c2","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getEventTicketIdFromLegacy(eventName: String): String = if eventName == \"Gala Night\" then \"T1055\" else null\nval eventTicketOpt = Option(getEventTicketIdFromLegacy(\"Volunteer Meet\"))\nval ticketId = eventTicketOpt.getOrElse(\"No Ticket\")"}
{"id":"5a960c81-50e9-47a5-beb1-869b9862a7d4","timestamp":1746099098383,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def safeLookupCharityCode(database: Map[String, String], code: String): Option[String] = database.get(code)\nval codeOpt = safeLookupCharityCode(Map(\"AC01\" -> \"Animal Care\"), \"AC01\")\nval label = codeOpt.filter(_.contains(\"Animal\")).getOrElse(\"Unknown\")"}
{"id":"28f26805-0f13-4bc0-9914-acbcc7a0ecd1","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"case class DonorProfile(name: String, email: String)\ndef findDonorById(id: Long): Option[DonorProfile] =\n  val donor = JavaDonorRepository.getDonorProfile(id)\n  Option(donor)"}
{"id":"fe95b10f-6b03-45bc-9cfc-1335d66dbef1","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getRecentDonationAmount(donor: DonorAccount): Option[Double] =\n  Option(donor.getLastDonationAmount)"}
{"id":"9cf8649e-a006-4ab9-b886-ac047b49319a","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def increaseTarget(goalAmount: Option[Double], increment: Double): Option[Double] =\n  goalAmount.map(_ + increment)"}
{"id":"0baacacf-0a84-47d3-acec-9179717409e2","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def charityEmailOrDefault(charityId: Long): String =\n  val emailOpt = Option(CharityDirectory.findEmailByCharityId(charityId))\n  emailOpt.getOrElse(\"info@charityhub.org\")"}
{"id":"07f3ad8a-00a4-4773-bf9e-c4b84ce389d8","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def totalDonationsAbove(amount: Double, donorAmounts: List[Double]): Boolean =\n  donorAmounts.forall(_ > amount)"}
{"id":"3b51d8a4-57f1-4f12-a1a8-2433c7c493d0","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def charityLocation(charityName: String): Option[String] =\n  Option(JavaCharityService.getLocationByName(charityName))"}
{"id":"7c02a6b6-41c1-48d4-a8a2-4f1fcd24d984","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def getFundById(fundId: Long): Option[Fund] =\n  Option(LegacyFundSystem.lookupFund(fundId))"}
{"id":"72b87ee3-dad4-4dbf-9a02-4bff0a578026","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def donorNicknameLength(donor: DonorProfile): Int =\n  Option(donor.name).map(_.length).getOrElse(0)"}
{"id":"e20ac933-b73e-4836-9821-0f01cc72ac02","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def isMatchingDonationEligible(donor: Option[DonorProfile]): Boolean =\n  donor.exists(_.email.endsWith(\"@charitycorp.com\"))"}
{"id":"9bc0c06c-2303-48cc-b226-5e4aa2e1fce9","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":true,"code":"def lastDonationSummary(donor: DonorProfile): String =\n  Option(donor.email).filter(_.nonEmpty).fold(\"Email unavailable\") { email =>\n    s\"Donor email: $email\"\n  }"}
{"id":"65d9604d-c8ac-4d93-b419-dddbaa8d2e9a","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def sendThankYouEmail(donor: LegacyDonor): Unit =\n  if (donor != null && donor.email != null) {\n    EmailService.sendThankYou(donor.email)\n  }"}
{"id":"14325b1b-2916-42f5-bf20-d98388c5e36f","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def createAnonymousDonor(): DonorAccount =\n  val donor = new DonorAccount(\"Anonymous\", null)\n  donor"}
{"id":"7091f811-d766-4860-88cd-458687c8dacb","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def getFundNameUpper(fund: LegacyFund): String =\n  if (fund != null && fund.name != null)\n    fund.name.toUpperCase\n  else\n    null"}
{"id":"efabf6ac-39df-4566-b7fa-4d6fcf6dc5d4","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def setCharityMission(charity: Charity, mission: String): Unit =\n  if (charity != null)\n    charity.mission = mission\n  else\n    ()"}
{"id":"479910ef-d28f-4cbd-94dd-62031d74cc5d","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def getCharityManagerEmail(charity: LegacyCharity): String =\n  if (charity != null && charity.managerEmail != null)\n    charity.managerEmail\n  else\n    null"}
{"id":"7d7aeb7b-fcab-4b60-8e39-6d9e53d5d9f0","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def tryFindActiveEvent(eventId: Long): LegacyEvent =\n  val ev = EventRegistry.findEventById(eventId)\n  if (ev != null && ev.active)\n    ev\n  else\n    null"}
{"id":"e1ec2698-b8ec-4296-b5cb-e6e58c212d8b","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def assignSponsorToEvent(event: Event, sponsor: Sponsor): Boolean =\n  if (event != null && sponsor != null)\n    event.sponsor = sponsor\n    true\n  else\n    false"}
{"id":"b9e5cc9c-9d05-42bb-b160-9fb263773d58","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def initializeFundraiser(title: String): Fundraiser =\n  if (title != null)\n    new Fundraiser(title)\n  else\n    null"}
{"id":"89030feb-274b-4869-9b02-d2b0caa57344","timestamp":1746099111155,"category":"null_checks","topicUsed":"Charity donation platform","isIdiomatic":false,"code":"def addNoteToDonation(donation: Donation, note: String): Unit =\n  if (donation != null)\n    donation.note = note\n  else\n    ()"}
{"id":"64aa51d9-0c2d-4179-a075-a1904b5fbb7e","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class LiveScoreUpdate(teamName: String, points: Int)\ndef updateScore(existing: Option[LiveScoreUpdate], newPoints: Int): Option[LiveScoreUpdate] =\n  existing.map(lsu => lsu.copy(points = newPoints))"}
{"id":"8b116b7d-7570-43fd-b59d-e9d0d0eea655","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getCurrentGameScore(gameId: String): String = {\n    val score: String = null\n    if (score != null) score else \"Score unavailable\"\n}"}
{"id":"b92e2ec8-537f-485c-a590-c61d52cfe650","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safePlayerStats(playerId: String): Option[Int] =\n  val points: Integer = javaPlayerServicePoints(playerId) // may be null\n  Option(points).map(_.toInt)"}
{"id":"305a92b7-443c-43d5-aeee-441855a39315","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"object ScoreBoard {\n  def findMatchScoreById(matchId: String): Option[Int] =\n    val dbScore: java.lang.Integer = oldScoreDbFetch(matchId)\n    Option(dbScore).map(_.toInt)\n}"}
{"id":"2d8bd82a-35ad-40bf-b3aa-2bb8727a546e","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def setPenalty(teamName: String, penaltyPoints: Int): Unit = {\n    var existingEntry: LiveScoreEntry = getScoreEntry(teamName)\n    if (existingEntry == null) {\n        existingEntry = new LiveScoreEntry(teamName, 0)\n    }\n    existingEntry.points -= penaltyPoints\n    updateScoreEntry(existingEntry)\n}"}
{"id":"728dee6b-2cae-4752-a2b4-24ab4c284b85","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def updateLiveFeed(scoreOpt: Option[Int]): String =\n  scoreOpt.fold(\"Awaiting score...\")(score => s\"Live score: $score\")"}
{"id":"8f440f27-8ca2-4ee1-8cd0-0fed90ebe7f7","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class TeamScore(val team: String, var score: Integer) {\n    def addPoints(points: Integer): Unit = {\n        if (score == null) {\n            score = points\n        } else {\n            score = score + points\n        }\n    }\n}"}
{"id":"32fd6403-074a-418d-9ec7-649a903411ac","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def showTopScorerName(playerName: String): String = {\n    if (playerName == null) \"Name not available\" else playerName.toUpperCase()\n}"}
{"id":"e02d7d09-3435-42ea-80eb-93c07da1decf","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def findWinningTeam(scoreA: Option[Int], scoreB: Option[Int]): Option[String] =\n  for\n    a <- scoreA\n    b <- scoreB\n  yield if a > b then \"Team A\" else if b > a then \"Team B\" else \"Draw\""}
{"id":"99e0bc72-98dc-454d-9b6b-1d363ed99026","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getLiveEventStatus(eventId: String): String = {\n    val status = fetchEventStatusFromSystem(eventId) // might be null\n    if (status == null) \"Status unknown\" else status\n}"}
{"id":"e4b9735c-6e41-47bf-afe0-5600843911b8","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def fetchLiveResult(maybeScore: Option[Int]): String =\n  maybeScore.map(score => s\"Current score: $score\").getOrElse(\"No live result\")"}
{"id":"f35c50ea-f75c-44c7-b867-410fc9e97306","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def incrementScore(entry: Option[LiveScoreEntry]): Option[LiveScoreEntry] =\n  entry.map(e => e.copy(points = e.points + 1))"}
{"id":"9e57a622-1fe7-4711-bb18-88131dfbe9bc","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def nullHandlingForCoach(coachName: String): String = {\n    if (coachName == null) {\n        \"Coach info not present\"\n    } else {\n        s\"Coach: $coachName\"\n    }\n}"}
{"id":"82081b40-5e8f-4a14-a52b-0b56fccfcf40","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class ScoreUpdate(team: String, score: Int)\ndef fromLegacyApi(apiTeam: String, apiScore: Integer): Option[ScoreUpdate] =\n  Option(apiTeam).flatMap(tn => Option(apiScore).map(s => ScoreUpdate(tn, s)))"}
{"id":"e8df09fa-2f41-4d68-837b-628236177476","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getMatchWinner(teamAScore: Int, teamBScore: Int): String = {\n    var winner: String = null\n    if (teamAScore > teamBScore) {\n        winner = \"Team A\"\n    } else if (teamBScore > teamAScore) {\n        winner = \"Team B\"\n    }\n    winner\n}"}
{"id":"de466a9b-3873-4f7f-8377-5f60bb4a235d","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def maybeLatestScore(score: java.lang.Integer): Option[Int] =\n  Option(score).map(_.toInt)"}
{"id":"11ea4483-ebd8-4cb6-b565-8185a99de81f","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def teamPenaltyMessage(penalty: Integer): String = {\n    if (penalty != null && penalty > 0) {\n        s\"Team penalized by $penalty points\"\n    } else {\n        \"No penalty issued\"\n    }\n}"}
{"id":"b17761a9-2f0f-4f7d-b142-a3fc15801848","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def getActiveMatchId(possibleId: String): Option[String] =\n  Option(possibleId).filter(_.nonEmpty)"}
{"id":"c951eb44-2d26-4552-b888-df67364d7fa6","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def manualNullCheckScore(score: java.lang.Integer): Int = {\n    if (score == null) 0 else score.toInt\n}"}
{"id":"9e62b7f8-8333-4d36-af93-30991b3b69a9","timestamp":1746099127672,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def playerScoreSummary(optScore: Option[Int]): String =\n  optScore match\n    case Some(sc) if sc > 0 => s\"Player score: $sc\"\n    case _                  => \"Player has no score recorded\""}
{"id":"288f4f96-217f-46af-99bd-84a700eda3e8","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"case class MatchScore(home: Int, away: Int)\ndef fetchLiveScore(matchId: String): Option[MatchScore] = {\n  // simulate possible absence\n  if matchId == \"M123\" then Some(MatchScore(2, 3)) else None\n}\ndef getScoreSummary(matchId: String): String = {\n  fetchLiveScore(matchId)\n    .map(ms => s\"Home: ${ms.home}, Away: ${ms.away}\")\n    .getOrElse(\"Score unavailable.\")\n}"}
{"id":"0242e371-debd-4ce4-838d-b408f4b68e86","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class GoalUpdate {\n  var latestGoalScorer: String = null\n  def updateGoal(scorer: String): Unit = {\n    latestGoalScorer = scorer\n  }\n  def displayLastScorer(): String = {\n    if(latestGoalScorer != null) latestGoalScorer\n    else \"No goals yet.\"\n  }\n}"}
{"id":"0ebbb007-12a2-496b-84e3-7275f3633313","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def wrapJavaApiScore(score: String): Option[Int] = {\n  Option(score).flatMap(s => s.toIntOption)\n}"}
{"id":"f94ac3d4-1150-4d21-abf1-e5202d69d158","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getPlayerRatingApi(playerId: Int): Integer = {\n  if(playerId == 42) Integer.valueOf(7) else null\n}\ndef displayPlayerRating(playerId: Int): String = {\n  val rating = getPlayerRatingApi(playerId)\n  if(rating != null) s\"Rating: $rating\" else \"Unavailable\"\n}"}
{"id":"5ec63e4b-e3ab-4e0a-bb37-80849f286969","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeFetchTeamLogo(teamCode: String): Option[String] = Option(fetchTeamLogoFromJava(teamCode))\ndef fetchTeamLogoFromJava(teamCode: String): String = {\n  if teamCode == \"ABC\" then \"logo_url_abc\" else null\n}\ndef displayTeamLogo(teamCode: String): String = {\n  safeFetchTeamLogo(teamCode).getOrElse(\"Logo not found\")\n}"}
{"id":"1de8d181-ab8c-4733-b157-d7c7c6a2beae","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def lastScoringEvent(gameId: Long): String = {\n  val scoringEvent = getScoringEventFromLegacy(gameId)\n  if(scoringEvent != null) scoringEvent else \"No recent event\"\n}\ndef getScoringEventFromLegacy(gameId: Long): String = {\n  if(gameId == 1001L) \"Penalty by Smith\" else null\n}"}
{"id":"77b9e9fe-bdf6-458f-bd12-750336d3bfce","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def fetchLiveCommentary(eventId: Int): Option[String] = {\n  Option(javaFetchCommentary(eventId))\n}\ndef javaFetchCommentary(eventId: Int): String = {\n  if eventId == 77 then \"Corner for Home team\" else null\n}"}
{"id":"bb872912-1f5a-4eb5-9e8b-e8e2004bac5e","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def updateCurrentSetScore(currentScore: String): String = {\n  if(currentScore != null) s\"Set score: $currentScore\"\n  else \"Score data unavailable\"\n}\nval latestSetScore: String = null\nval setStatus = updateCurrentSetScore(latestSetScore)"}
{"id":"ed82ee76-8e7b-4d3d-969e-6713ec001d1c","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeFindPlayer(playerName: String): Option[Int] = {\n  players.find(_._1 == playerName).map(_._2)\n}\nval players = List((\"Jordan\", 24), (\"Kobe\", 8))\nval maybeNumber = safeFindPlayer(\"LeBron\")\nval result = maybeNumber.fold(\"Player not found\")(n => s\"Number: $n\")"}
{"id":"1fc5df36-43c4-4ffd-819b-cdc9ac53d7bf","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"object LeagueLiveFeed {\n  var updateTimestamp: java.sql.Timestamp = null\n  def setTimestamp(ts: java.sql.Timestamp): Unit = updateTimestamp = ts\n  def getLastUpdateTime: String = {\n    if(updateTimestamp != null) updateTimestamp.toString\n    else \"No updates yet\"\n  }\n}"}
{"id":"fcdc0232-36af-4926-a5c2-ad1071b74918","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeTopScorer(team: String): Option[String] = {\n  val scores = Map(\"Wolves\" -> \"Jimenez\", \"Arsenal\" -> \"Saka\")\n  scores.get(team)\n}\nval gs = safeTopScorer(\"Chelsea\").getOrElse(\"Unknown\")"}
{"id":"871fe9ab-518c-4896-9bbd-991bc624a61b","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getCurrentQuarterScore(gameId: Int): String = {\n  val qScore: String = fetchQuarterScore(gameId)\n  if(qScore != null) qScore else \"No score found\"\n}\ndef fetchQuarterScore(gameId: Int): String = if(gameId == 888) \"20-18\" else null\nval displayQuarter = getCurrentQuarterScore(888)"}
{"id":"811a9831-4848-4cb4-81fa-09c9102f10e6","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def maybeAssistLeader(team: String): Option[String] = teamStats.get(team).flatMap(_.get(\"assists\"))\nval teamStats = Map(\"Heat\" -> Map(\"assists\" -> \"Lowry\"))\nval assistLeaderDisplay = maybeAssistLeader(\"Celtics\").getOrElse(\"No leader data\")"}
{"id":"f3909746-9616-4732-be95-50a3203bde40","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def getScoreFromExternal(matchCode: String): String = {\n  val score = externalAPIScore(matchCode)\n  if(score != null) score else \"No external data\"\n}\ndef externalAPIScore(matchCode: String): String = if(matchCode == \"BB32\") \"4-0\" else null"}
{"id":"7c2aa8e3-79c7-4b75-a5ee-350e57496632","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeUpdateScore(score: String): Option[Int] = Option(score).flatMap(_.toIntOption)\nval livePointsOpt = safeUpdateScore(null)\nval defaultPoints = livePointsOpt.getOrElse(0)"}
{"id":"6efa6c4b-3327-403b-8a8b-86788ec3bf83","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"class FanNotification {\n  var notification: String = null\n  def setNotification(msg: String): Unit = notification = msg\n  def getNotification: String = {\n    if (notification != null) notification\n    else \"No news to display\"\n  }\n}"}
{"id":"05dedc74-4356-4e96-adb6-9e7b675afa04","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def getTeamStandings(team: String): Option[Int] = {\n  standings.get(team)\n}\nval standings = Map(\"Sharks\" -> 1, \"Kings\" -> 4)\nval description = getTeamStandings(\"Penguins\").fold(\"No standing info\")(p => s\"Standing: $p\")"}
{"id":"a69c570b-d001-428c-9c19-edb86fbb29ca","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def displayFinalWhistle(msg: String): String = {\n  if(msg != null) s\"Final: $msg\" else \"No final information available.\"\n}\nval endMessage: String = null\ndisplayFinalWhistle(endMessage)"}
{"id":"2c429d11-9881-4df1-8760-2314946c415e","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":true,"code":"def safeFetchLiveFeed(feedId: Int): Option[String] = Option(javaLiveFeed(feedId))\ndef javaLiveFeed(feedId: Int): String = if(feedId == 7) \"Live: Kick-off\" else null\nval status = safeFetchLiveFeed(14).getOrElse(\"No live updates\")"}
{"id":"36d73054-90a0-48d7-81bb-b780a75ab141","timestamp":1746099151428,"category":"null_checks","topicUsed":"Sports score live updating","isIdiomatic":false,"code":"def updatePlayerInjuryStatus(name: String): String = {\n  val status: String = getInjuryStatusFromJava(name)\n  if(status != null) s\"Injury: $status\" else \"No info\"\n}\ndef getInjuryStatusFromJava(name: String): String = if(name == \"Messi\") \"Hamstring\" else null"}
{"id":"0788dc43-de75-4c07-8d49-6d843cfd772c","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Vehicle(id: String, model: String, year: Int)\ndef findVehicleById(id: String): Option[Vehicle] =\n  fleet.find(_.id == id)\ndef getVehicleModel(id: String): String =\n  findVehicleById(id).map(_.model).getOrElse(\"Unknown\")"}
{"id":"977d8545-cc21-43d4-8e65-c545fc3537af","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getPickupLocationOrNull(reservationId: String): String =\n  val loc = legacyFindPickupLocation(reservationId)\n  if (loc == null) null else loc\ndef legacyFindPickupLocation(id: String): String =\n  if (id == \"0\") null else \"Downtown Lot\""}
{"id":"06dab5d6-2136-456c-8a0a-56464ce400f4","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class Customer(id: String, name: String)\ndef getCustomerEmail(customer: Customer): Option[String] =\n  val email = legacyCustomerEmailService(customer.id)\n  Option(email)\ndef legacyCustomerEmailService(id: String): String =\n  if (id == \"guest\") null else s\"$id@email.com\""}
{"id":"ef0e1f86-5083-4e43-98ee-1e35de9e1bea","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class RentalAgent(var name: String)\ndef updateRentalAgentName(agent: RentalAgent, newName: String): Unit =\n  if (agent != null) agent.name = newName"}
{"id":"6d9c0eef-098d-4eb9-88f4-6bab55420b1b","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def findCurrentRental(vehicleId: String): Option[String] =\n  Option(legacyCurrentRental(vehicleId))\ndef legacyCurrentRental(id: String): String =\n  if (id == \"unavailable\") null else \"RNT12345\""}
{"id":"d9a6a5b4-557b-480a-a364-2d9ba74fd924","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def cancelReservationOrNull(reservationId: String): String =\n  val result = legacyCancelReservation(reservationId)\n  if (result == null) null else result\ndef legacyCancelReservation(id: String): String =\n  if (id == \"none\") null else \"Canceled\""}
{"id":"90817c3c-b34d-43e8-a6b5-1e4800dffa48","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class RentalContract(contractId: String)\ndef safeGetRentalContract(id: String): Option[RentalContract] =\n  Option(findRentalContractOrNull(id))\ndef findRentalContractOrNull(id: String): RentalContract =\n  if (id.isEmpty) null else RentalContract(id)"}
{"id":"3f4a6d34-4e7c-465a-9c6b-f36a28196ead","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def isVehicleRegistered(vehicle: Vehicle): Boolean =\n  if (vehicle != null && vehicle.id != null) true else false"}
{"id":"03cba127-3511-4033-a854-20629b75921d","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getOptionalInsurance(customerId: String): Option[String] =\n  Option(legacyInsuranceLookup(customerId))\ndef legacyInsuranceLookup(id: String): String =\n  if (id == \"no_insurance\") null else \"FullCoverage\""}
{"id":"fcad77fd-d263-4ffd-9780-13ca9fac51e2","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def assignVehicleToCustomer(vehicle: Vehicle, customer: Customer): Unit =\n  if (vehicle == null || customer == null) ()\n  else println(s\"Assigned ${vehicle.model} to ${customer.name}\")"}
{"id":"401c57c5-aebb-4e78-988d-867dc60829f1","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getReservationStatus(reservationId: String): Option[String] =\n  Option(simulateReservationStatusApi(reservationId))\ndef simulateReservationStatusApi(id: String): String =\n  if (id == \"expired\") null else \"Active\""}
{"id":"f573d4c7-8068-46ac-b5fa-7da7f4a25119","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def updateFleetLocation(vehicle: Vehicle, location: String): Unit =\n  if (vehicle != null) vehicleToLocation.update(vehicle.id, location)\nval vehicleToLocation = scala.collection.mutable.Map[String, String]()"}
{"id":"95dd7969-40bd-4b4b-939b-c3bb93b429c5","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getFleetManagerContact(fleetId: String): Option[String] =\n  Option(javaLikeManagerContactGetter(fleetId))\ndef javaLikeManagerContactGetter(id: String): String =\n  if (id == \"not_found\") null else \"manager@carrental.com\""}
{"id":"f6ac0010-915d-453e-b8ff-5daff7c025a2","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def recordRentalEndDate(rentalId: String, endDate: String): Unit =\n  if (rentalId != null && endDate != null)\n    println(s\"Ending rental $rentalId at $endDate\")"}
{"id":"cc008719-3e91-4970-a6b7-0c0c8cb514e1","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getAvailableUpgrade(vehicleClass: String): Option[String] =\n  Option(checkUpgradeAvailability(vehicleClass))\ndef checkUpgradeAvailability(cls: String): String =\n  if (cls == \"Luxury\") null else \"SUV\""}
{"id":"4ea4dbb8-12f0-4b43-bd90-7cf41128df37","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getBillingAddressOrNull(customer: Customer): String =\n  val addr = findBillingAddress(customer.id)\n  if (addr == null) null else addr\ndef findBillingAddress(customerId: String): String =\n  if (customerId == \"missing\") null else \"123 Main St\""}
{"id":"87197555-8b44-40aa-a949-6247eb5014aa","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def notifyCustomerAboutMaintenance(vehicleId: String): Option[String] =\n  Option(getNotificationMessage(vehicleId)).map(msg => s\"Notify: $msg\")\ndef getNotificationMessage(id: String): String =\n  if (id == \"no_notify\") null else s\"Maintenance scheduled for $id\""}
{"id":"135a173c-af00-4969-8a65-0f2c5063f866","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def setContractExpiration(contract: RentalContract, date: String): Unit =\n  if (contract != null) println(s\"Set expiration to $date for ${contract.contractId}\")"}
{"id":"1778df46-d6a2-4eed-91b3-66ad705994f6","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def validateDriverLicense(licenseId: String): Option[String] =\n  Option(legacyLicenseValidator(licenseId)).filter(_.nonEmpty)\ndef legacyLicenseValidator(id: String): String =\n  if (id == \"bad\") null else \"VALID\""}
{"id":"57e62a36-90f5-4b13-bf0d-c8863b6b0b67","timestamp":1746099167646,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def increaseLoyaltyPoints(customer: Customer, points: Integer): Unit =\n  if (customer != null && points != null) loyaltyPoints.update(customer.id, points)\nval loyaltyPoints = scala.collection.mutable.Map[String, Integer]()"}
{"id":"dd17b758-30d2-42b8-a725-0a18a1196651","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"case class RentalCar(licensePlate: String, make: String, model: String)\ndef getFleetCarOption(cars: List[RentalCar], plate: String): Option[RentalCar] =\n  cars.find(_.licensePlate == plate)"}
{"id":"8e5f4c0e-b83f-4e96-bdbe-b9dce37341e8","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"object ReservationUtils:\n  def extractCustomerId(reservation: Reservation): Option[String] =\n    Option(reservation.customer).flatMap(customer => Option(customer.id))\nclass Customer(val id: String)\nclass Reservation(val customer: Customer)"}
{"id":"f0c724bb-ecb7-45bb-a6b1-798dbc97a578","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def fetchAvailableCar(carId: String): Car =\n  val carDb = Map(\"C123\" -> new Car(\"C123\", \"Tesla\"))\n  if (carDb.contains(carId)) carDb(carId)\n  else null\nclass Car(val id: String, val brand: String)"}
{"id":"1eb7f53c-a8d4-4ebd-8826-cf844d3e9979","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class Booking(val car: Car)\ndef getCarMake(booking: Booking): String =\n  if (booking != null && booking.car != null) booking.car.brand\n  else \"Unknown\""}
{"id":"7ae9983f-b9d3-4b0d-97c1-db8c3a72c8ce","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def findFleetLocation(car: RentalCar): Option[String] =\n  Option(car.parkingSpot)"}
{"id":"75e4f4f3-bdf6-4657-b392-2f4ced91657c","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getInsuranceDetails(rentalAgreement: RentalAgreement): Option[Insurance] =\n  Option(rentalAgreement.insurance)\nclass Insurance(val policyNumber: String)\nclass RentalAgreement(val insurance: Insurance)"}
{"id":"634f79b3-dbff-4e3d-baaa-cd1ddc3c0b6f","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"class Staff(val name: String)\ndef getAssignedManager(branch: Branch): Staff =\n  if (branch.manager != null) branch.manager\n  else null\nclass Branch(val manager: Staff)"}
{"id":"9657a7bc-d640-41f1-876f-87bab2b3ee01","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def returnOdometerReading(car: RentalCar): java.lang.Integer =\n  if (car.odometer == null) null\n  else car.odometer\nclass RentalCar(val odometer: java.lang.Integer)"}
{"id":"87f8bf46-71d3-469d-9fc7-1c639d88d454","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getFleetVehicleOption(fleet: List[Car], requiredType: String): Option[Car] =\n  fleet.find(_.carType == requiredType)\nclass Car(val carType: String)"}
{"id":"d8d03d02-4690-4613-a2fb-4b672a42a05f","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getRentalStartDate(rental: Rental): Option[java.time.LocalDate] =\n  Option(rental.startDate)\nclass Rental(val startDate: java.time.LocalDate)"}
{"id":"254bfbac-8c5b-41b4-8590-130699cd4080","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def cancelReservation(reservation: Reservation): Boolean =\n  if (reservation == null) false\n  else\n    reservation.cancelled = true\n    true\nclass Reservation(var cancelled: Boolean)"}
{"id":"cd9597b3-8e99-49f8-9701-b61ab49d1ebe","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getLatestDriver(assignment: DriverAssignment): Option[Driver] =\n  Option(assignment.driver)\nclass Driver(val name: String)\nclass DriverAssignment(val driver: Driver)"}
{"id":"155ae519-832b-4f70-b8d5-b42193ec0593","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getPromotionDetails(promoCode: String): Promotion =\n  if (promoCode == null) null\n  else\n    new Promotion(promoCode, 10)\nclass Promotion(val code: String, val discount: Int)"}
{"id":"4574a708-d35d-4835-b516-eaf98f4ba23c","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def extractLicensePlate(car: RentalCar): Option[String] =\n  Option(car.licensePlate)\nclass RentalCar(val licensePlate: String)"}
{"id":"4787efd8-4253-4a96-9a74-0723b0e71ba4","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def findReservationHolder(reservation: Reservation): Staff =\n  if (reservation.staff != null) reservation.staff\n  else null\nclass Reservation(val staff: Staff)\nclass Staff(val name: String)"}
{"id":"1239e773-70b5-404a-bd66-cc25914939af","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getActiveReservationOption(rentals: List[Reservation]): Option[Reservation] =\n  rentals.find(_.status == \"Active\")\nclass Reservation(val status: String)"}
{"id":"37872fdf-ff91-46ae-8b12-92801e1a106b","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def lastServiceDate(vehicle: FleetCar): java.time.LocalDate =\n  if (vehicle == null || vehicle.lastService == null) null\n  else vehicle.lastService\nclass FleetCar(val lastService: java.time.LocalDate)"}
{"id":"282e626a-f6b0-4c3d-9857-692800aeb964","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getBranchLocation(branch: Branch): Option[String] =\n  Option(branch.address)\nclass Branch(val address: String)"}
{"id":"b0a4c33b-fca0-4b1c-bd33-145875694673","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":false,"code":"def getRentalPrice(rate: RentalRate): java.lang.Double =\n  if (rate.price == null) null else rate.price\nclass RentalRate(val price: java.lang.Double)"}
{"id":"8e4f0133-dbbc-4b4d-b058-d10c17cc225e","timestamp":1746099202683,"category":"null_checks","topicUsed":"Car rental fleet management","isIdiomatic":true,"code":"def getOptionalLoyaltyId(customer: Customer): Option[String] =\n  Option(customer.loyaltyId)\nclass Customer(val loyaltyId: String)"}
